
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004994  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b94  08004b94  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b94  08004b94  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b94  08004b94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08004c0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004c0c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010316  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208c  00000000  00000000  000303b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00032448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  000331c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a827  00000000  00000000  00033e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6ee  00000000  00000000  0005e677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106ea1  00000000  00000000  0006cd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa4  00000000  00000000  00173c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004b3c 	.word	0x08004b3c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08004b3c 	.word	0x08004b3c

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2uiz>:
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	d211      	bcs.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d4:	d211      	bcs.n	80007fa <__aeabi_d2uiz+0x2e>
 80007d6:	d50d      	bpl.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e0:	d40e      	bmi.n	8000800 <__aeabi_d2uiz+0x34>
 80007e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ee:	fa23 f002 	lsr.w	r0, r3, r2
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007fe:	d102      	bne.n	8000806 <__aeabi_d2uiz+0x3a>
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	4770      	bx	lr
 8000806:	f04f 0000 	mov.w	r0, #0
 800080a:	4770      	bx	lr

0800080c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000816:	2003      	movs	r0, #3
 8000818:	f000 f960 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081c:	2000      	movs	r0, #0
 800081e:	f000 f80d 	bl	800083c <HAL_InitTick>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	e001      	b.n	8000832 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800082e:	f003 ff0b 	bl	8004648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000832:	79fb      	ldrb	r3, [r7, #7]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000844:	2300      	movs	r3, #0
 8000846:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_InitTick+0x6c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d023      	beq.n	8000898 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_InitTick+0x70>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_InitTick+0x6c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f96d 	bl	8000b46 <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10f      	bne.n	8000892 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d809      	bhi.n	800088c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f937 	bl	8000af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_InitTick+0x74>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e007      	b.n	800089c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e004      	b.n	800089c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	e001      	b.n	800089c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000004 	.word	0x20000004
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000000 	.word	0x20000000

080008b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_IncTick+0x20>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_IncTick+0x24>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_IncTick+0x24>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000004 	.word	0x20000004
 80008d8:	2000009c 	.word	0x2000009c

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <HAL_GetTick+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2000009c 	.word	0x2000009c

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff ffee 	bl	80008dc <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800091a:	bf00      	nop
 800091c:	f7ff ffde 	bl	80008dc <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000004 	.word	0x20000004

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4907      	ldr	r1, [pc, #28]	; (80009d8 <__NVIC_EnableIRQ+0x38>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	; (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	; 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	; 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f7ff ff8e 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff29 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff3e 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff8e 	bl	8000a30 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5d 	bl	80009dc <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff31 	bl	80009a0 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa2 	bl	8000a98 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e014      	b.n	8000b9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d105      	bne.n	8000b86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f003 fd85 	bl	8004690 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2202      	movs	r2, #2
 8000b8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2201      	movs	r2, #1
 8000b96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	795b      	ldrb	r3, [r3, #5]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d101      	bne.n	8000bc2 <HAL_DAC_Start_DMA+0x1e>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	e0ab      	b.n	8000d1a <HAL_DAC_Start_DMA+0x176>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2202      	movs	r2, #2
 8000bcc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d12f      	bne.n	8000c34 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4a52      	ldr	r2, [pc, #328]	; (8000d24 <HAL_DAC_Start_DMA+0x180>)
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	4a51      	ldr	r2, [pc, #324]	; (8000d28 <HAL_DAC_Start_DMA+0x184>)
 8000be2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a50      	ldr	r2, [pc, #320]	; (8000d2c <HAL_DAC_Start_DMA+0x188>)
 8000bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000bfa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d013      	beq.n	8000c2a <HAL_DAC_Start_DMA+0x86>
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d845      	bhi.n	8000c94 <HAL_DAC_Start_DMA+0xf0>
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_DAC_Start_DMA+0x72>
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d005      	beq.n	8000c20 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000c14:	e03e      	b.n	8000c94 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	613b      	str	r3, [r7, #16]
        break;
 8000c1e:	e03c      	b.n	8000c9a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	330c      	adds	r3, #12
 8000c26:	613b      	str	r3, [r7, #16]
        break;
 8000c28:	e037      	b.n	8000c9a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3310      	adds	r3, #16
 8000c30:	613b      	str	r3, [r7, #16]
        break;
 8000c32:	e032      	b.n	8000c9a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4a3d      	ldr	r2, [pc, #244]	; (8000d30 <HAL_DAC_Start_DMA+0x18c>)
 8000c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	4a3c      	ldr	r2, [pc, #240]	; (8000d34 <HAL_DAC_Start_DMA+0x190>)
 8000c42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	4a3b      	ldr	r2, [pc, #236]	; (8000d38 <HAL_DAC_Start_DMA+0x194>)
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c5a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	2b08      	cmp	r3, #8
 8000c60:	d013      	beq.n	8000c8a <HAL_DAC_Start_DMA+0xe6>
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d817      	bhi.n	8000c98 <HAL_DAC_Start_DMA+0xf4>
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_DAC_Start_DMA+0xd2>
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d005      	beq.n	8000c80 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000c74:	e010      	b.n	8000c98 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3314      	adds	r3, #20
 8000c7c:	613b      	str	r3, [r7, #16]
        break;
 8000c7e:	e00c      	b.n	8000c9a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3318      	adds	r3, #24
 8000c86:	613b      	str	r3, [r7, #16]
        break;
 8000c88:	e007      	b.n	8000c9a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	331c      	adds	r3, #28
 8000c90:	613b      	str	r3, [r7, #16]
        break;
 8000c92:	e002      	b.n	8000c9a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000c94:	bf00      	nop
 8000c96:	e000      	b.n	8000c9a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000c98:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d111      	bne.n	8000cc4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000cae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6898      	ldr	r0, [r3, #8]
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	f000 facf 	bl	800125c <HAL_DMA_Start_IT>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	75fb      	strb	r3, [r7, #23]
 8000cc2:	e010      	b.n	8000ce6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000cd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	68d8      	ldr	r0, [r3, #12]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	f000 fabd 	bl	800125c <HAL_DMA_Start_IT>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6819      	ldr	r1, [r3, #0]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	f003 0310 	and.w	r3, r3, #16
 8000cfe:	2201      	movs	r2, #1
 8000d00:	409a      	lsls	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e005      	b.n	8000d18 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	f043 0204 	orr.w	r2, r3, #4
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08000ff9 	.word	0x08000ff9
 8000d28:	0800101b 	.word	0x0800101b
 8000d2c:	08001037 	.word	0x08001037
 8000d30:	080010a1 	.word	0x080010a1
 8000d34:	080010c3 	.word	0x080010c3
 8000d38:	080010df 	.word	0x080010df

08000d3c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	795b      	ldrb	r3, [r3, #5]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d101      	bne.n	8000d94 <HAL_DAC_ConfigChannel+0x1c>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e12a      	b.n	8000fea <HAL_DAC_ConfigChannel+0x272>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2201      	movs	r2, #1
 8000d98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d174      	bne.n	8000e92 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000da8:	f7ff fd98 	bl	80008dc <HAL_GetTick>
 8000dac:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d134      	bne.n	8000e1e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000db4:	e011      	b.n	8000dda <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000db6:	f7ff fd91 	bl	80008dc <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d90a      	bls.n	8000dda <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	f043 0208 	orr.w	r2, r3, #8
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e107      	b.n	8000fea <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e6      	bne.n	8000db6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fd83 	bl	80008f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	69d2      	ldr	r2, [r2, #28]
 8000df6:	641a      	str	r2, [r3, #64]	; 0x40
 8000df8:	e01e      	b.n	8000e38 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000dfa:	f7ff fd6f 	bl	80008dc <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d90a      	bls.n	8000e1e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	f043 0208 	orr.w	r2, r3, #8
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2203      	movs	r2, #3
 8000e18:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e0e5      	b.n	8000fea <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	dbe8      	blt.n	8000dfa <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff fd63 	bl	80008f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	69d2      	ldr	r2, [r2, #28]
 8000e36:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	ea02 0103 	and.w	r1, r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	6a1a      	ldr	r2, [r3, #32]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	21ff      	movs	r1, #255	; 0xff
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	ea02 0103 	and.w	r1, r2, r3
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f003 0310 	and.w	r3, r3, #16
 8000e88:	409a      	lsls	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d11d      	bne.n	8000ed6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	221f      	movs	r2, #31
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000edc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6819      	ldr	r1, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	400a      	ands	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f7a:	d104      	bne.n	8000f86 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	e018      	b.n	8000fb8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d104      	bne.n	8000f98 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e00f      	b.n	8000fb8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000f98:	f001 fb76 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 8000f9c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_DAC_ConfigChannel+0x27c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d904      	bls.n	8000fb0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e003      	b.n	8000fb8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fb6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	22c0      	movs	r2, #192	; 0xc0
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	400a      	ands	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	04c4b400 	.word	0x04c4b400

08000ff8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f7ff fe98 	bl	8000d3c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2201      	movs	r2, #1
 8001010:	711a      	strb	r2, [r3, #4]
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff fe91 	bl	8000d50 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	f043 0204 	orr.w	r2, r3, #4
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff fe87 	bl	8000d64 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2201      	movs	r2, #1
 800105a:	711a      	strb	r2, [r3, #4]
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff ffd8 	bl	8001064 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2201      	movs	r2, #1
 80010b8:	711a      	strb	r2, [r3, #4]
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff ffd1 	bl	8001078 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	f043 0204 	orr.w	r2, r3, #4
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff ffc7 	bl	800108c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2201      	movs	r2, #1
 8001102:	711a      	strb	r2, [r3, #4]
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e08d      	b.n	800123a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b47      	ldr	r3, [pc, #284]	; (8001244 <HAL_DMA_Init+0x138>)
 8001126:	429a      	cmp	r2, r3
 8001128:	d80f      	bhi.n	800114a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4b45      	ldr	r3, [pc, #276]	; (8001248 <HAL_DMA_Init+0x13c>)
 8001132:	4413      	add	r3, r2
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <HAL_DMA_Init+0x140>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	009a      	lsls	r2, r3, #2
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a42      	ldr	r2, [pc, #264]	; (8001250 <HAL_DMA_Init+0x144>)
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
 8001148:	e00e      	b.n	8001168 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4b40      	ldr	r3, [pc, #256]	; (8001254 <HAL_DMA_Init+0x148>)
 8001152:	4413      	add	r3, r2
 8001154:	4a3d      	ldr	r2, [pc, #244]	; (800124c <HAL_DMA_Init+0x140>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	009a      	lsls	r2, r3, #2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a3c      	ldr	r2, [pc, #240]	; (8001258 <HAL_DMA_Init+0x14c>)
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2202      	movs	r2, #2
 800116c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800117e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001182:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800118c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f9b6 	bl	800152c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011c8:	d102      	bne.n	80011d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011e4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d010      	beq.n	8001210 <HAL_DMA_Init+0x104>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d80c      	bhi.n	8001210 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f9d6 	bl	80015a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	e008      	b.n	8001222 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020407 	.word	0x40020407
 8001248:	bffdfff8 	.word	0xbffdfff8
 800124c:	cccccccd 	.word	0xcccccccd
 8001250:	40020000 	.word	0x40020000
 8001254:	bffdfbf8 	.word	0xbffdfbf8
 8001258:	40020400 	.word	0x40020400

0800125c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HAL_DMA_Start_IT+0x20>
 8001278:	2302      	movs	r3, #2
 800127a:	e066      	b.n	800134a <HAL_DMA_Start_IT+0xee>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d155      	bne.n	800133c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2202      	movs	r2, #2
 8001294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 f8fb 	bl	80014b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d008      	beq.n	80012d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 020e 	orr.w	r2, r2, #14
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e00f      	b.n	80012f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0204 	bic.w	r2, r2, #4
 80012e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 020a 	orr.w	r2, r2, #10
 80012f2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001310:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001328:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0201 	orr.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e005      	b.n	8001348 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001344:	2302      	movs	r3, #2
 8001346:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001348:	7dfb      	ldrb	r3, [r7, #23]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f003 031c 	and.w	r3, r3, #28
 8001372:	2204      	movs	r2, #4
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d026      	beq.n	80013cc <HAL_DMA_IRQHandler+0x7a>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d021      	beq.n	80013cc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d107      	bne.n	80013a6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0204 	bic.w	r2, r2, #4
 80013a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 021c 	and.w	r2, r3, #28
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	2104      	movs	r1, #4
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d071      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80013ca:	e06c      	b.n	80014a6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	f003 031c 	and.w	r3, r3, #28
 80013d4:	2202      	movs	r2, #2
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02e      	beq.n	800143e <HAL_DMA_IRQHandler+0xec>
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d029      	beq.n	800143e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10b      	bne.n	8001410 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 020a 	bic.w	r2, r2, #10
 8001406:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	f003 021c 	and.w	r2, r3, #28
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	2102      	movs	r1, #2
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	2b00      	cmp	r3, #0
 8001432:	d038      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800143c:	e033      	b.n	80014a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 031c 	and.w	r3, r3, #28
 8001446:	2208      	movs	r2, #8
 8001448:	409a      	lsls	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d02a      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x156>
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d025      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 020e 	bic.w	r2, r2, #14
 800146a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f003 021c 	and.w	r2, r3, #28
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014a6:	bf00      	nop
 80014a8:	bf00      	nop
}
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014c6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014d8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f003 021c 	and.w	r2, r3, #28
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d108      	bne.n	8001510 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800150e:	e007      	b.n	8001520 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	60da      	str	r2, [r3, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800153c:	429a      	cmp	r2, r3
 800153e:	d80a      	bhi.n	8001556 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800154c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6493      	str	r3, [r2, #72]	; 0x48
 8001554:	e007      	b.n	8001566 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	009a      	lsls	r2, r3, #2
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001560:	4413      	add	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	3b08      	subs	r3, #8
 800156e:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800157c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2201      	movs	r2, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40020407 	.word	0x40020407
 800159c:	4002081c 	.word	0x4002081c
 80015a0:	cccccccd 	.word	0xcccccccd
 80015a4:	40020880 	.word	0x40020880

080015a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a08      	ldr	r2, [pc, #32]	; (80015ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2201      	movs	r2, #1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	1000823f 	.word	0x1000823f
 80015ec:	40020940 	.word	0x40020940

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e166      	b.n	80018ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8158 	beq.w	80018c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d005      	beq.n	8001630 <HAL_GPIO_Init+0x40>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d130      	bne.n	8001692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001666:	2201      	movs	r2, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 0201 	and.w	r2, r3, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b03      	cmp	r3, #3
 800169c:	d017      	beq.n	80016ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d123      	bne.n	8001722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0203 	and.w	r2, r3, #3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80b2 	beq.w	80018c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001764:	4b61      	ldr	r3, [pc, #388]	; (80018ec <HAL_GPIO_Init+0x2fc>)
 8001766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001768:	4a60      	ldr	r2, [pc, #384]	; (80018ec <HAL_GPIO_Init+0x2fc>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6613      	str	r3, [r2, #96]	; 0x60
 8001770:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <HAL_GPIO_Init+0x2fc>)
 8001772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800177c:	4a5c      	ldr	r2, [pc, #368]	; (80018f0 <HAL_GPIO_Init+0x300>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a6:	d02b      	beq.n	8001800 <HAL_GPIO_Init+0x210>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_GPIO_Init+0x304>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d025      	beq.n	80017fc <HAL_GPIO_Init+0x20c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <HAL_GPIO_Init+0x308>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d01f      	beq.n	80017f8 <HAL_GPIO_Init+0x208>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a50      	ldr	r2, [pc, #320]	; (80018fc <HAL_GPIO_Init+0x30c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d019      	beq.n	80017f4 <HAL_GPIO_Init+0x204>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a4f      	ldr	r2, [pc, #316]	; (8001900 <HAL_GPIO_Init+0x310>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d013      	beq.n	80017f0 <HAL_GPIO_Init+0x200>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <HAL_GPIO_Init+0x314>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00d      	beq.n	80017ec <HAL_GPIO_Init+0x1fc>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a4d      	ldr	r2, [pc, #308]	; (8001908 <HAL_GPIO_Init+0x318>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x31c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d101      	bne.n	80017e4 <HAL_GPIO_Init+0x1f4>
 80017e0:	2307      	movs	r3, #7
 80017e2:	e00e      	b.n	8001802 <HAL_GPIO_Init+0x212>
 80017e4:	2308      	movs	r3, #8
 80017e6:	e00c      	b.n	8001802 <HAL_GPIO_Init+0x212>
 80017e8:	2306      	movs	r3, #6
 80017ea:	e00a      	b.n	8001802 <HAL_GPIO_Init+0x212>
 80017ec:	2305      	movs	r3, #5
 80017ee:	e008      	b.n	8001802 <HAL_GPIO_Init+0x212>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e006      	b.n	8001802 <HAL_GPIO_Init+0x212>
 80017f4:	2303      	movs	r3, #3
 80017f6:	e004      	b.n	8001802 <HAL_GPIO_Init+0x212>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x212>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_GPIO_Init+0x212>
 8001800:	2300      	movs	r3, #0
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	f002 0203 	and.w	r2, r2, #3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4093      	lsls	r3, r2
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001812:	4937      	ldr	r1, [pc, #220]	; (80018f0 <HAL_GPIO_Init+0x300>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001820:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_GPIO_Init+0x320>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001844:	4a32      	ldr	r2, [pc, #200]	; (8001910 <HAL_GPIO_Init+0x320>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_GPIO_Init+0x320>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800186e:	4a28      	ldr	r2, [pc, #160]	; (8001910 <HAL_GPIO_Init+0x320>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_GPIO_Init+0x320>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001898:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <HAL_GPIO_Init+0x320>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_GPIO_Init+0x320>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <HAL_GPIO_Init+0x320>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f ae91 	bne.w	8001600 <HAL_GPIO_Init+0x10>
  }
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	48000800 	.word	0x48000800
 80018fc:	48000c00 	.word	0x48000c00
 8001900:	48001000 	.word	0x48001000
 8001904:	48001400 	.word	0x48001400
 8001908:	48001800 	.word	0x48001800
 800190c:	48001c00 	.word	0x48001c00
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001930:	e002      	b.n	8001938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_PWREx_GetVoltageRange+0x3c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001954:	d102      	bne.n	800195c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195a:	e00b      	b.n	8001974 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_PWREx_GetVoltageRange+0x3c>)
 800195e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196a:	d102      	bne.n	8001972 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800196c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001970:	e000      	b.n	8001974 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001972:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40007000 	.word	0x40007000

08001984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d141      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800199a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199e:	d131      	bne.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019a0:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019a6:	4a46      	ldr	r2, [pc, #280]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b8:	4a41      	ldr	r2, [pc, #260]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80019c0:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2232      	movs	r2, #50	; 0x32
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	4a3f      	ldr	r2, [pc, #252]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	0c9b      	lsrs	r3, r3, #18
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d6:	e002      	b.n	80019de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3b01      	subs	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ea:	d102      	bne.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f2      	bne.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f2:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fe:	d158      	bne.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e057      	b.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a14:	e04d      	b.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1c:	d141      	bne.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2a:	d131      	bne.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2232      	movs	r2, #50	; 0x32
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9b      	lsrs	r3, r3, #18
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a62:	e002      	b.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d102      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f2      	bne.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d112      	bne.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e011      	b.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001aa0:	e007      	b.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	431bde83 	.word	0x431bde83

08001acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f000 bc16 	b.w	800230c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ae0:	4ba0      	ldr	r3, [pc, #640]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aea:	4b9e      	ldr	r3, [pc, #632]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80e4 	beq.w	8001cca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d007      	beq.n	8001b18 <HAL_RCC_OscConfig+0x4c>
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	f040 808b 	bne.w	8001c26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	f040 8087 	bne.w	8001c26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b18:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x64>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e3ed      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1a      	ldr	r2, [r3, #32]
 8001b34:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <HAL_RCC_OscConfig+0x7e>
 8001b40:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	e005      	b.n	8001b56 <HAL_RCC_OscConfig+0x8a>
 8001b4a:	4b86      	ldr	r3, [pc, #536]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d223      	bcs.n	8001ba2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fd9e 	bl	80026a0 <RCC_SetFlashLatencyFromMSIRange>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e3ce      	b.n	800230c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6e:	4b7d      	ldr	r3, [pc, #500]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7c      	ldr	r2, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b7a      	ldr	r3, [pc, #488]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4977      	ldr	r1, [pc, #476]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8c:	4b75      	ldr	r3, [pc, #468]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	4972      	ldr	r1, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
 8001ba0:	e025      	b.n	8001bee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba2:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6f      	ldr	r2, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	496a      	ldr	r1, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4965      	ldr	r1, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fd5e 	bl	80026a0 <RCC_SetFlashLatencyFromMSIRange>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e38e      	b.n	800230c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bee:	f000 fcbf 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b5b      	ldr	r3, [pc, #364]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	495a      	ldr	r1, [pc, #360]	; (8001d68 <HAL_RCC_OscConfig+0x29c>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_OscConfig+0x2a0>)
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c0e:	4b58      	ldr	r3, [pc, #352]	; (8001d70 <HAL_RCC_OscConfig+0x2a4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fe12 	bl	800083c <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d052      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	e372      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d032      	beq.n	8001c94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c2e:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c3a:	f7fe fe4f 	bl	80008dc <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c42:	f7fe fe4b 	bl	80008dc <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e35b      	b.n	800230c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c54:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	493a      	ldr	r1, [pc, #232]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
 8001c92:	e01a      	b.n	8001cca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c94:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fe1c 	bl	80008dc <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca8:	f7fe fe18 	bl	80008dc <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e328      	b.n	800230c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1dc>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d073      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x21c>
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d10e      	bne.n	8001d00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10b      	bne.n	8001d00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d063      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d15f      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e305      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x24c>
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01d      	b.n	8001d54 <HAL_RCC_OscConfig+0x288>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x270>
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x288>
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <HAL_RCC_OscConfig+0x298>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01b      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fdbe 	bl	80008dc <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d62:	e010      	b.n	8001d86 <HAL_RCC_OscConfig+0x2ba>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08004b54 	.word	0x08004b54
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe fdb2 	bl	80008dc <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e2c2      	b.n	800230c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d86:	4baf      	ldr	r3, [pc, #700]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2a8>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe fda2 	bl	80008dc <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7fe fd9e 	bl	80008dc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e2ae      	b.n	800230c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dae:	4ba5      	ldr	r3, [pc, #660]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x2d0>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d060      	beq.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x310>
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d119      	bne.n	8001e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d116      	bne.n	8001e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ddc:	4b99      	ldr	r3, [pc, #612]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_OscConfig+0x328>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e28b      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b93      	ldr	r3, [pc, #588]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	4990      	ldr	r1, [pc, #576]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e08:	e040      	b.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d023      	beq.n	8001e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e12:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a8b      	ldr	r2, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fd5d 	bl	80008dc <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7fe fd59 	bl	80008dc <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e269      	b.n	800230c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e38:	4b82      	ldr	r3, [pc, #520]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	497c      	ldr	r1, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
 8001e58:	e018      	b.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a79      	ldr	r2, [pc, #484]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7fe fd39 	bl	80008dc <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7fe fd35 	bl	80008dc <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e245      	b.n	800230c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e80:	4b70      	ldr	r3, [pc, #448]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01c      	beq.n	8001eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	4a67      	ldr	r2, [pc, #412]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7fe fd14 	bl	80008dc <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7fe fd10 	bl	80008dc <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e220      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eca:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ef      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x3ec>
 8001ed8:	e01b      	b.n	8001f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eda:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee0:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7fe fcf7 	bl	80008dc <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7fe fcf3 	bl	80008dc <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e203      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f04:	4b4f      	ldr	r3, [pc, #316]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80a6 	beq.w	800206c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f24:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	4a43      	ldr	r2, [pc, #268]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d118      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f58:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f64:	f7fe fcba 	bl	80008dc <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7fe fcb6 	bl	80008dc <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1c6      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_RCC_OscConfig+0x57c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4d8>
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa2:	e024      	b.n	8001fee <HAL_RCC_OscConfig+0x522>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d110      	bne.n	8001fce <HAL_RCC_OscConfig+0x502>
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fbc:	4b21      	ldr	r3, [pc, #132]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	4a20      	ldr	r2, [pc, #128]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fcc:	e00f      	b.n	8001fee <HAL_RCC_OscConfig+0x522>
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fc71 	bl	80008dc <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe fc6d 	bl	80008dc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e17b      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_OscConfig+0x578>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ed      	beq.n	8001ffe <HAL_RCC_OscConfig+0x532>
 8002022:	e01a      	b.n	800205a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe fc5a 	bl	80008dc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe fc56 	bl	80008dc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d906      	bls.n	800204c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e164      	b.n	800230c <HAL_RCC_OscConfig+0x840>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204c:	4ba8      	ldr	r3, [pc, #672]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e8      	bne.n	800202c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800205a:	7ffb      	ldrb	r3, [r7, #31]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4ba3      	ldr	r3, [pc, #652]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	4aa2      	ldr	r2, [pc, #648]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d03c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01c      	beq.n	80020ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002080:	4b9b      	ldr	r3, [pc, #620]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002086:	4a9a      	ldr	r2, [pc, #616]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7fe fc24 	bl	80008dc <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002098:	f7fe fc20 	bl	80008dc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e130      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020aa:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80020ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ef      	beq.n	8002098 <HAL_RCC_OscConfig+0x5cc>
 80020b8:	e01b      	b.n	80020f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ba:	4b8d      	ldr	r3, [pc, #564]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80020bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c0:	4a8b      	ldr	r2, [pc, #556]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7fe fc07 	bl	80008dc <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d2:	f7fe fc03 	bl	80008dc <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e113      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020e4:	4b82      	ldr	r3, [pc, #520]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80020e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ef      	bne.n	80020d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8107 	beq.w	800230a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	2b02      	cmp	r3, #2
 8002102:	f040 80cb 	bne.w	800229c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002106:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0203 	and.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	429a      	cmp	r2, r3
 8002118:	d12c      	bne.n	8002174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	3b01      	subs	r3, #1
 8002126:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d123      	bne.n	8002174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d11b      	bne.n	8002174 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d113      	bne.n	8002174 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	3b01      	subs	r3, #1
 800215a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d109      	bne.n	8002174 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	3b01      	subs	r3, #1
 800216e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d06d      	beq.n	8002250 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d068      	beq.n	800224c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002186:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0ba      	b.n	800230c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002196:	4b56      	ldr	r3, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a55      	ldr	r2, [pc, #340]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800219c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021a2:	f7fe fb9b 	bl	80008dc <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7fe fb97 	bl	80008dc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0a7      	b.n	800230c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c8:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4b49      	ldr	r3, [pc, #292]	; (80022f4 <HAL_RCC_OscConfig+0x828>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021d8:	3a01      	subs	r2, #1
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021e2:	0212      	lsls	r2, r2, #8
 80021e4:	4311      	orrs	r1, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021ea:	0852      	lsrs	r2, r2, #1
 80021ec:	3a01      	subs	r2, #1
 80021ee:	0552      	lsls	r2, r2, #21
 80021f0:	4311      	orrs	r1, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021f6:	0852      	lsrs	r2, r2, #1
 80021f8:	3a01      	subs	r2, #1
 80021fa:	0652      	lsls	r2, r2, #25
 80021fc:	4311      	orrs	r1, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002202:	06d2      	lsls	r2, r2, #27
 8002204:	430a      	orrs	r2, r1
 8002206:	493a      	ldr	r1, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002208:	4313      	orrs	r3, r2
 800220a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800220c:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a37      	ldr	r2, [pc, #220]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a34      	ldr	r2, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002222:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002224:	f7fe fb5a 	bl	80008dc <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fb56 	bl	80008dc <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e066      	b.n	800230c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	4b2c      	ldr	r3, [pc, #176]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224a:	e05e      	b.n	800230a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e05d      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d156      	bne.n	800230a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002272:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002274:	f7fe fb32 	bl	80008dc <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7fe fb2e 	bl	80008dc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e03e      	b.n	800230c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x7b0>
 800229a:	e036      	b.n	800230a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d031      	beq.n	8002306 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80022a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80022c0:	f023 0303 	bic.w	r3, r3, #3
 80022c4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <HAL_RCC_OscConfig+0x824>)
 80022cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fb01 	bl	80008dc <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	e00c      	b.n	80022f8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fafd 	bl	80008dc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d905      	bls.n	80022f8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e00d      	b.n	800230c <HAL_RCC_OscConfig+0x840>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCC_OscConfig+0x848>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ec      	bne.n	80022de <HAL_RCC_OscConfig+0x812>
 8002304:	e001      	b.n	800230a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e10f      	b.n	8002550 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_RCC_ClockConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b86      	ldr	r3, [pc, #536]	; (8002558 <HAL_RCC_ClockConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 020f 	bic.w	r2, r3, #15
 8002346:	4984      	ldr	r1, [pc, #528]	; (8002558 <HAL_RCC_ClockConfig+0x240>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCC_ClockConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0f7      	b.n	8002550 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8089 	beq.w	8002480 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d133      	bne.n	80023de <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002376:	4b79      	ldr	r3, [pc, #484]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0e4      	b.n	8002550 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002386:	f000 f9e5 	bl	8002754 <RCC_GetSysClockFreqFromPLLSource>
 800238a:	4603      	mov	r3, r0
 800238c:	4a74      	ldr	r2, [pc, #464]	; (8002560 <HAL_RCC_ClockConfig+0x248>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d955      	bls.n	800243e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002392:	4b72      	ldr	r3, [pc, #456]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800239e:	4b6f      	ldr	r3, [pc, #444]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a6:	4a6d      	ldr	r2, [pc, #436]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e044      	b.n	800243e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d03e      	beq.n	800243e <HAL_RCC_ClockConfig+0x126>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d13a      	bne.n	800243e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023c8:	4b64      	ldr	r3, [pc, #400]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d0:	4a62      	ldr	r2, [pc, #392]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80023d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e02f      	b.n	800243e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	4b5d      	ldr	r3, [pc, #372]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d115      	bne.n	800241e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0ac      	b.n	8002550 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fe:	4b57      	ldr	r3, [pc, #348]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0a0      	b.n	8002550 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240e:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e098      	b.n	8002550 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800241e:	f000 f8a7 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8002422:	4603      	mov	r3, r0
 8002424:	4a4e      	ldr	r2, [pc, #312]	; (8002560 <HAL_RCC_ClockConfig+0x248>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d909      	bls.n	800243e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800242a:	4b4c      	ldr	r3, [pc, #304]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002432:	4a4a      	ldr	r2, [pc, #296]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 8002434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002438:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4944      	ldr	r1, [pc, #272]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002450:	f7fe fa44 	bl	80008dc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fa40 	bl	80008dc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e070      	b.n	8002550 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4930      	ldr	r1, [pc, #192]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
 800249e:	e008      	b.n	80024b2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d105      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024a6:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4a2c      	ldr	r2, [pc, #176]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80024ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d210      	bcs.n	80024e2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_ClockConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 020f 	bic.w	r2, r3, #15
 80024c8:	4923      	ldr	r1, [pc, #140]	; (8002558 <HAL_RCC_ClockConfig+0x240>)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_RCC_ClockConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e036      	b.n	8002550 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4918      	ldr	r1, [pc, #96]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4910      	ldr	r1, [pc, #64]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 800251c:	4313      	orrs	r3, r2
 800251e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002520:	f000 f826 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_RCC_ClockConfig+0x244>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <HAL_RCC_ClockConfig+0x24c>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <HAL_RCC_ClockConfig+0x250>)
 800253e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x254>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe f979 	bl	800083c <HAL_InitTick>
 800254a:	4603      	mov	r3, r0
 800254c:	73fb      	strb	r3, [r7, #15]

  return status;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40022000 	.word	0x40022000
 800255c:	40021000 	.word	0x40021000
 8002560:	04c4b400 	.word	0x04c4b400
 8002564:	08004b54 	.word	0x08004b54
 8002568:	20000008 	.word	0x20000008
 800256c:	20000000 	.word	0x20000000

08002570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d121      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d11e      	bne.n	80025e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025a4:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e005      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025cc:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10d      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d102      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e004      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <HAL_RCC_GetSysClockFreq+0x114>)
 80025f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d134      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d003      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0xa6>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d003      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xac>
 8002614:	e005      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_GetSysClockFreq+0x110>)
 8002618:	617b      	str	r3, [r7, #20]
      break;
 800261a:	e005      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_GetSysClockFreq+0x114>)
 800261e:	617b      	str	r3, [r7, #20]
      break;
 8002620:	e002      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	617b      	str	r3, [r7, #20]
      break;
 8002626:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3301      	adds	r3, #1
 8002634:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	fb02 f203 	mul.w	r2, r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_RCC_GetSysClockFreq+0x108>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	0e5b      	lsrs	r3, r3, #25
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	3301      	adds	r3, #1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002668:	69bb      	ldr	r3, [r7, #24]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	08004b64 	.word	0x08004b64
 8002680:	00f42400 	.word	0x00f42400
 8002684:	007a1200 	.word	0x007a1200

08002688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000008 	.word	0x20000008

080026a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026b8:	f7ff f944 	bl	8001944 <HAL_PWREx_GetVoltageRange>
 80026bc:	6178      	str	r0, [r7, #20]
 80026be:	e014      	b.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	4a21      	ldr	r2, [pc, #132]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6593      	str	r3, [r2, #88]	; 0x58
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026d8:	f7ff f934 	bl	8001944 <HAL_PWREx_GetVoltageRange>
 80026dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f0:	d10b      	bne.n	800270a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	d913      	bls.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2ba0      	cmp	r3, #160	; 0xa0
 80026fc:	d902      	bls.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026fe:	2302      	movs	r3, #2
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	e00d      	b.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002704:	2301      	movs	r3, #1
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	e00a      	b.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b7f      	cmp	r3, #127	; 0x7f
 800270e:	d902      	bls.n	8002716 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002710:	2302      	movs	r3, #2
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	e004      	b.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b70      	cmp	r3, #112	; 0x70
 800271a:	d101      	bne.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800271c:	2301      	movs	r3, #1
 800271e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 020f 	bic.w	r2, r3, #15
 8002728:	4909      	ldr	r1, [pc, #36]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	40022000 	.word	0x40022000

08002754 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800275e:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d118      	bne.n	800279c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d107      	bne.n	8002786 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e005      	b.n	8002792 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d003      	beq.n	80027b4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d003      	beq.n	80027ba <RCC_GetSysClockFreqFromPLLSource+0x66>
 80027b2:	e005      	b.n	80027c0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80027b6:	613b      	str	r3, [r7, #16]
    break;
 80027b8:	e005      	b.n	80027c6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80027bc:	613b      	str	r3, [r7, #16]
    break;
 80027be:	e002      	b.n	80027c6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
    break;
 80027c4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	3301      	adds	r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	fb02 f203 	mul.w	r2, r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0e5b      	lsrs	r3, r3, #25
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	3301      	adds	r3, #1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002806:	683b      	ldr	r3, [r7, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000
 8002818:	08004b64 	.word	0x08004b64
 800281c:	00f42400 	.word	0x00f42400
 8002820:	007a1200 	.word	0x007a1200

08002824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e049      	b.n	80028ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f001 ff8c 	bl	8004768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 fdde 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d001      	beq.n	80028ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e047      	b.n	800297c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <HAL_TIM_Base_Start+0xb4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_TIM_Base_Start+0x66>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d018      	beq.n	800293a <HAL_TIM_Base_Start+0x66>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_TIM_Base_Start+0xb8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_TIM_Base_Start+0x66>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_TIM_Base_Start+0xbc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_TIM_Base_Start+0x66>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_TIM_Base_Start+0xc0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_TIM_Base_Start+0x66>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_TIM_Base_Start+0xc4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_TIM_Base_Start+0x66>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_TIM_Base_Start+0xc8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d115      	bne.n	8002966 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_TIM_Base_Start+0xcc>)
 8002942:	4013      	ands	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b06      	cmp	r3, #6
 800294a:	d015      	beq.n	8002978 <HAL_TIM_Base_Start+0xa4>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002952:	d011      	beq.n	8002978 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002964:	e008      	b.n	8002978 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e000      	b.n	800297a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002978:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800
 8002994:	40000c00 	.word	0x40000c00
 8002998:	40013400 	.word	0x40013400
 800299c:	40014000 	.word	0x40014000
 80029a0:	00010007 	.word	0x00010007

080029a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d001      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e04f      	b.n	8002a5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a23      	ldr	r2, [pc, #140]	; (8002a68 <HAL_TIM_Base_Start_IT+0xc4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01d      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x76>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d018      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x76>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <HAL_TIM_Base_Start_IT+0xc8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x76>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_TIM_Base_Start_IT+0xcc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00e      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x76>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x76>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_TIM_Base_Start_IT+0x76>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_TIM_Base_Start_IT+0xd8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d115      	bne.n	8002a46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b06      	cmp	r3, #6
 8002a2a:	d015      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0xb4>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a32:	d011      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a44:	e008      	b.n	8002a58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e000      	b.n	8002a5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800
 8002a74:	40000c00 	.word	0x40000c00
 8002a78:	40013400 	.word	0x40013400
 8002a7c:	40014000 	.word	0x40014000
 8002a80:	00010007 	.word	0x00010007

08002a84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e049      	b.n	8002b2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f841 	bl	8002b32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f000 fcae 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_TIM_PWM_Start+0x24>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e03c      	b.n	8002be6 <HAL_TIM_PWM_Start+0x9e>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d109      	bne.n	8002b86 <HAL_TIM_PWM_Start+0x3e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	e02f      	b.n	8002be6 <HAL_TIM_PWM_Start+0x9e>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d109      	bne.n	8002ba0 <HAL_TIM_PWM_Start+0x58>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	bf14      	ite	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	2300      	moveq	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e022      	b.n	8002be6 <HAL_TIM_PWM_Start+0x9e>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d109      	bne.n	8002bba <HAL_TIM_PWM_Start+0x72>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	e015      	b.n	8002be6 <HAL_TIM_PWM_Start+0x9e>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d109      	bne.n	8002bd4 <HAL_TIM_PWM_Start+0x8c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e008      	b.n	8002be6 <HAL_TIM_PWM_Start+0x9e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e09c      	b.n	8002d28 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_PWM_Start+0xb6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	e023      	b.n	8002c46 <HAL_TIM_PWM_Start+0xfe>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0xc6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c0c:	e01b      	b.n	8002c46 <HAL_TIM_PWM_Start+0xfe>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0xd6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	e013      	b.n	8002c46 <HAL_TIM_PWM_Start+0xfe>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_PWM_Start+0xe6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c2c:	e00b      	b.n	8002c46 <HAL_TIM_PWM_Start+0xfe>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_PWM_Start+0xf6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c3c:	e003      	b.n	8002c46 <HAL_TIM_PWM_Start+0xfe>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 f885 	bl	8003d5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a35      	ldr	r2, [pc, #212]	; (8002d30 <HAL_TIM_PWM_Start+0x1e8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x13e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <HAL_TIM_PWM_Start+0x1ec>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x13e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <HAL_TIM_PWM_Start+0x1f0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x13e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a31      	ldr	r2, [pc, #196]	; (8002d3c <HAL_TIM_PWM_Start+0x1f4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x13e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <HAL_TIM_PWM_Start+0x1f8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_PWM_Start+0x142>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_TIM_PWM_Start+0x144>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_TIM_PWM_Start+0x1e8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x19e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d018      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x19e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_TIM_PWM_Start+0x1fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x19e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_TIM_PWM_Start+0x200>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x19e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_TIM_PWM_Start+0x204>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x19e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a17      	ldr	r2, [pc, #92]	; (8002d34 <HAL_TIM_PWM_Start+0x1ec>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x19e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <HAL_TIM_PWM_Start+0x1f0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d115      	bne.n	8002d12 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <HAL_TIM_PWM_Start+0x208>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d015      	beq.n	8002d24 <HAL_TIM_PWM_Start+0x1dc>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfe:	d011      	beq.n	8002d24 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d10:	e008      	b.n	8002d24 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e000      	b.n	8002d26 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40013400 	.word	0x40013400
 8002d38:	40014000 	.word	0x40014000
 8002d3c:	40014400 	.word	0x40014400
 8002d40:	40014800 	.word	0x40014800
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	40000c00 	.word	0x40000c00
 8002d50:	00010007 	.word	0x00010007

08002d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0202 	mvn.w	r2, #2
 8002d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fb25 	bl	80033e6 <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fb17 	bl	80033d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fb28 	bl	80033fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d122      	bne.n	8002e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d11b      	bne.n	8002e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0204 	mvn.w	r2, #4
 8002dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fafb 	bl	80033e6 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 faed 	bl	80033d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fafe 	bl	80033fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0208 	mvn.w	r2, #8
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fad1 	bl	80033e6 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fac3 	bl	80033d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fad4 	bl	80033fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0210 	mvn.w	r2, #16
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2208      	movs	r2, #8
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 faa7 	bl	80033e6 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa99 	bl	80033d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 faaa 	bl	80033fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0201 	mvn.w	r2, #1
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f001 fb7a 	bl	80045cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b80      	cmp	r3, #128	; 0x80
 8002ee4:	d10e      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef0:	2b80      	cmp	r3, #128	; 0x80
 8002ef2:	d107      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 ffe4 	bl	8003ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f12:	d10e      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b80      	cmp	r3, #128	; 0x80
 8002f20:	d107      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 ffd7 	bl	8003ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d10e      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fa58 	bl	800340e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d10e      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d107      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f06f 0220 	mvn.w	r2, #32
 8002f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 ff97 	bl	8003eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e0ff      	b.n	80031b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b14      	cmp	r3, #20
 8002fbe:	f200 80f0 	bhi.w	80031a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fc2:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc8:	0800301d 	.word	0x0800301d
 8002fcc:	080031a3 	.word	0x080031a3
 8002fd0:	080031a3 	.word	0x080031a3
 8002fd4:	080031a3 	.word	0x080031a3
 8002fd8:	0800305d 	.word	0x0800305d
 8002fdc:	080031a3 	.word	0x080031a3
 8002fe0:	080031a3 	.word	0x080031a3
 8002fe4:	080031a3 	.word	0x080031a3
 8002fe8:	0800309f 	.word	0x0800309f
 8002fec:	080031a3 	.word	0x080031a3
 8002ff0:	080031a3 	.word	0x080031a3
 8002ff4:	080031a3 	.word	0x080031a3
 8002ff8:	080030df 	.word	0x080030df
 8002ffc:	080031a3 	.word	0x080031a3
 8003000:	080031a3 	.word	0x080031a3
 8003004:	080031a3 	.word	0x080031a3
 8003008:	08003121 	.word	0x08003121
 800300c:	080031a3 	.word	0x080031a3
 8003010:	080031a3 	.word	0x080031a3
 8003014:	080031a3 	.word	0x080031a3
 8003018:	08003161 	.word	0x08003161
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fa98 	bl	8003558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6999      	ldr	r1, [r3, #24]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
      break;
 800305a:	e0a5      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fb08 	bl	8003678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6999      	ldr	r1, [r3, #24]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	021a      	lsls	r2, r3, #8
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      break;
 800309c:	e084      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fb71 	bl	800378c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0208 	orr.w	r2, r2, #8
 80030b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0204 	bic.w	r2, r2, #4
 80030c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69d9      	ldr	r1, [r3, #28]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	61da      	str	r2, [r3, #28]
      break;
 80030dc:	e064      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fbd9 	bl	800389c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	021a      	lsls	r2, r3, #8
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	61da      	str	r2, [r3, #28]
      break;
 800311e:	e043      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fc22 	bl	8003970 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0204 	bic.w	r2, r2, #4
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800315e:	e023      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fc66 	bl	8003a38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031a0:	e002      	b.n	80031a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
      break;
 80031a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop

080031bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_TIM_ConfigClockSource+0x1c>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0b6      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x18a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003214:	d03e      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0xd8>
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321a:	f200 8087 	bhi.w	800332c <HAL_TIM_ConfigClockSource+0x170>
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003222:	f000 8086 	beq.w	8003332 <HAL_TIM_ConfigClockSource+0x176>
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	d87f      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x170>
 800322c:	2b70      	cmp	r3, #112	; 0x70
 800322e:	d01a      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0xaa>
 8003230:	2b70      	cmp	r3, #112	; 0x70
 8003232:	d87b      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x170>
 8003234:	2b60      	cmp	r3, #96	; 0x60
 8003236:	d050      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x11e>
 8003238:	2b60      	cmp	r3, #96	; 0x60
 800323a:	d877      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x170>
 800323c:	2b50      	cmp	r3, #80	; 0x50
 800323e:	d03c      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0xfe>
 8003240:	2b50      	cmp	r3, #80	; 0x50
 8003242:	d873      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x170>
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d058      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x13e>
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d86f      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x170>
 800324c:	2b30      	cmp	r3, #48	; 0x30
 800324e:	d064      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x15e>
 8003250:	2b30      	cmp	r3, #48	; 0x30
 8003252:	d86b      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x170>
 8003254:	2b20      	cmp	r3, #32
 8003256:	d060      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x15e>
 8003258:	2b20      	cmp	r3, #32
 800325a:	d867      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x170>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d05c      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x15e>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d05a      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x15e>
 8003264:	e062      	b.n	800332c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6899      	ldr	r1, [r3, #8]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f000 fd52 	bl	8003d1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	609a      	str	r2, [r3, #8]
      break;
 8003292:	e04f      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f000 fd3b 	bl	8003d1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b6:	609a      	str	r2, [r3, #8]
      break;
 80032b8:	e03c      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f000 fcaf 	bl	8003c2a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2150      	movs	r1, #80	; 0x50
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fd08 	bl	8003ce8 <TIM_ITRx_SetConfig>
      break;
 80032d8:	e02c      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f000 fcce 	bl	8003c88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2160      	movs	r1, #96	; 0x60
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fcf8 	bl	8003ce8 <TIM_ITRx_SetConfig>
      break;
 80032f8:	e01c      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	461a      	mov	r2, r3
 8003308:	f000 fc8f 	bl	8003c2a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2140      	movs	r1, #64	; 0x40
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fce8 	bl	8003ce8 <TIM_ITRx_SetConfig>
      break;
 8003318:	e00c      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	4610      	mov	r0, r2
 8003326:	f000 fcdf 	bl	8003ce8 <TIM_ITRx_SetConfig>
      break;
 800332a:	e003      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e000      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003362:	2302      	movs	r3, #2
 8003364:	e031      	b.n	80033ca <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fbc3 	bl	8003b04 <TIM_SlaveTimer_SetConfig>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e018      	b.n	80033ca <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033b6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <TIM_Base_SetConfig+0x114>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d00f      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3d      	ldr	r2, [pc, #244]	; (800353c <TIM_Base_SetConfig+0x118>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3c      	ldr	r2, [pc, #240]	; (8003540 <TIM_Base_SetConfig+0x11c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <TIM_Base_SetConfig+0x120>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3a      	ldr	r2, [pc, #232]	; (8003548 <TIM_Base_SetConfig+0x124>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d108      	bne.n	8003476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2f      	ldr	r2, [pc, #188]	; (8003538 <TIM_Base_SetConfig+0x114>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <TIM_Base_SetConfig+0x9a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d01b      	beq.n	80034be <TIM_Base_SetConfig+0x9a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2c      	ldr	r2, [pc, #176]	; (800353c <TIM_Base_SetConfig+0x118>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d017      	beq.n	80034be <TIM_Base_SetConfig+0x9a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <TIM_Base_SetConfig+0x11c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <TIM_Base_SetConfig+0x9a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2a      	ldr	r2, [pc, #168]	; (8003544 <TIM_Base_SetConfig+0x120>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_Base_SetConfig+0x9a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a29      	ldr	r2, [pc, #164]	; (8003548 <TIM_Base_SetConfig+0x124>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_Base_SetConfig+0x9a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <TIM_Base_SetConfig+0x128>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_Base_SetConfig+0x9a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a27      	ldr	r2, [pc, #156]	; (8003550 <TIM_Base_SetConfig+0x12c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_Base_SetConfig+0x9a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <TIM_Base_SetConfig+0x130>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d108      	bne.n	80034d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <TIM_Base_SetConfig+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00f      	beq.n	800351c <TIM_Base_SetConfig+0xf8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <TIM_Base_SetConfig+0x124>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00b      	beq.n	800351c <TIM_Base_SetConfig+0xf8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a11      	ldr	r2, [pc, #68]	; (800354c <TIM_Base_SetConfig+0x128>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_Base_SetConfig+0xf8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a10      	ldr	r2, [pc, #64]	; (8003550 <TIM_Base_SetConfig+0x12c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0xf8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <TIM_Base_SetConfig+0x130>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d103      	bne.n	8003524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	615a      	str	r2, [r3, #20]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40013400 	.word	0x40013400
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800

08003558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0302 	bic.w	r3, r3, #2
 80035a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a2c      	ldr	r2, [pc, #176]	; (8003664 <TIM_OC1_SetConfig+0x10c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00f      	beq.n	80035d8 <TIM_OC1_SetConfig+0x80>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a2b      	ldr	r2, [pc, #172]	; (8003668 <TIM_OC1_SetConfig+0x110>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_OC1_SetConfig+0x80>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a2a      	ldr	r2, [pc, #168]	; (800366c <TIM_OC1_SetConfig+0x114>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_OC1_SetConfig+0x80>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a29      	ldr	r2, [pc, #164]	; (8003670 <TIM_OC1_SetConfig+0x118>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_OC1_SetConfig+0x80>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a28      	ldr	r2, [pc, #160]	; (8003674 <TIM_OC1_SetConfig+0x11c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d10c      	bne.n	80035f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0308 	bic.w	r3, r3, #8
 80035de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <TIM_OC1_SetConfig+0x10c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00f      	beq.n	800361a <TIM_OC1_SetConfig+0xc2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <TIM_OC1_SetConfig+0x110>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00b      	beq.n	800361a <TIM_OC1_SetConfig+0xc2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <TIM_OC1_SetConfig+0x114>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_OC1_SetConfig+0xc2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a18      	ldr	r2, [pc, #96]	; (8003670 <TIM_OC1_SetConfig+0x118>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_OC1_SetConfig+0xc2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a17      	ldr	r2, [pc, #92]	; (8003674 <TIM_OC1_SetConfig+0x11c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40013400 	.word	0x40013400
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800

08003678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0210 	bic.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f023 0320 	bic.w	r3, r3, #32
 80036c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a28      	ldr	r2, [pc, #160]	; (8003778 <TIM_OC2_SetConfig+0x100>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_OC2_SetConfig+0x6c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a27      	ldr	r2, [pc, #156]	; (800377c <TIM_OC2_SetConfig+0x104>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10d      	bne.n	8003700 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <TIM_OC2_SetConfig+0x100>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00f      	beq.n	8003728 <TIM_OC2_SetConfig+0xb0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <TIM_OC2_SetConfig+0x104>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_OC2_SetConfig+0xb0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <TIM_OC2_SetConfig+0x108>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_OC2_SetConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <TIM_OC2_SetConfig+0x10c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_OC2_SetConfig+0xb0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a19      	ldr	r2, [pc, #100]	; (8003788 <TIM_OC2_SetConfig+0x110>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d113      	bne.n	8003750 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800372e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003736:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a27      	ldr	r2, [pc, #156]	; (8003888 <TIM_OC3_SetConfig+0xfc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_OC3_SetConfig+0x6a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a26      	ldr	r2, [pc, #152]	; (800388c <TIM_OC3_SetConfig+0x100>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10d      	bne.n	8003812 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <TIM_OC3_SetConfig+0xfc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00f      	beq.n	800383a <TIM_OC3_SetConfig+0xae>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <TIM_OC3_SetConfig+0x100>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00b      	beq.n	800383a <TIM_OC3_SetConfig+0xae>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <TIM_OC3_SetConfig+0x104>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d007      	beq.n	800383a <TIM_OC3_SetConfig+0xae>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <TIM_OC3_SetConfig+0x108>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <TIM_OC3_SetConfig+0xae>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a18      	ldr	r2, [pc, #96]	; (8003898 <TIM_OC3_SetConfig+0x10c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d113      	bne.n	8003862 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40013400 	.word	0x40013400
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	031b      	lsls	r3, r3, #12
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a18      	ldr	r2, [pc, #96]	; (800395c <TIM_OC4_SetConfig+0xc0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00f      	beq.n	8003920 <TIM_OC4_SetConfig+0x84>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a17      	ldr	r2, [pc, #92]	; (8003960 <TIM_OC4_SetConfig+0xc4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_OC4_SetConfig+0x84>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a16      	ldr	r2, [pc, #88]	; (8003964 <TIM_OC4_SetConfig+0xc8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_OC4_SetConfig+0x84>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a15      	ldr	r2, [pc, #84]	; (8003968 <TIM_OC4_SetConfig+0xcc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_OC4_SetConfig+0x84>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a14      	ldr	r2, [pc, #80]	; (800396c <TIM_OC4_SetConfig+0xd0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d109      	bne.n	8003934 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40014000 	.word	0x40014000
 8003968:	40014400 	.word	0x40014400
 800396c:	40014800 	.word	0x40014800

08003970 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <TIM_OC5_SetConfig+0xb4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00f      	beq.n	80039ea <TIM_OC5_SetConfig+0x7a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <TIM_OC5_SetConfig+0xb8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00b      	beq.n	80039ea <TIM_OC5_SetConfig+0x7a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <TIM_OC5_SetConfig+0xbc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <TIM_OC5_SetConfig+0x7a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <TIM_OC5_SetConfig+0xc0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d003      	beq.n	80039ea <TIM_OC5_SetConfig+0x7a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <TIM_OC5_SetConfig+0xc4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d109      	bne.n	80039fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40013400 	.word	0x40013400
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	051b      	lsls	r3, r3, #20
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <TIM_OC6_SetConfig+0xb8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00f      	beq.n	8003ab4 <TIM_OC6_SetConfig+0x7c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <TIM_OC6_SetConfig+0xbc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <TIM_OC6_SetConfig+0x7c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <TIM_OC6_SetConfig+0xc0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_OC6_SetConfig+0x7c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a15      	ldr	r2, [pc, #84]	; (8003afc <TIM_OC6_SetConfig+0xc4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_OC6_SetConfig+0x7c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <TIM_OC6_SetConfig+0xc8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d109      	bne.n	8003ac8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	029b      	lsls	r3, r3, #10
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800

08003b04 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b32:	f023 0307 	bic.w	r3, r3, #7
 8003b36:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b70      	cmp	r3, #112	; 0x70
 8003b50:	d01a      	beq.n	8003b88 <TIM_SlaveTimer_SetConfig+0x84>
 8003b52:	2b70      	cmp	r3, #112	; 0x70
 8003b54:	d860      	bhi.n	8003c18 <TIM_SlaveTimer_SetConfig+0x114>
 8003b56:	2b60      	cmp	r3, #96	; 0x60
 8003b58:	d054      	beq.n	8003c04 <TIM_SlaveTimer_SetConfig+0x100>
 8003b5a:	2b60      	cmp	r3, #96	; 0x60
 8003b5c:	d85c      	bhi.n	8003c18 <TIM_SlaveTimer_SetConfig+0x114>
 8003b5e:	2b50      	cmp	r3, #80	; 0x50
 8003b60:	d046      	beq.n	8003bf0 <TIM_SlaveTimer_SetConfig+0xec>
 8003b62:	2b50      	cmp	r3, #80	; 0x50
 8003b64:	d858      	bhi.n	8003c18 <TIM_SlaveTimer_SetConfig+0x114>
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d019      	beq.n	8003b9e <TIM_SlaveTimer_SetConfig+0x9a>
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d854      	bhi.n	8003c18 <TIM_SlaveTimer_SetConfig+0x114>
 8003b6e:	2b30      	cmp	r3, #48	; 0x30
 8003b70:	d055      	beq.n	8003c1e <TIM_SlaveTimer_SetConfig+0x11a>
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d850      	bhi.n	8003c18 <TIM_SlaveTimer_SetConfig+0x114>
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d051      	beq.n	8003c1e <TIM_SlaveTimer_SetConfig+0x11a>
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d84c      	bhi.n	8003c18 <TIM_SlaveTimer_SetConfig+0x114>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04d      	beq.n	8003c1e <TIM_SlaveTimer_SetConfig+0x11a>
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d04b      	beq.n	8003c1e <TIM_SlaveTimer_SetConfig+0x11a>
 8003b86:	e047      	b.n	8003c18 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68d9      	ldr	r1, [r3, #12]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f000 f8c1 	bl	8003d1e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003b9c:	e040      	b.n	8003c20 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d101      	bne.n	8003baa <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e03b      	b.n	8003c22 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
      break;
 8003bee:	e017      	b.n	8003c20 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f000 f814 	bl	8003c2a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003c02:	e00d      	b.n	8003c20 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f000 f839 	bl	8003c88 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003c16:	e003      	b.n	8003c20 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e000      	b.n	8003c20 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003c1e:	bf00      	nop
  }

  return status;
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f023 0201 	bic.w	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 030a 	bic.w	r3, r3, #10
 8003c66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f023 0210 	bic.w	r2, r3, #16
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	031b      	lsls	r3, r3, #12
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f043 0307 	orr.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	609a      	str	r2, [r3, #8]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b087      	sub	sp, #28
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	021a      	lsls	r2, r3, #8
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	609a      	str	r2, [r3, #8]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b087      	sub	sp, #28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2201      	movs	r2, #1
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	401a      	ands	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e068      	b.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2e      	ldr	r2, [pc, #184]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d108      	bne.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01d      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d018      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d013      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00e      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d009      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10c      	bne.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40013400 	.word	0x40013400
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40014000 	.word	0x40014000

08003eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	0000      	movs	r0, r0
	...

08003ef8 <init_buffer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Fill buffers with testing stuff
void init_buffer() {
 8003ef8:	b5b0      	push	{r4, r5, r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
  // Allocate buffers
  // Continuous memory alloc
  uint8_t* tmp_buffer  = (uint8_t*) malloc(sizeof(uint8_t) * horiz_size * vert_size);
 8003efe:	f64a 7064 	movw	r0, #44900	; 0xaf64
 8003f02:	f000 fd93 	bl	8004a2c <malloc>
 8003f06:	4603      	mov	r3, r0
 8003f08:	607b      	str	r3, [r7, #4]
  uint8_t* tmp2_buffer = (uint8_t*) malloc(sizeof(uint8_t) * horiz_size * vert_size);
 8003f0a:	f64a 7064 	movw	r0, #44900	; 0xaf64
 8003f0e:	f000 fd8d 	bl	8004a2c <malloc>
 8003f12:	4603      	mov	r3, r0
 8003f14:	603b      	str	r3, [r7, #0]
  frame_buffer = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8003f16:	f240 7004 	movw	r0, #1796	; 0x704
 8003f1a:	f000 fd87 	bl	8004a2c <malloc>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b7b      	ldr	r3, [pc, #492]	; (8004110 <init_buffer+0x218>)
 8003f24:	601a      	str	r2, [r3, #0]
  true_buffer  = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8003f26:	f240 7004 	movw	r0, #1796	; 0x704
 8003f2a:	f000 fd7f 	bl	8004a2c <malloc>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b78      	ldr	r3, [pc, #480]	; (8004114 <init_buffer+0x21c>)
 8003f34:	601a      	str	r2, [r3, #0]

  // Fill them with data, start with increasing grayscale (and decreasing for back)
  for(int i = 0; i < vert_size; i++) {
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e0d5      	b.n	80040e8 <init_buffer+0x1f0>
	  // Point to place in continuous mem location
	  frame_buffer[i] = tmp_buffer  + i*horiz_size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2264      	movs	r2, #100	; 0x64
 8003f40:	fb02 f303 	mul.w	r3, r2, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	4b72      	ldr	r3, [pc, #456]	; (8004110 <init_buffer+0x218>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	440a      	add	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
	  true_buffer[i] = tmp2_buffer  + i*horiz_size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2264      	movs	r2, #100	; 0x64
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4b6c      	ldr	r3, [pc, #432]	; (8004114 <init_buffer+0x21c>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
	  for(int j = 0; j < horiz_size; j++) {
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	e0b1      	b.n	80040da <init_buffer+0x1e2>
		  // Back porch Horizontal || Front Porch Horizontal
//		  if (j < 6 || j >= 85) {
		  if (j < 3 || j >= 82) {
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	dd02      	ble.n	8003f82 <init_buffer+0x8a>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b51      	cmp	r3, #81	; 0x51
 8003f80:	dd14      	ble.n	8003fac <init_buffer+0xb4>
			  frame_buffer[i][j] = (uint8_t) 0;
 8003f82:	4b63      	ldr	r3, [pc, #396]	; (8004110 <init_buffer+0x218>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4413      	add	r3, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
			  true_buffer[i][j] = (uint8_t) 0;
 8003f96:	4b5f      	ldr	r3, [pc, #380]	; (8004114 <init_buffer+0x21c>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e093      	b.n	80040d4 <init_buffer+0x1dc>
		  }
		  // Back porch Vertical || Front Porch Vertical
		  else if (i < 60 || i >= 410) {
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b3b      	cmp	r3, #59	; 0x3b
 8003fb0:	dd03      	ble.n	8003fba <init_buffer+0xc2>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8003fb8:	db0a      	blt.n	8003fd0 <init_buffer+0xd8>
			  true_buffer[i][j] = (uint8_t) 0;
 8003fba:	4b56      	ldr	r3, [pc, #344]	; (8004114 <init_buffer+0x21c>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	e081      	b.n	80040d4 <init_buffer+0x1dc>
		  }
		  // Color based on x pos
		  else {
			  frame_buffer[i][j] = (uint8_t) (2.8*(i%44)+12*(j%10));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a51      	ldr	r2, [pc, #324]	; (8004118 <init_buffer+0x220>)
 8003fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8003fd8:	10d1      	asrs	r1, r2, #3
 8003fda:	17da      	asrs	r2, r3, #31
 8003fdc:	1a8a      	subs	r2, r1, r2
 8003fde:	212c      	movs	r1, #44	; 0x2c
 8003fe0:	fb01 f202 	mul.w	r2, r1, r2
 8003fe4:	1a9a      	subs	r2, r3, r2
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7fc fb86 	bl	80006f8 <__aeabi_i2d>
 8003fec:	a344      	add	r3, pc, #272	; (adr r3, 8004100 <init_buffer+0x208>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f7fc f905 	bl	8000200 <__aeabi_dmul>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	461d      	mov	r5, r3
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	4b46      	ldr	r3, [pc, #280]	; (800411c <init_buffer+0x224>)
 8004002:	fb83 2301 	smull	r2, r3, r3, r1
 8004006:	109a      	asrs	r2, r3, #2
 8004008:	17cb      	asrs	r3, r1, #31
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	1aca      	subs	r2, r1, r3
 8004016:	4613      	mov	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc fb6a 	bl	80006f8 <__aeabi_i2d>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4620      	mov	r0, r4
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc fa18 	bl	8000460 <__adddf3>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <init_buffer+0x218>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	18d4      	adds	r4, r2, r3
 8004048:	f7fc fbc0 	bl	80007cc <__aeabi_d2uiz>
 800404c:	4603      	mov	r3, r0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	7023      	strb	r3, [r4, #0]
			  true_buffer[i][j] = (uint8_t) (5.6*(i%22)+6*(j%20));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a30      	ldr	r2, [pc, #192]	; (8004118 <init_buffer+0x220>)
 8004056:	fb82 1203 	smull	r1, r2, r2, r3
 800405a:	1091      	asrs	r1, r2, #2
 800405c:	17da      	asrs	r2, r3, #31
 800405e:	1a8a      	subs	r2, r1, r2
 8004060:	2116      	movs	r1, #22
 8004062:	fb01 f202 	mul.w	r2, r1, r2
 8004066:	1a9a      	subs	r2, r3, r2
 8004068:	4610      	mov	r0, r2
 800406a:	f7fc fb45 	bl	80006f8 <__aeabi_i2d>
 800406e:	a326      	add	r3, pc, #152	; (adr r3, 8004108 <init_buffer+0x210>)
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f7fc f8c4 	bl	8000200 <__aeabi_dmul>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4614      	mov	r4, r2
 800407e:	461d      	mov	r5, r3
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	4b26      	ldr	r3, [pc, #152]	; (800411c <init_buffer+0x224>)
 8004084:	fb83 2301 	smull	r2, r3, r3, r1
 8004088:	10da      	asrs	r2, r3, #3
 800408a:	17cb      	asrs	r3, r1, #31
 800408c:	1ad2      	subs	r2, r2, r3
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	1aca      	subs	r2, r1, r3
 8004098:	4613      	mov	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4413      	add	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fb29 	bl	80006f8 <__aeabi_i2d>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4620      	mov	r0, r4
 80040ac:	4629      	mov	r1, r5
 80040ae:	f7fc f9d7 	bl	8000460 <__adddf3>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	4b16      	ldr	r3, [pc, #88]	; (8004114 <init_buffer+0x21c>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	18d4      	adds	r4, r2, r3
 80040ca:	f7fc fb7f 	bl	80007cc <__aeabi_d2uiz>
 80040ce:	4603      	mov	r3, r0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	7023      	strb	r3, [r4, #0]
	  for(int j = 0; j < horiz_size; j++) {
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b63      	cmp	r3, #99	; 0x63
 80040de:	f77f af4a 	ble.w	8003f76 <init_buffer+0x7e>
  for(int i = 0; i < vert_size; i++) {
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80040ee:	f77f af25 	ble.w	8003f3c <init_buffer+0x44>
		  }


	  }
  }
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bdb0      	pop	{r4, r5, r7, pc}
 80040fc:	f3af 8000 	nop.w
 8004100:	66666666 	.word	0x66666666
 8004104:	40066666 	.word	0x40066666
 8004108:	66666666 	.word	0x66666666
 800410c:	40166666 	.word	0x40166666
 8004110:	200001b0 	.word	0x200001b0
 8004114:	20000160 	.word	0x20000160
 8004118:	2e8ba2e9 	.word	0x2e8ba2e9
 800411c:	66666667 	.word	0x66666667

08004120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004126:	f7fc fb71 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800412a:	f000 f837 	bl	800419c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800412e:	f000 fa0f 	bl	8004550 <MX_GPIO_Init>
  MX_DMA_Init();
 8004132:	f000 f9db 	bl	80044ec <MX_DMA_Init>
  MX_DAC1_Init();
 8004136:	f000 f883 	bl	8004240 <MX_DAC1_Init>

  MX_TIM4_Init();
 800413a:	f000 f989 	bl	8004450 <MX_TIM4_Init>
  MX_TIM2_Init();
 800413e:	f000 f90b 	bl	8004358 <MX_TIM2_Init>
  MX_TIM1_Init();
 8004142:	f000 f8b1 	bl	80042a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Fill the frame buffer
  init_buffer();
 8004146:	f7ff fed7 	bl	8003ef8 <init_buffer>
  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 800414a:	480f      	ldr	r0, [pc, #60]	; (8004188 <main+0x68>)
 800414c:	f7fe fc2a 	bl	80029a4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(50);
 8004150:	2032      	movs	r0, #50	; 0x32
 8004152:	f7fc fbcf 	bl	80008f4 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 8004156:	210c      	movs	r1, #12
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <main+0x6c>)
 800415a:	f7fe fcf5 	bl	8002b48 <HAL_TIM_PWM_Start>
  HAL_Delay(50);
 800415e:	2032      	movs	r0, #50	; 0x32
 8004160:	f7fc fbc8 	bl	80008f4 <HAL_Delay>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) frame_buffer[0], horiz_size*vert_size, DAC_ALIGN_8B_R);
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <main+0x70>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	2308      	movs	r3, #8
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	f64a 7364 	movw	r3, #44900	; 0xaf64
 8004172:	2100      	movs	r1, #0
 8004174:	4807      	ldr	r0, [pc, #28]	; (8004194 <main+0x74>)
 8004176:	f7fc fd15 	bl	8000ba4 <HAL_DAC_Start_DMA>
  HAL_Delay(50);
 800417a:	2032      	movs	r0, #50	; 0x32
 800417c:	f7fc fbba 	bl	80008f4 <HAL_Delay>
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 8004180:	4805      	ldr	r0, [pc, #20]	; (8004198 <main+0x78>)
 8004182:	f7fe fba7 	bl	80028d4 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 8004186:	e7fe      	b.n	8004186 <main+0x66>
 8004188:	20000164 	.word	0x20000164
 800418c:	200001b4 	.word	0x200001b4
 8004190:	200001b0 	.word	0x200001b0
 8004194:	200000ec 	.word	0x200000ec
 8004198:	200000a0 	.word	0x200000a0

0800419c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b096      	sub	sp, #88	; 0x58
 80041a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	2244      	movs	r2, #68	; 0x44
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fc46 	bl	8004a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041b0:	463b      	mov	r3, r7
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	609a      	str	r2, [r3, #8]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80041be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80041c2:	f7fd fbdf 	bl	8001984 <HAL_PWREx_ControlVoltageScaling>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80041cc:	f000 fa36 	bl	800463c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80041d0:	2310      	movs	r3, #16
 80041d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80041d4:	2301      	movs	r3, #1
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80041dc:	2360      	movs	r3, #96	; 0x60
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041e0:	2302      	movs	r3, #2
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80041e4:	2301      	movs	r3, #1
 80041e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80041e8:	2301      	movs	r3, #1
 80041ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80041ec:	2328      	movs	r3, #40	; 0x28
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041f0:	2302      	movs	r3, #2
 80041f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80041f4:	2302      	movs	r3, #2
 80041f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041f8:	2302      	movs	r3, #2
 80041fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041fc:	f107 0314 	add.w	r3, r7, #20
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fc63 	bl	8001acc <HAL_RCC_OscConfig>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800420c:	f000 fa16 	bl	800463c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004210:	230f      	movs	r3, #15
 8004212:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004214:	2303      	movs	r3, #3
 8004216:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004218:	2300      	movs	r3, #0
 800421a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004224:	463b      	mov	r3, r7
 8004226:	2103      	movs	r1, #3
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe f875 	bl	8002318 <HAL_RCC_ClockConfig>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004234:	f000 fa02 	bl	800463c <Error_Handler>
  }
}
 8004238:	bf00      	nop
 800423a:	3758      	adds	r7, #88	; 0x58
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	; 0x28
 8004244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004246:	463b      	mov	r3, r7
 8004248:	2228      	movs	r2, #40	; 0x28
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fbf5 	bl	8004a3c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <MX_DAC1_Init+0x60>)
 8004254:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <MX_DAC1_Init+0x64>)
 8004256:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004258:	4811      	ldr	r0, [pc, #68]	; (80042a0 <MX_DAC1_Init+0x60>)
 800425a:	f7fc fc80 	bl	8000b5e <HAL_DAC_Init>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004264:	f000 f9ea 	bl	800463c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004268:	2300      	movs	r3, #0
 800426a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800426c:	230e      	movs	r3, #14
 800426e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004270:	2300      	movs	r3, #0
 8004272:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004280:	463b      	mov	r3, r7
 8004282:	2200      	movs	r2, #0
 8004284:	4619      	mov	r1, r3
 8004286:	4806      	ldr	r0, [pc, #24]	; (80042a0 <MX_DAC1_Init+0x60>)
 8004288:	f7fc fd76 	bl	8000d78 <HAL_DAC_ConfigChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8004292:	f000 f9d3 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 8004296:	bf00      	nop
 8004298:	3728      	adds	r7, #40	; 0x28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200000ec 	.word	0x200000ec
 80042a4:	40007400 	.word	0x40007400

080042a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80042ae:	f107 030c 	add.w	r3, r7, #12
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	60da      	str	r2, [r3, #12]
 80042bc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042be:	463b      	mov	r3, r7
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <MX_TIM1_Init+0xa8>)
 80042ca:	4a22      	ldr	r2, [pc, #136]	; (8004354 <MX_TIM1_Init+0xac>)
 80042cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <MX_TIM1_Init+0xa8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d4:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <MX_TIM1_Init+0xa8>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <MX_TIM1_Init+0xa8>)
 80042dc:	2263      	movs	r2, #99	; 0x63
 80042de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <MX_TIM1_Init+0xa8>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <MX_TIM1_Init+0xa8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <MX_TIM1_Init+0xa8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042f2:	4817      	ldr	r0, [pc, #92]	; (8004350 <MX_TIM1_Init+0xa8>)
 80042f4:	f7fe fa96 	bl	8002824 <HAL_TIM_Base_Init>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80042fe:	f000 f99d 	bl	800463c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004302:	2306      	movs	r3, #6
 8004304:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8004306:	2330      	movs	r3, #48	; 0x30
 8004308:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800430a:	f107 030c 	add.w	r3, r7, #12
 800430e:	4619      	mov	r1, r3
 8004310:	480f      	ldr	r0, [pc, #60]	; (8004350 <MX_TIM1_Init+0xa8>)
 8004312:	f7ff f81c 	bl	800334e <HAL_TIM_SlaveConfigSynchro>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800431c:	f000 f98e 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004320:	2320      	movs	r3, #32
 8004322:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8004324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004328:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800432e:	463b      	mov	r3, r7
 8004330:	4619      	mov	r1, r3
 8004332:	4807      	ldr	r0, [pc, #28]	; (8004350 <MX_TIM1_Init+0xa8>)
 8004334:	f7ff fd38 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800433e:	f000 f97d 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <MX_TIM1_Init+0xac>)
 8004344:	2237      	movs	r2, #55	; 0x37
 8004346:	609a      	str	r2, [r3, #8]
  //TIM1->DIER = TIM_DIER_UIE;      // interrupt on update event (timer overflow)
  /* USER CODE END TIM1_Init 2 */

}
 8004348:	bf00      	nop
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000164 	.word	0x20000164
 8004354:	40012c00 	.word	0x40012c00

08004358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b090      	sub	sp, #64	; 0x40
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800435e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800436e:	f107 0320 	add.w	r3, r7, #32
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800437a:	1d3b      	adds	r3, r7, #4
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]
 8004388:	615a      	str	r2, [r3, #20]
 800438a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <MX_TIM2_Init+0xf4>)
 800438e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004394:	4b2d      	ldr	r3, [pc, #180]	; (800444c <MX_TIM2_Init+0xf4>)
 8004396:	2200      	movs	r2, #0
 8004398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800439a:	4b2c      	ldr	r3, [pc, #176]	; (800444c <MX_TIM2_Init+0xf4>)
 800439c:	2200      	movs	r2, #0
 800439e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80043a0:	4b2a      	ldr	r3, [pc, #168]	; (800444c <MX_TIM2_Init+0xf4>)
 80043a2:	2263      	movs	r2, #99	; 0x63
 80043a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <MX_TIM2_Init+0xf4>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ac:	4b27      	ldr	r3, [pc, #156]	; (800444c <MX_TIM2_Init+0xf4>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043b2:	4826      	ldr	r0, [pc, #152]	; (800444c <MX_TIM2_Init+0xf4>)
 80043b4:	f7fe fa36 	bl	8002824 <HAL_TIM_Base_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80043be:	f000 f93d 	bl	800463c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80043c2:	4822      	ldr	r0, [pc, #136]	; (800444c <MX_TIM2_Init+0xf4>)
 80043c4:	f7fe fb5e 	bl	8002a84 <HAL_TIM_PWM_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80043ce:	f000 f935 	bl	800463c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80043d2:	2306      	movs	r3, #6
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80043d6:	2330      	movs	r3, #48	; 0x30
 80043d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80043da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043de:	4619      	mov	r1, r3
 80043e0:	481a      	ldr	r0, [pc, #104]	; (800444c <MX_TIM2_Init+0xf4>)
 80043e2:	f7fe ffb4 	bl	800334e <HAL_TIM_SlaveConfigSynchro>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80043ec:	f000 f926 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80043f0:	2320      	movs	r3, #32
 80043f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043f8:	f107 0320 	add.w	r3, r7, #32
 80043fc:	4619      	mov	r1, r3
 80043fe:	4813      	ldr	r0, [pc, #76]	; (800444c <MX_TIM2_Init+0xf4>)
 8004400:	f7ff fcd2 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800440a:	f000 f917 	bl	800463c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800440e:	2360      	movs	r3, #96	; 0x60
 8004410:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 8004412:	235a      	movs	r3, #90	; 0x5a
 8004414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	220c      	movs	r2, #12
 8004422:	4619      	mov	r1, r3
 8004424:	4809      	ldr	r0, [pc, #36]	; (800444c <MX_TIM2_Init+0xf4>)
 8004426:	f7fe fdb5 	bl	8002f94 <HAL_TIM_PWM_ConfigChannel>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004430:	f000 f904 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 8004434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004438:	2237      	movs	r2, #55	; 0x37
 800443a:	609a      	str	r2, [r3, #8]
  //TIM2->DIER = TIM_DIER_UIE;      // interrupt on update event (timer overflow)
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800443c:	4803      	ldr	r0, [pc, #12]	; (800444c <MX_TIM2_Init+0xf4>)
 800443e:	f000 f9df 	bl	8004800 <HAL_TIM_MspPostInit>

}
 8004442:	bf00      	nop
 8004444:	3740      	adds	r7, #64	; 0x40
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200001b4 	.word	0x200001b4

08004450 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004456:	f107 0310 	add.w	r3, r7, #16
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004464:	1d3b      	adds	r3, r7, #4
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <MX_TIM4_Init+0x94>)
 8004470:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <MX_TIM4_Init+0x98>)
 8004472:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <MX_TIM4_Init+0x94>)
 8004476:	2207      	movs	r2, #7
 8004478:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <MX_TIM4_Init+0x94>)
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <MX_TIM4_Init+0x94>)
 8004482:	2202      	movs	r2, #2
 8004484:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <MX_TIM4_Init+0x94>)
 8004488:	2200      	movs	r2, #0
 800448a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <MX_TIM4_Init+0x94>)
 800448e:	2200      	movs	r2, #0
 8004490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004492:	4814      	ldr	r0, [pc, #80]	; (80044e4 <MX_TIM4_Init+0x94>)
 8004494:	f7fe f9c6 	bl	8002824 <HAL_TIM_Base_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800449e:	f000 f8cd 	bl	800463c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	4619      	mov	r1, r3
 80044ae:	480d      	ldr	r0, [pc, #52]	; (80044e4 <MX_TIM4_Init+0x94>)
 80044b0:	f7fe fe84 	bl	80031bc <HAL_TIM_ConfigClockSource>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80044ba:	f000 f8bf 	bl	800463c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044be:	2320      	movs	r3, #32
 80044c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044c6:	1d3b      	adds	r3, r7, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4806      	ldr	r0, [pc, #24]	; (80044e4 <MX_TIM4_Init+0x94>)
 80044cc:	f7ff fc6c 	bl	8003da8 <HAL_TIMEx_MasterConfigSynchronization>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80044d6:	f000 f8b1 	bl	800463c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80044da:	bf00      	nop
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200000a0 	.word	0x200000a0
 80044e8:	40000800 	.word	0x40000800

080044ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <MX_DMA_Init+0x60>)
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <MX_DMA_Init+0x60>)
 80044f8:	f043 0304 	orr.w	r3, r3, #4
 80044fc:	6493      	str	r3, [r2, #72]	; 0x48
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <MX_DMA_Init+0x60>)
 8004500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <MX_DMA_Init+0x60>)
 800450c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450e:	4a0f      	ldr	r2, [pc, #60]	; (800454c <MX_DMA_Init+0x60>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6493      	str	r3, [r2, #72]	; 0x48
 8004516:	4b0d      	ldr	r3, [pc, #52]	; (800454c <MX_DMA_Init+0x60>)
 8004518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004522:	2200      	movs	r2, #0
 8004524:	2100      	movs	r1, #0
 8004526:	200b      	movs	r0, #11
 8004528:	f7fc fae3 	bl	8000af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800452c:	200b      	movs	r0, #11
 800452e:	f7fc fafc 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	205e      	movs	r0, #94	; 0x5e
 8004538:	f7fc fadb 	bl	8000af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800453c:	205e      	movs	r0, #94	; 0x5e
 800453e:	f7fc faf4 	bl	8000b2a <HAL_NVIC_EnableIRQ>

}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000

08004550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004556:	f107 030c 	add.w	r3, r7, #12
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	609a      	str	r2, [r3, #8]
 8004562:	60da      	str	r2, [r3, #12]
 8004564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <MX_GPIO_Init+0x74>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <MX_GPIO_Init+0x74>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004572:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <MX_GPIO_Init+0x74>)
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <MX_GPIO_Init+0x74>)
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <MX_GPIO_Init+0x74>)
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <MX_GPIO_Init+0x74>)
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 8004596:	2200      	movs	r2, #0
 8004598:	2104      	movs	r1, #4
 800459a:	480b      	ldr	r0, [pc, #44]	; (80045c8 <MX_GPIO_Init+0x78>)
 800459c:	f7fd f9ba 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 80045a0:	2304      	movs	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045a4:	2301      	movs	r3, #1
 80045a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	4619      	mov	r1, r3
 80045b6:	4804      	ldr	r0, [pc, #16]	; (80045c8 <MX_GPIO_Init+0x78>)
 80045b8:	f7fd f81a 	bl	80015f0 <HAL_GPIO_Init>

}
 80045bc:	bf00      	nop
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	48000400 	.word	0x48000400

080045cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d121      	bne.n	8004622 <HAL_TIM_PeriodElapsedCallback+0x56>
		vert_count = (vert_count + 1) % 449;
 80045de:	4b14      	ldr	r3, [pc, #80]	; (8004630 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80045e6:	fb83 2301 	smull	r2, r3, r3, r1
 80045ea:	440b      	add	r3, r1
 80045ec:	121a      	asrs	r2, r3, #8
 80045ee:	17cb      	asrs	r3, r1, #31
 80045f0:	1ad2      	subs	r2, r2, r3
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	4413      	add	r3, r2
 80045fc:	1aca      	subs	r2, r1, r3
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004600:	601a      	str	r2, [r3, #0]
//		if (vert_count >= 60 || vert_count < 410) {
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) true_buffer[vert_count - 60], horiz_size, DAC_ALIGN_8B_R);
//		}

		if(vert_count >= 447) {
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 800460a:	dd05      	ble.n	8004618 <HAL_TIM_PeriodElapsedCallback+0x4c>
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800460c:	2200      	movs	r2, #0
 800460e:	2104      	movs	r1, #4
 8004610:	4809      	ldr	r0, [pc, #36]	; (8004638 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004612:	f7fd f97f 	bl	8001914 <HAL_GPIO_WritePin>
		} else {
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
		}
	}
}
 8004616:	e004      	b.n	8004622 <HAL_TIM_PeriodElapsedCallback+0x56>
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
 8004618:	2201      	movs	r2, #1
 800461a:	2104      	movs	r1, #4
 800461c:	4806      	ldr	r0, [pc, #24]	; (8004638 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800461e:	f7fd f979 	bl	8001914 <HAL_GPIO_WritePin>
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40012c00 	.word	0x40012c00
 8004630:	2000008c 	.word	0x2000008c
 8004634:	91f5bcb9 	.word	0x91f5bcb9
 8004638:	48000400 	.word	0x48000400

0800463c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004640:	b672      	cpsid	i
}
 8004642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004644:	e7fe      	b.n	8004644 <Error_Handler+0x8>
	...

08004648 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	4b0f      	ldr	r3, [pc, #60]	; (800468c <HAL_MspInit+0x44>)
 8004650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004652:	4a0e      	ldr	r2, [pc, #56]	; (800468c <HAL_MspInit+0x44>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6613      	str	r3, [r2, #96]	; 0x60
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <HAL_MspInit+0x44>)
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	607b      	str	r3, [r7, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <HAL_MspInit+0x44>)
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	4a08      	ldr	r2, [pc, #32]	; (800468c <HAL_MspInit+0x44>)
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6593      	str	r3, [r2, #88]	; 0x58
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_MspInit+0x44>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	603b      	str	r3, [r7, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40021000 	.word	0x40021000

08004690 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <HAL_DAC_MspInit+0xc8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d14d      	bne.n	800474e <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <HAL_DAC_MspInit+0xcc>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	4a29      	ldr	r2, [pc, #164]	; (800475c <HAL_DAC_MspInit+0xcc>)
 80046b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046bc:	6593      	str	r3, [r2, #88]	; 0x58
 80046be:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_DAC_MspInit+0xcc>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_DAC_MspInit+0xcc>)
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	4a23      	ldr	r2, [pc, #140]	; (800475c <HAL_DAC_MspInit+0xcc>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046d6:	4b21      	ldr	r3, [pc, #132]	; (800475c <HAL_DAC_MspInit+0xcc>)
 80046d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80046e2:	2310      	movs	r3, #16
 80046e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046e6:	2303      	movs	r3, #3
 80046e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	4619      	mov	r1, r3
 80046f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046f8:	f7fc ff7a 	bl	80015f0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 80046fe:	4a19      	ldr	r2, [pc, #100]	; (8004764 <HAL_DAC_MspInit+0xd4>)
 8004700:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 8004704:	2206      	movs	r2, #6
 8004706:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 800470a:	2210      	movs	r2, #16
 800470c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 8004710:	2200      	movs	r2, #0
 8004712:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 8004716:	2280      	movs	r2, #128	; 0x80
 8004718:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004720:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 8004722:	2200      	movs	r2, #0
 8004724:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 8004728:	2220      	movs	r2, #32
 800472a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 800472e:	2200      	movs	r2, #0
 8004730:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8004732:	480b      	ldr	r0, [pc, #44]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 8004734:	f7fc fcea 	bl	800110c <HAL_DMA_Init>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800473e:	f7ff ff7d 	bl	800463c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a06      	ldr	r2, [pc, #24]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	4a05      	ldr	r2, [pc, #20]	; (8004760 <HAL_DAC_MspInit+0xd0>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800474e:	bf00      	nop
 8004750:	3728      	adds	r7, #40	; 0x28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40007400 	.word	0x40007400
 800475c:	40021000 	.word	0x40021000
 8004760:	20000100 	.word	0x20000100
 8004764:	40020008 	.word	0x40020008

08004768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <HAL_TIM_Base_MspInit+0x8c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d114      	bne.n	80047a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800477a:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 800477c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477e:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 8004780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004784:	6613      	str	r3, [r2, #96]	; 0x60
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 8004788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004792:	2200      	movs	r2, #0
 8004794:	2100      	movs	r1, #0
 8004796:	2019      	movs	r0, #25
 8004798:	f7fc f9ab 	bl	8000af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800479c:	2019      	movs	r0, #25
 800479e:	f7fc f9c4 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80047a2:	e022      	b.n	80047ea <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d10c      	bne.n	80047c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ba:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
}
 80047c6:	e010      	b.n	80047ea <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0b      	ldr	r2, [pc, #44]	; (80047fc <HAL_TIM_Base_MspInit+0x94>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d10b      	bne.n	80047ea <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 80047d8:	f043 0304 	orr.w	r3, r3, #4
 80047dc:	6593      	str	r3, [r2, #88]	; 0x58
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_TIM_Base_MspInit+0x90>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40000800 	.word	0x40000800

08004800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004820:	d11c      	bne.n	800485c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_TIM_MspPostInit+0x64>)
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <HAL_TIM_MspPostInit+0x64>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_TIM_MspPostInit+0x64>)
 8004830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 800483a:	2308      	movs	r3, #8
 800483c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483e:	2302      	movs	r3, #2
 8004840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800484a:	2301      	movs	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 800484e:	f107 030c 	add.w	r3, r7, #12
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004858:	f7fc feca 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800485c:	bf00      	nop
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000

08004868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800486c:	e7fe      	b.n	800486c <NMI_Handler+0x4>

0800486e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800486e:	b480      	push	{r7}
 8004870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004872:	e7fe      	b.n	8004872 <HardFault_Handler+0x4>

08004874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004878:	e7fe      	b.n	8004878 <MemManage_Handler+0x4>

0800487a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800487e:	e7fe      	b.n	800487e <BusFault_Handler+0x4>

08004880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004884:	e7fe      	b.n	8004884 <UsageFault_Handler+0x4>

08004886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048b4:	f7fb fffe 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b8:	bf00      	nop
 80048ba:	bd80      	pop	{r7, pc}

080048bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80048c0:	4802      	ldr	r0, [pc, #8]	; (80048cc <DMA1_Channel1_IRQHandler+0x10>)
 80048c2:	f7fc fd46 	bl	8001352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000100 	.word	0x20000100

080048d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80048d6:	f7fe fa3d 	bl	8002d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000164 	.word	0x20000164

080048e4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 80048e8:	bf00      	nop
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <_sbrk+0x5c>)
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <_sbrk+0x60>)
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <_sbrk+0x64>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <_sbrk+0x64>)
 8004912:	4a12      	ldr	r2, [pc, #72]	; (800495c <_sbrk+0x68>)
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <_sbrk+0x64>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d207      	bcs.n	8004934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004924:	f000 f858 	bl	80049d8 <__errno>
 8004928:	4603      	mov	r3, r0
 800492a:	220c      	movs	r2, #12
 800492c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	e009      	b.n	8004948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <_sbrk+0x64>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_sbrk+0x64>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	4a05      	ldr	r2, [pc, #20]	; (8004958 <_sbrk+0x64>)
 8004944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004946:	68fb      	ldr	r3, [r7, #12]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200a0000 	.word	0x200a0000
 8004954:	00000400 	.word	0x00000400
 8004958:	20000090 	.word	0x20000090
 800495c:	20000210 	.word	0x20000210

08004960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <SystemInit+0x20>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	4a05      	ldr	r2, [pc, #20]	; (8004980 <SystemInit+0x20>)
 800496c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004988:	f7ff ffea 	bl	8004960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800498c:	480c      	ldr	r0, [pc, #48]	; (80049c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800498e:	490d      	ldr	r1, [pc, #52]	; (80049c4 <LoopForever+0xa>)
 ldr r2, =_sidata
 8004990:	4a0d      	ldr	r2, [pc, #52]	; (80049c8 <LoopForever+0xe>)
  movs r3, #0
 8004992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004994:	e002      	b.n	800499c <LoopCopyDataInit>

08004996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800499a:	3304      	adds	r3, #4

0800499c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800499c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800499e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049a0:	d3f9      	bcc.n	8004996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80049a4:	4c0a      	ldr	r4, [pc, #40]	; (80049d0 <LoopForever+0x16>)
  movs r3, #0
 80049a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049a8:	e001      	b.n	80049ae <LoopFillZerobss>

080049aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049ac:	3204      	adds	r2, #4

080049ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049b0:	d3fb      	bcc.n	80049aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049b2:	f000 f817 	bl	80049e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049b6:	f7ff fbb3 	bl	8004120 <main>

080049ba <LoopForever>:

LoopForever:
    b LoopForever
 80049ba:	e7fe      	b.n	80049ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80049bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80049c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049c4:	20000070 	.word	0x20000070
 ldr r2, =_sidata
 80049c8:	08004b9c 	.word	0x08004b9c
  ldr r2, =_sbss
 80049cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80049d0:	20000210 	.word	0x20000210

080049d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049d4:	e7fe      	b.n	80049d4 <ADC1_IRQHandler>
	...

080049d8 <__errno>:
 80049d8:	4b01      	ldr	r3, [pc, #4]	; (80049e0 <__errno+0x8>)
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <__libc_init_array>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4d0d      	ldr	r5, [pc, #52]	; (8004a1c <__libc_init_array+0x38>)
 80049e8:	4c0d      	ldr	r4, [pc, #52]	; (8004a20 <__libc_init_array+0x3c>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	2600      	movs	r6, #0
 80049f0:	42a6      	cmp	r6, r4
 80049f2:	d109      	bne.n	8004a08 <__libc_init_array+0x24>
 80049f4:	4d0b      	ldr	r5, [pc, #44]	; (8004a24 <__libc_init_array+0x40>)
 80049f6:	4c0c      	ldr	r4, [pc, #48]	; (8004a28 <__libc_init_array+0x44>)
 80049f8:	f000 f8a0 	bl	8004b3c <_init>
 80049fc:	1b64      	subs	r4, r4, r5
 80049fe:	10a4      	asrs	r4, r4, #2
 8004a00:	2600      	movs	r6, #0
 8004a02:	42a6      	cmp	r6, r4
 8004a04:	d105      	bne.n	8004a12 <__libc_init_array+0x2e>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0c:	4798      	blx	r3
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7ee      	b.n	80049f0 <__libc_init_array+0xc>
 8004a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a16:	4798      	blx	r3
 8004a18:	3601      	adds	r6, #1
 8004a1a:	e7f2      	b.n	8004a02 <__libc_init_array+0x1e>
 8004a1c:	08004b94 	.word	0x08004b94
 8004a20:	08004b94 	.word	0x08004b94
 8004a24:	08004b94 	.word	0x08004b94
 8004a28:	08004b98 	.word	0x08004b98

08004a2c <malloc>:
 8004a2c:	4b02      	ldr	r3, [pc, #8]	; (8004a38 <malloc+0xc>)
 8004a2e:	4601      	mov	r1, r0
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	f000 b80b 	b.w	8004a4c <_malloc_r>
 8004a36:	bf00      	nop
 8004a38:	2000000c 	.word	0x2000000c

08004a3c <memset>:
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d100      	bne.n	8004a46 <memset+0xa>
 8004a44:	4770      	bx	lr
 8004a46:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4a:	e7f9      	b.n	8004a40 <memset+0x4>

08004a4c <_malloc_r>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	1ccd      	adds	r5, r1, #3
 8004a50:	f025 0503 	bic.w	r5, r5, #3
 8004a54:	3508      	adds	r5, #8
 8004a56:	2d0c      	cmp	r5, #12
 8004a58:	bf38      	it	cc
 8004a5a:	250c      	movcc	r5, #12
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	4606      	mov	r6, r0
 8004a60:	db01      	blt.n	8004a66 <_malloc_r+0x1a>
 8004a62:	42a9      	cmp	r1, r5
 8004a64:	d903      	bls.n	8004a6e <_malloc_r+0x22>
 8004a66:	230c      	movs	r3, #12
 8004a68:	6033      	str	r3, [r6, #0]
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a6e:	f000 f857 	bl	8004b20 <__malloc_lock>
 8004a72:	4921      	ldr	r1, [pc, #132]	; (8004af8 <_malloc_r+0xac>)
 8004a74:	680a      	ldr	r2, [r1, #0]
 8004a76:	4614      	mov	r4, r2
 8004a78:	b99c      	cbnz	r4, 8004aa2 <_malloc_r+0x56>
 8004a7a:	4f20      	ldr	r7, [pc, #128]	; (8004afc <_malloc_r+0xb0>)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b923      	cbnz	r3, 8004a8a <_malloc_r+0x3e>
 8004a80:	4621      	mov	r1, r4
 8004a82:	4630      	mov	r0, r6
 8004a84:	f000 f83c 	bl	8004b00 <_sbrk_r>
 8004a88:	6038      	str	r0, [r7, #0]
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f000 f837 	bl	8004b00 <_sbrk_r>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d123      	bne.n	8004ade <_malloc_r+0x92>
 8004a96:	230c      	movs	r3, #12
 8004a98:	6033      	str	r3, [r6, #0]
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f000 f846 	bl	8004b2c <__malloc_unlock>
 8004aa0:	e7e3      	b.n	8004a6a <_malloc_r+0x1e>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	1b5b      	subs	r3, r3, r5
 8004aa6:	d417      	bmi.n	8004ad8 <_malloc_r+0x8c>
 8004aa8:	2b0b      	cmp	r3, #11
 8004aaa:	d903      	bls.n	8004ab4 <_malloc_r+0x68>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	441c      	add	r4, r3
 8004ab0:	6025      	str	r5, [r4, #0]
 8004ab2:	e004      	b.n	8004abe <_malloc_r+0x72>
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	42a2      	cmp	r2, r4
 8004ab8:	bf0c      	ite	eq
 8004aba:	600b      	streq	r3, [r1, #0]
 8004abc:	6053      	strne	r3, [r2, #4]
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f000 f834 	bl	8004b2c <__malloc_unlock>
 8004ac4:	f104 000b 	add.w	r0, r4, #11
 8004ac8:	1d23      	adds	r3, r4, #4
 8004aca:	f020 0007 	bic.w	r0, r0, #7
 8004ace:	1ac2      	subs	r2, r0, r3
 8004ad0:	d0cc      	beq.n	8004a6c <_malloc_r+0x20>
 8004ad2:	1a1b      	subs	r3, r3, r0
 8004ad4:	50a3      	str	r3, [r4, r2]
 8004ad6:	e7c9      	b.n	8004a6c <_malloc_r+0x20>
 8004ad8:	4622      	mov	r2, r4
 8004ada:	6864      	ldr	r4, [r4, #4]
 8004adc:	e7cc      	b.n	8004a78 <_malloc_r+0x2c>
 8004ade:	1cc4      	adds	r4, r0, #3
 8004ae0:	f024 0403 	bic.w	r4, r4, #3
 8004ae4:	42a0      	cmp	r0, r4
 8004ae6:	d0e3      	beq.n	8004ab0 <_malloc_r+0x64>
 8004ae8:	1a21      	subs	r1, r4, r0
 8004aea:	4630      	mov	r0, r6
 8004aec:	f000 f808 	bl	8004b00 <_sbrk_r>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d1dd      	bne.n	8004ab0 <_malloc_r+0x64>
 8004af4:	e7cf      	b.n	8004a96 <_malloc_r+0x4a>
 8004af6:	bf00      	nop
 8004af8:	20000094 	.word	0x20000094
 8004afc:	20000098 	.word	0x20000098

08004b00 <_sbrk_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4d06      	ldr	r5, [pc, #24]	; (8004b1c <_sbrk_r+0x1c>)
 8004b04:	2300      	movs	r3, #0
 8004b06:	4604      	mov	r4, r0
 8004b08:	4608      	mov	r0, r1
 8004b0a:	602b      	str	r3, [r5, #0]
 8004b0c:	f7ff fef2 	bl	80048f4 <_sbrk>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d102      	bne.n	8004b1a <_sbrk_r+0x1a>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	b103      	cbz	r3, 8004b1a <_sbrk_r+0x1a>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	20000200 	.word	0x20000200

08004b20 <__malloc_lock>:
 8004b20:	4801      	ldr	r0, [pc, #4]	; (8004b28 <__malloc_lock+0x8>)
 8004b22:	f000 b809 	b.w	8004b38 <__retarget_lock_acquire_recursive>
 8004b26:	bf00      	nop
 8004b28:	20000208 	.word	0x20000208

08004b2c <__malloc_unlock>:
 8004b2c:	4801      	ldr	r0, [pc, #4]	; (8004b34 <__malloc_unlock+0x8>)
 8004b2e:	f000 b804 	b.w	8004b3a <__retarget_lock_release_recursive>
 8004b32:	bf00      	nop
 8004b34:	20000208 	.word	0x20000208

08004b38 <__retarget_lock_acquire_recursive>:
 8004b38:	4770      	bx	lr

08004b3a <__retarget_lock_release_recursive>:
 8004b3a:	4770      	bx	lr

08004b3c <_init>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr

08004b48 <_fini>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr
