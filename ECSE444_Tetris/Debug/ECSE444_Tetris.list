
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db00  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  0800dcc0  0800dcc0  0001dcc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e840  0800e840  000206a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e840  0800e840  0001e840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e848  0800e848  000206a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e848  0800e848  0001e848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e84c  0800e84c  0001e84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a0  20000000  0800e850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a444  200006a0  0800eef0  000206a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001aae4  0800eef0  0002aae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c5c1  00000000  00000000  000206d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bf9  00000000  00000000  0004cc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  00051890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  00053478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f5a1  00000000  00000000  00054eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb93  00000000  00000000  00084459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c3ad  00000000  00000000  000a3fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001c0399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008298  00000000  00000000  001c0464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001c86fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200006a0 	.word	0x200006a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800dca8 	.word	0x0800dca8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200006a4 	.word	0x200006a4
 80001fc:	0800dca8 	.word	0x0800dca8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f901 	bl	8001172 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f70:	200f      	movs	r0, #15
 8000f72:	f00a f8ff 	bl	800b174 <HAL_InitTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e001      	b.n	8000f86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f82:	f009 ff15 	bl	800adb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	2000205c 	.word	0x2000205c

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000205c 	.word	0x2000205c

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000004 	.word	0x20000004

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff4c 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119a:	f7ff ff61 	bl	8001060 <__NVIC_GetPriorityGrouping>
 800119e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff ffb1 	bl	800110c <NVIC_EncodePriority>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff80 	bl	80010b8 <__NVIC_SetPriority>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff54 	bl	800107c <__NVIC_EnableIRQ>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e014      	b.n	8001218 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f009 fdfe 	bl	800ae00 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	795b      	ldrb	r3, [r3, #5]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_DAC_Start_DMA+0x1e>
 800123a:	2302      	movs	r3, #2
 800123c:	e0ab      	b.n	8001396 <HAL_DAC_Start_DMA+0x176>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2202      	movs	r2, #2
 8001248:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d12f      	bne.n	80012b0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_DAC_Start_DMA+0x180>)
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a51      	ldr	r2, [pc, #324]	; (80013a4 <HAL_DAC_Start_DMA+0x184>)
 800125e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4a50      	ldr	r2, [pc, #320]	; (80013a8 <HAL_DAC_Start_DMA+0x188>)
 8001266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001276:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2b08      	cmp	r3, #8
 800127c:	d013      	beq.n	80012a6 <HAL_DAC_Start_DMA+0x86>
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	2b08      	cmp	r3, #8
 8001282:	d845      	bhi.n	8001310 <HAL_DAC_Start_DMA+0xf0>
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_DAC_Start_DMA+0x72>
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	2b04      	cmp	r3, #4
 800128e:	d005      	beq.n	800129c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001290:	e03e      	b.n	8001310 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3308      	adds	r3, #8
 8001298:	613b      	str	r3, [r7, #16]
        break;
 800129a:	e03c      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	330c      	adds	r3, #12
 80012a2:	613b      	str	r3, [r7, #16]
        break;
 80012a4:	e037      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3310      	adds	r3, #16
 80012ac:	613b      	str	r3, [r7, #16]
        break;
 80012ae:	e032      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4a3d      	ldr	r2, [pc, #244]	; (80013ac <HAL_DAC_Start_DMA+0x18c>)
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <HAL_DAC_Start_DMA+0x190>)
 80012be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4a3b      	ldr	r2, [pc, #236]	; (80013b4 <HAL_DAC_Start_DMA+0x194>)
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d013      	beq.n	8001306 <HAL_DAC_Start_DMA+0xe6>
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d817      	bhi.n	8001314 <HAL_DAC_Start_DMA+0xf4>
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_DAC_Start_DMA+0xd2>
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d005      	beq.n	80012fc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80012f0:	e010      	b.n	8001314 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3314      	adds	r3, #20
 80012f8:	613b      	str	r3, [r7, #16]
        break;
 80012fa:	e00c      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3318      	adds	r3, #24
 8001302:	613b      	str	r3, [r7, #16]
        break;
 8001304:	e007      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	331c      	adds	r3, #28
 800130c:	613b      	str	r3, [r7, #16]
        break;
 800130e:	e002      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001310:	bf00      	nop
 8001312:	e000      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001314:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d111      	bne.n	8001340 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800132a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6898      	ldr	r0, [r3, #8]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	f000 fb3d 	bl	80019b4 <HAL_DMA_Start_IT>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]
 800133e:	e010      	b.n	8001362 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800134e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68d8      	ldr	r0, [r3, #12]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	f000 fb2b 	bl	80019b4 <HAL_DMA_Start_IT>
 800135e:	4603      	mov	r3, r0
 8001360:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10c      	bne.n	8001388 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2201      	movs	r2, #1
 800137c:	409a      	lsls	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e005      	b.n	8001394 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f043 0204 	orr.w	r2, r3, #4
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001394:	7dfb      	ldrb	r3, [r7, #23]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	0800173d 	.word	0x0800173d
 80013a4:	0800175f 	.word	0x0800175f
 80013a8:	0800177b 	.word	0x0800177b
 80013ac:	080017f9 	.word	0x080017f9
 80013b0:	0800181b 	.word	0x0800181b
 80013b4:	08001837 	.word	0x08001837

080013b8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ce:	d120      	bne.n	8001412 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013de:	d118      	bne.n	8001412 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2204      	movs	r2, #4
 80013e4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	f043 0201 	orr.w	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800140a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f84b 	bl	80014a8 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800141c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001420:	d120      	bne.n	8001464 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800142c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001430:	d118      	bne.n	8001464 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2204      	movs	r2, #4
 8001436:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f043 0202 	orr.w	r2, r3, #2
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800144c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800145c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f9c0 	bl	80017e4 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	795b      	ldrb	r3, [r3, #5]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_DAC_ConfigChannel+0x1c>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e12a      	b.n	800172e <HAL_DAC_ConfigChannel+0x272>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2202      	movs	r2, #2
 80014e2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d174      	bne.n	80015d6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80014ec:	f7ff fd64 	bl	8000fb8 <HAL_GetTick>
 80014f0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d134      	bne.n	8001562 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80014f8:	e011      	b.n	800151e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80014fa:	f7ff fd5d 	bl	8000fb8 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d90a      	bls.n	800151e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f043 0208 	orr.w	r2, r3, #8
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2203      	movs	r2, #3
 8001518:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e107      	b.n	800172e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e6      	bne.n	80014fa <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fd4f 	bl	8000fd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	69d2      	ldr	r2, [r2, #28]
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
 800153c:	e01e      	b.n	800157c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800153e:	f7ff fd3b 	bl	8000fb8 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d90a      	bls.n	8001562 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	f043 0208 	orr.w	r2, r3, #8
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2203      	movs	r2, #3
 800155c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e0e5      	b.n	800172e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	2b00      	cmp	r3, #0
 800156a:	dbe8      	blt.n	800153e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fd2f 	bl	8000fd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	69d2      	ldr	r2, [r2, #28]
 800157a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	ea02 0103 	and.w	r1, r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	409a      	lsls	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	21ff      	movs	r1, #255	; 0xff
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	ea02 0103 	and.w	r1, r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	409a      	lsls	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d11d      	bne.n	800161a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e4:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	221f      	movs	r2, #31
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	4313      	orrs	r3, r2
 8001610:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001620:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2207      	movs	r2, #7
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	4013      	ands	r3, r2
 8001634:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	431a      	orrs	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	4313      	orrs	r3, r2
 8001658:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6819      	ldr	r1, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	400a      	ands	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	4013      	ands	r3, r2
 800169c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016be:	d104      	bne.n	80016ca <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	e018      	b.n	80016fc <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d104      	bne.n	80016dc <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e00f      	b.n	80016fc <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80016dc:	f001 fc3c 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 80016e0:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_DAC_ConfigChannel+0x27c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d904      	bls.n	80016f4 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e003      	b.n	80016fc <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016fa:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	22c0      	movs	r2, #192	; 0xc0
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	400a      	ands	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	04c4b400 	.word	0x04c4b400

0800173c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f7ff fe8e 	bl	800146c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	711a      	strb	r2, [r3, #4]
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7ff fe87 	bl	8001480 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f043 0204 	orr.w	r2, r3, #4
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7ff fe7d 	bl	8001494 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	711a      	strb	r2, [r3, #4]
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff ffce 	bl	80017a8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	711a      	strb	r2, [r3, #4]
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff ffc7 	bl	80017bc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7ff ffbd 	bl	80017d0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	711a      	strb	r2, [r3, #4]
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e08d      	b.n	8001992 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_DMA_Init+0x138>)
 800187e:	429a      	cmp	r2, r3
 8001880:	d80f      	bhi.n	80018a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b45      	ldr	r3, [pc, #276]	; (80019a0 <HAL_DMA_Init+0x13c>)
 800188a:	4413      	add	r3, r2
 800188c:	4a45      	ldr	r2, [pc, #276]	; (80019a4 <HAL_DMA_Init+0x140>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	009a      	lsls	r2, r3, #2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_DMA_Init+0x144>)
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
 80018a0:	e00e      	b.n	80018c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b40      	ldr	r3, [pc, #256]	; (80019ac <HAL_DMA_Init+0x148>)
 80018aa:	4413      	add	r3, r2
 80018ac:	4a3d      	ldr	r2, [pc, #244]	; (80019a4 <HAL_DMA_Init+0x140>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	009a      	lsls	r2, r3, #2
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a3c      	ldr	r2, [pc, #240]	; (80019b0 <HAL_DMA_Init+0x14c>)
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fa72 	bl	8001dfc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001920:	d102      	bne.n	8001928 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800193c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d010      	beq.n	8001968 <HAL_DMA_Init+0x104>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b04      	cmp	r3, #4
 800194c:	d80c      	bhi.n	8001968 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fa92 	bl	8001e78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	e008      	b.n	800197a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40020407 	.word	0x40020407
 80019a0:	bffdfff8 	.word	0xbffdfff8
 80019a4:	cccccccd 	.word	0xcccccccd
 80019a8:	40020000 	.word	0x40020000
 80019ac:	bffdfbf8 	.word	0xbffdfbf8
 80019b0:	40020400 	.word	0x40020400

080019b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA_Start_IT+0x20>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e066      	b.n	8001aa2 <HAL_DMA_Start_IT+0xee>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d155      	bne.n	8001a94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f9b6 	bl	8001d7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 020e 	orr.w	r2, r2, #14
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e00f      	b.n	8001a4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0204 	bic.w	r2, r2, #4
 8001a3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 020a 	orr.w	r2, r2, #10
 8001a4a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a68:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a80:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e005      	b.n	8001aa0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d008      	beq.n	8001ad4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e040      	b.n	8001b56 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 020e 	bic.w	r2, r2, #14
 8001ae2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f003 021c 	and.w	r2, r3, #28
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b42:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d005      	beq.n	8001b86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e047      	b.n	8001c16 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 020e 	bic.w	r2, r2, #14
 8001b94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f003 021c 	and.w	r2, r3, #28
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bd2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00c      	beq.n	8001bf6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bf4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
    }
  }
  return status;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f003 031c 	and.w	r3, r3, #28
 8001c40:	2204      	movs	r2, #4
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d026      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x7a>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d021      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d107      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0204 	bic.w	r2, r2, #4
 8001c72:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	f003 021c 	and.w	r2, r3, #28
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	2104      	movs	r1, #4
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d071      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c98:	e06c      	b.n	8001d74 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f003 031c 	and.w	r3, r3, #28
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d02e      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xec>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d029      	beq.n	8001d0c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10b      	bne.n	8001cde <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 020a 	bic.w	r2, r2, #10
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f003 021c 	and.w	r2, r3, #28
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	2102      	movs	r1, #2
 8001cec:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d038      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d0a:	e033      	b.n	8001d74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	f003 031c 	and.w	r3, r3, #28
 8001d14:	2208      	movs	r2, #8
 8001d16:	409a      	lsls	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d02a      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x156>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d025      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 020e 	bic.w	r2, r2, #14
 8001d38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f003 021c 	and.w	r2, r3, #28
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
}
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b085      	sub	sp, #20
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d94:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001da6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	f003 021c 	and.w	r2, r3, #28
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d108      	bne.n	8001dde <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ddc:	e007      	b.n	8001dee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	60da      	str	r2, [r3, #12]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d80a      	bhi.n	8001e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e1c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6493      	str	r3, [r2, #72]	; 0x48
 8001e24:	e007      	b.n	8001e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	009a      	lsls	r2, r3, #2
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e30:	4413      	add	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3b08      	subs	r3, #8
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2201      	movs	r2, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40020407 	.word	0x40020407
 8001e6c:	4002081c 	.word	0x4002081c
 8001e70:	cccccccd 	.word	0xcccccccd
 8001e74:	40020880 	.word	0x40020880

08001e78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e9a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	1000823f 	.word	0x1000823f
 8001ebc:	40020940 	.word	0x40020940

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ece:	e166      	b.n	800219e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8158 	beq.w	8002198 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d005      	beq.n	8001f00 <HAL_GPIO_Init+0x40>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d130      	bne.n	8001f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f36:	2201      	movs	r2, #1
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	f003 0201 	and.w	r2, r3, #1
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d017      	beq.n	8001f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d123      	bne.n	8001ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0203 	and.w	r2, r3, #3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80b2 	beq.w	8002198 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002034:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_GPIO_Init+0x2fc>)
 8002036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002038:	4a60      	ldr	r2, [pc, #384]	; (80021bc <HAL_GPIO_Init+0x2fc>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6613      	str	r3, [r2, #96]	; 0x60
 8002040:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <HAL_GPIO_Init+0x2fc>)
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800204c:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_GPIO_Init+0x300>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002076:	d02b      	beq.n	80020d0 <HAL_GPIO_Init+0x210>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_GPIO_Init+0x304>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d025      	beq.n	80020cc <HAL_GPIO_Init+0x20c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_GPIO_Init+0x308>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01f      	beq.n	80020c8 <HAL_GPIO_Init+0x208>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_GPIO_Init+0x30c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d019      	beq.n	80020c4 <HAL_GPIO_Init+0x204>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_GPIO_Init+0x310>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_GPIO_Init+0x200>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a4e      	ldr	r2, [pc, #312]	; (80021d4 <HAL_GPIO_Init+0x314>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00d      	beq.n	80020bc <HAL_GPIO_Init+0x1fc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <HAL_GPIO_Init+0x318>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <HAL_GPIO_Init+0x1f8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <HAL_GPIO_Init+0x31c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_GPIO_Init+0x1f4>
 80020b0:	2307      	movs	r3, #7
 80020b2:	e00e      	b.n	80020d2 <HAL_GPIO_Init+0x212>
 80020b4:	2308      	movs	r3, #8
 80020b6:	e00c      	b.n	80020d2 <HAL_GPIO_Init+0x212>
 80020b8:	2306      	movs	r3, #6
 80020ba:	e00a      	b.n	80020d2 <HAL_GPIO_Init+0x212>
 80020bc:	2305      	movs	r3, #5
 80020be:	e008      	b.n	80020d2 <HAL_GPIO_Init+0x212>
 80020c0:	2304      	movs	r3, #4
 80020c2:	e006      	b.n	80020d2 <HAL_GPIO_Init+0x212>
 80020c4:	2303      	movs	r3, #3
 80020c6:	e004      	b.n	80020d2 <HAL_GPIO_Init+0x212>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_Init+0x212>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_GPIO_Init+0x212>
 80020d0:	2300      	movs	r3, #0
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	f002 0203 	and.w	r2, r2, #3
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	4093      	lsls	r3, r2
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020e2:	4937      	ldr	r1, [pc, #220]	; (80021c0 <HAL_GPIO_Init+0x300>)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f0:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_GPIO_Init+0x320>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002114:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_GPIO_Init+0x320>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800213e:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002144:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_GPIO_Init+0x320>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f47f ae91 	bne.w	8001ed0 <HAL_GPIO_Init+0x10>
  }
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	48000400 	.word	0x48000400
 80021c8:	48000800 	.word	0x48000800
 80021cc:	48000c00 	.word	0x48000c00
 80021d0:	48001000 	.word	0x48001000
 80021d4:	48001400 	.word	0x48001400
 80021d8:	48001800 	.word	0x48001800
 80021dc:	48001c00 	.word	0x48001c00
 80021e0:	40010400 	.word	0x40010400

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002200:	e002      	b.n	8002208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_PWREx_GetVoltageRange+0x3c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002224:	d102      	bne.n	800222c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222a:	e00b      	b.n	8002244 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_PWREx_GetVoltageRange+0x3c>)
 800222e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223a:	d102      	bne.n	8002242 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800223c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002240:	e000      	b.n	8002244 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002242:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40007000 	.word	0x40007000

08002254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d141      	bne.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002262:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800226a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226e:	d131      	bne.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002270:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002276:	4a46      	ldr	r2, [pc, #280]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800227c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002280:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002288:	4a41      	ldr	r2, [pc, #260]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002290:	4b40      	ldr	r3, [pc, #256]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2232      	movs	r2, #50	; 0x32
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a3f      	ldr	r2, [pc, #252]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	0c9b      	lsrs	r3, r3, #18
 80022a2:	3301      	adds	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a6:	e002      	b.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ae:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ba:	d102      	bne.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f2      	bne.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022c2:	4b33      	ldr	r3, [pc, #204]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d158      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e057      	b.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d4:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022da:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022e4:	e04d      	b.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ec:	d141      	bne.n	8002372 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fa:	d131      	bne.n	8002360 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002314:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2232      	movs	r2, #50	; 0x32
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	3301      	adds	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002332:	e002      	b.n	800233a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3b01      	subs	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002346:	d102      	bne.n	800234e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f2      	bne.n	8002334 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d112      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e011      	b.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002370:	e007      	b.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002380:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40007000 	.word	0x40007000
 8002394:	20000624 	.word	0x20000624
 8002398:	431bde83 	.word	0x431bde83

0800239c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f000 bc16 	b.w	8002bdc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b0:	4ba0      	ldr	r3, [pc, #640]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ba:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80e4 	beq.w	800259a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4c>
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	f040 808b 	bne.w	80024f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	f040 8087 	bne.w	80024f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023e8:	4b92      	ldr	r3, [pc, #584]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_OscConfig+0x64>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e3ed      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_RCC_OscConfig+0x7e>
 8002410:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002418:	e005      	b.n	8002426 <HAL_RCC_OscConfig+0x8a>
 800241a:	4b86      	ldr	r3, [pc, #536]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800241c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002426:	4293      	cmp	r3, r2
 8002428:	d223      	bcs.n	8002472 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fdfc 	bl	800302c <RCC_SetFlashLatencyFromMSIRange>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e3ce      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800243e:	4b7d      	ldr	r3, [pc, #500]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7c      	ldr	r2, [pc, #496]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4977      	ldr	r1, [pc, #476]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245c:	4b75      	ldr	r3, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	4972      	ldr	r1, [pc, #456]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
 8002470:	e025      	b.n	80024be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002472:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6f      	ldr	r2, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002478:	f043 0308 	orr.w	r3, r3, #8
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	496a      	ldr	r1, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	4965      	ldr	r1, [pc, #404]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fdbc 	bl	800302c <RCC_SetFlashLatencyFromMSIRange>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e38e      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024be:	f000 fcbf 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	495a      	ldr	r1, [pc, #360]	; (8002638 <HAL_RCC_OscConfig+0x29c>)
 80024d0:	5ccb      	ldrb	r3, [r1, r3]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_OscConfig+0x2a0>)
 80024dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024de:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_RCC_OscConfig+0x2a4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f008 fe46 	bl	800b174 <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d052      	beq.n	8002598 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	e372      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d032      	beq.n	8002564 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024fe:	4b4d      	ldr	r3, [pc, #308]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800250a:	f7fe fd55 	bl	8000fb8 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002512:	f7fe fd51 	bl	8000fb8 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e35b      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002530:	4b40      	ldr	r3, [pc, #256]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a3f      	ldr	r2, [pc, #252]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	493a      	ldr	r1, [pc, #232]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	4935      	ldr	r1, [pc, #212]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
 8002562:	e01a      	b.n	800259a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002570:	f7fe fd22 	bl	8000fb8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002578:	f7fe fd1e 	bl	8000fb8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e328      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1dc>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d073      	beq.n	800268e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x21c>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d10e      	bne.n	80025d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d10b      	bne.n	80025d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d063      	beq.n	800268c <HAL_RCC_OscConfig+0x2f0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d15f      	bne.n	800268c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e305      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d106      	bne.n	80025e8 <HAL_RCC_OscConfig+0x24c>
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e01d      	b.n	8002624 <HAL_RCC_OscConfig+0x288>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x270>
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 80025f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0x288>
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 8002612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_RCC_OscConfig+0x298>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01b      	beq.n	8002664 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fcc4 	bl	8000fb8 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002632:	e010      	b.n	8002656 <HAL_RCC_OscConfig+0x2ba>
 8002634:	40021000 	.word	0x40021000
 8002638:	0800de24 	.word	0x0800de24
 800263c:	20000624 	.word	0x20000624
 8002640:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fcb8 	bl	8000fb8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e2c2      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002656:	4baf      	ldr	r3, [pc, #700]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x2a8>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fca8 	bl	8000fb8 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fca4 	bl	8000fb8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e2ae      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800267e:	4ba5      	ldr	r3, [pc, #660]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x2d0>
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d060      	beq.n	800275c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d005      	beq.n	80026ac <HAL_RCC_OscConfig+0x310>
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d119      	bne.n	80026da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d116      	bne.n	80026da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ac:	4b99      	ldr	r3, [pc, #612]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_OscConfig+0x328>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e28b      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b93      	ldr	r3, [pc, #588]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	4990      	ldr	r1, [pc, #576]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d8:	e040      	b.n	800275c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d023      	beq.n	800272a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e2:	4b8c      	ldr	r3, [pc, #560]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a8b      	ldr	r2, [pc, #556]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe fc63 	bl	8000fb8 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f6:	f7fe fc5f 	bl	8000fb8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e269      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002708:	4b82      	ldr	r3, [pc, #520]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	497c      	ldr	r1, [pc, #496]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	e018      	b.n	800275c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a79      	ldr	r2, [pc, #484]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fc3f 	bl	8000fb8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273e:	f7fe fc3b 	bl	8000fb8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e245      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002750:	4b70      	ldr	r3, [pc, #448]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d03c      	beq.n	80027e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d01c      	beq.n	80027aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002770:	4b68      	ldr	r3, [pc, #416]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002776:	4a67      	ldr	r2, [pc, #412]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7fe fc1a 	bl	8000fb8 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7fe fc16 	bl	8000fb8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e220      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800279a:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 800279c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ef      	beq.n	8002788 <HAL_RCC_OscConfig+0x3ec>
 80027a8:	e01b      	b.n	80027e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027aa:	4b5a      	ldr	r3, [pc, #360]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80027ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b0:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7fe fbfd 	bl	8000fb8 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c2:	f7fe fbf9 	bl	8000fb8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e203      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80027d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1ef      	bne.n	80027c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80a6 	beq.w	800293c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027f4:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10d      	bne.n	800281c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b44      	ldr	r3, [pc, #272]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	4a43      	ldr	r2, [pc, #268]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	6593      	str	r3, [r2, #88]	; 0x58
 800280c:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002818:	2301      	movs	r3, #1
 800281a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_RCC_OscConfig+0x57c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d118      	bne.n	800285a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002828:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCC_OscConfig+0x57c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <HAL_RCC_OscConfig+0x57c>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002832:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002834:	f7fe fbc0 	bl	8000fb8 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283c:	f7fe fbbc 	bl	8000fb8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1c6      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284e:	4b32      	ldr	r3, [pc, #200]	; (8002918 <HAL_RCC_OscConfig+0x57c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d108      	bne.n	8002874 <HAL_RCC_OscConfig+0x4d8>
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002872:	e024      	b.n	80028be <HAL_RCC_OscConfig+0x522>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d110      	bne.n	800289e <HAL_RCC_OscConfig+0x502>
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289c:	e00f      	b.n	80028be <HAL_RCC_OscConfig+0x522>
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7fe fb77 	bl	8000fb8 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028cc:	e00a      	b.n	80028e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7fe fb73 	bl	8000fb8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e17b      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_OscConfig+0x578>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ed      	beq.n	80028ce <HAL_RCC_OscConfig+0x532>
 80028f2:	e01a      	b.n	800292a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fb60 	bl	8000fb8 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028fa:	e00f      	b.n	800291c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fb5c 	bl	8000fb8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d906      	bls.n	800291c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e164      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800291c:	4ba8      	ldr	r3, [pc, #672]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1e8      	bne.n	80028fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292a:	7ffb      	ldrb	r3, [r7, #31]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d105      	bne.n	800293c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002930:	4ba3      	ldr	r3, [pc, #652]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	4aa2      	ldr	r2, [pc, #648]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d03c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01c      	beq.n	800298a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002950:	4b9b      	ldr	r3, [pc, #620]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002956:	4a9a      	ldr	r2, [pc, #616]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7fe fb2a 	bl	8000fb8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002968:	f7fe fb26 	bl	8000fb8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e130      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800297a:	4b91      	ldr	r3, [pc, #580]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 800297c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ef      	beq.n	8002968 <HAL_RCC_OscConfig+0x5cc>
 8002988:	e01b      	b.n	80029c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800298a:	4b8d      	ldr	r3, [pc, #564]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 800298c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002990:	4a8b      	ldr	r2, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe fb0d 	bl	8000fb8 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029a2:	f7fe fb09 	bl	8000fb8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e113      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029b4:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 80029b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ef      	bne.n	80029a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8107 	beq.w	8002bda <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	f040 80cb 	bne.w	8002b6c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029d6:	4b7a      	ldr	r3, [pc, #488]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0203 	and.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d12c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	3b01      	subs	r3, #1
 80029f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d123      	bne.n	8002a44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d11b      	bne.n	8002a44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d113      	bne.n	8002a44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	085b      	lsrs	r3, r3, #1
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d06d      	beq.n	8002b20 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d068      	beq.n	8002b1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a56:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0ba      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a66:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a55      	ldr	r2, [pc, #340]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a72:	f7fe faa1 	bl	8000fb8 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe fa9d 	bl	8000fb8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e0a7      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a98:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_RCC_OscConfig+0x828>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002aa8:	3a01      	subs	r2, #1
 8002aaa:	0112      	lsls	r2, r2, #4
 8002aac:	4311      	orrs	r1, r2
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ab2:	0212      	lsls	r2, r2, #8
 8002ab4:	4311      	orrs	r1, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aba:	0852      	lsrs	r2, r2, #1
 8002abc:	3a01      	subs	r2, #1
 8002abe:	0552      	lsls	r2, r2, #21
 8002ac0:	4311      	orrs	r1, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ac6:	0852      	lsrs	r2, r2, #1
 8002ac8:	3a01      	subs	r2, #1
 8002aca:	0652      	lsls	r2, r2, #25
 8002acc:	4311      	orrs	r1, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad2:	06d2      	lsls	r2, r2, #27
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	493a      	ldr	r1, [pc, #232]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002adc:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a37      	ldr	r2, [pc, #220]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a34      	ldr	r2, [pc, #208]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002af4:	f7fe fa60 	bl	8000fb8 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe fa5c 	bl	8000fb8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e066      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1a:	e05e      	b.n	8002bda <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e05d      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d156      	bne.n	8002bda <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b44:	f7fe fa38 	bl	8000fb8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fa34 	bl	8000fb8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e03e      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x7b0>
 8002b6a:	e036      	b.n	8002bda <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d031      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d105      	bne.n	8002b96 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b90:	f023 0303 	bic.w	r3, r3, #3
 8002b94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_OscConfig+0x824>)
 8002b9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fa07 	bl	8000fb8 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bac:	e00c      	b.n	8002bc8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe fa03 	bl	8000fb8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d905      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e00d      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_OscConfig+0x848>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ec      	bne.n	8002bae <HAL_RCC_OscConfig+0x812>
 8002bd4:	e001      	b.n	8002bda <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e10f      	b.n	8002e20 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d910      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b86      	ldr	r3, [pc, #536]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 020f 	bic.w	r2, r3, #15
 8002c16:	4984      	ldr	r1, [pc, #528]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0f7      	b.n	8002e20 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8089 	beq.w	8002d50 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d133      	bne.n	8002cae <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0e4      	b.n	8002e20 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c56:	f000 fa43 	bl	80030e0 <RCC_GetSysClockFreqFromPLLSource>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a74      	ldr	r2, [pc, #464]	; (8002e30 <HAL_RCC_ClockConfig+0x248>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d955      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c62:	4b72      	ldr	r3, [pc, #456]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c6e:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c76:	4a6d      	ldr	r2, [pc, #436]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e044      	b.n	8002d0e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d03e      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x126>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d13a      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca0:	4a62      	ldr	r2, [pc, #392]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e02f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d115      	bne.n	8002cee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0ac      	b.n	8002e20 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cce:	4b57      	ldr	r3, [pc, #348]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0a0      	b.n	8002e20 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cde:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e098      	b.n	8002e20 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002cee:	f000 f8a7 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	; (8002e30 <HAL_RCC_ClockConfig+0x248>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d909      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfa:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d02:	4a4a      	ldr	r2, [pc, #296]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4944      	ldr	r1, [pc, #272]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d20:	f7fe f94a 	bl	8000fb8 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe f946 	bl	8000fb8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e070      	b.n	8002e20 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4930      	ldr	r1, [pc, #192]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b80      	cmp	r3, #128	; 0x80
 8002d74:	d105      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4a2c      	ldr	r2, [pc, #176]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d80:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d82:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d210      	bcs.n	8002db2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 020f 	bic.w	r2, r3, #15
 8002d98:	4923      	ldr	r1, [pc, #140]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e036      	b.n	8002e20 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4918      	ldr	r1, [pc, #96]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4910      	ldr	r1, [pc, #64]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df0:	f000 f826 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	490c      	ldr	r1, [pc, #48]	; (8002e34 <HAL_RCC_ClockConfig+0x24c>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <HAL_RCC_ClockConfig+0x250>)
 8002e0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x254>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f008 f9ad 	bl	800b174 <HAL_InitTick>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	04c4b400 	.word	0x04c4b400
 8002e34:	0800de24 	.word	0x0800de24
 8002e38:	20000624 	.word	0x20000624
 8002e3c:	20000000 	.word	0x20000000

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e58:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x34>
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d121      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d11e      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e005      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e9c:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	e004      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d134      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d003      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0xac>
 8002ee4:	e005      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee8:	617b      	str	r3, [r7, #20]
      break;
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eee:	617b      	str	r3, [r7, #20]
      break;
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	617b      	str	r3, [r7, #20]
      break;
 8002ef6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3301      	adds	r3, #1
 8002f04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	fb02 f203 	mul.w	r2, r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	0e5b      	lsrs	r3, r3, #25
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f38:	69bb      	ldr	r3, [r7, #24]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	; 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	0800de3c 	.word	0x0800de3c
 8002f50:	00f42400 	.word	0x00f42400
 8002f54:	007a1200 	.word	0x007a1200

08002f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000624 	.word	0x20000624

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f74:	f7ff fff0 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4904      	ldr	r1, [pc, #16]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	0800de34 	.word	0x0800de34

08002f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fa0:	f7ff ffda 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0adb      	lsrs	r3, r3, #11
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	0800de34 	.word	0x0800de34

08002fc8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_GetClockConfig+0x5c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0203 	and.w	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <HAL_RCC_GetClockConfig+0x5c>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_RCC_GetClockConfig+0x5c>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_GetClockConfig+0x5c>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	08db      	lsrs	r3, r3, #3
 8003002:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <HAL_RCC_GetClockConfig+0x60>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	601a      	str	r2, [r3, #0]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	40022000 	.word	0x40022000

0800302c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003044:	f7ff f8e6 	bl	8002214 <HAL_PWREx_GetVoltageRange>
 8003048:	6178      	str	r0, [r7, #20]
 800304a:	e014      	b.n	8003076 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003056:	6593      	str	r3, [r2, #88]	; 0x58
 8003058:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003064:	f7ff f8d6 	bl	8002214 <HAL_PWREx_GetVoltageRange>
 8003068:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003074:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307c:	d10b      	bne.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d913      	bls.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2ba0      	cmp	r3, #160	; 0xa0
 8003088:	d902      	bls.n	8003090 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800308a:	2302      	movs	r3, #2
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	e00d      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003090:	2301      	movs	r3, #1
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	e00a      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b7f      	cmp	r3, #127	; 0x7f
 800309a:	d902      	bls.n	80030a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800309c:	2302      	movs	r3, #2
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	e004      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b70      	cmp	r3, #112	; 0x70
 80030a6:	d101      	bne.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a8:	2301      	movs	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 020f 	bic.w	r2, r3, #15
 80030b4:	4909      	ldr	r1, [pc, #36]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d001      	beq.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40022000 	.word	0x40022000

080030e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80030ea:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d118      	bne.n	8003128 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e005      	b.n	800311e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800311e:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003126:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d003      	beq.n	8003140 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d003      	beq.n	8003146 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800313e:	e005      	b.n	800314c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003142:	613b      	str	r3, [r7, #16]
    break;
 8003144:	e005      	b.n	8003152 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003148:	613b      	str	r3, [r7, #16]
    break;
 800314a:	e002      	b.n	8003152 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
    break;
 8003150:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003152:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	3301      	adds	r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	fb02 f203 	mul.w	r2, r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	0e5b      	lsrs	r3, r3, #25
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	3301      	adds	r3, #1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003192:	683b      	ldr	r3, [r7, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000
 80031a4:	0800de3c 	.word	0x0800de3c
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	007a1200 	.word	0x007a1200

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031b8:	2300      	movs	r3, #0
 80031ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031bc:	2300      	movs	r3, #0
 80031be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d040      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d0:	2b80      	cmp	r3, #128	; 0x80
 80031d2:	d02a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031d4:	2b80      	cmp	r3, #128	; 0x80
 80031d6:	d825      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031d8:	2b60      	cmp	r3, #96	; 0x60
 80031da:	d026      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031dc:	2b60      	cmp	r3, #96	; 0x60
 80031de:	d821      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d006      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d81d      	bhi.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d010      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80031f0:	e018      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031f2:	4b89      	ldr	r3, [pc, #548]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4a88      	ldr	r2, [pc, #544]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031fe:	e015      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fb02 	bl	8003810 <RCCEx_PLLSAI1_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003210:	e00c      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3320      	adds	r3, #32
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fbed 	bl	80039f8 <RCCEx_PLLSAI2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003222:	e003      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	74fb      	strb	r3, [r7, #19]
      break;
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800322a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003232:	4b79      	ldr	r3, [pc, #484]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003234:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003238:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003240:	4975      	ldr	r1, [pc, #468]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003248:	e001      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d047      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	d030      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003268:	d82a      	bhi.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800326a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326e:	d02a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003274:	d824      	bhi.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800327c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003280:	d81e      	bhi.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328a:	d010      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800328c:	e018      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800328e:	4b62      	ldr	r3, [pc, #392]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a61      	ldr	r2, [pc, #388]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800329a:	e015      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fab4 	bl	8003810 <RCCEx_PLLSAI1_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ac:	e00c      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3320      	adds	r3, #32
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fb9f 	bl	80039f8 <RCCEx_PLLSAI2_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032be:	e003      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	74fb      	strb	r3, [r7, #19]
      break;
 80032c4:	e000      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80032c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c8:	7cfb      	ldrb	r3, [r7, #19]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032ce:	4b52      	ldr	r3, [pc, #328]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	494e      	ldr	r1, [pc, #312]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032e4:	e001      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 809f 	beq.w	8003436 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032fc:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800330c:	2300      	movs	r3, #0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	4a40      	ldr	r2, [pc, #256]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
 800331e:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3a      	ldr	r2, [pc, #232]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800333a:	f7fd fe3d 	bl	8000fb8 <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003340:	e009      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7fd fe39 	bl	8000fb8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d902      	bls.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	74fb      	strb	r3, [r7, #19]
        break;
 8003354:	e005      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ef      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d15b      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003372:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01f      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	429a      	cmp	r2, r3
 8003384:	d019      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003390:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003392:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033b2:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d016      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd fdf8 	bl	8000fb8 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ca:	e00b      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fd fdf4 	bl	8000fb8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d902      	bls.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	74fb      	strb	r3, [r7, #19]
            break;
 80033e2:	e006      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ec      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10c      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f8:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	4903      	ldr	r1, [pc, #12]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003410:	e008      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	74bb      	strb	r3, [r7, #18]
 8003416:	e005      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003424:	7c7b      	ldrb	r3, [r7, #17]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4ba0      	ldr	r3, [pc, #640]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	4a9f      	ldr	r2, [pc, #636]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003442:	4b9a      	ldr	r3, [pc, #616]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f023 0203 	bic.w	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	4996      	ldr	r1, [pc, #600]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003464:	4b91      	ldr	r3, [pc, #580]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f023 020c 	bic.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	498e      	ldr	r1, [pc, #568]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003486:	4b89      	ldr	r3, [pc, #548]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	4985      	ldr	r1, [pc, #532]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034a8:	4b80      	ldr	r3, [pc, #512]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	497d      	ldr	r1, [pc, #500]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ca:	4b78      	ldr	r3, [pc, #480]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d8:	4974      	ldr	r1, [pc, #464]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ec:	4b6f      	ldr	r3, [pc, #444]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	496c      	ldr	r1, [pc, #432]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800350e:	4b67      	ldr	r3, [pc, #412]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800351c:	4963      	ldr	r1, [pc, #396]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003530:	4b5e      	ldr	r3, [pc, #376]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800353e:	495b      	ldr	r1, [pc, #364]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	4952      	ldr	r1, [pc, #328]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003574:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	494a      	ldr	r1, [pc, #296]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003596:	4b45      	ldr	r3, [pc, #276]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	4941      	ldr	r1, [pc, #260]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b8:	4b3c      	ldr	r3, [pc, #240]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	4939      	ldr	r1, [pc, #228]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d028      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035da:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	4930      	ldr	r1, [pc, #192]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f8:	d106      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4a2b      	ldr	r2, [pc, #172]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003604:	60d3      	str	r3, [r2, #12]
 8003606:	e011      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003610:	d10c      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f8f9 	bl	8003810 <RCCEx_PLLSAI1_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d04d      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003640:	d108      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003642:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800364e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003652:	e012      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800365a:	4a14      	ldr	r2, [pc, #80]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003660:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003672:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003682:	d106      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003684:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a08      	ldr	r2, [pc, #32]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800368e:	60d3      	str	r3, [r2, #12]
 8003690:	e020      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800369a:	d109      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a02      	ldr	r2, [pc, #8]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a6:	60d3      	str	r3, [r2, #12]
 80036a8:	e014      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	2101      	movs	r1, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f8a5 	bl	8003810 <RCCEx_PLLSAI1_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d028      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036e0:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ee:	4947      	ldr	r1, [pc, #284]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036fe:	d106      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003700:	4b42      	ldr	r3, [pc, #264]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a41      	ldr	r2, [pc, #260]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800370a:	60d3      	str	r3, [r2, #12]
 800370c:	e011      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003716:	d10c      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	2101      	movs	r1, #1
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f876 	bl	8003810 <RCCEx_PLLSAI1_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800372e:	7cfb      	ldrb	r3, [r7, #19]
 8003730:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01e      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800373e:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800374e:	492f      	ldr	r1, [pc, #188]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3304      	adds	r3, #4
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f851 	bl	8003810 <RCCEx_PLLSAI1_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800378a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800378e:	f023 0204 	bic.w	r2, r3, #4
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003798:	491c      	ldr	r1, [pc, #112]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b2:	f023 0218 	bic.w	r2, r3, #24
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	4913      	ldr	r1, [pc, #76]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d017      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e0:	490a      	ldr	r1, [pc, #40]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f2:	d105      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003800:	7cbb      	ldrb	r3, [r7, #18]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000

08003810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800381e:	4b72      	ldr	r3, [pc, #456]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800382a:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0203 	and.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d103      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
       ||
 800383e:	2b00      	cmp	r3, #0
 8003840:	d142      	bne.n	80038c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
 8003846:	e03f      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d018      	beq.n	8003882 <RCCEx_PLLSAI1_Config+0x72>
 8003850:	2b03      	cmp	r3, #3
 8003852:	d825      	bhi.n	80038a0 <RCCEx_PLLSAI1_Config+0x90>
 8003854:	2b01      	cmp	r3, #1
 8003856:	d002      	beq.n	800385e <RCCEx_PLLSAI1_Config+0x4e>
 8003858:	2b02      	cmp	r3, #2
 800385a:	d009      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0x60>
 800385c:	e020      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800385e:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11d      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386e:	e01a      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003870:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e013      	b.n	80038aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003882:	4b59      	ldr	r3, [pc, #356]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800388e:	4b56      	ldr	r3, [pc, #344]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800389e:	e006      	b.n	80038ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e004      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4949      	ldr	r1, [pc, #292]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 8086 	bne.w	80039dc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038d0:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a44      	ldr	r2, [pc, #272]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038dc:	f7fd fb6c 	bl	8000fb8 <HAL_GetTick>
 80038e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038e2:	e009      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038e4:	f7fd fb68 	bl	8000fb8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d902      	bls.n	80038f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	73fb      	strb	r3, [r7, #15]
        break;
 80038f6:	e005      	b.n	8003904 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038f8:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ef      	bne.n	80038e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d168      	bne.n	80039dc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d113      	bne.n	8003938 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003910:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	4b35      	ldr	r3, [pc, #212]	; (80039ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003916:	4013      	ands	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6892      	ldr	r2, [r2, #8]
 800391c:	0211      	lsls	r1, r2, #8
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	06d2      	lsls	r2, r2, #27
 8003924:	4311      	orrs	r1, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6852      	ldr	r2, [r2, #4]
 800392a:	3a01      	subs	r2, #1
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	430a      	orrs	r2, r1
 8003930:	492d      	ldr	r1, [pc, #180]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
 8003936:	e02d      	b.n	8003994 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d115      	bne.n	800396a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800393e:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6892      	ldr	r2, [r2, #8]
 800394a:	0211      	lsls	r1, r2, #8
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6912      	ldr	r2, [r2, #16]
 8003950:	0852      	lsrs	r2, r2, #1
 8003952:	3a01      	subs	r2, #1
 8003954:	0552      	lsls	r2, r2, #21
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6852      	ldr	r2, [r2, #4]
 800395c:	3a01      	subs	r2, #1
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	430a      	orrs	r2, r1
 8003962:	4921      	ldr	r1, [pc, #132]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]
 8003968:	e014      	b.n	8003994 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800396a:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003970:	4013      	ands	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6892      	ldr	r2, [r2, #8]
 8003976:	0211      	lsls	r1, r2, #8
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6952      	ldr	r2, [r2, #20]
 800397c:	0852      	lsrs	r2, r2, #1
 800397e:	3a01      	subs	r2, #1
 8003980:	0652      	lsls	r2, r2, #25
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6852      	ldr	r2, [r2, #4]
 8003988:	3a01      	subs	r2, #1
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	430a      	orrs	r2, r1
 800398e:	4916      	ldr	r1, [pc, #88]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003990:	4313      	orrs	r3, r2
 8003992:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800399a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800399e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd fb0a 	bl	8000fb8 <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039a6:	e009      	b.n	80039bc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039a8:	f7fd fb06 	bl	8000fb8 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d902      	bls.n	80039bc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ba:	e005      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ef      	beq.n	80039a8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	4904      	ldr	r1, [pc, #16]	; (80039e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	07ff800f 	.word	0x07ff800f
 80039f0:	ff9f800f 	.word	0xff9f800f
 80039f4:	f9ff800f 	.word	0xf9ff800f

080039f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a06:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a12:	4b6f      	ldr	r3, [pc, #444]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d103      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
       ||
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d142      	bne.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	e03f      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d018      	beq.n	8003a6a <RCCEx_PLLSAI2_Config+0x72>
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d825      	bhi.n	8003a88 <RCCEx_PLLSAI2_Config+0x90>
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d002      	beq.n	8003a46 <RCCEx_PLLSAI2_Config+0x4e>
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d009      	beq.n	8003a58 <RCCEx_PLLSAI2_Config+0x60>
 8003a44:	e020      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a46:	4b62      	ldr	r3, [pc, #392]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11d      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a56:	e01a      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a58:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a68:	e013      	b.n	8003a92 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a6a:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a76:	4b56      	ldr	r3, [pc, #344]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a86:	e006      	b.n	8003a96 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e004      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e002      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a9e:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4949      	ldr	r1, [pc, #292]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 8086 	bne.w	8003bc4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ab8:	4b45      	ldr	r3, [pc, #276]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a44      	ldr	r2, [pc, #272]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fd fa78 	bl	8000fb8 <HAL_GetTick>
 8003ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aca:	e009      	b.n	8003ae0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003acc:	f7fd fa74 	bl	8000fb8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d902      	bls.n	8003ae0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ade:	e005      	b.n	8003aec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ef      	bne.n	8003acc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d168      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d113      	bne.n	8003b20 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af8:	4b35      	ldr	r3, [pc, #212]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	0211      	lsls	r1, r2, #8
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	06d2      	lsls	r2, r2, #27
 8003b0c:	4311      	orrs	r1, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6852      	ldr	r2, [r2, #4]
 8003b12:	3a01      	subs	r2, #1
 8003b14:	0112      	lsls	r2, r2, #4
 8003b16:	430a      	orrs	r2, r1
 8003b18:	492d      	ldr	r1, [pc, #180]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	614b      	str	r3, [r1, #20]
 8003b1e:	e02d      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d115      	bne.n	8003b52 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6892      	ldr	r2, [r2, #8]
 8003b32:	0211      	lsls	r1, r2, #8
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6912      	ldr	r2, [r2, #16]
 8003b38:	0852      	lsrs	r2, r2, #1
 8003b3a:	3a01      	subs	r2, #1
 8003b3c:	0552      	lsls	r2, r2, #21
 8003b3e:	4311      	orrs	r1, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6852      	ldr	r2, [r2, #4]
 8003b44:	3a01      	subs	r2, #1
 8003b46:	0112      	lsls	r2, r2, #4
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	4921      	ldr	r1, [pc, #132]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	614b      	str	r3, [r1, #20]
 8003b50:	e014      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b52:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6892      	ldr	r2, [r2, #8]
 8003b5e:	0211      	lsls	r1, r2, #8
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6952      	ldr	r2, [r2, #20]
 8003b64:	0852      	lsrs	r2, r2, #1
 8003b66:	3a01      	subs	r2, #1
 8003b68:	0652      	lsls	r2, r2, #25
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6852      	ldr	r2, [r2, #4]
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0112      	lsls	r2, r2, #4
 8003b74:	430a      	orrs	r2, r1
 8003b76:	4916      	ldr	r1, [pc, #88]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd fa16 	bl	8000fb8 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b8e:	e009      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b90:	f7fd fa12 	bl	8000fb8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ba2:	e005      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ef      	beq.n	8003b90 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	07ff800f 	.word	0x07ff800f
 8003bd8:	ff9f800f 	.word	0xff9f800f
 8003bdc:	f9ff800f 	.word	0xf9ff800f

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e049      	b.n	8003c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f007 f99e 	bl	800af48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 fdde 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d001      	beq.n	8003ca8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e047      	b.n	8003d38 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <HAL_TIM_Base_Start+0xb4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_TIM_Base_Start+0x66>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d018      	beq.n	8003cf6 <HAL_TIM_Base_Start+0x66>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1f      	ldr	r2, [pc, #124]	; (8003d48 <HAL_TIM_Base_Start+0xb8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_TIM_Base_Start+0x66>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_TIM_Base_Start+0xbc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_TIM_Base_Start+0x66>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_TIM_Base_Start+0xc0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIM_Base_Start+0x66>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_TIM_Base_Start+0xc4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIM_Base_Start+0x66>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_TIM_Base_Start+0xc8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d115      	bne.n	8003d22 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_TIM_Base_Start+0xcc>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b06      	cmp	r3, #6
 8003d06:	d015      	beq.n	8003d34 <HAL_TIM_Base_Start+0xa4>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0e:	d011      	beq.n	8003d34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d20:	e008      	b.n	8003d34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e000      	b.n	8003d36 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800
 8003d50:	40000c00 	.word	0x40000c00
 8003d54:	40013400 	.word	0x40013400
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	00010007 	.word	0x00010007

08003d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d001      	beq.n	8003d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e04f      	b.n	8003e18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01d      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0x76>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d018      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0x76>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0x76>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0x76>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0x76>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_TIM_Base_Start_IT+0x76>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d115      	bne.n	8003e02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b06      	cmp	r3, #6
 8003de6:	d015      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0xb4>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dee:	d011      	beq.n	8003e14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	e008      	b.n	8003e14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e000      	b.n	8003e16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800
 8003e30:	40000c00 	.word	0x40000c00
 8003e34:	40013400 	.word	0x40013400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	00010007 	.word	0x00010007

08003e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e049      	b.n	8003ee6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f841 	bl	8003eee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f000 fcae 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_TIM_PWM_Start+0x24>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e03c      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x9e>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d109      	bne.n	8003f42 <HAL_TIM_PWM_Start+0x3e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e02f      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x9e>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d109      	bne.n	8003f5c <HAL_TIM_PWM_Start+0x58>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e022      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x9e>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d109      	bne.n	8003f76 <HAL_TIM_PWM_Start+0x72>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	e015      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x9e>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d109      	bne.n	8003f90 <HAL_TIM_PWM_Start+0x8c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e008      	b.n	8003fa2 <HAL_TIM_PWM_Start+0x9e>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e09c      	b.n	80040e4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Start+0xb6>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb8:	e023      	b.n	8004002 <HAL_TIM_PWM_Start+0xfe>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_PWM_Start+0xc6>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc8:	e01b      	b.n	8004002 <HAL_TIM_PWM_Start+0xfe>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_PWM_Start+0xd6>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd8:	e013      	b.n	8004002 <HAL_TIM_PWM_Start+0xfe>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	d104      	bne.n	8003fea <HAL_TIM_PWM_Start+0xe6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe8:	e00b      	b.n	8004002 <HAL_TIM_PWM_Start+0xfe>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d104      	bne.n	8003ffa <HAL_TIM_PWM_Start+0xf6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff8:	e003      	b.n	8004002 <HAL_TIM_PWM_Start+0xfe>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	6839      	ldr	r1, [r7, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f001 f885 	bl	800511a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a35      	ldr	r2, [pc, #212]	; (80040ec <HAL_TIM_PWM_Start+0x1e8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_TIM_PWM_Start+0x13e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <HAL_TIM_PWM_Start+0x1ec>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_TIM_PWM_Start+0x13e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a32      	ldr	r2, [pc, #200]	; (80040f4 <HAL_TIM_PWM_Start+0x1f0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_TIM_PWM_Start+0x13e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a31      	ldr	r2, [pc, #196]	; (80040f8 <HAL_TIM_PWM_Start+0x1f4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_TIM_PWM_Start+0x13e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2f      	ldr	r2, [pc, #188]	; (80040fc <HAL_TIM_PWM_Start+0x1f8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_TIM_PWM_Start+0x142>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_TIM_PWM_Start+0x144>
 8004046:	2300      	movs	r3, #0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a22      	ldr	r2, [pc, #136]	; (80040ec <HAL_TIM_PWM_Start+0x1e8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01d      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x19e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406e:	d018      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x19e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <HAL_TIM_PWM_Start+0x1fc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x19e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a21      	ldr	r2, [pc, #132]	; (8004104 <HAL_TIM_PWM_Start+0x200>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x19e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <HAL_TIM_PWM_Start+0x204>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x19e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <HAL_TIM_PWM_Start+0x1ec>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x19e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_TIM_PWM_Start+0x1f0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d115      	bne.n	80040ce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_TIM_PWM_Start+0x208>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b06      	cmp	r3, #6
 80040b2:	d015      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x1dc>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ba:	d011      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	e008      	b.n	80040e0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e000      	b.n	80040e2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40013400 	.word	0x40013400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800
 8004100:	40000400 	.word	0x40000400
 8004104:	40000800 	.word	0x40000800
 8004108:	40000c00 	.word	0x40000c00
 800410c:	00010007 	.word	0x00010007

08004110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0202 	mvn.w	r2, #2
 800413c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fb25 	bl	80047a2 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fb17 	bl	800478e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fb28 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b04      	cmp	r3, #4
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0204 	mvn.w	r2, #4
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fafb 	bl	80047a2 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 faed 	bl	800478e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fafe 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0208 	mvn.w	r2, #8
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2204      	movs	r2, #4
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fad1 	bl	80047a2 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fac3 	bl	800478e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fad4 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b10      	cmp	r3, #16
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0210 	mvn.w	r2, #16
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2208      	movs	r2, #8
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 faa7 	bl	80047a2 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa99 	bl	800478e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 faaa 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b01      	cmp	r3, #1
 8004274:	d10e      	bne.n	8004294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b01      	cmp	r3, #1
 8004282:	d107      	bne.n	8004294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0201 	mvn.w	r2, #1
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f006 fd46 	bl	800ad20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 ffe4 	bl	8005288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ce:	d10e      	bne.n	80042ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b80      	cmp	r3, #128	; 0x80
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 ffd7 	bl	800529c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d10e      	bne.n	800431a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d107      	bne.n	800431a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fa58 	bl	80047ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b20      	cmp	r3, #32
 8004326:	d10e      	bne.n	8004346 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b20      	cmp	r3, #32
 8004334:	d107      	bne.n	8004346 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0220 	mvn.w	r2, #32
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 ff97 	bl	8005274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800436a:	2302      	movs	r3, #2
 800436c:	e0ff      	b.n	800456e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b14      	cmp	r3, #20
 800437a:	f200 80f0 	bhi.w	800455e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043d9 	.word	0x080043d9
 8004388:	0800455f 	.word	0x0800455f
 800438c:	0800455f 	.word	0x0800455f
 8004390:	0800455f 	.word	0x0800455f
 8004394:	08004419 	.word	0x08004419
 8004398:	0800455f 	.word	0x0800455f
 800439c:	0800455f 	.word	0x0800455f
 80043a0:	0800455f 	.word	0x0800455f
 80043a4:	0800445b 	.word	0x0800445b
 80043a8:	0800455f 	.word	0x0800455f
 80043ac:	0800455f 	.word	0x0800455f
 80043b0:	0800455f 	.word	0x0800455f
 80043b4:	0800449b 	.word	0x0800449b
 80043b8:	0800455f 	.word	0x0800455f
 80043bc:	0800455f 	.word	0x0800455f
 80043c0:	0800455f 	.word	0x0800455f
 80043c4:	080044dd 	.word	0x080044dd
 80043c8:	0800455f 	.word	0x0800455f
 80043cc:	0800455f 	.word	0x0800455f
 80043d0:	0800455f 	.word	0x0800455f
 80043d4:	0800451d 	.word	0x0800451d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fa98 	bl	8004914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0208 	orr.w	r2, r2, #8
 80043f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	619a      	str	r2, [r3, #24]
      break;
 8004416:	e0a5      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fb08 	bl	8004a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6999      	ldr	r1, [r3, #24]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	021a      	lsls	r2, r3, #8
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	619a      	str	r2, [r3, #24]
      break;
 8004458:	e084      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fb71 	bl	8004b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0208 	orr.w	r2, r2, #8
 8004474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0204 	bic.w	r2, r2, #4
 8004484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]
      break;
 8004498:	e064      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fbd9 	bl	8004c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69d9      	ldr	r1, [r3, #28]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	021a      	lsls	r2, r3, #8
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	61da      	str	r2, [r3, #28]
      break;
 80044da:	e043      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fc22 	bl	8004d2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800451a:	e023      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fc66 	bl	8004df4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800455c:	e002      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
      break;
 8004562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop

08004578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIM_ConfigClockSource+0x1c>
 8004590:	2302      	movs	r3, #2
 8004592:	e0b6      	b.n	8004702 <HAL_TIM_ConfigClockSource+0x18a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d0:	d03e      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0xd8>
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d6:	f200 8087 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	f000 8086 	beq.w	80046ee <HAL_TIM_ConfigClockSource+0x176>
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d87f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 80045e8:	2b70      	cmp	r3, #112	; 0x70
 80045ea:	d01a      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0xaa>
 80045ec:	2b70      	cmp	r3, #112	; 0x70
 80045ee:	d87b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d050      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x11e>
 80045f4:	2b60      	cmp	r3, #96	; 0x60
 80045f6:	d877      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 80045f8:	2b50      	cmp	r3, #80	; 0x50
 80045fa:	d03c      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0xfe>
 80045fc:	2b50      	cmp	r3, #80	; 0x50
 80045fe:	d873      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d058      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x13e>
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d86f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d064      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x15e>
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d86b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d060      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x15e>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d867      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x15e>
 800461c:	2b10      	cmp	r3, #16
 800461e:	d05a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x15e>
 8004620:	e062      	b.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f000 fd52 	bl	80050da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	609a      	str	r2, [r3, #8]
      break;
 800464e:	e04f      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f000 fd3b 	bl	80050da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004672:	609a      	str	r2, [r3, #8]
      break;
 8004674:	e03c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 fcaf 	bl	8004fe6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2150      	movs	r1, #80	; 0x50
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fd08 	bl	80050a4 <TIM_ITRx_SetConfig>
      break;
 8004694:	e02c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 fcce 	bl	8005044 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2160      	movs	r1, #96	; 0x60
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fcf8 	bl	80050a4 <TIM_ITRx_SetConfig>
      break;
 80046b4:	e01c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 fc8f 	bl	8004fe6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fce8 	bl	80050a4 <TIM_ITRx_SetConfig>
      break;
 80046d4:	e00c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 fcdf 	bl	80050a4 <TIM_ITRx_SetConfig>
      break;
 80046e6:	e003      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	e000      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_TIM_SlaveConfigSynchro+0x18>
 800471e:	2302      	movs	r3, #2
 8004720:	e031      	b.n	8004786 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fbc3 	bl	8004ec0 <TIM_SlaveTimer_SetConfig>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e018      	b.n	8004786 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004762:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004772:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a40      	ldr	r2, [pc, #256]	; (80048f4 <TIM_Base_SetConfig+0x114>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d00f      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a3d      	ldr	r2, [pc, #244]	; (80048f8 <TIM_Base_SetConfig+0x118>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3c      	ldr	r2, [pc, #240]	; (80048fc <TIM_Base_SetConfig+0x11c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3b      	ldr	r2, [pc, #236]	; (8004900 <TIM_Base_SetConfig+0x120>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3a      	ldr	r2, [pc, #232]	; (8004904 <TIM_Base_SetConfig+0x124>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a2f      	ldr	r2, [pc, #188]	; (80048f4 <TIM_Base_SetConfig+0x114>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01f      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d01b      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <TIM_Base_SetConfig+0x118>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d017      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2b      	ldr	r2, [pc, #172]	; (80048fc <TIM_Base_SetConfig+0x11c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2a      	ldr	r2, [pc, #168]	; (8004900 <TIM_Base_SetConfig+0x120>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00f      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a29      	ldr	r2, [pc, #164]	; (8004904 <TIM_Base_SetConfig+0x124>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00b      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a28      	ldr	r2, [pc, #160]	; (8004908 <TIM_Base_SetConfig+0x128>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a27      	ldr	r2, [pc, #156]	; (800490c <TIM_Base_SetConfig+0x12c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d003      	beq.n	800487a <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a26      	ldr	r2, [pc, #152]	; (8004910 <TIM_Base_SetConfig+0x130>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d108      	bne.n	800488c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a10      	ldr	r2, [pc, #64]	; (80048f4 <TIM_Base_SetConfig+0x114>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00f      	beq.n	80048d8 <TIM_Base_SetConfig+0xf8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <TIM_Base_SetConfig+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00b      	beq.n	80048d8 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <TIM_Base_SetConfig+0x128>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_Base_SetConfig+0xf8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a10      	ldr	r2, [pc, #64]	; (800490c <TIM_Base_SetConfig+0x12c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0xf8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0f      	ldr	r2, [pc, #60]	; (8004910 <TIM_Base_SetConfig+0x130>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d103      	bne.n	80048e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	615a      	str	r2, [r3, #20]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40013400 	.word	0x40013400
 8004908:	40014000 	.word	0x40014000
 800490c:	40014400 	.word	0x40014400
 8004910:	40014800 	.word	0x40014800

08004914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f023 0302 	bic.w	r3, r3, #2
 8004960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <TIM_OC1_SetConfig+0x10c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00f      	beq.n	8004994 <TIM_OC1_SetConfig+0x80>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <TIM_OC1_SetConfig+0x110>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_OC1_SetConfig+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <TIM_OC1_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_OC1_SetConfig+0x80>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <TIM_OC1_SetConfig+0x118>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_OC1_SetConfig+0x80>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a28      	ldr	r2, [pc, #160]	; (8004a30 <TIM_OC1_SetConfig+0x11c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10c      	bne.n	80049ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0308 	bic.w	r3, r3, #8
 800499a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <TIM_OC1_SetConfig+0x10c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00f      	beq.n	80049d6 <TIM_OC1_SetConfig+0xc2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <TIM_OC1_SetConfig+0x110>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <TIM_OC1_SetConfig+0xc2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <TIM_OC1_SetConfig+0x114>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <TIM_OC1_SetConfig+0xc2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <TIM_OC1_SetConfig+0x118>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_OC1_SetConfig+0xc2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <TIM_OC1_SetConfig+0x11c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d111      	bne.n	80049fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40013400 	.word	0x40013400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	40014800 	.word	0x40014800

08004a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0210 	bic.w	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f023 0320 	bic.w	r3, r3, #32
 8004a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <TIM_OC2_SetConfig+0x100>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_OC2_SetConfig+0x6c>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <TIM_OC2_SetConfig+0x104>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10d      	bne.n	8004abc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <TIM_OC2_SetConfig+0x100>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00f      	beq.n	8004ae4 <TIM_OC2_SetConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <TIM_OC2_SetConfig+0x104>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <TIM_OC2_SetConfig+0xb0>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1b      	ldr	r2, [pc, #108]	; (8004b3c <TIM_OC2_SetConfig+0x108>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <TIM_OC2_SetConfig+0xb0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <TIM_OC2_SetConfig+0x10c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_OC2_SetConfig+0xb0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <TIM_OC2_SetConfig+0x110>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d113      	bne.n	8004b0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40013400 	.word	0x40013400
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40014400 	.word	0x40014400
 8004b44:	40014800 	.word	0x40014800

08004b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a27      	ldr	r2, [pc, #156]	; (8004c44 <TIM_OC3_SetConfig+0xfc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC3_SetConfig+0x6a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <TIM_OC3_SetConfig+0x100>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10d      	bne.n	8004bce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <TIM_OC3_SetConfig+0xfc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00f      	beq.n	8004bf6 <TIM_OC3_SetConfig+0xae>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <TIM_OC3_SetConfig+0x100>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <TIM_OC3_SetConfig+0xae>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1a      	ldr	r2, [pc, #104]	; (8004c4c <TIM_OC3_SetConfig+0x104>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d007      	beq.n	8004bf6 <TIM_OC3_SetConfig+0xae>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a19      	ldr	r2, [pc, #100]	; (8004c50 <TIM_OC3_SetConfig+0x108>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <TIM_OC3_SetConfig+0xae>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <TIM_OC3_SetConfig+0x10c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d113      	bne.n	8004c1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	621a      	str	r2, [r3, #32]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40012c00 	.word	0x40012c00
 8004c48:	40013400 	.word	0x40013400
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40014400 	.word	0x40014400
 8004c54:	40014800 	.word	0x40014800

08004c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	031b      	lsls	r3, r3, #12
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <TIM_OC4_SetConfig+0xc0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00f      	beq.n	8004cdc <TIM_OC4_SetConfig+0x84>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <TIM_OC4_SetConfig+0xc4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <TIM_OC4_SetConfig+0x84>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a16      	ldr	r2, [pc, #88]	; (8004d20 <TIM_OC4_SetConfig+0xc8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d007      	beq.n	8004cdc <TIM_OC4_SetConfig+0x84>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <TIM_OC4_SetConfig+0xcc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_OC4_SetConfig+0x84>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <TIM_OC4_SetConfig+0xd0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d109      	bne.n	8004cf0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800

08004d2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	041b      	lsls	r3, r3, #16
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a17      	ldr	r2, [pc, #92]	; (8004de0 <TIM_OC5_SetConfig+0xb4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_OC5_SetConfig+0x7a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a16      	ldr	r2, [pc, #88]	; (8004de4 <TIM_OC5_SetConfig+0xb8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_OC5_SetConfig+0x7a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <TIM_OC5_SetConfig+0xbc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_OC5_SetConfig+0x7a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <TIM_OC5_SetConfig+0xc0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC5_SetConfig+0x7a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <TIM_OC5_SetConfig+0xc4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d109      	bne.n	8004dba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40013400 	.word	0x40013400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800

08004df4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	051b      	lsls	r3, r3, #20
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a18      	ldr	r2, [pc, #96]	; (8004eac <TIM_OC6_SetConfig+0xb8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00f      	beq.n	8004e70 <TIM_OC6_SetConfig+0x7c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <TIM_OC6_SetConfig+0xbc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <TIM_OC6_SetConfig+0x7c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <TIM_OC6_SetConfig+0xc0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_OC6_SetConfig+0x7c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <TIM_OC6_SetConfig+0xc4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC6_SetConfig+0x7c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <TIM_OC6_SetConfig+0xc8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d109      	bne.n	8004e84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	029b      	lsls	r3, r3, #10
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40013400 	.word	0x40013400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	40014800 	.word	0x40014800

08004ec0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eee:	f023 0307 	bic.w	r3, r3, #7
 8004ef2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b70      	cmp	r3, #112	; 0x70
 8004f0c:	d01a      	beq.n	8004f44 <TIM_SlaveTimer_SetConfig+0x84>
 8004f0e:	2b70      	cmp	r3, #112	; 0x70
 8004f10:	d860      	bhi.n	8004fd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004f12:	2b60      	cmp	r3, #96	; 0x60
 8004f14:	d054      	beq.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x100>
 8004f16:	2b60      	cmp	r3, #96	; 0x60
 8004f18:	d85c      	bhi.n	8004fd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004f1a:	2b50      	cmp	r3, #80	; 0x50
 8004f1c:	d046      	beq.n	8004fac <TIM_SlaveTimer_SetConfig+0xec>
 8004f1e:	2b50      	cmp	r3, #80	; 0x50
 8004f20:	d858      	bhi.n	8004fd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d019      	beq.n	8004f5a <TIM_SlaveTimer_SetConfig+0x9a>
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d854      	bhi.n	8004fd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004f2a:	2b30      	cmp	r3, #48	; 0x30
 8004f2c:	d055      	beq.n	8004fda <TIM_SlaveTimer_SetConfig+0x11a>
 8004f2e:	2b30      	cmp	r3, #48	; 0x30
 8004f30:	d850      	bhi.n	8004fd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d051      	beq.n	8004fda <TIM_SlaveTimer_SetConfig+0x11a>
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d84c      	bhi.n	8004fd4 <TIM_SlaveTimer_SetConfig+0x114>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d04d      	beq.n	8004fda <TIM_SlaveTimer_SetConfig+0x11a>
 8004f3e:	2b10      	cmp	r3, #16
 8004f40:	d04b      	beq.n	8004fda <TIM_SlaveTimer_SetConfig+0x11a>
 8004f42:	e047      	b.n	8004fd4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68d9      	ldr	r1, [r3, #12]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f000 f8c1 	bl	80050da <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004f58:	e040      	b.n	8004fdc <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	d101      	bne.n	8004f66 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e03b      	b.n	8004fde <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a1a      	ldr	r2, [r3, #32]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f8c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	621a      	str	r2, [r3, #32]
      break;
 8004faa:	e017      	b.n	8004fdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6899      	ldr	r1, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f000 f814 	bl	8004fe6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004fbe:	e00d      	b.n	8004fdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6899      	ldr	r1, [r3, #8]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f000 f839 	bl	8005044 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004fd2:	e003      	b.n	8004fdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd8:	e000      	b.n	8004fdc <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004fda:	bf00      	nop
  }

  return status;
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b087      	sub	sp, #28
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f023 0201 	bic.w	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 030a 	bic.w	r3, r3, #10
 8005022:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f023 0210 	bic.w	r2, r3, #16
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800506e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	031b      	lsls	r3, r3, #12
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f043 0307 	orr.w	r3, r3, #7
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	609a      	str	r2, [r3, #8]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050da:	b480      	push	{r7}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	021a      	lsls	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	609a      	str	r2, [r3, #8]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800511a:	b480      	push	{r7}
 800511c:	b087      	sub	sp, #28
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2201      	movs	r2, #1
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	43db      	mvns	r3, r3
 800513c:	401a      	ands	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a1a      	ldr	r2, [r3, #32]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	431a      	orrs	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	621a      	str	r2, [r3, #32]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005178:	2302      	movs	r3, #2
 800517a:	e068      	b.n	800524e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2e      	ldr	r2, [pc, #184]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2d      	ldr	r2, [pc, #180]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d108      	bne.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1e      	ldr	r2, [pc, #120]	; (800525c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01d      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ee:	d018      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1a      	ldr	r2, [pc, #104]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00e      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a18      	ldr	r2, [pc, #96]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a13      	ldr	r2, [pc, #76]	; (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a14      	ldr	r2, [pc, #80]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10c      	bne.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4313      	orrs	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40013400 	.word	0x40013400
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40000c00 	.word	0x40000c00
 8005270:	40014000 	.word	0x40014000

08005274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e042      	b.n	8005348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f005 fee7 	bl	800b0a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2224      	movs	r2, #36	; 0x24
 80052de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fc52 	bl	8005b9c <UART_SetConfig>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e022      	b.n	8005348 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 ff0e 	bl	800612c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800531e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800532e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 ff95 	bl	8006270 <UART_CheckIdleState>
 8005346:	4603      	mov	r3, r0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005366:	2b20      	cmp	r3, #32
 8005368:	f040 8084 	bne.w	8005474 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_UART_Transmit+0x28>
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e07c      	b.n	8005476 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_UART_Transmit+0x3a>
 8005386:	2302      	movs	r3, #2
 8005388:	e075      	b.n	8005476 <HAL_UART_Transmit+0x126>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2221      	movs	r2, #33	; 0x21
 800539e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053a2:	f7fb fe09 	bl	8000fb8 <HAL_GetTick>
 80053a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c0:	d108      	bne.n	80053d4 <HAL_UART_Transmit+0x84>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	e003      	b.n	80053dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80053e4:	e02d      	b.n	8005442 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	2180      	movs	r1, #128	; 0x80
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 ff88 	bl	8006306 <UART_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e03a      	b.n	8005476 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10b      	bne.n	800541e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	881a      	ldrh	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005412:	b292      	uxth	r2, r2
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	3302      	adds	r3, #2
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	e008      	b.n	8005430 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	781a      	ldrb	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	b292      	uxth	r2, r2
 8005428:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3301      	adds	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1cb      	bne.n	80053e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2200      	movs	r2, #0
 8005456:	2140      	movs	r1, #64	; 0x40
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 ff54 	bl	8006306 <UART_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e006      	b.n	8005476 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	2b20      	cmp	r3, #32
 8005496:	d142      	bne.n	800551e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_UART_Receive_IT+0x24>
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e03b      	b.n	8005520 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Receive_IT+0x36>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e034      	b.n	8005520 <HAL_UART_Receive_IT+0xa0>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a17      	ldr	r2, [pc, #92]	; (8005528 <HAL_UART_Receive_IT+0xa8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01f      	beq.n	800550e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d018      	beq.n	800550e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	69f9      	ldr	r1, [r7, #28]
 8005500:	6a3a      	ldr	r2, [r7, #32]
 8005502:	e841 2300 	strex	r3, r2, [r1]
 8005506:	61bb      	str	r3, [r7, #24]
   return(result);
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1e6      	bne.n	80054dc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	461a      	mov	r2, r3
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 ffbf 	bl	8006498 <UART_Start_Receive_IT>
 800551a:	4603      	mov	r3, r0
 800551c:	e000      	b.n	8005520 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800551e:	2302      	movs	r3, #2
  }
}
 8005520:	4618      	mov	r0, r3
 8005522:	3728      	adds	r7, #40	; 0x28
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40008000 	.word	0x40008000

0800552c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b0ba      	sub	sp, #232	; 0xe8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005552:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005556:	f640 030f 	movw	r3, #2063	; 0x80f
 800555a:	4013      	ands	r3, r2
 800555c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d11b      	bne.n	80055a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d015      	beq.n	80055a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 82d6 	beq.w	8005b42 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	4798      	blx	r3
      }
      return;
 800559e:	e2d0      	b.n	8005b42 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80055a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 811f 	beq.w	80057e8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80055aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80055ae:	4b8b      	ldr	r3, [pc, #556]	; (80057dc <HAL_UART_IRQHandler+0x2b0>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80055b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055ba:	4b89      	ldr	r3, [pc, #548]	; (80057e0 <HAL_UART_IRQHandler+0x2b4>)
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 8112 	beq.w	80057e8 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d011      	beq.n	80055f4 <HAL_UART_IRQHandler+0xc8>
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00b      	beq.n	80055f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ea:	f043 0201 	orr.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d011      	beq.n	8005624 <HAL_UART_IRQHandler+0xf8>
 8005600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00b      	beq.n	8005624 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2202      	movs	r2, #2
 8005612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d011      	beq.n	8005654 <HAL_UART_IRQHandler+0x128>
 8005630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2204      	movs	r2, #4
 8005642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564a:	f043 0202 	orr.w	r2, r3, #2
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d017      	beq.n	8005690 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d105      	bne.n	8005678 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800566c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005670:	4b5a      	ldr	r3, [pc, #360]	; (80057dc <HAL_UART_IRQHandler+0x2b0>)
 8005672:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2208      	movs	r2, #8
 800567e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005686:	f043 0208 	orr.w	r2, r3, #8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005698:	2b00      	cmp	r3, #0
 800569a:	d012      	beq.n	80056c2 <HAL_UART_IRQHandler+0x196>
 800569c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 823c 	beq.w	8005b46 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d013      	beq.n	8005702 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d105      	bne.n	80056f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d005      	beq.n	8005726 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800571a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800571e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005722:	2b00      	cmp	r3, #0
 8005724:	d04f      	beq.n	80057c6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 ffe0 	bl	80066ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d141      	bne.n	80057be <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3308      	adds	r3, #8
 8005740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3308      	adds	r3, #8
 8005762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800576a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800577e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1d9      	bne.n	800573a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d013      	beq.n	80057b6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005792:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <HAL_UART_IRQHandler+0x2b8>)
 8005794:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800579a:	4618      	mov	r0, r3
 800579c:	f7fc f9e1 	bl	8001b62 <HAL_DMA_Abort_IT>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d017      	beq.n	80057d6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	e00f      	b.n	80057d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9da 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057bc:	e00b      	b.n	80057d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f9d6 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c4:	e007      	b.n	80057d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f9d2 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80057d4:	e1b7      	b.n	8005b46 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d6:	bf00      	nop
    return;
 80057d8:	e1b5      	b.n	8005b46 <HAL_UART_IRQHandler+0x61a>
 80057da:	bf00      	nop
 80057dc:	10000001 	.word	0x10000001
 80057e0:	04000120 	.word	0x04000120
 80057e4:	080067b9 	.word	0x080067b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	f040 814a 	bne.w	8005a86 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8143 	beq.w	8005a86 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 813c 	beq.w	8005a86 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2210      	movs	r2, #16
 8005814:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	f040 80b5 	bne.w	8005990 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005832:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8187 	beq.w	8005b4a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005846:	429a      	cmp	r2, r3
 8005848:	f080 817f 	bcs.w	8005b4a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005852:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 8086 	bne.w	8005974 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800587c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005896:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800589e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1da      	bne.n	8005868 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e1      	bne.n	80058b2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3308      	adds	r3, #8
 800590e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005912:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005914:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e3      	bne.n	80058ee <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005944:	f023 0310 	bic.w	r3, r3, #16
 8005948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005956:	65bb      	str	r3, [r7, #88]	; 0x58
 8005958:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800595c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e4      	bne.n	8005934 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800596e:	4618      	mov	r0, r3
 8005970:	f7fc f89b 	bl	8001aaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005980:	b29b      	uxth	r3, r3
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	b29b      	uxth	r3, r3
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8fb 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800598e:	e0dc      	b.n	8005b4a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800599c:	b29b      	uxth	r3, r3
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80ce 	beq.w	8005b4e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80059b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80c9 	beq.w	8005b4e <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059de:	647b      	str	r3, [r7, #68]	; 0x44
 80059e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e4      	bne.n	80059bc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	623b      	str	r3, [r7, #32]
   return(result);
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e1      	bne.n	80059f2 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0310 	bic.w	r3, r3, #16
 8005a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	69b9      	ldr	r1, [r7, #24]
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	617b      	str	r3, [r7, #20]
   return(result);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e4      	bne.n	8005a42 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f880 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a84:	e063      	b.n	8005b4e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00e      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x584>
 8005a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005aa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 fb2b 	bl	8007104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005aae:	e051      	b.n	8005b54 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d014      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d03a      	beq.n	8005b52 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
    }
    return;
 8005ae4:	e035      	b.n	8005b52 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_UART_IRQHandler+0x5da>
 8005af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fe70 	bl	80067e4 <UART_EndTransmit_IT>
    return;
 8005b04:	e026      	b.n	8005b54 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_UART_IRQHandler+0x5fa>
 8005b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fb04 	bl	800712c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b24:	e016      	b.n	8005b54 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_UART_IRQHandler+0x628>
 8005b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	da0c      	bge.n	8005b54 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 faec 	bl	8007118 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b40:	e008      	b.n	8005b54 <HAL_UART_IRQHandler+0x628>
      return;
 8005b42:	bf00      	nop
 8005b44:	e006      	b.n	8005b54 <HAL_UART_IRQHandler+0x628>
    return;
 8005b46:	bf00      	nop
 8005b48:	e004      	b.n	8005b54 <HAL_UART_IRQHandler+0x628>
      return;
 8005b4a:	bf00      	nop
 8005b4c:	e002      	b.n	8005b54 <HAL_UART_IRQHandler+0x628>
      return;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <HAL_UART_IRQHandler+0x628>
    return;
 8005b52:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005b54:	37e8      	adds	r7, #232	; 0xe8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop

08005b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b9c:	b5b0      	push	{r4, r5, r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4bb1      	ldr	r3, [pc, #708]	; (8005e8c <UART_SetConfig+0x2f0>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	69f9      	ldr	r1, [r7, #28]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4aa6      	ldr	r2, [pc, #664]	; (8005e90 <UART_SetConfig+0x2f4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	69f9      	ldr	r1, [r7, #28]
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	f023 010f 	bic.w	r1, r3, #15
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a97      	ldr	r2, [pc, #604]	; (8005e94 <UART_SetConfig+0x2f8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d120      	bne.n	8005c7e <UART_SetConfig+0xe2>
 8005c3c:	4b96      	ldr	r3, [pc, #600]	; (8005e98 <UART_SetConfig+0x2fc>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d816      	bhi.n	8005c78 <UART_SetConfig+0xdc>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <UART_SetConfig+0xb4>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c6d 	.word	0x08005c6d
 8005c58:	08005c67 	.word	0x08005c67
 8005c5c:	08005c73 	.word	0x08005c73
 8005c60:	2301      	movs	r3, #1
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e0e7      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005c66:	2302      	movs	r3, #2
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e0e4      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	e0e1      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005c72:	2308      	movs	r3, #8
 8005c74:	76fb      	strb	r3, [r7, #27]
 8005c76:	e0de      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	76fb      	strb	r3, [r7, #27]
 8005c7c:	e0db      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a86      	ldr	r2, [pc, #536]	; (8005e9c <UART_SetConfig+0x300>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d132      	bne.n	8005cee <UART_SetConfig+0x152>
 8005c88:	4b83      	ldr	r3, [pc, #524]	; (8005e98 <UART_SetConfig+0x2fc>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d828      	bhi.n	8005ce8 <UART_SetConfig+0x14c>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x100>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cd1 	.word	0x08005cd1
 8005ca0:	08005ce9 	.word	0x08005ce9
 8005ca4:	08005ce9 	.word	0x08005ce9
 8005ca8:	08005ce9 	.word	0x08005ce9
 8005cac:	08005cdd 	.word	0x08005cdd
 8005cb0:	08005ce9 	.word	0x08005ce9
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005ce9 	.word	0x08005ce9
 8005cbc:	08005cd7 	.word	0x08005cd7
 8005cc0:	08005ce9 	.word	0x08005ce9
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005ce9 	.word	0x08005ce9
 8005ccc:	08005ce3 	.word	0x08005ce3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	76fb      	strb	r3, [r7, #27]
 8005cd4:	e0af      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	76fb      	strb	r3, [r7, #27]
 8005cda:	e0ac      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	76fb      	strb	r3, [r7, #27]
 8005ce0:	e0a9      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	76fb      	strb	r3, [r7, #27]
 8005ce6:	e0a6      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	76fb      	strb	r3, [r7, #27]
 8005cec:	e0a3      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6b      	ldr	r2, [pc, #428]	; (8005ea0 <UART_SetConfig+0x304>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d120      	bne.n	8005d3a <UART_SetConfig+0x19e>
 8005cf8:	4b67      	ldr	r3, [pc, #412]	; (8005e98 <UART_SetConfig+0x2fc>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d02:	2b30      	cmp	r3, #48	; 0x30
 8005d04:	d013      	beq.n	8005d2e <UART_SetConfig+0x192>
 8005d06:	2b30      	cmp	r3, #48	; 0x30
 8005d08:	d814      	bhi.n	8005d34 <UART_SetConfig+0x198>
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d009      	beq.n	8005d22 <UART_SetConfig+0x186>
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d810      	bhi.n	8005d34 <UART_SetConfig+0x198>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <UART_SetConfig+0x180>
 8005d16:	2b10      	cmp	r3, #16
 8005d18:	d006      	beq.n	8005d28 <UART_SetConfig+0x18c>
 8005d1a:	e00b      	b.n	8005d34 <UART_SetConfig+0x198>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	76fb      	strb	r3, [r7, #27]
 8005d20:	e089      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d22:	2302      	movs	r3, #2
 8005d24:	76fb      	strb	r3, [r7, #27]
 8005d26:	e086      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	76fb      	strb	r3, [r7, #27]
 8005d2c:	e083      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d2e:	2308      	movs	r3, #8
 8005d30:	76fb      	strb	r3, [r7, #27]
 8005d32:	e080      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d34:	2310      	movs	r3, #16
 8005d36:	76fb      	strb	r3, [r7, #27]
 8005d38:	e07d      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a59      	ldr	r2, [pc, #356]	; (8005ea4 <UART_SetConfig+0x308>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d120      	bne.n	8005d86 <UART_SetConfig+0x1ea>
 8005d44:	4b54      	ldr	r3, [pc, #336]	; (8005e98 <UART_SetConfig+0x2fc>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d50:	d013      	beq.n	8005d7a <UART_SetConfig+0x1de>
 8005d52:	2bc0      	cmp	r3, #192	; 0xc0
 8005d54:	d814      	bhi.n	8005d80 <UART_SetConfig+0x1e4>
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d009      	beq.n	8005d6e <UART_SetConfig+0x1d2>
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d810      	bhi.n	8005d80 <UART_SetConfig+0x1e4>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <UART_SetConfig+0x1cc>
 8005d62:	2b40      	cmp	r3, #64	; 0x40
 8005d64:	d006      	beq.n	8005d74 <UART_SetConfig+0x1d8>
 8005d66:	e00b      	b.n	8005d80 <UART_SetConfig+0x1e4>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	76fb      	strb	r3, [r7, #27]
 8005d6c:	e063      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	76fb      	strb	r3, [r7, #27]
 8005d72:	e060      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d74:	2304      	movs	r3, #4
 8005d76:	76fb      	strb	r3, [r7, #27]
 8005d78:	e05d      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	76fb      	strb	r3, [r7, #27]
 8005d7e:	e05a      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d80:	2310      	movs	r3, #16
 8005d82:	76fb      	strb	r3, [r7, #27]
 8005d84:	e057      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a47      	ldr	r2, [pc, #284]	; (8005ea8 <UART_SetConfig+0x30c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d125      	bne.n	8005ddc <UART_SetConfig+0x240>
 8005d90:	4b41      	ldr	r3, [pc, #260]	; (8005e98 <UART_SetConfig+0x2fc>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9e:	d017      	beq.n	8005dd0 <UART_SetConfig+0x234>
 8005da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da4:	d817      	bhi.n	8005dd6 <UART_SetConfig+0x23a>
 8005da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005daa:	d00b      	beq.n	8005dc4 <UART_SetConfig+0x228>
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db0:	d811      	bhi.n	8005dd6 <UART_SetConfig+0x23a>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <UART_SetConfig+0x222>
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d006      	beq.n	8005dca <UART_SetConfig+0x22e>
 8005dbc:	e00b      	b.n	8005dd6 <UART_SetConfig+0x23a>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	76fb      	strb	r3, [r7, #27]
 8005dc2:	e038      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	76fb      	strb	r3, [r7, #27]
 8005dc8:	e035      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005dca:	2304      	movs	r3, #4
 8005dcc:	76fb      	strb	r3, [r7, #27]
 8005dce:	e032      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	76fb      	strb	r3, [r7, #27]
 8005dd4:	e02f      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005dd6:	2310      	movs	r3, #16
 8005dd8:	76fb      	strb	r3, [r7, #27]
 8005dda:	e02c      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a2b      	ldr	r2, [pc, #172]	; (8005e90 <UART_SetConfig+0x2f4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d125      	bne.n	8005e32 <UART_SetConfig+0x296>
 8005de6:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <UART_SetConfig+0x2fc>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005df0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005df4:	d017      	beq.n	8005e26 <UART_SetConfig+0x28a>
 8005df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dfa:	d817      	bhi.n	8005e2c <UART_SetConfig+0x290>
 8005dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e00:	d00b      	beq.n	8005e1a <UART_SetConfig+0x27e>
 8005e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e06:	d811      	bhi.n	8005e2c <UART_SetConfig+0x290>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <UART_SetConfig+0x278>
 8005e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e10:	d006      	beq.n	8005e20 <UART_SetConfig+0x284>
 8005e12:	e00b      	b.n	8005e2c <UART_SetConfig+0x290>
 8005e14:	2300      	movs	r3, #0
 8005e16:	76fb      	strb	r3, [r7, #27]
 8005e18:	e00d      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	76fb      	strb	r3, [r7, #27]
 8005e1e:	e00a      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005e20:	2304      	movs	r3, #4
 8005e22:	76fb      	strb	r3, [r7, #27]
 8005e24:	e007      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005e26:	2308      	movs	r3, #8
 8005e28:	76fb      	strb	r3, [r7, #27]
 8005e2a:	e004      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	76fb      	strb	r3, [r7, #27]
 8005e30:	e001      	b.n	8005e36 <UART_SetConfig+0x29a>
 8005e32:	2310      	movs	r3, #16
 8005e34:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <UART_SetConfig+0x2f4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	f040 809f 	bne.w	8005f80 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e42:	7efb      	ldrb	r3, [r7, #27]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d837      	bhi.n	8005eb8 <UART_SetConfig+0x31c>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x2b4>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005eb9 	.word	0x08005eb9
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005eb9 	.word	0x08005eb9
 8005e60:	08005e83 	.word	0x08005e83
 8005e64:	08005eb9 	.word	0x08005eb9
 8005e68:	08005eb9 	.word	0x08005eb9
 8005e6c:	08005eb9 	.word	0x08005eb9
 8005e70:	08005eb1 	.word	0x08005eb1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e74:	f7fd f87c 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8005e78:	6178      	str	r0, [r7, #20]
        break;
 8005e7a:	e022      	b.n	8005ec2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <UART_SetConfig+0x310>)
 8005e7e:	617b      	str	r3, [r7, #20]
        break;
 8005e80:	e01f      	b.n	8005ec2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e82:	f7fc ffdd 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8005e86:	6178      	str	r0, [r7, #20]
        break;
 8005e88:	e01b      	b.n	8005ec2 <UART_SetConfig+0x326>
 8005e8a:	bf00      	nop
 8005e8c:	cfff69f3 	.word	0xcfff69f3
 8005e90:	40008000 	.word	0x40008000
 8005e94:	40013800 	.word	0x40013800
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	40004400 	.word	0x40004400
 8005ea0:	40004800 	.word	0x40004800
 8005ea4:	40004c00 	.word	0x40004c00
 8005ea8:	40005000 	.word	0x40005000
 8005eac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb4:	617b      	str	r3, [r7, #20]
        break;
 8005eb6:	e004      	b.n	8005ec2 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	76bb      	strb	r3, [r7, #26]
        break;
 8005ec0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8119 	beq.w	80060fc <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	4a95      	ldr	r2, [pc, #596]	; (8006124 <UART_SetConfig+0x588>)
 8005ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	4413      	add	r3, r2
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d305      	bcc.n	8005efa <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d902      	bls.n	8005f00 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	76bb      	strb	r3, [r7, #26]
 8005efe:	e0fd      	b.n	80060fc <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f04f 0100 	mov.w	r1, #0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	4a85      	ldr	r2, [pc, #532]	; (8006124 <UART_SetConfig+0x588>)
 8005f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	f7fa fea6 	bl	8000c68 <__aeabi_uldivmod>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4610      	mov	r0, r2
 8005f22:	4619      	mov	r1, r3
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	020b      	lsls	r3, r1, #8
 8005f2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f32:	0202      	lsls	r2, r0, #8
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	6849      	ldr	r1, [r1, #4]
 8005f38:	0849      	lsrs	r1, r1, #1
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	f04f 0100 	mov.w	r1, #0
 8005f40:	1814      	adds	r4, r2, r0
 8005f42:	eb43 0501 	adc.w	r5, r3, r1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	4620      	mov	r0, r4
 8005f52:	4629      	mov	r1, r5
 8005f54:	f7fa fe88 	bl	8000c68 <__aeabi_uldivmod>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f66:	d308      	bcc.n	8005f7a <UART_SetConfig+0x3de>
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f6e:	d204      	bcs.n	8005f7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	e0c0      	b.n	80060fc <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	76bb      	strb	r3, [r7, #26]
 8005f7e:	e0bd      	b.n	80060fc <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f88:	d164      	bne.n	8006054 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005f8a:	7efb      	ldrb	r3, [r7, #27]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d828      	bhi.n	8005fe2 <UART_SetConfig+0x446>
 8005f90:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0x3fc>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	08005fe3 	.word	0x08005fe3
 8005fa8:	08005fd3 	.word	0x08005fd3
 8005fac:	08005fe3 	.word	0x08005fe3
 8005fb0:	08005fe3 	.word	0x08005fe3
 8005fb4:	08005fe3 	.word	0x08005fe3
 8005fb8:	08005fdb 	.word	0x08005fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fc ffd8 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8005fc0:	6178      	str	r0, [r7, #20]
        break;
 8005fc2:	e013      	b.n	8005fec <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc4:	f7fc ffea 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8005fc8:	6178      	str	r0, [r7, #20]
        break;
 8005fca:	e00f      	b.n	8005fec <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fcc:	4b56      	ldr	r3, [pc, #344]	; (8006128 <UART_SetConfig+0x58c>)
 8005fce:	617b      	str	r3, [r7, #20]
        break;
 8005fd0:	e00c      	b.n	8005fec <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd2:	f7fc ff35 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8005fd6:	6178      	str	r0, [r7, #20]
        break;
 8005fd8:	e008      	b.n	8005fec <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fde:	617b      	str	r3, [r7, #20]
        break;
 8005fe0:	e004      	b.n	8005fec <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	76bb      	strb	r3, [r7, #26]
        break;
 8005fea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 8084 	beq.w	80060fc <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	4a4a      	ldr	r2, [pc, #296]	; (8006124 <UART_SetConfig+0x588>)
 8005ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ffe:	461a      	mov	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	fbb3 f3f2 	udiv	r3, r3, r2
 8006006:	005a      	lsls	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b0f      	cmp	r3, #15
 800601e:	d916      	bls.n	800604e <UART_SetConfig+0x4b2>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006026:	d212      	bcs.n	800604e <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f023 030f 	bic.w	r3, r3, #15
 8006030:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	b29b      	uxth	r3, r3
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	b29a      	uxth	r2, r3
 800603e:	89fb      	ldrh	r3, [r7, #14]
 8006040:	4313      	orrs	r3, r2
 8006042:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	89fa      	ldrh	r2, [r7, #14]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	e056      	b.n	80060fc <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	76bb      	strb	r3, [r7, #26]
 8006052:	e053      	b.n	80060fc <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006054:	7efb      	ldrb	r3, [r7, #27]
 8006056:	2b08      	cmp	r3, #8
 8006058:	d827      	bhi.n	80060aa <UART_SetConfig+0x50e>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x4c4>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	080060ab 	.word	0x080060ab
 8006070:	0800609b 	.word	0x0800609b
 8006074:	080060ab 	.word	0x080060ab
 8006078:	080060ab 	.word	0x080060ab
 800607c:	080060ab 	.word	0x080060ab
 8006080:	080060a3 	.word	0x080060a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fc ff74 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8006088:	6178      	str	r0, [r7, #20]
        break;
 800608a:	e013      	b.n	80060b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fc ff86 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8006090:	6178      	str	r0, [r7, #20]
        break;
 8006092:	e00f      	b.n	80060b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <UART_SetConfig+0x58c>)
 8006096:	617b      	str	r3, [r7, #20]
        break;
 8006098:	e00c      	b.n	80060b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7fc fed1 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 800609e:	6178      	str	r0, [r7, #20]
        break;
 80060a0:	e008      	b.n	80060b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a6:	617b      	str	r3, [r7, #20]
        break;
 80060a8:	e004      	b.n	80060b4 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	76bb      	strb	r3, [r7, #26]
        break;
 80060b2:	bf00      	nop
    }

    if (pclk != 0U)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d020      	beq.n	80060fc <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	4a19      	ldr	r2, [pc, #100]	; (8006124 <UART_SetConfig+0x588>)
 80060c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c4:	461a      	mov	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	441a      	add	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060dc:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b0f      	cmp	r3, #15
 80060e2:	d909      	bls.n	80060f8 <UART_SetConfig+0x55c>
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ea:	d205      	bcs.n	80060f8 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	e001      	b.n	80060fc <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006118:	7ebb      	ldrb	r3, [r7, #26]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bdb0      	pop	{r4, r5, r7, pc}
 8006122:	bf00      	nop
 8006124:	0800ddb4 	.word	0x0800ddb4
 8006128:	00f42400 	.word	0x00f42400

0800612c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01a      	beq.n	8006242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800622a:	d10a      	bne.n	8006242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	605a      	str	r2, [r3, #4]
  }
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af02      	add	r7, sp, #8
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006280:	f7fa fe9a 	bl	8000fb8 <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b08      	cmp	r3, #8
 8006292:	d10e      	bne.n	80062b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f82f 	bl	8006306 <UART_WaitOnFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e025      	b.n	80062fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d10e      	bne.n	80062de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f819 	bl	8006306 <UART_WaitOnFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e00f      	b.n	80062fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b09c      	sub	sp, #112	; 0x70
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	603b      	str	r3, [r7, #0]
 8006312:	4613      	mov	r3, r2
 8006314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006316:	e0a9      	b.n	800646c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	f000 80a5 	beq.w	800646c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006322:	f7fa fe49 	bl	8000fb8 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800632e:	429a      	cmp	r2, r3
 8006330:	d302      	bcc.n	8006338 <UART_WaitOnFlagUntilTimeout+0x32>
 8006332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006334:	2b00      	cmp	r3, #0
 8006336:	d140      	bne.n	80063ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800634c:	667b      	str	r3, [r7, #100]	; 0x64
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006358:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800635c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e6      	bne.n	8006338 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	663b      	str	r3, [r7, #96]	; 0x60
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800638a:	64ba      	str	r2, [r7, #72]	; 0x48
 800638c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e069      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d051      	beq.n	800646c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d6:	d149      	bne.n	800646c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
 8006402:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e6      	bne.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	613b      	str	r3, [r7, #16]
   return(result);
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	66bb      	str	r3, [r7, #104]	; 0x68
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006434:	623a      	str	r2, [r7, #32]
 8006436:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	69f9      	ldr	r1, [r7, #28]
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	61bb      	str	r3, [r7, #24]
   return(result);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e5      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e010      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4013      	ands	r3, r2
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	429a      	cmp	r2, r3
 8006488:	f43f af46 	beq.w	8006318 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3770      	adds	r7, #112	; 0x70
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006498:	b480      	push	{r7}
 800649a:	b0a3      	sub	sp, #140	; 0x8c
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	88fa      	ldrh	r2, [r7, #6]
 80064b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	d10e      	bne.n	80064ea <UART_Start_Receive_IT+0x52>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <UART_Start_Receive_IT+0x48>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064de:	e02d      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	22ff      	movs	r2, #255	; 0xff
 80064e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064e8:	e028      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <UART_Start_Receive_IT+0x76>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <UART_Start_Receive_IT+0x6c>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	22ff      	movs	r2, #255	; 0xff
 80064fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006502:	e01b      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	227f      	movs	r2, #127	; 0x7f
 8006508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800650c:	e016      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006516:	d10d      	bne.n	8006534 <UART_Start_Receive_IT+0x9c>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <UART_Start_Receive_IT+0x92>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	227f      	movs	r2, #127	; 0x7f
 8006524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006528:	e008      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	223f      	movs	r2, #63	; 0x3f
 800652e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006532:	e003      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2222      	movs	r2, #34	; 0x22
 8006548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800655c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3308      	adds	r3, #8
 800656c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006570:	673a      	str	r2, [r7, #112]	; 0x70
 8006572:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006576:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800657e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e3      	bne.n	800654c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658c:	d153      	bne.n	8006636 <UART_Start_Receive_IT+0x19e>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006594:	88fa      	ldrh	r2, [r7, #6]
 8006596:	429a      	cmp	r2, r3
 8006598:	d34d      	bcc.n	8006636 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d107      	bne.n	80065b4 <UART_Start_Receive_IT+0x11c>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4a4b      	ldr	r2, [pc, #300]	; (80066dc <UART_Start_Receive_IT+0x244>)
 80065b0:	671a      	str	r2, [r3, #112]	; 0x70
 80065b2:	e002      	b.n	80065ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4a4a      	ldr	r2, [pc, #296]	; (80066e0 <UART_Start_Receive_IT+0x248>)
 80065b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01a      	beq.n	8006600 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e4      	bne.n	80065ca <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660a:	e853 3f00 	ldrex	r3, [r3]
 800660e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006616:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006620:	64ba      	str	r2, [r7, #72]	; 0x48
 8006622:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006628:	e841 2300 	strex	r3, r2, [r1]
 800662c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800662e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e5      	bne.n	8006600 <UART_Start_Receive_IT+0x168>
 8006634:	e04a      	b.n	80066cc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d107      	bne.n	8006650 <UART_Start_Receive_IT+0x1b8>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d103      	bne.n	8006650 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a26      	ldr	r2, [pc, #152]	; (80066e4 <UART_Start_Receive_IT+0x24c>)
 800664c:	671a      	str	r2, [r3, #112]	; 0x70
 800664e:	e002      	b.n	8006656 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a25      	ldr	r2, [pc, #148]	; (80066e8 <UART_Start_Receive_IT+0x250>)
 8006654:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d019      	beq.n	800669a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800667a:	677b      	str	r3, [r7, #116]	; 0x74
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
 8006686:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800668a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e6      	bne.n	8006666 <UART_Start_Receive_IT+0x1ce>
 8006698:	e018      	b.n	80066cc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	613b      	str	r3, [r7, #16]
   return(result);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f043 0320 	orr.w	r3, r3, #32
 80066ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b8:	623b      	str	r3, [r7, #32]
 80066ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	69f9      	ldr	r1, [r7, #28]
 80066be:	6a3a      	ldr	r2, [r7, #32]
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e6      	bne.n	800669a <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	378c      	adds	r7, #140	; 0x8c
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	08006e01 	.word	0x08006e01
 80066e0:	08006b05 	.word	0x08006b05
 80066e4:	0800699f 	.word	0x0800699f
 80066e8:	0800683b 	.word	0x0800683b

080066ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b095      	sub	sp, #84	; 0x54
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	643b      	str	r3, [r7, #64]	; 0x40
 8006714:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e6      	bne.n	80066f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3308      	adds	r3, #8
 800672c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	61fb      	str	r3, [r7, #28]
   return(result);
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800673c:	f023 0301 	bic.w	r3, r3, #1
 8006740:	64bb      	str	r3, [r7, #72]	; 0x48
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3308      	adds	r3, #8
 8006748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800674a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e3      	bne.n	8006726 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006762:	2b01      	cmp	r3, #1
 8006764:	d118      	bne.n	8006798 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	60bb      	str	r3, [r7, #8]
   return(result);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f023 0310 	bic.w	r3, r3, #16
 800677a:	647b      	str	r3, [r7, #68]	; 0x44
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006788:	6979      	ldr	r1, [r7, #20]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	e841 2300 	strex	r3, r2, [r1]
 8006790:	613b      	str	r3, [r7, #16]
   return(result);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e6      	bne.n	8006766 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80067ac:	bf00      	nop
 80067ae:	3754      	adds	r7, #84	; 0x54
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff f9ca 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6979      	ldr	r1, [r7, #20]
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	613b      	str	r3, [r7, #16]
   return(result);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e6      	bne.n	80067ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff f995 	bl	8005b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006832:	bf00      	nop
 8006834:	3720      	adds	r7, #32
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b096      	sub	sp, #88	; 0x58
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006848:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	2b22      	cmp	r3, #34	; 0x22
 8006854:	f040 8095 	bne.w	8006982 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800685e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006862:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006866:	b2d9      	uxtb	r1, r3
 8006868:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800686c:	b2da      	uxtb	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	400a      	ands	r2, r1
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d17a      	bne.n	8006996 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b4:	653b      	str	r3, [r7, #80]	; 0x50
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068be:	647b      	str	r3, [r7, #68]	; 0x44
 80068c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e6      	bne.n	80068a0 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	623b      	str	r3, [r7, #32]
   return(result);
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068f2:	633a      	str	r2, [r7, #48]	; 0x30
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d12e      	bne.n	800697a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0310 	bic.w	r3, r3, #16
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	69b9      	ldr	r1, [r7, #24]
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	617b      	str	r3, [r7, #20]
   return(result);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b10      	cmp	r3, #16
 8006960:	d103      	bne.n	800696a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2210      	movs	r2, #16
 8006968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff f906 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006978:	e00d      	b.n	8006996 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f004 f91c 	bl	800abb8 <HAL_UART_RxCpltCallback>
}
 8006980:	e009      	b.n	8006996 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	8b1b      	ldrh	r3, [r3, #24]
 8006988:	b29a      	uxth	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0208 	orr.w	r2, r2, #8
 8006992:	b292      	uxth	r2, r2
 8006994:	831a      	strh	r2, [r3, #24]
}
 8006996:	bf00      	nop
 8006998:	3758      	adds	r7, #88	; 0x58
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b096      	sub	sp, #88	; 0x58
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b6:	2b22      	cmp	r3, #34	; 0x22
 80069b8:	f040 8095 	bne.w	8006ae6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80069cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80069d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069d4:	4013      	ands	r3, r2
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e0:	1c9a      	adds	r2, r3, #2
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d17a      	bne.n	8006afa <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a22:	643b      	str	r3, [r7, #64]	; 0x40
 8006a24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d12e      	bne.n	8006ade <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6979      	ldr	r1, [r7, #20]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e6      	bne.n	8006a86 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b10      	cmp	r3, #16
 8006ac4:	d103      	bne.n	8006ace <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2210      	movs	r2, #16
 8006acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff f854 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006adc:	e00d      	b.n	8006afa <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f004 f86a 	bl	800abb8 <HAL_UART_RxCpltCallback>
}
 8006ae4:	e009      	b.n	8006afa <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	8b1b      	ldrh	r3, [r3, #24]
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0208 	orr.w	r2, r2, #8
 8006af6:	b292      	uxth	r2, r2
 8006af8:	831a      	strh	r2, [r3, #24]
}
 8006afa:	bf00      	nop
 8006afc:	3758      	adds	r7, #88	; 0x58
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b0a6      	sub	sp, #152	; 0x98
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b12:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3a:	2b22      	cmp	r3, #34	; 0x22
 8006b3c:	f040 814f 	bne.w	8006dde <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b4a:	e0f6      	b.n	8006d3a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b52:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b56:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006b5a:	b2d9      	uxtb	r1, r3
 8006b5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b66:	400a      	ands	r2, r1
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d053      	beq.n	8006c46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d011      	beq.n	8006bce <UART_RxISR_8BIT_FIFOEN+0xca>
 8006baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00b      	beq.n	8006bce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc4:	f043 0201 	orr.w	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d011      	beq.n	8006bfe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00b      	beq.n	8006bfe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2202      	movs	r2, #2
 8006bec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf4:	f043 0204 	orr.w	r2, r3, #4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d011      	beq.n	8006c2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00b      	beq.n	8006c2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c24:	f043 0202 	orr.w	r2, r3, #2
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d006      	beq.n	8006c46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fe ff99 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d173      	bne.n	8006d3a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c76:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006c7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e4      	bne.n	8006c52 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
 8006ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006cac:	657a      	str	r2, [r7, #84]	; 0x54
 8006cae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e3      	bne.n	8006c88 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d12e      	bne.n	8006d34 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	f023 0310 	bic.w	r3, r3, #16
 8006cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8006cfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e6      	bne.n	8006cdc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d103      	bne.n	8006d24 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2210      	movs	r2, #16
 8006d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fe ff29 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
 8006d32:	e002      	b.n	8006d3a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f003 ff3f 	bl	800abb8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d006      	beq.n	8006d50 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006d42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f47f aefe 	bne.w	8006b4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d5a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d047      	beq.n	8006df2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d240      	bcs.n	8006df2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d86:	673b      	str	r3, [r7, #112]	; 0x70
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d98:	e841 2300 	strex	r3, r2, [r1]
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e5      	bne.n	8006d70 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8006da8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f043 0320 	orr.w	r3, r3, #32
 8006dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6979      	ldr	r1, [r7, #20]
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e6      	bne.n	8006daa <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ddc:	e009      	b.n	8006df2 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	8b1b      	ldrh	r3, [r3, #24]
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0208 	orr.w	r2, r2, #8
 8006dee:	b292      	uxth	r2, r2
 8006df0:	831a      	strh	r2, [r3, #24]
}
 8006df2:	bf00      	nop
 8006df4:	3798      	adds	r7, #152	; 0x98
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	0800683b 	.word	0x0800683b

08006e00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b0a8      	sub	sp, #160	; 0xa0
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e0e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e36:	2b22      	cmp	r3, #34	; 0x22
 8006e38:	f040 8153 	bne.w	80070e2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e42:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e46:	e0fa      	b.n	800703e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e4e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006e5a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006e5e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006e62:	4013      	ands	r3, r2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e70:	1c9a      	adds	r2, r3, #2
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d053      	beq.n	8006f46 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d011      	beq.n	8006ece <UART_RxISR_16BIT_FIFOEN+0xce>
 8006eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00b      	beq.n	8006ece <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec4:	f043 0201 	orr.w	r2, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d011      	beq.n	8006efe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2202      	movs	r2, #2
 8006eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef4:	f043 0204 	orr.w	r2, r3, #4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d011      	beq.n	8006f2e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f24:	f043 0202 	orr.w	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d006      	beq.n	8006f46 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7fe fe19 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d175      	bne.n	800703e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f76:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e4      	bne.n	8006f52 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e1      	bne.n	8006f88 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d12e      	bne.n	8007038 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	f023 0310 	bic.w	r3, r3, #16
 8006ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8007000:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800700c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e6      	bne.n	8006fe0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b10      	cmp	r3, #16
 800701e:	d103      	bne.n	8007028 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2210      	movs	r2, #16
 8007026:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7fe fda7 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
 8007036:	e002      	b.n	800703e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f003 fdbd 	bl	800abb8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800703e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007042:	2b00      	cmp	r3, #0
 8007044:	d006      	beq.n	8007054 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	f47f aefa 	bne.w	8006e48 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800705a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800705e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007062:	2b00      	cmp	r3, #0
 8007064:	d047      	beq.n	80070f6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800706c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007070:	429a      	cmp	r2, r3
 8007072:	d240      	bcs.n	80070f6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3308      	adds	r3, #8
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	623b      	str	r3, [r7, #32]
   return(result);
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800708a:	677b      	str	r3, [r7, #116]	; 0x74
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3308      	adds	r3, #8
 8007092:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007094:	633a      	str	r2, [r7, #48]	; 0x30
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800709a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e5      	bne.n	8007074 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a15      	ldr	r2, [pc, #84]	; (8007100 <UART_RxISR_16BIT_FIFOEN+0x300>)
 80070ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f043 0320 	orr.w	r3, r3, #32
 80070c2:	673b      	str	r3, [r7, #112]	; 0x70
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070cc:	61fb      	str	r3, [r7, #28]
 80070ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	69b9      	ldr	r1, [r7, #24]
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	617b      	str	r3, [r7, #20]
   return(result);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e6      	bne.n	80070ae <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070e0:	e009      	b.n	80070f6 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	8b1b      	ldrh	r3, [r3, #24]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0208 	orr.w	r2, r2, #8
 80070f2:	b292      	uxth	r2, r2
 80070f4:	831a      	strh	r2, [r3, #24]
}
 80070f6:	bf00      	nop
 80070f8:	37a0      	adds	r7, #160	; 0xa0
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	0800699f 	.word	0x0800699f

08007104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_UARTEx_DisableFifoMode+0x16>
 8007152:	2302      	movs	r3, #2
 8007154:	e027      	b.n	80071a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2224      	movs	r2, #36	; 0x24
 8007162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007184:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e02d      	b.n	8007226 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2224      	movs	r2, #36	; 0x24
 80071d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0201 	bic.w	r2, r2, #1
 80071f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f850 	bl	80072ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007242:	2302      	movs	r3, #2
 8007244:	e02d      	b.n	80072a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2224      	movs	r2, #36	; 0x24
 8007252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0201 	bic.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f812 	bl	80072ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d108      	bne.n	80072ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072cc:	e031      	b.n	8007332 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072ce:	2308      	movs	r3, #8
 80072d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072d2:	2308      	movs	r3, #8
 80072d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	0e5b      	lsrs	r3, r3, #25
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	0f5b      	lsrs	r3, r3, #29
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	7b3a      	ldrb	r2, [r7, #12]
 80072fa:	4911      	ldr	r1, [pc, #68]	; (8007340 <UARTEx_SetNbDataToProcess+0x94>)
 80072fc:	5c8a      	ldrb	r2, [r1, r2]
 80072fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007302:	7b3a      	ldrb	r2, [r7, #12]
 8007304:	490f      	ldr	r1, [pc, #60]	; (8007344 <UARTEx_SetNbDataToProcess+0x98>)
 8007306:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007308:	fb93 f3f2 	sdiv	r3, r3, r2
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	7b7a      	ldrb	r2, [r7, #13]
 8007318:	4909      	ldr	r1, [pc, #36]	; (8007340 <UARTEx_SetNbDataToProcess+0x94>)
 800731a:	5c8a      	ldrb	r2, [r1, r2]
 800731c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007320:	7b7a      	ldrb	r2, [r7, #13]
 8007322:	4908      	ldr	r1, [pc, #32]	; (8007344 <UARTEx_SetNbDataToProcess+0x98>)
 8007324:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007326:	fb93 f3f2 	sdiv	r3, r3, r2
 800732a:	b29a      	uxth	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007332:	bf00      	nop
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	0800ddcc 	.word	0x0800ddcc
 8007344:	0800ddd4 	.word	0x0800ddd4

08007348 <__NVIC_SetPriority>:
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007358:	2b00      	cmp	r3, #0
 800735a:	db0a      	blt.n	8007372 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	b2da      	uxtb	r2, r3
 8007360:	490c      	ldr	r1, [pc, #48]	; (8007394 <__NVIC_SetPriority+0x4c>)
 8007362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007366:	0112      	lsls	r2, r2, #4
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	440b      	add	r3, r1
 800736c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007370:	e00a      	b.n	8007388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	b2da      	uxtb	r2, r3
 8007376:	4908      	ldr	r1, [pc, #32]	; (8007398 <__NVIC_SetPriority+0x50>)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	3b04      	subs	r3, #4
 8007380:	0112      	lsls	r2, r2, #4
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	440b      	add	r3, r1
 8007386:	761a      	strb	r2, [r3, #24]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	e000e100 	.word	0xe000e100
 8007398:	e000ed00 	.word	0xe000ed00

0800739c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <SysTick_Handler+0x1c>)
 80073a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80073a4:	f001 fd28 	bl	8008df8 <xTaskGetSchedulerState>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d001      	beq.n	80073b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80073ae:	f002 fb13 	bl	80099d8 <xPortSysTickHandler>
  }
}
 80073b2:	bf00      	nop
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	e000e010 	.word	0xe000e010

080073bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073c0:	2100      	movs	r1, #0
 80073c2:	f06f 0004 	mvn.w	r0, #4
 80073c6:	f7ff ffbf 	bl	8007348 <__NVIC_SetPriority>
#endif
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d6:	f3ef 8305 	mrs	r3, IPSR
 80073da:	603b      	str	r3, [r7, #0]
  return(result);
 80073dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073e2:	f06f 0305 	mvn.w	r3, #5
 80073e6:	607b      	str	r3, [r7, #4]
 80073e8:	e00c      	b.n	8007404 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073ea:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <osKernelInitialize+0x44>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <osKernelInitialize+0x44>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	e002      	b.n	8007404 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007404:	687b      	ldr	r3, [r7, #4]
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	200006bc 	.word	0x200006bc

08007418 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800741e:	f3ef 8305 	mrs	r3, IPSR
 8007422:	603b      	str	r3, [r7, #0]
  return(result);
 8007424:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <osKernelStart+0x1a>
    stat = osErrorISR;
 800742a:	f06f 0305 	mvn.w	r3, #5
 800742e:	607b      	str	r3, [r7, #4]
 8007430:	e010      	b.n	8007454 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007432:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <osKernelStart+0x48>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d109      	bne.n	800744e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800743a:	f7ff ffbf 	bl	80073bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800743e:	4b08      	ldr	r3, [pc, #32]	; (8007460 <osKernelStart+0x48>)
 8007440:	2202      	movs	r2, #2
 8007442:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007444:	f001 f87c 	bl	8008540 <vTaskStartScheduler>
      stat = osOK;
 8007448:	2300      	movs	r3, #0
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	e002      	b.n	8007454 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800744e:	f04f 33ff 	mov.w	r3, #4294967295
 8007452:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007454:	687b      	ldr	r3, [r7, #4]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	200006bc 	.word	0x200006bc

08007464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007464:	b580      	push	{r7, lr}
 8007466:	b08e      	sub	sp, #56	; 0x38
 8007468:	af04      	add	r7, sp, #16
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007474:	f3ef 8305 	mrs	r3, IPSR
 8007478:	617b      	str	r3, [r7, #20]
  return(result);
 800747a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800747c:	2b00      	cmp	r3, #0
 800747e:	d17e      	bne.n	800757e <osThreadNew+0x11a>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d07b      	beq.n	800757e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007486:	2380      	movs	r3, #128	; 0x80
 8007488:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800748a:	2318      	movs	r3, #24
 800748c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007492:	f04f 33ff 	mov.w	r3, #4294967295
 8007496:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d045      	beq.n	800752a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <osThreadNew+0x48>
        name = attr->name;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d002      	beq.n	80074ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <osThreadNew+0x6e>
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	2b38      	cmp	r3, #56	; 0x38
 80074c4:	d805      	bhi.n	80074d2 <osThreadNew+0x6e>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <osThreadNew+0x72>
        return (NULL);
 80074d2:	2300      	movs	r3, #0
 80074d4:	e054      	b.n	8007580 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	089b      	lsrs	r3, r3, #2
 80074e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00e      	beq.n	800750c <osThreadNew+0xa8>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	2bbb      	cmp	r3, #187	; 0xbb
 80074f4:	d90a      	bls.n	800750c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d006      	beq.n	800750c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <osThreadNew+0xa8>
        mem = 1;
 8007506:	2301      	movs	r3, #1
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	e010      	b.n	800752e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10c      	bne.n	800752e <osThreadNew+0xca>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d108      	bne.n	800752e <osThreadNew+0xca>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <osThreadNew+0xca>
          mem = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e001      	b.n	800752e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d110      	bne.n	8007556 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800753c:	9202      	str	r2, [sp, #8]
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	6a3a      	ldr	r2, [r7, #32]
 8007548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 fe0c 	bl	8008168 <xTaskCreateStatic>
 8007550:	4603      	mov	r3, r0
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	e013      	b.n	800757e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d110      	bne.n	800757e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	b29a      	uxth	r2, r3
 8007560:	f107 0310 	add.w	r3, r7, #16
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fe57 	bl	8008222 <xTaskCreate>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d001      	beq.n	800757e <osThreadNew+0x11a>
            hTask = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800757e:	693b      	ldr	r3, [r7, #16]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3728      	adds	r7, #40	; 0x28
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007590:	f3ef 8305 	mrs	r3, IPSR
 8007594:	60bb      	str	r3, [r7, #8]
  return(result);
 8007596:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <osDelay+0x1c>
    stat = osErrorISR;
 800759c:	f06f 0305 	mvn.w	r3, #5
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e007      	b.n	80075b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 ff92 	bl	80084d8 <vTaskDelay>
    }
  }

  return (stat);
 80075b4:	68fb      	ldr	r3, [r7, #12]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4a07      	ldr	r2, [pc, #28]	; (80075ec <vApplicationGetIdleTaskMemory+0x2c>)
 80075d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4a06      	ldr	r2, [pc, #24]	; (80075f0 <vApplicationGetIdleTaskMemory+0x30>)
 80075d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2280      	movs	r2, #128	; 0x80
 80075dc:	601a      	str	r2, [r3, #0]
}
 80075de:	bf00      	nop
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	200006c0 	.word	0x200006c0
 80075f0:	2000077c 	.word	0x2000077c

080075f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a07      	ldr	r2, [pc, #28]	; (8007620 <vApplicationGetTimerTaskMemory+0x2c>)
 8007604:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	4a06      	ldr	r2, [pc, #24]	; (8007624 <vApplicationGetTimerTaskMemory+0x30>)
 800760a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	2000097c 	.word	0x2000097c
 8007624:	20000a38 	.word	0x20000a38

08007628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f103 0208 	add.w	r2, r3, #8
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f04f 32ff 	mov.w	r2, #4294967295
 8007640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f103 0208 	add.w	r2, r3, #8
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f103 0208 	add.w	r2, r3, #8
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007682:	b480      	push	{r7}
 8007684:	b085      	sub	sp, #20
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e0:	d103      	bne.n	80076ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e00c      	b.n	8007704 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3308      	adds	r3, #8
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e002      	b.n	80076f8 <vListInsert+0x2e>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	429a      	cmp	r2, r3
 8007702:	d2f6      	bcs.n	80076f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	601a      	str	r2, [r3, #0]
}
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6892      	ldr	r2, [r2, #8]
 8007752:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6852      	ldr	r2, [r2, #4]
 800775c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	429a      	cmp	r2, r3
 8007766:	d103      	bne.n	8007770 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	1e5a      	subs	r2, r3, #1
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80077ba:	f002 f87b 	bl	80098b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077ca:	fb01 f303 	mul.w	r3, r1, r3
 80077ce:	441a      	add	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ea:	3b01      	subs	r3, #1
 80077ec:	68f9      	ldr	r1, [r7, #12]
 80077ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	441a      	add	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	22ff      	movs	r2, #255	; 0xff
 80077fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	22ff      	movs	r2, #255	; 0xff
 8007806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d114      	bne.n	800783a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01a      	beq.n	800784e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3310      	adds	r3, #16
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f929 	bl	8008a74 <xTaskRemoveFromEventList>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d012      	beq.n	800784e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <xQueueGenericReset+0xcc>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	e009      	b.n	800784e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3310      	adds	r3, #16
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fef2 	bl	8007628 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3324      	adds	r3, #36	; 0x24
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff feed 	bl	8007628 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800784e:	f002 f861 	bl	8009914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007852:	2301      	movs	r3, #1
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	e000ed04 	.word	0xe000ed04

08007860 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08e      	sub	sp, #56	; 0x38
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <xQueueGenericCreateStatic+0x52>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <xQueueGenericCreateStatic+0x56>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <xQueueGenericCreateStatic+0x58>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	623b      	str	r3, [r7, #32]
}
 80078ce:	bf00      	nop
 80078d0:	e7fe      	b.n	80078d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <xQueueGenericCreateStatic+0x7e>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <xQueueGenericCreateStatic+0x82>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <xQueueGenericCreateStatic+0x84>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	61fb      	str	r3, [r7, #28]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80078fe:	2350      	movs	r3, #80	; 0x50
 8007900:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b50      	cmp	r3, #80	; 0x50
 8007906:	d00a      	beq.n	800791e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	61bb      	str	r3, [r7, #24]
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800791e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00d      	beq.n	8007946 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007932:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	4613      	mov	r3, r2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	68b9      	ldr	r1, [r7, #8]
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f805 	bl	8007950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007948:	4618      	mov	r0, r3
 800794a:	3730      	adds	r7, #48	; 0x30
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d103      	bne.n	800796c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	e002      	b.n	8007972 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800797e:	2101      	movs	r1, #1
 8007980:	69b8      	ldr	r0, [r7, #24]
 8007982:	f7ff ff05 	bl	8007790 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08e      	sub	sp, #56	; 0x38
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079a6:	2300      	movs	r3, #0
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <xQueueGenericSend+0x32>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <xQueueGenericSend+0x40>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <xQueueGenericSend+0x44>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <xQueueGenericSend+0x46>
 80079dc:	2300      	movs	r3, #0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <xQueueGenericSend+0x60>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d103      	bne.n	8007a06 <xQueueGenericSend+0x6e>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d101      	bne.n	8007a0a <xQueueGenericSend+0x72>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <xQueueGenericSend+0x74>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <xQueueGenericSend+0x8e>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	623b      	str	r3, [r7, #32]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a26:	f001 f9e7 	bl	8008df8 <xTaskGetSchedulerState>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <xQueueGenericSend+0x9e>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <xQueueGenericSend+0xa2>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <xQueueGenericSend+0xa4>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xQueueGenericSend+0xbe>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	61fb      	str	r3, [r7, #28]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a56:	f001 ff2d 	bl	80098b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d302      	bcc.n	8007a6c <xQueueGenericSend+0xd4>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d129      	bne.n	8007ac0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a72:	f000 fa0b 	bl	8007e8c <prvCopyDataToQueue>
 8007a76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d010      	beq.n	8007aa2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	3324      	adds	r3, #36	; 0x24
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fff5 	bl	8008a74 <xTaskRemoveFromEventList>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d013      	beq.n	8007ab8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a90:	4b3f      	ldr	r3, [pc, #252]	; (8007b90 <xQueueGenericSend+0x1f8>)
 8007a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	e00a      	b.n	8007ab8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007aa8:	4b39      	ldr	r3, [pc, #228]	; (8007b90 <xQueueGenericSend+0x1f8>)
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ab8:	f001 ff2c 	bl	8009914 <vPortExitCritical>
				return pdPASS;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e063      	b.n	8007b88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d103      	bne.n	8007ace <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ac6:	f001 ff25 	bl	8009914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e05c      	b.n	8007b88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ad4:	f107 0314 	add.w	r3, r7, #20
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 f82f 	bl	8008b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ae2:	f001 ff17 	bl	8009914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ae6:	f000 fd9b 	bl	8008620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007aea:	f001 fee3 	bl	80098b4 <vPortEnterCritical>
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007af4:	b25b      	sxtb	r3, r3
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afa:	d103      	bne.n	8007b04 <xQueueGenericSend+0x16c>
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b0a:	b25b      	sxtb	r3, r3
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d103      	bne.n	8007b1a <xQueueGenericSend+0x182>
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b1a:	f001 fefb 	bl	8009914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b1e:	1d3a      	adds	r2, r7, #4
 8007b20:	f107 0314 	add.w	r3, r7, #20
 8007b24:	4611      	mov	r1, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 f81e 	bl	8008b68 <xTaskCheckForTimeOut>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d124      	bne.n	8007b7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b34:	f000 faa2 	bl	800807c <prvIsQueueFull>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d018      	beq.n	8007b70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	3310      	adds	r3, #16
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 ff44 	bl	80089d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b4e:	f000 fa2d 	bl	8007fac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b52:	f000 fd73 	bl	800863c <xTaskResumeAll>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f47f af7c 	bne.w	8007a56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <xQueueGenericSend+0x1f8>)
 8007b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	e772      	b.n	8007a56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b72:	f000 fa1b 	bl	8007fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b76:	f000 fd61 	bl	800863c <xTaskResumeAll>
 8007b7a:	e76c      	b.n	8007a56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b7e:	f000 fa15 	bl	8007fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b82:	f000 fd5b 	bl	800863c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3738      	adds	r7, #56	; 0x38
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b090      	sub	sp, #64	; 0x40
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <xQueueGenericSendFromISR+0x3c>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <xQueueGenericSendFromISR+0x40>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <xQueueGenericSendFromISR+0x42>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d103      	bne.n	8007bfe <xQueueGenericSendFromISR+0x6a>
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d101      	bne.n	8007c02 <xQueueGenericSendFromISR+0x6e>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueGenericSendFromISR+0x70>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	623b      	str	r3, [r7, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c1e:	f001 ff2b 	bl	8009a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c22:	f3ef 8211 	mrs	r2, BASEPRI
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	61fa      	str	r2, [r7, #28]
 8007c38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d302      	bcc.n	8007c50 <xQueueGenericSendFromISR+0xbc>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d12f      	bne.n	8007cb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c66:	f000 f911 	bl	8007e8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d112      	bne.n	8007c9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d016      	beq.n	8007caa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	3324      	adds	r3, #36	; 0x24
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fef7 	bl	8008a74 <xTaskRemoveFromEventList>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00e      	beq.n	8007caa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e007      	b.n	8007caa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	b25a      	sxtb	r2, r3
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007caa:	2301      	movs	r3, #1
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007cae:	e001      	b.n	8007cb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007cbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3740      	adds	r7, #64	; 0x40
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08c      	sub	sp, #48	; 0x30
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10a      	bne.n	8007cfc <xQueueReceive+0x30>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	623b      	str	r3, [r7, #32]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <xQueueReceive+0x3e>
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <xQueueReceive+0x42>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e000      	b.n	8007d10 <xQueueReceive+0x44>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <xQueueReceive+0x5e>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	61fb      	str	r3, [r7, #28]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d2a:	f001 f865 	bl	8008df8 <xTaskGetSchedulerState>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <xQueueReceive+0x6e>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <xQueueReceive+0x72>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueReceive+0x74>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xQueueReceive+0x8e>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	61bb      	str	r3, [r7, #24]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d5a:	f001 fdab 	bl	80098b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01f      	beq.n	8007daa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d6e:	f000 f8f7 	bl	8007f60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	1e5a      	subs	r2, r3, #1
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00f      	beq.n	8007da2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	3310      	adds	r3, #16
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fe74 	bl	8008a74 <xTaskRemoveFromEventList>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d007      	beq.n	8007da2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d92:	4b3d      	ldr	r3, [pc, #244]	; (8007e88 <xQueueReceive+0x1bc>)
 8007d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007da2:	f001 fdb7 	bl	8009914 <vPortExitCritical>
				return pdPASS;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e069      	b.n	8007e7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d103      	bne.n	8007db8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007db0:	f001 fdb0 	bl	8009914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007db4:	2300      	movs	r3, #0
 8007db6:	e062      	b.n	8007e7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dbe:	f107 0310 	add.w	r3, r7, #16
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 feba 	bl	8008b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dcc:	f001 fda2 	bl	8009914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dd0:	f000 fc26 	bl	8008620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dd4:	f001 fd6e 	bl	80098b4 <vPortEnterCritical>
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dde:	b25b      	sxtb	r3, r3
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d103      	bne.n	8007dee <xQueueReceive+0x122>
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d103      	bne.n	8007e04 <xQueueReceive+0x138>
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e04:	f001 fd86 	bl	8009914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e08:	1d3a      	adds	r2, r7, #4
 8007e0a:	f107 0310 	add.w	r3, r7, #16
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fea9 	bl	8008b68 <xTaskCheckForTimeOut>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d123      	bne.n	8007e64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e1e:	f000 f917 	bl	8008050 <prvIsQueueEmpty>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d017      	beq.n	8007e58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	3324      	adds	r3, #36	; 0x24
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 fdcf 	bl	80089d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e38:	f000 f8b8 	bl	8007fac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e3c:	f000 fbfe 	bl	800863c <xTaskResumeAll>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d189      	bne.n	8007d5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007e46:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <xQueueReceive+0x1bc>)
 8007e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	e780      	b.n	8007d5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e5a:	f000 f8a7 	bl	8007fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e5e:	f000 fbed 	bl	800863c <xTaskResumeAll>
 8007e62:	e77a      	b.n	8007d5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e66:	f000 f8a1 	bl	8007fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e6a:	f000 fbe7 	bl	800863c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e70:	f000 f8ee 	bl	8008050 <prvIsQueueEmpty>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f43f af6f 	beq.w	8007d5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3730      	adds	r7, #48	; 0x30
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10d      	bne.n	8007ec6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d14d      	bne.n	8007f4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 ffbc 	bl	8008e34 <xTaskPriorityDisinherit>
 8007ebc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	609a      	str	r2, [r3, #8]
 8007ec4:	e043      	b.n	8007f4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d119      	bne.n	8007f00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6858      	ldr	r0, [r3, #4]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	f004 fc24 	bl	800c724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	441a      	add	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d32b      	bcc.n	8007f4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	e026      	b.n	8007f4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	68d8      	ldr	r0, [r3, #12]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	f004 fc0a 	bl	800c724 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	425b      	negs	r3, r3
 8007f1a:	441a      	add	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d207      	bcs.n	8007f3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	425b      	negs	r3, r3
 8007f36:	441a      	add	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d105      	bne.n	8007f4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f56:	697b      	ldr	r3, [r7, #20]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d018      	beq.n	8007fa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	441a      	add	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d303      	bcc.n	8007f94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68d9      	ldr	r1, [r3, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6838      	ldr	r0, [r7, #0]
 8007fa0:	f004 fbc0 	bl	800c724 <memcpy>
	}
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fb4:	f001 fc7e 	bl	80098b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fc0:	e011      	b.n	8007fe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d012      	beq.n	8007ff0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3324      	adds	r3, #36	; 0x24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fd50 	bl	8008a74 <xTaskRemoveFromEventList>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fda:	f000 fe27 	bl	8008c2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dce9      	bgt.n	8007fc2 <prvUnlockQueue+0x16>
 8007fee:	e000      	b.n	8007ff2 <prvUnlockQueue+0x46>
					break;
 8007ff0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	22ff      	movs	r2, #255	; 0xff
 8007ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ffa:	f001 fc8b 	bl	8009914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ffe:	f001 fc59 	bl	80098b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008008:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800800a:	e011      	b.n	8008030 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d012      	beq.n	800803a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3310      	adds	r3, #16
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fd2b 	bl	8008a74 <xTaskRemoveFromEventList>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008024:	f000 fe02 	bl	8008c2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	3b01      	subs	r3, #1
 800802c:	b2db      	uxtb	r3, r3
 800802e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008034:	2b00      	cmp	r3, #0
 8008036:	dce9      	bgt.n	800800c <prvUnlockQueue+0x60>
 8008038:	e000      	b.n	800803c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800803a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	22ff      	movs	r2, #255	; 0xff
 8008040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008044:	f001 fc66 	bl	8009914 <vPortExitCritical>
}
 8008048:	bf00      	nop
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008058:	f001 fc2c 	bl	80098b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008060:	2b00      	cmp	r3, #0
 8008062:	d102      	bne.n	800806a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e001      	b.n	800806e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800806e:	f001 fc51 	bl	8009914 <vPortExitCritical>

	return xReturn;
 8008072:	68fb      	ldr	r3, [r7, #12]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008084:	f001 fc16 	bl	80098b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	429a      	cmp	r2, r3
 8008092:	d102      	bne.n	800809a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008094:	2301      	movs	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	e001      	b.n	800809e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800809e:	f001 fc39 	bl	8009914 <vPortExitCritical>

	return xReturn;
 80080a2:	68fb      	ldr	r3, [r7, #12]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	e014      	b.n	80080e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080bc:	4a0f      	ldr	r2, [pc, #60]	; (80080fc <vQueueAddToRegistry+0x50>)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10b      	bne.n	80080e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080c8:	490c      	ldr	r1, [pc, #48]	; (80080fc <vQueueAddToRegistry+0x50>)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080d2:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <vQueueAddToRegistry+0x50>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	4413      	add	r3, r2
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080de:	e006      	b.n	80080ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b07      	cmp	r3, #7
 80080ea:	d9e7      	bls.n	80080bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20002060 	.word	0x20002060

08008100 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008110:	f001 fbd0 	bl	80098b4 <vPortEnterCritical>
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800811a:	b25b      	sxtb	r3, r3
 800811c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008120:	d103      	bne.n	800812a <vQueueWaitForMessageRestricted+0x2a>
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008130:	b25b      	sxtb	r3, r3
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008136:	d103      	bne.n	8008140 <vQueueWaitForMessageRestricted+0x40>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008140:	f001 fbe8 	bl	8009914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	3324      	adds	r3, #36	; 0x24
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fc61 	bl	8008a1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800815a:	6978      	ldr	r0, [r7, #20]
 800815c:	f7ff ff26 	bl	8007fac <prvUnlockQueue>
	}
 8008160:	bf00      	nop
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08e      	sub	sp, #56	; 0x38
 800816c:	af04      	add	r7, sp, #16
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <xTaskCreateStatic+0x2a>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	623b      	str	r3, [r7, #32]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xTaskCreateStatic+0x46>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	61fb      	str	r3, [r7, #28]
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081ae:	23bc      	movs	r3, #188	; 0xbc
 80081b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2bbc      	cmp	r3, #188	; 0xbc
 80081b6:	d00a      	beq.n	80081ce <xTaskCreateStatic+0x66>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	61bb      	str	r3, [r7, #24]
}
 80081ca:	bf00      	nop
 80081cc:	e7fe      	b.n	80081cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d01e      	beq.n	8008214 <xTaskCreateStatic+0xac>
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01b      	beq.n	8008214 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	2202      	movs	r2, #2
 80081ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80081ee:	2300      	movs	r3, #0
 80081f0:	9303      	str	r3, [sp, #12]
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	9302      	str	r3, [sp, #8]
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	68b9      	ldr	r1, [r7, #8]
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 f850 	bl	80082ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800820c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800820e:	f000 f8f3 	bl	80083f8 <prvAddNewTaskToReadyList>
 8008212:	e001      	b.n	8008218 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008218:	697b      	ldr	r3, [r7, #20]
	}
 800821a:	4618      	mov	r0, r3
 800821c:	3728      	adds	r7, #40	; 0x28
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008222:	b580      	push	{r7, lr}
 8008224:	b08c      	sub	sp, #48	; 0x30
 8008226:	af04      	add	r7, sp, #16
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	603b      	str	r3, [r7, #0]
 800822e:	4613      	mov	r3, r2
 8008230:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4618      	mov	r0, r3
 8008238:	f001 fc5e 	bl	8009af8 <pvPortMalloc>
 800823c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00e      	beq.n	8008262 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008244:	20bc      	movs	r0, #188	; 0xbc
 8008246:	f001 fc57 	bl	8009af8 <pvPortMalloc>
 800824a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	631a      	str	r2, [r3, #48]	; 0x30
 8008258:	e005      	b.n	8008266 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800825a:	6978      	ldr	r0, [r7, #20]
 800825c:	f001 fd18 	bl	8009c90 <vPortFree>
 8008260:	e001      	b.n	8008266 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d017      	beq.n	800829c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008274:	88fa      	ldrh	r2, [r7, #6]
 8008276:	2300      	movs	r3, #0
 8008278:	9303      	str	r3, [sp, #12]
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f80e 	bl	80082ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008290:	69f8      	ldr	r0, [r7, #28]
 8008292:	f000 f8b1 	bl	80083f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008296:	2301      	movs	r3, #1
 8008298:	61bb      	str	r3, [r7, #24]
 800829a:	e002      	b.n	80082a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800829c:	f04f 33ff 	mov.w	r3, #4294967295
 80082a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082a2:	69bb      	ldr	r3, [r7, #24]
	}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3720      	adds	r7, #32
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	461a      	mov	r2, r3
 80082c4:	21a5      	movs	r1, #165	; 0xa5
 80082c6:	f004 fa3b 	bl	800c740 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082d4:	3b01      	subs	r3, #1
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f023 0307 	bic.w	r3, r3, #7
 80082e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <prvInitialiseNewTask+0x58>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	617b      	str	r3, [r7, #20]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01f      	beq.n	800834a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800830a:	2300      	movs	r3, #0
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	e012      	b.n	8008336 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	7819      	ldrb	r1, [r3, #0]
 8008318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	3334      	adds	r3, #52	; 0x34
 8008320:	460a      	mov	r2, r1
 8008322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	4413      	add	r3, r2
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d006      	beq.n	800833e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	3301      	adds	r3, #1
 8008334:	61fb      	str	r3, [r7, #28]
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	2b0f      	cmp	r3, #15
 800833a:	d9e9      	bls.n	8008310 <prvInitialiseNewTask+0x64>
 800833c:	e000      	b.n	8008340 <prvInitialiseNewTask+0x94>
			{
				break;
 800833e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008348:	e003      	b.n	8008352 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	2b37      	cmp	r3, #55	; 0x37
 8008356:	d901      	bls.n	800835c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008358:	2337      	movs	r3, #55	; 0x37
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008366:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836a:	2200      	movs	r2, #0
 800836c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	3304      	adds	r3, #4
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff f978 	bl	8007668 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837a:	3318      	adds	r3, #24
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff f973 	bl	8007668 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	3354      	adds	r3, #84	; 0x54
 80083ac:	2260      	movs	r2, #96	; 0x60
 80083ae:	2100      	movs	r1, #0
 80083b0:	4618      	mov	r0, r3
 80083b2:	f004 f9c5 	bl	800c740 <memset>
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	4a0c      	ldr	r2, [pc, #48]	; (80083ec <prvInitialiseNewTask+0x140>)
 80083ba:	659a      	str	r2, [r3, #88]	; 0x58
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	4a0c      	ldr	r2, [pc, #48]	; (80083f0 <prvInitialiseNewTask+0x144>)
 80083c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	4a0b      	ldr	r2, [pc, #44]	; (80083f4 <prvInitialiseNewTask+0x148>)
 80083c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	68f9      	ldr	r1, [r7, #12]
 80083cc:	69b8      	ldr	r0, [r7, #24]
 80083ce:	f001 f941 	bl	8009654 <pxPortInitialiseStack>
 80083d2:	4602      	mov	r2, r0
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083e4:	bf00      	nop
 80083e6:	3720      	adds	r7, #32
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	0800e700 	.word	0x0800e700
 80083f0:	0800e720 	.word	0x0800e720
 80083f4:	0800e6e0 	.word	0x0800e6e0

080083f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008400:	f001 fa58 	bl	80098b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008404:	4b2d      	ldr	r3, [pc, #180]	; (80084bc <prvAddNewTaskToReadyList+0xc4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	4a2c      	ldr	r2, [pc, #176]	; (80084bc <prvAddNewTaskToReadyList+0xc4>)
 800840c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800840e:	4b2c      	ldr	r3, [pc, #176]	; (80084c0 <prvAddNewTaskToReadyList+0xc8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d109      	bne.n	800842a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008416:	4a2a      	ldr	r2, [pc, #168]	; (80084c0 <prvAddNewTaskToReadyList+0xc8>)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800841c:	4b27      	ldr	r3, [pc, #156]	; (80084bc <prvAddNewTaskToReadyList+0xc4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d110      	bne.n	8008446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008424:	f000 fc26 	bl	8008c74 <prvInitialiseTaskLists>
 8008428:	e00d      	b.n	8008446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800842a:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <prvAddNewTaskToReadyList+0xcc>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008432:	4b23      	ldr	r3, [pc, #140]	; (80084c0 <prvAddNewTaskToReadyList+0xc8>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	429a      	cmp	r2, r3
 800843e:	d802      	bhi.n	8008446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008440:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <prvAddNewTaskToReadyList+0xc8>)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008446:	4b20      	ldr	r3, [pc, #128]	; (80084c8 <prvAddNewTaskToReadyList+0xd0>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	4a1e      	ldr	r2, [pc, #120]	; (80084c8 <prvAddNewTaskToReadyList+0xd0>)
 800844e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008450:	4b1d      	ldr	r3, [pc, #116]	; (80084c8 <prvAddNewTaskToReadyList+0xd0>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	4b1b      	ldr	r3, [pc, #108]	; (80084cc <prvAddNewTaskToReadyList+0xd4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d903      	bls.n	800846c <prvAddNewTaskToReadyList+0x74>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	4a18      	ldr	r2, [pc, #96]	; (80084cc <prvAddNewTaskToReadyList+0xd4>)
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4a15      	ldr	r2, [pc, #84]	; (80084d0 <prvAddNewTaskToReadyList+0xd8>)
 800847a:	441a      	add	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3304      	adds	r3, #4
 8008480:	4619      	mov	r1, r3
 8008482:	4610      	mov	r0, r2
 8008484:	f7ff f8fd 	bl	8007682 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008488:	f001 fa44 	bl	8009914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <prvAddNewTaskToReadyList+0xcc>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00e      	beq.n	80084b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <prvAddNewTaskToReadyList+0xc8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	429a      	cmp	r2, r3
 80084a0:	d207      	bcs.n	80084b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084a2:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <prvAddNewTaskToReadyList+0xdc>)
 80084a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	2000130c 	.word	0x2000130c
 80084c0:	20000e38 	.word	0x20000e38
 80084c4:	20001318 	.word	0x20001318
 80084c8:	20001328 	.word	0x20001328
 80084cc:	20001314 	.word	0x20001314
 80084d0:	20000e3c 	.word	0x20000e3c
 80084d4:	e000ed04 	.word	0xe000ed04

080084d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d017      	beq.n	800851a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084ea:	4b13      	ldr	r3, [pc, #76]	; (8008538 <vTaskDelay+0x60>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <vTaskDelay+0x30>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	60bb      	str	r3, [r7, #8]
}
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008508:	f000 f88a 	bl	8008620 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800850c:	2100      	movs	r1, #0
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fcfe 	bl	8008f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008514:	f000 f892 	bl	800863c <xTaskResumeAll>
 8008518:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d107      	bne.n	8008530 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008520:	4b06      	ldr	r3, [pc, #24]	; (800853c <vTaskDelay+0x64>)
 8008522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20001334 	.word	0x20001334
 800853c:	e000ed04 	.word	0xe000ed04

08008540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08a      	sub	sp, #40	; 0x28
 8008544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008546:	2300      	movs	r3, #0
 8008548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800854e:	463a      	mov	r2, r7
 8008550:	1d39      	adds	r1, r7, #4
 8008552:	f107 0308 	add.w	r3, r7, #8
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff f832 	bl	80075c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	9202      	str	r2, [sp, #8]
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	2300      	movs	r3, #0
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	2300      	movs	r3, #0
 800856c:	460a      	mov	r2, r1
 800856e:	4924      	ldr	r1, [pc, #144]	; (8008600 <vTaskStartScheduler+0xc0>)
 8008570:	4824      	ldr	r0, [pc, #144]	; (8008604 <vTaskStartScheduler+0xc4>)
 8008572:	f7ff fdf9 	bl	8008168 <xTaskCreateStatic>
 8008576:	4603      	mov	r3, r0
 8008578:	4a23      	ldr	r2, [pc, #140]	; (8008608 <vTaskStartScheduler+0xc8>)
 800857a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800857c:	4b22      	ldr	r3, [pc, #136]	; (8008608 <vTaskStartScheduler+0xc8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008584:	2301      	movs	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	e001      	b.n	800858e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800858a:	2300      	movs	r3, #0
 800858c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d102      	bne.n	800859a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008594:	f000 fd10 	bl	8008fb8 <xTimerCreateTimerTask>
 8008598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d11b      	bne.n	80085d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085b4:	4b15      	ldr	r3, [pc, #84]	; (800860c <vTaskStartScheduler+0xcc>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3354      	adds	r3, #84	; 0x54
 80085ba:	4a15      	ldr	r2, [pc, #84]	; (8008610 <vTaskStartScheduler+0xd0>)
 80085bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085be:	4b15      	ldr	r3, [pc, #84]	; (8008614 <vTaskStartScheduler+0xd4>)
 80085c0:	f04f 32ff 	mov.w	r2, #4294967295
 80085c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085c6:	4b14      	ldr	r3, [pc, #80]	; (8008618 <vTaskStartScheduler+0xd8>)
 80085c8:	2201      	movs	r2, #1
 80085ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085cc:	4b13      	ldr	r3, [pc, #76]	; (800861c <vTaskStartScheduler+0xdc>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085d2:	f001 f8cd 	bl	8009770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085d6:	e00e      	b.n	80085f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085de:	d10a      	bne.n	80085f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <vTaskStartScheduler+0xb4>
}
 80085f6:	bf00      	nop
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	0800dcc0 	.word	0x0800dcc0
 8008604:	08008c45 	.word	0x08008c45
 8008608:	20001330 	.word	0x20001330
 800860c:	20000e38 	.word	0x20000e38
 8008610:	20000638 	.word	0x20000638
 8008614:	2000132c 	.word	0x2000132c
 8008618:	20001318 	.word	0x20001318
 800861c:	20001310 	.word	0x20001310

08008620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008624:	4b04      	ldr	r3, [pc, #16]	; (8008638 <vTaskSuspendAll+0x18>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3301      	adds	r3, #1
 800862a:	4a03      	ldr	r2, [pc, #12]	; (8008638 <vTaskSuspendAll+0x18>)
 800862c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800862e:	bf00      	nop
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	20001334 	.word	0x20001334

0800863c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008646:	2300      	movs	r3, #0
 8008648:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800864a:	4b42      	ldr	r3, [pc, #264]	; (8008754 <xTaskResumeAll+0x118>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <xTaskResumeAll+0x2c>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	603b      	str	r3, [r7, #0]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008668:	f001 f924 	bl	80098b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800866c:	4b39      	ldr	r3, [pc, #228]	; (8008754 <xTaskResumeAll+0x118>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3b01      	subs	r3, #1
 8008672:	4a38      	ldr	r2, [pc, #224]	; (8008754 <xTaskResumeAll+0x118>)
 8008674:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008676:	4b37      	ldr	r3, [pc, #220]	; (8008754 <xTaskResumeAll+0x118>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d162      	bne.n	8008744 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800867e:	4b36      	ldr	r3, [pc, #216]	; (8008758 <xTaskResumeAll+0x11c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d05e      	beq.n	8008744 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008686:	e02f      	b.n	80086e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008688:	4b34      	ldr	r3, [pc, #208]	; (800875c <xTaskResumeAll+0x120>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3318      	adds	r3, #24
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff f851 	bl	800773c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3304      	adds	r3, #4
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff f84c 	bl	800773c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a8:	4b2d      	ldr	r3, [pc, #180]	; (8008760 <xTaskResumeAll+0x124>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d903      	bls.n	80086b8 <xTaskResumeAll+0x7c>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	4a2a      	ldr	r2, [pc, #168]	; (8008760 <xTaskResumeAll+0x124>)
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4a27      	ldr	r2, [pc, #156]	; (8008764 <xTaskResumeAll+0x128>)
 80086c6:	441a      	add	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fe ffd7 	bl	8007682 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d8:	4b23      	ldr	r3, [pc, #140]	; (8008768 <xTaskResumeAll+0x12c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	429a      	cmp	r2, r3
 80086e0:	d302      	bcc.n	80086e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086e2:	4b22      	ldr	r3, [pc, #136]	; (800876c <xTaskResumeAll+0x130>)
 80086e4:	2201      	movs	r2, #1
 80086e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086e8:	4b1c      	ldr	r3, [pc, #112]	; (800875c <xTaskResumeAll+0x120>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1cb      	bne.n	8008688 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086f6:	f000 fb5f 	bl	8008db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086fa:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <xTaskResumeAll+0x134>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d010      	beq.n	8008728 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008706:	f000 f847 	bl	8008798 <xTaskIncrementTick>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008710:	4b16      	ldr	r3, [pc, #88]	; (800876c <xTaskResumeAll+0x130>)
 8008712:	2201      	movs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3b01      	subs	r3, #1
 800871a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1f1      	bne.n	8008706 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008722:	4b13      	ldr	r3, [pc, #76]	; (8008770 <xTaskResumeAll+0x134>)
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008728:	4b10      	ldr	r3, [pc, #64]	; (800876c <xTaskResumeAll+0x130>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d009      	beq.n	8008744 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008730:	2301      	movs	r3, #1
 8008732:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008734:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <xTaskResumeAll+0x138>)
 8008736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008744:	f001 f8e6 	bl	8009914 <vPortExitCritical>

	return xAlreadyYielded;
 8008748:	68bb      	ldr	r3, [r7, #8]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20001334 	.word	0x20001334
 8008758:	2000130c 	.word	0x2000130c
 800875c:	200012cc 	.word	0x200012cc
 8008760:	20001314 	.word	0x20001314
 8008764:	20000e3c 	.word	0x20000e3c
 8008768:	20000e38 	.word	0x20000e38
 800876c:	20001320 	.word	0x20001320
 8008770:	2000131c 	.word	0x2000131c
 8008774:	e000ed04 	.word	0xe000ed04

08008778 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800877e:	4b05      	ldr	r3, [pc, #20]	; (8008794 <xTaskGetTickCount+0x1c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008784:	687b      	ldr	r3, [r7, #4]
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20001310 	.word	0x20001310

08008798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a2:	4b4f      	ldr	r3, [pc, #316]	; (80088e0 <xTaskIncrementTick+0x148>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f040 808f 	bne.w	80088ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087ac:	4b4d      	ldr	r3, [pc, #308]	; (80088e4 <xTaskIncrementTick+0x14c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087b4:	4a4b      	ldr	r2, [pc, #300]	; (80088e4 <xTaskIncrementTick+0x14c>)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d120      	bne.n	8008802 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087c0:	4b49      	ldr	r3, [pc, #292]	; (80088e8 <xTaskIncrementTick+0x150>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	603b      	str	r3, [r7, #0]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <xTaskIncrementTick+0x46>
 80087e0:	4b41      	ldr	r3, [pc, #260]	; (80088e8 <xTaskIncrementTick+0x150>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	4b41      	ldr	r3, [pc, #260]	; (80088ec <xTaskIncrementTick+0x154>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a3f      	ldr	r2, [pc, #252]	; (80088e8 <xTaskIncrementTick+0x150>)
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	4a3f      	ldr	r2, [pc, #252]	; (80088ec <xTaskIncrementTick+0x154>)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	4b3e      	ldr	r3, [pc, #248]	; (80088f0 <xTaskIncrementTick+0x158>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	4a3d      	ldr	r2, [pc, #244]	; (80088f0 <xTaskIncrementTick+0x158>)
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	f000 fadb 	bl	8008db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008802:	4b3c      	ldr	r3, [pc, #240]	; (80088f4 <xTaskIncrementTick+0x15c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	429a      	cmp	r2, r3
 800880a:	d349      	bcc.n	80088a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800880c:	4b36      	ldr	r3, [pc, #216]	; (80088e8 <xTaskIncrementTick+0x150>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008816:	4b37      	ldr	r3, [pc, #220]	; (80088f4 <xTaskIncrementTick+0x15c>)
 8008818:	f04f 32ff 	mov.w	r2, #4294967295
 800881c:	601a      	str	r2, [r3, #0]
					break;
 800881e:	e03f      	b.n	80088a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008820:	4b31      	ldr	r3, [pc, #196]	; (80088e8 <xTaskIncrementTick+0x150>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	429a      	cmp	r2, r3
 8008836:	d203      	bcs.n	8008840 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008838:	4a2e      	ldr	r2, [pc, #184]	; (80088f4 <xTaskIncrementTick+0x15c>)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800883e:	e02f      	b.n	80088a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	3304      	adds	r3, #4
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe ff79 	bl	800773c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884e:	2b00      	cmp	r3, #0
 8008850:	d004      	beq.n	800885c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	3318      	adds	r3, #24
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe ff70 	bl	800773c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008860:	4b25      	ldr	r3, [pc, #148]	; (80088f8 <xTaskIncrementTick+0x160>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	429a      	cmp	r2, r3
 8008866:	d903      	bls.n	8008870 <xTaskIncrementTick+0xd8>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	4a22      	ldr	r2, [pc, #136]	; (80088f8 <xTaskIncrementTick+0x160>)
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008874:	4613      	mov	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4a1f      	ldr	r2, [pc, #124]	; (80088fc <xTaskIncrementTick+0x164>)
 800887e:	441a      	add	r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	3304      	adds	r3, #4
 8008884:	4619      	mov	r1, r3
 8008886:	4610      	mov	r0, r2
 8008888:	f7fe fefb 	bl	8007682 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008890:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <xTaskIncrementTick+0x168>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	429a      	cmp	r2, r3
 8008898:	d3b8      	bcc.n	800880c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800889e:	e7b5      	b.n	800880c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088a0:	4b17      	ldr	r3, [pc, #92]	; (8008900 <xTaskIncrementTick+0x168>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4915      	ldr	r1, [pc, #84]	; (80088fc <xTaskIncrementTick+0x164>)
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d901      	bls.n	80088bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80088b8:	2301      	movs	r3, #1
 80088ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088bc:	4b11      	ldr	r3, [pc, #68]	; (8008904 <xTaskIncrementTick+0x16c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80088c4:	2301      	movs	r3, #1
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	e004      	b.n	80088d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088ca:	4b0f      	ldr	r3, [pc, #60]	; (8008908 <xTaskIncrementTick+0x170>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3301      	adds	r3, #1
 80088d0:	4a0d      	ldr	r2, [pc, #52]	; (8008908 <xTaskIncrementTick+0x170>)
 80088d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088d4:	697b      	ldr	r3, [r7, #20]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20001334 	.word	0x20001334
 80088e4:	20001310 	.word	0x20001310
 80088e8:	200012c4 	.word	0x200012c4
 80088ec:	200012c8 	.word	0x200012c8
 80088f0:	20001324 	.word	0x20001324
 80088f4:	2000132c 	.word	0x2000132c
 80088f8:	20001314 	.word	0x20001314
 80088fc:	20000e3c 	.word	0x20000e3c
 8008900:	20000e38 	.word	0x20000e38
 8008904:	20001320 	.word	0x20001320
 8008908:	2000131c 	.word	0x2000131c

0800890c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008912:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <vTaskSwitchContext+0xb0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800891a:	4b29      	ldr	r3, [pc, #164]	; (80089c0 <vTaskSwitchContext+0xb4>)
 800891c:	2201      	movs	r2, #1
 800891e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008920:	e046      	b.n	80089b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008922:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <vTaskSwitchContext+0xb4>)
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008928:	4b26      	ldr	r3, [pc, #152]	; (80089c4 <vTaskSwitchContext+0xb8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	e010      	b.n	8008952 <vTaskSwitchContext+0x46>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10a      	bne.n	800894c <vTaskSwitchContext+0x40>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	607b      	str	r3, [r7, #4]
}
 8008948:	bf00      	nop
 800894a:	e7fe      	b.n	800894a <vTaskSwitchContext+0x3e>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3b01      	subs	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	491d      	ldr	r1, [pc, #116]	; (80089c8 <vTaskSwitchContext+0xbc>)
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0e4      	beq.n	8008930 <vTaskSwitchContext+0x24>
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <vTaskSwitchContext+0xbc>)
 8008972:	4413      	add	r3, r2
 8008974:	60bb      	str	r3, [r7, #8]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	605a      	str	r2, [r3, #4]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	3308      	adds	r3, #8
 8008988:	429a      	cmp	r2, r3
 800898a:	d104      	bne.n	8008996 <vTaskSwitchContext+0x8a>
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	605a      	str	r2, [r3, #4]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4a0b      	ldr	r2, [pc, #44]	; (80089cc <vTaskSwitchContext+0xc0>)
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <vTaskSwitchContext+0xb8>)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089a6:	4b09      	ldr	r3, [pc, #36]	; (80089cc <vTaskSwitchContext+0xc0>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3354      	adds	r3, #84	; 0x54
 80089ac:	4a08      	ldr	r2, [pc, #32]	; (80089d0 <vTaskSwitchContext+0xc4>)
 80089ae:	6013      	str	r3, [r2, #0]
}
 80089b0:	bf00      	nop
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr
 80089bc:	20001334 	.word	0x20001334
 80089c0:	20001320 	.word	0x20001320
 80089c4:	20001314 	.word	0x20001314
 80089c8:	20000e3c 	.word	0x20000e3c
 80089cc:	20000e38 	.word	0x20000e38
 80089d0:	20000638 	.word	0x20000638

080089d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	60fb      	str	r3, [r7, #12]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089fa:	4b07      	ldr	r3, [pc, #28]	; (8008a18 <vTaskPlaceOnEventList+0x44>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3318      	adds	r3, #24
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f7fe fe61 	bl	80076ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a08:	2101      	movs	r1, #1
 8008a0a:	6838      	ldr	r0, [r7, #0]
 8008a0c:	f000 fa80 	bl	8008f10 <prvAddCurrentTaskToDelayedList>
}
 8008a10:	bf00      	nop
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20000e38 	.word	0x20000e38

08008a1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	617b      	str	r3, [r7, #20]
}
 8008a40:	bf00      	nop
 8008a42:	e7fe      	b.n	8008a42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a44:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3318      	adds	r3, #24
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f7fe fe18 	bl	8007682 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a58:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	68b8      	ldr	r0, [r7, #8]
 8008a62:	f000 fa55 	bl	8008f10 <prvAddCurrentTaskToDelayedList>
	}
 8008a66:	bf00      	nop
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20000e38 	.word	0x20000e38

08008a74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	60fb      	str	r3, [r7, #12]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3318      	adds	r3, #24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe fe49 	bl	800773c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aaa:	4b1e      	ldr	r3, [pc, #120]	; (8008b24 <xTaskRemoveFromEventList+0xb0>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d11d      	bne.n	8008aee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fe40 	bl	800773c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	4b19      	ldr	r3, [pc, #100]	; (8008b28 <xTaskRemoveFromEventList+0xb4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d903      	bls.n	8008ad0 <xTaskRemoveFromEventList+0x5c>
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a16      	ldr	r2, [pc, #88]	; (8008b28 <xTaskRemoveFromEventList+0xb4>)
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4a13      	ldr	r2, [pc, #76]	; (8008b2c <xTaskRemoveFromEventList+0xb8>)
 8008ade:	441a      	add	r2, r3
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fe fdcb 	bl	8007682 <vListInsertEnd>
 8008aec:	e005      	b.n	8008afa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	3318      	adds	r3, #24
 8008af2:	4619      	mov	r1, r3
 8008af4:	480e      	ldr	r0, [pc, #56]	; (8008b30 <xTaskRemoveFromEventList+0xbc>)
 8008af6:	f7fe fdc4 	bl	8007682 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afe:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <xTaskRemoveFromEventList+0xc0>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d905      	bls.n	8008b14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <xTaskRemoveFromEventList+0xc4>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e001      	b.n	8008b18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b18:	697b      	ldr	r3, [r7, #20]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20001334 	.word	0x20001334
 8008b28:	20001314 	.word	0x20001314
 8008b2c:	20000e3c 	.word	0x20000e3c
 8008b30:	200012cc 	.word	0x200012cc
 8008b34:	20000e38 	.word	0x20000e38
 8008b38:	20001320 	.word	0x20001320

08008b3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b44:	4b06      	ldr	r3, [pc, #24]	; (8008b60 <vTaskInternalSetTimeOutState+0x24>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <vTaskInternalSetTimeOutState+0x28>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	605a      	str	r2, [r3, #4]
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	20001324 	.word	0x20001324
 8008b64:	20001310 	.word	0x20001310

08008b68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	613b      	str	r3, [r7, #16]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	60fb      	str	r3, [r7, #12]
}
 8008ba6:	bf00      	nop
 8008ba8:	e7fe      	b.n	8008ba8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008baa:	f000 fe83 	bl	80098b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bae:	4b1d      	ldr	r3, [pc, #116]	; (8008c24 <xTaskCheckForTimeOut+0xbc>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	d102      	bne.n	8008bce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61fb      	str	r3, [r7, #28]
 8008bcc:	e023      	b.n	8008c16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <xTaskCheckForTimeOut+0xc0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d007      	beq.n	8008bea <xTaskCheckForTimeOut+0x82>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d302      	bcc.n	8008bea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	e015      	b.n	8008c16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d20b      	bcs.n	8008c0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ff9b 	bl	8008b3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61fb      	str	r3, [r7, #28]
 8008c0a:	e004      	b.n	8008c16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c12:	2301      	movs	r3, #1
 8008c14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c16:	f000 fe7d 	bl	8009914 <vPortExitCritical>

	return xReturn;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3720      	adds	r7, #32
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20001310 	.word	0x20001310
 8008c28:	20001324 	.word	0x20001324

08008c2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c30:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <vTaskMissedYield+0x14>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	601a      	str	r2, [r3, #0]
}
 8008c36:	bf00      	nop
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20001320 	.word	0x20001320

08008c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c4c:	f000 f852 	bl	8008cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c50:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <prvIdleTask+0x28>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d9f9      	bls.n	8008c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c58:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <prvIdleTask+0x2c>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c68:	e7f0      	b.n	8008c4c <prvIdleTask+0x8>
 8008c6a:	bf00      	nop
 8008c6c:	20000e3c 	.word	0x20000e3c
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	607b      	str	r3, [r7, #4]
 8008c7e:	e00c      	b.n	8008c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4a12      	ldr	r2, [pc, #72]	; (8008cd4 <prvInitialiseTaskLists+0x60>)
 8008c8c:	4413      	add	r3, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe fcca 	bl	8007628 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3301      	adds	r3, #1
 8008c98:	607b      	str	r3, [r7, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b37      	cmp	r3, #55	; 0x37
 8008c9e:	d9ef      	bls.n	8008c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ca0:	480d      	ldr	r0, [pc, #52]	; (8008cd8 <prvInitialiseTaskLists+0x64>)
 8008ca2:	f7fe fcc1 	bl	8007628 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ca6:	480d      	ldr	r0, [pc, #52]	; (8008cdc <prvInitialiseTaskLists+0x68>)
 8008ca8:	f7fe fcbe 	bl	8007628 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cac:	480c      	ldr	r0, [pc, #48]	; (8008ce0 <prvInitialiseTaskLists+0x6c>)
 8008cae:	f7fe fcbb 	bl	8007628 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cb2:	480c      	ldr	r0, [pc, #48]	; (8008ce4 <prvInitialiseTaskLists+0x70>)
 8008cb4:	f7fe fcb8 	bl	8007628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cb8:	480b      	ldr	r0, [pc, #44]	; (8008ce8 <prvInitialiseTaskLists+0x74>)
 8008cba:	f7fe fcb5 	bl	8007628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <prvInitialiseTaskLists+0x78>)
 8008cc0:	4a05      	ldr	r2, [pc, #20]	; (8008cd8 <prvInitialiseTaskLists+0x64>)
 8008cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cc4:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <prvInitialiseTaskLists+0x7c>)
 8008cc6:	4a05      	ldr	r2, [pc, #20]	; (8008cdc <prvInitialiseTaskLists+0x68>)
 8008cc8:	601a      	str	r2, [r3, #0]
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20000e3c 	.word	0x20000e3c
 8008cd8:	2000129c 	.word	0x2000129c
 8008cdc:	200012b0 	.word	0x200012b0
 8008ce0:	200012cc 	.word	0x200012cc
 8008ce4:	200012e0 	.word	0x200012e0
 8008ce8:	200012f8 	.word	0x200012f8
 8008cec:	200012c4 	.word	0x200012c4
 8008cf0:	200012c8 	.word	0x200012c8

08008cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cfa:	e019      	b.n	8008d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cfc:	f000 fdda 	bl	80098b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d00:	4b10      	ldr	r3, [pc, #64]	; (8008d44 <prvCheckTasksWaitingTermination+0x50>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fd15 	bl	800773c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d12:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <prvCheckTasksWaitingTermination+0x54>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	4a0b      	ldr	r2, [pc, #44]	; (8008d48 <prvCheckTasksWaitingTermination+0x54>)
 8008d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d1c:	4b0b      	ldr	r3, [pc, #44]	; (8008d4c <prvCheckTasksWaitingTermination+0x58>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <prvCheckTasksWaitingTermination+0x58>)
 8008d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d26:	f000 fdf5 	bl	8009914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f810 	bl	8008d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <prvCheckTasksWaitingTermination+0x58>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e1      	bne.n	8008cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	200012e0 	.word	0x200012e0
 8008d48:	2000130c 	.word	0x2000130c
 8008d4c:	200012f4 	.word	0x200012f4

08008d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3354      	adds	r3, #84	; 0x54
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f003 fe1d 	bl	800c99c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d108      	bne.n	8008d7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 ff8d 	bl	8009c90 <vPortFree>
				vPortFree( pxTCB );
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 ff8a 	bl	8009c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d7c:	e018      	b.n	8008db0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d103      	bne.n	8008d90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 ff81 	bl	8009c90 <vPortFree>
	}
 8008d8e:	e00f      	b.n	8008db0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d00a      	beq.n	8008db0 <prvDeleteTCB+0x60>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	60fb      	str	r3, [r7, #12]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <prvDeleteTCB+0x5e>
	}
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <prvResetNextTaskUnblockTime+0x38>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <prvResetNextTaskUnblockTime+0x3c>)
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008dd0:	e008      	b.n	8008de4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd2:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <prvResetNextTaskUnblockTime+0x38>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4a04      	ldr	r2, [pc, #16]	; (8008df4 <prvResetNextTaskUnblockTime+0x3c>)
 8008de2:	6013      	str	r3, [r2, #0]
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	200012c4 	.word	0x200012c4
 8008df4:	2000132c 	.word	0x2000132c

08008df8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dfe:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <xTaskGetSchedulerState+0x34>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e06:	2301      	movs	r3, #1
 8008e08:	607b      	str	r3, [r7, #4]
 8008e0a:	e008      	b.n	8008e1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e0c:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <xTaskGetSchedulerState+0x38>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e14:	2302      	movs	r3, #2
 8008e16:	607b      	str	r3, [r7, #4]
 8008e18:	e001      	b.n	8008e1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e1e:	687b      	ldr	r3, [r7, #4]
	}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20001318 	.word	0x20001318
 8008e30:	20001334 	.word	0x20001334

08008e34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d056      	beq.n	8008ef8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e4a:	4b2e      	ldr	r3, [pc, #184]	; (8008f04 <xTaskPriorityDisinherit+0xd0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d00a      	beq.n	8008e6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	60fb      	str	r3, [r7, #12]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	60bb      	str	r3, [r7, #8]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d02c      	beq.n	8008ef8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d128      	bne.n	8008ef8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fc46 	bl	800773c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec8:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <xTaskPriorityDisinherit+0xd4>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d903      	bls.n	8008ed8 <xTaskPriorityDisinherit+0xa4>
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	4a0c      	ldr	r2, [pc, #48]	; (8008f08 <xTaskPriorityDisinherit+0xd4>)
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <xTaskPriorityDisinherit+0xd8>)
 8008ee6:	441a      	add	r2, r3
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7fe fbc7 	bl	8007682 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ef8:	697b      	ldr	r3, [r7, #20]
	}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000e38 	.word	0x20000e38
 8008f08:	20001314 	.word	0x20001314
 8008f0c:	20000e3c 	.word	0x20000e3c

08008f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f1a:	4b21      	ldr	r3, [pc, #132]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f20:	4b20      	ldr	r3, [pc, #128]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fc08 	bl	800773c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f32:	d10a      	bne.n	8008f4a <prvAddCurrentTaskToDelayedList+0x3a>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d007      	beq.n	8008f4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4619      	mov	r1, r3
 8008f42:	4819      	ldr	r0, [pc, #100]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f44:	f7fe fb9d 	bl	8007682 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f48:	e026      	b.n	8008f98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4413      	add	r3, r2
 8008f50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f52:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d209      	bcs.n	8008f76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f62:	4b12      	ldr	r3, [pc, #72]	; (8008fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f7fe fbab 	bl	80076ca <vListInsert>
}
 8008f74:	e010      	b.n	8008f98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f76:	4b0e      	ldr	r3, [pc, #56]	; (8008fb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	f7fe fba1 	bl	80076ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f88:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d202      	bcs.n	8008f98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f92:	4a08      	ldr	r2, [pc, #32]	; (8008fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6013      	str	r3, [r2, #0]
}
 8008f98:	bf00      	nop
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20001310 	.word	0x20001310
 8008fa4:	20000e38 	.word	0x20000e38
 8008fa8:	200012f8 	.word	0x200012f8
 8008fac:	200012c8 	.word	0x200012c8
 8008fb0:	200012c4 	.word	0x200012c4
 8008fb4:	2000132c 	.word	0x2000132c

08008fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	; 0x28
 8008fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fc2:	f000 fb07 	bl	80095d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008fc6:	4b1c      	ldr	r3, [pc, #112]	; (8009038 <xTimerCreateTimerTask+0x80>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d021      	beq.n	8009012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fd6:	1d3a      	adds	r2, r7, #4
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	f107 030c 	add.w	r3, r7, #12
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe fb07 	bl	80075f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	9202      	str	r2, [sp, #8]
 8008fee:	9301      	str	r3, [sp, #4]
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	460a      	mov	r2, r1
 8008ff8:	4910      	ldr	r1, [pc, #64]	; (800903c <xTimerCreateTimerTask+0x84>)
 8008ffa:	4811      	ldr	r0, [pc, #68]	; (8009040 <xTimerCreateTimerTask+0x88>)
 8008ffc:	f7ff f8b4 	bl	8008168 <xTaskCreateStatic>
 8009000:	4603      	mov	r3, r0
 8009002:	4a10      	ldr	r2, [pc, #64]	; (8009044 <xTimerCreateTimerTask+0x8c>)
 8009004:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009006:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <xTimerCreateTimerTask+0x8c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800900e:	2301      	movs	r3, #1
 8009010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10a      	bne.n	800902e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	613b      	str	r3, [r7, #16]
}
 800902a:	bf00      	nop
 800902c:	e7fe      	b.n	800902c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800902e:	697b      	ldr	r3, [r7, #20]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20001368 	.word	0x20001368
 800903c:	0800dcc8 	.word	0x0800dcc8
 8009040:	0800917d 	.word	0x0800917d
 8009044:	2000136c 	.word	0x2000136c

08009048 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	; 0x28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009056:	2300      	movs	r3, #0
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	623b      	str	r3, [r7, #32]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009076:	4b1a      	ldr	r3, [pc, #104]	; (80090e0 <xTimerGenericCommand+0x98>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d02a      	beq.n	80090d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2b05      	cmp	r3, #5
 800908e:	dc18      	bgt.n	80090c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009090:	f7ff feb2 	bl	8008df8 <xTaskGetSchedulerState>
 8009094:	4603      	mov	r3, r0
 8009096:	2b02      	cmp	r3, #2
 8009098:	d109      	bne.n	80090ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800909a:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <xTimerGenericCommand+0x98>)
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	f107 0110 	add.w	r1, r7, #16
 80090a2:	2300      	movs	r3, #0
 80090a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a6:	f7fe fc77 	bl	8007998 <xQueueGenericSend>
 80090aa:	6278      	str	r0, [r7, #36]	; 0x24
 80090ac:	e012      	b.n	80090d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090ae:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <xTimerGenericCommand+0x98>)
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	f107 0110 	add.w	r1, r7, #16
 80090b6:	2300      	movs	r3, #0
 80090b8:	2200      	movs	r2, #0
 80090ba:	f7fe fc6d 	bl	8007998 <xQueueGenericSend>
 80090be:	6278      	str	r0, [r7, #36]	; 0x24
 80090c0:	e008      	b.n	80090d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090c2:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <xTimerGenericCommand+0x98>)
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	f107 0110 	add.w	r1, r7, #16
 80090ca:	2300      	movs	r3, #0
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	f7fe fd61 	bl	8007b94 <xQueueGenericSendFromISR>
 80090d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3728      	adds	r7, #40	; 0x28
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20001368 	.word	0x20001368

080090e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ee:	4b22      	ldr	r3, [pc, #136]	; (8009178 <prvProcessExpiredTimer+0x94>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fb1d 	bl	800773c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d022      	beq.n	8009156 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	699a      	ldr	r2, [r3, #24]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	18d1      	adds	r1, r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	6978      	ldr	r0, [r7, #20]
 800911e:	f000 f8d1 	bl	80092c4 <prvInsertTimerInActiveList>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01f      	beq.n	8009168 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009128:	2300      	movs	r3, #0
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	2300      	movs	r3, #0
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	2100      	movs	r1, #0
 8009132:	6978      	ldr	r0, [r7, #20]
 8009134:	f7ff ff88 	bl	8009048 <xTimerGenericCommand>
 8009138:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d113      	bne.n	8009168 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	60fb      	str	r3, [r7, #12]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800915c:	f023 0301 	bic.w	r3, r3, #1
 8009160:	b2da      	uxtb	r2, r3
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	6978      	ldr	r0, [r7, #20]
 800916e:	4798      	blx	r3
}
 8009170:	bf00      	nop
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20001360 	.word	0x20001360

0800917c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009184:	f107 0308 	add.w	r3, r7, #8
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f857 	bl	800923c <prvGetNextExpireTime>
 800918e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4619      	mov	r1, r3
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f803 	bl	80091a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800919a:	f000 f8d5 	bl	8009348 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800919e:	e7f1      	b.n	8009184 <prvTimerTask+0x8>

080091a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091aa:	f7ff fa39 	bl	8008620 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091ae:	f107 0308 	add.w	r3, r7, #8
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 f866 	bl	8009284 <prvSampleTimeNow>
 80091b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d130      	bne.n	8009222 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <prvProcessTimerOrBlockTask+0x3c>
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d806      	bhi.n	80091dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80091ce:	f7ff fa35 	bl	800863c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80091d2:	68f9      	ldr	r1, [r7, #12]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7ff ff85 	bl	80090e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091da:	e024      	b.n	8009226 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d008      	beq.n	80091f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091e2:	4b13      	ldr	r3, [pc, #76]	; (8009230 <prvProcessTimerOrBlockTask+0x90>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <prvProcessTimerOrBlockTask+0x50>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <prvProcessTimerOrBlockTask+0x52>
 80091f0:	2300      	movs	r3, #0
 80091f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <prvProcessTimerOrBlockTask+0x94>)
 80091f6:	6818      	ldr	r0, [r3, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	4619      	mov	r1, r3
 8009202:	f7fe ff7d 	bl	8008100 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009206:	f7ff fa19 	bl	800863c <xTaskResumeAll>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10a      	bne.n	8009226 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009210:	4b09      	ldr	r3, [pc, #36]	; (8009238 <prvProcessTimerOrBlockTask+0x98>)
 8009212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	f3bf 8f6f 	isb	sy
}
 8009220:	e001      	b.n	8009226 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009222:	f7ff fa0b 	bl	800863c <xTaskResumeAll>
}
 8009226:	bf00      	nop
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	20001364 	.word	0x20001364
 8009234:	20001368 	.word	0x20001368
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <prvGetNextExpireTime+0x44>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <prvGetNextExpireTime+0x16>
 800924e:	2201      	movs	r2, #1
 8009250:	e000      	b.n	8009254 <prvGetNextExpireTime+0x18>
 8009252:	2200      	movs	r2, #0
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d105      	bne.n	800926c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009260:	4b07      	ldr	r3, [pc, #28]	; (8009280 <prvGetNextExpireTime+0x44>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	e001      	b.n	8009270 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009270:	68fb      	ldr	r3, [r7, #12]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20001360 	.word	0x20001360

08009284 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800928c:	f7ff fa74 	bl	8008778 <xTaskGetTickCount>
 8009290:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009292:	4b0b      	ldr	r3, [pc, #44]	; (80092c0 <prvSampleTimeNow+0x3c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	429a      	cmp	r2, r3
 800929a:	d205      	bcs.n	80092a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800929c:	f000 f936 	bl	800950c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	e002      	b.n	80092ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80092ae:	4a04      	ldr	r2, [pc, #16]	; (80092c0 <prvSampleTimeNow+0x3c>)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80092b4:	68fb      	ldr	r3, [r7, #12]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20001370 	.word	0x20001370

080092c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80092d2:	2300      	movs	r3, #0
 80092d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d812      	bhi.n	8009310 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	1ad2      	subs	r2, r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d302      	bcc.n	80092fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092f8:	2301      	movs	r3, #1
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	e01b      	b.n	8009336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092fe:	4b10      	ldr	r3, [pc, #64]	; (8009340 <prvInsertTimerInActiveList+0x7c>)
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3304      	adds	r3, #4
 8009306:	4619      	mov	r1, r3
 8009308:	4610      	mov	r0, r2
 800930a:	f7fe f9de 	bl	80076ca <vListInsert>
 800930e:	e012      	b.n	8009336 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	429a      	cmp	r2, r3
 8009316:	d206      	bcs.n	8009326 <prvInsertTimerInActiveList+0x62>
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	429a      	cmp	r2, r3
 800931e:	d302      	bcc.n	8009326 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009320:	2301      	movs	r3, #1
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	e007      	b.n	8009336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009326:	4b07      	ldr	r3, [pc, #28]	; (8009344 <prvInsertTimerInActiveList+0x80>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3304      	adds	r3, #4
 800932e:	4619      	mov	r1, r3
 8009330:	4610      	mov	r0, r2
 8009332:	f7fe f9ca 	bl	80076ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009336:	697b      	ldr	r3, [r7, #20]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20001364 	.word	0x20001364
 8009344:	20001360 	.word	0x20001360

08009348 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08e      	sub	sp, #56	; 0x38
 800934c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800934e:	e0ca      	b.n	80094e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	da18      	bge.n	8009388 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009356:	1d3b      	adds	r3, r7, #4
 8009358:	3304      	adds	r3, #4
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10a      	bne.n	8009378 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	61fb      	str	r3, [r7, #28]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937e:	6850      	ldr	r0, [r2, #4]
 8009380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009382:	6892      	ldr	r2, [r2, #8]
 8009384:	4611      	mov	r1, r2
 8009386:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	f2c0 80aa 	blt.w	80094e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	3304      	adds	r3, #4
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe f9cb 	bl	800773c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093a6:	463b      	mov	r3, r7
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff ff6b 	bl	8009284 <prvSampleTimeNow>
 80093ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b09      	cmp	r3, #9
 80093b4:	f200 8097 	bhi.w	80094e6 <prvProcessReceivedCommands+0x19e>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <prvProcessReceivedCommands+0x78>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093e9 	.word	0x080093e9
 80093c4:	080093e9 	.word	0x080093e9
 80093c8:	080093e9 	.word	0x080093e9
 80093cc:	0800945d 	.word	0x0800945d
 80093d0:	08009471 	.word	0x08009471
 80093d4:	080094bb 	.word	0x080094bb
 80093d8:	080093e9 	.word	0x080093e9
 80093dc:	080093e9 	.word	0x080093e9
 80093e0:	0800945d 	.word	0x0800945d
 80093e4:	08009471 	.word	0x08009471
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ee:	f043 0301 	orr.w	r3, r3, #1
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	18d1      	adds	r1, r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009408:	f7ff ff5c 	bl	80092c4 <prvInsertTimerInActiveList>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d069      	beq.n	80094e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009418:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d05e      	beq.n	80094e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	441a      	add	r2, r3
 8009430:	2300      	movs	r3, #0
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	2300      	movs	r3, #0
 8009436:	2100      	movs	r1, #0
 8009438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800943a:	f7ff fe05 	bl	8009048 <xTimerGenericCommand>
 800943e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d14f      	bne.n	80094e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	61bb      	str	r3, [r7, #24]
}
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009462:	f023 0301 	bic.w	r3, r3, #1
 8009466:	b2da      	uxtb	r2, r3
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800946e:	e03a      	b.n	80094e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009476:	f043 0301 	orr.w	r3, r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	617b      	str	r3, [r7, #20]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	699a      	ldr	r2, [r3, #24]
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	18d1      	adds	r1, r2, r3
 80094ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b4:	f7ff ff06 	bl	80092c4 <prvInsertTimerInActiveList>
					break;
 80094b8:	e015      	b.n	80094e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094c0:	f003 0302 	and.w	r3, r3, #2
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80094c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ca:	f000 fbe1 	bl	8009c90 <vPortFree>
 80094ce:	e00a      	b.n	80094e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d6:	f023 0301 	bic.w	r3, r3, #1
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80094e2:	e000      	b.n	80094e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80094e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094e6:	4b08      	ldr	r3, [pc, #32]	; (8009508 <prvProcessReceivedCommands+0x1c0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	1d39      	adds	r1, r7, #4
 80094ec:	2200      	movs	r2, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fbec 	bl	8007ccc <xQueueReceive>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f47f af2a 	bne.w	8009350 <prvProcessReceivedCommands+0x8>
	}
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	3730      	adds	r7, #48	; 0x30
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20001368 	.word	0x20001368

0800950c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009512:	e048      	b.n	80095a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009514:	4b2d      	ldr	r3, [pc, #180]	; (80095cc <prvSwitchTimerLists+0xc0>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951e:	4b2b      	ldr	r3, [pc, #172]	; (80095cc <prvSwitchTimerLists+0xc0>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3304      	adds	r3, #4
 800952c:	4618      	mov	r0, r3
 800952e:	f7fe f905 	bl	800773c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d02e      	beq.n	80095a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	4413      	add	r3, r2
 8009550:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	429a      	cmp	r2, r3
 8009558:	d90e      	bls.n	8009578 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009566:	4b19      	ldr	r3, [pc, #100]	; (80095cc <prvSwitchTimerLists+0xc0>)
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3304      	adds	r3, #4
 800956e:	4619      	mov	r1, r3
 8009570:	4610      	mov	r0, r2
 8009572:	f7fe f8aa 	bl	80076ca <vListInsert>
 8009576:	e016      	b.n	80095a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009578:	2300      	movs	r3, #0
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	2300      	movs	r3, #0
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	2100      	movs	r1, #0
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f7ff fd60 	bl	8009048 <xTimerGenericCommand>
 8009588:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	603b      	str	r3, [r7, #0]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095a6:	4b09      	ldr	r3, [pc, #36]	; (80095cc <prvSwitchTimerLists+0xc0>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1b1      	bne.n	8009514 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095b0:	4b06      	ldr	r3, [pc, #24]	; (80095cc <prvSwitchTimerLists+0xc0>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095b6:	4b06      	ldr	r3, [pc, #24]	; (80095d0 <prvSwitchTimerLists+0xc4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a04      	ldr	r2, [pc, #16]	; (80095cc <prvSwitchTimerLists+0xc0>)
 80095bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095be:	4a04      	ldr	r2, [pc, #16]	; (80095d0 <prvSwitchTimerLists+0xc4>)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	6013      	str	r3, [r2, #0]
}
 80095c4:	bf00      	nop
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20001360 	.word	0x20001360
 80095d0:	20001364 	.word	0x20001364

080095d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80095da:	f000 f96b 	bl	80098b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80095de:	4b15      	ldr	r3, [pc, #84]	; (8009634 <prvCheckForValidListAndQueue+0x60>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d120      	bne.n	8009628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80095e6:	4814      	ldr	r0, [pc, #80]	; (8009638 <prvCheckForValidListAndQueue+0x64>)
 80095e8:	f7fe f81e 	bl	8007628 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80095ec:	4813      	ldr	r0, [pc, #76]	; (800963c <prvCheckForValidListAndQueue+0x68>)
 80095ee:	f7fe f81b 	bl	8007628 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80095f2:	4b13      	ldr	r3, [pc, #76]	; (8009640 <prvCheckForValidListAndQueue+0x6c>)
 80095f4:	4a10      	ldr	r2, [pc, #64]	; (8009638 <prvCheckForValidListAndQueue+0x64>)
 80095f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80095f8:	4b12      	ldr	r3, [pc, #72]	; (8009644 <prvCheckForValidListAndQueue+0x70>)
 80095fa:	4a10      	ldr	r2, [pc, #64]	; (800963c <prvCheckForValidListAndQueue+0x68>)
 80095fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095fe:	2300      	movs	r3, #0
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	4b11      	ldr	r3, [pc, #68]	; (8009648 <prvCheckForValidListAndQueue+0x74>)
 8009604:	4a11      	ldr	r2, [pc, #68]	; (800964c <prvCheckForValidListAndQueue+0x78>)
 8009606:	2110      	movs	r1, #16
 8009608:	200a      	movs	r0, #10
 800960a:	f7fe f929 	bl	8007860 <xQueueGenericCreateStatic>
 800960e:	4603      	mov	r3, r0
 8009610:	4a08      	ldr	r2, [pc, #32]	; (8009634 <prvCheckForValidListAndQueue+0x60>)
 8009612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009614:	4b07      	ldr	r3, [pc, #28]	; (8009634 <prvCheckForValidListAndQueue+0x60>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800961c:	4b05      	ldr	r3, [pc, #20]	; (8009634 <prvCheckForValidListAndQueue+0x60>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	490b      	ldr	r1, [pc, #44]	; (8009650 <prvCheckForValidListAndQueue+0x7c>)
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fd42 	bl	80080ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009628:	f000 f974 	bl	8009914 <vPortExitCritical>
}
 800962c:	bf00      	nop
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20001368 	.word	0x20001368
 8009638:	20001338 	.word	0x20001338
 800963c:	2000134c 	.word	0x2000134c
 8009640:	20001360 	.word	0x20001360
 8009644:	20001364 	.word	0x20001364
 8009648:	20001414 	.word	0x20001414
 800964c:	20001374 	.word	0x20001374
 8009650:	0800dcd0 	.word	0x0800dcd0

08009654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3b04      	subs	r3, #4
 8009664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800966c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3b04      	subs	r3, #4
 8009672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f023 0201 	bic.w	r2, r3, #1
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3b04      	subs	r3, #4
 8009682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009684:	4a0c      	ldr	r2, [pc, #48]	; (80096b8 <pxPortInitialiseStack+0x64>)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3b14      	subs	r3, #20
 800968e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3b04      	subs	r3, #4
 800969a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f06f 0202 	mvn.w	r2, #2
 80096a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3b20      	subs	r3, #32
 80096a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096aa:	68fb      	ldr	r3, [r7, #12]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	080096bd 	.word	0x080096bd

080096bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096c6:	4b12      	ldr	r3, [pc, #72]	; (8009710 <prvTaskExitError+0x54>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d00a      	beq.n	80096e6 <prvTaskExitError+0x2a>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	60fb      	str	r3, [r7, #12]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <prvTaskExitError+0x28>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	60bb      	str	r3, [r7, #8]
}
 80096f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096fa:	bf00      	nop
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0fc      	beq.n	80096fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	20000008 	.word	0x20000008
	...

08009720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <pxCurrentTCBConst2>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f380 8809 	msr	PSP, r0
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	4770      	bx	lr
 800973c:	f3af 8000 	nop.w

08009740 <pxCurrentTCBConst2>:
 8009740:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009748:	4808      	ldr	r0, [pc, #32]	; (800976c <prvPortStartFirstTask+0x24>)
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	f380 8808 	msr	MSP, r0
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8814 	msr	CONTROL, r0
 800975a:	b662      	cpsie	i
 800975c:	b661      	cpsie	f
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	df00      	svc	0
 8009768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800976a:	bf00      	nop
 800976c:	e000ed08 	.word	0xe000ed08

08009770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009776:	4b46      	ldr	r3, [pc, #280]	; (8009890 <xPortStartScheduler+0x120>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a46      	ldr	r2, [pc, #280]	; (8009894 <xPortStartScheduler+0x124>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d10a      	bne.n	8009796 <xPortStartScheduler+0x26>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	613b      	str	r3, [r7, #16]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009796:	4b3e      	ldr	r3, [pc, #248]	; (8009890 <xPortStartScheduler+0x120>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a3f      	ldr	r2, [pc, #252]	; (8009898 <xPortStartScheduler+0x128>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10a      	bne.n	80097b6 <xPortStartScheduler+0x46>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097b6:	4b39      	ldr	r3, [pc, #228]	; (800989c <xPortStartScheduler+0x12c>)
 80097b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	22ff      	movs	r2, #255	; 0xff
 80097c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	4b31      	ldr	r3, [pc, #196]	; (80098a0 <xPortStartScheduler+0x130>)
 80097dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097de:	4b31      	ldr	r3, [pc, #196]	; (80098a4 <xPortStartScheduler+0x134>)
 80097e0:	2207      	movs	r2, #7
 80097e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097e4:	e009      	b.n	80097fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80097e6:	4b2f      	ldr	r3, [pc, #188]	; (80098a4 <xPortStartScheduler+0x134>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	4a2d      	ldr	r2, [pc, #180]	; (80098a4 <xPortStartScheduler+0x134>)
 80097ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b80      	cmp	r3, #128	; 0x80
 8009804:	d0ef      	beq.n	80097e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009806:	4b27      	ldr	r3, [pc, #156]	; (80098a4 <xPortStartScheduler+0x134>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f1c3 0307 	rsb	r3, r3, #7
 800980e:	2b04      	cmp	r3, #4
 8009810:	d00a      	beq.n	8009828 <xPortStartScheduler+0xb8>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60bb      	str	r3, [r7, #8]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <xPortStartScheduler+0x134>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	4a1d      	ldr	r2, [pc, #116]	; (80098a4 <xPortStartScheduler+0x134>)
 8009830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <xPortStartScheduler+0x134>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800983a:	4a1a      	ldr	r2, [pc, #104]	; (80098a4 <xPortStartScheduler+0x134>)
 800983c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009846:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <xPortStartScheduler+0x138>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <xPortStartScheduler+0x138>)
 800984c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <xPortStartScheduler+0x138>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <xPortStartScheduler+0x138>)
 8009858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800985c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800985e:	f000 f8dd 	bl	8009a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009862:	4b12      	ldr	r3, [pc, #72]	; (80098ac <xPortStartScheduler+0x13c>)
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009868:	f000 f8fc 	bl	8009a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800986c:	4b10      	ldr	r3, [pc, #64]	; (80098b0 <xPortStartScheduler+0x140>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a0f      	ldr	r2, [pc, #60]	; (80098b0 <xPortStartScheduler+0x140>)
 8009872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009878:	f7ff ff66 	bl	8009748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800987c:	f7ff f846 	bl	800890c <vTaskSwitchContext>
	prvTaskExitError();
 8009880:	f7ff ff1c 	bl	80096bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	e000ed00 	.word	0xe000ed00
 8009894:	410fc271 	.word	0x410fc271
 8009898:	410fc270 	.word	0x410fc270
 800989c:	e000e400 	.word	0xe000e400
 80098a0:	20001464 	.word	0x20001464
 80098a4:	20001468 	.word	0x20001468
 80098a8:	e000ed20 	.word	0xe000ed20
 80098ac:	20000008 	.word	0x20000008
 80098b0:	e000ef34 	.word	0xe000ef34

080098b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	607b      	str	r3, [r7, #4]
}
 80098cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <vPortEnterCritical+0x58>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	4a0d      	ldr	r2, [pc, #52]	; (800990c <vPortEnterCritical+0x58>)
 80098d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098d8:	4b0c      	ldr	r3, [pc, #48]	; (800990c <vPortEnterCritical+0x58>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d10f      	bne.n	8009900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098e0:	4b0b      	ldr	r3, [pc, #44]	; (8009910 <vPortEnterCritical+0x5c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <vPortEnterCritical+0x4c>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	603b      	str	r3, [r7, #0]
}
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <vPortEnterCritical+0x4a>
	}
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	20000008 	.word	0x20000008
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <vPortExitCritical+0x50>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <vPortExitCritical+0x24>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	607b      	str	r3, [r7, #4]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009938:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <vPortExitCritical+0x50>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3b01      	subs	r3, #1
 800993e:	4a09      	ldr	r2, [pc, #36]	; (8009964 <vPortExitCritical+0x50>)
 8009940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009942:	4b08      	ldr	r3, [pc, #32]	; (8009964 <vPortExitCritical+0x50>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d105      	bne.n	8009956 <vPortExitCritical+0x42>
 800994a:	2300      	movs	r3, #0
 800994c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	f383 8811 	msr	BASEPRI, r3
}
 8009954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20000008 	.word	0x20000008
	...

08009970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009970:	f3ef 8009 	mrs	r0, PSP
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <pxCurrentTCBConst>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	f01e 0f10 	tst.w	lr, #16
 8009980:	bf08      	it	eq
 8009982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	6010      	str	r0, [r2, #0]
 800998c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009994:	f380 8811 	msr	BASEPRI, r0
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f7fe ffb4 	bl	800890c <vTaskSwitchContext>
 80099a4:	f04f 0000 	mov.w	r0, #0
 80099a8:	f380 8811 	msr	BASEPRI, r0
 80099ac:	bc09      	pop	{r0, r3}
 80099ae:	6819      	ldr	r1, [r3, #0]
 80099b0:	6808      	ldr	r0, [r1, #0]
 80099b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b6:	f01e 0f10 	tst.w	lr, #16
 80099ba:	bf08      	it	eq
 80099bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099c0:	f380 8809 	msr	PSP, r0
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst>:
 80099d0:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	607b      	str	r3, [r7, #4]
}
 80099f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099f2:	f7fe fed1 	bl	8008798 <xTaskIncrementTick>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <xPortSysTickHandler+0x40>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	2300      	movs	r3, #0
 8009a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	f383 8811 	msr	BASEPRI, r3
}
 8009a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	e000ed04 	.word	0xe000ed04

08009a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <vPortSetupTimerInterrupt+0x34>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a26:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <vPortSetupTimerInterrupt+0x38>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <vPortSetupTimerInterrupt+0x3c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <vPortSetupTimerInterrupt+0x40>)
 8009a32:	fba2 2303 	umull	r2, r3, r2, r3
 8009a36:	099b      	lsrs	r3, r3, #6
 8009a38:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <vPortSetupTimerInterrupt+0x44>)
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a3e:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <vPortSetupTimerInterrupt+0x34>)
 8009a40:	2207      	movs	r2, #7
 8009a42:	601a      	str	r2, [r3, #0]
}
 8009a44:	bf00      	nop
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	e000e010 	.word	0xe000e010
 8009a54:	e000e018 	.word	0xe000e018
 8009a58:	20000624 	.word	0x20000624
 8009a5c:	10624dd3 	.word	0x10624dd3
 8009a60:	e000e014 	.word	0xe000e014

08009a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a74 <vPortEnableVFP+0x10>
 8009a68:	6801      	ldr	r1, [r0, #0]
 8009a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a6e:	6001      	str	r1, [r0, #0]
 8009a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a72:	bf00      	nop
 8009a74:	e000ed88 	.word	0xe000ed88

08009a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a7e:	f3ef 8305 	mrs	r3, IPSR
 8009a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b0f      	cmp	r3, #15
 8009a88:	d914      	bls.n	8009ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <vPortValidateInterruptPriority+0x70>)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a94:	4b15      	ldr	r3, [pc, #84]	; (8009aec <vPortValidateInterruptPriority+0x74>)
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	7afa      	ldrb	r2, [r7, #11]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d20a      	bcs.n	8009ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	607b      	str	r3, [r7, #4]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <vPortValidateInterruptPriority+0x78>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009abc:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <vPortValidateInterruptPriority+0x7c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d90a      	bls.n	8009ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	603b      	str	r3, [r7, #0]
}
 8009ad6:	bf00      	nop
 8009ad8:	e7fe      	b.n	8009ad8 <vPortValidateInterruptPriority+0x60>
	}
 8009ada:	bf00      	nop
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	e000e3f0 	.word	0xe000e3f0
 8009aec:	20001464 	.word	0x20001464
 8009af0:	e000ed0c 	.word	0xe000ed0c
 8009af4:	20001468 	.word	0x20001468

08009af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b04:	f7fe fd8c 	bl	8008620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b08:	4b5b      	ldr	r3, [pc, #364]	; (8009c78 <pvPortMalloc+0x180>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b10:	f000 f920 	bl	8009d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b14:	4b59      	ldr	r3, [pc, #356]	; (8009c7c <pvPortMalloc+0x184>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f040 8093 	bne.w	8009c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01d      	beq.n	8009b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b28:	2208      	movs	r2, #8
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d014      	beq.n	8009b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f023 0307 	bic.w	r3, r3, #7
 8009b40:	3308      	adds	r3, #8
 8009b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <pvPortMalloc+0x6c>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	617b      	str	r3, [r7, #20]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d06e      	beq.n	8009c48 <pvPortMalloc+0x150>
 8009b6a:	4b45      	ldr	r3, [pc, #276]	; (8009c80 <pvPortMalloc+0x188>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d869      	bhi.n	8009c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b74:	4b43      	ldr	r3, [pc, #268]	; (8009c84 <pvPortMalloc+0x18c>)
 8009b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b78:	4b42      	ldr	r3, [pc, #264]	; (8009c84 <pvPortMalloc+0x18c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b7e:	e004      	b.n	8009b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d903      	bls.n	8009b9c <pvPortMalloc+0xa4>
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f1      	bne.n	8009b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b9c:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <pvPortMalloc+0x180>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d050      	beq.n	8009c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2208      	movs	r2, #8
 8009bac:	4413      	add	r3, r2
 8009bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	1ad2      	subs	r2, r2, r3
 8009bc0:	2308      	movs	r3, #8
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d91f      	bls.n	8009c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	613b      	str	r3, [r7, #16]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c02:	69b8      	ldr	r0, [r7, #24]
 8009c04:	f000 f908 	bl	8009e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c08:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <pvPortMalloc+0x188>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <pvPortMalloc+0x188>)
 8009c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c16:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <pvPortMalloc+0x188>)
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <pvPortMalloc+0x190>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d203      	bcs.n	8009c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c22:	4b17      	ldr	r3, [pc, #92]	; (8009c80 <pvPortMalloc+0x188>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a18      	ldr	r2, [pc, #96]	; (8009c88 <pvPortMalloc+0x190>)
 8009c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <pvPortMalloc+0x184>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	431a      	orrs	r2, r3
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <pvPortMalloc+0x194>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	4a11      	ldr	r2, [pc, #68]	; (8009c8c <pvPortMalloc+0x194>)
 8009c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c48:	f7fe fcf8 	bl	800863c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f003 0307 	and.w	r3, r3, #7
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <pvPortMalloc+0x174>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	60fb      	str	r3, [r7, #12]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <pvPortMalloc+0x172>
	return pvReturn;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3728      	adds	r7, #40	; 0x28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2000202c 	.word	0x2000202c
 8009c7c:	20002040 	.word	0x20002040
 8009c80:	20002030 	.word	0x20002030
 8009c84:	20002024 	.word	0x20002024
 8009c88:	20002034 	.word	0x20002034
 8009c8c:	20002038 	.word	0x20002038

08009c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d04d      	beq.n	8009d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ca2:	2308      	movs	r3, #8
 8009ca4:	425b      	negs	r3, r3
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	4413      	add	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <vPortFree+0xb8>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4013      	ands	r3, r2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <vPortFree+0x44>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	60fb      	str	r3, [r7, #12]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00a      	beq.n	8009cf2 <vPortFree+0x62>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60bb      	str	r3, [r7, #8]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <vPortFree+0xb8>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01e      	beq.n	8009d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d11a      	bne.n	8009d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	4b0e      	ldr	r3, [pc, #56]	; (8009d48 <vPortFree+0xb8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	43db      	mvns	r3, r3
 8009d12:	401a      	ands	r2, r3
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d18:	f7fe fc82 	bl	8008620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <vPortFree+0xbc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <vPortFree+0xbc>)
 8009d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f000 f874 	bl	8009e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <vPortFree+0xc0>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3301      	adds	r3, #1
 8009d36:	4a06      	ldr	r2, [pc, #24]	; (8009d50 <vPortFree+0xc0>)
 8009d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d3a:	f7fe fc7f 	bl	800863c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d3e:	bf00      	nop
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20002040 	.word	0x20002040
 8009d4c:	20002030 	.word	0x20002030
 8009d50:	2000203c 	.word	0x2000203c

08009d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d60:	4b27      	ldr	r3, [pc, #156]	; (8009e00 <prvHeapInit+0xac>)
 8009d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f003 0307 	and.w	r3, r3, #7
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00c      	beq.n	8009d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3307      	adds	r3, #7
 8009d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0307 	bic.w	r3, r3, #7
 8009d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	4a1f      	ldr	r2, [pc, #124]	; (8009e00 <prvHeapInit+0xac>)
 8009d84:	4413      	add	r3, r2
 8009d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d8c:	4a1d      	ldr	r2, [pc, #116]	; (8009e04 <prvHeapInit+0xb0>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d92:	4b1c      	ldr	r3, [pc, #112]	; (8009e04 <prvHeapInit+0xb0>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009da0:	2208      	movs	r2, #8
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0307 	bic.w	r3, r3, #7
 8009dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4a15      	ldr	r2, [pc, #84]	; (8009e08 <prvHeapInit+0xb4>)
 8009db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009db6:	4b14      	ldr	r3, [pc, #80]	; (8009e08 <prvHeapInit+0xb4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dbe:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <prvHeapInit+0xb4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	1ad2      	subs	r2, r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <prvHeapInit+0xb4>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4a0a      	ldr	r2, [pc, #40]	; (8009e0c <prvHeapInit+0xb8>)
 8009de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <prvHeapInit+0xbc>)
 8009dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dec:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <prvHeapInit+0xc0>)
 8009dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009df2:	601a      	str	r2, [r3, #0]
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	2000146c 	.word	0x2000146c
 8009e04:	20002024 	.word	0x20002024
 8009e08:	2000202c 	.word	0x2000202c
 8009e0c:	20002034 	.word	0x20002034
 8009e10:	20002030 	.word	0x20002030
 8009e14:	20002040 	.word	0x20002040

08009e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e20:	4b28      	ldr	r3, [pc, #160]	; (8009ec4 <prvInsertBlockIntoFreeList+0xac>)
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e002      	b.n	8009e2c <prvInsertBlockIntoFreeList+0x14>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d8f7      	bhi.n	8009e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	4413      	add	r3, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d108      	bne.n	8009e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	441a      	add	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	441a      	add	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d118      	bne.n	8009ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d00d      	beq.n	8009e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	441a      	add	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e008      	b.n	8009ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e96:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	e003      	b.n	8009ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d002      	beq.n	8009eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20002024 	.word	0x20002024
 8009ec8:	2000202c 	.word	0x2000202c

08009ecc <_print>:
extern uint8_t tetromino_current[];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _print() {
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, buf, 80, 0xFFFF);
 8009ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ed4:	2250      	movs	r2, #80	; 0x50
 8009ed6:	4903      	ldr	r1, [pc, #12]	; (8009ee4 <_print+0x18>)
 8009ed8:	4803      	ldr	r0, [pc, #12]	; (8009ee8 <_print+0x1c>)
 8009eda:	f7fb fa39 	bl	8005350 <HAL_UART_Transmit>
}
 8009ede:	bf00      	nop
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	200005d0 	.word	0x200005d0
 8009ee8:	20002260 	.word	0x20002260

08009eec <hello_world>:
void clear() {
	sprintf(buf, empty);
//	_print();
}

void hello_world() {
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
	sprintf(buf, "Hello, World!");
 8009ef0:	4903      	ldr	r1, [pc, #12]	; (8009f00 <hello_world+0x14>)
 8009ef2:	4804      	ldr	r0, [pc, #16]	; (8009f04 <hello_world+0x18>)
 8009ef4:	f002 fdbe 	bl	800ca74 <siprintf>
	_print();
 8009ef8:	f7ff ffe8 	bl	8009ecc <_print>
}
 8009efc:	bf00      	nop
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	0800dcf0 	.word	0x0800dcf0
 8009f04:	200005d0 	.word	0x200005d0

08009f08 <create_window>:
	_print();
}


// create window, as well as initializes tetris game
void create_window(Window * window) {
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    // initialize window
    window->width = IMAGE_WIDTH;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2250      	movs	r2, #80	; 0x50
 8009f14:	601a      	str	r2, [r3, #0]
    window->height = IMAGE_HEIGHT;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009f1c:	605a      	str	r2, [r3, #4]

    window->frame = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8009f1e:	f240 7004 	movw	r0, #1796	; 0x704
 8009f22:	f002 fbf7 	bl	800c714 <malloc>
 8009f26:	4603      	mov	r3, r0
 8009f28:	461a      	mov	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	609a      	str	r2, [r3, #8]
    window->true  = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8009f2e:	f240 7004 	movw	r0, #1796	; 0x704
 8009f32:	f002 fbef 	bl	800c714 <malloc>
 8009f36:	4603      	mov	r3, r0
 8009f38:	461a      	mov	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60da      	str	r2, [r3, #12]

    // Fill image buffers with default value
    for(int i = 0; i < vert_size; i++) {
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
 8009f42:	e03e      	b.n	8009fc2 <create_window+0xba>
		// Point to place in continuous mem location
    	window->frame[i] = window->frameBuff + i*horiz_size;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f103 0210 	add.w	r2, r3, #16
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2164      	movs	r1, #100	; 0x64
 8009f4e:	fb01 f303 	mul.w	r3, r1, r3
 8009f52:	4618      	mov	r0, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6899      	ldr	r1, [r3, #8]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	440b      	add	r3, r1
 8009f5e:	4402      	add	r2, r0
 8009f60:	601a      	str	r2, [r3, #0]
    	window->true[i]  = window->trueBuff  + i*horiz_size;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 8009f68:	33fc      	adds	r3, #252	; 0xfc
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	2164      	movs	r1, #100	; 0x64
 8009f6e:	fb01 f202 	mul.w	r2, r1, r2
 8009f72:	4610      	mov	r0, r2
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	68d1      	ldr	r1, [r2, #12]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	0092      	lsls	r2, r2, #2
 8009f7c:	440a      	add	r2, r1
 8009f7e:	4403      	add	r3, r0
 8009f80:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < horiz_size; j++) {
 8009f82:	2300      	movs	r3, #0
 8009f84:	60bb      	str	r3, [r7, #8]
 8009f86:	e016      	b.n	8009fb6 <create_window+0xae>
			window->frame[i][j] = 0;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	4413      	add	r3, r2
 8009f98:	2200      	movs	r2, #0
 8009f9a:	701a      	strb	r2, [r3, #0]
			window->true[i][j] = 0;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68da      	ldr	r2, [r3, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	4413      	add	r3, r2
 8009fac:	2200      	movs	r2, #0
 8009fae:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < horiz_size; j++) {
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b63      	cmp	r3, #99	; 0x63
 8009fba:	dde5      	ble.n	8009f88 <create_window+0x80>
    for(int i = 0; i < vert_size; i++) {
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8009fc8:	ddbc      	ble.n	8009f44 <create_window+0x3c>
		}
    }

    // initialize tetris game board
    tetris_initialize_game(window);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 fa7c 	bl	800b4c8 <tetris_initialize_game>
}
 8009fd0:	bf00      	nop
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <game_playing>:
 * @brief Use when the tetris game is playing. (state machine -> game)
 *
 * @param window window that is being used
 * @param event user input
 */
void game_playing(Window* window, game_input_t event) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af04      	add	r7, sp, #16
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	2b05      	cmp	r3, #5
 8009fe8:	d10a      	bne.n	800a000 <game_playing+0x28>
    	window->game.state = Paused;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8009ff0:	33f4      	adds	r3, #244	; 0xf4
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	701a      	strb	r2, [r3, #0]
    	game_paused(window, INPUT_ERROR);
 8009ff6:	2106      	movs	r1, #6
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f861 	bl	800a0c0 <game_paused>
        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
        drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
        tetris_write_points(window);
    }

}
 8009ffe:	e058      	b.n	800a0b2 <game_playing+0xda>
    	tetris_drawBackground(window);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f002 f955 	bl	800c2b0 <tetris_drawBackground>
        switch (event) {
 800a006:	78fb      	ldrb	r3, [r7, #3]
 800a008:	2b06      	cmp	r3, #6
 800a00a:	d825      	bhi.n	800a058 <game_playing+0x80>
 800a00c:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <game_playing+0x3c>)
 800a00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a012:	bf00      	nop
 800a014:	0800a051 	.word	0x0800a051
 800a018:	0800a041 	.word	0x0800a041
 800a01c:	0800a049 	.word	0x0800a049
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a039 	.word	0x0800a039
 800a028:	0800a059 	.word	0x0800a059
 800a02c:	0800a059 	.word	0x0800a059
                tetris_move_left(window);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 fc1f 	bl	800b874 <tetris_move_left>
            break;
 800a036:	e010      	b.n	800a05a <game_playing+0x82>
                tetris_move_right(window);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 fc3c 	bl	800b8b6 <tetris_move_right>
            break;
 800a03e:	e00c      	b.n	800a05a <game_playing+0x82>
                tetris_rotate_C_tetromino(window);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f001 fb93 	bl	800b76c <tetris_rotate_C_tetromino>
            break;
 800a046:	e008      	b.n	800a05a <game_playing+0x82>
                tetris_rotate_CC_tetromino(window);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f001 fbd1 	bl	800b7f0 <tetris_rotate_CC_tetromino>
            break;
 800a04e:	e004      	b.n	800a05a <game_playing+0x82>
                tetris_move_down(window);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 fc50 	bl	800b8f6 <tetris_move_down>
            break;
 800a056:	e000      	b.n	800a05a <game_playing+0x82>
            break;
 800a058:	bf00      	nop
        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a060:	3304      	adds	r3, #4
 800a062:	9303      	str	r3, [sp, #12]
 800a064:	230d      	movs	r3, #13
 800a066:	9302      	str	r3, [sp, #8]
 800a068:	2302      	movs	r3, #2
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	2318      	movs	r3, #24
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	230a      	movs	r3, #10
 800a072:	2202      	movs	r2, #2
 800a074:	2101      	movs	r1, #1
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f002 f83a 	bl	800c0f0 <drawRect>
        drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800a082:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	1c59      	adds	r1, r3, #1
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	1c9a      	adds	r2, r3, #2
 800a094:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <game_playing+0xe4>)
 800a096:	9303      	str	r3, [sp, #12]
 800a098:	230d      	movs	r3, #13
 800a09a:	9302      	str	r3, [sp, #8]
 800a09c:	2302      	movs	r3, #2
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	2304      	movs	r3, #4
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f002 f822 	bl	800c0f0 <drawRect>
        tetris_write_points(window);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 f9e5 	bl	800b47c <tetris_write_points>
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000628 	.word	0x20000628

0800a0c0 <game_paused>:
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 * @param event user input
 */
void game_paused(Window* window, game_input_t event) {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af04      	add	r7, sp, #16
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	2b05      	cmp	r3, #5
 800a0d0:	d10a      	bne.n	800a0e8 <game_paused+0x28>
    	window->game.state = Playing;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a0d8:	33f4      	adds	r3, #244	; 0xf4
 800a0da:	2201      	movs	r2, #1
 800a0dc:	701a      	strb	r2, [r3, #0]
    	game_playing(window, INPUT_ERROR);
 800a0de:	2106      	movs	r1, #6
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7ff ff79 	bl	8009fd8 <game_playing>
        // draw game board
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 50);
        print_str(window, "Press Space", 2, 10);
        print_str(window, "To Continue", 2, 70);
    }
}
 800a0e6:	e01c      	b.n	800a122 <game_paused+0x62>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 50);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2132      	movs	r1, #50	; 0x32
 800a0f2:	9103      	str	r1, [sp, #12]
 800a0f4:	210a      	movs	r1, #10
 800a0f6:	9102      	str	r1, [sp, #8]
 800a0f8:	2104      	movs	r1, #4
 800a0fa:	9101      	str	r1, [sp, #4]
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	4613      	mov	r3, r2
 800a100:	2200      	movs	r2, #0
 800a102:	2100      	movs	r1, #0
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f002 f883 	bl	800c210 <drawRect_color>
        print_str(window, "Press Space", 2, 10);
 800a10a:	230a      	movs	r3, #10
 800a10c:	2202      	movs	r2, #2
 800a10e:	4907      	ldr	r1, [pc, #28]	; (800a12c <game_paused+0x6c>)
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f893 	bl	800a23c <print_str>
        print_str(window, "To Continue", 2, 70);
 800a116:	2346      	movs	r3, #70	; 0x46
 800a118:	2202      	movs	r2, #2
 800a11a:	4905      	ldr	r1, [pc, #20]	; (800a130 <game_paused+0x70>)
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f88d 	bl	800a23c <print_str>
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	0800dd7c 	.word	0x0800dd7c
 800a130:	0800dd88 	.word	0x0800dd88

0800a134 <game_start>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_start(Window* window, game_input_t event) {
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af04      	add	r7, sp, #16
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	2b05      	cmp	r3, #5
 800a144:	d10a      	bne.n	800a15c <game_start+0x28>
    	window->game.state = Playing;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a14c:	33f4      	adds	r3, #244	; 0xf4
 800a14e:	2201      	movs	r2, #1
 800a150:	701a      	strb	r2, [r3, #0]
    	game_playing(window, INPUT_ERROR);
 800a152:	2106      	movs	r1, #6
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff ff3f 	bl	8009fd8 <game_playing>
        print_str(window, "Welcome To", 2, 10);
        print_str(window, "Tetris!", 20, 110);
        print_str(window, "Press Space", 2, 210);
        print_str(window, "To Continue", 2, 270);
    }
}
 800a15a:	e029      	b.n	800a1b0 <game_start+0x7c>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 80);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	2150      	movs	r1, #80	; 0x50
 800a166:	9103      	str	r1, [sp, #12]
 800a168:	210a      	movs	r1, #10
 800a16a:	9102      	str	r1, [sp, #8]
 800a16c:	2104      	movs	r1, #4
 800a16e:	9101      	str	r1, [sp, #4]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	4613      	mov	r3, r2
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f002 f849 	bl	800c210 <drawRect_color>
        print_str(window, "Welcome To", 2, 10);
 800a17e:	230a      	movs	r3, #10
 800a180:	2202      	movs	r2, #2
 800a182:	490d      	ldr	r1, [pc, #52]	; (800a1b8 <game_start+0x84>)
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f859 	bl	800a23c <print_str>
        print_str(window, "Tetris!", 20, 110);
 800a18a:	236e      	movs	r3, #110	; 0x6e
 800a18c:	2214      	movs	r2, #20
 800a18e:	490b      	ldr	r1, [pc, #44]	; (800a1bc <game_start+0x88>)
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f853 	bl	800a23c <print_str>
        print_str(window, "Press Space", 2, 210);
 800a196:	23d2      	movs	r3, #210	; 0xd2
 800a198:	2202      	movs	r2, #2
 800a19a:	4909      	ldr	r1, [pc, #36]	; (800a1c0 <game_start+0x8c>)
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f84d 	bl	800a23c <print_str>
        print_str(window, "To Continue", 2, 270);
 800a1a2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	4906      	ldr	r1, [pc, #24]	; (800a1c4 <game_start+0x90>)
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f846 	bl	800a23c <print_str>
}
 800a1b0:	bf00      	nop
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	0800dd94 	.word	0x0800dd94
 800a1bc:	0800dda0 	.word	0x0800dda0
 800a1c0:	0800dd7c 	.word	0x0800dd7c
 800a1c4:	0800dd88 	.word	0x0800dd88

0800a1c8 <game_ended>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_ended(Window* window, game_input_t event) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70fb      	strb	r3, [r7, #3]
	if (event == TOGGLEPAUSE) {
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	d10a      	bne.n	800a1f0 <game_ended+0x28>
		window->game.state = Start;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a1e0:	33f4      	adds	r3, #244	; 0xf4
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	701a      	strb	r2, [r3, #0]
		game_start(window, INPUT_ERROR);
 800a1e6:	2106      	movs	r1, #6
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff ffa3 	bl	800a134 <game_start>
		tetris_drawEndScreen(window);
	}



}
 800a1ee:	e002      	b.n	800a1f6 <game_ended+0x2e>
		tetris_drawEndScreen(window);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 fc21 	bl	800ba38 <tetris_drawEndScreen>
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <swap_buffer>:
/**
 * @brief Swap the image buffers.
 *
 * @param window window with the image buffers.
 */
void swap_buffer(Window * window) {
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
	// Swap pointers
	uint8_t** tmp = window->true;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	60fb      	str	r3, [r7, #12]
	window->true = window->frame;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60da      	str	r2, [r3, #12]
	window->frame = tmp;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	609a      	str	r2, [r3, #8]
//	clear_buffer();
	// Change DMA memory address
	hdac1.DMA_Handle1->Instance->CMAR = (uint32_t) window->true[0];
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <swap_buffer+0x38>)
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	60da      	str	r2, [r3, #12]
}
 800a22a:	bf00      	nop
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	20002198 	.word	0x20002198

0800a23c <print_str>:

void print_str(Window * window, char* buffer, int x, int y) {
 800a23c:	b480      	push	{r7}
 800a23e:	b08b      	sub	sp, #44	; 0x2c
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]

	x += 3; // Avoid back porch
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3303      	adds	r3, #3
 800a24e:	607b      	str	r3, [r7, #4]
	y += 70;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	3346      	adds	r3, #70	; 0x46
 800a254:	603b      	str	r3, [r7, #0]

	char cur_char = buffer[0];
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(cur_char >= 97) cur_char -= 32;
 800a25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a262:	2b60      	cmp	r3, #96	; 0x60
 800a264:	d904      	bls.n	800a270 <print_str+0x34>
 800a266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a26a:	3b20      	subs	r3, #32
 800a26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	623b      	str	r3, [r7, #32]
	while(cur_char != '\0') {
 800a274:	e073      	b.n	800a35e <print_str+0x122>
		char* bitmap = font_map[cur_char - 32]; // 32 = ' '
 800a276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a27a:	f1a3 0220 	sub.w	r2, r3, #32
 800a27e:	4613      	mov	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	009a      	lsls	r2, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	4a3a      	ldr	r2, [pc, #232]	; (800a374 <print_str+0x138>)
 800a28a:	4413      	add	r3, r2
 800a28c:	617b      	str	r3, [r7, #20]
		// y-value precursor
		for(int h = 0; h < 70; h++) {
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
 800a292:	e04c      	b.n	800a32e <print_str+0xf2>
			for (int w = 0; w < 7; w++) {
 800a294:	2300      	movs	r3, #0
 800a296:	61bb      	str	r3, [r7, #24]
 800a298:	e043      	b.n	800a322 <print_str+0xe6>
				// Pre- and Post- empty space on x & y
				if (h < 10 || w == 0 || h >= 60 || w == 6) {
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	2b09      	cmp	r3, #9
 800a29e:	dd08      	ble.n	800a2b2 <print_str+0x76>
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d005      	beq.n	800a2b2 <print_str+0x76>
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	2b3b      	cmp	r3, #59	; 0x3b
 800a2aa:	dc02      	bgt.n	800a2b2 <print_str+0x76>
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	2b06      	cmp	r3, #6
 800a2b0:	d10e      	bne.n	800a2d0 <print_str+0x94>
					window->frame[y+h][x+w] = 80;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	689a      	ldr	r2, [r3, #8]
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	440b      	add	r3, r1
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	440a      	add	r2, r1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	2250      	movs	r2, #80	; 0x50
 800a2cc:	701a      	strb	r2, [r3, #0]
					continue;
 800a2ce:	e025      	b.n	800a31c <print_str+0xe0>
				}
				int array_index = ((h-10)/10) * 5 + (w-1); // h/10 = floor division, to stretch
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	3b0a      	subs	r3, #10
 800a2d4:	4a28      	ldr	r2, [pc, #160]	; (800a378 <print_str+0x13c>)
 800a2d6:	fb82 1203 	smull	r1, r2, r2, r3
 800a2da:	1092      	asrs	r2, r2, #2
 800a2dc:	17db      	asrs	r3, r3, #31
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	441a      	add	r2, r3
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	4413      	add	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]
				window->frame[y+h][x+w] = bitmap[array_index] ? 190 : 80;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <print_str+0xc2>
 800a2fa:	20be      	movs	r0, #190	; 0xbe
 800a2fc:	e000      	b.n	800a300 <print_str+0xc4>
 800a2fe:	2050      	movs	r0, #80	; 0x50
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	440b      	add	r3, r1
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	440a      	add	r2, r1
 800a316:	4413      	add	r3, r2
 800a318:	4602      	mov	r2, r0
 800a31a:	701a      	strb	r2, [r3, #0]
			for (int w = 0; w < 7; w++) {
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	3301      	adds	r3, #1
 800a320:	61bb      	str	r3, [r7, #24]
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b06      	cmp	r3, #6
 800a326:	ddb8      	ble.n	800a29a <print_str+0x5e>
		for(int h = 0; h < 70; h++) {
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	3301      	adds	r3, #1
 800a32c:	61fb      	str	r3, [r7, #28]
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	2b45      	cmp	r3, #69	; 0x45
 800a332:	ddaf      	ble.n	800a294 <print_str+0x58>
			}
		}
		x += 7; // 1 pre, 5 char, 1 post
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	3307      	adds	r3, #7
 800a338:	607b      	str	r3, [r7, #4]
		i++;
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	3301      	adds	r3, #1
 800a33e:	623b      	str	r3, [r7, #32]
		cur_char = buffer[i];
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	4413      	add	r3, r2
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//'a' -> 'A' for example
		if(cur_char >= 97) cur_char -= 32;
 800a34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a350:	2b60      	cmp	r3, #96	; 0x60
 800a352:	d904      	bls.n	800a35e <print_str+0x122>
 800a354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a358:	3b20      	subs	r3, #32
 800a35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(cur_char != '\0') {
 800a35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a362:	2b00      	cmp	r3, #0
 800a364:	d187      	bne.n	800a276 <print_str+0x3a>
	}
}
 800a366:	bf00      	nop
 800a368:	bf00      	nop
 800a36a:	372c      	adds	r7, #44	; 0x2c
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	2000000c 	.word	0x2000000c
 800a378:	66666667 	.word	0x66666667

0800a37c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 800a382:	2300      	movs	r3, #0
 800a384:	607b      	str	r3, [r7, #4]
 800a386:	e007      	b.n	800a398 <main+0x1c>
	    input_buffer[i] = INPUT_ERROR;
 800a388:	4a30      	ldr	r2, [pc, #192]	; (800a44c <main+0xd0>)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	2206      	movs	r2, #6
 800a390:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3301      	adds	r3, #1
 800a396:	607b      	str	r3, [r7, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	ddf4      	ble.n	800a388 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a39e:	f7f6 fddf 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a3a2:	f000 f86f 	bl	800a484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a3a6:	f000 fb43 	bl	800aa30 <MX_GPIO_Init>
  MX_DMA_Init();
 800a3aa:	f000 fb0f 	bl	800a9cc <MX_DMA_Init>
  MX_DAC1_Init();
 800a3ae:	f000 f8bb 	bl	800a528 <MX_DAC1_Init>

  MX_TIM4_Init();
 800a3b2:	f000 fa1d 	bl	800a7f0 <MX_TIM4_Init>
  MX_TIM2_Init();
 800a3b6:	f000 f94f 	bl	800a658 <MX_TIM2_Init>
  MX_TIM1_Init();
 800a3ba:	f000 f8f5 	bl	800a5a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800a3be:	f000 f9c7 	bl	800a750 <MX_TIM3_Init>
  MX_TIM8_Init();
 800a3c2:	f000 fa63 	bl	800a88c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800a3c6:	f000 fab5 	bl	800a934 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  create_window(&window);
 800a3ca:	4821      	ldr	r0, [pc, #132]	; (800a450 <main+0xd4>)
 800a3cc:	f7ff fd9c 	bl	8009f08 <create_window>

  // Fill the frame buffer
  //init_buffer(window.imgBuff1, window.imgBuff2);
  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 800a3d0:	4820      	ldr	r0, [pc, #128]	; (800a454 <main+0xd8>)
 800a3d2:	f7f9 fcc5 	bl	8003d60 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800a3d6:	2064      	movs	r0, #100	; 0x64
 800a3d8:	f7f6 fdfa 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 800a3dc:	210c      	movs	r1, #12
 800a3de:	481e      	ldr	r0, [pc, #120]	; (800a458 <main+0xdc>)
 800a3e0:	f7f9 fd90 	bl	8003f04 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 800a3e4:	2064      	movs	r0, #100	; 0x64
 800a3e6:	f7f6 fdf3 	bl	8000fd0 <HAL_Delay>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) window.true[0], horiz_size*vert_size, DAC_ALIGN_8B_R);
 800a3ea:	4b19      	ldr	r3, [pc, #100]	; (800a450 <main+0xd4>)
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	2308      	movs	r3, #8
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	f64a 7364 	movw	r3, #44900	; 0xaf64
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	4818      	ldr	r0, [pc, #96]	; (800a45c <main+0xe0>)
 800a3fc:	f7f6 ff10 	bl	8001220 <HAL_DAC_Start_DMA>
  HAL_Delay(100);
 800a400:	2064      	movs	r0, #100	; 0x64
 800a402:	f7f6 fde5 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 800a406:	4816      	ldr	r0, [pc, #88]	; (800a460 <main+0xe4>)
 800a408:	f7f9 fc42 	bl	8003c90 <HAL_TIM_Base_Start>
  HAL_Delay(100);
 800a40c:	2064      	movs	r0, #100	; 0x64
 800a40e:	f7f6 fddf 	bl	8000fd0 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800a412:	2201      	movs	r2, #1
 800a414:	4913      	ldr	r1, [pc, #76]	; (800a464 <main+0xe8>)
 800a416:	4814      	ldr	r0, [pc, #80]	; (800a468 <main+0xec>)
 800a418:	f7fb f832 	bl	8005480 <HAL_UART_Receive_IT>
  HAL_Delay(100);
 800a41c:	2064      	movs	r0, #100	; 0x64
 800a41e:	f7f6 fdd7 	bl	8000fd0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800a422:	f7fc ffd5 	bl	80073d0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of frameTask */
  frameTaskHandle = osThreadNew(updateGameLogic, NULL, &frameTask_attributes);
 800a426:	4a11      	ldr	r2, [pc, #68]	; (800a46c <main+0xf0>)
 800a428:	2100      	movs	r1, #0
 800a42a:	4811      	ldr	r0, [pc, #68]	; (800a470 <main+0xf4>)
 800a42c:	f7fd f81a 	bl	8007464 <osThreadNew>
 800a430:	4603      	mov	r3, r0
 800a432:	4a10      	ldr	r2, [pc, #64]	; (800a474 <main+0xf8>)
 800a434:	6013      	str	r3, [r2, #0]

  /* creation of soundTask */
  soundTaskHandle = osThreadNew(soundController, NULL, &soundTask_attributes);
 800a436:	4a10      	ldr	r2, [pc, #64]	; (800a478 <main+0xfc>)
 800a438:	2100      	movs	r1, #0
 800a43a:	4810      	ldr	r0, [pc, #64]	; (800a47c <main+0x100>)
 800a43c:	f7fd f812 	bl	8007464 <osThreadNew>
 800a440:	4603      	mov	r3, r0
 800a442:	4a0f      	ldr	r2, [pc, #60]	; (800a480 <main+0x104>)
 800a444:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800a446:	f7fc ffe7 	bl	8007418 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800a44a:	e7fe      	b.n	800a44a <main+0xce>
 800a44c:	20002258 	.word	0x20002258
 800a450:	2000238c 	.word	0x2000238c
 800a454:	200022f4 	.word	0x200022f4
 800a458:	20002340 	.word	0x20002340
 800a45c:	20002198 	.word	0x20002198
 800a460:	2000214c 	.word	0x2000214c
 800a464:	20000620 	.word	0x20000620
 800a468:	20002260 	.word	0x20002260
 800a46c:	0800dddc 	.word	0x0800dddc
 800a470:	0800ac91 	.word	0x0800ac91
 800a474:	2001aa84 	.word	0x2001aa84
 800a478:	0800de00 	.word	0x0800de00
 800a47c:	0800ad11 	.word	0x0800ad11
 800a480:	200022f0 	.word	0x200022f0

0800a484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b096      	sub	sp, #88	; 0x58
 800a488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a48a:	f107 0314 	add.w	r3, r7, #20
 800a48e:	2244      	movs	r2, #68	; 0x44
 800a490:	2100      	movs	r1, #0
 800a492:	4618      	mov	r0, r3
 800a494:	f002 f954 	bl	800c740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a498:	463b      	mov	r3, r7
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	605a      	str	r2, [r3, #4]
 800a4a0:	609a      	str	r2, [r3, #8]
 800a4a2:	60da      	str	r2, [r3, #12]
 800a4a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a4a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a4aa:	f7f7 fed3 	bl	8002254 <HAL_PWREx_ControlVoltageScaling>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800a4b4:	f000 fc76 	bl	800ada4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a4b8:	2310      	movs	r3, #16
 800a4ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a4c4:	2360      	movs	r3, #96	; 0x60
 800a4c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800a4d4:	2328      	movs	r3, #40	; 0x28
 800a4d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a4d8:	2302      	movs	r3, #2
 800a4da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a4dc:	2302      	movs	r3, #2
 800a4de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a4e4:	f107 0314 	add.w	r3, r7, #20
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f7 ff57 	bl	800239c <HAL_RCC_OscConfig>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800a4f4:	f000 fc56 	bl	800ada4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a4f8:	230f      	movs	r3, #15
 800a4fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a500:	2300      	movs	r3, #0
 800a502:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a504:	2300      	movs	r3, #0
 800a506:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a508:	2300      	movs	r3, #0
 800a50a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800a50c:	463b      	mov	r3, r7
 800a50e:	2103      	movs	r1, #3
 800a510:	4618      	mov	r0, r3
 800a512:	f7f8 fb69 	bl	8002be8 <HAL_RCC_ClockConfig>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800a51c:	f000 fc42 	bl	800ada4 <Error_Handler>
  }
}
 800a520:	bf00      	nop
 800a522:	3758      	adds	r7, #88	; 0x58
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a52e:	463b      	mov	r3, r7
 800a530:	2228      	movs	r2, #40	; 0x28
 800a532:	2100      	movs	r1, #0
 800a534:	4618      	mov	r0, r3
 800a536:	f002 f903 	bl	800c740 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a53a:	4b19      	ldr	r3, [pc, #100]	; (800a5a0 <MX_DAC1_Init+0x78>)
 800a53c:	4a19      	ldr	r2, [pc, #100]	; (800a5a4 <MX_DAC1_Init+0x7c>)
 800a53e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a540:	4817      	ldr	r0, [pc, #92]	; (800a5a0 <MX_DAC1_Init+0x78>)
 800a542:	f7f6 fe4b 	bl	80011dc <HAL_DAC_Init>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a54c:	f000 fc2a 	bl	800ada4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a550:	2300      	movs	r3, #0
 800a552:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800a554:	230e      	movs	r3, #14
 800a556:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800a558:	2300      	movs	r3, #0
 800a55a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800a560:	2300      	movs	r3, #0
 800a562:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a564:	2300      	movs	r3, #0
 800a566:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a568:	463b      	mov	r3, r7
 800a56a:	2200      	movs	r2, #0
 800a56c:	4619      	mov	r1, r3
 800a56e:	480c      	ldr	r0, [pc, #48]	; (800a5a0 <MX_DAC1_Init+0x78>)
 800a570:	f7f6 ffa4 	bl	80014bc <HAL_DAC_ConfigChannel>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800a57a:	f000 fc13 	bl	800ada4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800a57e:	231e      	movs	r3, #30
 800a580:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800a582:	463b      	mov	r3, r7
 800a584:	2210      	movs	r2, #16
 800a586:	4619      	mov	r1, r3
 800a588:	4805      	ldr	r0, [pc, #20]	; (800a5a0 <MX_DAC1_Init+0x78>)
 800a58a:	f7f6 ff97 	bl	80014bc <HAL_DAC_ConfigChannel>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 800a594:	f000 fc06 	bl	800ada4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 800a598:	bf00      	nop
 800a59a:	3728      	adds	r7, #40	; 0x28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20002198 	.word	0x20002198
 800a5a4:	40007400 	.word	0x40007400

0800a5a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a5ae:	f107 030c 	add.w	r3, r7, #12
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	605a      	str	r2, [r3, #4]
 800a5b8:	609a      	str	r2, [r3, #8]
 800a5ba:	60da      	str	r2, [r3, #12]
 800a5bc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5be:	463b      	mov	r3, r7
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	605a      	str	r2, [r3, #4]
 800a5c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a5c8:	4b21      	ldr	r3, [pc, #132]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a5ca:	4a22      	ldr	r2, [pc, #136]	; (800a654 <MX_TIM1_Init+0xac>)
 800a5cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a5ce:	4b20      	ldr	r3, [pc, #128]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5d4:	4b1e      	ldr	r3, [pc, #120]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800a5da:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a5dc:	2263      	movs	r2, #99	; 0x63
 800a5de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a5e0:	4b1b      	ldr	r3, [pc, #108]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5ec:	4b18      	ldr	r3, [pc, #96]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a5f2:	4817      	ldr	r0, [pc, #92]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a5f4:	f7f9 faf4 	bl	8003be0 <HAL_TIM_Base_Init>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a5fe:	f000 fbd1 	bl	800ada4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800a602:	2306      	movs	r3, #6
 800a604:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800a606:	2330      	movs	r3, #48	; 0x30
 800a608:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800a60a:	f107 030c 	add.w	r3, r7, #12
 800a60e:	4619      	mov	r1, r3
 800a610:	480f      	ldr	r0, [pc, #60]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a612:	f7fa f87a 	bl	800470a <HAL_TIM_SlaveConfigSynchro>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800a61c:	f000 fbc2 	bl	800ada4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a620:	2320      	movs	r3, #32
 800a622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800a624:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a62e:	463b      	mov	r3, r7
 800a630:	4619      	mov	r1, r3
 800a632:	4807      	ldr	r0, [pc, #28]	; (800a650 <MX_TIM1_Init+0xa8>)
 800a634:	f7fa fd96 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800a63e:	f000 fbb1 	bl	800ada4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800a642:	4b04      	ldr	r3, [pc, #16]	; (800a654 <MX_TIM1_Init+0xac>)
 800a644:	2237      	movs	r2, #55	; 0x37
 800a646:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM1_Init 2 */

}
 800a648:	bf00      	nop
 800a64a:	3720      	adds	r7, #32
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	200022f4 	.word	0x200022f4
 800a654:	40012c00 	.word	0x40012c00

0800a658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b090      	sub	sp, #64	; 0x40
 800a65c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a65e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	605a      	str	r2, [r3, #4]
 800a668:	609a      	str	r2, [r3, #8]
 800a66a:	60da      	str	r2, [r3, #12]
 800a66c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a66e:	f107 0320 	add.w	r3, r7, #32
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]
 800a676:	605a      	str	r2, [r3, #4]
 800a678:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a67a:	1d3b      	adds	r3, r7, #4
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	609a      	str	r2, [r3, #8]
 800a684:	60da      	str	r2, [r3, #12]
 800a686:	611a      	str	r2, [r3, #16]
 800a688:	615a      	str	r2, [r3, #20]
 800a68a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a68c:	4b2f      	ldr	r3, [pc, #188]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a68e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a692:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a694:	4b2d      	ldr	r3, [pc, #180]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a696:	2200      	movs	r2, #0
 800a698:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a69a:	4b2c      	ldr	r3, [pc, #176]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800a6a0:	4b2a      	ldr	r3, [pc, #168]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a6a2:	2263      	movs	r2, #99	; 0x63
 800a6a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a6a6:	4b29      	ldr	r3, [pc, #164]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a6ac:	4b27      	ldr	r3, [pc, #156]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a6b2:	4826      	ldr	r0, [pc, #152]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a6b4:	f7f9 fa94 	bl	8003be0 <HAL_TIM_Base_Init>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800a6be:	f000 fb71 	bl	800ada4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a6c2:	4822      	ldr	r0, [pc, #136]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a6c4:	f7f9 fbbc 	bl	8003e40 <HAL_TIM_PWM_Init>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800a6ce:	f000 fb69 	bl	800ada4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800a6d2:	2306      	movs	r3, #6
 800a6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800a6d6:	2330      	movs	r3, #48	; 0x30
 800a6d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800a6da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6de:	4619      	mov	r1, r3
 800a6e0:	481a      	ldr	r0, [pc, #104]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a6e2:	f7fa f812 	bl	800470a <HAL_TIM_SlaveConfigSynchro>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800a6ec:	f000 fb5a 	bl	800ada4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a6f8:	f107 0320 	add.w	r3, r7, #32
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4813      	ldr	r0, [pc, #76]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a700:	f7fa fd30 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800a70a:	f000 fb4b 	bl	800ada4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a70e:	2360      	movs	r3, #96	; 0x60
 800a710:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 800a712:	235a      	movs	r3, #90	; 0x5a
 800a714:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a71a:	2300      	movs	r3, #0
 800a71c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a71e:	1d3b      	adds	r3, r7, #4
 800a720:	220c      	movs	r2, #12
 800a722:	4619      	mov	r1, r3
 800a724:	4809      	ldr	r0, [pc, #36]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a726:	f7f9 fe13 	bl	8004350 <HAL_TIM_PWM_ConfigChannel>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800a730:	f000 fb38 	bl	800ada4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800a734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a738:	2237      	movs	r2, #55	; 0x37
 800a73a:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a73c:	4803      	ldr	r0, [pc, #12]	; (800a74c <MX_TIM2_Init+0xf4>)
 800a73e:	f000 fc7f 	bl	800b040 <HAL_TIM_MspPostInit>

}
 800a742:	bf00      	nop
 800a744:	3740      	adds	r7, #64	; 0x40
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20002340 	.word	0x20002340

0800a750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a756:	f107 0310 	add.w	r3, r7, #16
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	605a      	str	r2, [r3, #4]
 800a760:	609a      	str	r2, [r3, #8]
 800a762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a764:	1d3b      	adds	r3, r7, #4
 800a766:	2200      	movs	r2, #0
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	605a      	str	r2, [r3, #4]
 800a76c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a76e:	4b1e      	ldr	r3, [pc, #120]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a770:	4a1e      	ldr	r2, [pc, #120]	; (800a7ec <MX_TIM3_Init+0x9c>)
 800a772:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800a774:	4b1c      	ldr	r3, [pc, #112]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a776:	f242 720f 	movw	r2, #9999	; 0x270f
 800a77a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a77c:	4b1a      	ldr	r3, [pc, #104]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a77e:	2200      	movs	r2, #0
 800a780:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25400;
 800a782:	4b19      	ldr	r3, [pc, #100]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a784:	f246 3238 	movw	r2, #25400	; 0x6338
 800a788:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a78a:	4b17      	ldr	r3, [pc, #92]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a790:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a792:	2200      	movs	r2, #0
 800a794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a796:	4814      	ldr	r0, [pc, #80]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a798:	f7f9 fa22 	bl	8003be0 <HAL_TIM_Base_Init>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800a7a2:	f000 faff 	bl	800ada4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a7ac:	f107 0310 	add.w	r3, r7, #16
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	480d      	ldr	r0, [pc, #52]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a7b4:	f7f9 fee0 	bl	8004578 <HAL_TIM_ConfigClockSource>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800a7be:	f000 faf1 	bl	800ada4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a7ca:	1d3b      	adds	r3, r7, #4
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	4806      	ldr	r0, [pc, #24]	; (800a7e8 <MX_TIM3_Init+0x98>)
 800a7d0:	f7fa fcc8 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800a7da:	f000 fae3 	bl	800ada4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a7de:	bf00      	nop
 800a7e0:	3720      	adds	r7, #32
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	2000220c 	.word	0x2000220c
 800a7ec:	40000400 	.word	0x40000400

0800a7f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a7f6:	f107 0310 	add.w	r3, r7, #16
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	605a      	str	r2, [r3, #4]
 800a800:	609a      	str	r2, [r3, #8]
 800a802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a804:	1d3b      	adds	r3, r7, #4
 800a806:	2200      	movs	r2, #0
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	605a      	str	r2, [r3, #4]
 800a80c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a80e:	4b1d      	ldr	r3, [pc, #116]	; (800a884 <MX_TIM4_Init+0x94>)
 800a810:	4a1d      	ldr	r2, [pc, #116]	; (800a888 <MX_TIM4_Init+0x98>)
 800a812:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 800a814:	4b1b      	ldr	r3, [pc, #108]	; (800a884 <MX_TIM4_Init+0x94>)
 800a816:	2207      	movs	r2, #7
 800a818:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a81a:	4b1a      	ldr	r3, [pc, #104]	; (800a884 <MX_TIM4_Init+0x94>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 800a820:	4b18      	ldr	r3, [pc, #96]	; (800a884 <MX_TIM4_Init+0x94>)
 800a822:	2202      	movs	r2, #2
 800a824:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a826:	4b17      	ldr	r3, [pc, #92]	; (800a884 <MX_TIM4_Init+0x94>)
 800a828:	2200      	movs	r2, #0
 800a82a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a82c:	4b15      	ldr	r3, [pc, #84]	; (800a884 <MX_TIM4_Init+0x94>)
 800a82e:	2200      	movs	r2, #0
 800a830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a832:	4814      	ldr	r0, [pc, #80]	; (800a884 <MX_TIM4_Init+0x94>)
 800a834:	f7f9 f9d4 	bl	8003be0 <HAL_TIM_Base_Init>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800a83e:	f000 fab1 	bl	800ada4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a848:	f107 0310 	add.w	r3, r7, #16
 800a84c:	4619      	mov	r1, r3
 800a84e:	480d      	ldr	r0, [pc, #52]	; (800a884 <MX_TIM4_Init+0x94>)
 800a850:	f7f9 fe92 	bl	8004578 <HAL_TIM_ConfigClockSource>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800a85a:	f000 faa3 	bl	800ada4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a85e:	2320      	movs	r3, #32
 800a860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a862:	2300      	movs	r3, #0
 800a864:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a866:	1d3b      	adds	r3, r7, #4
 800a868:	4619      	mov	r1, r3
 800a86a:	4806      	ldr	r0, [pc, #24]	; (800a884 <MX_TIM4_Init+0x94>)
 800a86c:	f7fa fc7a 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800a876:	f000 fa95 	bl	800ada4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a87a:	bf00      	nop
 800a87c:	3720      	adds	r7, #32
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	2000214c 	.word	0x2000214c
 800a888:	40000800 	.word	0x40000800

0800a88c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a892:	f107 0310 	add.w	r3, r7, #16
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	605a      	str	r2, [r3, #4]
 800a89c:	609a      	str	r2, [r3, #8]
 800a89e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a8a0:	1d3b      	adds	r3, r7, #4
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	605a      	str	r2, [r3, #4]
 800a8a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a8aa:	4b20      	ldr	r3, [pc, #128]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8ac:	4a20      	ldr	r2, [pc, #128]	; (800a930 <MX_TIM8_Init+0xa4>)
 800a8ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a8b0:	4b1e      	ldr	r3, [pc, #120]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8b6:	4b1d      	ldr	r3, [pc, #116]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 800a8bc:	4b1b      	ldr	r3, [pc, #108]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8be:	f242 7210 	movw	r2, #10000	; 0x2710
 800a8c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a8c4:	4b19      	ldr	r3, [pc, #100]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a8ca:	4b18      	ldr	r3, [pc, #96]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a8d0:	4b16      	ldr	r3, [pc, #88]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a8d6:	4815      	ldr	r0, [pc, #84]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8d8:	f7f9 f982 	bl	8003be0 <HAL_TIM_Base_Init>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800a8e2:	f000 fa5f 	bl	800ada4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a8ec:	f107 0310 	add.w	r3, r7, #16
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	480e      	ldr	r0, [pc, #56]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a8f4:	f7f9 fe40 	bl	8004578 <HAL_TIM_ConfigClockSource>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800a8fe:	f000 fa51 	bl	800ada4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a902:	2320      	movs	r3, #32
 800a904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800a906:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a90a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a910:	1d3b      	adds	r3, r7, #4
 800a912:	4619      	mov	r1, r3
 800a914:	4805      	ldr	r0, [pc, #20]	; (800a92c <MX_TIM8_Init+0xa0>)
 800a916:	f7fa fc25 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800a920:	f000 fa40 	bl	800ada4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a924:	bf00      	nop
 800a926:	3720      	adds	r7, #32
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	200020a0 	.word	0x200020a0
 800a930:	40013400 	.word	0x40013400

0800a934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a938:	4b22      	ldr	r3, [pc, #136]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a93a:	4a23      	ldr	r2, [pc, #140]	; (800a9c8 <MX_USART1_UART_Init+0x94>)
 800a93c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a93e:	4b21      	ldr	r3, [pc, #132]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a946:	4b1f      	ldr	r3, [pc, #124]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a948:	2200      	movs	r2, #0
 800a94a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a94c:	4b1d      	ldr	r3, [pc, #116]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a94e:	2200      	movs	r2, #0
 800a950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a952:	4b1c      	ldr	r3, [pc, #112]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a954:	2200      	movs	r2, #0
 800a956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a958:	4b1a      	ldr	r3, [pc, #104]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a95a:	220c      	movs	r2, #12
 800a95c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a95e:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a960:	2200      	movs	r2, #0
 800a962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a964:	4b17      	ldr	r3, [pc, #92]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a966:	2200      	movs	r2, #0
 800a968:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a96a:	4b16      	ldr	r3, [pc, #88]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a970:	4b14      	ldr	r3, [pc, #80]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a972:	2200      	movs	r2, #0
 800a974:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a976:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a978:	2200      	movs	r2, #0
 800a97a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a97c:	4811      	ldr	r0, [pc, #68]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a97e:	f7fa fc97 	bl	80052b0 <HAL_UART_Init>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800a988:	f000 fa0c 	bl	800ada4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a98c:	2100      	movs	r1, #0
 800a98e:	480d      	ldr	r0, [pc, #52]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a990:	f7fc fc0f 	bl	80071b2 <HAL_UARTEx_SetTxFifoThreshold>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800a99a:	f000 fa03 	bl	800ada4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4808      	ldr	r0, [pc, #32]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a9a2:	f7fc fc44 	bl	800722e <HAL_UARTEx_SetRxFifoThreshold>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800a9ac:	f000 f9fa 	bl	800ada4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a9b0:	4804      	ldr	r0, [pc, #16]	; (800a9c4 <MX_USART1_UART_Init+0x90>)
 800a9b2:	f7fc fbc5 	bl	8007140 <HAL_UARTEx_DisableFifoMode>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800a9bc:	f000 f9f2 	bl	800ada4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a9c0:	bf00      	nop
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	20002260 	.word	0x20002260
 800a9c8:	40013800 	.word	0x40013800

0800a9cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a9d2:	4b16      	ldr	r3, [pc, #88]	; (800aa2c <MX_DMA_Init+0x60>)
 800a9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d6:	4a15      	ldr	r2, [pc, #84]	; (800aa2c <MX_DMA_Init+0x60>)
 800a9d8:	f043 0304 	orr.w	r3, r3, #4
 800a9dc:	6493      	str	r3, [r2, #72]	; 0x48
 800a9de:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <MX_DMA_Init+0x60>)
 800a9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9e2:	f003 0304 	and.w	r3, r3, #4
 800a9e6:	607b      	str	r3, [r7, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a9ea:	4b10      	ldr	r3, [pc, #64]	; (800aa2c <MX_DMA_Init+0x60>)
 800a9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ee:	4a0f      	ldr	r2, [pc, #60]	; (800aa2c <MX_DMA_Init+0x60>)
 800a9f0:	f043 0301 	orr.w	r3, r3, #1
 800a9f4:	6493      	str	r3, [r2, #72]	; 0x48
 800a9f6:	4b0d      	ldr	r3, [pc, #52]	; (800aa2c <MX_DMA_Init+0x60>)
 800a9f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800aa02:	2200      	movs	r2, #0
 800aa04:	2105      	movs	r1, #5
 800aa06:	200b      	movs	r0, #11
 800aa08:	f7f6 fbbe 	bl	8001188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800aa0c:	200b      	movs	r0, #11
 800aa0e:	f7f6 fbd7 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800aa12:	2200      	movs	r2, #0
 800aa14:	2105      	movs	r1, #5
 800aa16:	200c      	movs	r0, #12
 800aa18:	f7f6 fbb6 	bl	8001188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800aa1c:	200c      	movs	r0, #12
 800aa1e:	f7f6 fbcf 	bl	80011c0 <HAL_NVIC_EnableIRQ>

}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	40021000 	.word	0x40021000

0800aa30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa36:	f107 030c 	add.w	r3, r7, #12
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	605a      	str	r2, [r3, #4]
 800aa40:	609a      	str	r2, [r3, #8]
 800aa42:	60da      	str	r2, [r3, #12]
 800aa44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa46:	4b24      	ldr	r3, [pc, #144]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa4a:	4a23      	ldr	r2, [pc, #140]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa4c:	f043 0304 	orr.w	r3, r3, #4
 800aa50:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa52:	4b21      	ldr	r3, [pc, #132]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	60bb      	str	r3, [r7, #8]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa5e:	4b1e      	ldr	r3, [pc, #120]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa62:	4a1d      	ldr	r2, [pc, #116]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa64:	f043 0301 	orr.w	r3, r3, #1
 800aa68:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa6a:	4b1b      	ldr	r3, [pc, #108]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	607b      	str	r3, [r7, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa76:	4b18      	ldr	r3, [pc, #96]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa7a:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa7c:	f043 0302 	orr.w	r3, r3, #2
 800aa80:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa82:	4b15      	ldr	r3, [pc, #84]	; (800aad8 <MX_GPIO_Init+0xa8>)
 800aa84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2104      	movs	r1, #4
 800aa92:	4812      	ldr	r0, [pc, #72]	; (800aadc <MX_GPIO_Init+0xac>)
 800aa94:	f7f7 fba6 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800aa98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800aa9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800aaa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800aaa8:	f107 030c 	add.w	r3, r7, #12
 800aaac:	4619      	mov	r1, r3
 800aaae:	480c      	ldr	r0, [pc, #48]	; (800aae0 <MX_GPIO_Init+0xb0>)
 800aab0:	f7f7 fa06 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 800aab4:	2304      	movs	r3, #4
 800aab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aab8:	2301      	movs	r3, #1
 800aaba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aabc:	2300      	movs	r3, #0
 800aabe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aac0:	2300      	movs	r3, #0
 800aac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 800aac4:	f107 030c 	add.w	r3, r7, #12
 800aac8:	4619      	mov	r1, r3
 800aaca:	4804      	ldr	r0, [pc, #16]	; (800aadc <MX_GPIO_Init+0xac>)
 800aacc:	f7f7 f9f8 	bl	8001ec0 <HAL_GPIO_Init>

}
 800aad0:	bf00      	nop
 800aad2:	3720      	adds	r7, #32
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	40021000 	.word	0x40021000
 800aadc:	48000400 	.word	0x48000400
 800aae0:	48000800 	.word	0x48000800

0800aae4 <push_input_buffer>:

/* USER CODE BEGIN 4 */
void push_input_buffer(game_input_t input) {
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	71fb      	strb	r3, [r7, #7]
	// Can't lock the queue, don't need one since this is called by an interrupt
	input_buffer[buffer_push] = input;
 800aaee:	4b0d      	ldr	r3, [pc, #52]	; (800ab24 <push_input_buffer+0x40>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	490d      	ldr	r1, [pc, #52]	; (800ab28 <push_input_buffer+0x44>)
 800aaf4:	79fa      	ldrb	r2, [r7, #7]
 800aaf6:	54ca      	strb	r2, [r1, r3]
	buffer_push = (buffer_push + 1) % INPUT_BUFFER_SIZE;
 800aaf8:	4b0a      	ldr	r3, [pc, #40]	; (800ab24 <push_input_buffer+0x40>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	1c59      	adds	r1, r3, #1
 800aafe:	4b0b      	ldr	r3, [pc, #44]	; (800ab2c <push_input_buffer+0x48>)
 800ab00:	fb83 2301 	smull	r2, r3, r3, r1
 800ab04:	105a      	asrs	r2, r3, #1
 800ab06:	17cb      	asrs	r3, r1, #31
 800ab08:	1ad2      	subs	r2, r2, r3
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	1aca      	subs	r2, r1, r3
 800ab12:	4b04      	ldr	r3, [pc, #16]	; (800ab24 <push_input_buffer+0x40>)
 800ab14:	601a      	str	r2, [r3, #0]
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20002048 	.word	0x20002048
 800ab28:	20002258 	.word	0x20002258
 800ab2c:	66666667 	.word	0x66666667

0800ab30 <pop_input_buffer>:

game_input_t pop_input_buffer() {
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
	if(buffer_pop == buffer_push) {
 800ab36:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <pop_input_buffer+0x4c>)
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <pop_input_buffer+0x50>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d101      	bne.n	800ab46 <pop_input_buffer+0x16>
		return INPUT_ERROR;
 800ab42:	2306      	movs	r3, #6
 800ab44:	e014      	b.n	800ab70 <pop_input_buffer+0x40>
	}
	game_input_t ret = input_buffer[buffer_pop];
 800ab46:	4b0d      	ldr	r3, [pc, #52]	; (800ab7c <pop_input_buffer+0x4c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a0e      	ldr	r2, [pc, #56]	; (800ab84 <pop_input_buffer+0x54>)
 800ab4c:	5cd3      	ldrb	r3, [r2, r3]
 800ab4e:	71fb      	strb	r3, [r7, #7]
	buffer_pop = (buffer_pop + 1) % INPUT_BUFFER_SIZE;
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <pop_input_buffer+0x4c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	1c59      	adds	r1, r3, #1
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <pop_input_buffer+0x58>)
 800ab58:	fb83 2301 	smull	r2, r3, r3, r1
 800ab5c:	105a      	asrs	r2, r3, #1
 800ab5e:	17cb      	asrs	r3, r1, #31
 800ab60:	1ad2      	subs	r2, r2, r3
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	1aca      	subs	r2, r1, r3
 800ab6a:	4b04      	ldr	r3, [pc, #16]	; (800ab7c <pop_input_buffer+0x4c>)
 800ab6c:	601a      	str	r2, [r3, #0]
	return ret;
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	20002044 	.word	0x20002044
 800ab80:	20002048 	.word	0x20002048
 800ab84:	20002258 	.word	0x20002258
 800ab88:	66666667 	.word	0x66666667

0800ab8c <process_user_input>:



game_input_t process_user_input(Window * window) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
    game_input_t c = pop_input_buffer();
 800ab94:	f7ff ffcc 	bl	800ab30 <pop_input_buffer>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]
    while(c == INPUT_ERROR) c = pop_input_buffer();
 800ab9c:	e003      	b.n	800aba6 <process_user_input+0x1a>
 800ab9e:	f7ff ffc7 	bl	800ab30 <pop_input_buffer>
 800aba2:	4603      	mov	r3, r0
 800aba4:	73fb      	strb	r3, [r7, #15]
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	2b06      	cmp	r3, #6
 800abaa:	d0f8      	beq.n	800ab9e <process_user_input+0x12>
    return c;
 800abac:	7bfb      	ldrb	r3, [r7, #15]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
	char c = ((huart)->Instance)->RDR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	73fb      	strb	r3, [r7, #15]
	switch (c) {
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	2b73      	cmp	r3, #115	; 0x73
 800abce:	dc51      	bgt.n	800ac74 <HAL_UART_RxCpltCallback+0xbc>
 800abd0:	2b61      	cmp	r3, #97	; 0x61
 800abd2:	da08      	bge.n	800abe6 <HAL_UART_RxCpltCallback+0x2e>
 800abd4:	2b3b      	cmp	r3, #59	; 0x3b
 800abd6:	d042      	beq.n	800ac5e <HAL_UART_RxCpltCallback+0xa6>
 800abd8:	2b3b      	cmp	r3, #59	; 0x3b
 800abda:	dc4b      	bgt.n	800ac74 <HAL_UART_RxCpltCallback+0xbc>
 800abdc:	2b20      	cmp	r3, #32
 800abde:	d046      	beq.n	800ac6e <HAL_UART_RxCpltCallback+0xb6>
 800abe0:	2b35      	cmp	r3, #53	; 0x35
 800abe2:	d02d      	beq.n	800ac40 <HAL_UART_RxCpltCallback+0x88>
		push_input_buffer(DOWN);
		break;
	case 32: // space
		push_input_buffer(TOGGLEPAUSE);
	default:
		break;
 800abe4:	e046      	b.n	800ac74 <HAL_UART_RxCpltCallback+0xbc>
 800abe6:	3b61      	subs	r3, #97	; 0x61
 800abe8:	2b12      	cmp	r3, #18
 800abea:	d843      	bhi.n	800ac74 <HAL_UART_RxCpltCallback+0xbc>
 800abec:	a201      	add	r2, pc, #4	; (adr r2, 800abf4 <HAL_UART_RxCpltCallback+0x3c>)
 800abee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf2:	bf00      	nop
 800abf4:	0800ac47 	.word	0x0800ac47
 800abf8:	0800ac75 	.word	0x0800ac75
 800abfc:	0800ac75 	.word	0x0800ac75
 800ac00:	0800ac4f 	.word	0x0800ac4f
 800ac04:	0800ac75 	.word	0x0800ac75
 800ac08:	0800ac75 	.word	0x0800ac75
 800ac0c:	0800ac75 	.word	0x0800ac75
 800ac10:	0800ac75 	.word	0x0800ac75
 800ac14:	0800ac75 	.word	0x0800ac75
 800ac18:	0800ac75 	.word	0x0800ac75
 800ac1c:	0800ac75 	.word	0x0800ac75
 800ac20:	0800ac57 	.word	0x0800ac57
 800ac24:	0800ac75 	.word	0x0800ac75
 800ac28:	0800ac75 	.word	0x0800ac75
 800ac2c:	0800ac75 	.word	0x0800ac75
 800ac30:	0800ac75 	.word	0x0800ac75
 800ac34:	0800ac75 	.word	0x0800ac75
 800ac38:	0800ac75 	.word	0x0800ac75
 800ac3c:	0800ac67 	.word	0x0800ac67
		hello_world();
 800ac40:	f7ff f954 	bl	8009eec <hello_world>
		break;
 800ac44:	e017      	b.n	800ac76 <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(LEFT);
 800ac46:	2003      	movs	r0, #3
 800ac48:	f7ff ff4c 	bl	800aae4 <push_input_buffer>
		break;
 800ac4c:	e013      	b.n	800ac76 <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(RIGHT);
 800ac4e:	2004      	movs	r0, #4
 800ac50:	f7ff ff48 	bl	800aae4 <push_input_buffer>
		break;
 800ac54:	e00f      	b.n	800ac76 <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(CCW);
 800ac56:	2002      	movs	r0, #2
 800ac58:	f7ff ff44 	bl	800aae4 <push_input_buffer>
		break;
 800ac5c:	e00b      	b.n	800ac76 <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(CW);
 800ac5e:	2001      	movs	r0, #1
 800ac60:	f7ff ff40 	bl	800aae4 <push_input_buffer>
		break;
 800ac64:	e007      	b.n	800ac76 <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(DOWN);
 800ac66:	2000      	movs	r0, #0
 800ac68:	f7ff ff3c 	bl	800aae4 <push_input_buffer>
		break;
 800ac6c:	e003      	b.n	800ac76 <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(TOGGLEPAUSE);
 800ac6e:	2005      	movs	r0, #5
 800ac70:	f7ff ff38 	bl	800aae4 <push_input_buffer>
		break;
 800ac74:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800ac76:	2201      	movs	r2, #1
 800ac78:	4903      	ldr	r1, [pc, #12]	; (800ac88 <HAL_UART_RxCpltCallback+0xd0>)
 800ac7a:	4804      	ldr	r0, [pc, #16]	; (800ac8c <HAL_UART_RxCpltCallback+0xd4>)
 800ac7c:	f7fa fc00 	bl	8005480 <HAL_UART_Receive_IT>
}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20000620 	.word	0x20000620
 800ac8c:	20002260 	.word	0x20002260

0800ac90 <updateGameLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_updateGameLogic */
void updateGameLogic(void *argument)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Start the Game
	game_start(&window, INPUT_ERROR);
 800ac98:	2106      	movs	r1, #6
 800ac9a:	481c      	ldr	r0, [pc, #112]	; (800ad0c <updateGameLogic+0x7c>)
 800ac9c:	f7ff fa4a 	bl	800a134 <game_start>
	swap_buffer(&window);
 800aca0:	481a      	ldr	r0, [pc, #104]	; (800ad0c <updateGameLogic+0x7c>)
 800aca2:	f7ff faad 	bl	800a200 <swap_buffer>

	/* Infinite loop */
	for(;;) {
		//osDelay(1);
	    // process button presses (update game state)
		game_input_t event = process_user_input(&window);
 800aca6:	4819      	ldr	r0, [pc, #100]	; (800ad0c <updateGameLogic+0x7c>)
 800aca8:	f7ff ff70 	bl	800ab8c <process_user_input>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]

		switch (window.game.state) {
 800acb0:	4b16      	ldr	r3, [pc, #88]	; (800ad0c <updateGameLogic+0x7c>)
 800acb2:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800acb6:	33f4      	adds	r3, #244	; 0xf4
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b03      	cmp	r3, #3
 800acbc:	d822      	bhi.n	800ad04 <updateGameLogic+0x74>
 800acbe:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <updateGameLogic+0x34>)
 800acc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc4:	0800acd5 	.word	0x0800acd5
 800acc8:	0800ace1 	.word	0x0800ace1
 800accc:	0800aced 	.word	0x0800aced
 800acd0:	0800acf9 	.word	0x0800acf9
		  case Start:
			  game_start(&window, event);
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4619      	mov	r1, r3
 800acd8:	480c      	ldr	r0, [pc, #48]	; (800ad0c <updateGameLogic+0x7c>)
 800acda:	f7ff fa2b 	bl	800a134 <game_start>
		  break;
 800acde:	e011      	b.n	800ad04 <updateGameLogic+0x74>
		  case Playing:
			  // update the game state, and draw to frame buffer
			  game_playing(&window, event);
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	4619      	mov	r1, r3
 800ace4:	4809      	ldr	r0, [pc, #36]	; (800ad0c <updateGameLogic+0x7c>)
 800ace6:	f7ff f977 	bl	8009fd8 <game_playing>
		  break;
 800acea:	e00b      	b.n	800ad04 <updateGameLogic+0x74>
		  case Paused:
			  game_paused(&window, event);
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	4619      	mov	r1, r3
 800acf0:	4806      	ldr	r0, [pc, #24]	; (800ad0c <updateGameLogic+0x7c>)
 800acf2:	f7ff f9e5 	bl	800a0c0 <game_paused>
		  break;
 800acf6:	e005      	b.n	800ad04 <updateGameLogic+0x74>
		  case Ended:
			  game_ended(&window, event);
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	4619      	mov	r1, r3
 800acfc:	4803      	ldr	r0, [pc, #12]	; (800ad0c <updateGameLogic+0x7c>)
 800acfe:	f7ff fa63 	bl	800a1c8 <game_ended>
		  break;
 800ad02:	bf00      	nop
		}
		swap_buffer(&window);
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <updateGameLogic+0x7c>)
 800ad06:	f7ff fa7b 	bl	800a200 <swap_buffer>
	for(;;) {
 800ad0a:	e7cc      	b.n	800aca6 <updateGameLogic+0x16>
 800ad0c:	2000238c 	.word	0x2000238c

0800ad10 <soundController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_soundController */
void soundController(void *argument)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN soundController */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800ad18:	2001      	movs	r0, #1
 800ad1a:	f7fc fc35 	bl	8007588 <osDelay>
 800ad1e:	e7fb      	b.n	800ad18 <soundController+0x8>

0800ad20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a18      	ldr	r2, [pc, #96]	; (800ad90 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d102      	bne.n	800ad38 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800ad32:	f7f6 f92d 	bl	8000f90 <HAL_IncTick>
	} else {
		HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
	}
  }
  /* USER CODE END Callback 1 */
}
 800ad36:	e026      	b.n	800ad86 <HAL_TIM_PeriodElapsedCallback+0x66>
  else if (htim->Instance == TIM1) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a15      	ldr	r2, [pc, #84]	; (800ad94 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d121      	bne.n	800ad86 <HAL_TIM_PeriodElapsedCallback+0x66>
	vert_count = (vert_count + 1) % 449;
 800ad42:	4b15      	ldr	r3, [pc, #84]	; (800ad98 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	1c59      	adds	r1, r3, #1
 800ad48:	4b14      	ldr	r3, [pc, #80]	; (800ad9c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800ad4a:	fb83 2301 	smull	r2, r3, r3, r1
 800ad4e:	440b      	add	r3, r1
 800ad50:	121a      	asrs	r2, r3, #8
 800ad52:	17cb      	asrs	r3, r1, #31
 800ad54:	1ad2      	subs	r2, r2, r3
 800ad56:	4613      	mov	r3, r2
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	019b      	lsls	r3, r3, #6
 800ad5e:	4413      	add	r3, r2
 800ad60:	1aca      	subs	r2, r1, r3
 800ad62:	4b0d      	ldr	r3, [pc, #52]	; (800ad98 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800ad64:	601a      	str	r2, [r3, #0]
	if(vert_count >= 447) {
 800ad66:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 800ad6e:	dd05      	ble.n	800ad7c <HAL_TIM_PeriodElapsedCallback+0x5c>
		HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800ad70:	2200      	movs	r2, #0
 800ad72:	2104      	movs	r1, #4
 800ad74:	480a      	ldr	r0, [pc, #40]	; (800ada0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800ad76:	f7f7 fa35 	bl	80021e4 <HAL_GPIO_WritePin>
}
 800ad7a:	e004      	b.n	800ad86 <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	2104      	movs	r1, #4
 800ad80:	4807      	ldr	r0, [pc, #28]	; (800ada0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800ad82:	f7f7 fa2f 	bl	80021e4 <HAL_GPIO_WritePin>
}
 800ad86:	bf00      	nop
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	40001000 	.word	0x40001000
 800ad94:	40012c00 	.word	0x40012c00
 800ad98:	2000204c 	.word	0x2000204c
 800ad9c:	91f5bcb9 	.word	0x91f5bcb9
 800ada0:	48000400 	.word	0x48000400

0800ada4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ada4:	b480      	push	{r7}
 800ada6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ada8:	b672      	cpsid	i
}
 800adaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800adac:	e7fe      	b.n	800adac <Error_Handler+0x8>
	...

0800adb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800adb6:	4b11      	ldr	r3, [pc, #68]	; (800adfc <HAL_MspInit+0x4c>)
 800adb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adba:	4a10      	ldr	r2, [pc, #64]	; (800adfc <HAL_MspInit+0x4c>)
 800adbc:	f043 0301 	orr.w	r3, r3, #1
 800adc0:	6613      	str	r3, [r2, #96]	; 0x60
 800adc2:	4b0e      	ldr	r3, [pc, #56]	; (800adfc <HAL_MspInit+0x4c>)
 800adc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	607b      	str	r3, [r7, #4]
 800adcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800adce:	4b0b      	ldr	r3, [pc, #44]	; (800adfc <HAL_MspInit+0x4c>)
 800add0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add2:	4a0a      	ldr	r2, [pc, #40]	; (800adfc <HAL_MspInit+0x4c>)
 800add4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800add8:	6593      	str	r3, [r2, #88]	; 0x58
 800adda:	4b08      	ldr	r3, [pc, #32]	; (800adfc <HAL_MspInit+0x4c>)
 800addc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ade6:	2200      	movs	r2, #0
 800ade8:	210f      	movs	r1, #15
 800adea:	f06f 0001 	mvn.w	r0, #1
 800adee:	f7f6 f9cb 	bl	8001188 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800adf2:	bf00      	nop
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	40021000 	.word	0x40021000

0800ae00 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b08a      	sub	sp, #40	; 0x28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae08:	f107 0314 	add.w	r3, r7, #20
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	605a      	str	r2, [r3, #4]
 800ae12:	609a      	str	r2, [r3, #8]
 800ae14:	60da      	str	r2, [r3, #12]
 800ae16:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a44      	ldr	r2, [pc, #272]	; (800af30 <HAL_DAC_MspInit+0x130>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	f040 8081 	bne.w	800af26 <HAL_DAC_MspInit+0x126>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800ae24:	4b43      	ldr	r3, [pc, #268]	; (800af34 <HAL_DAC_MspInit+0x134>)
 800ae26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae28:	4a42      	ldr	r2, [pc, #264]	; (800af34 <HAL_DAC_MspInit+0x134>)
 800ae2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae2e:	6593      	str	r3, [r2, #88]	; 0x58
 800ae30:	4b40      	ldr	r3, [pc, #256]	; (800af34 <HAL_DAC_MspInit+0x134>)
 800ae32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae38:	613b      	str	r3, [r7, #16]
 800ae3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae3c:	4b3d      	ldr	r3, [pc, #244]	; (800af34 <HAL_DAC_MspInit+0x134>)
 800ae3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae40:	4a3c      	ldr	r2, [pc, #240]	; (800af34 <HAL_DAC_MspInit+0x134>)
 800ae42:	f043 0301 	orr.w	r3, r3, #1
 800ae46:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae48:	4b3a      	ldr	r3, [pc, #232]	; (800af34 <HAL_DAC_MspInit+0x134>)
 800ae4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800ae54:	2330      	movs	r3, #48	; 0x30
 800ae56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae60:	f107 0314 	add.w	r3, r7, #20
 800ae64:	4619      	mov	r1, r3
 800ae66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae6a:	f7f7 f829 	bl	8001ec0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800ae6e:	4b32      	ldr	r3, [pc, #200]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800ae70:	4a32      	ldr	r2, [pc, #200]	; (800af3c <HAL_DAC_MspInit+0x13c>)
 800ae72:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800ae74:	4b30      	ldr	r3, [pc, #192]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800ae76:	2206      	movs	r2, #6
 800ae78:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae7a:	4b2f      	ldr	r3, [pc, #188]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800ae7c:	2210      	movs	r2, #16
 800ae7e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae80:	4b2d      	ldr	r3, [pc, #180]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ae86:	4b2c      	ldr	r3, [pc, #176]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800ae88:	2280      	movs	r2, #128	; 0x80
 800ae8a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae8c:	4b2a      	ldr	r3, [pc, #168]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae92:	4b29      	ldr	r3, [pc, #164]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800ae98:	4b27      	ldr	r3, [pc, #156]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800ae9e:	4b26      	ldr	r3, [pc, #152]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800aea4:	4824      	ldr	r0, [pc, #144]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800aea6:	f7f6 fcdd 	bl	8001864 <HAL_DMA_Init>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 800aeb0:	f7ff ff78 	bl	800ada4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a20      	ldr	r2, [pc, #128]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800aeb8:	609a      	str	r2, [r3, #8]
 800aeba:	4a1f      	ldr	r2, [pc, #124]	; (800af38 <HAL_DAC_MspInit+0x138>)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 800aec0:	4b1f      	ldr	r3, [pc, #124]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aec2:	4a20      	ldr	r2, [pc, #128]	; (800af44 <HAL_DAC_MspInit+0x144>)
 800aec4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 800aec6:	4b1e      	ldr	r3, [pc, #120]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aec8:	2207      	movs	r2, #7
 800aeca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aecc:	4b1c      	ldr	r3, [pc, #112]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aece:	2210      	movs	r2, #16
 800aed0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800aed2:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800aed8:	4b19      	ldr	r3, [pc, #100]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aeda:	2280      	movs	r2, #128	; 0x80
 800aedc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800aede:	4b18      	ldr	r3, [pc, #96]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aee4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aee6:	4b16      	ldr	r3, [pc, #88]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aeec:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800aeee:	4b14      	ldr	r3, [pc, #80]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aef0:	2220      	movs	r2, #32
 800aef2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800aef4:	4b12      	ldr	r3, [pc, #72]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800aefa:	4811      	ldr	r0, [pc, #68]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800aefc:	f7f6 fcb2 	bl	8001864 <HAL_DMA_Init>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <HAL_DAC_MspInit+0x10a>
    {
      Error_Handler();
 800af06:	f7ff ff4d 	bl	800ada4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a0c      	ldr	r2, [pc, #48]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800af0e:	60da      	str	r2, [r3, #12]
 800af10:	4a0b      	ldr	r2, [pc, #44]	; (800af40 <HAL_DAC_MspInit+0x140>)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800af16:	2200      	movs	r2, #0
 800af18:	210f      	movs	r1, #15
 800af1a:	2036      	movs	r0, #54	; 0x36
 800af1c:	f7f6 f934 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800af20:	2036      	movs	r0, #54	; 0x36
 800af22:	f7f6 f94d 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800af26:	bf00      	nop
 800af28:	3728      	adds	r7, #40	; 0x28
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	40007400 	.word	0x40007400
 800af34:	40021000 	.word	0x40021000
 800af38:	200021ac 	.word	0x200021ac
 800af3c:	40020008 	.word	0x40020008
 800af40:	200020ec 	.word	0x200020ec
 800af44:	4002001c 	.word	0x4002001c

0800af48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a35      	ldr	r2, [pc, #212]	; (800b02c <HAL_TIM_Base_MspInit+0xe4>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d114      	bne.n	800af84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800af5a:	4b35      	ldr	r3, [pc, #212]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800af5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af5e:	4a34      	ldr	r2, [pc, #208]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800af60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af64:	6613      	str	r3, [r2, #96]	; 0x60
 800af66:	4b32      	ldr	r3, [pc, #200]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800af68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af6e:	61fb      	str	r3, [r7, #28]
 800af70:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800af72:	2200      	movs	r2, #0
 800af74:	2105      	movs	r1, #5
 800af76:	2019      	movs	r0, #25
 800af78:	f7f6 f906 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800af7c:	2019      	movs	r0, #25
 800af7e:	f7f6 f91f 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800af82:	e04e      	b.n	800b022 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af8c:	d10c      	bne.n	800afa8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800af8e:	4b28      	ldr	r3, [pc, #160]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800af90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af92:	4a27      	ldr	r2, [pc, #156]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800af94:	f043 0301 	orr.w	r3, r3, #1
 800af98:	6593      	str	r3, [r2, #88]	; 0x58
 800af9a:	4b25      	ldr	r3, [pc, #148]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800af9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	61bb      	str	r3, [r7, #24]
 800afa4:	69bb      	ldr	r3, [r7, #24]
}
 800afa6:	e03c      	b.n	800b022 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a21      	ldr	r2, [pc, #132]	; (800b034 <HAL_TIM_Base_MspInit+0xec>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d114      	bne.n	800afdc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800afb2:	4b1f      	ldr	r3, [pc, #124]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800afb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb6:	4a1e      	ldr	r2, [pc, #120]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800afb8:	f043 0302 	orr.w	r3, r3, #2
 800afbc:	6593      	str	r3, [r2, #88]	; 0x58
 800afbe:	4b1c      	ldr	r3, [pc, #112]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800afc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	617b      	str	r3, [r7, #20]
 800afc8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800afca:	2200      	movs	r2, #0
 800afcc:	2105      	movs	r1, #5
 800afce:	201d      	movs	r0, #29
 800afd0:	f7f6 f8da 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800afd4:	201d      	movs	r0, #29
 800afd6:	f7f6 f8f3 	bl	80011c0 <HAL_NVIC_EnableIRQ>
}
 800afda:	e022      	b.n	800b022 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a15      	ldr	r2, [pc, #84]	; (800b038 <HAL_TIM_Base_MspInit+0xf0>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d10c      	bne.n	800b000 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800afe6:	4b12      	ldr	r3, [pc, #72]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800afe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afea:	4a11      	ldr	r2, [pc, #68]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800afec:	f043 0304 	orr.w	r3, r3, #4
 800aff0:	6593      	str	r3, [r2, #88]	; 0x58
 800aff2:	4b0f      	ldr	r3, [pc, #60]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800aff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff6:	f003 0304 	and.w	r3, r3, #4
 800affa:	613b      	str	r3, [r7, #16]
 800affc:	693b      	ldr	r3, [r7, #16]
}
 800affe:	e010      	b.n	800b022 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM8)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a0d      	ldr	r2, [pc, #52]	; (800b03c <HAL_TIM_Base_MspInit+0xf4>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d10b      	bne.n	800b022 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b00a:	4b09      	ldr	r3, [pc, #36]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800b00c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00e:	4a08      	ldr	r2, [pc, #32]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800b010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b014:	6613      	str	r3, [r2, #96]	; 0x60
 800b016:	4b06      	ldr	r3, [pc, #24]	; (800b030 <HAL_TIM_Base_MspInit+0xe8>)
 800b018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b01a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
}
 800b022:	bf00      	nop
 800b024:	3720      	adds	r7, #32
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	40012c00 	.word	0x40012c00
 800b030:	40021000 	.word	0x40021000
 800b034:	40000400 	.word	0x40000400
 800b038:	40000800 	.word	0x40000800
 800b03c:	40013400 	.word	0x40013400

0800b040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b048:	f107 030c 	add.w	r3, r7, #12
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	605a      	str	r2, [r3, #4]
 800b052:	609a      	str	r2, [r3, #8]
 800b054:	60da      	str	r2, [r3, #12]
 800b056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b060:	d11c      	bne.n	800b09c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b062:	4b10      	ldr	r3, [pc, #64]	; (800b0a4 <HAL_TIM_MspPostInit+0x64>)
 800b064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b066:	4a0f      	ldr	r2, [pc, #60]	; (800b0a4 <HAL_TIM_MspPostInit+0x64>)
 800b068:	f043 0301 	orr.w	r3, r3, #1
 800b06c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b06e:	4b0d      	ldr	r3, [pc, #52]	; (800b0a4 <HAL_TIM_MspPostInit+0x64>)
 800b070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	60bb      	str	r3, [r7, #8]
 800b078:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 800b07a:	2308      	movs	r3, #8
 800b07c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b07e:	2302      	movs	r3, #2
 800b080:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b082:	2300      	movs	r3, #0
 800b084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b086:	2300      	movs	r3, #0
 800b088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b08a:	2301      	movs	r3, #1
 800b08c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 800b08e:	f107 030c 	add.w	r3, r7, #12
 800b092:	4619      	mov	r1, r3
 800b094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b098:	f7f6 ff12 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b09c:	bf00      	nop
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	40021000 	.word	0x40021000

0800b0a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b0ae      	sub	sp, #184	; 0xb8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	605a      	str	r2, [r3, #4]
 800b0ba:	609a      	str	r2, [r3, #8]
 800b0bc:	60da      	str	r2, [r3, #12]
 800b0be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b0c0:	f107 0310 	add.w	r3, r7, #16
 800b0c4:	2294      	movs	r2, #148	; 0x94
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fb39 	bl	800c740 <memset>
  if(huart->Instance==USART1)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a25      	ldr	r2, [pc, #148]	; (800b168 <HAL_UART_MspInit+0xc0>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d142      	bne.n	800b15e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b0e0:	f107 0310 	add.w	r3, r7, #16
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7f8 f863 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b0f0:	f7ff fe58 	bl	800ada4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b0f4:	4b1d      	ldr	r3, [pc, #116]	; (800b16c <HAL_UART_MspInit+0xc4>)
 800b0f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0f8:	4a1c      	ldr	r2, [pc, #112]	; (800b16c <HAL_UART_MspInit+0xc4>)
 800b0fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0fe:	6613      	str	r3, [r2, #96]	; 0x60
 800b100:	4b1a      	ldr	r3, [pc, #104]	; (800b16c <HAL_UART_MspInit+0xc4>)
 800b102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b10c:	4b17      	ldr	r3, [pc, #92]	; (800b16c <HAL_UART_MspInit+0xc4>)
 800b10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b110:	4a16      	ldr	r2, [pc, #88]	; (800b16c <HAL_UART_MspInit+0xc4>)
 800b112:	f043 0302 	orr.w	r3, r3, #2
 800b116:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b118:	4b14      	ldr	r3, [pc, #80]	; (800b16c <HAL_UART_MspInit+0xc4>)
 800b11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	60bb      	str	r3, [r7, #8]
 800b122:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b124:	23c0      	movs	r3, #192	; 0xc0
 800b126:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b12a:	2302      	movs	r3, #2
 800b12c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b130:	2300      	movs	r3, #0
 800b132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b136:	2303      	movs	r3, #3
 800b138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b13c:	2307      	movs	r3, #7
 800b13e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b142:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b146:	4619      	mov	r1, r3
 800b148:	4809      	ldr	r0, [pc, #36]	; (800b170 <HAL_UART_MspInit+0xc8>)
 800b14a:	f7f6 feb9 	bl	8001ec0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800b14e:	2200      	movs	r2, #0
 800b150:	2101      	movs	r1, #1
 800b152:	2025      	movs	r0, #37	; 0x25
 800b154:	f7f6 f818 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b158:	2025      	movs	r0, #37	; 0x25
 800b15a:	f7f6 f831 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b15e:	bf00      	nop
 800b160:	37b8      	adds	r7, #184	; 0xb8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	40013800 	.word	0x40013800
 800b16c:	40021000 	.word	0x40021000
 800b170:	48000400 	.word	0x48000400

0800b174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08c      	sub	sp, #48	; 0x30
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b184:	2200      	movs	r2, #0
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	2036      	movs	r0, #54	; 0x36
 800b18a:	f7f5 fffd 	bl	8001188 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b18e:	2036      	movs	r0, #54	; 0x36
 800b190:	f7f6 f816 	bl	80011c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b194:	4b1e      	ldr	r3, [pc, #120]	; (800b210 <HAL_InitTick+0x9c>)
 800b196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b198:	4a1d      	ldr	r2, [pc, #116]	; (800b210 <HAL_InitTick+0x9c>)
 800b19a:	f043 0310 	orr.w	r3, r3, #16
 800b19e:	6593      	str	r3, [r2, #88]	; 0x58
 800b1a0:	4b1b      	ldr	r3, [pc, #108]	; (800b210 <HAL_InitTick+0x9c>)
 800b1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a4:	f003 0310 	and.w	r3, r3, #16
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b1ac:	f107 0210 	add.w	r2, r7, #16
 800b1b0:	f107 0314 	add.w	r3, r7, #20
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7f7 ff06 	bl	8002fc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b1bc:	f7f7 fed8 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 800b1c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c4:	4a13      	ldr	r2, [pc, #76]	; (800b214 <HAL_InitTick+0xa0>)
 800b1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ca:	0c9b      	lsrs	r3, r3, #18
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b1d0:	4b11      	ldr	r3, [pc, #68]	; (800b218 <HAL_InitTick+0xa4>)
 800b1d2:	4a12      	ldr	r2, [pc, #72]	; (800b21c <HAL_InitTick+0xa8>)
 800b1d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b1d6:	4b10      	ldr	r3, [pc, #64]	; (800b218 <HAL_InitTick+0xa4>)
 800b1d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b1dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b1de:	4a0e      	ldr	r2, [pc, #56]	; (800b218 <HAL_InitTick+0xa4>)
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b1e4:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <HAL_InitTick+0xa4>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1ea:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <HAL_InitTick+0xa4>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b1f0:	4809      	ldr	r0, [pc, #36]	; (800b218 <HAL_InitTick+0xa4>)
 800b1f2:	f7f8 fcf5 	bl	8003be0 <HAL_TIM_Base_Init>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d104      	bne.n	800b206 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b1fc:	4806      	ldr	r0, [pc, #24]	; (800b218 <HAL_InitTick+0xa4>)
 800b1fe:	f7f8 fdaf 	bl	8003d60 <HAL_TIM_Base_Start_IT>
 800b202:	4603      	mov	r3, r0
 800b204:	e000      	b.n	800b208 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3730      	adds	r7, #48	; 0x30
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	40021000 	.word	0x40021000
 800b214:	431bde83 	.word	0x431bde83
 800b218:	2001aa88 	.word	0x2001aa88
 800b21c:	40001000 	.word	0x40001000

0800b220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b220:	b480      	push	{r7}
 800b222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b224:	e7fe      	b.n	800b224 <NMI_Handler+0x4>

0800b226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b226:	b480      	push	{r7}
 800b228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b22a:	e7fe      	b.n	800b22a <HardFault_Handler+0x4>

0800b22c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b230:	e7fe      	b.n	800b230 <MemManage_Handler+0x4>

0800b232 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b232:	b480      	push	{r7}
 800b234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b236:	e7fe      	b.n	800b236 <BusFault_Handler+0x4>

0800b238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b23c:	e7fe      	b.n	800b23c <UsageFault_Handler+0x4>

0800b23e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b23e:	b480      	push	{r7}
 800b240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b242:	bf00      	nop
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800b250:	4802      	ldr	r0, [pc, #8]	; (800b25c <DMA1_Channel1_IRQHandler+0x10>)
 800b252:	f7f6 fce5 	bl	8001c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b256:	bf00      	nop
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	200021ac 	.word	0x200021ac

0800b260 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800b264:	4802      	ldr	r0, [pc, #8]	; (800b270 <DMA1_Channel2_IRQHandler+0x10>)
 800b266:	f7f6 fcdb 	bl	8001c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800b26a:	bf00      	nop
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	200020ec 	.word	0x200020ec

0800b274 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b278:	4802      	ldr	r0, [pc, #8]	; (800b284 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800b27a:	f7f8 ff49 	bl	8004110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800b27e:	bf00      	nop
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	200022f4 	.word	0x200022f4

0800b288 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b28c:	4802      	ldr	r0, [pc, #8]	; (800b298 <TIM3_IRQHandler+0x10>)
 800b28e:	f7f8 ff3f 	bl	8004110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b292:	bf00      	nop
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	2000220c 	.word	0x2000220c

0800b29c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b2a0:	4802      	ldr	r0, [pc, #8]	; (800b2ac <USART1_IRQHandler+0x10>)
 800b2a2:	f7fa f943 	bl	800552c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b2a6:	bf00      	nop
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20002260 	.word	0x20002260

0800b2b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b2b4:	4803      	ldr	r0, [pc, #12]	; (800b2c4 <TIM6_DAC_IRQHandler+0x14>)
 800b2b6:	f7f8 ff2b 	bl	8004110 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800b2ba:	4803      	ldr	r0, [pc, #12]	; (800b2c8 <TIM6_DAC_IRQHandler+0x18>)
 800b2bc:	f7f6 f87c 	bl	80013b8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b2c0:	bf00      	nop
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	2001aa88 	.word	0x2001aa88
 800b2c8:	20002198 	.word	0x20002198

0800b2cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	af00      	add	r7, sp, #0
	return 1;
 800b2d0:	2301      	movs	r3, #1
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <_kill>:

int _kill(int pid, int sig)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b2e6:	f001 f8f1 	bl	800c4cc <__errno>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2216      	movs	r2, #22
 800b2ee:	601a      	str	r2, [r3, #0]
	return -1;
 800b2f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <_exit>:

void _exit (int status)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b304:	f04f 31ff 	mov.w	r1, #4294967295
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7ff ffe7 	bl	800b2dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800b30e:	e7fe      	b.n	800b30e <_exit+0x12>

0800b310 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b31c:	2300      	movs	r3, #0
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	e00a      	b.n	800b338 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b322:	f3af 8000 	nop.w
 800b326:	4601      	mov	r1, r0
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	60ba      	str	r2, [r7, #8]
 800b32e:	b2ca      	uxtb	r2, r1
 800b330:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	3301      	adds	r3, #1
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	dbf0      	blt.n	800b322 <_read+0x12>
	}

return len;
 800b340:	687b      	ldr	r3, [r7, #4]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3718      	adds	r7, #24
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b086      	sub	sp, #24
 800b34e:	af00      	add	r7, sp, #0
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	e009      	b.n	800b370 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	60ba      	str	r2, [r7, #8]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	4618      	mov	r0, r3
 800b366:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	3301      	adds	r3, #1
 800b36e:	617b      	str	r3, [r7, #20]
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	429a      	cmp	r2, r3
 800b376:	dbf1      	blt.n	800b35c <_write+0x12>
	}
	return len;
 800b378:	687b      	ldr	r3, [r7, #4]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3718      	adds	r7, #24
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <_close>:

int _close(int file)
{
 800b382:	b480      	push	{r7}
 800b384:	b083      	sub	sp, #12
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
	return -1;
 800b38a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b38e:	4618      	mov	r0, r3
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b083      	sub	sp, #12
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b3aa:	605a      	str	r2, [r3, #4]
	return 0;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <_isatty>:

int _isatty(int file)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
	return 1;
 800b3c2:	2301      	movs	r3, #1
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
	return 0;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
	...

0800b3ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b3f4:	4a14      	ldr	r2, [pc, #80]	; (800b448 <_sbrk+0x5c>)
 800b3f6:	4b15      	ldr	r3, [pc, #84]	; (800b44c <_sbrk+0x60>)
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b400:	4b13      	ldr	r3, [pc, #76]	; (800b450 <_sbrk+0x64>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d102      	bne.n	800b40e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b408:	4b11      	ldr	r3, [pc, #68]	; (800b450 <_sbrk+0x64>)
 800b40a:	4a12      	ldr	r2, [pc, #72]	; (800b454 <_sbrk+0x68>)
 800b40c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b40e:	4b10      	ldr	r3, [pc, #64]	; (800b450 <_sbrk+0x64>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4413      	add	r3, r2
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d207      	bcs.n	800b42c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b41c:	f001 f856 	bl	800c4cc <__errno>
 800b420:	4603      	mov	r3, r0
 800b422:	220c      	movs	r2, #12
 800b424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b426:	f04f 33ff 	mov.w	r3, #4294967295
 800b42a:	e009      	b.n	800b440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b42c:	4b08      	ldr	r3, [pc, #32]	; (800b450 <_sbrk+0x64>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b432:	4b07      	ldr	r3, [pc, #28]	; (800b450 <_sbrk+0x64>)
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4413      	add	r3, r2
 800b43a:	4a05      	ldr	r2, [pc, #20]	; (800b450 <_sbrk+0x64>)
 800b43c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b43e:	68fb      	ldr	r3, [r7, #12]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	200a0000 	.word	0x200a0000
 800b44c:	00000400 	.word	0x00000400
 800b450:	20002050 	.word	0x20002050
 800b454:	2001aae8 	.word	0x2001aae8

0800b458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b45c:	4b06      	ldr	r3, [pc, #24]	; (800b478 <SystemInit+0x20>)
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b462:	4a05      	ldr	r2, [pc, #20]	; (800b478 <SystemInit+0x20>)
 800b464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b46c:	bf00      	nop
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	e000ed00 	.word	0xe000ed00

0800b47c <tetris_write_points>:
/**
 * @brief Write points to the screen while playing.
 *
 * @param window window
 */
void tetris_write_points(Window* window) {
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
    char point_str[10];
    sprintf(point_str, "%lu", window->game.points);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b48a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	f107 030c 	add.w	r3, r7, #12
 800b494:	490a      	ldr	r1, [pc, #40]	; (800b4c0 <tetris_write_points+0x44>)
 800b496:	4618      	mov	r0, r3
 800b498:	f001 faec 	bl	800ca74 <siprintf>
    print_str(window, "Points:", 25, 60);
 800b49c:	233c      	movs	r3, #60	; 0x3c
 800b49e:	2219      	movs	r2, #25
 800b4a0:	4908      	ldr	r1, [pc, #32]	; (800b4c4 <tetris_write_points+0x48>)
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7fe feca 	bl	800a23c <print_str>
    print_str(window, point_str, 25, 150);
 800b4a8:	f107 010c 	add.w	r1, r7, #12
 800b4ac:	2396      	movs	r3, #150	; 0x96
 800b4ae:	2219      	movs	r2, #25
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7fe fec3 	bl	800a23c <print_str>
}
 800b4b6:	bf00      	nop
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	0800dda8 	.word	0x0800dda8
 800b4c4:	0800ddac 	.word	0x0800ddac

0800b4c8 <tetris_initialize_game>:
/**
 * @brief populate window game variable with a reset tetris game.
 *
 * @param window window
 */
void tetris_initialize_game(Window * window) {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
    // fill game board with empty data
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	60fb      	str	r3, [r7, #12]
 800b4d4:	e00a      	b.n	800b4ec <tetris_initialize_game+0x24>
        window->game.board[i] = EMPTY_BOARD_CHAR;
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	2205      	movs	r2, #5
 800b4e4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2bef      	cmp	r3, #239	; 0xef
 800b4f0:	ddf1      	ble.n	800b4d6 <tetris_initialize_game+0xe>
    }

    // seed random val
    srand((unsigned) HAL_GetTick());
 800b4f2:	f7f5 fd61 	bl	8000fb8 <HAL_GetTick>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f001 f9d3 	bl	800c8a4 <srand>

    // initialize game state (tetromino, rotation, next tetromino, x, y, game state)
    window->game.rotation = 0;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b504:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b508:	2200      	movs	r2, #0
 800b50a:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = tetris_get_next_tetromino();
 800b50c:	f000 f830 	bl	800b570 <tetris_get_next_tetromino>
 800b510:	4602      	mov	r2, r0
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b518:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b51c:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino();
 800b51e:	f000 f827 	bl	800b570 <tetris_get_next_tetromino>
 800b522:	4602      	mov	r2, r0
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b52a:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b52e:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b536:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b53a:	2203      	movs	r2, #3
 800b53c:	601a      	str	r2, [r3, #0]
    window->game.y = 0;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]
    window->game.state = Start;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b54e:	33f4      	adds	r3, #244	; 0xf4
 800b550:	2200      	movs	r2, #0
 800b552:	701a      	strb	r2, [r3, #0]
    window->game.points = 0;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b55a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]

    // initialize the current tetromino
    tetris_update_current_tetromino(window);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f84a 	bl	800b5fc <tetris_update_current_tetromino>
}
 800b568:	bf00      	nop
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <tetris_get_next_tetromino>:
/**
 * @brief generate random tetromino piece (select random number between 0 and 7)
 *
 * @return const char* pointer to random tetromino piece
 */
const uint8_t * tetris_get_next_tetromino() {
 800b570:	b580      	push	{r7, lr}
 800b572:	af00      	add	r7, sp, #0
    switch (rand() % 7) {
 800b574:	f001 f9c4 	bl	800c900 <rand>
 800b578:	4602      	mov	r2, r0
 800b57a:	4b18      	ldr	r3, [pc, #96]	; (800b5dc <tetris_get_next_tetromino+0x6c>)
 800b57c:	fb83 1302 	smull	r1, r3, r3, r2
 800b580:	4413      	add	r3, r2
 800b582:	1099      	asrs	r1, r3, #2
 800b584:	17d3      	asrs	r3, r2, #31
 800b586:	1ac9      	subs	r1, r1, r3
 800b588:	460b      	mov	r3, r1
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	1a5b      	subs	r3, r3, r1
 800b58e:	1ad1      	subs	r1, r2, r3
 800b590:	2906      	cmp	r1, #6
 800b592:	d81f      	bhi.n	800b5d4 <tetris_get_next_tetromino+0x64>
 800b594:	a301      	add	r3, pc, #4	; (adr r3, 800b59c <tetris_get_next_tetromino+0x2c>)
 800b596:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800b59a:	bf00      	nop
 800b59c:	0800b5b9 	.word	0x0800b5b9
 800b5a0:	0800b5bd 	.word	0x0800b5bd
 800b5a4:	0800b5c1 	.word	0x0800b5c1
 800b5a8:	0800b5c5 	.word	0x0800b5c5
 800b5ac:	0800b5c9 	.word	0x0800b5c9
 800b5b0:	0800b5cd 	.word	0x0800b5cd
 800b5b4:	0800b5d1 	.word	0x0800b5d1
        case 0:
            return tetromino_I;
 800b5b8:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <tetris_get_next_tetromino+0x70>)
 800b5ba:	e00c      	b.n	800b5d6 <tetris_get_next_tetromino+0x66>
        break;
        case 1:
            return tetromino_J;
 800b5bc:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <tetris_get_next_tetromino+0x74>)
 800b5be:	e00a      	b.n	800b5d6 <tetris_get_next_tetromino+0x66>
        break;
        case 2:
            return tetromino_L;
 800b5c0:	4b09      	ldr	r3, [pc, #36]	; (800b5e8 <tetris_get_next_tetromino+0x78>)
 800b5c2:	e008      	b.n	800b5d6 <tetris_get_next_tetromino+0x66>
        break;
        case 3:
            return tetromino_O;
 800b5c4:	4b09      	ldr	r3, [pc, #36]	; (800b5ec <tetris_get_next_tetromino+0x7c>)
 800b5c6:	e006      	b.n	800b5d6 <tetris_get_next_tetromino+0x66>
        break;
        case 4:
            return tetromino_S;
 800b5c8:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <tetris_get_next_tetromino+0x80>)
 800b5ca:	e004      	b.n	800b5d6 <tetris_get_next_tetromino+0x66>
        break;
        case 5:
            return tetromino_T;
 800b5cc:	4b09      	ldr	r3, [pc, #36]	; (800b5f4 <tetris_get_next_tetromino+0x84>)
 800b5ce:	e002      	b.n	800b5d6 <tetris_get_next_tetromino+0x66>
        break;
        case 6:
            return tetromino_Z;
 800b5d0:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <tetris_get_next_tetromino+0x88>)
 800b5d2:	e000      	b.n	800b5d6 <tetris_get_next_tetromino+0x66>
        break;
        default:
            return tetromino_I; // TODO: this is never supposed to happen.
 800b5d4:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <tetris_get_next_tetromino+0x70>)
        break;
    }

}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	92492493 	.word	0x92492493
 800b5e0:	0800de6c 	.word	0x0800de6c
 800b5e4:	0800de7c 	.word	0x0800de7c
 800b5e8:	0800de8c 	.word	0x0800de8c
 800b5ec:	0800de9c 	.word	0x0800de9c
 800b5f0:	0800deac 	.word	0x0800deac
 800b5f4:	0800debc 	.word	0x0800debc
 800b5f8:	0800decc 	.word	0x0800decc

0800b5fc <tetris_update_current_tetromino>:
/**
 * @brief Updates the tetromino piece used for collision/drawing purposes
 *
 * @param window window
 */
void tetris_update_current_tetromino(Window * window) {
 800b5fc:	b480      	push	{r7}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
    // update piece based on rotation state
    int index = 0, row, col;
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]
    switch (window->game.rotation) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b60e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b612:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b616:	2b03      	cmp	r3, #3
 800b618:	f200 80a0 	bhi.w	800b75c <tetris_update_current_tetromino+0x160>
 800b61c:	a201      	add	r2, pc, #4	; (adr r2, 800b624 <tetris_update_current_tetromino+0x28>)
 800b61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b622:	bf00      	nop
 800b624:	0800b635 	.word	0x0800b635
 800b628:	0800b67f 	.word	0x0800b67f
 800b62c:	0800b6c9 	.word	0x0800b6c9
 800b630:	0800b713 	.word	0x0800b713
        case 0:
            // no rotation
            for (row = 0; row < 4; row++) {
 800b634:	2300      	movs	r3, #0
 800b636:	613b      	str	r3, [r7, #16]
 800b638:	e01d      	b.n	800b676 <tetris_update_current_tetromino+0x7a>
                for (col = 0; col < 4; col++) {
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
 800b63e:	e014      	b.n	800b66a <tetris_update_current_tetromino+0x6e>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b646:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	441a      	add	r2, r3
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	0099      	lsls	r1, r3, #2
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	440b      	add	r3, r1
 800b658:	7811      	ldrb	r1, [r2, #0]
 800b65a:	4a43      	ldr	r2, [pc, #268]	; (800b768 <tetris_update_current_tetromino+0x16c>)
 800b65c:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	3301      	adds	r3, #1
 800b662:	617b      	str	r3, [r7, #20]
                for (col = 0; col < 4; col++) {
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3301      	adds	r3, #1
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	dde7      	ble.n	800b640 <tetris_update_current_tetromino+0x44>
            for (row = 0; row < 4; row++) {
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	3301      	adds	r3, #1
 800b674:	613b      	str	r3, [r7, #16]
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2b03      	cmp	r3, #3
 800b67a:	ddde      	ble.n	800b63a <tetris_update_current_tetromino+0x3e>
                }
            }
        break;
 800b67c:	e06e      	b.n	800b75c <tetris_update_current_tetromino+0x160>
        case 1:
            // C 1; CC 3;
            for (col = 3; col >= 0; col--) {
 800b67e:	2303      	movs	r3, #3
 800b680:	60fb      	str	r3, [r7, #12]
 800b682:	e01d      	b.n	800b6c0 <tetris_update_current_tetromino+0xc4>
                for (row = 0; row < 4; row++) {
 800b684:	2300      	movs	r3, #0
 800b686:	613b      	str	r3, [r7, #16]
 800b688:	e014      	b.n	800b6b4 <tetris_update_current_tetromino+0xb8>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b690:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	441a      	add	r2, r3
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	0099      	lsls	r1, r3, #2
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	440b      	add	r3, r1
 800b6a2:	7811      	ldrb	r1, [r2, #0]
 800b6a4:	4a30      	ldr	r2, [pc, #192]	; (800b768 <tetris_update_current_tetromino+0x16c>)
 800b6a6:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
                for (row = 0; row < 4; row++) {
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	613b      	str	r3, [r7, #16]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	dde7      	ble.n	800b68a <tetris_update_current_tetromino+0x8e>
            for (col = 3; col >= 0; col--) {
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	dade      	bge.n	800b684 <tetris_update_current_tetromino+0x88>
                }
            }
        break;
 800b6c6:	e049      	b.n	800b75c <tetris_update_current_tetromino+0x160>
        case 2:
            // C 2; CC 2;
            for (row = 3; row >= 0; row--) {
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	613b      	str	r3, [r7, #16]
 800b6cc:	e01d      	b.n	800b70a <tetris_update_current_tetromino+0x10e>
                for (col = 3; col >= 0; col--) {
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e014      	b.n	800b6fe <tetris_update_current_tetromino+0x102>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b6da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	441a      	add	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	0099      	lsls	r1, r3, #2
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	440b      	add	r3, r1
 800b6ec:	7811      	ldrb	r1, [r2, #0]
 800b6ee:	4a1e      	ldr	r2, [pc, #120]	; (800b768 <tetris_update_current_tetromino+0x16c>)
 800b6f0:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	617b      	str	r3, [r7, #20]
                for (col = 3; col >= 0; col--) {
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	60fb      	str	r3, [r7, #12]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	dae7      	bge.n	800b6d4 <tetris_update_current_tetromino+0xd8>
            for (row = 3; row >= 0; row--) {
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	3b01      	subs	r3, #1
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dade      	bge.n	800b6ce <tetris_update_current_tetromino+0xd2>
                }
            }
        break;
 800b710:	e024      	b.n	800b75c <tetris_update_current_tetromino+0x160>
        case 3:
            // C 3; CC 1;
            for (col = 0; col < 4; col++) {
 800b712:	2300      	movs	r3, #0
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	e01d      	b.n	800b754 <tetris_update_current_tetromino+0x158>
                for (row = 3; row >= 0; row--) {
 800b718:	2303      	movs	r3, #3
 800b71a:	613b      	str	r3, [r7, #16]
 800b71c:	e014      	b.n	800b748 <tetris_update_current_tetromino+0x14c>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b724:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	441a      	add	r2, r3
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	0099      	lsls	r1, r3, #2
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	440b      	add	r3, r1
 800b736:	7811      	ldrb	r1, [r2, #0]
 800b738:	4a0b      	ldr	r2, [pc, #44]	; (800b768 <tetris_update_current_tetromino+0x16c>)
 800b73a:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	3301      	adds	r3, #1
 800b740:	617b      	str	r3, [r7, #20]
                for (row = 3; row >= 0; row--) {
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	3b01      	subs	r3, #1
 800b746:	613b      	str	r3, [r7, #16]
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	dae7      	bge.n	800b71e <tetris_update_current_tetromino+0x122>
            for (col = 0; col < 4; col++) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3301      	adds	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b03      	cmp	r3, #3
 800b758:	ddde      	ble.n	800b718 <tetris_update_current_tetromino+0x11c>
                }
            }
        break;
 800b75a:	bf00      	nop
    }
}
 800b75c:	bf00      	nop
 800b75e:	371c      	adds	r7, #28
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	20000628 	.word	0x20000628

0800b76c <tetris_rotate_C_tetromino>:
/**
 * @brief Rotate the tetromino piece clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_C_tetromino(Window * window) {
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 1) % 4;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b77a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b77e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b782:	3301      	adds	r3, #1
 800b784:	425a      	negs	r2, r3
 800b786:	f003 0303 	and.w	r3, r3, #3
 800b78a:	f002 0203 	and.w	r2, r2, #3
 800b78e:	bf58      	it	pl
 800b790:	4253      	negpl	r3, r2
 800b792:	b21a      	sxth	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b79a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b79e:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f7ff ff2b 	bl	800b5fc <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f8c6 	bl	800b93c <tetris_validate_position>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d018      	beq.n	800b7e8 <tetris_rotate_C_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 3) % 4;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b7bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7c4:	3303      	adds	r3, #3
 800b7c6:	425a      	negs	r2, r3
 800b7c8:	f003 0303 	and.w	r3, r3, #3
 800b7cc:	f002 0203 	and.w	r2, r2, #3
 800b7d0:	bf58      	it	pl
 800b7d2:	4253      	negpl	r3, r2
 800b7d4:	b21a      	sxth	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b7dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7e0:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f7ff ff0a 	bl	800b5fc <tetris_update_current_tetromino>
    }
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <tetris_rotate_CC_tetromino>:
/**
 * @brief Rotate the tetromino piece conter clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_CC_tetromino(Window * window) {
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 3) % 4;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b7fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b802:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b806:	3303      	adds	r3, #3
 800b808:	425a      	negs	r2, r3
 800b80a:	f003 0303 	and.w	r3, r3, #3
 800b80e:	f002 0203 	and.w	r2, r2, #3
 800b812:	bf58      	it	pl
 800b814:	4253      	negpl	r3, r2
 800b816:	b21a      	sxth	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b81e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b822:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff fee9 	bl	800b5fc <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800b82a:	2200      	movs	r2, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f884 	bl	800b93c <tetris_validate_position>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d018      	beq.n	800b86c <tetris_rotate_CC_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 1) % 4;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b840:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b844:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b848:	3301      	adds	r3, #1
 800b84a:	425a      	negs	r2, r3
 800b84c:	f003 0303 	and.w	r3, r3, #3
 800b850:	f002 0203 	and.w	r2, r2, #3
 800b854:	bf58      	it	pl
 800b856:	4253      	negpl	r3, r2
 800b858:	b21a      	sxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b860:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b864:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff fec8 	bl	800b5fc <tetris_update_current_tetromino>
    }
}
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <tetris_move_left>:
 * @brief Move the piece to the left. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_left(Window * window) {
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, -1, 0)) {
 800b87c:	2200      	movs	r2, #0
 800b87e:	f04f 31ff 	mov.w	r1, #4294967295
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f85a 	bl	800b93c <tetris_validate_position>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10e      	bne.n	800b8ac <tetris_move_left+0x38>
        window->game.x--;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b894:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	1e5a      	subs	r2, r3, #1
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b8a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b8a6:	601a      	str	r2, [r3, #0]
        return 1;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e000      	b.n	800b8ae <tetris_move_left+0x3a>
    }
    return 0;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <tetris_move_right>:
 * @brief Move the piece to the right. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_right(Window * window) {
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 1, 0)) {
 800b8be:	2200      	movs	r2, #0
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f83a 	bl	800b93c <tetris_validate_position>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10e      	bne.n	800b8ec <tetris_move_right+0x36>
        window->game.x++;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b8d4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b8e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b8e6:	601a      	str	r2, [r3, #0]
        return 1;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e000      	b.n	800b8ee <tetris_move_right+0x38>
    }
    return 0;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <tetris_move_down>:
 * @brief Move the piece down. Tetromino piece position is finalized if collision occurs. Get next tetromino & update board accordingly.
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_down(Window * window) {
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 0, 1)) {
 800b8fe:	2201      	movs	r2, #1
 800b900:	2100      	movs	r1, #0
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f81a 	bl	800b93c <tetris_validate_position>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <tetris_move_down+0x2e>
        window->game.y++;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	1c5a      	adds	r2, r3, #1
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b91e:	601a      	str	r2, [r3, #0]
        return 1;
 800b920:	2301      	movs	r3, #1
 800b922:	e006      	b.n	800b932 <tetris_move_down+0x3c>
    }

    tetris_finished_tetromino(window);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f9e3 	bl	800bcf0 <tetris_finished_tetromino>
    tetris_detect_rowCompletion(window);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fa76 	bl	800be1c <tetris_detect_rowCompletion>
    return 1;
 800b930:	2301      	movs	r3, #1
}
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
	...

0800b93c <tetris_validate_position>:
 * @param window tetris game window w/ tetromino data we want to validate
 * @param x_offset added to tetromino current x. X position to validate
 * @param y_offset added to tetromino current y. Y position to validate
 * @return int error code. 0 = no collision. 1 = collision w/ left wall. 2 = collision w/ right wall. 3 = collision with bottom floor. 4 = collision w/another block
 */
int tetris_validate_position(Window * window, int x_offset, int y_offset) {
 800b93c:	b480      	push	{r7}
 800b93e:	b089      	sub	sp, #36	; 0x24
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
    int index = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	61fb      	str	r3, [r7, #28]
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	4413      	add	r3, r2
 800b958:	61bb      	str	r3, [r7, #24]
 800b95a:	e057      	b.n	800ba0c <tetris_validate_position+0xd0>
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b962:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	4413      	add	r3, r2
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	e03e      	b.n	800b9ee <tetris_validate_position+0xb2>
            // check for collision w/ bottom floor
            if (row >= BOARD_HEIGHT && tetromino_current[index] != 10) {
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2b17      	cmp	r3, #23
 800b974:	dd07      	ble.n	800b986 <tetris_validate_position+0x4a>
 800b976:	4a2e      	ldr	r2, [pc, #184]	; (800ba30 <tetris_validate_position+0xf4>)
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	4413      	add	r3, r2
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b0a      	cmp	r3, #10
 800b980:	d001      	beq.n	800b986 <tetris_validate_position+0x4a>
                return 3;
 800b982:	2303      	movs	r3, #3
 800b984:	e04d      	b.n	800ba22 <tetris_validate_position+0xe6>
            }
            // collision w/ left wall
            if (col < 0 && tetromino_current[index] != 10) {
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	da07      	bge.n	800b99c <tetris_validate_position+0x60>
 800b98c:	4a28      	ldr	r2, [pc, #160]	; (800ba30 <tetris_validate_position+0xf4>)
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	4413      	add	r3, r2
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	2b0a      	cmp	r3, #10
 800b996:	d001      	beq.n	800b99c <tetris_validate_position+0x60>
                return 1;
 800b998:	2301      	movs	r3, #1
 800b99a:	e042      	b.n	800ba22 <tetris_validate_position+0xe6>
            }
            if (col >= BOARD_WIDTH && tetromino_current[index] != 10) {
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	2b09      	cmp	r3, #9
 800b9a0:	dd07      	ble.n	800b9b2 <tetris_validate_position+0x76>
 800b9a2:	4a23      	ldr	r2, [pc, #140]	; (800ba30 <tetris_validate_position+0xf4>)
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b0a      	cmp	r3, #10
 800b9ac:	d001      	beq.n	800b9b2 <tetris_validate_position+0x76>
                return 2;
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	e037      	b.n	800ba22 <tetris_validate_position+0xe6>
            }
            if (tetromino_current[index] != 10 && window->game.board[BOARD_WIDTH * row + col] != EMPTY_BOARD_CHAR) {
 800b9b2:	4a1f      	ldr	r2, [pc, #124]	; (800ba30 <tetris_validate_position+0xf4>)
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	2b0a      	cmp	r3, #10
 800b9bc:	d011      	beq.n	800b9e2 <tetris_validate_position+0xa6>
 800b9be:	69ba      	ldr	r2, [r7, #24]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b05      	cmp	r3, #5
 800b9dc:	d001      	beq.n	800b9e2 <tetris_validate_position+0xa6>
                return 4;
 800b9de:	2304      	movs	r3, #4
 800b9e0:	e01f      	b.n	800ba22 <tetris_validate_position+0xe6>
            }
            index++;
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	61fb      	str	r3, [r7, #28]
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	617b      	str	r3, [r7, #20]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b9f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	1d1a      	adds	r2, r3, #4
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	4413      	add	r3, r2
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	dbb4      	blt.n	800b970 <tetris_validate_position+0x34>
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	61bb      	str	r3, [r7, #24]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	1d1a      	adds	r2, r3, #4
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4413      	add	r3, r2
 800ba1a:	69ba      	ldr	r2, [r7, #24]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	db9d      	blt.n	800b95c <tetris_validate_position+0x20>
        }
    }
    return 0;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3724      	adds	r7, #36	; 0x24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
 800ba2e:	bf00      	nop
 800ba30:	20000628 	.word	0x20000628
 800ba34:	00000000 	.word	0x00000000

0800ba38 <tetris_drawEndScreen>:
 * @brief Draws the final screen of Tetris.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_drawEndScreen(Window * window) {
 800ba38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ba3c:	b08a      	sub	sp, #40	; 0x28
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
	// Draw a smiley face
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800ba42:	2346      	movs	r3, #70	; 0x46
 800ba44:	627b      	str	r3, [r7, #36]	; 0x24
 800ba46:	e131      	b.n	800bcac <tetris_drawEndScreen+0x274>
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800ba48:	2302      	movs	r3, #2
 800ba4a:	623b      	str	r3, [r7, #32]
 800ba4c:	e127      	b.n	800bc9e <tetris_drawEndScreen+0x266>
			float y = IMAGE_HEIGHT-(i-IMAGE_Y) - (((float)IMAGE_HEIGHT)/2);
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 800ba54:	ee07 3a90 	vmov	s15, r3
 800ba58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba5c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800bcd0 <tetris_drawEndScreen+0x298>
 800ba60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba64:	edc7 7a06 	vstr	s15, [r7, #24]
			float x = (((float)IMAGE_HEIGHT)/IMAGE_WIDTH)*(j-IMAGE_X) - (((float)IMAGE_HEIGHT)/2);
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	3b02      	subs	r3, #2
 800ba6c:	ee07 3a90 	vmov	s15, r3
 800ba70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba74:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800bcd4 <tetris_drawEndScreen+0x29c>
 800ba78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba7c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800bcd0 <tetris_drawEndScreen+0x298>
 800ba80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba84:	edc7 7a05 	vstr	s15, [r7, #20]
			float rad_head = x*x + y*y;
 800ba88:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ba90:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ba98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba9c:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_eyes = (abs(x)-70)*(abs(x)-70) + (y-30)*(y-30);
 800baa0:	edd7 7a05 	vldr	s15, [r7, #20]
 800baa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800baa8:	ee17 3a90 	vmov	r3, s15
 800baac:	2b00      	cmp	r3, #0
 800baae:	bfb8      	it	lt
 800bab0:	425b      	neglt	r3, r3
 800bab2:	3b46      	subs	r3, #70	; 0x46
 800bab4:	edd7 7a05 	vldr	s15, [r7, #20]
 800bab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800babc:	ee17 2a90 	vmov	r2, s15
 800bac0:	2a00      	cmp	r2, #0
 800bac2:	bfb8      	it	lt
 800bac4:	4252      	neglt	r2, r2
 800bac6:	3a46      	subs	r2, #70	; 0x46
 800bac8:	fb02 f303 	mul.w	r3, r2, r3
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bad4:	edd7 7a06 	vldr	s15, [r7, #24]
 800bad8:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800badc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800bae0:	edd7 7a06 	vldr	s15, [r7, #24]
 800bae4:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 800bae8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800baec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baf4:	edc7 7a03 	vstr	s15, [r7, #12]
			float quad_rad;
			// Happy if we get over 80k :)
			// Even though that point count may overflow the screen-
			if (window->game.points < 80000) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bafe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a74      	ldr	r2, [pc, #464]	; (800bcd8 <tetris_drawEndScreen+0x2a0>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d837      	bhi.n	800bb7a <tetris_drawEndScreen+0x142>
				quad_rad = abs((y+100)+0.01*x*x);
 800bb0a:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb0e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bcdc <tetris_drawEndScreen+0x2a4>
 800bb12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb16:	ee17 0a90 	vmov	r0, s15
 800bb1a:	f7f4 fd25 	bl	8000568 <__aeabi_f2d>
 800bb1e:	4604      	mov	r4, r0
 800bb20:	460d      	mov	r5, r1
 800bb22:	6978      	ldr	r0, [r7, #20]
 800bb24:	f7f4 fd20 	bl	8000568 <__aeabi_f2d>
 800bb28:	a367      	add	r3, pc, #412	; (adr r3, 800bcc8 <tetris_drawEndScreen+0x290>)
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	f7f4 fd73 	bl	8000618 <__aeabi_dmul>
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4690      	mov	r8, r2
 800bb38:	4699      	mov	r9, r3
 800bb3a:	6978      	ldr	r0, [r7, #20]
 800bb3c:	f7f4 fd14 	bl	8000568 <__aeabi_f2d>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4640      	mov	r0, r8
 800bb46:	4649      	mov	r1, r9
 800bb48:	f7f4 fd66 	bl	8000618 <__aeabi_dmul>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4620      	mov	r0, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7f4 fbaa 	bl	80002ac <__adddf3>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4619      	mov	r1, r3
 800bb60:	f7f5 f80a 	bl	8000b78 <__aeabi_d2iz>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	bfb8      	it	lt
 800bb6a:	425b      	neglt	r3, r3
 800bb6c:	ee07 3a90 	vmov	s15, r3
 800bb70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb74:	edc7 7a07 	vstr	s15, [r7, #28]
 800bb78:	e036      	b.n	800bbe8 <tetris_drawEndScreen+0x1b0>
			} else {
				quad_rad = abs((y+100)-0.01*x*x);
 800bb7a:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb7e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800bcdc <tetris_drawEndScreen+0x2a4>
 800bb82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb86:	ee17 0a90 	vmov	r0, s15
 800bb8a:	f7f4 fced 	bl	8000568 <__aeabi_f2d>
 800bb8e:	4604      	mov	r4, r0
 800bb90:	460d      	mov	r5, r1
 800bb92:	6978      	ldr	r0, [r7, #20]
 800bb94:	f7f4 fce8 	bl	8000568 <__aeabi_f2d>
 800bb98:	a34b      	add	r3, pc, #300	; (adr r3, 800bcc8 <tetris_drawEndScreen+0x290>)
 800bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9e:	f7f4 fd3b 	bl	8000618 <__aeabi_dmul>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4690      	mov	r8, r2
 800bba8:	4699      	mov	r9, r3
 800bbaa:	6978      	ldr	r0, [r7, #20]
 800bbac:	f7f4 fcdc 	bl	8000568 <__aeabi_f2d>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	f7f4 fd2e 	bl	8000618 <__aeabi_dmul>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	f7f4 fb70 	bl	80002a8 <__aeabi_dsub>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4610      	mov	r0, r2
 800bbce:	4619      	mov	r1, r3
 800bbd0:	f7f4 ffd2 	bl	8000b78 <__aeabi_d2iz>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	bfb8      	it	lt
 800bbda:	425b      	neglt	r3, r3
 800bbdc:	ee07 3a90 	vmov	s15, r3
 800bbe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbe4:	edc7 7a07 	vstr	s15, [r7, #28]
			}
			if(rad_head > 150*150 && rad_head < 170*170) {
 800bbe8:	edd7 7a04 	vldr	s15, [r7, #16]
 800bbec:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800bce0 <tetris_drawEndScreen+0x2a8>
 800bbf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf8:	dd13      	ble.n	800bc22 <tetris_drawEndScreen+0x1ea>
 800bbfa:	edd7 7a04 	vldr	s15, [r7, #16]
 800bbfe:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800bce4 <tetris_drawEndScreen+0x2ac>
 800bc02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc0a:	d50a      	bpl.n	800bc22 <tetris_drawEndScreen+0x1ea>
				window->frame[i][j] = (uint8_t) 255;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	22ff      	movs	r2, #255	; 0xff
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	e03a      	b.n	800bc98 <tetris_drawEndScreen+0x260>
			} else if (rad_eyes < 20*20) {
 800bc22:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc26:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800bce8 <tetris_drawEndScreen+0x2b0>
 800bc2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc32:	d50a      	bpl.n	800bc4a <tetris_drawEndScreen+0x212>
				window->frame[i][j] = (uint8_t) 255;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	6a3b      	ldr	r3, [r7, #32]
 800bc42:	4413      	add	r3, r2
 800bc44:	22ff      	movs	r2, #255	; 0xff
 800bc46:	701a      	strb	r2, [r3, #0]
 800bc48:	e026      	b.n	800bc98 <tetris_drawEndScreen+0x260>
			} else if (quad_rad < 10 && y < -55) {
 800bc4a:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bc52:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5a:	d513      	bpl.n	800bc84 <tetris_drawEndScreen+0x24c>
 800bc5c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc60:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800bcec <tetris_drawEndScreen+0x2b4>
 800bc64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6c:	d50a      	bpl.n	800bc84 <tetris_drawEndScreen+0x24c>
				window->frame[i][j] = (uint8_t) 255;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	689a      	ldr	r2, [r3, #8]
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	22ff      	movs	r2, #255	; 0xff
 800bc80:	701a      	strb	r2, [r3, #0]
 800bc82:	e009      	b.n	800bc98 <tetris_drawEndScreen+0x260>
			} else {
				window->frame[i][j] = (uint8_t) 0;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	4413      	add	r3, r2
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	623b      	str	r3, [r7, #32]
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	2b51      	cmp	r3, #81	; 0x51
 800bca2:	f77f aed4 	ble.w	800ba4e <tetris_drawEndScreen+0x16>
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	3301      	adds	r3, #1
 800bcaa:	627b      	str	r3, [r7, #36]	; 0x24
 800bcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcae:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800bcb2:	f6ff aec9 	blt.w	800ba48 <tetris_drawEndScreen+0x10>
			}
		}
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	bf00      	nop
 800bcba:	3728      	adds	r7, #40	; 0x28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bcc2:	bf00      	nop
 800bcc4:	f3af 8000 	nop.w
 800bcc8:	47ae147b 	.word	0x47ae147b
 800bccc:	3f847ae1 	.word	0x3f847ae1
 800bcd0:	432f0000 	.word	0x432f0000
 800bcd4:	408c0000 	.word	0x408c0000
 800bcd8:	0001387f 	.word	0x0001387f
 800bcdc:	42c80000 	.word	0x42c80000
 800bce0:	46afc800 	.word	0x46afc800
 800bce4:	46e1c800 	.word	0x46e1c800
 800bce8:	43c80000 	.word	0x43c80000
 800bcec:	c25c0000 	.word	0xc25c0000

0800bcf0 <tetris_finished_tetromino>:
 * @brief Finalizes the tetromino position and generates a new tetromino.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_finished_tetromino(Window * window) {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
    int index = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	617b      	str	r3, [r7, #20]
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	613b      	str	r3, [r7, #16]
 800bd06:	e04e      	b.n	800bda6 <tetris_finished_tetromino+0xb6>
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bd0e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	e039      	b.n	800bd8c <tetris_finished_tetromino+0x9c>
            if (row >= 0 && row < BOARD_HEIGHT && col >= 0 && col < BOARD_WIDTH && tetromino_current[index] != 10) {
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	db30      	blt.n	800bd80 <tetris_finished_tetromino+0x90>
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b17      	cmp	r3, #23
 800bd22:	dc2d      	bgt.n	800bd80 <tetris_finished_tetromino+0x90>
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	db2a      	blt.n	800bd80 <tetris_finished_tetromino+0x90>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b09      	cmp	r3, #9
 800bd2e:	dc27      	bgt.n	800bd80 <tetris_finished_tetromino+0x90>
 800bd30:	4a39      	ldr	r2, [pc, #228]	; (800be18 <tetris_finished_tetromino+0x128>)
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	4413      	add	r3, r2
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b0a      	cmp	r3, #10
 800bd3a:	d021      	beq.n	800bd80 <tetris_finished_tetromino+0x90>
                window->game.board[BOARD_WIDTH * row + col] = tetromino_current[index];
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	461a      	mov	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	4932      	ldr	r1, [pc, #200]	; (800be18 <tetris_finished_tetromino+0x128>)
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	440a      	add	r2, r1
 800bd52:	7811      	ldrb	r1, [r2, #0]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	460a      	mov	r2, r1
 800bd60:	701a      	strb	r2, [r3, #0]

                // check to see if game over!
                if (row < 4) {
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	dc0b      	bgt.n	800bd80 <tetris_finished_tetromino+0x90>
                    tetris_initialize_game(window);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fbad 	bl	800b4c8 <tetris_initialize_game>
                    tetris_drawEndScreen(window);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7ff fe62 	bl	800ba38 <tetris_drawEndScreen>
                    window->game.state = Ended;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bd7a:	33f4      	adds	r3, #244	; 0xf4
 800bd7c:	2203      	movs	r2, #3
 800bd7e:	701a      	strb	r2, [r3, #0]
                }
            }
            index++;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	3301      	adds	r3, #1
 800bd84:	617b      	str	r3, [r7, #20]
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bd92:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3303      	adds	r3, #3
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	ddbb      	ble.n	800bd18 <tetris_finished_tetromino+0x28>
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	3301      	adds	r3, #1
 800bda4:	613b      	str	r3, [r7, #16]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3303      	adds	r3, #3
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	dda8      	ble.n	800bd08 <tetris_finished_tetromino+0x18>
        }
    }

    // reset tetromino position & spawn next tetromino
    window->game.y = 0;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bdc6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bdca:	2203      	movs	r2, #3
 800bdcc:	601a      	str	r2, [r3, #0]
    window->game.rotation = 0;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bdd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bdd8:	2200      	movs	r2, #0
 800bdda:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = window->game.nextTetromino;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bde2:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bdee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bdf2:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino(window);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f7ff fbbb 	bl	800b570 <tetris_get_next_tetromino>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800be02:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800be06:	601a      	str	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7ff fbf7 	bl	800b5fc <tetris_update_current_tetromino>
}
 800be0e:	bf00      	nop
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20000628 	.word	0x20000628

0800be1c <tetris_detect_rowCompletion>:
/**
 * @brief Detect full rows, and clears them out of the board
 *
 * @param window window w/ game
 */
void tetris_detect_rowCompletion(Window * window) {
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b0aa      	sub	sp, #168	; 0xa8
 800be20:	af04      	add	r7, sp, #16
 800be22:	6078      	str	r0, [r7, #4]
    // go over board & detect all lines that need to be cleared.
    int rowCompleted[BOARD_HEIGHT];
    int numRowsCompleted = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800be2a:	2300      	movs	r3, #0
 800be2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be30:	e044      	b.n	800bebc <tetris_detect_rowCompletion+0xa0>
        rowCompleted[row] = 1;
 800be32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800be3c:	4413      	add	r3, r2
 800be3e:	2201      	movs	r2, #1
 800be40:	f843 2c90 	str.w	r2, [r3, #-144]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800be44:	2300      	movs	r3, #0
 800be46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be4a:	e01f      	b.n	800be8c <tetris_detect_rowCompletion+0x70>
            if (window->game.board[BOARD_WIDTH * row + col] == EMPTY_BOARD_CHAR) {
 800be4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	461a      	mov	r2, r3
 800be5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be5e:	4413      	add	r3, r2
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	4413      	add	r3, r2
 800be64:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800be68:	3304      	adds	r3, #4
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	2b05      	cmp	r3, #5
 800be6e:	d108      	bne.n	800be82 <tetris_detect_rowCompletion+0x66>
                rowCompleted[row] = 0;
 800be70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800be7a:	4413      	add	r3, r2
 800be7c:	2200      	movs	r2, #0
 800be7e:	f843 2c90 	str.w	r2, [r3, #-144]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800be82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be86:	3301      	adds	r3, #1
 800be88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be90:	2b09      	cmp	r3, #9
 800be92:	dddb      	ble.n	800be4c <tetris_detect_rowCompletion+0x30>
            }
        }
        if(rowCompleted[row]) numRowsCompleted++;
 800be94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800be9e:	4413      	add	r3, r2
 800bea0:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d004      	beq.n	800beb2 <tetris_detect_rowCompletion+0x96>
 800bea8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800beac:	3301      	adds	r3, #1
 800beae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800beb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beb6:	3301      	adds	r3, #1
 800beb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bec0:	2b17      	cmp	r3, #23
 800bec2:	ddb6      	ble.n	800be32 <tetris_detect_rowCompletion+0x16>
    }

    for (int i = 0; i < 4; i++) {
 800bec4:	2300      	movs	r3, #0
 800bec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800beca:	e058      	b.n	800bf7e <tetris_detect_rowCompletion+0x162>
        int anyRowFlag = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        // go over board from bottom to top & turn lines that need to be cleared on/off
        for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800bed2:	2317      	movs	r3, #23
 800bed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bed8:	e033      	b.n	800bf42 <tetris_detect_rowCompletion+0x126>
            if (rowCompleted[row]) {
 800beda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800bee4:	4413      	add	r3, r2
 800bee6:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d024      	beq.n	800bf38 <tetris_detect_rowCompletion+0x11c>
                for (int col = 0; col < BOARD_WIDTH; col++) {
 800beee:	2300      	movs	r3, #0
 800bef0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bef2:	e01b      	b.n	800bf2c <tetris_detect_rowCompletion+0x110>
                    window->game.board[BOARD_WIDTH * row + col] = (i%2) ? 150 : EMPTY_BOARD_CHAR;
 800bef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bef8:	f003 0301 	and.w	r3, r3, #1
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <tetris_detect_rowCompletion+0xe8>
 800bf00:	2196      	movs	r1, #150	; 0x96
 800bf02:	e000      	b.n	800bf06 <tetris_detect_rowCompletion+0xea>
 800bf04:	2105      	movs	r1, #5
 800bf06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	461a      	mov	r2, r3
 800bf14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf16:	4413      	add	r3, r2
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bf20:	3304      	adds	r3, #4
 800bf22:	460a      	mov	r2, r1
 800bf24:	701a      	strb	r2, [r3, #0]
                for (int col = 0; col < BOARD_WIDTH; col++) {
 800bf26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf28:	3301      	adds	r3, #1
 800bf2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf2e:	2b09      	cmp	r3, #9
 800bf30:	dde0      	ble.n	800bef4 <tetris_detect_rowCompletion+0xd8>
                }
                anyRowFlag = 1;
 800bf32:	2301      	movs	r3, #1
 800bf34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800bf38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	dac7      	bge.n	800beda <tetris_detect_rowCompletion+0xbe>
            }
        }

        if (!anyRowFlag) {
 800bf4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d01a      	beq.n	800bf88 <tetris_detect_rowCompletion+0x16c>
            break;
        }

        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, 1, 1, window->game.board);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bf58:	3304      	adds	r3, #4
 800bf5a:	9303      	str	r3, [sp, #12]
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	9302      	str	r3, [sp, #8]
 800bf60:	2301      	movs	r3, #1
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	2318      	movs	r3, #24
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	230a      	movs	r3, #10
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	2101      	movs	r1, #1
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f8be 	bl	800c0f0 <drawRect>
    for (int i = 0; i < 4; i++) {
 800bf74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf78:	3301      	adds	r3, #1
 800bf7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf82:	2b03      	cmp	r3, #3
 800bf84:	dda2      	ble.n	800becc <tetris_detect_rowCompletion+0xb0>
 800bf86:	e000      	b.n	800bf8a <tetris_detect_rowCompletion+0x16e>
            break;
 800bf88:	bf00      	nop
    }

    // go over board from bottom to top & delete the lines that need to be cleared
    int row_currently_drawn = BOARD_HEIGHT - 1;
 800bf8a:	2317      	movs	r3, #23
 800bf8c:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800bf8e:	2317      	movs	r3, #23
 800bf90:	677b      	str	r3, [r7, #116]	; 0x74
 800bf92:	e034      	b.n	800bffe <tetris_detect_rowCompletion+0x1e2>
        if (!rowCompleted[row]) {
 800bf94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800bf9c:	4413      	add	r3, r2
 800bf9e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d128      	bne.n	800bff8 <tetris_detect_rowCompletion+0x1dc>
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	673b      	str	r3, [r7, #112]	; 0x70
 800bfaa:	e01f      	b.n	800bfec <tetris_detect_rowCompletion+0x1d0>
                window->game.board[BOARD_WIDTH * row_currently_drawn + col] = window->game.board[BOARD_WIDTH * row + col];
 800bfac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bfae:	4613      	mov	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	005b      	lsls	r3, r3, #1
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfba:	18d1      	adds	r1, r2, r3
 800bfbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfca:	441a      	add	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	440b      	add	r3, r1
 800bfd0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	7819      	ldrb	r1, [r3, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	460a      	mov	r2, r1
 800bfe4:	701a      	strb	r2, [r3, #0]
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800bfe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfe8:	3301      	adds	r3, #1
 800bfea:	673b      	str	r3, [r7, #112]	; 0x70
 800bfec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfee:	2b09      	cmp	r3, #9
 800bff0:	dddc      	ble.n	800bfac <tetris_detect_rowCompletion+0x190>
            }
            row_currently_drawn--;
 800bff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bff4:	3b01      	subs	r3, #1
 800bff6:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800bff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bffa:	3b01      	subs	r3, #1
 800bffc:	677b      	str	r3, [r7, #116]	; 0x74
 800bffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c000:	2b00      	cmp	r3, #0
 800c002:	dac7      	bge.n	800bf94 <tetris_detect_rowCompletion+0x178>
        }
    }

    for (int row = row_currently_drawn; row >= 0; row--) {
 800c004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c006:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c008:	e01d      	b.n	800c046 <tetris_detect_rowCompletion+0x22a>
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c00a:	2300      	movs	r3, #0
 800c00c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c00e:	e011      	b.n	800c034 <tetris_detect_rowCompletion+0x218>
            window->game.board[BOARD_WIDTH * row_currently_drawn + col] = EMPTY_BOARD_CHAR;
 800c010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c012:	4613      	mov	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	461a      	mov	r2, r3
 800c01c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c01e:	4413      	add	r3, r2
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	4413      	add	r3, r2
 800c024:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c028:	3304      	adds	r3, #4
 800c02a:	2205      	movs	r2, #5
 800c02c:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c02e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c030:	3301      	adds	r3, #1
 800c032:	66bb      	str	r3, [r7, #104]	; 0x68
 800c034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c036:	2b09      	cmp	r3, #9
 800c038:	ddea      	ble.n	800c010 <tetris_detect_rowCompletion+0x1f4>
        }
        row_currently_drawn--;
 800c03a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c03c:	3b01      	subs	r3, #1
 800c03e:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int row = row_currently_drawn; row >= 0; row--) {
 800c040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c042:	3b01      	subs	r3, #1
 800c044:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dade      	bge.n	800c00a <tetris_detect_rowCompletion+0x1ee>
 800c04c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c050:	3b01      	subs	r3, #1
 800c052:	2b03      	cmp	r3, #3
 800c054:	d846      	bhi.n	800c0e4 <tetris_detect_rowCompletion+0x2c8>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <tetris_detect_rowCompletion+0x240>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c06d 	.word	0x0800c06d
 800c060:	0800c08b 	.word	0x0800c08b
 800c064:	0800c0a9 	.word	0x0800c0a9
 800c068:	0800c0c7 	.word	0x0800c0c7
    }

    switch(numRowsCompleted) {
    case 1:
    	window->game.points += 40;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c072:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c082:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c086:	601a      	str	r2, [r3, #0]
    	break;
 800c088:	e02d      	b.n	800c0e6 <tetris_detect_rowCompletion+0x2ca>
    case 2:
    	window->game.points += 100;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c090:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c0a4:	601a      	str	r2, [r3, #0]
    	break;
 800c0a6:	e01e      	b.n	800c0e6 <tetris_detect_rowCompletion+0x2ca>
    case 3:
    	window->game.points += 300;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c0c2:	601a      	str	r2, [r3, #0]
    	break;
 800c0c4:	e00f      	b.n	800c0e6 <tetris_detect_rowCompletion+0x2ca>
    case 4:
    	window->game.points += 1200;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c0e0:	601a      	str	r2, [r3, #0]
    	break;
 800c0e2:	e000      	b.n	800c0e6 <tetris_detect_rowCompletion+0x2ca>
    default:
    	break;
 800c0e4:	bf00      	nop
    }
}
 800c0e6:	bf00      	nop
 800c0e8:	3798      	adds	r7, #152	; 0x98
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop

0800c0f0 <drawRect>:
 * @param height height of 2D data rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param data data to write to screen
 */
void drawRect(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t* data) {
 800c0f0:	b480      	push	{r7}
 800c0f2:	b08b      	sub	sp, #44	; 0x2c
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	617b      	str	r3, [r7, #20]

    int indexRow = 0, indexCol;
 800c104:	2300      	movs	r3, #0
 800c106:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c10c:	fb02 f303 	mul.w	r3, r2, r3
 800c110:	3346      	adds	r3, #70	; 0x46
 800c112:	61fb      	str	r3, [r7, #28]
 800c114:	e06b      	b.n	800c1ee <drawRect+0xfe>
        indexCol = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c11e:	fb02 f303 	mul.w	r3, r2, r3
 800c122:	3302      	adds	r3, #2
 800c124:	61bb      	str	r3, [r7, #24]
 800c126:	e041      	b.n	800c1ac <drawRect+0xbc>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X && data[indexRow * width + indexCol] != 10) {
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	2b45      	cmp	r3, #69	; 0x45
 800c12c:	dd27      	ble.n	800c17e <drawRect+0x8e>
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c134:	da23      	bge.n	800c17e <drawRect+0x8e>
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	dd20      	ble.n	800c17e <drawRect+0x8e>
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	2b51      	cmp	r3, #81	; 0x51
 800c140:	dc1d      	bgt.n	800c17e <drawRect+0x8e>
 800c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c144:	683a      	ldr	r2, [r7, #0]
 800c146:	fb02 f203 	mul.w	r2, r2, r3
 800c14a:	6a3b      	ldr	r3, [r7, #32]
 800c14c:	4413      	add	r3, r2
 800c14e:	461a      	mov	r2, r3
 800c150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c152:	4413      	add	r3, r2
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	2b0a      	cmp	r3, #10
 800c158:	d011      	beq.n	800c17e <drawRect+0x8e>
                buff[row][col] = data[indexRow * width + indexCol];
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	fb02 f203 	mul.w	r2, r2, r3
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	4413      	add	r3, r2
 800c166:	461a      	mov	r2, r3
 800c168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c16a:	441a      	add	r2, r3
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	6979      	ldr	r1, [r7, #20]
 800c172:	440b      	add	r3, r1
 800c174:	6819      	ldr	r1, [r3, #0]
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	440b      	add	r3, r1
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	701a      	strb	r2, [r3, #0]
            }
            if ((col - (x_start * scaling_h + IMAGE_X) + 1) % scaling_h == 0) {
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c182:	fb02 f303 	mul.w	r3, r2, r3
 800c186:	3302      	adds	r3, #2
 800c188:	69ba      	ldr	r2, [r7, #24]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	3301      	adds	r3, #1
 800c18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c190:	fb93 f2f2 	sdiv	r2, r3, r2
 800c194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c196:	fb01 f202 	mul.w	r2, r1, r2
 800c19a:	1a9b      	subs	r3, r3, r2
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d102      	bne.n	800c1a6 <drawRect+0xb6>
                indexCol++;
 800c1a0:	6a3b      	ldr	r3, [r7, #32]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	61bb      	str	r3, [r7, #24]
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1b4:	fb02 f303 	mul.w	r3, r2, r3
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	69ba      	ldr	r2, [r7, #24]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	ddb3      	ble.n	800c128 <drawRect+0x38>
            }
        }
        if ((row - (y_start * scaling_v + IMAGE_Y) + 1) % scaling_v == 0) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c4:	fb02 f303 	mul.w	r3, r2, r3
 800c1c8:	3346      	adds	r3, #70	; 0x46
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1d2:	fb93 f2f2 	sdiv	r2, r3, r2
 800c1d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1d8:	fb01 f202 	mul.w	r2, r1, r2
 800c1dc:	1a9b      	subs	r3, r3, r2
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d102      	bne.n	800c1e8 <drawRect+0xf8>
            indexRow++;
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	61fb      	str	r3, [r7, #28]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	4413      	add	r3, r2
 800c1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1f6:	fb02 f303 	mul.w	r3, r2, r3
 800c1fa:	3345      	adds	r3, #69	; 0x45
 800c1fc:	69fa      	ldr	r2, [r7, #28]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	dd89      	ble.n	800c116 <drawRect+0x26>
        }
    }
}
 800c202:	bf00      	nop
 800c204:	bf00      	nop
 800c206:	372c      	adds	r7, #44	; 0x2c
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <drawRect_color>:
 * @param height height of rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param color color to draw in rectangle
 */
void drawRect_color(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t color) {
 800c210:	b480      	push	{r7}
 800c212:	b089      	sub	sp, #36	; 0x24
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
 800c21c:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	617b      	str	r3, [r7, #20]

    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c228:	fb02 f303 	mul.w	r3, r2, r3
 800c22c:	3346      	adds	r3, #70	; 0x46
 800c22e:	61fb      	str	r3, [r7, #28]
 800c230:	e02d      	b.n	800c28e <drawRect_color+0x7e>
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c236:	fb02 f303 	mul.w	r3, r2, r3
 800c23a:	3302      	adds	r3, #2
 800c23c:	61bb      	str	r3, [r7, #24]
 800c23e:	e019      	b.n	800c274 <drawRect_color+0x64>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X) {
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	2b45      	cmp	r3, #69	; 0x45
 800c244:	dd13      	ble.n	800c26e <drawRect_color+0x5e>
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c24c:	da0f      	bge.n	800c26e <drawRect_color+0x5e>
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	2b01      	cmp	r3, #1
 800c252:	dd0c      	ble.n	800c26e <drawRect_color+0x5e>
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	2b51      	cmp	r3, #81	; 0x51
 800c258:	dc09      	bgt.n	800c26e <drawRect_color+0x5e>
            	buff[row][col] = color;
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	4413      	add	r3, r2
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	4413      	add	r3, r2
 800c268:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800c26c:	701a      	strb	r2, [r3, #0]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	3301      	adds	r3, #1
 800c272:	61bb      	str	r3, [r7, #24]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	4413      	add	r3, r2
 800c27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c27c:	fb02 f303 	mul.w	r3, r2, r3
 800c280:	3301      	adds	r3, #1
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	429a      	cmp	r2, r3
 800c286:	dddb      	ble.n	800c240 <drawRect_color+0x30>
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	3301      	adds	r3, #1
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	4413      	add	r3, r2
 800c294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c296:	fb02 f303 	mul.w	r3, r2, r3
 800c29a:	3345      	adds	r3, #69	; 0x45
 800c29c:	69fa      	ldr	r2, [r7, #28]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	ddc7      	ble.n	800c232 <drawRect_color+0x22>
            }
        }
    }
}
 800c2a2:	bf00      	nop
 800c2a4:	bf00      	nop
 800c2a6:	3724      	adds	r7, #36	; 0x24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <tetris_drawBackground>:
/**
 * @brief draw the background - a series of sine waves
 *
 * @param window window to draw to
 */
void tetris_drawBackground(Window* window) {
 800c2b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c2b4:	b086      	sub	sp, #24
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
	float y_repeat = IMAGE_HEIGHT / 5.4;
 800c2ba:	4b48      	ldr	r3, [pc, #288]	; (800c3dc <tetris_drawBackground+0x12c>)
 800c2bc:	60fb      	str	r3, [r7, #12]
	for (int row = IMAGE_Y; row < IMAGE_HEIGHT + IMAGE_Y; row++) {
 800c2be:	2346      	movs	r3, #70	; 0x46
 800c2c0:	617b      	str	r3, [r7, #20]
 800c2c2:	e07f      	b.n	800c3c4 <tetris_drawBackground+0x114>
	        for (int col = IMAGE_X; col < IMAGE_WIDTH + IMAGE_X; col++) {
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	e076      	b.n	800c3b8 <tetris_drawBackground+0x108>
	        	if (col < IMAGE_X + BOARD_X + BOARD_WIDTH * 2 + 5) {
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2b1b      	cmp	r3, #27
 800c2ce:	dc0a      	bgt.n	800c2e6 <tetris_drawBackground+0x36>
	        		window->frame[row][col] = 100;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	689a      	ldr	r2, [r3, #8]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	4413      	add	r3, r2
 800c2e0:	2264      	movs	r2, #100	; 0x64
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	e065      	b.n	800c3b2 <tetris_drawBackground+0x102>
	        	} else {
		        	float sin_diff = abs(10.0 * arm_sin_f32(0.5 * col) + 9.0 - fmod(row, y_repeat) );
 800c2e6:	6938      	ldr	r0, [r7, #16]
 800c2e8:	f7f4 f92c 	bl	8000544 <__aeabi_i2d>
 800c2ec:	f04f 0200 	mov.w	r2, #0
 800c2f0:	4b3b      	ldr	r3, [pc, #236]	; (800c3e0 <tetris_drawBackground+0x130>)
 800c2f2:	f7f4 f991 	bl	8000618 <__aeabi_dmul>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	f7f4 fc63 	bl	8000bc8 <__aeabi_d2f>
 800c302:	4603      	mov	r3, r0
 800c304:	ee00 3a10 	vmov	s0, r3
 800c308:	f000 f89a 	bl	800c440 <arm_sin_f32>
 800c30c:	ee10 3a10 	vmov	r3, s0
 800c310:	4618      	mov	r0, r3
 800c312:	f7f4 f929 	bl	8000568 <__aeabi_f2d>
 800c316:	f04f 0200 	mov.w	r2, #0
 800c31a:	4b32      	ldr	r3, [pc, #200]	; (800c3e4 <tetris_drawBackground+0x134>)
 800c31c:	f7f4 f97c 	bl	8000618 <__aeabi_dmul>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4610      	mov	r0, r2
 800c326:	4619      	mov	r1, r3
 800c328:	f04f 0200 	mov.w	r2, #0
 800c32c:	4b2e      	ldr	r3, [pc, #184]	; (800c3e8 <tetris_drawBackground+0x138>)
 800c32e:	f7f3 ffbd 	bl	80002ac <__adddf3>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4614      	mov	r4, r2
 800c338:	461d      	mov	r5, r3
 800c33a:	6978      	ldr	r0, [r7, #20]
 800c33c:	f7f4 f902 	bl	8000544 <__aeabi_i2d>
 800c340:	4680      	mov	r8, r0
 800c342:	4689      	mov	r9, r1
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f7f4 f90f 	bl	8000568 <__aeabi_f2d>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	ec43 2b11 	vmov	d1, r2, r3
 800c352:	ec49 8b10 	vmov	d0, r8, r9
 800c356:	f001 fb59 	bl	800da0c <fmod>
 800c35a:	ec53 2b10 	vmov	r2, r3, d0
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f7f3 ffa1 	bl	80002a8 <__aeabi_dsub>
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	4610      	mov	r0, r2
 800c36c:	4619      	mov	r1, r3
 800c36e:	f7f4 fc03 	bl	8000b78 <__aeabi_d2iz>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	bfb8      	it	lt
 800c378:	425b      	neglt	r3, r3
 800c37a:	ee07 3a90 	vmov	s15, r3
 800c37e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c382:	edc7 7a02 	vstr	s15, [r7, #8]
		        	window->frame[row][col] = (sin_diff < 4.0) ? 50 : 150;
 800c386:	edd7 7a02 	vldr	s15, [r7, #8]
 800c38a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c38e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c396:	d501      	bpl.n	800c39c <tetris_drawBackground+0xec>
 800c398:	2132      	movs	r1, #50	; 0x32
 800c39a:	e000      	b.n	800c39e <tetris_drawBackground+0xee>
 800c39c:	2196      	movs	r1, #150	; 0x96
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	689a      	ldr	r2, [r3, #8]
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	460a      	mov	r2, r1
 800c3b0:	701a      	strb	r2, [r3, #0]
	        for (int col = IMAGE_X; col < IMAGE_WIDTH + IMAGE_X; col++) {
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	613b      	str	r3, [r7, #16]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	2b51      	cmp	r3, #81	; 0x51
 800c3bc:	dd85      	ble.n	800c2ca <tetris_drawBackground+0x1a>
	for (int row = IMAGE_Y; row < IMAGE_HEIGHT + IMAGE_Y; row++) {
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	617b      	str	r3, [r7, #20]
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c3ca:	f6ff af7b 	blt.w	800c2c4 <tetris_drawBackground+0x14>
	        	}

	        }
	    }
 }
 800c3ce:	bf00      	nop
 800c3d0:	bf00      	nop
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c3da:	bf00      	nop
 800c3dc:	4281a12f 	.word	0x4281a12f
 800c3e0:	3fe00000 	.word	0x3fe00000
 800c3e4:	40240000 	.word	0x40240000
 800c3e8:	40220000 	.word	0x40220000

0800c3ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800c3ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c424 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c3f0:	f7ff f832 	bl	800b458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c3f4:	480c      	ldr	r0, [pc, #48]	; (800c428 <LoopForever+0x6>)
  ldr r1, =_edata
 800c3f6:	490d      	ldr	r1, [pc, #52]	; (800c42c <LoopForever+0xa>)
 ldr r2, =_sidata
 800c3f8:	4a0d      	ldr	r2, [pc, #52]	; (800c430 <LoopForever+0xe>)
  movs r3, #0
 800c3fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c3fc:	e002      	b.n	800c404 <LoopCopyDataInit>

0800c3fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c3fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c402:	3304      	adds	r3, #4

0800c404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c408:	d3f9      	bcc.n	800c3fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c40a:	4a0a      	ldr	r2, [pc, #40]	; (800c434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c40c:	4c0a      	ldr	r4, [pc, #40]	; (800c438 <LoopForever+0x16>)
  movs r3, #0
 800c40e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c410:	e001      	b.n	800c416 <LoopFillZerobss>

0800c412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c414:	3204      	adds	r2, #4

0800c416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c418:	d3fb      	bcc.n	800c412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c41a:	f000 f953 	bl	800c6c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c41e:	f7fd ffad 	bl	800a37c <main>

0800c422 <LoopForever>:

LoopForever:
    b LoopForever
 800c422:	e7fe      	b.n	800c422 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800c424:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800c428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c42c:	200006a0 	.word	0x200006a0
 ldr r2, =_sidata
 800c430:	0800e850 	.word	0x0800e850
  ldr r2, =_sbss
 800c434:	200006a0 	.word	0x200006a0
  ldr r4, =_ebss
 800c438:	2001aae4 	.word	0x2001aae4

0800c43c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c43c:	e7fe      	b.n	800c43c <ADC1_IRQHandler>
	...

0800c440 <arm_sin_f32>:
 800c440:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c4c0 <arm_sin_f32+0x80>
 800c444:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c448:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c450:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c454:	d504      	bpl.n	800c460 <arm_sin_f32+0x20>
 800c456:	ee17 3a90 	vmov	r3, s15
 800c45a:	3b01      	subs	r3, #1
 800c45c:	ee07 3a90 	vmov	s15, r3
 800c460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c464:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c4c4 <arm_sin_f32+0x84>
 800c468:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c46c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c470:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c474:	ee17 3a90 	vmov	r3, s15
 800c478:	b29b      	uxth	r3, r3
 800c47a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c47e:	d21a      	bcs.n	800c4b6 <arm_sin_f32+0x76>
 800c480:	ee07 3a90 	vmov	s15, r3
 800c484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c488:	1c59      	adds	r1, r3, #1
 800c48a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c48e:	4a0e      	ldr	r2, [pc, #56]	; (800c4c8 <arm_sin_f32+0x88>)
 800c490:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c498:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c49c:	ed93 7a00 	vldr	s14, [r3]
 800c4a0:	edd2 6a00 	vldr	s13, [r2]
 800c4a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c4a8:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c4ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4b0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c4b4:	4770      	bx	lr
 800c4b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	2300      	movs	r3, #0
 800c4be:	e7e6      	b.n	800c48e <arm_sin_f32+0x4e>
 800c4c0:	3e22f983 	.word	0x3e22f983
 800c4c4:	44000000 	.word	0x44000000
 800c4c8:	0800dedc 	.word	0x0800dedc

0800c4cc <__errno>:
 800c4cc:	4b01      	ldr	r3, [pc, #4]	; (800c4d4 <__errno+0x8>)
 800c4ce:	6818      	ldr	r0, [r3, #0]
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20000638 	.word	0x20000638

0800c4d8 <std>:
 800c4d8:	2300      	movs	r3, #0
 800c4da:	b510      	push	{r4, lr}
 800c4dc:	4604      	mov	r4, r0
 800c4de:	e9c0 3300 	strd	r3, r3, [r0]
 800c4e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4e6:	6083      	str	r3, [r0, #8]
 800c4e8:	8181      	strh	r1, [r0, #12]
 800c4ea:	6643      	str	r3, [r0, #100]	; 0x64
 800c4ec:	81c2      	strh	r2, [r0, #14]
 800c4ee:	6183      	str	r3, [r0, #24]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	2208      	movs	r2, #8
 800c4f4:	305c      	adds	r0, #92	; 0x5c
 800c4f6:	f000 f923 	bl	800c740 <memset>
 800c4fa:	4b05      	ldr	r3, [pc, #20]	; (800c510 <std+0x38>)
 800c4fc:	6263      	str	r3, [r4, #36]	; 0x24
 800c4fe:	4b05      	ldr	r3, [pc, #20]	; (800c514 <std+0x3c>)
 800c500:	62a3      	str	r3, [r4, #40]	; 0x28
 800c502:	4b05      	ldr	r3, [pc, #20]	; (800c518 <std+0x40>)
 800c504:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c506:	4b05      	ldr	r3, [pc, #20]	; (800c51c <std+0x44>)
 800c508:	6224      	str	r4, [r4, #32]
 800c50a:	6323      	str	r3, [r4, #48]	; 0x30
 800c50c:	bd10      	pop	{r4, pc}
 800c50e:	bf00      	nop
 800c510:	0800cab5 	.word	0x0800cab5
 800c514:	0800cad7 	.word	0x0800cad7
 800c518:	0800cb0f 	.word	0x0800cb0f
 800c51c:	0800cb33 	.word	0x0800cb33

0800c520 <_cleanup_r>:
 800c520:	4901      	ldr	r1, [pc, #4]	; (800c528 <_cleanup_r+0x8>)
 800c522:	f000 b8af 	b.w	800c684 <_fwalk_reent>
 800c526:	bf00      	nop
 800c528:	0800ccc9 	.word	0x0800ccc9

0800c52c <__sfmoreglue>:
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	1e4a      	subs	r2, r1, #1
 800c530:	2568      	movs	r5, #104	; 0x68
 800c532:	4355      	muls	r5, r2
 800c534:	460e      	mov	r6, r1
 800c536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c53a:	f000 f959 	bl	800c7f0 <_malloc_r>
 800c53e:	4604      	mov	r4, r0
 800c540:	b140      	cbz	r0, 800c554 <__sfmoreglue+0x28>
 800c542:	2100      	movs	r1, #0
 800c544:	e9c0 1600 	strd	r1, r6, [r0]
 800c548:	300c      	adds	r0, #12
 800c54a:	60a0      	str	r0, [r4, #8]
 800c54c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c550:	f000 f8f6 	bl	800c740 <memset>
 800c554:	4620      	mov	r0, r4
 800c556:	bd70      	pop	{r4, r5, r6, pc}

0800c558 <__sfp_lock_acquire>:
 800c558:	4801      	ldr	r0, [pc, #4]	; (800c560 <__sfp_lock_acquire+0x8>)
 800c55a:	f000 b8d8 	b.w	800c70e <__retarget_lock_acquire_recursive>
 800c55e:	bf00      	nop
 800c560:	2001aadc 	.word	0x2001aadc

0800c564 <__sfp_lock_release>:
 800c564:	4801      	ldr	r0, [pc, #4]	; (800c56c <__sfp_lock_release+0x8>)
 800c566:	f000 b8d3 	b.w	800c710 <__retarget_lock_release_recursive>
 800c56a:	bf00      	nop
 800c56c:	2001aadc 	.word	0x2001aadc

0800c570 <__sinit_lock_acquire>:
 800c570:	4801      	ldr	r0, [pc, #4]	; (800c578 <__sinit_lock_acquire+0x8>)
 800c572:	f000 b8cc 	b.w	800c70e <__retarget_lock_acquire_recursive>
 800c576:	bf00      	nop
 800c578:	2001aad7 	.word	0x2001aad7

0800c57c <__sinit_lock_release>:
 800c57c:	4801      	ldr	r0, [pc, #4]	; (800c584 <__sinit_lock_release+0x8>)
 800c57e:	f000 b8c7 	b.w	800c710 <__retarget_lock_release_recursive>
 800c582:	bf00      	nop
 800c584:	2001aad7 	.word	0x2001aad7

0800c588 <__sinit>:
 800c588:	b510      	push	{r4, lr}
 800c58a:	4604      	mov	r4, r0
 800c58c:	f7ff fff0 	bl	800c570 <__sinit_lock_acquire>
 800c590:	69a3      	ldr	r3, [r4, #24]
 800c592:	b11b      	cbz	r3, 800c59c <__sinit+0x14>
 800c594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c598:	f7ff bff0 	b.w	800c57c <__sinit_lock_release>
 800c59c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5a0:	6523      	str	r3, [r4, #80]	; 0x50
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <__sinit+0x68>)
 800c5a4:	4a13      	ldr	r2, [pc, #76]	; (800c5f4 <__sinit+0x6c>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5aa:	42a3      	cmp	r3, r4
 800c5ac:	bf04      	itt	eq
 800c5ae:	2301      	moveq	r3, #1
 800c5b0:	61a3      	streq	r3, [r4, #24]
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 f820 	bl	800c5f8 <__sfp>
 800c5b8:	6060      	str	r0, [r4, #4]
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 f81c 	bl	800c5f8 <__sfp>
 800c5c0:	60a0      	str	r0, [r4, #8]
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 f818 	bl	800c5f8 <__sfp>
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	60e0      	str	r0, [r4, #12]
 800c5cc:	2104      	movs	r1, #4
 800c5ce:	6860      	ldr	r0, [r4, #4]
 800c5d0:	f7ff ff82 	bl	800c4d8 <std>
 800c5d4:	68a0      	ldr	r0, [r4, #8]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	2109      	movs	r1, #9
 800c5da:	f7ff ff7d 	bl	800c4d8 <std>
 800c5de:	68e0      	ldr	r0, [r4, #12]
 800c5e0:	2202      	movs	r2, #2
 800c5e2:	2112      	movs	r1, #18
 800c5e4:	f7ff ff78 	bl	800c4d8 <std>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	61a3      	str	r3, [r4, #24]
 800c5ec:	e7d2      	b.n	800c594 <__sinit+0xc>
 800c5ee:	bf00      	nop
 800c5f0:	0800e740 	.word	0x0800e740
 800c5f4:	0800c521 	.word	0x0800c521

0800c5f8 <__sfp>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	4607      	mov	r7, r0
 800c5fc:	f7ff ffac 	bl	800c558 <__sfp_lock_acquire>
 800c600:	4b1e      	ldr	r3, [pc, #120]	; (800c67c <__sfp+0x84>)
 800c602:	681e      	ldr	r6, [r3, #0]
 800c604:	69b3      	ldr	r3, [r6, #24]
 800c606:	b913      	cbnz	r3, 800c60e <__sfp+0x16>
 800c608:	4630      	mov	r0, r6
 800c60a:	f7ff ffbd 	bl	800c588 <__sinit>
 800c60e:	3648      	adds	r6, #72	; 0x48
 800c610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c614:	3b01      	subs	r3, #1
 800c616:	d503      	bpl.n	800c620 <__sfp+0x28>
 800c618:	6833      	ldr	r3, [r6, #0]
 800c61a:	b30b      	cbz	r3, 800c660 <__sfp+0x68>
 800c61c:	6836      	ldr	r6, [r6, #0]
 800c61e:	e7f7      	b.n	800c610 <__sfp+0x18>
 800c620:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c624:	b9d5      	cbnz	r5, 800c65c <__sfp+0x64>
 800c626:	4b16      	ldr	r3, [pc, #88]	; (800c680 <__sfp+0x88>)
 800c628:	60e3      	str	r3, [r4, #12]
 800c62a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c62e:	6665      	str	r5, [r4, #100]	; 0x64
 800c630:	f000 f86c 	bl	800c70c <__retarget_lock_init_recursive>
 800c634:	f7ff ff96 	bl	800c564 <__sfp_lock_release>
 800c638:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c63c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c640:	6025      	str	r5, [r4, #0]
 800c642:	61a5      	str	r5, [r4, #24]
 800c644:	2208      	movs	r2, #8
 800c646:	4629      	mov	r1, r5
 800c648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c64c:	f000 f878 	bl	800c740 <memset>
 800c650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c658:	4620      	mov	r0, r4
 800c65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c65c:	3468      	adds	r4, #104	; 0x68
 800c65e:	e7d9      	b.n	800c614 <__sfp+0x1c>
 800c660:	2104      	movs	r1, #4
 800c662:	4638      	mov	r0, r7
 800c664:	f7ff ff62 	bl	800c52c <__sfmoreglue>
 800c668:	4604      	mov	r4, r0
 800c66a:	6030      	str	r0, [r6, #0]
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d1d5      	bne.n	800c61c <__sfp+0x24>
 800c670:	f7ff ff78 	bl	800c564 <__sfp_lock_release>
 800c674:	230c      	movs	r3, #12
 800c676:	603b      	str	r3, [r7, #0]
 800c678:	e7ee      	b.n	800c658 <__sfp+0x60>
 800c67a:	bf00      	nop
 800c67c:	0800e740 	.word	0x0800e740
 800c680:	ffff0001 	.word	0xffff0001

0800c684 <_fwalk_reent>:
 800c684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c688:	4606      	mov	r6, r0
 800c68a:	4688      	mov	r8, r1
 800c68c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c690:	2700      	movs	r7, #0
 800c692:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c696:	f1b9 0901 	subs.w	r9, r9, #1
 800c69a:	d505      	bpl.n	800c6a8 <_fwalk_reent+0x24>
 800c69c:	6824      	ldr	r4, [r4, #0]
 800c69e:	2c00      	cmp	r4, #0
 800c6a0:	d1f7      	bne.n	800c692 <_fwalk_reent+0xe>
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a8:	89ab      	ldrh	r3, [r5, #12]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d907      	bls.n	800c6be <_fwalk_reent+0x3a>
 800c6ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	d003      	beq.n	800c6be <_fwalk_reent+0x3a>
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	47c0      	blx	r8
 800c6bc:	4307      	orrs	r7, r0
 800c6be:	3568      	adds	r5, #104	; 0x68
 800c6c0:	e7e9      	b.n	800c696 <_fwalk_reent+0x12>
	...

0800c6c4 <__libc_init_array>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	4d0d      	ldr	r5, [pc, #52]	; (800c6fc <__libc_init_array+0x38>)
 800c6c8:	4c0d      	ldr	r4, [pc, #52]	; (800c700 <__libc_init_array+0x3c>)
 800c6ca:	1b64      	subs	r4, r4, r5
 800c6cc:	10a4      	asrs	r4, r4, #2
 800c6ce:	2600      	movs	r6, #0
 800c6d0:	42a6      	cmp	r6, r4
 800c6d2:	d109      	bne.n	800c6e8 <__libc_init_array+0x24>
 800c6d4:	4d0b      	ldr	r5, [pc, #44]	; (800c704 <__libc_init_array+0x40>)
 800c6d6:	4c0c      	ldr	r4, [pc, #48]	; (800c708 <__libc_init_array+0x44>)
 800c6d8:	f001 fae6 	bl	800dca8 <_init>
 800c6dc:	1b64      	subs	r4, r4, r5
 800c6de:	10a4      	asrs	r4, r4, #2
 800c6e0:	2600      	movs	r6, #0
 800c6e2:	42a6      	cmp	r6, r4
 800c6e4:	d105      	bne.n	800c6f2 <__libc_init_array+0x2e>
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ec:	4798      	blx	r3
 800c6ee:	3601      	adds	r6, #1
 800c6f0:	e7ee      	b.n	800c6d0 <__libc_init_array+0xc>
 800c6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f6:	4798      	blx	r3
 800c6f8:	3601      	adds	r6, #1
 800c6fa:	e7f2      	b.n	800c6e2 <__libc_init_array+0x1e>
 800c6fc:	0800e848 	.word	0x0800e848
 800c700:	0800e848 	.word	0x0800e848
 800c704:	0800e848 	.word	0x0800e848
 800c708:	0800e84c 	.word	0x0800e84c

0800c70c <__retarget_lock_init_recursive>:
 800c70c:	4770      	bx	lr

0800c70e <__retarget_lock_acquire_recursive>:
 800c70e:	4770      	bx	lr

0800c710 <__retarget_lock_release_recursive>:
 800c710:	4770      	bx	lr
	...

0800c714 <malloc>:
 800c714:	4b02      	ldr	r3, [pc, #8]	; (800c720 <malloc+0xc>)
 800c716:	4601      	mov	r1, r0
 800c718:	6818      	ldr	r0, [r3, #0]
 800c71a:	f000 b869 	b.w	800c7f0 <_malloc_r>
 800c71e:	bf00      	nop
 800c720:	20000638 	.word	0x20000638

0800c724 <memcpy>:
 800c724:	440a      	add	r2, r1
 800c726:	4291      	cmp	r1, r2
 800c728:	f100 33ff 	add.w	r3, r0, #4294967295
 800c72c:	d100      	bne.n	800c730 <memcpy+0xc>
 800c72e:	4770      	bx	lr
 800c730:	b510      	push	{r4, lr}
 800c732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c73a:	4291      	cmp	r1, r2
 800c73c:	d1f9      	bne.n	800c732 <memcpy+0xe>
 800c73e:	bd10      	pop	{r4, pc}

0800c740 <memset>:
 800c740:	4402      	add	r2, r0
 800c742:	4603      	mov	r3, r0
 800c744:	4293      	cmp	r3, r2
 800c746:	d100      	bne.n	800c74a <memset+0xa>
 800c748:	4770      	bx	lr
 800c74a:	f803 1b01 	strb.w	r1, [r3], #1
 800c74e:	e7f9      	b.n	800c744 <memset+0x4>

0800c750 <_free_r>:
 800c750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c752:	2900      	cmp	r1, #0
 800c754:	d048      	beq.n	800c7e8 <_free_r+0x98>
 800c756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c75a:	9001      	str	r0, [sp, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f1a1 0404 	sub.w	r4, r1, #4
 800c762:	bfb8      	it	lt
 800c764:	18e4      	addlt	r4, r4, r3
 800c766:	f000 fb0f 	bl	800cd88 <__malloc_lock>
 800c76a:	4a20      	ldr	r2, [pc, #128]	; (800c7ec <_free_r+0x9c>)
 800c76c:	9801      	ldr	r0, [sp, #4]
 800c76e:	6813      	ldr	r3, [r2, #0]
 800c770:	4615      	mov	r5, r2
 800c772:	b933      	cbnz	r3, 800c782 <_free_r+0x32>
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	6014      	str	r4, [r2, #0]
 800c778:	b003      	add	sp, #12
 800c77a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c77e:	f000 bb09 	b.w	800cd94 <__malloc_unlock>
 800c782:	42a3      	cmp	r3, r4
 800c784:	d90b      	bls.n	800c79e <_free_r+0x4e>
 800c786:	6821      	ldr	r1, [r4, #0]
 800c788:	1862      	adds	r2, r4, r1
 800c78a:	4293      	cmp	r3, r2
 800c78c:	bf04      	itt	eq
 800c78e:	681a      	ldreq	r2, [r3, #0]
 800c790:	685b      	ldreq	r3, [r3, #4]
 800c792:	6063      	str	r3, [r4, #4]
 800c794:	bf04      	itt	eq
 800c796:	1852      	addeq	r2, r2, r1
 800c798:	6022      	streq	r2, [r4, #0]
 800c79a:	602c      	str	r4, [r5, #0]
 800c79c:	e7ec      	b.n	800c778 <_free_r+0x28>
 800c79e:	461a      	mov	r2, r3
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	b10b      	cbz	r3, 800c7a8 <_free_r+0x58>
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	d9fa      	bls.n	800c79e <_free_r+0x4e>
 800c7a8:	6811      	ldr	r1, [r2, #0]
 800c7aa:	1855      	adds	r5, r2, r1
 800c7ac:	42a5      	cmp	r5, r4
 800c7ae:	d10b      	bne.n	800c7c8 <_free_r+0x78>
 800c7b0:	6824      	ldr	r4, [r4, #0]
 800c7b2:	4421      	add	r1, r4
 800c7b4:	1854      	adds	r4, r2, r1
 800c7b6:	42a3      	cmp	r3, r4
 800c7b8:	6011      	str	r1, [r2, #0]
 800c7ba:	d1dd      	bne.n	800c778 <_free_r+0x28>
 800c7bc:	681c      	ldr	r4, [r3, #0]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	6053      	str	r3, [r2, #4]
 800c7c2:	4421      	add	r1, r4
 800c7c4:	6011      	str	r1, [r2, #0]
 800c7c6:	e7d7      	b.n	800c778 <_free_r+0x28>
 800c7c8:	d902      	bls.n	800c7d0 <_free_r+0x80>
 800c7ca:	230c      	movs	r3, #12
 800c7cc:	6003      	str	r3, [r0, #0]
 800c7ce:	e7d3      	b.n	800c778 <_free_r+0x28>
 800c7d0:	6825      	ldr	r5, [r4, #0]
 800c7d2:	1961      	adds	r1, r4, r5
 800c7d4:	428b      	cmp	r3, r1
 800c7d6:	bf04      	itt	eq
 800c7d8:	6819      	ldreq	r1, [r3, #0]
 800c7da:	685b      	ldreq	r3, [r3, #4]
 800c7dc:	6063      	str	r3, [r4, #4]
 800c7de:	bf04      	itt	eq
 800c7e0:	1949      	addeq	r1, r1, r5
 800c7e2:	6021      	streq	r1, [r4, #0]
 800c7e4:	6054      	str	r4, [r2, #4]
 800c7e6:	e7c7      	b.n	800c778 <_free_r+0x28>
 800c7e8:	b003      	add	sp, #12
 800c7ea:	bd30      	pop	{r4, r5, pc}
 800c7ec:	20002054 	.word	0x20002054

0800c7f0 <_malloc_r>:
 800c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f2:	1ccd      	adds	r5, r1, #3
 800c7f4:	f025 0503 	bic.w	r5, r5, #3
 800c7f8:	3508      	adds	r5, #8
 800c7fa:	2d0c      	cmp	r5, #12
 800c7fc:	bf38      	it	cc
 800c7fe:	250c      	movcc	r5, #12
 800c800:	2d00      	cmp	r5, #0
 800c802:	4606      	mov	r6, r0
 800c804:	db01      	blt.n	800c80a <_malloc_r+0x1a>
 800c806:	42a9      	cmp	r1, r5
 800c808:	d903      	bls.n	800c812 <_malloc_r+0x22>
 800c80a:	230c      	movs	r3, #12
 800c80c:	6033      	str	r3, [r6, #0]
 800c80e:	2000      	movs	r0, #0
 800c810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c812:	f000 fab9 	bl	800cd88 <__malloc_lock>
 800c816:	4921      	ldr	r1, [pc, #132]	; (800c89c <_malloc_r+0xac>)
 800c818:	680a      	ldr	r2, [r1, #0]
 800c81a:	4614      	mov	r4, r2
 800c81c:	b99c      	cbnz	r4, 800c846 <_malloc_r+0x56>
 800c81e:	4f20      	ldr	r7, [pc, #128]	; (800c8a0 <_malloc_r+0xb0>)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	b923      	cbnz	r3, 800c82e <_malloc_r+0x3e>
 800c824:	4621      	mov	r1, r4
 800c826:	4630      	mov	r0, r6
 800c828:	f000 f914 	bl	800ca54 <_sbrk_r>
 800c82c:	6038      	str	r0, [r7, #0]
 800c82e:	4629      	mov	r1, r5
 800c830:	4630      	mov	r0, r6
 800c832:	f000 f90f 	bl	800ca54 <_sbrk_r>
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	d123      	bne.n	800c882 <_malloc_r+0x92>
 800c83a:	230c      	movs	r3, #12
 800c83c:	6033      	str	r3, [r6, #0]
 800c83e:	4630      	mov	r0, r6
 800c840:	f000 faa8 	bl	800cd94 <__malloc_unlock>
 800c844:	e7e3      	b.n	800c80e <_malloc_r+0x1e>
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	1b5b      	subs	r3, r3, r5
 800c84a:	d417      	bmi.n	800c87c <_malloc_r+0x8c>
 800c84c:	2b0b      	cmp	r3, #11
 800c84e:	d903      	bls.n	800c858 <_malloc_r+0x68>
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	441c      	add	r4, r3
 800c854:	6025      	str	r5, [r4, #0]
 800c856:	e004      	b.n	800c862 <_malloc_r+0x72>
 800c858:	6863      	ldr	r3, [r4, #4]
 800c85a:	42a2      	cmp	r2, r4
 800c85c:	bf0c      	ite	eq
 800c85e:	600b      	streq	r3, [r1, #0]
 800c860:	6053      	strne	r3, [r2, #4]
 800c862:	4630      	mov	r0, r6
 800c864:	f000 fa96 	bl	800cd94 <__malloc_unlock>
 800c868:	f104 000b 	add.w	r0, r4, #11
 800c86c:	1d23      	adds	r3, r4, #4
 800c86e:	f020 0007 	bic.w	r0, r0, #7
 800c872:	1ac2      	subs	r2, r0, r3
 800c874:	d0cc      	beq.n	800c810 <_malloc_r+0x20>
 800c876:	1a1b      	subs	r3, r3, r0
 800c878:	50a3      	str	r3, [r4, r2]
 800c87a:	e7c9      	b.n	800c810 <_malloc_r+0x20>
 800c87c:	4622      	mov	r2, r4
 800c87e:	6864      	ldr	r4, [r4, #4]
 800c880:	e7cc      	b.n	800c81c <_malloc_r+0x2c>
 800c882:	1cc4      	adds	r4, r0, #3
 800c884:	f024 0403 	bic.w	r4, r4, #3
 800c888:	42a0      	cmp	r0, r4
 800c88a:	d0e3      	beq.n	800c854 <_malloc_r+0x64>
 800c88c:	1a21      	subs	r1, r4, r0
 800c88e:	4630      	mov	r0, r6
 800c890:	f000 f8e0 	bl	800ca54 <_sbrk_r>
 800c894:	3001      	adds	r0, #1
 800c896:	d1dd      	bne.n	800c854 <_malloc_r+0x64>
 800c898:	e7cf      	b.n	800c83a <_malloc_r+0x4a>
 800c89a:	bf00      	nop
 800c89c:	20002054 	.word	0x20002054
 800c8a0:	20002058 	.word	0x20002058

0800c8a4 <srand>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4b10      	ldr	r3, [pc, #64]	; (800c8e8 <srand+0x44>)
 800c8a8:	681d      	ldr	r5, [r3, #0]
 800c8aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	b9b3      	cbnz	r3, 800c8de <srand+0x3a>
 800c8b0:	2018      	movs	r0, #24
 800c8b2:	f7ff ff2f 	bl	800c714 <malloc>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	63a8      	str	r0, [r5, #56]	; 0x38
 800c8ba:	b920      	cbnz	r0, 800c8c6 <srand+0x22>
 800c8bc:	4b0b      	ldr	r3, [pc, #44]	; (800c8ec <srand+0x48>)
 800c8be:	480c      	ldr	r0, [pc, #48]	; (800c8f0 <srand+0x4c>)
 800c8c0:	2142      	movs	r1, #66	; 0x42
 800c8c2:	f000 f94d 	bl	800cb60 <__assert_func>
 800c8c6:	490b      	ldr	r1, [pc, #44]	; (800c8f4 <srand+0x50>)
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <srand+0x54>)
 800c8ca:	e9c0 1300 	strd	r1, r3, [r0]
 800c8ce:	4b0b      	ldr	r3, [pc, #44]	; (800c8fc <srand+0x58>)
 800c8d0:	6083      	str	r3, [r0, #8]
 800c8d2:	230b      	movs	r3, #11
 800c8d4:	8183      	strh	r3, [r0, #12]
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	2001      	movs	r0, #1
 800c8da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c8de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	611c      	str	r4, [r3, #16]
 800c8e4:	615a      	str	r2, [r3, #20]
 800c8e6:	bd38      	pop	{r3, r4, r5, pc}
 800c8e8:	20000638 	.word	0x20000638
 800c8ec:	0800e744 	.word	0x0800e744
 800c8f0:	0800e75b 	.word	0x0800e75b
 800c8f4:	abcd330e 	.word	0xabcd330e
 800c8f8:	e66d1234 	.word	0xe66d1234
 800c8fc:	0005deec 	.word	0x0005deec

0800c900 <rand>:
 800c900:	4b17      	ldr	r3, [pc, #92]	; (800c960 <rand+0x60>)
 800c902:	b510      	push	{r4, lr}
 800c904:	681c      	ldr	r4, [r3, #0]
 800c906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c908:	b9b3      	cbnz	r3, 800c938 <rand+0x38>
 800c90a:	2018      	movs	r0, #24
 800c90c:	f7ff ff02 	bl	800c714 <malloc>
 800c910:	63a0      	str	r0, [r4, #56]	; 0x38
 800c912:	b928      	cbnz	r0, 800c920 <rand+0x20>
 800c914:	4602      	mov	r2, r0
 800c916:	4b13      	ldr	r3, [pc, #76]	; (800c964 <rand+0x64>)
 800c918:	4813      	ldr	r0, [pc, #76]	; (800c968 <rand+0x68>)
 800c91a:	214e      	movs	r1, #78	; 0x4e
 800c91c:	f000 f920 	bl	800cb60 <__assert_func>
 800c920:	4a12      	ldr	r2, [pc, #72]	; (800c96c <rand+0x6c>)
 800c922:	4b13      	ldr	r3, [pc, #76]	; (800c970 <rand+0x70>)
 800c924:	e9c0 2300 	strd	r2, r3, [r0]
 800c928:	4b12      	ldr	r3, [pc, #72]	; (800c974 <rand+0x74>)
 800c92a:	6083      	str	r3, [r0, #8]
 800c92c:	230b      	movs	r3, #11
 800c92e:	8183      	strh	r3, [r0, #12]
 800c930:	2201      	movs	r2, #1
 800c932:	2300      	movs	r3, #0
 800c934:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c938:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c93a:	480f      	ldr	r0, [pc, #60]	; (800c978 <rand+0x78>)
 800c93c:	690a      	ldr	r2, [r1, #16]
 800c93e:	694b      	ldr	r3, [r1, #20]
 800c940:	4c0e      	ldr	r4, [pc, #56]	; (800c97c <rand+0x7c>)
 800c942:	4350      	muls	r0, r2
 800c944:	fb04 0003 	mla	r0, r4, r3, r0
 800c948:	fba2 3404 	umull	r3, r4, r2, r4
 800c94c:	1c5a      	adds	r2, r3, #1
 800c94e:	4404      	add	r4, r0
 800c950:	f144 0000 	adc.w	r0, r4, #0
 800c954:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c958:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c95c:	bd10      	pop	{r4, pc}
 800c95e:	bf00      	nop
 800c960:	20000638 	.word	0x20000638
 800c964:	0800e744 	.word	0x0800e744
 800c968:	0800e75b 	.word	0x0800e75b
 800c96c:	abcd330e 	.word	0xabcd330e
 800c970:	e66d1234 	.word	0xe66d1234
 800c974:	0005deec 	.word	0x0005deec
 800c978:	5851f42d 	.word	0x5851f42d
 800c97c:	4c957f2d 	.word	0x4c957f2d

0800c980 <cleanup_glue>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	460c      	mov	r4, r1
 800c984:	6809      	ldr	r1, [r1, #0]
 800c986:	4605      	mov	r5, r0
 800c988:	b109      	cbz	r1, 800c98e <cleanup_glue+0xe>
 800c98a:	f7ff fff9 	bl	800c980 <cleanup_glue>
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c996:	f7ff bedb 	b.w	800c750 <_free_r>
	...

0800c99c <_reclaim_reent>:
 800c99c:	4b2c      	ldr	r3, [pc, #176]	; (800ca50 <_reclaim_reent+0xb4>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4283      	cmp	r3, r0
 800c9a2:	b570      	push	{r4, r5, r6, lr}
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	d051      	beq.n	800ca4c <_reclaim_reent+0xb0>
 800c9a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c9aa:	b143      	cbz	r3, 800c9be <_reclaim_reent+0x22>
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d14a      	bne.n	800ca48 <_reclaim_reent+0xac>
 800c9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9b4:	6819      	ldr	r1, [r3, #0]
 800c9b6:	b111      	cbz	r1, 800c9be <_reclaim_reent+0x22>
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f7ff fec9 	bl	800c750 <_free_r>
 800c9be:	6961      	ldr	r1, [r4, #20]
 800c9c0:	b111      	cbz	r1, 800c9c8 <_reclaim_reent+0x2c>
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f7ff fec4 	bl	800c750 <_free_r>
 800c9c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c9ca:	b111      	cbz	r1, 800c9d2 <_reclaim_reent+0x36>
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f7ff febf 	bl	800c750 <_free_r>
 800c9d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c9d4:	b111      	cbz	r1, 800c9dc <_reclaim_reent+0x40>
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f7ff feba 	bl	800c750 <_free_r>
 800c9dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c9de:	b111      	cbz	r1, 800c9e6 <_reclaim_reent+0x4a>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f7ff feb5 	bl	800c750 <_free_r>
 800c9e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c9e8:	b111      	cbz	r1, 800c9f0 <_reclaim_reent+0x54>
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f7ff feb0 	bl	800c750 <_free_r>
 800c9f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c9f2:	b111      	cbz	r1, 800c9fa <_reclaim_reent+0x5e>
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f7ff feab 	bl	800c750 <_free_r>
 800c9fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c9fc:	b111      	cbz	r1, 800ca04 <_reclaim_reent+0x68>
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f7ff fea6 	bl	800c750 <_free_r>
 800ca04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca06:	b111      	cbz	r1, 800ca0e <_reclaim_reent+0x72>
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f7ff fea1 	bl	800c750 <_free_r>
 800ca0e:	69a3      	ldr	r3, [r4, #24]
 800ca10:	b1e3      	cbz	r3, 800ca4c <_reclaim_reent+0xb0>
 800ca12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ca14:	4620      	mov	r0, r4
 800ca16:	4798      	blx	r3
 800ca18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ca1a:	b1b9      	cbz	r1, 800ca4c <_reclaim_reent+0xb0>
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca22:	f7ff bfad 	b.w	800c980 <cleanup_glue>
 800ca26:	5949      	ldr	r1, [r1, r5]
 800ca28:	b941      	cbnz	r1, 800ca3c <_reclaim_reent+0xa0>
 800ca2a:	3504      	adds	r5, #4
 800ca2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca2e:	2d80      	cmp	r5, #128	; 0x80
 800ca30:	68d9      	ldr	r1, [r3, #12]
 800ca32:	d1f8      	bne.n	800ca26 <_reclaim_reent+0x8a>
 800ca34:	4620      	mov	r0, r4
 800ca36:	f7ff fe8b 	bl	800c750 <_free_r>
 800ca3a:	e7ba      	b.n	800c9b2 <_reclaim_reent+0x16>
 800ca3c:	680e      	ldr	r6, [r1, #0]
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f7ff fe86 	bl	800c750 <_free_r>
 800ca44:	4631      	mov	r1, r6
 800ca46:	e7ef      	b.n	800ca28 <_reclaim_reent+0x8c>
 800ca48:	2500      	movs	r5, #0
 800ca4a:	e7ef      	b.n	800ca2c <_reclaim_reent+0x90>
 800ca4c:	bd70      	pop	{r4, r5, r6, pc}
 800ca4e:	bf00      	nop
 800ca50:	20000638 	.word	0x20000638

0800ca54 <_sbrk_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4d06      	ldr	r5, [pc, #24]	; (800ca70 <_sbrk_r+0x1c>)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	602b      	str	r3, [r5, #0]
 800ca60:	f7fe fcc4 	bl	800b3ec <_sbrk>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_sbrk_r+0x1a>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_sbrk_r+0x1a>
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	2001aae0 	.word	0x2001aae0

0800ca74 <siprintf>:
 800ca74:	b40e      	push	{r1, r2, r3}
 800ca76:	b500      	push	{lr}
 800ca78:	b09c      	sub	sp, #112	; 0x70
 800ca7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ca7c:	9002      	str	r0, [sp, #8]
 800ca7e:	9006      	str	r0, [sp, #24]
 800ca80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca84:	4809      	ldr	r0, [pc, #36]	; (800caac <siprintf+0x38>)
 800ca86:	9107      	str	r1, [sp, #28]
 800ca88:	9104      	str	r1, [sp, #16]
 800ca8a:	4909      	ldr	r1, [pc, #36]	; (800cab0 <siprintf+0x3c>)
 800ca8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca90:	9105      	str	r1, [sp, #20]
 800ca92:	6800      	ldr	r0, [r0, #0]
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	a902      	add	r1, sp, #8
 800ca98:	f000 f9de 	bl	800ce58 <_svfiprintf_r>
 800ca9c:	9b02      	ldr	r3, [sp, #8]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	701a      	strb	r2, [r3, #0]
 800caa2:	b01c      	add	sp, #112	; 0x70
 800caa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800caa8:	b003      	add	sp, #12
 800caaa:	4770      	bx	lr
 800caac:	20000638 	.word	0x20000638
 800cab0:	ffff0208 	.word	0xffff0208

0800cab4 <__sread>:
 800cab4:	b510      	push	{r4, lr}
 800cab6:	460c      	mov	r4, r1
 800cab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cabc:	f000 fdba 	bl	800d634 <_read_r>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	bfab      	itete	ge
 800cac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cac6:	89a3      	ldrhlt	r3, [r4, #12]
 800cac8:	181b      	addge	r3, r3, r0
 800caca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cace:	bfac      	ite	ge
 800cad0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cad2:	81a3      	strhlt	r3, [r4, #12]
 800cad4:	bd10      	pop	{r4, pc}

0800cad6 <__swrite>:
 800cad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cada:	461f      	mov	r7, r3
 800cadc:	898b      	ldrh	r3, [r1, #12]
 800cade:	05db      	lsls	r3, r3, #23
 800cae0:	4605      	mov	r5, r0
 800cae2:	460c      	mov	r4, r1
 800cae4:	4616      	mov	r6, r2
 800cae6:	d505      	bpl.n	800caf4 <__swrite+0x1e>
 800cae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caec:	2302      	movs	r3, #2
 800caee:	2200      	movs	r2, #0
 800caf0:	f000 f938 	bl	800cd64 <_lseek_r>
 800caf4:	89a3      	ldrh	r3, [r4, #12]
 800caf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cafa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cafe:	81a3      	strh	r3, [r4, #12]
 800cb00:	4632      	mov	r2, r6
 800cb02:	463b      	mov	r3, r7
 800cb04:	4628      	mov	r0, r5
 800cb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0a:	f000 b817 	b.w	800cb3c <_write_r>

0800cb0e <__sseek>:
 800cb0e:	b510      	push	{r4, lr}
 800cb10:	460c      	mov	r4, r1
 800cb12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb16:	f000 f925 	bl	800cd64 <_lseek_r>
 800cb1a:	1c43      	adds	r3, r0, #1
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	bf15      	itete	ne
 800cb20:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb2a:	81a3      	strheq	r3, [r4, #12]
 800cb2c:	bf18      	it	ne
 800cb2e:	81a3      	strhne	r3, [r4, #12]
 800cb30:	bd10      	pop	{r4, pc}

0800cb32 <__sclose>:
 800cb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb36:	f000 b831 	b.w	800cb9c <_close_r>
	...

0800cb3c <_write_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4d07      	ldr	r5, [pc, #28]	; (800cb5c <_write_r+0x20>)
 800cb40:	4604      	mov	r4, r0
 800cb42:	4608      	mov	r0, r1
 800cb44:	4611      	mov	r1, r2
 800cb46:	2200      	movs	r2, #0
 800cb48:	602a      	str	r2, [r5, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	f7fe fbfd 	bl	800b34a <_write>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	d102      	bne.n	800cb5a <_write_r+0x1e>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	b103      	cbz	r3, 800cb5a <_write_r+0x1e>
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	2001aae0 	.word	0x2001aae0

0800cb60 <__assert_func>:
 800cb60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb62:	4614      	mov	r4, r2
 800cb64:	461a      	mov	r2, r3
 800cb66:	4b09      	ldr	r3, [pc, #36]	; (800cb8c <__assert_func+0x2c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	68d8      	ldr	r0, [r3, #12]
 800cb6e:	b14c      	cbz	r4, 800cb84 <__assert_func+0x24>
 800cb70:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <__assert_func+0x30>)
 800cb72:	9100      	str	r1, [sp, #0]
 800cb74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb78:	4906      	ldr	r1, [pc, #24]	; (800cb94 <__assert_func+0x34>)
 800cb7a:	462b      	mov	r3, r5
 800cb7c:	f000 f8e0 	bl	800cd40 <fiprintf>
 800cb80:	f000 fe2a 	bl	800d7d8 <abort>
 800cb84:	4b04      	ldr	r3, [pc, #16]	; (800cb98 <__assert_func+0x38>)
 800cb86:	461c      	mov	r4, r3
 800cb88:	e7f3      	b.n	800cb72 <__assert_func+0x12>
 800cb8a:	bf00      	nop
 800cb8c:	20000638 	.word	0x20000638
 800cb90:	0800e7ba 	.word	0x0800e7ba
 800cb94:	0800e7c7 	.word	0x0800e7c7
 800cb98:	0800e7f5 	.word	0x0800e7f5

0800cb9c <_close_r>:
 800cb9c:	b538      	push	{r3, r4, r5, lr}
 800cb9e:	4d06      	ldr	r5, [pc, #24]	; (800cbb8 <_close_r+0x1c>)
 800cba0:	2300      	movs	r3, #0
 800cba2:	4604      	mov	r4, r0
 800cba4:	4608      	mov	r0, r1
 800cba6:	602b      	str	r3, [r5, #0]
 800cba8:	f7fe fbeb 	bl	800b382 <_close>
 800cbac:	1c43      	adds	r3, r0, #1
 800cbae:	d102      	bne.n	800cbb6 <_close_r+0x1a>
 800cbb0:	682b      	ldr	r3, [r5, #0]
 800cbb2:	b103      	cbz	r3, 800cbb6 <_close_r+0x1a>
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	bd38      	pop	{r3, r4, r5, pc}
 800cbb8:	2001aae0 	.word	0x2001aae0

0800cbbc <__sflush_r>:
 800cbbc:	898a      	ldrh	r2, [r1, #12]
 800cbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	0710      	lsls	r0, r2, #28
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	d458      	bmi.n	800cc7c <__sflush_r+0xc0>
 800cbca:	684b      	ldr	r3, [r1, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	dc05      	bgt.n	800cbdc <__sflush_r+0x20>
 800cbd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	dc02      	bgt.n	800cbdc <__sflush_r+0x20>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbde:	2e00      	cmp	r6, #0
 800cbe0:	d0f9      	beq.n	800cbd6 <__sflush_r+0x1a>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbe8:	682f      	ldr	r7, [r5, #0]
 800cbea:	602b      	str	r3, [r5, #0]
 800cbec:	d032      	beq.n	800cc54 <__sflush_r+0x98>
 800cbee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	075a      	lsls	r2, r3, #29
 800cbf4:	d505      	bpl.n	800cc02 <__sflush_r+0x46>
 800cbf6:	6863      	ldr	r3, [r4, #4]
 800cbf8:	1ac0      	subs	r0, r0, r3
 800cbfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbfc:	b10b      	cbz	r3, 800cc02 <__sflush_r+0x46>
 800cbfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc00:	1ac0      	subs	r0, r0, r3
 800cc02:	2300      	movs	r3, #0
 800cc04:	4602      	mov	r2, r0
 800cc06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc08:	6a21      	ldr	r1, [r4, #32]
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	47b0      	blx	r6
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	89a3      	ldrh	r3, [r4, #12]
 800cc12:	d106      	bne.n	800cc22 <__sflush_r+0x66>
 800cc14:	6829      	ldr	r1, [r5, #0]
 800cc16:	291d      	cmp	r1, #29
 800cc18:	d82c      	bhi.n	800cc74 <__sflush_r+0xb8>
 800cc1a:	4a2a      	ldr	r2, [pc, #168]	; (800ccc4 <__sflush_r+0x108>)
 800cc1c:	40ca      	lsrs	r2, r1
 800cc1e:	07d6      	lsls	r6, r2, #31
 800cc20:	d528      	bpl.n	800cc74 <__sflush_r+0xb8>
 800cc22:	2200      	movs	r2, #0
 800cc24:	6062      	str	r2, [r4, #4]
 800cc26:	04d9      	lsls	r1, r3, #19
 800cc28:	6922      	ldr	r2, [r4, #16]
 800cc2a:	6022      	str	r2, [r4, #0]
 800cc2c:	d504      	bpl.n	800cc38 <__sflush_r+0x7c>
 800cc2e:	1c42      	adds	r2, r0, #1
 800cc30:	d101      	bne.n	800cc36 <__sflush_r+0x7a>
 800cc32:	682b      	ldr	r3, [r5, #0]
 800cc34:	b903      	cbnz	r3, 800cc38 <__sflush_r+0x7c>
 800cc36:	6560      	str	r0, [r4, #84]	; 0x54
 800cc38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc3a:	602f      	str	r7, [r5, #0]
 800cc3c:	2900      	cmp	r1, #0
 800cc3e:	d0ca      	beq.n	800cbd6 <__sflush_r+0x1a>
 800cc40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc44:	4299      	cmp	r1, r3
 800cc46:	d002      	beq.n	800cc4e <__sflush_r+0x92>
 800cc48:	4628      	mov	r0, r5
 800cc4a:	f7ff fd81 	bl	800c750 <_free_r>
 800cc4e:	2000      	movs	r0, #0
 800cc50:	6360      	str	r0, [r4, #52]	; 0x34
 800cc52:	e7c1      	b.n	800cbd8 <__sflush_r+0x1c>
 800cc54:	6a21      	ldr	r1, [r4, #32]
 800cc56:	2301      	movs	r3, #1
 800cc58:	4628      	mov	r0, r5
 800cc5a:	47b0      	blx	r6
 800cc5c:	1c41      	adds	r1, r0, #1
 800cc5e:	d1c7      	bne.n	800cbf0 <__sflush_r+0x34>
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d0c4      	beq.n	800cbf0 <__sflush_r+0x34>
 800cc66:	2b1d      	cmp	r3, #29
 800cc68:	d001      	beq.n	800cc6e <__sflush_r+0xb2>
 800cc6a:	2b16      	cmp	r3, #22
 800cc6c:	d101      	bne.n	800cc72 <__sflush_r+0xb6>
 800cc6e:	602f      	str	r7, [r5, #0]
 800cc70:	e7b1      	b.n	800cbd6 <__sflush_r+0x1a>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc78:	81a3      	strh	r3, [r4, #12]
 800cc7a:	e7ad      	b.n	800cbd8 <__sflush_r+0x1c>
 800cc7c:	690f      	ldr	r7, [r1, #16]
 800cc7e:	2f00      	cmp	r7, #0
 800cc80:	d0a9      	beq.n	800cbd6 <__sflush_r+0x1a>
 800cc82:	0793      	lsls	r3, r2, #30
 800cc84:	680e      	ldr	r6, [r1, #0]
 800cc86:	bf08      	it	eq
 800cc88:	694b      	ldreq	r3, [r1, #20]
 800cc8a:	600f      	str	r7, [r1, #0]
 800cc8c:	bf18      	it	ne
 800cc8e:	2300      	movne	r3, #0
 800cc90:	eba6 0807 	sub.w	r8, r6, r7
 800cc94:	608b      	str	r3, [r1, #8]
 800cc96:	f1b8 0f00 	cmp.w	r8, #0
 800cc9a:	dd9c      	ble.n	800cbd6 <__sflush_r+0x1a>
 800cc9c:	6a21      	ldr	r1, [r4, #32]
 800cc9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cca0:	4643      	mov	r3, r8
 800cca2:	463a      	mov	r2, r7
 800cca4:	4628      	mov	r0, r5
 800cca6:	47b0      	blx	r6
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	dc06      	bgt.n	800ccba <__sflush_r+0xfe>
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb2:	81a3      	strh	r3, [r4, #12]
 800ccb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb8:	e78e      	b.n	800cbd8 <__sflush_r+0x1c>
 800ccba:	4407      	add	r7, r0
 800ccbc:	eba8 0800 	sub.w	r8, r8, r0
 800ccc0:	e7e9      	b.n	800cc96 <__sflush_r+0xda>
 800ccc2:	bf00      	nop
 800ccc4:	20400001 	.word	0x20400001

0800ccc8 <_fflush_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	690b      	ldr	r3, [r1, #16]
 800cccc:	4605      	mov	r5, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	b913      	cbnz	r3, 800ccd8 <_fflush_r+0x10>
 800ccd2:	2500      	movs	r5, #0
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	bd38      	pop	{r3, r4, r5, pc}
 800ccd8:	b118      	cbz	r0, 800cce2 <_fflush_r+0x1a>
 800ccda:	6983      	ldr	r3, [r0, #24]
 800ccdc:	b90b      	cbnz	r3, 800cce2 <_fflush_r+0x1a>
 800ccde:	f7ff fc53 	bl	800c588 <__sinit>
 800cce2:	4b14      	ldr	r3, [pc, #80]	; (800cd34 <_fflush_r+0x6c>)
 800cce4:	429c      	cmp	r4, r3
 800cce6:	d11b      	bne.n	800cd20 <_fflush_r+0x58>
 800cce8:	686c      	ldr	r4, [r5, #4]
 800ccea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d0ef      	beq.n	800ccd2 <_fflush_r+0xa>
 800ccf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccf4:	07d0      	lsls	r0, r2, #31
 800ccf6:	d404      	bmi.n	800cd02 <_fflush_r+0x3a>
 800ccf8:	0599      	lsls	r1, r3, #22
 800ccfa:	d402      	bmi.n	800cd02 <_fflush_r+0x3a>
 800ccfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccfe:	f7ff fd06 	bl	800c70e <__retarget_lock_acquire_recursive>
 800cd02:	4628      	mov	r0, r5
 800cd04:	4621      	mov	r1, r4
 800cd06:	f7ff ff59 	bl	800cbbc <__sflush_r>
 800cd0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd0c:	07da      	lsls	r2, r3, #31
 800cd0e:	4605      	mov	r5, r0
 800cd10:	d4e0      	bmi.n	800ccd4 <_fflush_r+0xc>
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	059b      	lsls	r3, r3, #22
 800cd16:	d4dd      	bmi.n	800ccd4 <_fflush_r+0xc>
 800cd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd1a:	f7ff fcf9 	bl	800c710 <__retarget_lock_release_recursive>
 800cd1e:	e7d9      	b.n	800ccd4 <_fflush_r+0xc>
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <_fflush_r+0x70>)
 800cd22:	429c      	cmp	r4, r3
 800cd24:	d101      	bne.n	800cd2a <_fflush_r+0x62>
 800cd26:	68ac      	ldr	r4, [r5, #8]
 800cd28:	e7df      	b.n	800ccea <_fflush_r+0x22>
 800cd2a:	4b04      	ldr	r3, [pc, #16]	; (800cd3c <_fflush_r+0x74>)
 800cd2c:	429c      	cmp	r4, r3
 800cd2e:	bf08      	it	eq
 800cd30:	68ec      	ldreq	r4, [r5, #12]
 800cd32:	e7da      	b.n	800ccea <_fflush_r+0x22>
 800cd34:	0800e700 	.word	0x0800e700
 800cd38:	0800e720 	.word	0x0800e720
 800cd3c:	0800e6e0 	.word	0x0800e6e0

0800cd40 <fiprintf>:
 800cd40:	b40e      	push	{r1, r2, r3}
 800cd42:	b503      	push	{r0, r1, lr}
 800cd44:	4601      	mov	r1, r0
 800cd46:	ab03      	add	r3, sp, #12
 800cd48:	4805      	ldr	r0, [pc, #20]	; (800cd60 <fiprintf+0x20>)
 800cd4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd4e:	6800      	ldr	r0, [r0, #0]
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	f000 f9ab 	bl	800d0ac <_vfiprintf_r>
 800cd56:	b002      	add	sp, #8
 800cd58:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd5c:	b003      	add	sp, #12
 800cd5e:	4770      	bx	lr
 800cd60:	20000638 	.word	0x20000638

0800cd64 <_lseek_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d07      	ldr	r5, [pc, #28]	; (800cd84 <_lseek_r+0x20>)
 800cd68:	4604      	mov	r4, r0
 800cd6a:	4608      	mov	r0, r1
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	2200      	movs	r2, #0
 800cd70:	602a      	str	r2, [r5, #0]
 800cd72:	461a      	mov	r2, r3
 800cd74:	f7fe fb2c 	bl	800b3d0 <_lseek>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d102      	bne.n	800cd82 <_lseek_r+0x1e>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	b103      	cbz	r3, 800cd82 <_lseek_r+0x1e>
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	2001aae0 	.word	0x2001aae0

0800cd88 <__malloc_lock>:
 800cd88:	4801      	ldr	r0, [pc, #4]	; (800cd90 <__malloc_lock+0x8>)
 800cd8a:	f7ff bcc0 	b.w	800c70e <__retarget_lock_acquire_recursive>
 800cd8e:	bf00      	nop
 800cd90:	2001aad8 	.word	0x2001aad8

0800cd94 <__malloc_unlock>:
 800cd94:	4801      	ldr	r0, [pc, #4]	; (800cd9c <__malloc_unlock+0x8>)
 800cd96:	f7ff bcbb 	b.w	800c710 <__retarget_lock_release_recursive>
 800cd9a:	bf00      	nop
 800cd9c:	2001aad8 	.word	0x2001aad8

0800cda0 <__ssputs_r>:
 800cda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda4:	688e      	ldr	r6, [r1, #8]
 800cda6:	429e      	cmp	r6, r3
 800cda8:	4682      	mov	sl, r0
 800cdaa:	460c      	mov	r4, r1
 800cdac:	4690      	mov	r8, r2
 800cdae:	461f      	mov	r7, r3
 800cdb0:	d838      	bhi.n	800ce24 <__ssputs_r+0x84>
 800cdb2:	898a      	ldrh	r2, [r1, #12]
 800cdb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdb8:	d032      	beq.n	800ce20 <__ssputs_r+0x80>
 800cdba:	6825      	ldr	r5, [r4, #0]
 800cdbc:	6909      	ldr	r1, [r1, #16]
 800cdbe:	eba5 0901 	sub.w	r9, r5, r1
 800cdc2:	6965      	ldr	r5, [r4, #20]
 800cdc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdcc:	3301      	adds	r3, #1
 800cdce:	444b      	add	r3, r9
 800cdd0:	106d      	asrs	r5, r5, #1
 800cdd2:	429d      	cmp	r5, r3
 800cdd4:	bf38      	it	cc
 800cdd6:	461d      	movcc	r5, r3
 800cdd8:	0553      	lsls	r3, r2, #21
 800cdda:	d531      	bpl.n	800ce40 <__ssputs_r+0xa0>
 800cddc:	4629      	mov	r1, r5
 800cdde:	f7ff fd07 	bl	800c7f0 <_malloc_r>
 800cde2:	4606      	mov	r6, r0
 800cde4:	b950      	cbnz	r0, 800cdfc <__ssputs_r+0x5c>
 800cde6:	230c      	movs	r3, #12
 800cde8:	f8ca 3000 	str.w	r3, [sl]
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdf2:	81a3      	strh	r3, [r4, #12]
 800cdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdfc:	6921      	ldr	r1, [r4, #16]
 800cdfe:	464a      	mov	r2, r9
 800ce00:	f7ff fc90 	bl	800c724 <memcpy>
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	6126      	str	r6, [r4, #16]
 800ce12:	6165      	str	r5, [r4, #20]
 800ce14:	444e      	add	r6, r9
 800ce16:	eba5 0509 	sub.w	r5, r5, r9
 800ce1a:	6026      	str	r6, [r4, #0]
 800ce1c:	60a5      	str	r5, [r4, #8]
 800ce1e:	463e      	mov	r6, r7
 800ce20:	42be      	cmp	r6, r7
 800ce22:	d900      	bls.n	800ce26 <__ssputs_r+0x86>
 800ce24:	463e      	mov	r6, r7
 800ce26:	4632      	mov	r2, r6
 800ce28:	6820      	ldr	r0, [r4, #0]
 800ce2a:	4641      	mov	r1, r8
 800ce2c:	f000 fd40 	bl	800d8b0 <memmove>
 800ce30:	68a3      	ldr	r3, [r4, #8]
 800ce32:	6822      	ldr	r2, [r4, #0]
 800ce34:	1b9b      	subs	r3, r3, r6
 800ce36:	4432      	add	r2, r6
 800ce38:	60a3      	str	r3, [r4, #8]
 800ce3a:	6022      	str	r2, [r4, #0]
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	e7db      	b.n	800cdf8 <__ssputs_r+0x58>
 800ce40:	462a      	mov	r2, r5
 800ce42:	f000 fd4f 	bl	800d8e4 <_realloc_r>
 800ce46:	4606      	mov	r6, r0
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d1e1      	bne.n	800ce10 <__ssputs_r+0x70>
 800ce4c:	6921      	ldr	r1, [r4, #16]
 800ce4e:	4650      	mov	r0, sl
 800ce50:	f7ff fc7e 	bl	800c750 <_free_r>
 800ce54:	e7c7      	b.n	800cde6 <__ssputs_r+0x46>
	...

0800ce58 <_svfiprintf_r>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	4698      	mov	r8, r3
 800ce5e:	898b      	ldrh	r3, [r1, #12]
 800ce60:	061b      	lsls	r3, r3, #24
 800ce62:	b09d      	sub	sp, #116	; 0x74
 800ce64:	4607      	mov	r7, r0
 800ce66:	460d      	mov	r5, r1
 800ce68:	4614      	mov	r4, r2
 800ce6a:	d50e      	bpl.n	800ce8a <_svfiprintf_r+0x32>
 800ce6c:	690b      	ldr	r3, [r1, #16]
 800ce6e:	b963      	cbnz	r3, 800ce8a <_svfiprintf_r+0x32>
 800ce70:	2140      	movs	r1, #64	; 0x40
 800ce72:	f7ff fcbd 	bl	800c7f0 <_malloc_r>
 800ce76:	6028      	str	r0, [r5, #0]
 800ce78:	6128      	str	r0, [r5, #16]
 800ce7a:	b920      	cbnz	r0, 800ce86 <_svfiprintf_r+0x2e>
 800ce7c:	230c      	movs	r3, #12
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	f04f 30ff 	mov.w	r0, #4294967295
 800ce84:	e0d1      	b.n	800d02a <_svfiprintf_r+0x1d2>
 800ce86:	2340      	movs	r3, #64	; 0x40
 800ce88:	616b      	str	r3, [r5, #20]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce8e:	2320      	movs	r3, #32
 800ce90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce98:	2330      	movs	r3, #48	; 0x30
 800ce9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d044 <_svfiprintf_r+0x1ec>
 800ce9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cea2:	f04f 0901 	mov.w	r9, #1
 800cea6:	4623      	mov	r3, r4
 800cea8:	469a      	mov	sl, r3
 800ceaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceae:	b10a      	cbz	r2, 800ceb4 <_svfiprintf_r+0x5c>
 800ceb0:	2a25      	cmp	r2, #37	; 0x25
 800ceb2:	d1f9      	bne.n	800cea8 <_svfiprintf_r+0x50>
 800ceb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ceb8:	d00b      	beq.n	800ced2 <_svfiprintf_r+0x7a>
 800ceba:	465b      	mov	r3, fp
 800cebc:	4622      	mov	r2, r4
 800cebe:	4629      	mov	r1, r5
 800cec0:	4638      	mov	r0, r7
 800cec2:	f7ff ff6d 	bl	800cda0 <__ssputs_r>
 800cec6:	3001      	adds	r0, #1
 800cec8:	f000 80aa 	beq.w	800d020 <_svfiprintf_r+0x1c8>
 800cecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cece:	445a      	add	r2, fp
 800ced0:	9209      	str	r2, [sp, #36]	; 0x24
 800ced2:	f89a 3000 	ldrb.w	r3, [sl]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 80a2 	beq.w	800d020 <_svfiprintf_r+0x1c8>
 800cedc:	2300      	movs	r3, #0
 800cede:	f04f 32ff 	mov.w	r2, #4294967295
 800cee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cee6:	f10a 0a01 	add.w	sl, sl, #1
 800ceea:	9304      	str	r3, [sp, #16]
 800ceec:	9307      	str	r3, [sp, #28]
 800ceee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cef2:	931a      	str	r3, [sp, #104]	; 0x68
 800cef4:	4654      	mov	r4, sl
 800cef6:	2205      	movs	r2, #5
 800cef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cefc:	4851      	ldr	r0, [pc, #324]	; (800d044 <_svfiprintf_r+0x1ec>)
 800cefe:	f7f3 f97f 	bl	8000200 <memchr>
 800cf02:	9a04      	ldr	r2, [sp, #16]
 800cf04:	b9d8      	cbnz	r0, 800cf3e <_svfiprintf_r+0xe6>
 800cf06:	06d0      	lsls	r0, r2, #27
 800cf08:	bf44      	itt	mi
 800cf0a:	2320      	movmi	r3, #32
 800cf0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf10:	0711      	lsls	r1, r2, #28
 800cf12:	bf44      	itt	mi
 800cf14:	232b      	movmi	r3, #43	; 0x2b
 800cf16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf20:	d015      	beq.n	800cf4e <_svfiprintf_r+0xf6>
 800cf22:	9a07      	ldr	r2, [sp, #28]
 800cf24:	4654      	mov	r4, sl
 800cf26:	2000      	movs	r0, #0
 800cf28:	f04f 0c0a 	mov.w	ip, #10
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf32:	3b30      	subs	r3, #48	; 0x30
 800cf34:	2b09      	cmp	r3, #9
 800cf36:	d94e      	bls.n	800cfd6 <_svfiprintf_r+0x17e>
 800cf38:	b1b0      	cbz	r0, 800cf68 <_svfiprintf_r+0x110>
 800cf3a:	9207      	str	r2, [sp, #28]
 800cf3c:	e014      	b.n	800cf68 <_svfiprintf_r+0x110>
 800cf3e:	eba0 0308 	sub.w	r3, r0, r8
 800cf42:	fa09 f303 	lsl.w	r3, r9, r3
 800cf46:	4313      	orrs	r3, r2
 800cf48:	9304      	str	r3, [sp, #16]
 800cf4a:	46a2      	mov	sl, r4
 800cf4c:	e7d2      	b.n	800cef4 <_svfiprintf_r+0x9c>
 800cf4e:	9b03      	ldr	r3, [sp, #12]
 800cf50:	1d19      	adds	r1, r3, #4
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	9103      	str	r1, [sp, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	bfbb      	ittet	lt
 800cf5a:	425b      	neglt	r3, r3
 800cf5c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf60:	9307      	strge	r3, [sp, #28]
 800cf62:	9307      	strlt	r3, [sp, #28]
 800cf64:	bfb8      	it	lt
 800cf66:	9204      	strlt	r2, [sp, #16]
 800cf68:	7823      	ldrb	r3, [r4, #0]
 800cf6a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf6c:	d10c      	bne.n	800cf88 <_svfiprintf_r+0x130>
 800cf6e:	7863      	ldrb	r3, [r4, #1]
 800cf70:	2b2a      	cmp	r3, #42	; 0x2a
 800cf72:	d135      	bne.n	800cfe0 <_svfiprintf_r+0x188>
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	1d1a      	adds	r2, r3, #4
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	9203      	str	r2, [sp, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	bfb8      	it	lt
 800cf80:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf84:	3402      	adds	r4, #2
 800cf86:	9305      	str	r3, [sp, #20]
 800cf88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d054 <_svfiprintf_r+0x1fc>
 800cf8c:	7821      	ldrb	r1, [r4, #0]
 800cf8e:	2203      	movs	r2, #3
 800cf90:	4650      	mov	r0, sl
 800cf92:	f7f3 f935 	bl	8000200 <memchr>
 800cf96:	b140      	cbz	r0, 800cfaa <_svfiprintf_r+0x152>
 800cf98:	2340      	movs	r3, #64	; 0x40
 800cf9a:	eba0 000a 	sub.w	r0, r0, sl
 800cf9e:	fa03 f000 	lsl.w	r0, r3, r0
 800cfa2:	9b04      	ldr	r3, [sp, #16]
 800cfa4:	4303      	orrs	r3, r0
 800cfa6:	3401      	adds	r4, #1
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfae:	4826      	ldr	r0, [pc, #152]	; (800d048 <_svfiprintf_r+0x1f0>)
 800cfb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfb4:	2206      	movs	r2, #6
 800cfb6:	f7f3 f923 	bl	8000200 <memchr>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d038      	beq.n	800d030 <_svfiprintf_r+0x1d8>
 800cfbe:	4b23      	ldr	r3, [pc, #140]	; (800d04c <_svfiprintf_r+0x1f4>)
 800cfc0:	bb1b      	cbnz	r3, 800d00a <_svfiprintf_r+0x1b2>
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	3307      	adds	r3, #7
 800cfc6:	f023 0307 	bic.w	r3, r3, #7
 800cfca:	3308      	adds	r3, #8
 800cfcc:	9303      	str	r3, [sp, #12]
 800cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd0:	4433      	add	r3, r6
 800cfd2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd4:	e767      	b.n	800cea6 <_svfiprintf_r+0x4e>
 800cfd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfda:	460c      	mov	r4, r1
 800cfdc:	2001      	movs	r0, #1
 800cfde:	e7a5      	b.n	800cf2c <_svfiprintf_r+0xd4>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	3401      	adds	r4, #1
 800cfe4:	9305      	str	r3, [sp, #20]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	f04f 0c0a 	mov.w	ip, #10
 800cfec:	4620      	mov	r0, r4
 800cfee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff2:	3a30      	subs	r2, #48	; 0x30
 800cff4:	2a09      	cmp	r2, #9
 800cff6:	d903      	bls.n	800d000 <_svfiprintf_r+0x1a8>
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d0c5      	beq.n	800cf88 <_svfiprintf_r+0x130>
 800cffc:	9105      	str	r1, [sp, #20]
 800cffe:	e7c3      	b.n	800cf88 <_svfiprintf_r+0x130>
 800d000:	fb0c 2101 	mla	r1, ip, r1, r2
 800d004:	4604      	mov	r4, r0
 800d006:	2301      	movs	r3, #1
 800d008:	e7f0      	b.n	800cfec <_svfiprintf_r+0x194>
 800d00a:	ab03      	add	r3, sp, #12
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	462a      	mov	r2, r5
 800d010:	4b0f      	ldr	r3, [pc, #60]	; (800d050 <_svfiprintf_r+0x1f8>)
 800d012:	a904      	add	r1, sp, #16
 800d014:	4638      	mov	r0, r7
 800d016:	f3af 8000 	nop.w
 800d01a:	1c42      	adds	r2, r0, #1
 800d01c:	4606      	mov	r6, r0
 800d01e:	d1d6      	bne.n	800cfce <_svfiprintf_r+0x176>
 800d020:	89ab      	ldrh	r3, [r5, #12]
 800d022:	065b      	lsls	r3, r3, #25
 800d024:	f53f af2c 	bmi.w	800ce80 <_svfiprintf_r+0x28>
 800d028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d02a:	b01d      	add	sp, #116	; 0x74
 800d02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d030:	ab03      	add	r3, sp, #12
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	462a      	mov	r2, r5
 800d036:	4b06      	ldr	r3, [pc, #24]	; (800d050 <_svfiprintf_r+0x1f8>)
 800d038:	a904      	add	r1, sp, #16
 800d03a:	4638      	mov	r0, r7
 800d03c:	f000 f9d4 	bl	800d3e8 <_printf_i>
 800d040:	e7eb      	b.n	800d01a <_svfiprintf_r+0x1c2>
 800d042:	bf00      	nop
 800d044:	0800e7f6 	.word	0x0800e7f6
 800d048:	0800e800 	.word	0x0800e800
 800d04c:	00000000 	.word	0x00000000
 800d050:	0800cda1 	.word	0x0800cda1
 800d054:	0800e7fc 	.word	0x0800e7fc

0800d058 <__sfputc_r>:
 800d058:	6893      	ldr	r3, [r2, #8]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	b410      	push	{r4}
 800d060:	6093      	str	r3, [r2, #8]
 800d062:	da08      	bge.n	800d076 <__sfputc_r+0x1e>
 800d064:	6994      	ldr	r4, [r2, #24]
 800d066:	42a3      	cmp	r3, r4
 800d068:	db01      	blt.n	800d06e <__sfputc_r+0x16>
 800d06a:	290a      	cmp	r1, #10
 800d06c:	d103      	bne.n	800d076 <__sfputc_r+0x1e>
 800d06e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d072:	f000 baf1 	b.w	800d658 <__swbuf_r>
 800d076:	6813      	ldr	r3, [r2, #0]
 800d078:	1c58      	adds	r0, r3, #1
 800d07a:	6010      	str	r0, [r2, #0]
 800d07c:	7019      	strb	r1, [r3, #0]
 800d07e:	4608      	mov	r0, r1
 800d080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <__sfputs_r>:
 800d086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d088:	4606      	mov	r6, r0
 800d08a:	460f      	mov	r7, r1
 800d08c:	4614      	mov	r4, r2
 800d08e:	18d5      	adds	r5, r2, r3
 800d090:	42ac      	cmp	r4, r5
 800d092:	d101      	bne.n	800d098 <__sfputs_r+0x12>
 800d094:	2000      	movs	r0, #0
 800d096:	e007      	b.n	800d0a8 <__sfputs_r+0x22>
 800d098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09c:	463a      	mov	r2, r7
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f7ff ffda 	bl	800d058 <__sfputc_r>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d1f3      	bne.n	800d090 <__sfputs_r+0xa>
 800d0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0ac <_vfiprintf_r>:
 800d0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b0:	460d      	mov	r5, r1
 800d0b2:	b09d      	sub	sp, #116	; 0x74
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	4698      	mov	r8, r3
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	b118      	cbz	r0, 800d0c4 <_vfiprintf_r+0x18>
 800d0bc:	6983      	ldr	r3, [r0, #24]
 800d0be:	b90b      	cbnz	r3, 800d0c4 <_vfiprintf_r+0x18>
 800d0c0:	f7ff fa62 	bl	800c588 <__sinit>
 800d0c4:	4b89      	ldr	r3, [pc, #548]	; (800d2ec <_vfiprintf_r+0x240>)
 800d0c6:	429d      	cmp	r5, r3
 800d0c8:	d11b      	bne.n	800d102 <_vfiprintf_r+0x56>
 800d0ca:	6875      	ldr	r5, [r6, #4]
 800d0cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0ce:	07d9      	lsls	r1, r3, #31
 800d0d0:	d405      	bmi.n	800d0de <_vfiprintf_r+0x32>
 800d0d2:	89ab      	ldrh	r3, [r5, #12]
 800d0d4:	059a      	lsls	r2, r3, #22
 800d0d6:	d402      	bmi.n	800d0de <_vfiprintf_r+0x32>
 800d0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0da:	f7ff fb18 	bl	800c70e <__retarget_lock_acquire_recursive>
 800d0de:	89ab      	ldrh	r3, [r5, #12]
 800d0e0:	071b      	lsls	r3, r3, #28
 800d0e2:	d501      	bpl.n	800d0e8 <_vfiprintf_r+0x3c>
 800d0e4:	692b      	ldr	r3, [r5, #16]
 800d0e6:	b9eb      	cbnz	r3, 800d124 <_vfiprintf_r+0x78>
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f000 fb06 	bl	800d6fc <__swsetup_r>
 800d0f0:	b1c0      	cbz	r0, 800d124 <_vfiprintf_r+0x78>
 800d0f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0f4:	07dc      	lsls	r4, r3, #31
 800d0f6:	d50e      	bpl.n	800d116 <_vfiprintf_r+0x6a>
 800d0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fc:	b01d      	add	sp, #116	; 0x74
 800d0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d102:	4b7b      	ldr	r3, [pc, #492]	; (800d2f0 <_vfiprintf_r+0x244>)
 800d104:	429d      	cmp	r5, r3
 800d106:	d101      	bne.n	800d10c <_vfiprintf_r+0x60>
 800d108:	68b5      	ldr	r5, [r6, #8]
 800d10a:	e7df      	b.n	800d0cc <_vfiprintf_r+0x20>
 800d10c:	4b79      	ldr	r3, [pc, #484]	; (800d2f4 <_vfiprintf_r+0x248>)
 800d10e:	429d      	cmp	r5, r3
 800d110:	bf08      	it	eq
 800d112:	68f5      	ldreq	r5, [r6, #12]
 800d114:	e7da      	b.n	800d0cc <_vfiprintf_r+0x20>
 800d116:	89ab      	ldrh	r3, [r5, #12]
 800d118:	0598      	lsls	r0, r3, #22
 800d11a:	d4ed      	bmi.n	800d0f8 <_vfiprintf_r+0x4c>
 800d11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d11e:	f7ff faf7 	bl	800c710 <__retarget_lock_release_recursive>
 800d122:	e7e9      	b.n	800d0f8 <_vfiprintf_r+0x4c>
 800d124:	2300      	movs	r3, #0
 800d126:	9309      	str	r3, [sp, #36]	; 0x24
 800d128:	2320      	movs	r3, #32
 800d12a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d12e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d132:	2330      	movs	r3, #48	; 0x30
 800d134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d2f8 <_vfiprintf_r+0x24c>
 800d138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d13c:	f04f 0901 	mov.w	r9, #1
 800d140:	4623      	mov	r3, r4
 800d142:	469a      	mov	sl, r3
 800d144:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d148:	b10a      	cbz	r2, 800d14e <_vfiprintf_r+0xa2>
 800d14a:	2a25      	cmp	r2, #37	; 0x25
 800d14c:	d1f9      	bne.n	800d142 <_vfiprintf_r+0x96>
 800d14e:	ebba 0b04 	subs.w	fp, sl, r4
 800d152:	d00b      	beq.n	800d16c <_vfiprintf_r+0xc0>
 800d154:	465b      	mov	r3, fp
 800d156:	4622      	mov	r2, r4
 800d158:	4629      	mov	r1, r5
 800d15a:	4630      	mov	r0, r6
 800d15c:	f7ff ff93 	bl	800d086 <__sfputs_r>
 800d160:	3001      	adds	r0, #1
 800d162:	f000 80aa 	beq.w	800d2ba <_vfiprintf_r+0x20e>
 800d166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d168:	445a      	add	r2, fp
 800d16a:	9209      	str	r2, [sp, #36]	; 0x24
 800d16c:	f89a 3000 	ldrb.w	r3, [sl]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 80a2 	beq.w	800d2ba <_vfiprintf_r+0x20e>
 800d176:	2300      	movs	r3, #0
 800d178:	f04f 32ff 	mov.w	r2, #4294967295
 800d17c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d180:	f10a 0a01 	add.w	sl, sl, #1
 800d184:	9304      	str	r3, [sp, #16]
 800d186:	9307      	str	r3, [sp, #28]
 800d188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d18c:	931a      	str	r3, [sp, #104]	; 0x68
 800d18e:	4654      	mov	r4, sl
 800d190:	2205      	movs	r2, #5
 800d192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d196:	4858      	ldr	r0, [pc, #352]	; (800d2f8 <_vfiprintf_r+0x24c>)
 800d198:	f7f3 f832 	bl	8000200 <memchr>
 800d19c:	9a04      	ldr	r2, [sp, #16]
 800d19e:	b9d8      	cbnz	r0, 800d1d8 <_vfiprintf_r+0x12c>
 800d1a0:	06d1      	lsls	r1, r2, #27
 800d1a2:	bf44      	itt	mi
 800d1a4:	2320      	movmi	r3, #32
 800d1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1aa:	0713      	lsls	r3, r2, #28
 800d1ac:	bf44      	itt	mi
 800d1ae:	232b      	movmi	r3, #43	; 0x2b
 800d1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ba:	d015      	beq.n	800d1e8 <_vfiprintf_r+0x13c>
 800d1bc:	9a07      	ldr	r2, [sp, #28]
 800d1be:	4654      	mov	r4, sl
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	f04f 0c0a 	mov.w	ip, #10
 800d1c6:	4621      	mov	r1, r4
 800d1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1cc:	3b30      	subs	r3, #48	; 0x30
 800d1ce:	2b09      	cmp	r3, #9
 800d1d0:	d94e      	bls.n	800d270 <_vfiprintf_r+0x1c4>
 800d1d2:	b1b0      	cbz	r0, 800d202 <_vfiprintf_r+0x156>
 800d1d4:	9207      	str	r2, [sp, #28]
 800d1d6:	e014      	b.n	800d202 <_vfiprintf_r+0x156>
 800d1d8:	eba0 0308 	sub.w	r3, r0, r8
 800d1dc:	fa09 f303 	lsl.w	r3, r9, r3
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	9304      	str	r3, [sp, #16]
 800d1e4:	46a2      	mov	sl, r4
 800d1e6:	e7d2      	b.n	800d18e <_vfiprintf_r+0xe2>
 800d1e8:	9b03      	ldr	r3, [sp, #12]
 800d1ea:	1d19      	adds	r1, r3, #4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	9103      	str	r1, [sp, #12]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	bfbb      	ittet	lt
 800d1f4:	425b      	neglt	r3, r3
 800d1f6:	f042 0202 	orrlt.w	r2, r2, #2
 800d1fa:	9307      	strge	r3, [sp, #28]
 800d1fc:	9307      	strlt	r3, [sp, #28]
 800d1fe:	bfb8      	it	lt
 800d200:	9204      	strlt	r2, [sp, #16]
 800d202:	7823      	ldrb	r3, [r4, #0]
 800d204:	2b2e      	cmp	r3, #46	; 0x2e
 800d206:	d10c      	bne.n	800d222 <_vfiprintf_r+0x176>
 800d208:	7863      	ldrb	r3, [r4, #1]
 800d20a:	2b2a      	cmp	r3, #42	; 0x2a
 800d20c:	d135      	bne.n	800d27a <_vfiprintf_r+0x1ce>
 800d20e:	9b03      	ldr	r3, [sp, #12]
 800d210:	1d1a      	adds	r2, r3, #4
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	9203      	str	r2, [sp, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	bfb8      	it	lt
 800d21a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d21e:	3402      	adds	r4, #2
 800d220:	9305      	str	r3, [sp, #20]
 800d222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d308 <_vfiprintf_r+0x25c>
 800d226:	7821      	ldrb	r1, [r4, #0]
 800d228:	2203      	movs	r2, #3
 800d22a:	4650      	mov	r0, sl
 800d22c:	f7f2 ffe8 	bl	8000200 <memchr>
 800d230:	b140      	cbz	r0, 800d244 <_vfiprintf_r+0x198>
 800d232:	2340      	movs	r3, #64	; 0x40
 800d234:	eba0 000a 	sub.w	r0, r0, sl
 800d238:	fa03 f000 	lsl.w	r0, r3, r0
 800d23c:	9b04      	ldr	r3, [sp, #16]
 800d23e:	4303      	orrs	r3, r0
 800d240:	3401      	adds	r4, #1
 800d242:	9304      	str	r3, [sp, #16]
 800d244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d248:	482c      	ldr	r0, [pc, #176]	; (800d2fc <_vfiprintf_r+0x250>)
 800d24a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d24e:	2206      	movs	r2, #6
 800d250:	f7f2 ffd6 	bl	8000200 <memchr>
 800d254:	2800      	cmp	r0, #0
 800d256:	d03f      	beq.n	800d2d8 <_vfiprintf_r+0x22c>
 800d258:	4b29      	ldr	r3, [pc, #164]	; (800d300 <_vfiprintf_r+0x254>)
 800d25a:	bb1b      	cbnz	r3, 800d2a4 <_vfiprintf_r+0x1f8>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	3307      	adds	r3, #7
 800d260:	f023 0307 	bic.w	r3, r3, #7
 800d264:	3308      	adds	r3, #8
 800d266:	9303      	str	r3, [sp, #12]
 800d268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26a:	443b      	add	r3, r7
 800d26c:	9309      	str	r3, [sp, #36]	; 0x24
 800d26e:	e767      	b.n	800d140 <_vfiprintf_r+0x94>
 800d270:	fb0c 3202 	mla	r2, ip, r2, r3
 800d274:	460c      	mov	r4, r1
 800d276:	2001      	movs	r0, #1
 800d278:	e7a5      	b.n	800d1c6 <_vfiprintf_r+0x11a>
 800d27a:	2300      	movs	r3, #0
 800d27c:	3401      	adds	r4, #1
 800d27e:	9305      	str	r3, [sp, #20]
 800d280:	4619      	mov	r1, r3
 800d282:	f04f 0c0a 	mov.w	ip, #10
 800d286:	4620      	mov	r0, r4
 800d288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d28c:	3a30      	subs	r2, #48	; 0x30
 800d28e:	2a09      	cmp	r2, #9
 800d290:	d903      	bls.n	800d29a <_vfiprintf_r+0x1ee>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0c5      	beq.n	800d222 <_vfiprintf_r+0x176>
 800d296:	9105      	str	r1, [sp, #20]
 800d298:	e7c3      	b.n	800d222 <_vfiprintf_r+0x176>
 800d29a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d29e:	4604      	mov	r4, r0
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e7f0      	b.n	800d286 <_vfiprintf_r+0x1da>
 800d2a4:	ab03      	add	r3, sp, #12
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	462a      	mov	r2, r5
 800d2aa:	4b16      	ldr	r3, [pc, #88]	; (800d304 <_vfiprintf_r+0x258>)
 800d2ac:	a904      	add	r1, sp, #16
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f3af 8000 	nop.w
 800d2b4:	4607      	mov	r7, r0
 800d2b6:	1c78      	adds	r0, r7, #1
 800d2b8:	d1d6      	bne.n	800d268 <_vfiprintf_r+0x1bc>
 800d2ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2bc:	07d9      	lsls	r1, r3, #31
 800d2be:	d405      	bmi.n	800d2cc <_vfiprintf_r+0x220>
 800d2c0:	89ab      	ldrh	r3, [r5, #12]
 800d2c2:	059a      	lsls	r2, r3, #22
 800d2c4:	d402      	bmi.n	800d2cc <_vfiprintf_r+0x220>
 800d2c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2c8:	f7ff fa22 	bl	800c710 <__retarget_lock_release_recursive>
 800d2cc:	89ab      	ldrh	r3, [r5, #12]
 800d2ce:	065b      	lsls	r3, r3, #25
 800d2d0:	f53f af12 	bmi.w	800d0f8 <_vfiprintf_r+0x4c>
 800d2d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2d6:	e711      	b.n	800d0fc <_vfiprintf_r+0x50>
 800d2d8:	ab03      	add	r3, sp, #12
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	462a      	mov	r2, r5
 800d2de:	4b09      	ldr	r3, [pc, #36]	; (800d304 <_vfiprintf_r+0x258>)
 800d2e0:	a904      	add	r1, sp, #16
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f000 f880 	bl	800d3e8 <_printf_i>
 800d2e8:	e7e4      	b.n	800d2b4 <_vfiprintf_r+0x208>
 800d2ea:	bf00      	nop
 800d2ec:	0800e700 	.word	0x0800e700
 800d2f0:	0800e720 	.word	0x0800e720
 800d2f4:	0800e6e0 	.word	0x0800e6e0
 800d2f8:	0800e7f6 	.word	0x0800e7f6
 800d2fc:	0800e800 	.word	0x0800e800
 800d300:	00000000 	.word	0x00000000
 800d304:	0800d087 	.word	0x0800d087
 800d308:	0800e7fc 	.word	0x0800e7fc

0800d30c <_printf_common>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	4616      	mov	r6, r2
 800d312:	4699      	mov	r9, r3
 800d314:	688a      	ldr	r2, [r1, #8]
 800d316:	690b      	ldr	r3, [r1, #16]
 800d318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d31c:	4293      	cmp	r3, r2
 800d31e:	bfb8      	it	lt
 800d320:	4613      	movlt	r3, r2
 800d322:	6033      	str	r3, [r6, #0]
 800d324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d328:	4607      	mov	r7, r0
 800d32a:	460c      	mov	r4, r1
 800d32c:	b10a      	cbz	r2, 800d332 <_printf_common+0x26>
 800d32e:	3301      	adds	r3, #1
 800d330:	6033      	str	r3, [r6, #0]
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	0699      	lsls	r1, r3, #26
 800d336:	bf42      	ittt	mi
 800d338:	6833      	ldrmi	r3, [r6, #0]
 800d33a:	3302      	addmi	r3, #2
 800d33c:	6033      	strmi	r3, [r6, #0]
 800d33e:	6825      	ldr	r5, [r4, #0]
 800d340:	f015 0506 	ands.w	r5, r5, #6
 800d344:	d106      	bne.n	800d354 <_printf_common+0x48>
 800d346:	f104 0a19 	add.w	sl, r4, #25
 800d34a:	68e3      	ldr	r3, [r4, #12]
 800d34c:	6832      	ldr	r2, [r6, #0]
 800d34e:	1a9b      	subs	r3, r3, r2
 800d350:	42ab      	cmp	r3, r5
 800d352:	dc26      	bgt.n	800d3a2 <_printf_common+0x96>
 800d354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d358:	1e13      	subs	r3, r2, #0
 800d35a:	6822      	ldr	r2, [r4, #0]
 800d35c:	bf18      	it	ne
 800d35e:	2301      	movne	r3, #1
 800d360:	0692      	lsls	r2, r2, #26
 800d362:	d42b      	bmi.n	800d3bc <_printf_common+0xb0>
 800d364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d368:	4649      	mov	r1, r9
 800d36a:	4638      	mov	r0, r7
 800d36c:	47c0      	blx	r8
 800d36e:	3001      	adds	r0, #1
 800d370:	d01e      	beq.n	800d3b0 <_printf_common+0xa4>
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	68e5      	ldr	r5, [r4, #12]
 800d376:	6832      	ldr	r2, [r6, #0]
 800d378:	f003 0306 	and.w	r3, r3, #6
 800d37c:	2b04      	cmp	r3, #4
 800d37e:	bf08      	it	eq
 800d380:	1aad      	subeq	r5, r5, r2
 800d382:	68a3      	ldr	r3, [r4, #8]
 800d384:	6922      	ldr	r2, [r4, #16]
 800d386:	bf0c      	ite	eq
 800d388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d38c:	2500      	movne	r5, #0
 800d38e:	4293      	cmp	r3, r2
 800d390:	bfc4      	itt	gt
 800d392:	1a9b      	subgt	r3, r3, r2
 800d394:	18ed      	addgt	r5, r5, r3
 800d396:	2600      	movs	r6, #0
 800d398:	341a      	adds	r4, #26
 800d39a:	42b5      	cmp	r5, r6
 800d39c:	d11a      	bne.n	800d3d4 <_printf_common+0xc8>
 800d39e:	2000      	movs	r0, #0
 800d3a0:	e008      	b.n	800d3b4 <_printf_common+0xa8>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4652      	mov	r2, sl
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	47c0      	blx	r8
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	d103      	bne.n	800d3b8 <_printf_common+0xac>
 800d3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b8:	3501      	adds	r5, #1
 800d3ba:	e7c6      	b.n	800d34a <_printf_common+0x3e>
 800d3bc:	18e1      	adds	r1, r4, r3
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	2030      	movs	r0, #48	; 0x30
 800d3c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3c6:	4422      	add	r2, r4
 800d3c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3d0:	3302      	adds	r3, #2
 800d3d2:	e7c7      	b.n	800d364 <_printf_common+0x58>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	4622      	mov	r2, r4
 800d3d8:	4649      	mov	r1, r9
 800d3da:	4638      	mov	r0, r7
 800d3dc:	47c0      	blx	r8
 800d3de:	3001      	adds	r0, #1
 800d3e0:	d0e6      	beq.n	800d3b0 <_printf_common+0xa4>
 800d3e2:	3601      	adds	r6, #1
 800d3e4:	e7d9      	b.n	800d39a <_printf_common+0x8e>
	...

0800d3e8 <_printf_i>:
 800d3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	4691      	mov	r9, r2
 800d3f0:	7e27      	ldrb	r7, [r4, #24]
 800d3f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d3f4:	2f78      	cmp	r7, #120	; 0x78
 800d3f6:	4680      	mov	r8, r0
 800d3f8:	469a      	mov	sl, r3
 800d3fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3fe:	d807      	bhi.n	800d410 <_printf_i+0x28>
 800d400:	2f62      	cmp	r7, #98	; 0x62
 800d402:	d80a      	bhi.n	800d41a <_printf_i+0x32>
 800d404:	2f00      	cmp	r7, #0
 800d406:	f000 80d8 	beq.w	800d5ba <_printf_i+0x1d2>
 800d40a:	2f58      	cmp	r7, #88	; 0x58
 800d40c:	f000 80a3 	beq.w	800d556 <_printf_i+0x16e>
 800d410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d418:	e03a      	b.n	800d490 <_printf_i+0xa8>
 800d41a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d41e:	2b15      	cmp	r3, #21
 800d420:	d8f6      	bhi.n	800d410 <_printf_i+0x28>
 800d422:	a001      	add	r0, pc, #4	; (adr r0, 800d428 <_printf_i+0x40>)
 800d424:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d428:	0800d481 	.word	0x0800d481
 800d42c:	0800d495 	.word	0x0800d495
 800d430:	0800d411 	.word	0x0800d411
 800d434:	0800d411 	.word	0x0800d411
 800d438:	0800d411 	.word	0x0800d411
 800d43c:	0800d411 	.word	0x0800d411
 800d440:	0800d495 	.word	0x0800d495
 800d444:	0800d411 	.word	0x0800d411
 800d448:	0800d411 	.word	0x0800d411
 800d44c:	0800d411 	.word	0x0800d411
 800d450:	0800d411 	.word	0x0800d411
 800d454:	0800d5a1 	.word	0x0800d5a1
 800d458:	0800d4c5 	.word	0x0800d4c5
 800d45c:	0800d583 	.word	0x0800d583
 800d460:	0800d411 	.word	0x0800d411
 800d464:	0800d411 	.word	0x0800d411
 800d468:	0800d5c3 	.word	0x0800d5c3
 800d46c:	0800d411 	.word	0x0800d411
 800d470:	0800d4c5 	.word	0x0800d4c5
 800d474:	0800d411 	.word	0x0800d411
 800d478:	0800d411 	.word	0x0800d411
 800d47c:	0800d58b 	.word	0x0800d58b
 800d480:	680b      	ldr	r3, [r1, #0]
 800d482:	1d1a      	adds	r2, r3, #4
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	600a      	str	r2, [r1, #0]
 800d488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d490:	2301      	movs	r3, #1
 800d492:	e0a3      	b.n	800d5dc <_printf_i+0x1f4>
 800d494:	6825      	ldr	r5, [r4, #0]
 800d496:	6808      	ldr	r0, [r1, #0]
 800d498:	062e      	lsls	r6, r5, #24
 800d49a:	f100 0304 	add.w	r3, r0, #4
 800d49e:	d50a      	bpl.n	800d4b6 <_printf_i+0xce>
 800d4a0:	6805      	ldr	r5, [r0, #0]
 800d4a2:	600b      	str	r3, [r1, #0]
 800d4a4:	2d00      	cmp	r5, #0
 800d4a6:	da03      	bge.n	800d4b0 <_printf_i+0xc8>
 800d4a8:	232d      	movs	r3, #45	; 0x2d
 800d4aa:	426d      	negs	r5, r5
 800d4ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4b0:	485e      	ldr	r0, [pc, #376]	; (800d62c <_printf_i+0x244>)
 800d4b2:	230a      	movs	r3, #10
 800d4b4:	e019      	b.n	800d4ea <_printf_i+0x102>
 800d4b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d4ba:	6805      	ldr	r5, [r0, #0]
 800d4bc:	600b      	str	r3, [r1, #0]
 800d4be:	bf18      	it	ne
 800d4c0:	b22d      	sxthne	r5, r5
 800d4c2:	e7ef      	b.n	800d4a4 <_printf_i+0xbc>
 800d4c4:	680b      	ldr	r3, [r1, #0]
 800d4c6:	6825      	ldr	r5, [r4, #0]
 800d4c8:	1d18      	adds	r0, r3, #4
 800d4ca:	6008      	str	r0, [r1, #0]
 800d4cc:	0628      	lsls	r0, r5, #24
 800d4ce:	d501      	bpl.n	800d4d4 <_printf_i+0xec>
 800d4d0:	681d      	ldr	r5, [r3, #0]
 800d4d2:	e002      	b.n	800d4da <_printf_i+0xf2>
 800d4d4:	0669      	lsls	r1, r5, #25
 800d4d6:	d5fb      	bpl.n	800d4d0 <_printf_i+0xe8>
 800d4d8:	881d      	ldrh	r5, [r3, #0]
 800d4da:	4854      	ldr	r0, [pc, #336]	; (800d62c <_printf_i+0x244>)
 800d4dc:	2f6f      	cmp	r7, #111	; 0x6f
 800d4de:	bf0c      	ite	eq
 800d4e0:	2308      	moveq	r3, #8
 800d4e2:	230a      	movne	r3, #10
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4ea:	6866      	ldr	r6, [r4, #4]
 800d4ec:	60a6      	str	r6, [r4, #8]
 800d4ee:	2e00      	cmp	r6, #0
 800d4f0:	bfa2      	ittt	ge
 800d4f2:	6821      	ldrge	r1, [r4, #0]
 800d4f4:	f021 0104 	bicge.w	r1, r1, #4
 800d4f8:	6021      	strge	r1, [r4, #0]
 800d4fa:	b90d      	cbnz	r5, 800d500 <_printf_i+0x118>
 800d4fc:	2e00      	cmp	r6, #0
 800d4fe:	d04d      	beq.n	800d59c <_printf_i+0x1b4>
 800d500:	4616      	mov	r6, r2
 800d502:	fbb5 f1f3 	udiv	r1, r5, r3
 800d506:	fb03 5711 	mls	r7, r3, r1, r5
 800d50a:	5dc7      	ldrb	r7, [r0, r7]
 800d50c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d510:	462f      	mov	r7, r5
 800d512:	42bb      	cmp	r3, r7
 800d514:	460d      	mov	r5, r1
 800d516:	d9f4      	bls.n	800d502 <_printf_i+0x11a>
 800d518:	2b08      	cmp	r3, #8
 800d51a:	d10b      	bne.n	800d534 <_printf_i+0x14c>
 800d51c:	6823      	ldr	r3, [r4, #0]
 800d51e:	07df      	lsls	r7, r3, #31
 800d520:	d508      	bpl.n	800d534 <_printf_i+0x14c>
 800d522:	6923      	ldr	r3, [r4, #16]
 800d524:	6861      	ldr	r1, [r4, #4]
 800d526:	4299      	cmp	r1, r3
 800d528:	bfde      	ittt	le
 800d52a:	2330      	movle	r3, #48	; 0x30
 800d52c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d530:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d534:	1b92      	subs	r2, r2, r6
 800d536:	6122      	str	r2, [r4, #16]
 800d538:	f8cd a000 	str.w	sl, [sp]
 800d53c:	464b      	mov	r3, r9
 800d53e:	aa03      	add	r2, sp, #12
 800d540:	4621      	mov	r1, r4
 800d542:	4640      	mov	r0, r8
 800d544:	f7ff fee2 	bl	800d30c <_printf_common>
 800d548:	3001      	adds	r0, #1
 800d54a:	d14c      	bne.n	800d5e6 <_printf_i+0x1fe>
 800d54c:	f04f 30ff 	mov.w	r0, #4294967295
 800d550:	b004      	add	sp, #16
 800d552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d556:	4835      	ldr	r0, [pc, #212]	; (800d62c <_printf_i+0x244>)
 800d558:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d55c:	6823      	ldr	r3, [r4, #0]
 800d55e:	680e      	ldr	r6, [r1, #0]
 800d560:	061f      	lsls	r7, r3, #24
 800d562:	f856 5b04 	ldr.w	r5, [r6], #4
 800d566:	600e      	str	r6, [r1, #0]
 800d568:	d514      	bpl.n	800d594 <_printf_i+0x1ac>
 800d56a:	07d9      	lsls	r1, r3, #31
 800d56c:	bf44      	itt	mi
 800d56e:	f043 0320 	orrmi.w	r3, r3, #32
 800d572:	6023      	strmi	r3, [r4, #0]
 800d574:	b91d      	cbnz	r5, 800d57e <_printf_i+0x196>
 800d576:	6823      	ldr	r3, [r4, #0]
 800d578:	f023 0320 	bic.w	r3, r3, #32
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	2310      	movs	r3, #16
 800d580:	e7b0      	b.n	800d4e4 <_printf_i+0xfc>
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	f043 0320 	orr.w	r3, r3, #32
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	2378      	movs	r3, #120	; 0x78
 800d58c:	4828      	ldr	r0, [pc, #160]	; (800d630 <_printf_i+0x248>)
 800d58e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d592:	e7e3      	b.n	800d55c <_printf_i+0x174>
 800d594:	065e      	lsls	r6, r3, #25
 800d596:	bf48      	it	mi
 800d598:	b2ad      	uxthmi	r5, r5
 800d59a:	e7e6      	b.n	800d56a <_printf_i+0x182>
 800d59c:	4616      	mov	r6, r2
 800d59e:	e7bb      	b.n	800d518 <_printf_i+0x130>
 800d5a0:	680b      	ldr	r3, [r1, #0]
 800d5a2:	6826      	ldr	r6, [r4, #0]
 800d5a4:	6960      	ldr	r0, [r4, #20]
 800d5a6:	1d1d      	adds	r5, r3, #4
 800d5a8:	600d      	str	r5, [r1, #0]
 800d5aa:	0635      	lsls	r5, r6, #24
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	d501      	bpl.n	800d5b4 <_printf_i+0x1cc>
 800d5b0:	6018      	str	r0, [r3, #0]
 800d5b2:	e002      	b.n	800d5ba <_printf_i+0x1d2>
 800d5b4:	0671      	lsls	r1, r6, #25
 800d5b6:	d5fb      	bpl.n	800d5b0 <_printf_i+0x1c8>
 800d5b8:	8018      	strh	r0, [r3, #0]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	6123      	str	r3, [r4, #16]
 800d5be:	4616      	mov	r6, r2
 800d5c0:	e7ba      	b.n	800d538 <_printf_i+0x150>
 800d5c2:	680b      	ldr	r3, [r1, #0]
 800d5c4:	1d1a      	adds	r2, r3, #4
 800d5c6:	600a      	str	r2, [r1, #0]
 800d5c8:	681e      	ldr	r6, [r3, #0]
 800d5ca:	6862      	ldr	r2, [r4, #4]
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7f2 fe16 	bl	8000200 <memchr>
 800d5d4:	b108      	cbz	r0, 800d5da <_printf_i+0x1f2>
 800d5d6:	1b80      	subs	r0, r0, r6
 800d5d8:	6060      	str	r0, [r4, #4]
 800d5da:	6863      	ldr	r3, [r4, #4]
 800d5dc:	6123      	str	r3, [r4, #16]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5e4:	e7a8      	b.n	800d538 <_printf_i+0x150>
 800d5e6:	6923      	ldr	r3, [r4, #16]
 800d5e8:	4632      	mov	r2, r6
 800d5ea:	4649      	mov	r1, r9
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	47d0      	blx	sl
 800d5f0:	3001      	adds	r0, #1
 800d5f2:	d0ab      	beq.n	800d54c <_printf_i+0x164>
 800d5f4:	6823      	ldr	r3, [r4, #0]
 800d5f6:	079b      	lsls	r3, r3, #30
 800d5f8:	d413      	bmi.n	800d622 <_printf_i+0x23a>
 800d5fa:	68e0      	ldr	r0, [r4, #12]
 800d5fc:	9b03      	ldr	r3, [sp, #12]
 800d5fe:	4298      	cmp	r0, r3
 800d600:	bfb8      	it	lt
 800d602:	4618      	movlt	r0, r3
 800d604:	e7a4      	b.n	800d550 <_printf_i+0x168>
 800d606:	2301      	movs	r3, #1
 800d608:	4632      	mov	r2, r6
 800d60a:	4649      	mov	r1, r9
 800d60c:	4640      	mov	r0, r8
 800d60e:	47d0      	blx	sl
 800d610:	3001      	adds	r0, #1
 800d612:	d09b      	beq.n	800d54c <_printf_i+0x164>
 800d614:	3501      	adds	r5, #1
 800d616:	68e3      	ldr	r3, [r4, #12]
 800d618:	9903      	ldr	r1, [sp, #12]
 800d61a:	1a5b      	subs	r3, r3, r1
 800d61c:	42ab      	cmp	r3, r5
 800d61e:	dcf2      	bgt.n	800d606 <_printf_i+0x21e>
 800d620:	e7eb      	b.n	800d5fa <_printf_i+0x212>
 800d622:	2500      	movs	r5, #0
 800d624:	f104 0619 	add.w	r6, r4, #25
 800d628:	e7f5      	b.n	800d616 <_printf_i+0x22e>
 800d62a:	bf00      	nop
 800d62c:	0800e807 	.word	0x0800e807
 800d630:	0800e818 	.word	0x0800e818

0800d634 <_read_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4d07      	ldr	r5, [pc, #28]	; (800d654 <_read_r+0x20>)
 800d638:	4604      	mov	r4, r0
 800d63a:	4608      	mov	r0, r1
 800d63c:	4611      	mov	r1, r2
 800d63e:	2200      	movs	r2, #0
 800d640:	602a      	str	r2, [r5, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	f7fd fe64 	bl	800b310 <_read>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d102      	bne.n	800d652 <_read_r+0x1e>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	b103      	cbz	r3, 800d652 <_read_r+0x1e>
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	2001aae0 	.word	0x2001aae0

0800d658 <__swbuf_r>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	460e      	mov	r6, r1
 800d65c:	4614      	mov	r4, r2
 800d65e:	4605      	mov	r5, r0
 800d660:	b118      	cbz	r0, 800d66a <__swbuf_r+0x12>
 800d662:	6983      	ldr	r3, [r0, #24]
 800d664:	b90b      	cbnz	r3, 800d66a <__swbuf_r+0x12>
 800d666:	f7fe ff8f 	bl	800c588 <__sinit>
 800d66a:	4b21      	ldr	r3, [pc, #132]	; (800d6f0 <__swbuf_r+0x98>)
 800d66c:	429c      	cmp	r4, r3
 800d66e:	d12b      	bne.n	800d6c8 <__swbuf_r+0x70>
 800d670:	686c      	ldr	r4, [r5, #4]
 800d672:	69a3      	ldr	r3, [r4, #24]
 800d674:	60a3      	str	r3, [r4, #8]
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	071a      	lsls	r2, r3, #28
 800d67a:	d52f      	bpl.n	800d6dc <__swbuf_r+0x84>
 800d67c:	6923      	ldr	r3, [r4, #16]
 800d67e:	b36b      	cbz	r3, 800d6dc <__swbuf_r+0x84>
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	6820      	ldr	r0, [r4, #0]
 800d684:	1ac0      	subs	r0, r0, r3
 800d686:	6963      	ldr	r3, [r4, #20]
 800d688:	b2f6      	uxtb	r6, r6
 800d68a:	4283      	cmp	r3, r0
 800d68c:	4637      	mov	r7, r6
 800d68e:	dc04      	bgt.n	800d69a <__swbuf_r+0x42>
 800d690:	4621      	mov	r1, r4
 800d692:	4628      	mov	r0, r5
 800d694:	f7ff fb18 	bl	800ccc8 <_fflush_r>
 800d698:	bb30      	cbnz	r0, 800d6e8 <__swbuf_r+0x90>
 800d69a:	68a3      	ldr	r3, [r4, #8]
 800d69c:	3b01      	subs	r3, #1
 800d69e:	60a3      	str	r3, [r4, #8]
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	1c5a      	adds	r2, r3, #1
 800d6a4:	6022      	str	r2, [r4, #0]
 800d6a6:	701e      	strb	r6, [r3, #0]
 800d6a8:	6963      	ldr	r3, [r4, #20]
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	4283      	cmp	r3, r0
 800d6ae:	d004      	beq.n	800d6ba <__swbuf_r+0x62>
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	07db      	lsls	r3, r3, #31
 800d6b4:	d506      	bpl.n	800d6c4 <__swbuf_r+0x6c>
 800d6b6:	2e0a      	cmp	r6, #10
 800d6b8:	d104      	bne.n	800d6c4 <__swbuf_r+0x6c>
 800d6ba:	4621      	mov	r1, r4
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f7ff fb03 	bl	800ccc8 <_fflush_r>
 800d6c2:	b988      	cbnz	r0, 800d6e8 <__swbuf_r+0x90>
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6c8:	4b0a      	ldr	r3, [pc, #40]	; (800d6f4 <__swbuf_r+0x9c>)
 800d6ca:	429c      	cmp	r4, r3
 800d6cc:	d101      	bne.n	800d6d2 <__swbuf_r+0x7a>
 800d6ce:	68ac      	ldr	r4, [r5, #8]
 800d6d0:	e7cf      	b.n	800d672 <__swbuf_r+0x1a>
 800d6d2:	4b09      	ldr	r3, [pc, #36]	; (800d6f8 <__swbuf_r+0xa0>)
 800d6d4:	429c      	cmp	r4, r3
 800d6d6:	bf08      	it	eq
 800d6d8:	68ec      	ldreq	r4, [r5, #12]
 800d6da:	e7ca      	b.n	800d672 <__swbuf_r+0x1a>
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f000 f80c 	bl	800d6fc <__swsetup_r>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d0cb      	beq.n	800d680 <__swbuf_r+0x28>
 800d6e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d6ec:	e7ea      	b.n	800d6c4 <__swbuf_r+0x6c>
 800d6ee:	bf00      	nop
 800d6f0:	0800e700 	.word	0x0800e700
 800d6f4:	0800e720 	.word	0x0800e720
 800d6f8:	0800e6e0 	.word	0x0800e6e0

0800d6fc <__swsetup_r>:
 800d6fc:	4b32      	ldr	r3, [pc, #200]	; (800d7c8 <__swsetup_r+0xcc>)
 800d6fe:	b570      	push	{r4, r5, r6, lr}
 800d700:	681d      	ldr	r5, [r3, #0]
 800d702:	4606      	mov	r6, r0
 800d704:	460c      	mov	r4, r1
 800d706:	b125      	cbz	r5, 800d712 <__swsetup_r+0x16>
 800d708:	69ab      	ldr	r3, [r5, #24]
 800d70a:	b913      	cbnz	r3, 800d712 <__swsetup_r+0x16>
 800d70c:	4628      	mov	r0, r5
 800d70e:	f7fe ff3b 	bl	800c588 <__sinit>
 800d712:	4b2e      	ldr	r3, [pc, #184]	; (800d7cc <__swsetup_r+0xd0>)
 800d714:	429c      	cmp	r4, r3
 800d716:	d10f      	bne.n	800d738 <__swsetup_r+0x3c>
 800d718:	686c      	ldr	r4, [r5, #4]
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d720:	0719      	lsls	r1, r3, #28
 800d722:	d42c      	bmi.n	800d77e <__swsetup_r+0x82>
 800d724:	06dd      	lsls	r5, r3, #27
 800d726:	d411      	bmi.n	800d74c <__swsetup_r+0x50>
 800d728:	2309      	movs	r3, #9
 800d72a:	6033      	str	r3, [r6, #0]
 800d72c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d730:	81a3      	strh	r3, [r4, #12]
 800d732:	f04f 30ff 	mov.w	r0, #4294967295
 800d736:	e03e      	b.n	800d7b6 <__swsetup_r+0xba>
 800d738:	4b25      	ldr	r3, [pc, #148]	; (800d7d0 <__swsetup_r+0xd4>)
 800d73a:	429c      	cmp	r4, r3
 800d73c:	d101      	bne.n	800d742 <__swsetup_r+0x46>
 800d73e:	68ac      	ldr	r4, [r5, #8]
 800d740:	e7eb      	b.n	800d71a <__swsetup_r+0x1e>
 800d742:	4b24      	ldr	r3, [pc, #144]	; (800d7d4 <__swsetup_r+0xd8>)
 800d744:	429c      	cmp	r4, r3
 800d746:	bf08      	it	eq
 800d748:	68ec      	ldreq	r4, [r5, #12]
 800d74a:	e7e6      	b.n	800d71a <__swsetup_r+0x1e>
 800d74c:	0758      	lsls	r0, r3, #29
 800d74e:	d512      	bpl.n	800d776 <__swsetup_r+0x7a>
 800d750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d752:	b141      	cbz	r1, 800d766 <__swsetup_r+0x6a>
 800d754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d758:	4299      	cmp	r1, r3
 800d75a:	d002      	beq.n	800d762 <__swsetup_r+0x66>
 800d75c:	4630      	mov	r0, r6
 800d75e:	f7fe fff7 	bl	800c750 <_free_r>
 800d762:	2300      	movs	r3, #0
 800d764:	6363      	str	r3, [r4, #52]	; 0x34
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d76c:	81a3      	strh	r3, [r4, #12]
 800d76e:	2300      	movs	r3, #0
 800d770:	6063      	str	r3, [r4, #4]
 800d772:	6923      	ldr	r3, [r4, #16]
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	f043 0308 	orr.w	r3, r3, #8
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	6923      	ldr	r3, [r4, #16]
 800d780:	b94b      	cbnz	r3, 800d796 <__swsetup_r+0x9a>
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d78c:	d003      	beq.n	800d796 <__swsetup_r+0x9a>
 800d78e:	4621      	mov	r1, r4
 800d790:	4630      	mov	r0, r6
 800d792:	f000 f84d 	bl	800d830 <__smakebuf_r>
 800d796:	89a0      	ldrh	r0, [r4, #12]
 800d798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d79c:	f010 0301 	ands.w	r3, r0, #1
 800d7a0:	d00a      	beq.n	800d7b8 <__swsetup_r+0xbc>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60a3      	str	r3, [r4, #8]
 800d7a6:	6963      	ldr	r3, [r4, #20]
 800d7a8:	425b      	negs	r3, r3
 800d7aa:	61a3      	str	r3, [r4, #24]
 800d7ac:	6923      	ldr	r3, [r4, #16]
 800d7ae:	b943      	cbnz	r3, 800d7c2 <__swsetup_r+0xc6>
 800d7b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7b4:	d1ba      	bne.n	800d72c <__swsetup_r+0x30>
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
 800d7b8:	0781      	lsls	r1, r0, #30
 800d7ba:	bf58      	it	pl
 800d7bc:	6963      	ldrpl	r3, [r4, #20]
 800d7be:	60a3      	str	r3, [r4, #8]
 800d7c0:	e7f4      	b.n	800d7ac <__swsetup_r+0xb0>
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	e7f7      	b.n	800d7b6 <__swsetup_r+0xba>
 800d7c6:	bf00      	nop
 800d7c8:	20000638 	.word	0x20000638
 800d7cc:	0800e700 	.word	0x0800e700
 800d7d0:	0800e720 	.word	0x0800e720
 800d7d4:	0800e6e0 	.word	0x0800e6e0

0800d7d8 <abort>:
 800d7d8:	b508      	push	{r3, lr}
 800d7da:	2006      	movs	r0, #6
 800d7dc:	f000 f8d0 	bl	800d980 <raise>
 800d7e0:	2001      	movs	r0, #1
 800d7e2:	f7fd fd8b 	bl	800b2fc <_exit>

0800d7e6 <__swhatbuf_r>:
 800d7e6:	b570      	push	{r4, r5, r6, lr}
 800d7e8:	460e      	mov	r6, r1
 800d7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ee:	2900      	cmp	r1, #0
 800d7f0:	b096      	sub	sp, #88	; 0x58
 800d7f2:	4614      	mov	r4, r2
 800d7f4:	461d      	mov	r5, r3
 800d7f6:	da07      	bge.n	800d808 <__swhatbuf_r+0x22>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	602b      	str	r3, [r5, #0]
 800d7fc:	89b3      	ldrh	r3, [r6, #12]
 800d7fe:	061a      	lsls	r2, r3, #24
 800d800:	d410      	bmi.n	800d824 <__swhatbuf_r+0x3e>
 800d802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d806:	e00e      	b.n	800d826 <__swhatbuf_r+0x40>
 800d808:	466a      	mov	r2, sp
 800d80a:	f000 f8d5 	bl	800d9b8 <_fstat_r>
 800d80e:	2800      	cmp	r0, #0
 800d810:	dbf2      	blt.n	800d7f8 <__swhatbuf_r+0x12>
 800d812:	9a01      	ldr	r2, [sp, #4]
 800d814:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d818:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d81c:	425a      	negs	r2, r3
 800d81e:	415a      	adcs	r2, r3
 800d820:	602a      	str	r2, [r5, #0]
 800d822:	e7ee      	b.n	800d802 <__swhatbuf_r+0x1c>
 800d824:	2340      	movs	r3, #64	; 0x40
 800d826:	2000      	movs	r0, #0
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	b016      	add	sp, #88	; 0x58
 800d82c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d830 <__smakebuf_r>:
 800d830:	898b      	ldrh	r3, [r1, #12]
 800d832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d834:	079d      	lsls	r5, r3, #30
 800d836:	4606      	mov	r6, r0
 800d838:	460c      	mov	r4, r1
 800d83a:	d507      	bpl.n	800d84c <__smakebuf_r+0x1c>
 800d83c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d840:	6023      	str	r3, [r4, #0]
 800d842:	6123      	str	r3, [r4, #16]
 800d844:	2301      	movs	r3, #1
 800d846:	6163      	str	r3, [r4, #20]
 800d848:	b002      	add	sp, #8
 800d84a:	bd70      	pop	{r4, r5, r6, pc}
 800d84c:	ab01      	add	r3, sp, #4
 800d84e:	466a      	mov	r2, sp
 800d850:	f7ff ffc9 	bl	800d7e6 <__swhatbuf_r>
 800d854:	9900      	ldr	r1, [sp, #0]
 800d856:	4605      	mov	r5, r0
 800d858:	4630      	mov	r0, r6
 800d85a:	f7fe ffc9 	bl	800c7f0 <_malloc_r>
 800d85e:	b948      	cbnz	r0, 800d874 <__smakebuf_r+0x44>
 800d860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d864:	059a      	lsls	r2, r3, #22
 800d866:	d4ef      	bmi.n	800d848 <__smakebuf_r+0x18>
 800d868:	f023 0303 	bic.w	r3, r3, #3
 800d86c:	f043 0302 	orr.w	r3, r3, #2
 800d870:	81a3      	strh	r3, [r4, #12]
 800d872:	e7e3      	b.n	800d83c <__smakebuf_r+0xc>
 800d874:	4b0d      	ldr	r3, [pc, #52]	; (800d8ac <__smakebuf_r+0x7c>)
 800d876:	62b3      	str	r3, [r6, #40]	; 0x28
 800d878:	89a3      	ldrh	r3, [r4, #12]
 800d87a:	6020      	str	r0, [r4, #0]
 800d87c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d880:	81a3      	strh	r3, [r4, #12]
 800d882:	9b00      	ldr	r3, [sp, #0]
 800d884:	6163      	str	r3, [r4, #20]
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	6120      	str	r0, [r4, #16]
 800d88a:	b15b      	cbz	r3, 800d8a4 <__smakebuf_r+0x74>
 800d88c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d890:	4630      	mov	r0, r6
 800d892:	f000 f8a3 	bl	800d9dc <_isatty_r>
 800d896:	b128      	cbz	r0, 800d8a4 <__smakebuf_r+0x74>
 800d898:	89a3      	ldrh	r3, [r4, #12]
 800d89a:	f023 0303 	bic.w	r3, r3, #3
 800d89e:	f043 0301 	orr.w	r3, r3, #1
 800d8a2:	81a3      	strh	r3, [r4, #12]
 800d8a4:	89a0      	ldrh	r0, [r4, #12]
 800d8a6:	4305      	orrs	r5, r0
 800d8a8:	81a5      	strh	r5, [r4, #12]
 800d8aa:	e7cd      	b.n	800d848 <__smakebuf_r+0x18>
 800d8ac:	0800c521 	.word	0x0800c521

0800d8b0 <memmove>:
 800d8b0:	4288      	cmp	r0, r1
 800d8b2:	b510      	push	{r4, lr}
 800d8b4:	eb01 0402 	add.w	r4, r1, r2
 800d8b8:	d902      	bls.n	800d8c0 <memmove+0x10>
 800d8ba:	4284      	cmp	r4, r0
 800d8bc:	4623      	mov	r3, r4
 800d8be:	d807      	bhi.n	800d8d0 <memmove+0x20>
 800d8c0:	1e43      	subs	r3, r0, #1
 800d8c2:	42a1      	cmp	r1, r4
 800d8c4:	d008      	beq.n	800d8d8 <memmove+0x28>
 800d8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8ce:	e7f8      	b.n	800d8c2 <memmove+0x12>
 800d8d0:	4402      	add	r2, r0
 800d8d2:	4601      	mov	r1, r0
 800d8d4:	428a      	cmp	r2, r1
 800d8d6:	d100      	bne.n	800d8da <memmove+0x2a>
 800d8d8:	bd10      	pop	{r4, pc}
 800d8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8e2:	e7f7      	b.n	800d8d4 <memmove+0x24>

0800d8e4 <_realloc_r>:
 800d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	4614      	mov	r4, r2
 800d8ea:	460e      	mov	r6, r1
 800d8ec:	b921      	cbnz	r1, 800d8f8 <_realloc_r+0x14>
 800d8ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	f7fe bf7c 	b.w	800c7f0 <_malloc_r>
 800d8f8:	b922      	cbnz	r2, 800d904 <_realloc_r+0x20>
 800d8fa:	f7fe ff29 	bl	800c750 <_free_r>
 800d8fe:	4625      	mov	r5, r4
 800d900:	4628      	mov	r0, r5
 800d902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d904:	f000 f87a 	bl	800d9fc <_malloc_usable_size_r>
 800d908:	42a0      	cmp	r0, r4
 800d90a:	d20f      	bcs.n	800d92c <_realloc_r+0x48>
 800d90c:	4621      	mov	r1, r4
 800d90e:	4638      	mov	r0, r7
 800d910:	f7fe ff6e 	bl	800c7f0 <_malloc_r>
 800d914:	4605      	mov	r5, r0
 800d916:	2800      	cmp	r0, #0
 800d918:	d0f2      	beq.n	800d900 <_realloc_r+0x1c>
 800d91a:	4631      	mov	r1, r6
 800d91c:	4622      	mov	r2, r4
 800d91e:	f7fe ff01 	bl	800c724 <memcpy>
 800d922:	4631      	mov	r1, r6
 800d924:	4638      	mov	r0, r7
 800d926:	f7fe ff13 	bl	800c750 <_free_r>
 800d92a:	e7e9      	b.n	800d900 <_realloc_r+0x1c>
 800d92c:	4635      	mov	r5, r6
 800d92e:	e7e7      	b.n	800d900 <_realloc_r+0x1c>

0800d930 <_raise_r>:
 800d930:	291f      	cmp	r1, #31
 800d932:	b538      	push	{r3, r4, r5, lr}
 800d934:	4604      	mov	r4, r0
 800d936:	460d      	mov	r5, r1
 800d938:	d904      	bls.n	800d944 <_raise_r+0x14>
 800d93a:	2316      	movs	r3, #22
 800d93c:	6003      	str	r3, [r0, #0]
 800d93e:	f04f 30ff 	mov.w	r0, #4294967295
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d946:	b112      	cbz	r2, 800d94e <_raise_r+0x1e>
 800d948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d94c:	b94b      	cbnz	r3, 800d962 <_raise_r+0x32>
 800d94e:	4620      	mov	r0, r4
 800d950:	f000 f830 	bl	800d9b4 <_getpid_r>
 800d954:	462a      	mov	r2, r5
 800d956:	4601      	mov	r1, r0
 800d958:	4620      	mov	r0, r4
 800d95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d95e:	f000 b817 	b.w	800d990 <_kill_r>
 800d962:	2b01      	cmp	r3, #1
 800d964:	d00a      	beq.n	800d97c <_raise_r+0x4c>
 800d966:	1c59      	adds	r1, r3, #1
 800d968:	d103      	bne.n	800d972 <_raise_r+0x42>
 800d96a:	2316      	movs	r3, #22
 800d96c:	6003      	str	r3, [r0, #0]
 800d96e:	2001      	movs	r0, #1
 800d970:	e7e7      	b.n	800d942 <_raise_r+0x12>
 800d972:	2400      	movs	r4, #0
 800d974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d978:	4628      	mov	r0, r5
 800d97a:	4798      	blx	r3
 800d97c:	2000      	movs	r0, #0
 800d97e:	e7e0      	b.n	800d942 <_raise_r+0x12>

0800d980 <raise>:
 800d980:	4b02      	ldr	r3, [pc, #8]	; (800d98c <raise+0xc>)
 800d982:	4601      	mov	r1, r0
 800d984:	6818      	ldr	r0, [r3, #0]
 800d986:	f7ff bfd3 	b.w	800d930 <_raise_r>
 800d98a:	bf00      	nop
 800d98c:	20000638 	.word	0x20000638

0800d990 <_kill_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4d07      	ldr	r5, [pc, #28]	; (800d9b0 <_kill_r+0x20>)
 800d994:	2300      	movs	r3, #0
 800d996:	4604      	mov	r4, r0
 800d998:	4608      	mov	r0, r1
 800d99a:	4611      	mov	r1, r2
 800d99c:	602b      	str	r3, [r5, #0]
 800d99e:	f7fd fc9d 	bl	800b2dc <_kill>
 800d9a2:	1c43      	adds	r3, r0, #1
 800d9a4:	d102      	bne.n	800d9ac <_kill_r+0x1c>
 800d9a6:	682b      	ldr	r3, [r5, #0]
 800d9a8:	b103      	cbz	r3, 800d9ac <_kill_r+0x1c>
 800d9aa:	6023      	str	r3, [r4, #0]
 800d9ac:	bd38      	pop	{r3, r4, r5, pc}
 800d9ae:	bf00      	nop
 800d9b0:	2001aae0 	.word	0x2001aae0

0800d9b4 <_getpid_r>:
 800d9b4:	f7fd bc8a 	b.w	800b2cc <_getpid>

0800d9b8 <_fstat_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d07      	ldr	r5, [pc, #28]	; (800d9d8 <_fstat_r+0x20>)
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	602b      	str	r3, [r5, #0]
 800d9c6:	f7fd fce8 	bl	800b39a <_fstat>
 800d9ca:	1c43      	adds	r3, r0, #1
 800d9cc:	d102      	bne.n	800d9d4 <_fstat_r+0x1c>
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	b103      	cbz	r3, 800d9d4 <_fstat_r+0x1c>
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	bd38      	pop	{r3, r4, r5, pc}
 800d9d6:	bf00      	nop
 800d9d8:	2001aae0 	.word	0x2001aae0

0800d9dc <_isatty_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4d06      	ldr	r5, [pc, #24]	; (800d9f8 <_isatty_r+0x1c>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	602b      	str	r3, [r5, #0]
 800d9e8:	f7fd fce7 	bl	800b3ba <_isatty>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_isatty_r+0x1a>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_isatty_r+0x1a>
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	2001aae0 	.word	0x2001aae0

0800d9fc <_malloc_usable_size_r>:
 800d9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da00:	1f18      	subs	r0, r3, #4
 800da02:	2b00      	cmp	r3, #0
 800da04:	bfbc      	itt	lt
 800da06:	580b      	ldrlt	r3, [r1, r0]
 800da08:	18c0      	addlt	r0, r0, r3
 800da0a:	4770      	bx	lr

0800da0c <fmod>:
 800da0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0e:	ed2d 8b02 	vpush	{d8}
 800da12:	ec57 6b10 	vmov	r6, r7, d0
 800da16:	ec55 4b11 	vmov	r4, r5, d1
 800da1a:	f000 f833 	bl	800da84 <__ieee754_fmod>
 800da1e:	4b18      	ldr	r3, [pc, #96]	; (800da80 <fmod+0x74>)
 800da20:	eeb0 8a40 	vmov.f32	s16, s0
 800da24:	eef0 8a60 	vmov.f32	s17, s1
 800da28:	f993 3000 	ldrsb.w	r3, [r3]
 800da2c:	3301      	adds	r3, #1
 800da2e:	d020      	beq.n	800da72 <fmod+0x66>
 800da30:	4622      	mov	r2, r4
 800da32:	462b      	mov	r3, r5
 800da34:	4620      	mov	r0, r4
 800da36:	4629      	mov	r1, r5
 800da38:	f7f3 f888 	bl	8000b4c <__aeabi_dcmpun>
 800da3c:	b9c8      	cbnz	r0, 800da72 <fmod+0x66>
 800da3e:	4632      	mov	r2, r6
 800da40:	463b      	mov	r3, r7
 800da42:	4630      	mov	r0, r6
 800da44:	4639      	mov	r1, r7
 800da46:	f7f3 f881 	bl	8000b4c <__aeabi_dcmpun>
 800da4a:	b990      	cbnz	r0, 800da72 <fmod+0x66>
 800da4c:	2200      	movs	r2, #0
 800da4e:	2300      	movs	r3, #0
 800da50:	4620      	mov	r0, r4
 800da52:	4629      	mov	r1, r5
 800da54:	f7f3 f848 	bl	8000ae8 <__aeabi_dcmpeq>
 800da58:	b158      	cbz	r0, 800da72 <fmod+0x66>
 800da5a:	f7fe fd37 	bl	800c4cc <__errno>
 800da5e:	2321      	movs	r3, #33	; 0x21
 800da60:	6003      	str	r3, [r0, #0]
 800da62:	2200      	movs	r2, #0
 800da64:	2300      	movs	r3, #0
 800da66:	4610      	mov	r0, r2
 800da68:	4619      	mov	r1, r3
 800da6a:	f7f2 feff 	bl	800086c <__aeabi_ddiv>
 800da6e:	ec41 0b18 	vmov	d8, r0, r1
 800da72:	eeb0 0a48 	vmov.f32	s0, s16
 800da76:	eef0 0a68 	vmov.f32	s1, s17
 800da7a:	ecbd 8b02 	vpop	{d8}
 800da7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da80:	2000069c 	.word	0x2000069c

0800da84 <__ieee754_fmod>:
 800da84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da88:	ec53 2b11 	vmov	r2, r3, d1
 800da8c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800da90:	ea5e 0402 	orrs.w	r4, lr, r2
 800da94:	ec51 0b10 	vmov	r0, r1, d0
 800da98:	ee11 7a10 	vmov	r7, s2
 800da9c:	ee11 ca10 	vmov	ip, s2
 800daa0:	461e      	mov	r6, r3
 800daa2:	d00d      	beq.n	800dac0 <__ieee754_fmod+0x3c>
 800daa4:	4c7a      	ldr	r4, [pc, #488]	; (800dc90 <__ieee754_fmod+0x20c>)
 800daa6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800daaa:	45a0      	cmp	r8, r4
 800daac:	4689      	mov	r9, r1
 800daae:	dc07      	bgt.n	800dac0 <__ieee754_fmod+0x3c>
 800dab0:	4254      	negs	r4, r2
 800dab2:	4d78      	ldr	r5, [pc, #480]	; (800dc94 <__ieee754_fmod+0x210>)
 800dab4:	4314      	orrs	r4, r2
 800dab6:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800daba:	42ac      	cmp	r4, r5
 800dabc:	46ab      	mov	fp, r5
 800dabe:	d909      	bls.n	800dad4 <__ieee754_fmod+0x50>
 800dac0:	f7f2 fdaa 	bl	8000618 <__aeabi_dmul>
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	f7f2 fed0 	bl	800086c <__aeabi_ddiv>
 800dacc:	ec41 0b10 	vmov	d0, r0, r1
 800dad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad4:	45f0      	cmp	r8, lr
 800dad6:	ee10 aa10 	vmov	sl, s0
 800dada:	ee10 4a10 	vmov	r4, s0
 800dade:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dae2:	dc0a      	bgt.n	800dafa <__ieee754_fmod+0x76>
 800dae4:	dbf2      	blt.n	800dacc <__ieee754_fmod+0x48>
 800dae6:	4290      	cmp	r0, r2
 800dae8:	d3f0      	bcc.n	800dacc <__ieee754_fmod+0x48>
 800daea:	d106      	bne.n	800dafa <__ieee754_fmod+0x76>
 800daec:	4a6a      	ldr	r2, [pc, #424]	; (800dc98 <__ieee754_fmod+0x214>)
 800daee:	0fed      	lsrs	r5, r5, #31
 800daf0:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800daf4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800daf8:	e7e8      	b.n	800dacc <__ieee754_fmod+0x48>
 800dafa:	ea19 0f0b 	tst.w	r9, fp
 800dafe:	d14a      	bne.n	800db96 <__ieee754_fmod+0x112>
 800db00:	f1b8 0f00 	cmp.w	r8, #0
 800db04:	d13f      	bne.n	800db86 <__ieee754_fmod+0x102>
 800db06:	4965      	ldr	r1, [pc, #404]	; (800dc9c <__ieee754_fmod+0x218>)
 800db08:	4653      	mov	r3, sl
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	dc38      	bgt.n	800db80 <__ieee754_fmod+0xfc>
 800db0e:	4b61      	ldr	r3, [pc, #388]	; (800dc94 <__ieee754_fmod+0x210>)
 800db10:	4033      	ands	r3, r6
 800db12:	2b00      	cmp	r3, #0
 800db14:	d14f      	bne.n	800dbb6 <__ieee754_fmod+0x132>
 800db16:	f1be 0f00 	cmp.w	lr, #0
 800db1a:	d144      	bne.n	800dba6 <__ieee754_fmod+0x122>
 800db1c:	4a5f      	ldr	r2, [pc, #380]	; (800dc9c <__ieee754_fmod+0x218>)
 800db1e:	463b      	mov	r3, r7
 800db20:	2b00      	cmp	r3, #0
 800db22:	dc3d      	bgt.n	800dba0 <__ieee754_fmod+0x11c>
 800db24:	4b5e      	ldr	r3, [pc, #376]	; (800dca0 <__ieee754_fmod+0x21c>)
 800db26:	4299      	cmp	r1, r3
 800db28:	db4a      	blt.n	800dbc0 <__ieee754_fmod+0x13c>
 800db2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db32:	485b      	ldr	r0, [pc, #364]	; (800dca0 <__ieee754_fmod+0x21c>)
 800db34:	4282      	cmp	r2, r0
 800db36:	db57      	blt.n	800dbe8 <__ieee754_fmod+0x164>
 800db38:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800db3c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800db40:	1a89      	subs	r1, r1, r2
 800db42:	1b98      	subs	r0, r3, r6
 800db44:	eba4 070c 	sub.w	r7, r4, ip
 800db48:	2900      	cmp	r1, #0
 800db4a:	d164      	bne.n	800dc16 <__ieee754_fmod+0x192>
 800db4c:	4564      	cmp	r4, ip
 800db4e:	bf38      	it	cc
 800db50:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800db54:	2800      	cmp	r0, #0
 800db56:	bfa4      	itt	ge
 800db58:	463c      	movge	r4, r7
 800db5a:	4603      	movge	r3, r0
 800db5c:	ea53 0104 	orrs.w	r1, r3, r4
 800db60:	d0c4      	beq.n	800daec <__ieee754_fmod+0x68>
 800db62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db66:	db6b      	blt.n	800dc40 <__ieee754_fmod+0x1bc>
 800db68:	494d      	ldr	r1, [pc, #308]	; (800dca0 <__ieee754_fmod+0x21c>)
 800db6a:	428a      	cmp	r2, r1
 800db6c:	db6e      	blt.n	800dc4c <__ieee754_fmod+0x1c8>
 800db6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800db72:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800db76:	431d      	orrs	r5, r3
 800db78:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800db7c:	4620      	mov	r0, r4
 800db7e:	e7a5      	b.n	800dacc <__ieee754_fmod+0x48>
 800db80:	3901      	subs	r1, #1
 800db82:	005b      	lsls	r3, r3, #1
 800db84:	e7c1      	b.n	800db0a <__ieee754_fmod+0x86>
 800db86:	4946      	ldr	r1, [pc, #280]	; (800dca0 <__ieee754_fmod+0x21c>)
 800db88:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	ddbe      	ble.n	800db0e <__ieee754_fmod+0x8a>
 800db90:	3901      	subs	r1, #1
 800db92:	005b      	lsls	r3, r3, #1
 800db94:	e7fa      	b.n	800db8c <__ieee754_fmod+0x108>
 800db96:	ea4f 5128 	mov.w	r1, r8, asr #20
 800db9a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800db9e:	e7b6      	b.n	800db0e <__ieee754_fmod+0x8a>
 800dba0:	3a01      	subs	r2, #1
 800dba2:	005b      	lsls	r3, r3, #1
 800dba4:	e7bc      	b.n	800db20 <__ieee754_fmod+0x9c>
 800dba6:	4a3e      	ldr	r2, [pc, #248]	; (800dca0 <__ieee754_fmod+0x21c>)
 800dba8:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	ddb9      	ble.n	800db24 <__ieee754_fmod+0xa0>
 800dbb0:	3a01      	subs	r2, #1
 800dbb2:	005b      	lsls	r3, r3, #1
 800dbb4:	e7fa      	b.n	800dbac <__ieee754_fmod+0x128>
 800dbb6:	ea4f 522e 	mov.w	r2, lr, asr #20
 800dbba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dbbe:	e7b1      	b.n	800db24 <__ieee754_fmod+0xa0>
 800dbc0:	1a5c      	subs	r4, r3, r1
 800dbc2:	2c1f      	cmp	r4, #31
 800dbc4:	dc0a      	bgt.n	800dbdc <__ieee754_fmod+0x158>
 800dbc6:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800dbca:	fa08 f804 	lsl.w	r8, r8, r4
 800dbce:	fa2a f303 	lsr.w	r3, sl, r3
 800dbd2:	ea43 0308 	orr.w	r3, r3, r8
 800dbd6:	fa0a f404 	lsl.w	r4, sl, r4
 800dbda:	e7aa      	b.n	800db32 <__ieee754_fmod+0xae>
 800dbdc:	4b31      	ldr	r3, [pc, #196]	; (800dca4 <__ieee754_fmod+0x220>)
 800dbde:	1a5b      	subs	r3, r3, r1
 800dbe0:	fa0a f303 	lsl.w	r3, sl, r3
 800dbe4:	2400      	movs	r4, #0
 800dbe6:	e7a4      	b.n	800db32 <__ieee754_fmod+0xae>
 800dbe8:	eba0 0c02 	sub.w	ip, r0, r2
 800dbec:	f1bc 0f1f 	cmp.w	ip, #31
 800dbf0:	dc0a      	bgt.n	800dc08 <__ieee754_fmod+0x184>
 800dbf2:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800dbf6:	fa0e fe0c 	lsl.w	lr, lr, ip
 800dbfa:	fa27 f606 	lsr.w	r6, r7, r6
 800dbfe:	ea46 060e 	orr.w	r6, r6, lr
 800dc02:	fa07 fc0c 	lsl.w	ip, r7, ip
 800dc06:	e79b      	b.n	800db40 <__ieee754_fmod+0xbc>
 800dc08:	4e26      	ldr	r6, [pc, #152]	; (800dca4 <__ieee754_fmod+0x220>)
 800dc0a:	1ab6      	subs	r6, r6, r2
 800dc0c:	fa07 f606 	lsl.w	r6, r7, r6
 800dc10:	f04f 0c00 	mov.w	ip, #0
 800dc14:	e794      	b.n	800db40 <__ieee754_fmod+0xbc>
 800dc16:	4564      	cmp	r4, ip
 800dc18:	bf38      	it	cc
 800dc1a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	da05      	bge.n	800dc2e <__ieee754_fmod+0x1aa>
 800dc22:	0fe0      	lsrs	r0, r4, #31
 800dc24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800dc28:	0064      	lsls	r4, r4, #1
 800dc2a:	3901      	subs	r1, #1
 800dc2c:	e789      	b.n	800db42 <__ieee754_fmod+0xbe>
 800dc2e:	ea50 0307 	orrs.w	r3, r0, r7
 800dc32:	f43f af5b 	beq.w	800daec <__ieee754_fmod+0x68>
 800dc36:	0ffb      	lsrs	r3, r7, #31
 800dc38:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800dc3c:	007c      	lsls	r4, r7, #1
 800dc3e:	e7f4      	b.n	800dc2a <__ieee754_fmod+0x1a6>
 800dc40:	0fe1      	lsrs	r1, r4, #31
 800dc42:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800dc46:	0064      	lsls	r4, r4, #1
 800dc48:	3a01      	subs	r2, #1
 800dc4a:	e78a      	b.n	800db62 <__ieee754_fmod+0xde>
 800dc4c:	1a89      	subs	r1, r1, r2
 800dc4e:	2914      	cmp	r1, #20
 800dc50:	dc0a      	bgt.n	800dc68 <__ieee754_fmod+0x1e4>
 800dc52:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800dc56:	fa03 f202 	lsl.w	r2, r3, r2
 800dc5a:	40cc      	lsrs	r4, r1
 800dc5c:	4322      	orrs	r2, r4
 800dc5e:	410b      	asrs	r3, r1
 800dc60:	ea43 0105 	orr.w	r1, r3, r5
 800dc64:	4610      	mov	r0, r2
 800dc66:	e731      	b.n	800dacc <__ieee754_fmod+0x48>
 800dc68:	291f      	cmp	r1, #31
 800dc6a:	dc07      	bgt.n	800dc7c <__ieee754_fmod+0x1f8>
 800dc6c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800dc70:	40cc      	lsrs	r4, r1
 800dc72:	fa03 f202 	lsl.w	r2, r3, r2
 800dc76:	4322      	orrs	r2, r4
 800dc78:	462b      	mov	r3, r5
 800dc7a:	e7f1      	b.n	800dc60 <__ieee754_fmod+0x1dc>
 800dc7c:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800dc80:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dc84:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800dc88:	32e2      	adds	r2, #226	; 0xe2
 800dc8a:	fa43 f202 	asr.w	r2, r3, r2
 800dc8e:	e7f3      	b.n	800dc78 <__ieee754_fmod+0x1f4>
 800dc90:	7fefffff 	.word	0x7fefffff
 800dc94:	7ff00000 	.word	0x7ff00000
 800dc98:	0800e830 	.word	0x0800e830
 800dc9c:	fffffbed 	.word	0xfffffbed
 800dca0:	fffffc02 	.word	0xfffffc02
 800dca4:	fffffbe2 	.word	0xfffffbe2

0800dca8 <_init>:
 800dca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcaa:	bf00      	nop
 800dcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcae:	bc08      	pop	{r3}
 800dcb0:	469e      	mov	lr, r3
 800dcb2:	4770      	bx	lr

0800dcb4 <_fini>:
 800dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcb6:	bf00      	nop
 800dcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcba:	bc08      	pop	{r3}
 800dcbc:	469e      	mov	lr, r3
 800dcbe:	4770      	bx	lr
