
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dbc  08008dbc  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dc4  08008dc4  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc8  08008dc8  00018dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08008dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200000c4  08008e90  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08008e90  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ab2  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002963  00000000  00000000  00038ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  0003b510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6dd  00000000  00000000  0003d808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015156  00000000  00000000  00068ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dbba  00000000  00000000  0007e03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018bbf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005134  00000000  00000000  0018bc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008c30 	.word	0x08008c30

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000c8 	.word	0x200000c8
 80001fc:	08008c30 	.word	0x08008c30

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2iz>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d215      	bcs.n	80008a2 <__aeabi_d2iz+0x36>
 8000876:	d511      	bpl.n	800089c <__aeabi_d2iz+0x30>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d912      	bls.n	80008a8 <__aeabi_d2iz+0x3c>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000892:	fa23 f002 	lsr.w	r0, r3, r2
 8000896:	bf18      	it	ne
 8000898:	4240      	negne	r0, r0
 800089a:	4770      	bx	lr
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	4770      	bx	lr
 80008a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008a6:	d105      	bne.n	80008b4 <__aeabi_d2iz+0x48>
 80008a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	bf08      	it	eq
 80008ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <__aeabi_d2uiz>:
 80008bc:	004a      	lsls	r2, r1, #1
 80008be:	d211      	bcs.n	80008e4 <__aeabi_d2uiz+0x28>
 80008c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008c4:	d211      	bcs.n	80008ea <__aeabi_d2uiz+0x2e>
 80008c6:	d50d      	bpl.n	80008e4 <__aeabi_d2uiz+0x28>
 80008c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008d0:	d40e      	bmi.n	80008f0 <__aeabi_d2uiz+0x34>
 80008d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008de:	fa23 f002 	lsr.w	r0, r3, r2
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d102      	bne.n	80008f6 <__aeabi_d2uiz+0x3a>
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	4770      	bx	lr
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	4770      	bx	lr

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b96e 	b.w	8000c90 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	9d08      	ldr	r5, [sp, #32]
 80009d2:	4604      	mov	r4, r0
 80009d4:	468c      	mov	ip, r1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8083 	bne.w	8000ae2 <__udivmoddi4+0x116>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d947      	bls.n	8000a72 <__udivmoddi4+0xa6>
 80009e2:	fab2 f282 	clz	r2, r2
 80009e6:	b142      	cbz	r2, 80009fa <__udivmoddi4+0x2e>
 80009e8:	f1c2 0020 	rsb	r0, r2, #32
 80009ec:	fa24 f000 	lsr.w	r0, r4, r0
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4097      	lsls	r7, r2
 80009f4:	ea40 0c01 	orr.w	ip, r0, r1
 80009f8:	4094      	lsls	r4, r2
 80009fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009fe:	0c23      	lsrs	r3, r4, #16
 8000a00:	fbbc f6f8 	udiv	r6, ip, r8
 8000a04:	fa1f fe87 	uxth.w	lr, r7
 8000a08:	fb08 c116 	mls	r1, r8, r6, ip
 8000a0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a10:	fb06 f10e 	mul.w	r1, r6, lr
 8000a14:	4299      	cmp	r1, r3
 8000a16:	d909      	bls.n	8000a2c <__udivmoddi4+0x60>
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a1e:	f080 8119 	bcs.w	8000c54 <__udivmoddi4+0x288>
 8000a22:	4299      	cmp	r1, r3
 8000a24:	f240 8116 	bls.w	8000c54 <__udivmoddi4+0x288>
 8000a28:	3e02      	subs	r6, #2
 8000a2a:	443b      	add	r3, r7
 8000a2c:	1a5b      	subs	r3, r3, r1
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a34:	fb08 3310 	mls	r3, r8, r0, r3
 8000a38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x8c>
 8000a44:	193c      	adds	r4, r7, r4
 8000a46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a4a:	f080 8105 	bcs.w	8000c58 <__udivmoddi4+0x28c>
 8000a4e:	45a6      	cmp	lr, r4
 8000a50:	f240 8102 	bls.w	8000c58 <__udivmoddi4+0x28c>
 8000a54:	3802      	subs	r0, #2
 8000a56:	443c      	add	r4, r7
 8000a58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	2600      	movs	r6, #0
 8000a62:	b11d      	cbz	r5, 8000a6c <__udivmoddi4+0xa0>
 8000a64:	40d4      	lsrs	r4, r2
 8000a66:	2300      	movs	r3, #0
 8000a68:	e9c5 4300 	strd	r4, r3, [r5]
 8000a6c:	4631      	mov	r1, r6
 8000a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a72:	b902      	cbnz	r2, 8000a76 <__udivmoddi4+0xaa>
 8000a74:	deff      	udf	#255	; 0xff
 8000a76:	fab2 f282 	clz	r2, r2
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d150      	bne.n	8000b20 <__udivmoddi4+0x154>
 8000a7e:	1bcb      	subs	r3, r1, r7
 8000a80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a84:	fa1f f887 	uxth.w	r8, r7
 8000a88:	2601      	movs	r6, #1
 8000a8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a8e:	0c21      	lsrs	r1, r4, #16
 8000a90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a98:	fb08 f30c 	mul.w	r3, r8, ip
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d907      	bls.n	8000ab0 <__udivmoddi4+0xe4>
 8000aa0:	1879      	adds	r1, r7, r1
 8000aa2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0xe2>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	f200 80e9 	bhi.w	8000c80 <__udivmoddi4+0x2b4>
 8000aae:	4684      	mov	ip, r0
 8000ab0:	1ac9      	subs	r1, r1, r3
 8000ab2:	b2a3      	uxth	r3, r4
 8000ab4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ab8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000abc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac0:	fb08 f800 	mul.w	r8, r8, r0
 8000ac4:	45a0      	cmp	r8, r4
 8000ac6:	d907      	bls.n	8000ad8 <__udivmoddi4+0x10c>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0x10a>
 8000ad0:	45a0      	cmp	r8, r4
 8000ad2:	f200 80d9 	bhi.w	8000c88 <__udivmoddi4+0x2bc>
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	eba4 0408 	sub.w	r4, r4, r8
 8000adc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae0:	e7bf      	b.n	8000a62 <__udivmoddi4+0x96>
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d909      	bls.n	8000afa <__udivmoddi4+0x12e>
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	f000 80b1 	beq.w	8000c4e <__udivmoddi4+0x282>
 8000aec:	2600      	movs	r6, #0
 8000aee:	e9c5 0100 	strd	r0, r1, [r5]
 8000af2:	4630      	mov	r0, r6
 8000af4:	4631      	mov	r1, r6
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	fab3 f683 	clz	r6, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d14a      	bne.n	8000b98 <__udivmoddi4+0x1cc>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0x140>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 80b8 	bhi.w	8000c7c <__udivmoddi4+0x2b0>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	468c      	mov	ip, r1
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d0a8      	beq.n	8000a6c <__udivmoddi4+0xa0>
 8000b1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0xa0>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f603 	lsr.w	r6, r0, r3
 8000b28:	4097      	lsls	r7, r2
 8000b2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b32:	40d9      	lsrs	r1, r3
 8000b34:	4330      	orrs	r0, r6
 8000b36:	0c03      	lsrs	r3, r0, #16
 8000b38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b3c:	fa1f f887 	uxth.w	r8, r7
 8000b40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb06 f108 	mul.w	r1, r6, r8
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x19c>
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b5a:	f080 808d 	bcs.w	8000c78 <__udivmoddi4+0x2ac>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 808a 	bls.w	8000c78 <__udivmoddi4+0x2ac>
 8000b64:	3e02      	subs	r6, #2
 8000b66:	443b      	add	r3, r7
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b281      	uxth	r1, r0
 8000b6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb00 f308 	mul.w	r3, r0, r8
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x1c4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b86:	d273      	bcs.n	8000c70 <__udivmoddi4+0x2a4>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	d971      	bls.n	8000c70 <__udivmoddi4+0x2a4>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	4439      	add	r1, r7
 8000b90:	1acb      	subs	r3, r1, r3
 8000b92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b96:	e778      	b.n	8000a8a <__udivmoddi4+0xbe>
 8000b98:	f1c6 0c20 	rsb	ip, r6, #32
 8000b9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ba4:	431c      	orrs	r4, r3
 8000ba6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000baa:	fa01 f306 	lsl.w	r3, r1, r6
 8000bae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bb6:	431f      	orrs	r7, r3
 8000bb8:	0c3b      	lsrs	r3, r7, #16
 8000bba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbe:	fa1f f884 	uxth.w	r8, r4
 8000bc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bca:	fb09 fa08 	mul.w	sl, r9, r8
 8000bce:	458a      	cmp	sl, r1
 8000bd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000bd8:	d908      	bls.n	8000bec <__udivmoddi4+0x220>
 8000bda:	1861      	adds	r1, r4, r1
 8000bdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be0:	d248      	bcs.n	8000c74 <__udivmoddi4+0x2a8>
 8000be2:	458a      	cmp	sl, r1
 8000be4:	d946      	bls.n	8000c74 <__udivmoddi4+0x2a8>
 8000be6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bea:	4421      	add	r1, r4
 8000bec:	eba1 010a 	sub.w	r1, r1, sl
 8000bf0:	b2bf      	uxth	r7, r7
 8000bf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000bfe:	fb00 f808 	mul.w	r8, r0, r8
 8000c02:	45b8      	cmp	r8, r7
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x24a>
 8000c06:	19e7      	adds	r7, r4, r7
 8000c08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0c:	d22e      	bcs.n	8000c6c <__udivmoddi4+0x2a0>
 8000c0e:	45b8      	cmp	r8, r7
 8000c10:	d92c      	bls.n	8000c6c <__udivmoddi4+0x2a0>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4427      	add	r7, r4
 8000c16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1a:	eba7 0708 	sub.w	r7, r7, r8
 8000c1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c22:	454f      	cmp	r7, r9
 8000c24:	46c6      	mov	lr, r8
 8000c26:	4649      	mov	r1, r9
 8000c28:	d31a      	bcc.n	8000c60 <__udivmoddi4+0x294>
 8000c2a:	d017      	beq.n	8000c5c <__udivmoddi4+0x290>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x27a>
 8000c2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c32:	eb67 0701 	sbc.w	r7, r7, r1
 8000c36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c3a:	40f2      	lsrs	r2, r6
 8000c3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c40:	40f7      	lsrs	r7, r6
 8000c42:	e9c5 2700 	strd	r2, r7, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	462e      	mov	r6, r5
 8000c50:	4628      	mov	r0, r5
 8000c52:	e70b      	b.n	8000a6c <__udivmoddi4+0xa0>
 8000c54:	4606      	mov	r6, r0
 8000c56:	e6e9      	b.n	8000a2c <__udivmoddi4+0x60>
 8000c58:	4618      	mov	r0, r3
 8000c5a:	e6fd      	b.n	8000a58 <__udivmoddi4+0x8c>
 8000c5c:	4543      	cmp	r3, r8
 8000c5e:	d2e5      	bcs.n	8000c2c <__udivmoddi4+0x260>
 8000c60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c64:	eb69 0104 	sbc.w	r1, r9, r4
 8000c68:	3801      	subs	r0, #1
 8000c6a:	e7df      	b.n	8000c2c <__udivmoddi4+0x260>
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	e7d2      	b.n	8000c16 <__udivmoddi4+0x24a>
 8000c70:	4660      	mov	r0, ip
 8000c72:	e78d      	b.n	8000b90 <__udivmoddi4+0x1c4>
 8000c74:	4681      	mov	r9, r0
 8000c76:	e7b9      	b.n	8000bec <__udivmoddi4+0x220>
 8000c78:	4666      	mov	r6, ip
 8000c7a:	e775      	b.n	8000b68 <__udivmoddi4+0x19c>
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e74a      	b.n	8000b16 <__udivmoddi4+0x14a>
 8000c80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c84:	4439      	add	r1, r7
 8000c86:	e713      	b.n	8000ab0 <__udivmoddi4+0xe4>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	443c      	add	r4, r7
 8000c8c:	e724      	b.n	8000ad8 <__udivmoddi4+0x10c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f000 f960 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f000 f80d 	bl	8000cc4 <HAL_InitTick>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d002      	beq.n	8000cb6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	e001      	b.n	8000cba <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb6:	f007 f89d 	bl	8007df4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d023      	beq.n	8000d20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_InitTick+0x70>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f96d 	bl	8000fce <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10f      	bne.n	8000d1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d809      	bhi.n	8000d14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f937 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_InitTick+0x74>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e004      	b.n	8000d24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e001      	b.n	8000d24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000004 	.word	0x20000004
 8000d34:	2000005c 	.word	0x2000005c
 8000d38:	20000000 	.word	0x20000000

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000004 	.word	0x20000004
 8000d60:	200000f0 	.word	0x200000f0

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000f0 	.word	0x200000f0

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff29 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff3e 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff31 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffa2 	bl	8000f20 <SysTick_Config>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e014      	b.n	8001022 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f006 ff17 	bl	8007e3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	795b      	ldrb	r3, [r3, #5]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_DAC_Start_DMA+0x1e>
 8001046:	2302      	movs	r3, #2
 8001048:	e0ab      	b.n	80011a2 <HAL_DAC_Start_DMA+0x176>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2201      	movs	r2, #1
 800104e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2202      	movs	r2, #2
 8001054:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d12f      	bne.n	80010bc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_DAC_Start_DMA+0x180>)
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_DAC_Start_DMA+0x184>)
 800106a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_DAC_Start_DMA+0x188>)
 8001072:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001082:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d013      	beq.n	80010b2 <HAL_DAC_Start_DMA+0x86>
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d845      	bhi.n	800111c <HAL_DAC_Start_DMA+0xf0>
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_DAC_Start_DMA+0x72>
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d005      	beq.n	80010a8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800109c:	e03e      	b.n	800111c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3308      	adds	r3, #8
 80010a4:	613b      	str	r3, [r7, #16]
        break;
 80010a6:	e03c      	b.n	8001122 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	330c      	adds	r3, #12
 80010ae:	613b      	str	r3, [r7, #16]
        break;
 80010b0:	e037      	b.n	8001122 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3310      	adds	r3, #16
 80010b8:	613b      	str	r3, [r7, #16]
        break;
 80010ba:	e032      	b.n	8001122 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4a3d      	ldr	r2, [pc, #244]	; (80011b8 <HAL_DAC_Start_DMA+0x18c>)
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <HAL_DAC_Start_DMA+0x190>)
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4a3b      	ldr	r2, [pc, #236]	; (80011c0 <HAL_DAC_Start_DMA+0x194>)
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d013      	beq.n	8001112 <HAL_DAC_Start_DMA+0xe6>
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d817      	bhi.n	8001120 <HAL_DAC_Start_DMA+0xf4>
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_DAC_Start_DMA+0xd2>
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d005      	beq.n	8001108 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80010fc:	e010      	b.n	8001120 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3314      	adds	r3, #20
 8001104:	613b      	str	r3, [r7, #16]
        break;
 8001106:	e00c      	b.n	8001122 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3318      	adds	r3, #24
 800110e:	613b      	str	r3, [r7, #16]
        break;
 8001110:	e007      	b.n	8001122 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	331c      	adds	r3, #28
 8001118:	613b      	str	r3, [r7, #16]
        break;
 800111a:	e002      	b.n	8001122 <HAL_DAC_Start_DMA+0xf6>
        break;
 800111c:	bf00      	nop
 800111e:	e000      	b.n	8001122 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001120:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d111      	bne.n	800114c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001136:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6898      	ldr	r0, [r3, #8]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f000 fb3d 	bl	80017c0 <HAL_DMA_Start_IT>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
 800114a:	e010      	b.n	800116e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800115a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	68d8      	ldr	r0, [r3, #12]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	f000 fb2b 	bl	80017c0 <HAL_DMA_Start_IT>
 800116a:	4603      	mov	r3, r0
 800116c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10c      	bne.n	8001194 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2201      	movs	r2, #1
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e005      	b.n	80011a0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	f043 0204 	orr.w	r2, r3, #4
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08001549 	.word	0x08001549
 80011b0:	0800156b 	.word	0x0800156b
 80011b4:	08001587 	.word	0x08001587
 80011b8:	08001605 	.word	0x08001605
 80011bc:	08001627 	.word	0x08001627
 80011c0:	08001643 	.word	0x08001643

080011c4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011da:	d120      	bne.n	800121e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ea:	d118      	bne.n	800121e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2204      	movs	r2, #4
 80011f0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001216:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f84b 	bl	80012b4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800122c:	d120      	bne.n	8001270 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800123c:	d118      	bne.n	8001270 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2204      	movs	r2, #4
 8001242:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	f043 0202 	orr.w	r2, r3, #2
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001258:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001268:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f9c0 	bl	80015f0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	795b      	ldrb	r3, [r3, #5]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_DAC_ConfigChannel+0x1c>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e12a      	b.n	800153a <HAL_DAC_ConfigChannel+0x272>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2202      	movs	r2, #2
 80012ee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d174      	bne.n	80013e2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80012f8:	f7ff fd34 	bl	8000d64 <HAL_GetTick>
 80012fc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d134      	bne.n	800136e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001304:	e011      	b.n	800132a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001306:	f7ff fd2d 	bl	8000d64 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d90a      	bls.n	800132a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	f043 0208 	orr.w	r2, r3, #8
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2203      	movs	r2, #3
 8001324:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e107      	b.n	800153a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1e6      	bne.n	8001306 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff fd1f 	bl	8000d7c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	69d2      	ldr	r2, [r2, #28]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
 8001348:	e01e      	b.n	8001388 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800134a:	f7ff fd0b 	bl	8000d64 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d90a      	bls.n	800136e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	f043 0208 	orr.w	r2, r3, #8
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2203      	movs	r2, #3
 8001368:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e0e5      	b.n	800153a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001374:	2b00      	cmp	r3, #0
 8001376:	dbe8      	blt.n	800134a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fcff 	bl	8000d7c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	69d2      	ldr	r2, [r2, #28]
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	ea02 0103 	and.w	r1, r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	409a      	lsls	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	21ff      	movs	r1, #255	; 0xff
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	ea02 0103 	and.w	r1, r2, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	409a      	lsls	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d11d      	bne.n	8001426 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	221f      	movs	r2, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	4013      	ands	r3, r2
 8001404:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	4313      	orrs	r3, r2
 800141c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2207      	movs	r2, #7
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	4013      	ands	r3, r2
 8001440:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	431a      	orrs	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	4313      	orrs	r3, r2
 8001464:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6819      	ldr	r1, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ca:	d104      	bne.n	80014d6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	e018      	b.n	8001508 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d104      	bne.n	80014e8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	e00f      	b.n	8001508 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80014e8:	f001 fc3c 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 80014ec:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_DAC_ConfigChannel+0x27c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d904      	bls.n	8001500 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e003      	b.n	8001508 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001506:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	22c0      	movs	r2, #192	; 0xc0
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2201      	movs	r2, #1
 8001530:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	04c4b400 	.word	0x04c4b400

08001548 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f7ff fe8e 	bl	8001278 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2201      	movs	r2, #1
 8001560:	711a      	strb	r2, [r3, #4]
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f7ff fe87 	bl	800128c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f043 0204 	orr.w	r2, r3, #4
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff fe7d 	bl	80012a0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	711a      	strb	r2, [r3, #4]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff ffce 	bl	80015b4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	711a      	strb	r2, [r3, #4]
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff ffc7 	bl	80015c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f043 0204 	orr.w	r2, r3, #4
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff ffbd 	bl	80015dc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2201      	movs	r2, #1
 8001666:	711a      	strb	r2, [r3, #4]
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e08d      	b.n	800179e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_DMA_Init+0x138>)
 800168a:	429a      	cmp	r2, r3
 800168c:	d80f      	bhi.n	80016ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4b45      	ldr	r3, [pc, #276]	; (80017ac <HAL_DMA_Init+0x13c>)
 8001696:	4413      	add	r3, r2
 8001698:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <HAL_DMA_Init+0x140>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	009a      	lsls	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a42      	ldr	r2, [pc, #264]	; (80017b4 <HAL_DMA_Init+0x144>)
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
 80016ac:	e00e      	b.n	80016cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <HAL_DMA_Init+0x148>)
 80016b6:	4413      	add	r3, r2
 80016b8:	4a3d      	ldr	r2, [pc, #244]	; (80017b0 <HAL_DMA_Init+0x140>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	009a      	lsls	r2, r3, #2
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a3c      	ldr	r2, [pc, #240]	; (80017bc <HAL_DMA_Init+0x14c>)
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fa72 	bl	8001c08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800172c:	d102      	bne.n	8001734 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001748:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d010      	beq.n	8001774 <HAL_DMA_Init+0x104>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b04      	cmp	r3, #4
 8001758:	d80c      	bhi.n	8001774 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fa92 	bl	8001c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	e008      	b.n	8001786 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40020407 	.word	0x40020407
 80017ac:	bffdfff8 	.word	0xbffdfff8
 80017b0:	cccccccd 	.word	0xcccccccd
 80017b4:	40020000 	.word	0x40020000
 80017b8:	bffdfbf8 	.word	0xbffdfbf8
 80017bc:	40020400 	.word	0x40020400

080017c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_Start_IT+0x20>
 80017dc:	2302      	movs	r3, #2
 80017de:	e066      	b.n	80018ae <HAL_DMA_Start_IT+0xee>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d155      	bne.n	80018a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 f9b6 	bl	8001b8a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 020e 	orr.w	r2, r2, #14
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e00f      	b.n	8001858 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0204 	bic.w	r2, r2, #4
 8001846:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 020a 	orr.w	r2, r2, #10
 8001856:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001874:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800188c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e005      	b.n	80018ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
 80018aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d008      	beq.n	80018e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2204      	movs	r2, #4
 80018d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e040      	b.n	8001962 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 020e 	bic.w	r2, r2, #14
 80018ee:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018fe:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f003 021c 	and.w	r2, r3, #28
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800192c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00c      	beq.n	8001950 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001944:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800194e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d005      	beq.n	8001992 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e047      	b.n	8001a22 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 020e 	bic.w	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f003 021c 	and.w	r2, r3, #28
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f202 	lsl.w	r2, r1, r2
 80019d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019de:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00c      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a00:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
    }
  }
  return status;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f003 031c 	and.w	r3, r3, #28
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d026      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x7a>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d021      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0204 	bic.w	r2, r2, #4
 8001a7e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f003 021c 	and.w	r2, r3, #28
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d071      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001aa4:	e06c      	b.n	8001b80 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f003 031c 	and.w	r3, r3, #28
 8001aae:	2202      	movs	r2, #2
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d02e      	beq.n	8001b18 <HAL_DMA_IRQHandler+0xec>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d029      	beq.n	8001b18 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10b      	bne.n	8001aea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 020a 	bic.w	r2, r2, #10
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f003 021c 	and.w	r2, r3, #28
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2102      	movs	r1, #2
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d038      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b16:	e033      	b.n	8001b80 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f003 031c 	and.w	r3, r3, #28
 8001b20:	2208      	movs	r2, #8
 8001b22:	409a      	lsls	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02a      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x156>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d025      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 020e 	bic.w	r2, r2, #14
 8001b44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f003 021c 	and.w	r2, r3, #28
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
}
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ba0:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d004      	beq.n	8001bb4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bb2:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f003 021c 	and.w	r2, r3, #28
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d108      	bne.n	8001bea <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001be8:	e007      	b.n	8001bfa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	60da      	str	r2, [r3, #12]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d80a      	bhi.n	8001c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c28:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6493      	str	r3, [r2, #72]	; 0x48
 8001c30:	e007      	b.n	8001c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	009a      	lsls	r2, r3, #2
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3b08      	subs	r3, #8
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c58:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	2201      	movs	r2, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40020407 	.word	0x40020407
 8001c78:	4002081c 	.word	0x4002081c
 8001c7c:	cccccccd 	.word	0xcccccccd
 8001c80:	40020880 	.word	0x40020880

08001c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ca6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	1000823f 	.word	0x1000823f
 8001cc8:	40020940 	.word	0x40020940

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cda:	e166      	b.n	8001faa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8158 	beq.w	8001fa4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d005      	beq.n	8001d0c <HAL_GPIO_Init+0x40>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d130      	bne.n	8001d6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d42:	2201      	movs	r2, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	f003 0201 	and.w	r2, r3, #1
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d017      	beq.n	8001daa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d123      	bne.n	8001dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	6939      	ldr	r1, [r7, #16]
 8001dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0203 	and.w	r2, r3, #3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80b2 	beq.w	8001fa4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e40:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_GPIO_Init+0x2fc>)
 8001e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e44:	4a60      	ldr	r2, [pc, #384]	; (8001fc8 <HAL_GPIO_Init+0x2fc>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e4c:	4b5e      	ldr	r3, [pc, #376]	; (8001fc8 <HAL_GPIO_Init+0x2fc>)
 8001e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e58:	4a5c      	ldr	r2, [pc, #368]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e82:	d02b      	beq.n	8001edc <HAL_GPIO_Init+0x210>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d025      	beq.n	8001ed8 <HAL_GPIO_Init+0x20c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a51      	ldr	r2, [pc, #324]	; (8001fd4 <HAL_GPIO_Init+0x308>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d01f      	beq.n	8001ed4 <HAL_GPIO_Init+0x208>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a50      	ldr	r2, [pc, #320]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d019      	beq.n	8001ed0 <HAL_GPIO_Init+0x204>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_GPIO_Init+0x200>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_GPIO_Init+0x314>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1fc>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a4d      	ldr	r2, [pc, #308]	; (8001fe4 <HAL_GPIO_Init+0x318>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1f8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <HAL_GPIO_Init+0x31c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1f4>
 8001ebc:	2307      	movs	r3, #7
 8001ebe:	e00e      	b.n	8001ede <HAL_GPIO_Init+0x212>
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	e00c      	b.n	8001ede <HAL_GPIO_Init+0x212>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e00a      	b.n	8001ede <HAL_GPIO_Init+0x212>
 8001ec8:	2305      	movs	r3, #5
 8001eca:	e008      	b.n	8001ede <HAL_GPIO_Init+0x212>
 8001ecc:	2304      	movs	r3, #4
 8001ece:	e006      	b.n	8001ede <HAL_GPIO_Init+0x212>
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e004      	b.n	8001ede <HAL_GPIO_Init+0x212>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e002      	b.n	8001ede <HAL_GPIO_Init+0x212>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_GPIO_Init+0x212>
 8001edc:	2300      	movs	r3, #0
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	f002 0203 	and.w	r2, r2, #3
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	4093      	lsls	r3, r2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eee:	4937      	ldr	r1, [pc, #220]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001efc:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f20:	4a32      	ldr	r2, [pc, #200]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f9e:	4a13      	ldr	r2, [pc, #76]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f47f ae91 	bne.w	8001cdc <HAL_GPIO_Init+0x10>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	48000400 	.word	0x48000400
 8001fd4:	48000800 	.word	0x48000800
 8001fd8:	48000c00 	.word	0x48000c00
 8001fdc:	48001000 	.word	0x48001000
 8001fe0:	48001400 	.word	0x48001400
 8001fe4:	48001800 	.word	0x48001800
 8001fe8:	48001c00 	.word	0x48001c00
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e002      	b.n	8002014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800202c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002030:	d102      	bne.n	8002038 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002036:	e00b      	b.n	8002050 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_PWREx_GetVoltageRange+0x3c>)
 800203a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002046:	d102      	bne.n	800204e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204c:	e000      	b.n	8002050 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800204e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40007000 	.word	0x40007000

08002060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d141      	bne.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800206e:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207a:	d131      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800207c:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002082:	4a46      	ldr	r2, [pc, #280]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800208c:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002094:	4a41      	ldr	r2, [pc, #260]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800209c:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2232      	movs	r2, #50	; 0x32
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	4a3f      	ldr	r2, [pc, #252]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	0c9b      	lsrs	r3, r3, #18
 80020ae:	3301      	adds	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b2:	e002      	b.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c6:	d102      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f2      	bne.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020da:	d158      	bne.n	800218e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e057      	b.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e0:	4b2e      	ldr	r3, [pc, #184]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020e6:	4a2d      	ldr	r2, [pc, #180]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020f0:	e04d      	b.n	800218e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f8:	d141      	bne.n	800217e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020fa:	4b28      	ldr	r3, [pc, #160]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	d131      	bne.n	800216c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002108:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800210e:	4a23      	ldr	r2, [pc, #140]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002126:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2232      	movs	r2, #50	; 0x32
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	0c9b      	lsrs	r3, r3, #18
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213e:	e002      	b.n	8002146 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3b01      	subs	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002152:	d102      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f2      	bne.n	8002140 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002166:	d112      	bne.n	800218e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e011      	b.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800217c:	e007      	b.n	800218e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	40007000 	.word	0x40007000
 80021a0:	2000005c 	.word	0x2000005c
 80021a4:	431bde83 	.word	0x431bde83

080021a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f000 bc16 	b.w	80029e8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021bc:	4ba0      	ldr	r3, [pc, #640]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c6:	4b9e      	ldr	r3, [pc, #632]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80e4 	beq.w	80023a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4c>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	f040 808b 	bne.w	8002302 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	f040 8087 	bne.w	8002302 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f4:	4b92      	ldr	r3, [pc, #584]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x64>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e3ed      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1a      	ldr	r2, [r3, #32]
 8002210:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_RCC_OscConfig+0x7e>
 800221c:	4b88      	ldr	r3, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002224:	e005      	b.n	8002232 <HAL_RCC_OscConfig+0x8a>
 8002226:	4b86      	ldr	r3, [pc, #536]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002232:	4293      	cmp	r3, r2
 8002234:	d223      	bcs.n	800227e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fdca 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e3ce      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224a:	4b7d      	ldr	r3, [pc, #500]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7c      	ldr	r2, [pc, #496]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b7a      	ldr	r3, [pc, #488]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4977      	ldr	r1, [pc, #476]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002268:	4b75      	ldr	r3, [pc, #468]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	4972      	ldr	r1, [pc, #456]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
 800227c:	e025      	b.n	80022ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227e:	4b70      	ldr	r3, [pc, #448]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6f      	ldr	r2, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	496a      	ldr	r1, [pc, #424]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229c:	4b68      	ldr	r3, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	4965      	ldr	r1, [pc, #404]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fd8a 	bl	8002dd4 <RCC_SetFlashLatencyFromMSIRange>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e38e      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ca:	f000 fcbf 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	495a      	ldr	r1, [pc, #360]	; (8002444 <HAL_RCC_OscConfig+0x29c>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a58      	ldr	r2, [pc, #352]	; (8002448 <HAL_RCC_OscConfig+0x2a0>)
 80022e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022ea:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x2a4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fce8 	bl	8000cc4 <HAL_InitTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d052      	beq.n	80023a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	e372      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d032      	beq.n	8002370 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800230a:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002316:	f7fe fd25 	bl	8000d64 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800231e:	f7fe fd21 	bl	8000d64 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e35b      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002330:	4b43      	ldr	r3, [pc, #268]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233c:	4b40      	ldr	r3, [pc, #256]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a3f      	ldr	r2, [pc, #252]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	493a      	ldr	r1, [pc, #232]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	4935      	ldr	r1, [pc, #212]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
 800236e:	e01a      	b.n	80023a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a32      	ldr	r2, [pc, #200]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237c:	f7fe fcf2 	bl	8000d64 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002384:	f7fe fcee 	bl	8000d64 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e328      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1dc>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d073      	beq.n	800249a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_OscConfig+0x21c>
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d10e      	bne.n	80023dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d063      	beq.n	8002498 <HAL_RCC_OscConfig+0x2f0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d15f      	bne.n	8002498 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e305      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x24c>
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0x288>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x270>
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0x288>
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a05      	ldr	r2, [pc, #20]	; (8002440 <HAL_RCC_OscConfig+0x298>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fc94 	bl	8000d64 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243e:	e010      	b.n	8002462 <HAL_RCC_OscConfig+0x2ba>
 8002440:	40021000 	.word	0x40021000
 8002444:	08008d40 	.word	0x08008d40
 8002448:	2000005c 	.word	0x2000005c
 800244c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fc88 	bl	8000d64 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e2c2      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002462:	4baf      	ldr	r3, [pc, #700]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x2a8>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fc78 	bl	8000d64 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fc74 	bl	8000d64 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e2ae      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248a:	4ba5      	ldr	r3, [pc, #660]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x2d0>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d060      	beq.n	8002568 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_OscConfig+0x310>
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d119      	bne.n	80024e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d116      	bne.n	80024e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b8:	4b99      	ldr	r3, [pc, #612]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_OscConfig+0x328>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e28b      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b93      	ldr	r3, [pc, #588]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	4990      	ldr	r1, [pc, #576]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	e040      	b.n	8002568 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d023      	beq.n	8002536 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ee:	4b8c      	ldr	r3, [pc, #560]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a8b      	ldr	r2, [pc, #556]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fc33 	bl	8000d64 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002502:	f7fe fc2f 	bl	8000d64 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e269      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002514:	4b82      	ldr	r3, [pc, #520]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b7f      	ldr	r3, [pc, #508]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	497c      	ldr	r1, [pc, #496]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
 8002534:	e018      	b.n	8002568 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	4b7a      	ldr	r3, [pc, #488]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a79      	ldr	r2, [pc, #484]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 800253c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7fe fc0f 	bl	8000d64 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254a:	f7fe fc0b 	bl	8000d64 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e245      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800255c:	4b70      	ldr	r3, [pc, #448]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d03c      	beq.n	80025ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257c:	4b68      	ldr	r3, [pc, #416]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002582:	4a67      	ldr	r2, [pc, #412]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fe fbea 	bl	8000d64 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7fe fbe6 	bl	8000d64 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e220      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a6:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCC_OscConfig+0x3ec>
 80025b4:	e01b      	b.n	80025ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b6:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80025b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025bc:	4a58      	ldr	r2, [pc, #352]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe fbcd 	bl	8000d64 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fe fbc9 	bl	8000d64 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e203      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e0:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ef      	bne.n	80025ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80a6 	beq.w	8002748 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002600:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10d      	bne.n	8002628 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b44      	ldr	r3, [pc, #272]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a43      	ldr	r2, [pc, #268]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
 8002618:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002624:	2301      	movs	r3, #1
 8002626:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002628:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <HAL_RCC_OscConfig+0x57c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d118      	bne.n	8002666 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002634:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x57c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3a      	ldr	r2, [pc, #232]	; (8002724 <HAL_RCC_OscConfig+0x57c>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002640:	f7fe fb90 	bl	8000d64 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7fe fb8c 	bl	8000d64 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1c6      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265a:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_RCC_OscConfig+0x57c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_RCC_OscConfig+0x4d8>
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	4a2a      	ldr	r2, [pc, #168]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267e:	e024      	b.n	80026ca <HAL_RCC_OscConfig+0x522>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d110      	bne.n	80026aa <HAL_RCC_OscConfig+0x502>
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	4a24      	ldr	r2, [pc, #144]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a8:	e00f      	b.n	80026ca <HAL_RCC_OscConfig+0x522>
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	4a17      	ldr	r2, [pc, #92]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80026c2:	f023 0304 	bic.w	r3, r3, #4
 80026c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fb47 	bl	8000d64 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fb43 	bl	8000d64 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e17b      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_OscConfig+0x578>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0ed      	beq.n	80026da <HAL_RCC_OscConfig+0x532>
 80026fe:	e01a      	b.n	8002736 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fb30 	bl	8000d64 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002706:	e00f      	b.n	8002728 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fb2c 	bl	8000d64 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d906      	bls.n	8002728 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e164      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002728:	4ba8      	ldr	r3, [pc, #672]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e8      	bne.n	8002708 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273c:	4ba3      	ldr	r3, [pc, #652]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	4aa2      	ldr	r2, [pc, #648]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002746:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03c      	beq.n	80027ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01c      	beq.n	8002796 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800275c:	4b9b      	ldr	r3, [pc, #620]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800275e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002762:	4a9a      	ldr	r2, [pc, #616]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe fafa 	bl	8000d64 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002774:	f7fe faf6 	bl	8000d64 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e130      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002786:	4b91      	ldr	r3, [pc, #580]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <HAL_RCC_OscConfig+0x5cc>
 8002794:	e01b      	b.n	80027ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002796:	4b8d      	ldr	r3, [pc, #564]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002798:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279c:	4a8b      	ldr	r2, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fadd 	bl	8000d64 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ae:	f7fe fad9 	bl	8000d64 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e113      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027c0:	4b82      	ldr	r3, [pc, #520]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80027c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ef      	bne.n	80027ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8107 	beq.w	80029e6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	2b02      	cmp	r3, #2
 80027de:	f040 80cb 	bne.w	8002978 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027e2:	4b7a      	ldr	r3, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d12c      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	3b01      	subs	r3, #1
 8002802:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d123      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d11b      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d113      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d109      	bne.n	8002850 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	085b      	lsrs	r3, r3, #1
 8002848:	3b01      	subs	r3, #1
 800284a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d06d      	beq.n	800292c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d068      	beq.n	8002928 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002856:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002862:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0ba      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002872:	4b56      	ldr	r3, [pc, #344]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a55      	ldr	r2, [pc, #340]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002878:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800287e:	f7fe fa71 	bl	8000d64 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fa6d 	bl	8000d64 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0a7      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a4:	4b49      	ldr	r3, [pc, #292]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <HAL_RCC_OscConfig+0x828>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028b4:	3a01      	subs	r2, #1
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028be:	0212      	lsls	r2, r2, #8
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028c6:	0852      	lsrs	r2, r2, #1
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0552      	lsls	r2, r2, #21
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028d2:	0852      	lsrs	r2, r2, #1
 80028d4:	3a01      	subs	r2, #1
 80028d6:	0652      	lsls	r2, r2, #25
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028de:	06d2      	lsls	r2, r2, #27
 80028e0:	430a      	orrs	r2, r1
 80028e2:	493a      	ldr	r1, [pc, #232]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e8:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a37      	ldr	r2, [pc, #220]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f4:	4b35      	ldr	r3, [pc, #212]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80028fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002900:	f7fe fa30 	bl	8000d64 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fa2c 	bl	8000d64 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e066      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002926:	e05e      	b.n	80029e6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e05d      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d156      	bne.n	80029e6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a23      	ldr	r2, [pc, #140]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002950:	f7fe fa08 	bl	8000d64 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fa04 	bl	8000d64 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e03e      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x7b0>
 8002976:	e036      	b.n	80029e6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d031      	beq.n	80029e2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002988:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 800299c:	f023 0303 	bic.w	r3, r3, #3
 80029a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_OscConfig+0x824>)
 80029a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe f9d7 	bl	8000d64 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b8:	e00c      	b.n	80029d4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe f9d3 	bl	8000d64 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d905      	bls.n	80029d4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e00d      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
 80029cc:	40021000 	.word	0x40021000
 80029d0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_OscConfig+0x848>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ec      	bne.n	80029ba <HAL_RCC_OscConfig+0x812>
 80029e0:	e001      	b.n	80029e6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e10f      	b.n	8002c2c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <HAL_RCC_ClockConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d910      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b86      	ldr	r3, [pc, #536]	; (8002c34 <HAL_RCC_ClockConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 020f 	bic.w	r2, r3, #15
 8002a22:	4984      	ldr	r1, [pc, #528]	; (8002c34 <HAL_RCC_ClockConfig+0x240>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_RCC_ClockConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0f7      	b.n	8002c2c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8089 	beq.w	8002b5c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d133      	bne.n	8002aba <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b79      	ldr	r3, [pc, #484]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0e4      	b.n	8002c2c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a62:	f000 fa11 	bl	8002e88 <RCC_GetSysClockFreqFromPLLSource>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4a74      	ldr	r2, [pc, #464]	; (8002c3c <HAL_RCC_ClockConfig+0x248>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d955      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a6e:	4b72      	ldr	r3, [pc, #456]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a7a:	4b6f      	ldr	r3, [pc, #444]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a82:	4a6d      	ldr	r2, [pc, #436]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e044      	b.n	8002b1a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d03e      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x126>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d13a      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aa4:	4b64      	ldr	r3, [pc, #400]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aac:	4a62      	ldr	r2, [pc, #392]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	e02f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d115      	bne.n	8002afa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0ac      	b.n	8002c2c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ada:	4b57      	ldr	r3, [pc, #348]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0a0      	b.n	8002c2c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aea:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e098      	b.n	8002c2c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002afa:	f000 f8a7 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4a4e      	ldr	r2, [pc, #312]	; (8002c3c <HAL_RCC_ClockConfig+0x248>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d909      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0e:	4a4a      	ldr	r2, [pc, #296]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4944      	ldr	r1, [pc, #272]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe f91a 	bl	8000d64 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe f916 	bl	8000d64 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e070      	b.n	8002c2c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4930      	ldr	r1, [pc, #192]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b8c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_RCC_ClockConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d210      	bcs.n	8002bbe <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_RCC_ClockConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 020f 	bic.w	r2, r3, #15
 8002ba4:	4923      	ldr	r1, [pc, #140]	; (8002c34 <HAL_RCC_ClockConfig+0x240>)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCC_ClockConfig+0x240>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e036      	b.n	8002c2c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bca:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4918      	ldr	r1, [pc, #96]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4910      	ldr	r1, [pc, #64]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bfc:	f000 f826 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_RCC_ClockConfig+0x244>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <HAL_RCC_ClockConfig+0x24c>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
 8002c18:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x250>)
 8002c1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_ClockConfig+0x254>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe f84f 	bl	8000cc4 <HAL_InitTick>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40022000 	.word	0x40022000
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	04c4b400 	.word	0x04c4b400
 8002c40:	08008d40 	.word	0x08008d40
 8002c44:	2000005c 	.word	0x2000005c
 8002c48:	20000000 	.word	0x20000000

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d121      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d11e      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c8c:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e005      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca8:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	e004      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d134      	bne.n	8002d44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d003      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xac>
 8002cf0:	e005      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cf4:	617b      	str	r3, [r7, #20]
      break;
 8002cf6:	e005      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cfa:	617b      	str	r3, [r7, #20]
      break;
 8002cfc:	e002      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	617b      	str	r3, [r7, #20]
      break;
 8002d02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3301      	adds	r3, #1
 8002d10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	fb02 f203 	mul.w	r2, r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	0e5b      	lsrs	r3, r3, #25
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	3301      	adds	r3, #1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d44:	69bb      	ldr	r3, [r7, #24]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08008d58 	.word	0x08008d58
 8002d5c:	00f42400 	.word	0x00f42400
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	2000005c 	.word	0x2000005c

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d80:	f7ff fff0 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08008d50 	.word	0x08008d50

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dac:	f7ff ffda 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0adb      	lsrs	r3, r3, #11
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4904      	ldr	r1, [pc, #16]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08008d50 	.word	0x08008d50

08002dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dec:	f7ff f918 	bl	8002020 <HAL_PWREx_GetVoltageRange>
 8002df0:	6178      	str	r0, [r7, #20]
 8002df2:	e014      	b.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e0c:	f7ff f908 	bl	8002020 <HAL_PWREx_GetVoltageRange>
 8002e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e24:	d10b      	bne.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d913      	bls.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002e30:	d902      	bls.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e32:	2302      	movs	r3, #2
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e00d      	b.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e00a      	b.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b7f      	cmp	r3, #127	; 0x7f
 8002e42:	d902      	bls.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e44:	2302      	movs	r3, #2
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e004      	b.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b70      	cmp	r3, #112	; 0x70
 8002e4e:	d101      	bne.n	8002e54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e50:	2301      	movs	r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 020f 	bic.w	r2, r3, #15
 8002e5c:	4909      	ldr	r1, [pc, #36]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40022000 	.word	0x40022000

08002e88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002e92:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d118      	bne.n	8002ed0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d107      	bne.n	8002eba <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e005      	b.n	8002ec6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec6:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ece:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d003      	beq.n	8002ee8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d003      	beq.n	8002eee <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002ee6:	e005      	b.n	8002ef4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002eea:	613b      	str	r3, [r7, #16]
    break;
 8002eec:	e005      	b.n	8002efa <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002eee:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002ef0:	613b      	str	r3, [r7, #16]
    break;
 8002ef2:	e002      	b.n	8002efa <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	613b      	str	r3, [r7, #16]
    break;
 8002ef8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	3301      	adds	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	fb02 f203 	mul.w	r2, r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	0e5b      	lsrs	r3, r3, #25
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f3a:	683b      	ldr	r3, [r7, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08008d58 	.word	0x08008d58
 8002f50:	00f42400 	.word	0x00f42400
 8002f54:	007a1200 	.word	0x007a1200

08002f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f60:	2300      	movs	r3, #0
 8002f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f64:	2300      	movs	r3, #0
 8002f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d040      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d02a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d825      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f80:	2b60      	cmp	r3, #96	; 0x60
 8002f82:	d026      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f84:	2b60      	cmp	r3, #96	; 0x60
 8002f86:	d821      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d006      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d81d      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d010      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f98:	e018      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f9a:	4b89      	ldr	r3, [pc, #548]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a88      	ldr	r2, [pc, #544]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa6:	e015      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fb02 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fb8:	e00c      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fbed 	bl	80037a0 <RCCEx_PLLSAI2_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fca:	e003      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fda:	4b79      	ldr	r3, [pc, #484]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fe0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe8:	4975      	ldr	r1, [pc, #468]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ff0:	e001      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d047      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300a:	d030      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003010:	d82a      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003016:	d02a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800301c:	d824      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800301e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003028:	d81e      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d010      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003034:	e018      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003036:	4b62      	ldr	r3, [pc, #392]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a61      	ldr	r2, [pc, #388]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003042:	e015      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fab4 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003054:	e00c      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3320      	adds	r3, #32
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fb9f 	bl	80037a0 <RCCEx_PLLSAI2_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003066:	e003      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	74fb      	strb	r3, [r7, #19]
      break;
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800306e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003076:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	494e      	ldr	r1, [pc, #312]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800308c:	e001      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 809f 	beq.w	80031de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a0:	2300      	movs	r3, #0
 80030a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030a4:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030b4:	2300      	movs	r3, #0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00d      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a40      	ldr	r2, [pc, #256]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
 80030c6:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e2:	f7fd fe3f 	bl	8000d64 <HAL_GetTick>
 80030e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030e8:	e009      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fd fe3b 	bl	8000d64 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d902      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	74fb      	strb	r3, [r7, #19]
        break;
 80030fc:	e005      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0ef      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d15b      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003110:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01f      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	429a      	cmp	r2, r3
 800312c:	d019      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003138:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d016      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fd fdfa 	bl	8000d64 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003172:	e00b      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fd fdf6 	bl	8000d64 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d902      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	74fb      	strb	r3, [r7, #19]
            break;
 800318a:	e006      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0ec      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10c      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031b8:	e008      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	74bb      	strb	r3, [r7, #18]
 80031be:	e005      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031cc:	7c7b      	ldrb	r3, [r7, #17]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4ba0      	ldr	r3, [pc, #640]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	4a9f      	ldr	r2, [pc, #636]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ea:	4b9a      	ldr	r3, [pc, #616]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f023 0203 	bic.w	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	4996      	ldr	r1, [pc, #600]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800320c:	4b91      	ldr	r3, [pc, #580]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f023 020c 	bic.w	r2, r3, #12
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	498e      	ldr	r1, [pc, #568]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800322e:	4b89      	ldr	r3, [pc, #548]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	4985      	ldr	r1, [pc, #532]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003250:	4b80      	ldr	r3, [pc, #512]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325e:	497d      	ldr	r1, [pc, #500]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003272:	4b78      	ldr	r3, [pc, #480]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	4974      	ldr	r1, [pc, #464]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003294:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a2:	496c      	ldr	r1, [pc, #432]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032b6:	4b67      	ldr	r3, [pc, #412]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c4:	4963      	ldr	r1, [pc, #396]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032d8:	4b5e      	ldr	r3, [pc, #376]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e6:	495b      	ldr	r1, [pc, #364]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032fa:	4b56      	ldr	r3, [pc, #344]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	4952      	ldr	r1, [pc, #328]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800331c:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	494a      	ldr	r1, [pc, #296]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800333e:	4b45      	ldr	r3, [pc, #276]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	4941      	ldr	r1, [pc, #260]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003360:	4b3c      	ldr	r3, [pc, #240]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	4939      	ldr	r1, [pc, #228]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d028      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003382:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003390:	4930      	ldr	r1, [pc, #192]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a0:	d106      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a2:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4a2b      	ldr	r2, [pc, #172]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ac:	60d3      	str	r3, [r2, #12]
 80033ae:	e011      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	2101      	movs	r1, #1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f8f9 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d04d      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e8:	d108      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f0:	4a18      	ldr	r2, [pc, #96]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033fa:	e012      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003402:	4a14      	ldr	r2, [pc, #80]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003408:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341a:	490e      	ldr	r1, [pc, #56]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800342a:	d106      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003436:	60d3      	str	r3, [r2, #12]
 8003438:	e020      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003442:	d109      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a02      	ldr	r2, [pc, #8]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	60d3      	str	r3, [r2, #12]
 8003450:	e014      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003460:	d10c      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	2101      	movs	r1, #1
 8003468:	4618      	mov	r0, r3
 800346a:	f000 f8a5 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003472:	7cfb      	ldrb	r3, [r7, #19]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d028      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003488:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003496:	4947      	ldr	r1, [pc, #284]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a6:	d106      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a8:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a41      	ldr	r2, [pc, #260]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b2:	60d3      	str	r3, [r2, #12]
 80034b4:	e011      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034be:	d10c      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f876 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01e      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e6:	4b33      	ldr	r3, [pc, #204]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f6:	492f      	ldr	r1, [pc, #188]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003508:	d10c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2102      	movs	r1, #2
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f851 	bl	80035b8 <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003536:	f023 0204 	bic.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003540:	491c      	ldr	r1, [pc, #112]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800355a:	f023 0218 	bic.w	r2, r3, #24
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	4913      	ldr	r1, [pc, #76]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d017      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800357e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003588:	490a      	ldr	r1, [pc, #40]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359a:	d105      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000

080035b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c6:	4b72      	ldr	r3, [pc, #456]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00e      	beq.n	80035f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035d2:	4b6f      	ldr	r3, [pc, #444]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0203 	and.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d103      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
       ||
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d142      	bne.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e03f      	b.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d018      	beq.n	800362a <RCCEx_PLLSAI1_Config+0x72>
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d825      	bhi.n	8003648 <RCCEx_PLLSAI1_Config+0x90>
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d002      	beq.n	8003606 <RCCEx_PLLSAI1_Config+0x4e>
 8003600:	2b02      	cmp	r3, #2
 8003602:	d009      	beq.n	8003618 <RCCEx_PLLSAI1_Config+0x60>
 8003604:	e020      	b.n	8003648 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11d      	bne.n	800364e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003616:	e01a      	b.n	800364e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003618:	4b5d      	ldr	r3, [pc, #372]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003628:	e013      	b.n	8003652 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362a:	4b59      	ldr	r3, [pc, #356]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10f      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003646:	e006      	b.n	8003656 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      break;
 800364c:	e004      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800364e:	bf00      	nop
 8003650:	e002      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003652:	bf00      	nop
 8003654:	e000      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003656:	bf00      	nop
    }

    if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800365e:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4949      	ldr	r1, [pc, #292]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366c:	4313      	orrs	r3, r2
 800366e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 8086 	bne.w	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003678:	4b45      	ldr	r3, [pc, #276]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a44      	ldr	r2, [pc, #272]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003684:	f7fd fb6e 	bl	8000d64 <HAL_GetTick>
 8003688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800368a:	e009      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800368c:	f7fd fb6a 	bl	8000d64 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d902      	bls.n	80036a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	73fb      	strb	r3, [r7, #15]
        break;
 800369e:	e005      	b.n	80036ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036a0:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ef      	bne.n	800368c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d168      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b8:	4b35      	ldr	r3, [pc, #212]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036be:	4013      	ands	r3, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6892      	ldr	r2, [r2, #8]
 80036c4:	0211      	lsls	r1, r2, #8
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	06d2      	lsls	r2, r2, #27
 80036cc:	4311      	orrs	r1, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6852      	ldr	r2, [r2, #4]
 80036d2:	3a01      	subs	r2, #1
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	430a      	orrs	r2, r1
 80036d8:	492d      	ldr	r1, [pc, #180]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	610b      	str	r3, [r1, #16]
 80036de:	e02d      	b.n	800373c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d115      	bne.n	8003712 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	0211      	lsls	r1, r2, #8
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6912      	ldr	r2, [r2, #16]
 80036f8:	0852      	lsrs	r2, r2, #1
 80036fa:	3a01      	subs	r2, #1
 80036fc:	0552      	lsls	r2, r2, #21
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6852      	ldr	r2, [r2, #4]
 8003704:	3a01      	subs	r2, #1
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	430a      	orrs	r2, r1
 800370a:	4921      	ldr	r1, [pc, #132]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]
 8003710:	e014      	b.n	800373c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6892      	ldr	r2, [r2, #8]
 800371e:	0211      	lsls	r1, r2, #8
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6952      	ldr	r2, [r2, #20]
 8003724:	0852      	lsrs	r2, r2, #1
 8003726:	3a01      	subs	r2, #1
 8003728:	0652      	lsls	r2, r2, #25
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6852      	ldr	r2, [r2, #4]
 8003730:	3a01      	subs	r2, #1
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	430a      	orrs	r2, r1
 8003736:	4916      	ldr	r1, [pc, #88]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003738:	4313      	orrs	r3, r2
 800373a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fd fb0c 	bl	8000d64 <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374e:	e009      	b.n	8003764 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003750:	f7fd fb08 	bl	8000d64 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	73fb      	strb	r3, [r7, #15]
          break;
 8003762:	e005      	b.n	8003770 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ef      	beq.n	8003750 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	4904      	ldr	r1, [pc, #16]	; (8003790 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	07ff800f 	.word	0x07ff800f
 8003798:	ff9f800f 	.word	0xff9f800f
 800379c:	f9ff800f 	.word	0xf9ff800f

080037a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ae:	4b72      	ldr	r3, [pc, #456]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00e      	beq.n	80037d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ba:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d103      	bne.n	80037d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
       ||
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d142      	bne.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e03f      	b.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d018      	beq.n	8003812 <RCCEx_PLLSAI2_Config+0x72>
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d825      	bhi.n	8003830 <RCCEx_PLLSAI2_Config+0x90>
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d002      	beq.n	80037ee <RCCEx_PLLSAI2_Config+0x4e>
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d009      	beq.n	8003800 <RCCEx_PLLSAI2_Config+0x60>
 80037ec:	e020      	b.n	8003830 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037ee:	4b62      	ldr	r3, [pc, #392]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11d      	bne.n	8003836 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fe:	e01a      	b.n	8003836 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003800:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d116      	bne.n	800383a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003810:	e013      	b.n	800383a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003812:	4b59      	ldr	r3, [pc, #356]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10f      	bne.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800381e:	4b56      	ldr	r3, [pc, #344]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800382e:	e006      	b.n	800383e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e004      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800383e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003846:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f023 0203 	bic.w	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4949      	ldr	r1, [pc, #292]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003854:	4313      	orrs	r3, r2
 8003856:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 8086 	bne.w	800396c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003860:	4b45      	ldr	r3, [pc, #276]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a44      	ldr	r2, [pc, #272]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386c:	f7fd fa7a 	bl	8000d64 <HAL_GetTick>
 8003870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003872:	e009      	b.n	8003888 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003874:	f7fd fa76 	bl	8000d64 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	73fb      	strb	r3, [r7, #15]
        break;
 8003886:	e005      	b.n	8003894 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ef      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d168      	bne.n	800396c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	4b35      	ldr	r3, [pc, #212]	; (800397c <RCCEx_PLLSAI2_Config+0x1dc>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6892      	ldr	r2, [r2, #8]
 80038ac:	0211      	lsls	r1, r2, #8
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68d2      	ldr	r2, [r2, #12]
 80038b2:	06d2      	lsls	r2, r2, #27
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	3a01      	subs	r2, #1
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	430a      	orrs	r2, r1
 80038c0:	492d      	ldr	r1, [pc, #180]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	614b      	str	r3, [r1, #20]
 80038c6:	e02d      	b.n	8003924 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d115      	bne.n	80038fa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <RCCEx_PLLSAI2_Config+0x1e0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6892      	ldr	r2, [r2, #8]
 80038da:	0211      	lsls	r1, r2, #8
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6912      	ldr	r2, [r2, #16]
 80038e0:	0852      	lsrs	r2, r2, #1
 80038e2:	3a01      	subs	r2, #1
 80038e4:	0552      	lsls	r2, r2, #21
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6852      	ldr	r2, [r2, #4]
 80038ec:	3a01      	subs	r2, #1
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4921      	ldr	r1, [pc, #132]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	614b      	str	r3, [r1, #20]
 80038f8:	e014      	b.n	8003924 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038fa:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6952      	ldr	r2, [r2, #20]
 800390c:	0852      	lsrs	r2, r2, #1
 800390e:	3a01      	subs	r2, #1
 8003910:	0652      	lsls	r2, r2, #25
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6852      	ldr	r2, [r2, #4]
 8003918:	3a01      	subs	r2, #1
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	430a      	orrs	r2, r1
 800391e:	4916      	ldr	r1, [pc, #88]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a13      	ldr	r2, [pc, #76]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd fa18 	bl	8000d64 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003936:	e009      	b.n	800394c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003938:	f7fd fa14 	bl	8000d64 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	73fb      	strb	r3, [r7, #15]
          break;
 800394a:	e005      	b.n	8003958 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	4904      	ldr	r1, [pc, #16]	; (8003978 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003968:	4313      	orrs	r3, r2
 800396a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	07ff800f 	.word	0x07ff800f
 8003980:	ff9f800f 	.word	0xff9f800f
 8003984:	f9ff800f 	.word	0xf9ff800f

08003988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e049      	b.n	8003a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f004 fae8 	bl	8007f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f000 fdde 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e047      	b.n	8003ae0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a23      	ldr	r2, [pc, #140]	; (8003aec <HAL_TIM_Base_Start+0xb4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_TIM_Base_Start+0x66>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d018      	beq.n	8003a9e <HAL_TIM_Base_Start+0x66>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <HAL_TIM_Base_Start+0xb8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_TIM_Base_Start+0x66>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_TIM_Base_Start+0xbc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_TIM_Base_Start+0x66>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1c      	ldr	r2, [pc, #112]	; (8003af8 <HAL_TIM_Base_Start+0xc0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_TIM_Base_Start+0x66>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_TIM_Base_Start+0xc4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIM_Base_Start+0x66>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <HAL_TIM_Base_Start+0xc8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d115      	bne.n	8003aca <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_TIM_Base_Start+0xcc>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d015      	beq.n	8003adc <HAL_TIM_Base_Start+0xa4>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d011      	beq.n	8003adc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	e008      	b.n	8003adc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e000      	b.n	8003ade <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003adc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800
 8003af8:	40000c00 	.word	0x40000c00
 8003afc:	40013400 	.word	0x40013400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	00010007 	.word	0x00010007

08003b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d001      	beq.n	8003b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e04f      	b.n	8003bc0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_TIM_Base_Start_IT+0xc4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01d      	beq.n	8003b7e <HAL_TIM_Base_Start_IT+0x76>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4a:	d018      	beq.n	8003b7e <HAL_TIM_Base_Start_IT+0x76>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_TIM_Base_Start_IT+0x76>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00e      	beq.n	8003b7e <HAL_TIM_Base_Start_IT+0x76>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d009      	beq.n	8003b7e <HAL_TIM_Base_Start_IT+0x76>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <HAL_TIM_Base_Start_IT+0xd4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIM_Base_Start_IT+0x76>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d115      	bne.n	8003baa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b06      	cmp	r3, #6
 8003b8e:	d015      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0xb4>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b96:	d011      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	e008      	b.n	8003bbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0201 	orr.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e000      	b.n	8003bbe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40014000 	.word	0x40014000
 8003be4:	00010007 	.word	0x00010007

08003be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e049      	b.n	8003c8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f841 	bl	8003c96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f000 fcae 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d109      	bne.n	8003cd0 <HAL_TIM_PWM_Start+0x24>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e03c      	b.n	8003d4a <HAL_TIM_PWM_Start+0x9e>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d109      	bne.n	8003cea <HAL_TIM_PWM_Start+0x3e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	bf14      	ite	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	2300      	moveq	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	e02f      	b.n	8003d4a <HAL_TIM_PWM_Start+0x9e>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d109      	bne.n	8003d04 <HAL_TIM_PWM_Start+0x58>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e022      	b.n	8003d4a <HAL_TIM_PWM_Start+0x9e>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d109      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x72>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e015      	b.n	8003d4a <HAL_TIM_PWM_Start+0x9e>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d109      	bne.n	8003d38 <HAL_TIM_PWM_Start+0x8c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e008      	b.n	8003d4a <HAL_TIM_PWM_Start+0x9e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e09c      	b.n	8003e8c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_PWM_Start+0xb6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d60:	e023      	b.n	8003daa <HAL_TIM_PWM_Start+0xfe>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_PWM_Start+0xc6>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d70:	e01b      	b.n	8003daa <HAL_TIM_PWM_Start+0xfe>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_PWM_Start+0xd6>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d80:	e013      	b.n	8003daa <HAL_TIM_PWM_Start+0xfe>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b0c      	cmp	r3, #12
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_PWM_Start+0xe6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d90:	e00b      	b.n	8003daa <HAL_TIM_PWM_Start+0xfe>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_PWM_Start+0xf6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da0:	e003      	b.n	8003daa <HAL_TIM_PWM_Start+0xfe>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2201      	movs	r2, #1
 8003db0:	6839      	ldr	r1, [r7, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f885 	bl	8004ec2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a35      	ldr	r2, [pc, #212]	; (8003e94 <HAL_TIM_PWM_Start+0x1e8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_TIM_PWM_Start+0x13e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a34      	ldr	r2, [pc, #208]	; (8003e98 <HAL_TIM_PWM_Start+0x1ec>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00e      	beq.n	8003dea <HAL_TIM_PWM_Start+0x13e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a32      	ldr	r2, [pc, #200]	; (8003e9c <HAL_TIM_PWM_Start+0x1f0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d009      	beq.n	8003dea <HAL_TIM_PWM_Start+0x13e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a31      	ldr	r2, [pc, #196]	; (8003ea0 <HAL_TIM_PWM_Start+0x1f4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIM_PWM_Start+0x13e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2f      	ldr	r2, [pc, #188]	; (8003ea4 <HAL_TIM_PWM_Start+0x1f8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_PWM_Start+0x142>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_TIM_PWM_Start+0x144>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a22      	ldr	r2, [pc, #136]	; (8003e94 <HAL_TIM_PWM_Start+0x1e8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01d      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x19e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e16:	d018      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x19e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <HAL_TIM_PWM_Start+0x1fc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x19e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_TIM_PWM_Start+0x200>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x19e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_TIM_PWM_Start+0x204>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x19e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <HAL_TIM_PWM_Start+0x1ec>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x19e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <HAL_TIM_PWM_Start+0x1f0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d115      	bne.n	8003e76 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <HAL_TIM_PWM_Start+0x208>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d015      	beq.n	8003e88 <HAL_TIM_PWM_Start+0x1dc>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d011      	beq.n	8003e88 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e74:	e008      	b.n	8003e88 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 0201 	orr.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e000      	b.n	8003e8a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40013400 	.word	0x40013400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	00010007 	.word	0x00010007

08003eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0202 	mvn.w	r2, #2
 8003ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fb25 	bl	800454a <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fb17 	bl	8004536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fb28 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0204 	mvn.w	r2, #4
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fafb 	bl	800454a <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 faed 	bl	8004536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fafe 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0208 	mvn.w	r2, #8
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2204      	movs	r2, #4
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fad1 	bl	800454a <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fac3 	bl	8004536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fad4 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d122      	bne.n	8004010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d11b      	bne.n	8004010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0210 	mvn.w	r2, #16
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 faa7 	bl	800454a <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa99 	bl	8004536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 faaa 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0201 	mvn.w	r2, #1
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f003 fe3e 	bl	8007cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 ffe4 	bl	8005030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	d10e      	bne.n	8004096 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d107      	bne.n	8004096 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800408e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 ffd7 	bl	8005044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d10e      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa58 	bl	8004572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d10e      	bne.n	80040ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d107      	bne.n	80040ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0220 	mvn.w	r2, #32
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 ff97 	bl	800501c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004112:	2302      	movs	r3, #2
 8004114:	e0ff      	b.n	8004316 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b14      	cmp	r3, #20
 8004122:	f200 80f0 	bhi.w	8004306 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004181 	.word	0x08004181
 8004130:	08004307 	.word	0x08004307
 8004134:	08004307 	.word	0x08004307
 8004138:	08004307 	.word	0x08004307
 800413c:	080041c1 	.word	0x080041c1
 8004140:	08004307 	.word	0x08004307
 8004144:	08004307 	.word	0x08004307
 8004148:	08004307 	.word	0x08004307
 800414c:	08004203 	.word	0x08004203
 8004150:	08004307 	.word	0x08004307
 8004154:	08004307 	.word	0x08004307
 8004158:	08004307 	.word	0x08004307
 800415c:	08004243 	.word	0x08004243
 8004160:	08004307 	.word	0x08004307
 8004164:	08004307 	.word	0x08004307
 8004168:	08004307 	.word	0x08004307
 800416c:	08004285 	.word	0x08004285
 8004170:	08004307 	.word	0x08004307
 8004174:	08004307 	.word	0x08004307
 8004178:	08004307 	.word	0x08004307
 800417c:	080042c5 	.word	0x080042c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fa98 	bl	80046bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0208 	orr.w	r2, r2, #8
 800419a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0204 	bic.w	r2, r2, #4
 80041aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6999      	ldr	r1, [r3, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	619a      	str	r2, [r3, #24]
      break;
 80041be:	e0a5      	b.n	800430c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fb08 	bl	80047dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6999      	ldr	r1, [r3, #24]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	619a      	str	r2, [r3, #24]
      break;
 8004200:	e084      	b.n	800430c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fb71 	bl	80048f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0208 	orr.w	r2, r2, #8
 800421c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0204 	bic.w	r2, r2, #4
 800422c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69d9      	ldr	r1, [r3, #28]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	61da      	str	r2, [r3, #28]
      break;
 8004240:	e064      	b.n	800430c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fbd9 	bl	8004a00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800425c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69d9      	ldr	r1, [r3, #28]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	021a      	lsls	r2, r3, #8
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	61da      	str	r2, [r3, #28]
      break;
 8004282:	e043      	b.n	800430c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fc22 	bl	8004ad4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0208 	orr.w	r2, r2, #8
 800429e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042c2:	e023      	b.n	800430c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fc66 	bl	8004b9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	021a      	lsls	r2, r3, #8
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004304:	e002      	b.n	800430c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
      break;
 800430a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop

08004320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_TIM_ConfigClockSource+0x1c>
 8004338:	2302      	movs	r3, #2
 800433a:	e0b6      	b.n	80044aa <HAL_TIM_ConfigClockSource+0x18a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800435e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004378:	d03e      	beq.n	80043f8 <HAL_TIM_ConfigClockSource+0xd8>
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437e:	f200 8087 	bhi.w	8004490 <HAL_TIM_ConfigClockSource+0x170>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	f000 8086 	beq.w	8004496 <HAL_TIM_ConfigClockSource+0x176>
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438e:	d87f      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x170>
 8004390:	2b70      	cmp	r3, #112	; 0x70
 8004392:	d01a      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xaa>
 8004394:	2b70      	cmp	r3, #112	; 0x70
 8004396:	d87b      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x170>
 8004398:	2b60      	cmp	r3, #96	; 0x60
 800439a:	d050      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x11e>
 800439c:	2b60      	cmp	r3, #96	; 0x60
 800439e:	d877      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x170>
 80043a0:	2b50      	cmp	r3, #80	; 0x50
 80043a2:	d03c      	beq.n	800441e <HAL_TIM_ConfigClockSource+0xfe>
 80043a4:	2b50      	cmp	r3, #80	; 0x50
 80043a6:	d873      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x170>
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d058      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x13e>
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d86f      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x170>
 80043b0:	2b30      	cmp	r3, #48	; 0x30
 80043b2:	d064      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x15e>
 80043b4:	2b30      	cmp	r3, #48	; 0x30
 80043b6:	d86b      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x170>
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d060      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x15e>
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d867      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x170>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d05c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x15e>
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d05a      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x15e>
 80043c8:	e062      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6899      	ldr	r1, [r3, #8]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f000 fd52 	bl	8004e82 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	609a      	str	r2, [r3, #8]
      break;
 80043f6:	e04f      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6899      	ldr	r1, [r3, #8]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f000 fd3b 	bl	8004e82 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800441a:	609a      	str	r2, [r3, #8]
      break;
 800441c:	e03c      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	461a      	mov	r2, r3
 800442c:	f000 fcaf 	bl	8004d8e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2150      	movs	r1, #80	; 0x50
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fd08 	bl	8004e4c <TIM_ITRx_SetConfig>
      break;
 800443c:	e02c      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	461a      	mov	r2, r3
 800444c:	f000 fcce 	bl	8004dec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2160      	movs	r1, #96	; 0x60
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fcf8 	bl	8004e4c <TIM_ITRx_SetConfig>
      break;
 800445c:	e01c      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	461a      	mov	r2, r3
 800446c:	f000 fc8f 	bl	8004d8e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fce8 	bl	8004e4c <TIM_ITRx_SetConfig>
      break;
 800447c:	e00c      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4619      	mov	r1, r3
 8004488:	4610      	mov	r0, r2
 800448a:	f000 fcdf 	bl	8004e4c <TIM_ITRx_SetConfig>
      break;
 800448e:	e003      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      break;
 8004494:	e000      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_SlaveConfigSynchro+0x18>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e031      	b.n	800452e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2202      	movs	r2, #2
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fbc3 	bl	8004c68 <TIM_SlaveTimer_SetConfig>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e018      	b.n	800452e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800451a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a40      	ldr	r2, [pc, #256]	; (800469c <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a6:	d00f      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3d      	ldr	r2, [pc, #244]	; (80046a0 <TIM_Base_SetConfig+0x118>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3c      	ldr	r2, [pc, #240]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3b      	ldr	r2, [pc, #236]	; (80046a8 <TIM_Base_SetConfig+0x120>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3a      	ldr	r2, [pc, #232]	; (80046ac <TIM_Base_SetConfig+0x124>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2f      	ldr	r2, [pc, #188]	; (800469c <TIM_Base_SetConfig+0x114>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d01b      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2c      	ldr	r2, [pc, #176]	; (80046a0 <TIM_Base_SetConfig+0x118>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d017      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <TIM_Base_SetConfig+0x11c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <TIM_Base_SetConfig+0x120>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00f      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a29      	ldr	r2, [pc, #164]	; (80046ac <TIM_Base_SetConfig+0x124>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00b      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a28      	ldr	r2, [pc, #160]	; (80046b0 <TIM_Base_SetConfig+0x128>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a27      	ldr	r2, [pc, #156]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_Base_SetConfig+0x9a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a26      	ldr	r2, [pc, #152]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d108      	bne.n	8004634 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a10      	ldr	r2, [pc, #64]	; (800469c <TIM_Base_SetConfig+0x114>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00f      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a12      	ldr	r2, [pc, #72]	; (80046ac <TIM_Base_SetConfig+0x124>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00b      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <TIM_Base_SetConfig+0x128>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d007      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <TIM_Base_SetConfig+0x12c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <TIM_Base_SetConfig+0x130>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d103      	bne.n	8004688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	615a      	str	r2, [r3, #20]
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40000c00 	.word	0x40000c00
 80046ac:	40013400 	.word	0x40013400
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800

080046bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f023 0201 	bic.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f023 0302 	bic.w	r3, r3, #2
 8004708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a2c      	ldr	r2, [pc, #176]	; (80047c8 <TIM_OC1_SetConfig+0x10c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00f      	beq.n	800473c <TIM_OC1_SetConfig+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2b      	ldr	r2, [pc, #172]	; (80047cc <TIM_OC1_SetConfig+0x110>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00b      	beq.n	800473c <TIM_OC1_SetConfig+0x80>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2a      	ldr	r2, [pc, #168]	; (80047d0 <TIM_OC1_SetConfig+0x114>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_OC1_SetConfig+0x80>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a29      	ldr	r2, [pc, #164]	; (80047d4 <TIM_OC1_SetConfig+0x118>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_OC1_SetConfig+0x80>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a28      	ldr	r2, [pc, #160]	; (80047d8 <TIM_OC1_SetConfig+0x11c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10c      	bne.n	8004756 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0308 	bic.w	r3, r3, #8
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1b      	ldr	r2, [pc, #108]	; (80047c8 <TIM_OC1_SetConfig+0x10c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00f      	beq.n	800477e <TIM_OC1_SetConfig+0xc2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <TIM_OC1_SetConfig+0x110>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00b      	beq.n	800477e <TIM_OC1_SetConfig+0xc2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a19      	ldr	r2, [pc, #100]	; (80047d0 <TIM_OC1_SetConfig+0x114>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_OC1_SetConfig+0xc2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <TIM_OC1_SetConfig+0x118>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_OC1_SetConfig+0xc2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <TIM_OC1_SetConfig+0x11c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d111      	bne.n	80047a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800478c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40014400 	.word	0x40014400
 80047d8:	40014800 	.word	0x40014800

080047dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0210 	bic.w	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0320 	bic.w	r3, r3, #32
 800482a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a28      	ldr	r2, [pc, #160]	; (80048dc <TIM_OC2_SetConfig+0x100>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC2_SetConfig+0x6c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a27      	ldr	r2, [pc, #156]	; (80048e0 <TIM_OC2_SetConfig+0x104>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10d      	bne.n	8004864 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <TIM_OC2_SetConfig+0x100>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_OC2_SetConfig+0xb0>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <TIM_OC2_SetConfig+0x104>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_OC2_SetConfig+0xb0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <TIM_OC2_SetConfig+0x108>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_OC2_SetConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <TIM_OC2_SetConfig+0x10c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC2_SetConfig+0xb0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a19      	ldr	r2, [pc, #100]	; (80048ec <TIM_OC2_SetConfig+0x110>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d113      	bne.n	80048b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40013400 	.word	0x40013400
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800

080048f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800493c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a27      	ldr	r2, [pc, #156]	; (80049ec <TIM_OC3_SetConfig+0xfc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_OC3_SetConfig+0x6a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a26      	ldr	r2, [pc, #152]	; (80049f0 <TIM_OC3_SetConfig+0x100>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d10d      	bne.n	8004976 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <TIM_OC3_SetConfig+0xfc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00f      	beq.n	800499e <TIM_OC3_SetConfig+0xae>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <TIM_OC3_SetConfig+0x100>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00b      	beq.n	800499e <TIM_OC3_SetConfig+0xae>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <TIM_OC3_SetConfig+0x104>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d007      	beq.n	800499e <TIM_OC3_SetConfig+0xae>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <TIM_OC3_SetConfig+0x108>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_OC3_SetConfig+0xae>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a18      	ldr	r2, [pc, #96]	; (80049fc <TIM_OC3_SetConfig+0x10c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d113      	bne.n	80049c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	621a      	str	r2, [r3, #32]
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40013400 	.word	0x40013400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800

08004a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	031b      	lsls	r3, r3, #12
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <TIM_OC4_SetConfig+0xc0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00f      	beq.n	8004a84 <TIM_OC4_SetConfig+0x84>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <TIM_OC4_SetConfig+0xc4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_OC4_SetConfig+0x84>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <TIM_OC4_SetConfig+0xc8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_OC4_SetConfig+0x84>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a15      	ldr	r2, [pc, #84]	; (8004acc <TIM_OC4_SetConfig+0xcc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_OC4_SetConfig+0x84>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <TIM_OC4_SetConfig+0xd0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d109      	bne.n	8004a98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <TIM_OC5_SetConfig+0xb4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <TIM_OC5_SetConfig+0x7a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <TIM_OC5_SetConfig+0xb8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <TIM_OC5_SetConfig+0x7a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <TIM_OC5_SetConfig+0xbc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <TIM_OC5_SetConfig+0x7a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a14      	ldr	r2, [pc, #80]	; (8004b94 <TIM_OC5_SetConfig+0xc0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_OC5_SetConfig+0x7a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <TIM_OC5_SetConfig+0xc4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d109      	bne.n	8004b62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	40013400 	.word	0x40013400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40014400 	.word	0x40014400
 8004b98:	40014800 	.word	0x40014800

08004b9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	051b      	lsls	r3, r3, #20
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <TIM_OC6_SetConfig+0xb8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00f      	beq.n	8004c18 <TIM_OC6_SetConfig+0x7c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a17      	ldr	r2, [pc, #92]	; (8004c58 <TIM_OC6_SetConfig+0xbc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00b      	beq.n	8004c18 <TIM_OC6_SetConfig+0x7c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a16      	ldr	r2, [pc, #88]	; (8004c5c <TIM_OC6_SetConfig+0xc0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d007      	beq.n	8004c18 <TIM_OC6_SetConfig+0x7c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <TIM_OC6_SetConfig+0xc4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_OC6_SetConfig+0x7c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <TIM_OC6_SetConfig+0xc8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d109      	bne.n	8004c2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	029b      	lsls	r3, r3, #10
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	621a      	str	r2, [r3, #32]
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40013400 	.word	0x40013400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800

08004c68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c84:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b70      	cmp	r3, #112	; 0x70
 8004cb4:	d01a      	beq.n	8004cec <TIM_SlaveTimer_SetConfig+0x84>
 8004cb6:	2b70      	cmp	r3, #112	; 0x70
 8004cb8:	d860      	bhi.n	8004d7c <TIM_SlaveTimer_SetConfig+0x114>
 8004cba:	2b60      	cmp	r3, #96	; 0x60
 8004cbc:	d054      	beq.n	8004d68 <TIM_SlaveTimer_SetConfig+0x100>
 8004cbe:	2b60      	cmp	r3, #96	; 0x60
 8004cc0:	d85c      	bhi.n	8004d7c <TIM_SlaveTimer_SetConfig+0x114>
 8004cc2:	2b50      	cmp	r3, #80	; 0x50
 8004cc4:	d046      	beq.n	8004d54 <TIM_SlaveTimer_SetConfig+0xec>
 8004cc6:	2b50      	cmp	r3, #80	; 0x50
 8004cc8:	d858      	bhi.n	8004d7c <TIM_SlaveTimer_SetConfig+0x114>
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d019      	beq.n	8004d02 <TIM_SlaveTimer_SetConfig+0x9a>
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d854      	bhi.n	8004d7c <TIM_SlaveTimer_SetConfig+0x114>
 8004cd2:	2b30      	cmp	r3, #48	; 0x30
 8004cd4:	d055      	beq.n	8004d82 <TIM_SlaveTimer_SetConfig+0x11a>
 8004cd6:	2b30      	cmp	r3, #48	; 0x30
 8004cd8:	d850      	bhi.n	8004d7c <TIM_SlaveTimer_SetConfig+0x114>
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d051      	beq.n	8004d82 <TIM_SlaveTimer_SetConfig+0x11a>
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d84c      	bhi.n	8004d7c <TIM_SlaveTimer_SetConfig+0x114>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d04d      	beq.n	8004d82 <TIM_SlaveTimer_SetConfig+0x11a>
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d04b      	beq.n	8004d82 <TIM_SlaveTimer_SetConfig+0x11a>
 8004cea:	e047      	b.n	8004d7c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68d9      	ldr	r1, [r3, #12]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f000 f8c1 	bl	8004e82 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004d00:	e040      	b.n	8004d84 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d101      	bne.n	8004d0e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e03b      	b.n	8004d86 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d34:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
      break;
 8004d52:	e017      	b.n	8004d84 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6899      	ldr	r1, [r3, #8]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f000 f814 	bl	8004d8e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004d66:	e00d      	b.n	8004d84 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6899      	ldr	r1, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	461a      	mov	r2, r3
 8004d76:	f000 f839 	bl	8004dec <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004d7a:	e003      	b.n	8004d84 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d80:	e000      	b.n	8004d84 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004d82:	bf00      	nop
  }

  return status;
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f023 0201 	bic.w	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 030a 	bic.w	r3, r3, #10
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f023 0210 	bic.w	r2, r3, #16
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	031b      	lsls	r3, r3, #12
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f043 0307 	orr.w	r3, r3, #7
 8004e6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	609a      	str	r2, [r3, #8]
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b087      	sub	sp, #28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	021a      	lsls	r2, r3, #8
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	609a      	str	r2, [r3, #8]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1a      	ldr	r2, [r3, #32]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	401a      	ands	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e068      	b.n	8004ff6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a2e      	ldr	r2, [pc, #184]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d004      	beq.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2d      	ldr	r2, [pc, #180]	; (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01d      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f96:	d018      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00e      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a18      	ldr	r2, [pc, #96]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a13      	ldr	r2, [pc, #76]	; (8005008 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40013400 	.word	0x40013400
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40014000 	.word	0x40014000

0800501c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e042      	b.n	80050f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f003 f831 	bl	80080e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2224      	movs	r2, #36	; 0x24
 8005086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fc52 	bl	8005944 <UART_SetConfig>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e022      	b.n	80050f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 ff0e 	bl	8005ed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 ff95 	bl	8006018 <UART_CheckIdleState>
 80050ee:	4603      	mov	r3, r0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510e:	2b20      	cmp	r3, #32
 8005110:	f040 8084 	bne.w	800521c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_UART_Transmit+0x28>
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e07c      	b.n	800521e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_UART_Transmit+0x3a>
 800512e:	2302      	movs	r3, #2
 8005130:	e075      	b.n	800521e <HAL_UART_Transmit+0x126>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2221      	movs	r2, #33	; 0x21
 8005146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800514a:	f7fb fe0b 	bl	8000d64 <HAL_GetTick>
 800514e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005168:	d108      	bne.n	800517c <HAL_UART_Transmit+0x84>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	e003      	b.n	8005184 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800518c:	e02d      	b.n	80051ea <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2200      	movs	r2, #0
 8005196:	2180      	movs	r1, #128	; 0x80
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 ff88 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e03a      	b.n	800521e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	881a      	ldrh	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ba:	b292      	uxth	r2, r2
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	3302      	adds	r3, #2
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	e008      	b.n	80051d8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b292      	uxth	r2, r2
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1cb      	bne.n	800518e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2140      	movs	r1, #64	; 0x40
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 ff54 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e006      	b.n	800521e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	2b20      	cmp	r3, #32
 800523e:	d142      	bne.n	80052c6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Receive_IT+0x24>
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e03b      	b.n	80052c8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_UART_Receive_IT+0x36>
 800525a:	2302      	movs	r3, #2
 800525c:	e034      	b.n	80052c8 <HAL_UART_Receive_IT+0xa0>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a17      	ldr	r2, [pc, #92]	; (80052d0 <HAL_UART_Receive_IT+0xa8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01f      	beq.n	80052b6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d018      	beq.n	80052b6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	613b      	str	r3, [r7, #16]
   return(result);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	69f9      	ldr	r1, [r7, #28]
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e6      	bne.n	8005284 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	461a      	mov	r2, r3
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 ffbf 	bl	8006240 <UART_Start_Receive_IT>
 80052c2:	4603      	mov	r3, r0
 80052c4:	e000      	b.n	80052c8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052c6:	2302      	movs	r3, #2
  }
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3728      	adds	r7, #40	; 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40008000 	.word	0x40008000

080052d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b0ba      	sub	sp, #232	; 0xe8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80052fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005302:	4013      	ands	r3, r2
 8005304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11b      	bne.n	8005348 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d015      	beq.n	8005348 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d009      	beq.n	8005348 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 82d6 	beq.w	80058ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	4798      	blx	r3
      }
      return;
 8005346:	e2d0      	b.n	80058ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 811f 	beq.w	8005590 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005352:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005356:	4b8b      	ldr	r3, [pc, #556]	; (8005584 <HAL_UART_IRQHandler+0x2b0>)
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800535e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005362:	4b89      	ldr	r3, [pc, #548]	; (8005588 <HAL_UART_IRQHandler+0x2b4>)
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8112 	beq.w	8005590 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d011      	beq.n	800539c <HAL_UART_IRQHandler+0xc8>
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005392:	f043 0201 	orr.w	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800539c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d011      	beq.n	80053cc <HAL_UART_IRQHandler+0xf8>
 80053a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00b      	beq.n	80053cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2202      	movs	r2, #2
 80053ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c2:	f043 0204 	orr.w	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d011      	beq.n	80053fc <HAL_UART_IRQHandler+0x128>
 80053d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2204      	movs	r2, #4
 80053ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f2:	f043 0202 	orr.w	r2, r3, #2
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d017      	beq.n	8005438 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005414:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005418:	4b5a      	ldr	r3, [pc, #360]	; (8005584 <HAL_UART_IRQHandler+0x2b0>)
 800541a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2208      	movs	r2, #8
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542e:	f043 0208 	orr.w	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005440:	2b00      	cmp	r3, #0
 8005442:	d012      	beq.n	800546a <HAL_UART_IRQHandler+0x196>
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 823c 	beq.w	80058ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800548e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d005      	beq.n	80054ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d04f      	beq.n	800556e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 ffe0 	bl	8006494 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d141      	bne.n	8005566 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3308      	adds	r3, #8
 800550a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800550e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800551a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800551e:	e841 2300 	strex	r3, r2, [r1]
 8005522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1d9      	bne.n	80054e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d013      	beq.n	800555e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800553a:	4a14      	ldr	r2, [pc, #80]	; (800558c <HAL_UART_IRQHandler+0x2b8>)
 800553c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005542:	4618      	mov	r0, r3
 8005544:	f7fc fa13 	bl	800196e <HAL_DMA_Abort_IT>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d017      	beq.n	800557e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005558:	4610      	mov	r0, r2
 800555a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555c:	e00f      	b.n	800557e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9da 	bl	8005918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	e00b      	b.n	800557e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9d6 	bl	8005918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	e007      	b.n	800557e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9d2 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800557c:	e1b7      	b.n	80058ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557e:	bf00      	nop
    return;
 8005580:	e1b5      	b.n	80058ee <HAL_UART_IRQHandler+0x61a>
 8005582:	bf00      	nop
 8005584:	10000001 	.word	0x10000001
 8005588:	04000120 	.word	0x04000120
 800558c:	08006561 	.word	0x08006561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005594:	2b01      	cmp	r3, #1
 8005596:	f040 814a 	bne.w	800582e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8143 	beq.w	800582e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 813c 	beq.w	800582e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2210      	movs	r2, #16
 80055bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	f040 80b5 	bne.w	8005738 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8187 	beq.w	80058f2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ee:	429a      	cmp	r2, r3
 80055f0:	f080 817f 	bcs.w	80058f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 8086 	bne.w	800571c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800563a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800563e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1da      	bne.n	8005610 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800566a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800567e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005682:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005686:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e1      	bne.n	800565a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ec:	f023 0310 	bic.w	r3, r3, #16
 80056f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005700:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800570c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e4      	bne.n	80056dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005716:	4618      	mov	r0, r3
 8005718:	f7fc f8cd 	bl	80018b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005728:	b29b      	uxth	r3, r3
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	b29b      	uxth	r3, r3
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8fb 	bl	800592c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005736:	e0dc      	b.n	80058f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005744:	b29b      	uxth	r3, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005752:	b29b      	uxth	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80ce 	beq.w	80058f6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800575a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 80c9 	beq.w	80058f6 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005786:	647b      	str	r3, [r7, #68]	; 0x44
 8005788:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800578c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e4      	bne.n	8005764 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	623b      	str	r3, [r7, #32]
   return(result);
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3308      	adds	r3, #8
 80057be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057c2:	633a      	str	r2, [r7, #48]	; 0x30
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e1      	bne.n	800579a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0310 	bic.w	r3, r3, #16
 80057fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	69b9      	ldr	r1, [r7, #24]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	617b      	str	r3, [r7, #20]
   return(result);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e4      	bne.n	80057ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f880 	bl	800592c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800582c:	e063      	b.n	80058f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00e      	beq.n	8005858 <HAL_UART_IRQHandler+0x584>
 800583a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d008      	beq.n	8005858 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800584e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fb2b 	bl	8006eac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005856:	e051      	b.n	80058fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b00      	cmp	r3, #0
 8005862:	d014      	beq.n	800588e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03a      	beq.n	80058fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
    }
    return;
 800588c:	e035      	b.n	80058fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <HAL_UART_IRQHandler+0x5da>
 800589a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fe70 	bl	800658c <UART_EndTransmit_IT>
    return;
 80058ac:	e026      	b.n	80058fc <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <HAL_UART_IRQHandler+0x5fa>
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fb04 	bl	8006ed4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058cc:	e016      	b.n	80058fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d010      	beq.n	80058fc <HAL_UART_IRQHandler+0x628>
 80058da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da0c      	bge.n	80058fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 faec 	bl	8006ec0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058e8:	e008      	b.n	80058fc <HAL_UART_IRQHandler+0x628>
      return;
 80058ea:	bf00      	nop
 80058ec:	e006      	b.n	80058fc <HAL_UART_IRQHandler+0x628>
    return;
 80058ee:	bf00      	nop
 80058f0:	e004      	b.n	80058fc <HAL_UART_IRQHandler+0x628>
      return;
 80058f2:	bf00      	nop
 80058f4:	e002      	b.n	80058fc <HAL_UART_IRQHandler+0x628>
      return;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <HAL_UART_IRQHandler+0x628>
    return;
 80058fa:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80058fc:	37e8      	adds	r7, #232	; 0xe8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop

08005904 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	b5b0      	push	{r4, r5, r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	4313      	orrs	r3, r2
 8005966:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4bb1      	ldr	r3, [pc, #708]	; (8005c34 <UART_SetConfig+0x2f0>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	430b      	orrs	r3, r1
 800597a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4aa6      	ldr	r2, [pc, #664]	; (8005c38 <UART_SetConfig+0x2f4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	69f9      	ldr	r1, [r7, #28]
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	f023 010f 	bic.w	r1, r3, #15
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a97      	ldr	r2, [pc, #604]	; (8005c3c <UART_SetConfig+0x2f8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d120      	bne.n	8005a26 <UART_SetConfig+0xe2>
 80059e4:	4b96      	ldr	r3, [pc, #600]	; (8005c40 <UART_SetConfig+0x2fc>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d816      	bhi.n	8005a20 <UART_SetConfig+0xdc>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0xb4>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a09 	.word	0x08005a09
 80059fc:	08005a15 	.word	0x08005a15
 8005a00:	08005a0f 	.word	0x08005a0f
 8005a04:	08005a1b 	.word	0x08005a1b
 8005a08:	2301      	movs	r3, #1
 8005a0a:	76fb      	strb	r3, [r7, #27]
 8005a0c:	e0e7      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	76fb      	strb	r3, [r7, #27]
 8005a12:	e0e4      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a14:	2304      	movs	r3, #4
 8005a16:	76fb      	strb	r3, [r7, #27]
 8005a18:	e0e1      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	76fb      	strb	r3, [r7, #27]
 8005a1e:	e0de      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a20:	2310      	movs	r3, #16
 8005a22:	76fb      	strb	r3, [r7, #27]
 8005a24:	e0db      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a86      	ldr	r2, [pc, #536]	; (8005c44 <UART_SetConfig+0x300>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d132      	bne.n	8005a96 <UART_SetConfig+0x152>
 8005a30:	4b83      	ldr	r3, [pc, #524]	; (8005c40 <UART_SetConfig+0x2fc>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b0c      	cmp	r3, #12
 8005a3c:	d828      	bhi.n	8005a90 <UART_SetConfig+0x14c>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <UART_SetConfig+0x100>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a79 	.word	0x08005a79
 8005a48:	08005a91 	.word	0x08005a91
 8005a4c:	08005a91 	.word	0x08005a91
 8005a50:	08005a91 	.word	0x08005a91
 8005a54:	08005a85 	.word	0x08005a85
 8005a58:	08005a91 	.word	0x08005a91
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005a7f 	.word	0x08005a7f
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a91 	.word	0x08005a91
 8005a74:	08005a8b 	.word	0x08005a8b
 8005a78:	2300      	movs	r3, #0
 8005a7a:	76fb      	strb	r3, [r7, #27]
 8005a7c:	e0af      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	76fb      	strb	r3, [r7, #27]
 8005a82:	e0ac      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a84:	2304      	movs	r3, #4
 8005a86:	76fb      	strb	r3, [r7, #27]
 8005a88:	e0a9      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	76fb      	strb	r3, [r7, #27]
 8005a8e:	e0a6      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a90:	2310      	movs	r3, #16
 8005a92:	76fb      	strb	r3, [r7, #27]
 8005a94:	e0a3      	b.n	8005bde <UART_SetConfig+0x29a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a6b      	ldr	r2, [pc, #428]	; (8005c48 <UART_SetConfig+0x304>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d120      	bne.n	8005ae2 <UART_SetConfig+0x19e>
 8005aa0:	4b67      	ldr	r3, [pc, #412]	; (8005c40 <UART_SetConfig+0x2fc>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aaa:	2b30      	cmp	r3, #48	; 0x30
 8005aac:	d013      	beq.n	8005ad6 <UART_SetConfig+0x192>
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d814      	bhi.n	8005adc <UART_SetConfig+0x198>
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d009      	beq.n	8005aca <UART_SetConfig+0x186>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d810      	bhi.n	8005adc <UART_SetConfig+0x198>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <UART_SetConfig+0x180>
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d006      	beq.n	8005ad0 <UART_SetConfig+0x18c>
 8005ac2:	e00b      	b.n	8005adc <UART_SetConfig+0x198>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	76fb      	strb	r3, [r7, #27]
 8005ac8:	e089      	b.n	8005bde <UART_SetConfig+0x29a>
 8005aca:	2302      	movs	r3, #2
 8005acc:	76fb      	strb	r3, [r7, #27]
 8005ace:	e086      	b.n	8005bde <UART_SetConfig+0x29a>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	76fb      	strb	r3, [r7, #27]
 8005ad4:	e083      	b.n	8005bde <UART_SetConfig+0x29a>
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	76fb      	strb	r3, [r7, #27]
 8005ada:	e080      	b.n	8005bde <UART_SetConfig+0x29a>
 8005adc:	2310      	movs	r3, #16
 8005ade:	76fb      	strb	r3, [r7, #27]
 8005ae0:	e07d      	b.n	8005bde <UART_SetConfig+0x29a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a59      	ldr	r2, [pc, #356]	; (8005c4c <UART_SetConfig+0x308>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d120      	bne.n	8005b2e <UART_SetConfig+0x1ea>
 8005aec:	4b54      	ldr	r3, [pc, #336]	; (8005c40 <UART_SetConfig+0x2fc>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005af6:	2bc0      	cmp	r3, #192	; 0xc0
 8005af8:	d013      	beq.n	8005b22 <UART_SetConfig+0x1de>
 8005afa:	2bc0      	cmp	r3, #192	; 0xc0
 8005afc:	d814      	bhi.n	8005b28 <UART_SetConfig+0x1e4>
 8005afe:	2b80      	cmp	r3, #128	; 0x80
 8005b00:	d009      	beq.n	8005b16 <UART_SetConfig+0x1d2>
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d810      	bhi.n	8005b28 <UART_SetConfig+0x1e4>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <UART_SetConfig+0x1cc>
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d006      	beq.n	8005b1c <UART_SetConfig+0x1d8>
 8005b0e:	e00b      	b.n	8005b28 <UART_SetConfig+0x1e4>
 8005b10:	2300      	movs	r3, #0
 8005b12:	76fb      	strb	r3, [r7, #27]
 8005b14:	e063      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b16:	2302      	movs	r3, #2
 8005b18:	76fb      	strb	r3, [r7, #27]
 8005b1a:	e060      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	76fb      	strb	r3, [r7, #27]
 8005b20:	e05d      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b22:	2308      	movs	r3, #8
 8005b24:	76fb      	strb	r3, [r7, #27]
 8005b26:	e05a      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	76fb      	strb	r3, [r7, #27]
 8005b2c:	e057      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a47      	ldr	r2, [pc, #284]	; (8005c50 <UART_SetConfig+0x30c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d125      	bne.n	8005b84 <UART_SetConfig+0x240>
 8005b38:	4b41      	ldr	r3, [pc, #260]	; (8005c40 <UART_SetConfig+0x2fc>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b46:	d017      	beq.n	8005b78 <UART_SetConfig+0x234>
 8005b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4c:	d817      	bhi.n	8005b7e <UART_SetConfig+0x23a>
 8005b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b52:	d00b      	beq.n	8005b6c <UART_SetConfig+0x228>
 8005b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b58:	d811      	bhi.n	8005b7e <UART_SetConfig+0x23a>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <UART_SetConfig+0x222>
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b62:	d006      	beq.n	8005b72 <UART_SetConfig+0x22e>
 8005b64:	e00b      	b.n	8005b7e <UART_SetConfig+0x23a>
 8005b66:	2300      	movs	r3, #0
 8005b68:	76fb      	strb	r3, [r7, #27]
 8005b6a:	e038      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	76fb      	strb	r3, [r7, #27]
 8005b70:	e035      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b72:	2304      	movs	r3, #4
 8005b74:	76fb      	strb	r3, [r7, #27]
 8005b76:	e032      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b78:	2308      	movs	r3, #8
 8005b7a:	76fb      	strb	r3, [r7, #27]
 8005b7c:	e02f      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b7e:	2310      	movs	r3, #16
 8005b80:	76fb      	strb	r3, [r7, #27]
 8005b82:	e02c      	b.n	8005bde <UART_SetConfig+0x29a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a2b      	ldr	r2, [pc, #172]	; (8005c38 <UART_SetConfig+0x2f4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d125      	bne.n	8005bda <UART_SetConfig+0x296>
 8005b8e:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <UART_SetConfig+0x2fc>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b9c:	d017      	beq.n	8005bce <UART_SetConfig+0x28a>
 8005b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba2:	d817      	bhi.n	8005bd4 <UART_SetConfig+0x290>
 8005ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba8:	d00b      	beq.n	8005bc2 <UART_SetConfig+0x27e>
 8005baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bae:	d811      	bhi.n	8005bd4 <UART_SetConfig+0x290>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <UART_SetConfig+0x278>
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d006      	beq.n	8005bc8 <UART_SetConfig+0x284>
 8005bba:	e00b      	b.n	8005bd4 <UART_SetConfig+0x290>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	76fb      	strb	r3, [r7, #27]
 8005bc0:	e00d      	b.n	8005bde <UART_SetConfig+0x29a>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	76fb      	strb	r3, [r7, #27]
 8005bc6:	e00a      	b.n	8005bde <UART_SetConfig+0x29a>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	76fb      	strb	r3, [r7, #27]
 8005bcc:	e007      	b.n	8005bde <UART_SetConfig+0x29a>
 8005bce:	2308      	movs	r3, #8
 8005bd0:	76fb      	strb	r3, [r7, #27]
 8005bd2:	e004      	b.n	8005bde <UART_SetConfig+0x29a>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	76fb      	strb	r3, [r7, #27]
 8005bd8:	e001      	b.n	8005bde <UART_SetConfig+0x29a>
 8005bda:	2310      	movs	r3, #16
 8005bdc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <UART_SetConfig+0x2f4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	f040 809f 	bne.w	8005d28 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bea:	7efb      	ldrb	r3, [r7, #27]
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d837      	bhi.n	8005c60 <UART_SetConfig+0x31c>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x2b4>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c61 	.word	0x08005c61
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c61 	.word	0x08005c61
 8005c08:	08005c2b 	.word	0x08005c2b
 8005c0c:	08005c61 	.word	0x08005c61
 8005c10:	08005c61 	.word	0x08005c61
 8005c14:	08005c61 	.word	0x08005c61
 8005c18:	08005c59 	.word	0x08005c59
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f7fd f8ae 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8005c20:	6178      	str	r0, [r7, #20]
        break;
 8005c22:	e022      	b.n	8005c6a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c24:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <UART_SetConfig+0x310>)
 8005c26:	617b      	str	r3, [r7, #20]
        break;
 8005c28:	e01f      	b.n	8005c6a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7fd f80f 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8005c2e:	6178      	str	r0, [r7, #20]
        break;
 8005c30:	e01b      	b.n	8005c6a <UART_SetConfig+0x326>
 8005c32:	bf00      	nop
 8005c34:	cfff69f3 	.word	0xcfff69f3
 8005c38:	40008000 	.word	0x40008000
 8005c3c:	40013800 	.word	0x40013800
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40004400 	.word	0x40004400
 8005c48:	40004800 	.word	0x40004800
 8005c4c:	40004c00 	.word	0x40004c00
 8005c50:	40005000 	.word	0x40005000
 8005c54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5c:	617b      	str	r3, [r7, #20]
        break;
 8005c5e:	e004      	b.n	8005c6a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	76bb      	strb	r3, [r7, #26]
        break;
 8005c68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8119 	beq.w	8005ea4 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	4a95      	ldr	r2, [pc, #596]	; (8005ecc <UART_SetConfig+0x588>)
 8005c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c84:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	4413      	add	r3, r2
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d305      	bcc.n	8005ca2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d902      	bls.n	8005ca8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	76bb      	strb	r3, [r7, #26]
 8005ca6:	e0fd      	b.n	8005ea4 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f04f 0100 	mov.w	r1, #0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	4a85      	ldr	r2, [pc, #532]	; (8005ecc <UART_SetConfig+0x588>)
 8005cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	f7fa fe6c 	bl	800099c <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	020b      	lsls	r3, r1, #8
 8005cd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cda:	0202      	lsls	r2, r0, #8
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	6849      	ldr	r1, [r1, #4]
 8005ce0:	0849      	lsrs	r1, r1, #1
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	f04f 0100 	mov.w	r1, #0
 8005ce8:	1814      	adds	r4, r2, r0
 8005cea:	eb43 0501 	adc.w	r5, r3, r1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	f7fa fe4e 	bl	800099c <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0e:	d308      	bcc.n	8005d22 <UART_SetConfig+0x3de>
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d16:	d204      	bcs.n	8005d22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	60da      	str	r2, [r3, #12]
 8005d20:	e0c0      	b.n	8005ea4 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	76bb      	strb	r3, [r7, #26]
 8005d26:	e0bd      	b.n	8005ea4 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d30:	d164      	bne.n	8005dfc <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005d32:	7efb      	ldrb	r3, [r7, #27]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d828      	bhi.n	8005d8a <UART_SetConfig+0x446>
 8005d38:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0x3fc>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	08005d8b 	.word	0x08005d8b
 8005d50:	08005d7b 	.word	0x08005d7b
 8005d54:	08005d8b 	.word	0x08005d8b
 8005d58:	08005d8b 	.word	0x08005d8b
 8005d5c:	08005d8b 	.word	0x08005d8b
 8005d60:	08005d83 	.word	0x08005d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fd f80a 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8005d68:	6178      	str	r0, [r7, #20]
        break;
 8005d6a:	e013      	b.n	8005d94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fd f81c 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8005d70:	6178      	str	r0, [r7, #20]
        break;
 8005d72:	e00f      	b.n	8005d94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d74:	4b56      	ldr	r3, [pc, #344]	; (8005ed0 <UART_SetConfig+0x58c>)
 8005d76:	617b      	str	r3, [r7, #20]
        break;
 8005d78:	e00c      	b.n	8005d94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7a:	f7fc ff67 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8005d7e:	6178      	str	r0, [r7, #20]
        break;
 8005d80:	e008      	b.n	8005d94 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	617b      	str	r3, [r7, #20]
        break;
 8005d88:	e004      	b.n	8005d94 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	76bb      	strb	r3, [r7, #26]
        break;
 8005d92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 8084 	beq.w	8005ea4 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	4a4a      	ldr	r2, [pc, #296]	; (8005ecc <UART_SetConfig+0x588>)
 8005da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da6:	461a      	mov	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dae:	005a      	lsls	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	441a      	add	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc0:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b0f      	cmp	r3, #15
 8005dc6:	d916      	bls.n	8005df6 <UART_SetConfig+0x4b2>
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dce:	d212      	bcs.n	8005df6 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f023 030f 	bic.w	r3, r3, #15
 8005dd8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	89fb      	ldrh	r3, [r7, #14]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	89fa      	ldrh	r2, [r7, #14]
 8005df2:	60da      	str	r2, [r3, #12]
 8005df4:	e056      	b.n	8005ea4 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	76bb      	strb	r3, [r7, #26]
 8005dfa:	e053      	b.n	8005ea4 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dfc:	7efb      	ldrb	r3, [r7, #27]
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d827      	bhi.n	8005e52 <UART_SetConfig+0x50e>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x4c4>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	08005e53 	.word	0x08005e53
 8005e18:	08005e43 	.word	0x08005e43
 8005e1c:	08005e53 	.word	0x08005e53
 8005e20:	08005e53 	.word	0x08005e53
 8005e24:	08005e53 	.word	0x08005e53
 8005e28:	08005e4b 	.word	0x08005e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7fc ffa6 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8005e30:	6178      	str	r0, [r7, #20]
        break;
 8005e32:	e013      	b.n	8005e5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e34:	f7fc ffb8 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8005e38:	6178      	str	r0, [r7, #20]
        break;
 8005e3a:	e00f      	b.n	8005e5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e3c:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <UART_SetConfig+0x58c>)
 8005e3e:	617b      	str	r3, [r7, #20]
        break;
 8005e40:	e00c      	b.n	8005e5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e42:	f7fc ff03 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8005e46:	6178      	str	r0, [r7, #20]
        break;
 8005e48:	e008      	b.n	8005e5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4e:	617b      	str	r3, [r7, #20]
        break;
 8005e50:	e004      	b.n	8005e5c <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	76bb      	strb	r3, [r7, #26]
        break;
 8005e5a:	bf00      	nop
    }

    if (pclk != 0U)
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d020      	beq.n	8005ea4 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <UART_SetConfig+0x588>)
 8005e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	441a      	add	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b0f      	cmp	r3, #15
 8005e8a:	d909      	bls.n	8005ea0 <UART_SetConfig+0x55c>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e92:	d205      	bcs.n	8005ea0 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e001      	b.n	8005ea4 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ec0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	08008cc8 	.word	0x08008cc8
 8005ed0:	00f42400 	.word	0x00f42400

08005ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01a      	beq.n	8005fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd2:	d10a      	bne.n	8005fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
  }
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006028:	f7fa fe9c 	bl	8000d64 <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b08      	cmp	r3, #8
 800603a:	d10e      	bne.n	800605a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800603c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f82f 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e025      	b.n	80060a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d10e      	bne.n	8006086 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f819 	bl	80060ae <UART_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e00f      	b.n	80060a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b09c      	sub	sp, #112	; 0x70
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060be:	e0a9      	b.n	8006214 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	f000 80a5 	beq.w	8006214 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	f7fa fe4b 	bl	8000d64 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80060da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d140      	bne.n	8006162 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060f4:	667b      	str	r3, [r7, #100]	; 0x64
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006100:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006104:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800610c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e6      	bne.n	80060e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	663b      	str	r3, [r7, #96]	; 0x60
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3308      	adds	r3, #8
 8006130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006132:	64ba      	str	r2, [r7, #72]	; 0x48
 8006134:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e5      	bne.n	8006112 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e069      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d051      	beq.n	8006214 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800617a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617e:	d149      	bne.n	8006214 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006188:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	e853 3f00 	ldrex	r3, [r3]
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800619e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
 80061aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b0:	e841 2300 	strex	r3, r2, [r1]
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e6      	bne.n	800618a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3308      	adds	r3, #8
 80061c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	613b      	str	r3, [r7, #16]
   return(result);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f023 0301 	bic.w	r3, r3, #1
 80061d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3308      	adds	r3, #8
 80061da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061dc:	623a      	str	r2, [r7, #32]
 80061de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	69f9      	ldr	r1, [r7, #28]
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e5      	bne.n	80061bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e010      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69da      	ldr	r2, [r3, #28]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4013      	ands	r3, r2
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	429a      	cmp	r2, r3
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	429a      	cmp	r2, r3
 8006230:	f43f af46 	beq.w	80060c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3770      	adds	r7, #112	; 0x70
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006240:	b480      	push	{r7}
 8006242:	b0a3      	sub	sp, #140	; 0x8c
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	88fa      	ldrh	r2, [r7, #6]
 8006260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006272:	d10e      	bne.n	8006292 <UART_Start_Receive_IT+0x52>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <UART_Start_Receive_IT+0x48>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006282:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006286:	e02d      	b.n	80062e4 <UART_Start_Receive_IT+0xa4>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	22ff      	movs	r2, #255	; 0xff
 800628c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006290:	e028      	b.n	80062e4 <UART_Start_Receive_IT+0xa4>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10d      	bne.n	80062b6 <UART_Start_Receive_IT+0x76>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d104      	bne.n	80062ac <UART_Start_Receive_IT+0x6c>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	22ff      	movs	r2, #255	; 0xff
 80062a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062aa:	e01b      	b.n	80062e4 <UART_Start_Receive_IT+0xa4>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	227f      	movs	r2, #127	; 0x7f
 80062b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062b4:	e016      	b.n	80062e4 <UART_Start_Receive_IT+0xa4>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062be:	d10d      	bne.n	80062dc <UART_Start_Receive_IT+0x9c>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <UART_Start_Receive_IT+0x92>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	227f      	movs	r2, #127	; 0x7f
 80062cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062d0:	e008      	b.n	80062e4 <UART_Start_Receive_IT+0xa4>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	223f      	movs	r2, #63	; 0x3f
 80062d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062da:	e003      	b.n	80062e4 <UART_Start_Receive_IT+0xa4>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2222      	movs	r2, #34	; 0x22
 80062f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3308      	adds	r3, #8
 80062fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3308      	adds	r3, #8
 8006314:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006318:	673a      	str	r2, [r7, #112]	; 0x70
 800631a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800631e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e3      	bne.n	80062f4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006334:	d153      	bne.n	80063de <UART_Start_Receive_IT+0x19e>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800633c:	88fa      	ldrh	r2, [r7, #6]
 800633e:	429a      	cmp	r2, r3
 8006340:	d34d      	bcc.n	80063de <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	d107      	bne.n	800635c <UART_Start_Receive_IT+0x11c>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a4b      	ldr	r2, [pc, #300]	; (8006484 <UART_Start_Receive_IT+0x244>)
 8006358:	671a      	str	r2, [r3, #112]	; 0x70
 800635a:	e002      	b.n	8006362 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a4a      	ldr	r2, [pc, #296]	; (8006488 <UART_Start_Receive_IT+0x248>)
 8006360:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01a      	beq.n	80063a8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006396:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800639a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e4      	bne.n	8006372 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80063c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_Start_Receive_IT+0x168>
 80063dc:	e04a      	b.n	8006474 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e6:	d107      	bne.n	80063f8 <UART_Start_Receive_IT+0x1b8>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a26      	ldr	r2, [pc, #152]	; (800648c <UART_Start_Receive_IT+0x24c>)
 80063f4:	671a      	str	r2, [r3, #112]	; 0x70
 80063f6:	e002      	b.n	80063fe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a25      	ldr	r2, [pc, #148]	; (8006490 <UART_Start_Receive_IT+0x250>)
 80063fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d019      	beq.n	8006442 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006422:	677b      	str	r3, [r7, #116]	; 0x74
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
 800642e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e6      	bne.n	800640e <UART_Start_Receive_IT+0x1ce>
 8006440:	e018      	b.n	8006474 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	613b      	str	r3, [r7, #16]
   return(result);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f043 0320 	orr.w	r3, r3, #32
 8006456:	67bb      	str	r3, [r7, #120]	; 0x78
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	69f9      	ldr	r1, [r7, #28]
 8006466:	6a3a      	ldr	r2, [r7, #32]
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	61bb      	str	r3, [r7, #24]
   return(result);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e6      	bne.n	8006442 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	378c      	adds	r7, #140	; 0x8c
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	08006ba9 	.word	0x08006ba9
 8006488:	080068ad 	.word	0x080068ad
 800648c:	08006747 	.word	0x08006747
 8006490:	080065e3 	.word	0x080065e3

08006494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b095      	sub	sp, #84	; 0x54
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ba:	643b      	str	r3, [r7, #64]	; 0x40
 80064bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e6      	bne.n	800649c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e3      	bne.n	80064ce <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d118      	bne.n	8006540 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	60bb      	str	r3, [r7, #8]
   return(result);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f023 0310 	bic.w	r3, r3, #16
 8006522:	647b      	str	r3, [r7, #68]	; 0x44
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6979      	ldr	r1, [r7, #20]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	613b      	str	r3, [r7, #16]
   return(result);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e6      	bne.n	800650e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006554:	bf00      	nop
 8006556:	3754      	adds	r7, #84	; 0x54
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff f9ca 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6979      	ldr	r1, [r7, #20]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	613b      	str	r3, [r7, #16]
   return(result);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e6      	bne.n	8006594 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff f995 	bl	8005904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065da:	bf00      	nop
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b096      	sub	sp, #88	; 0x58
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fa:	2b22      	cmp	r3, #34	; 0x22
 80065fc:	f040 8095 	bne.w	800672a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006606:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800660a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800660e:	b2d9      	uxtb	r1, r3
 8006610:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006614:	b2da      	uxtb	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	400a      	ands	r2, r1
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d17a      	bne.n	800673e <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800665c:	653b      	str	r3, [r7, #80]	; 0x50
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006666:	647b      	str	r3, [r7, #68]	; 0x44
 8006668:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800666c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e6      	bne.n	8006648 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	623b      	str	r3, [r7, #32]
   return(result);
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800669a:	633a      	str	r2, [r7, #48]	; 0x30
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e5      	bne.n	800667a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d12e      	bne.n	8006722 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0310 	bic.w	r3, r3, #16
 80066de:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	69b9      	ldr	r1, [r7, #24]
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	617b      	str	r3, [r7, #20]
   return(result);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e6      	bne.n	80066ca <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b10      	cmp	r3, #16
 8006708:	d103      	bne.n	8006712 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2210      	movs	r2, #16
 8006710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff f906 	bl	800592c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006720:	e00d      	b.n	800673e <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f001 faf8 	bl	8007d18 <HAL_UART_RxCpltCallback>
}
 8006728:	e009      	b.n	800673e <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	8b1b      	ldrh	r3, [r3, #24]
 8006730:	b29a      	uxth	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0208 	orr.w	r2, r2, #8
 800673a:	b292      	uxth	r2, r2
 800673c:	831a      	strh	r2, [r3, #24]
}
 800673e:	bf00      	nop
 8006740:	3758      	adds	r7, #88	; 0x58
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b096      	sub	sp, #88	; 0x58
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006754:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675e:	2b22      	cmp	r3, #34	; 0x22
 8006760:	f040 8095 	bne.w	800688e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800676a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006774:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006778:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800677c:	4013      	ands	r3, r2
 800677e:	b29a      	uxth	r2, r3
 8006780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006782:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006788:	1c9a      	adds	r2, r3, #2
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d17a      	bne.n	80068a2 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ca:	643b      	str	r3, [r7, #64]	; 0x40
 80067cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e6      	bne.n	80067ac <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3308      	adds	r3, #8
 80067e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e5      	bne.n	80067de <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d12e      	bne.n	8006886 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	60bb      	str	r3, [r7, #8]
   return(result);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f023 0310 	bic.w	r3, r3, #16
 8006842:	647b      	str	r3, [r7, #68]	; 0x44
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6979      	ldr	r1, [r7, #20]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	613b      	str	r3, [r7, #16]
   return(result);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e6      	bne.n	800682e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b10      	cmp	r3, #16
 800686c:	d103      	bne.n	8006876 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2210      	movs	r2, #16
 8006874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff f854 	bl	800592c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006884:	e00d      	b.n	80068a2 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 fa46 	bl	8007d18 <HAL_UART_RxCpltCallback>
}
 800688c:	e009      	b.n	80068a2 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	8b1b      	ldrh	r3, [r3, #24]
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0208 	orr.w	r2, r2, #8
 800689e:	b292      	uxth	r2, r2
 80068a0:	831a      	strh	r2, [r3, #24]
}
 80068a2:	bf00      	nop
 80068a4:	3758      	adds	r7, #88	; 0x58
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b0a6      	sub	sp, #152	; 0x98
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	2b22      	cmp	r3, #34	; 0x22
 80068e4:	f040 814f 	bne.w	8006b86 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068f2:	e0f6      	b.n	8006ae2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068fa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006902:	b2d9      	uxtb	r1, r3
 8006904:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006908:	b2da      	uxtb	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690e:	400a      	ands	r2, r1
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800693a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	2b00      	cmp	r3, #0
 8006944:	d053      	beq.n	80069ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006946:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d011      	beq.n	8006976 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00b      	beq.n	8006976 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2201      	movs	r2, #1
 8006964:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800696c:	f043 0201 	orr.w	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006976:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d011      	beq.n	80069a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2202      	movs	r2, #2
 8006994:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800699c:	f043 0204 	orr.w	r2, r3, #4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d011      	beq.n	80069d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80069b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2204      	movs	r2, #4
 80069c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069cc:	f043 0202 	orr.w	r2, r3, #2
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d006      	beq.n	80069ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7fe ff99 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d173      	bne.n	8006ae2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a1e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006a22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e4      	bne.n	80069fa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3308      	adds	r3, #8
 8006a36:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a46:	f023 0301 	bic.w	r3, r3, #1
 8006a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006a54:	657a      	str	r2, [r7, #84]	; 0x54
 8006a56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e3      	bne.n	8006a30 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d12e      	bne.n	8006adc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	f023 0310 	bic.w	r3, r3, #16
 8006a98:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e6      	bne.n	8006a84 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f003 0310 	and.w	r3, r3, #16
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d103      	bne.n	8006acc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2210      	movs	r2, #16
 8006aca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fe ff29 	bl	800592c <HAL_UARTEx_RxEventCallback>
 8006ada:	e002      	b.n	8006ae2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f91b 	bl	8007d18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ae2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d006      	beq.n	8006af8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f47f aefe 	bne.w	80068f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006afe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b02:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d047      	beq.n	8006b9a <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d240      	bcs.n	8006b9a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006b38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e5      	bne.n	8006b18 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8006b50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f043 0320 	orr.w	r3, r3, #32
 8006b66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6979      	ldr	r1, [r7, #20]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e6      	bne.n	8006b52 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b84:	e009      	b.n	8006b9a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	8b1b      	ldrh	r3, [r3, #24]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0208 	orr.w	r2, r2, #8
 8006b96:	b292      	uxth	r2, r2
 8006b98:	831a      	strh	r2, [r3, #24]
}
 8006b9a:	bf00      	nop
 8006b9c:	3798      	adds	r7, #152	; 0x98
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	080065e3 	.word	0x080065e3

08006ba8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b0a8      	sub	sp, #160	; 0xa0
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006bb6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bde:	2b22      	cmp	r3, #34	; 0x22
 8006be0:	f040 8153 	bne.w	8006e8a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bee:	e0fa      	b.n	8006de6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bf6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c02:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006c06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d053      	beq.n	8006cee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d011      	beq.n	8006c76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2201      	movs	r2, #1
 8006c64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6c:	f043 0201 	orr.w	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d011      	beq.n	8006ca6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006c82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2202      	movs	r2, #2
 8006c94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9c:	f043 0204 	orr.w	r2, r3, #4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d011      	beq.n	8006cd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006cb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ccc:	f043 0202 	orr.w	r2, r3, #2
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7fe fe19 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d175      	bne.n	8006de6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d1e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e4      	bne.n	8006cfa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3308      	adds	r3, #8
 8006d36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d46:	f023 0301 	bic.w	r3, r3, #1
 8006d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d58:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e1      	bne.n	8006d30 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d12e      	bne.n	8006de0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	f023 0310 	bic.w	r3, r3, #16
 8006d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006da6:	647b      	str	r3, [r7, #68]	; 0x44
 8006da8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e6      	bne.n	8006d88 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f003 0310 	and.w	r3, r3, #16
 8006dc4:	2b10      	cmp	r3, #16
 8006dc6:	d103      	bne.n	8006dd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2210      	movs	r2, #16
 8006dce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fe fda7 	bl	800592c <HAL_UARTEx_RxEventCallback>
 8006dde:	e002      	b.n	8006de6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 ff99 	bl	8007d18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006de6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d006      	beq.n	8006dfc <UART_RxISR_16BIT_FIFOEN+0x254>
 8006dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f47f aefa 	bne.w	8006bf0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e02:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e06:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d047      	beq.n	8006e9e <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e14:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d240      	bcs.n	8006e9e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e32:	677b      	str	r3, [r7, #116]	; 0x74
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006e3c:	633a      	str	r2, [r7, #48]	; 0x30
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8006e54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f043 0320 	orr.w	r3, r3, #32
 8006e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	69b9      	ldr	r1, [r7, #24]
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	617b      	str	r3, [r7, #20]
   return(result);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e6      	bne.n	8006e56 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e88:	e009      	b.n	8006e9e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	8b1b      	ldrh	r3, [r3, #24]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0208 	orr.w	r2, r2, #8
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	831a      	strh	r2, [r3, #24]
}
 8006e9e:	bf00      	nop
 8006ea0:	37a0      	adds	r7, #160	; 0xa0
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	08006747 	.word	0x08006747

08006eac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_UARTEx_DisableFifoMode+0x16>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e027      	b.n	8006f4e <HAL_UARTEx_DisableFifoMode+0x66>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2224      	movs	r2, #36	; 0x24
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0201 	bic.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e02d      	b.n	8006fce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2224      	movs	r2, #36	; 0x24
 8006f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0201 	bic.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f850 	bl	8007054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d101      	bne.n	8006fee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fea:	2302      	movs	r3, #2
 8006fec:	e02d      	b.n	800704a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2224      	movs	r2, #36	; 0x24
 8006ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0201 	bic.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f812 	bl	8007054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007060:	2b00      	cmp	r3, #0
 8007062:	d108      	bne.n	8007076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007074:	e031      	b.n	80070da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007076:	2308      	movs	r3, #8
 8007078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800707a:	2308      	movs	r3, #8
 800707c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	0e5b      	lsrs	r3, r3, #25
 8007086:	b2db      	uxtb	r3, r3
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	0f5b      	lsrs	r3, r3, #29
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	7b3a      	ldrb	r2, [r7, #12]
 80070a2:	4911      	ldr	r1, [pc, #68]	; (80070e8 <UARTEx_SetNbDataToProcess+0x94>)
 80070a4:	5c8a      	ldrb	r2, [r1, r2]
 80070a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070aa:	7b3a      	ldrb	r2, [r7, #12]
 80070ac:	490f      	ldr	r1, [pc, #60]	; (80070ec <UARTEx_SetNbDataToProcess+0x98>)
 80070ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	7b7a      	ldrb	r2, [r7, #13]
 80070c0:	4909      	ldr	r1, [pc, #36]	; (80070e8 <UARTEx_SetNbDataToProcess+0x94>)
 80070c2:	5c8a      	ldrb	r2, [r1, r2]
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070c8:	7b7a      	ldrb	r2, [r7, #13]
 80070ca:	4908      	ldr	r1, [pc, #32]	; (80070ec <UARTEx_SetNbDataToProcess+0x98>)
 80070cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	08008ce0 	.word	0x08008ce0
 80070ec:	08008ce8 	.word	0x08008ce8

080070f0 <_print>:
void print_gameInput(game_input_t input);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _print() {
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, buf, 80, 0xFFFF);
 80070f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070f8:	2250      	movs	r2, #80	; 0x50
 80070fa:	4903      	ldr	r1, [pc, #12]	; (8007108 <_print+0x18>)
 80070fc:	4803      	ldr	r0, [pc, #12]	; (800710c <_print+0x1c>)
 80070fe:	f7fd fffb 	bl	80050f8 <HAL_UART_Transmit>
}
 8007102:	bf00      	nop
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000008 	.word	0x20000008
 800710c:	200002b0 	.word	0x200002b0

08007110 <clear>:

void clear() {
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
	sprintf(buf, empty);
 8007114:	4902      	ldr	r1, [pc, #8]	; (8007120 <clear+0x10>)
 8007116:	4803      	ldr	r0, [pc, #12]	; (8007124 <clear+0x14>)
 8007118:	f001 fa16 	bl	8008548 <siprintf>
//	_print();
}
 800711c:	bf00      	nop
 800711e:	bd80      	pop	{r7, pc}
 8007120:	08008cf0 	.word	0x08008cf0
 8007124:	20000008 	.word	0x20000008

08007128 <hello_world>:

void hello_world() {
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
	sprintf(buf, "Hello, World!");
 800712c:	4903      	ldr	r1, [pc, #12]	; (800713c <hello_world+0x14>)
 800712e:	4804      	ldr	r0, [pc, #16]	; (8007140 <hello_world+0x18>)
 8007130:	f001 fa0a 	bl	8008548 <siprintf>
	_print();
 8007134:	f7ff ffdc 	bl	80070f0 <_print>
}
 8007138:	bf00      	nop
 800713a:	bd80      	pop	{r7, pc}
 800713c:	08008c48 	.word	0x08008c48
 8007140:	20000008 	.word	0x20000008

08007144 <print_gameInput>:

void print_gameInput(game_input_t input) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	71fb      	strb	r3, [r7, #7]
	// here is where we handle input. RIght now this is just an inefficient nested switchcase
	clear();
 800714e:	f7ff ffdf 	bl	8007110 <clear>
//	sprintf(buf, input);
	//swap_buffer();
	switch (input) {
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	2b05      	cmp	r3, #5
 8007156:	d82c      	bhi.n	80071b2 <print_gameInput+0x6e>
 8007158:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <print_gameInput+0x1c>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	0800718d 	.word	0x0800718d
 8007164:	08007197 	.word	0x08007197
 8007168:	080071a1 	.word	0x080071a1
 800716c:	08007179 	.word	0x08007179
 8007170:	08007183 	.word	0x08007183
 8007174:	080071ab 	.word	0x080071ab
	case LEFT:
		sprintf(buf, "Input: Left");
 8007178:	4911      	ldr	r1, [pc, #68]	; (80071c0 <print_gameInput+0x7c>)
 800717a:	4812      	ldr	r0, [pc, #72]	; (80071c4 <print_gameInput+0x80>)
 800717c:	f001 f9e4 	bl	8008548 <siprintf>
		break;
 8007180:	e017      	b.n	80071b2 <print_gameInput+0x6e>
	case RIGHT:
		sprintf(buf, "Input: Right");
 8007182:	4911      	ldr	r1, [pc, #68]	; (80071c8 <print_gameInput+0x84>)
 8007184:	480f      	ldr	r0, [pc, #60]	; (80071c4 <print_gameInput+0x80>)
 8007186:	f001 f9df 	bl	8008548 <siprintf>
		break;
 800718a:	e012      	b.n	80071b2 <print_gameInput+0x6e>
	case DOWN:
		sprintf(buf, "Input: Down");
 800718c:	490f      	ldr	r1, [pc, #60]	; (80071cc <print_gameInput+0x88>)
 800718e:	480d      	ldr	r0, [pc, #52]	; (80071c4 <print_gameInput+0x80>)
 8007190:	f001 f9da 	bl	8008548 <siprintf>
		break;
 8007194:	e00d      	b.n	80071b2 <print_gameInput+0x6e>
	case CW:
		sprintf(buf, "Input: Clockwise");
 8007196:	490e      	ldr	r1, [pc, #56]	; (80071d0 <print_gameInput+0x8c>)
 8007198:	480a      	ldr	r0, [pc, #40]	; (80071c4 <print_gameInput+0x80>)
 800719a:	f001 f9d5 	bl	8008548 <siprintf>
		break;
 800719e:	e008      	b.n	80071b2 <print_gameInput+0x6e>
	case CCW:
		sprintf(buf, "Input: Counterclockwise");
 80071a0:	490c      	ldr	r1, [pc, #48]	; (80071d4 <print_gameInput+0x90>)
 80071a2:	4808      	ldr	r0, [pc, #32]	; (80071c4 <print_gameInput+0x80>)
 80071a4:	f001 f9d0 	bl	8008548 <siprintf>
		break;
 80071a8:	e003      	b.n	80071b2 <print_gameInput+0x6e>
	case TOGGLEPAUSE:
		sprintf(buf, "Input: Toggle Pause/Resume");
 80071aa:	490b      	ldr	r1, [pc, #44]	; (80071d8 <print_gameInput+0x94>)
 80071ac:	4805      	ldr	r0, [pc, #20]	; (80071c4 <print_gameInput+0x80>)
 80071ae:	f001 f9cb 	bl	8008548 <siprintf>

	}
	_print();
 80071b2:	f7ff ff9d 	bl	80070f0 <_print>
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	08008c58 	.word	0x08008c58
 80071c4:	20000008 	.word	0x20000008
 80071c8:	08008c64 	.word	0x08008c64
 80071cc:	08008c74 	.word	0x08008c74
 80071d0:	08008c80 	.word	0x08008c80
 80071d4:	08008c94 	.word	0x08008c94
 80071d8:	08008cac 	.word	0x08008cac
 80071dc:	00000000 	.word	0x00000000

080071e0 <init_buffer>:
			frame_buffer[i][j] = 10;
		}
	}
}
// Fill buffers with testing stuff
void init_buffer() {
 80071e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80071e4:	b08a      	sub	sp, #40	; 0x28
 80071e6:	af00      	add	r7, sp, #0
  // Allocate buffers
  // Continuous memory alloc
  uint8_t* tmp_buffer  = (uint8_t*) malloc(sizeof(uint8_t) * horiz_size * vert_size);
 80071e8:	f64a 7064 	movw	r0, #44900	; 0xaf64
 80071ec:	f001 f8e2 	bl	80083b4 <malloc>
 80071f0:	4603      	mov	r3, r0
 80071f2:	61fb      	str	r3, [r7, #28]
  uint8_t* tmp2_buffer = (uint8_t*) malloc(sizeof(uint8_t) * horiz_size * vert_size);
 80071f4:	f64a 7064 	movw	r0, #44900	; 0xaf64
 80071f8:	f001 f8dc 	bl	80083b4 <malloc>
 80071fc:	4603      	mov	r3, r0
 80071fe:	61bb      	str	r3, [r7, #24]
  frame_buffer = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8007200:	f240 7004 	movw	r0, #1796	; 0x704
 8007204:	f001 f8d6 	bl	80083b4 <malloc>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	4ba2      	ldr	r3, [pc, #648]	; (8007498 <init_buffer+0x2b8>)
 800720e:	601a      	str	r2, [r3, #0]
  true_buffer  = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8007210:	f240 7004 	movw	r0, #1796	; 0x704
 8007214:	f001 f8ce 	bl	80083b4 <malloc>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	4b9f      	ldr	r3, [pc, #636]	; (800749c <init_buffer+0x2bc>)
 800721e:	601a      	str	r2, [r3, #0]

  // Fill them with data, start with increasing grayscale (and decreasing for back)
  for(int i = 0; i < vert_size; i++) {
 8007220:	2300      	movs	r3, #0
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
 8007224:	e19b      	b.n	800755e <init_buffer+0x37e>
	  // Point to place in continuous mem location
	  frame_buffer[i] = tmp_buffer  + i*horiz_size;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	2264      	movs	r2, #100	; 0x64
 800722a:	fb02 f303 	mul.w	r3, r2, r3
 800722e:	4619      	mov	r1, r3
 8007230:	4b99      	ldr	r3, [pc, #612]	; (8007498 <init_buffer+0x2b8>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	440a      	add	r2, r1
 800723e:	601a      	str	r2, [r3, #0]
	  true_buffer[i] = tmp2_buffer  + i*horiz_size;
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	2264      	movs	r2, #100	; 0x64
 8007244:	fb02 f303 	mul.w	r3, r2, r3
 8007248:	4619      	mov	r1, r3
 800724a:	4b94      	ldr	r3, [pc, #592]	; (800749c <init_buffer+0x2bc>)
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	440a      	add	r2, r1
 8007258:	601a      	str	r2, [r3, #0]
	  for(int j = 0; j < horiz_size; j++) {
 800725a:	2300      	movs	r3, #0
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	e177      	b.n	8007550 <init_buffer+0x370>
		  // Back porch Horizontal || Front Porch Horizontal
//		  if (j < 6 || j >= 85) {
		  if (j < 3 || j >= 82) {
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	2b02      	cmp	r3, #2
 8007264:	dd02      	ble.n	800726c <init_buffer+0x8c>
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	2b51      	cmp	r3, #81	; 0x51
 800726a:	dd14      	ble.n	8007296 <init_buffer+0xb6>
			  frame_buffer[i][j] = (uint8_t) 0;
 800726c:	4b8a      	ldr	r3, [pc, #552]	; (8007498 <init_buffer+0x2b8>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	4413      	add	r3, r2
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
			  true_buffer[i][j] = (uint8_t) 0;
 8007280:	4b86      	ldr	r3, [pc, #536]	; (800749c <init_buffer+0x2bc>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	4413      	add	r3, r2
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e159      	b.n	800754a <init_buffer+0x36a>
		  }
		  // Back porch Vertical || Front Porch Vertical
		  else if (i < 60 || i >= 410) {
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	2b3b      	cmp	r3, #59	; 0x3b
 800729a:	dd03      	ble.n	80072a4 <init_buffer+0xc4>
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80072a2:	db0a      	blt.n	80072ba <init_buffer+0xda>
			  true_buffer[i][j] = (uint8_t) 0;
 80072a4:	4b7d      	ldr	r3, [pc, #500]	; (800749c <init_buffer+0x2bc>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	4413      	add	r3, r2
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	e147      	b.n	800754a <init_buffer+0x36a>
		  }
		  // Color based on x pos
		  else {
			  float y = 350-(i-60) - 175;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	f1c3 03eb 	rsb	r3, r3, #235	; 0xeb
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072c8:	edc7 7a05 	vstr	s15, [r7, #20]
			  float x = 4.48718*(j-3) - 175;
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	3b03      	subs	r3, #3
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7f9 fa61 	bl	8000798 <__aeabi_i2d>
 80072d6:	a36a      	add	r3, pc, #424	; (adr r3, 8007480 <init_buffer+0x2a0>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f8 ffe0 	bl	80002a0 <__aeabi_dmul>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4610      	mov	r0, r2
 80072e6:	4619      	mov	r1, r3
 80072e8:	a367      	add	r3, pc, #412	; (adr r3, 8007488 <init_buffer+0x2a8>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f9 f905 	bl	80004fc <__aeabi_dsub>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4610      	mov	r0, r2
 80072f8:	4619      	mov	r1, r3
 80072fa:	f7f9 faff 	bl	80008fc <__aeabi_d2f>
 80072fe:	4603      	mov	r3, r0
 8007300:	613b      	str	r3, [r7, #16]
			  float rad_head = x*x + y*y;
 8007302:	edd7 7a04 	vldr	s15, [r7, #16]
 8007306:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800730a:	edd7 7a05 	vldr	s15, [r7, #20]
 800730e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007316:	edc7 7a03 	vstr	s15, [r7, #12]
			  float rad_eyes = (abs(x)-70)*(abs(x)-70) + (y-30)*(y-30);
 800731a:	edd7 7a04 	vldr	s15, [r7, #16]
 800731e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007322:	ee17 3a90 	vmov	r3, s15
 8007326:	2b00      	cmp	r3, #0
 8007328:	bfb8      	it	lt
 800732a:	425b      	neglt	r3, r3
 800732c:	3b46      	subs	r3, #70	; 0x46
 800732e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	2a00      	cmp	r2, #0
 800733c:	bfb8      	it	lt
 800733e:	4252      	neglt	r2, r2
 8007340:	3a46      	subs	r2, #70	; 0x46
 8007342:	fb02 f303 	mul.w	r3, r2, r3
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800734e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007352:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8007356:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800735a:	edd7 7a05 	vldr	s15, [r7, #20]
 800735e:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 8007362:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800736a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800736e:	edc7 7a02 	vstr	s15, [r7, #8]
			  float quad_rad = abs((y+100)+0.01*x*x);
 8007372:	edd7 7a05 	vldr	s15, [r7, #20]
 8007376:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80074a0 <init_buffer+0x2c0>
 800737a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800737e:	ee17 0a90 	vmov	r0, s15
 8007382:	f7f9 fa1b 	bl	80007bc <__aeabi_f2d>
 8007386:	4604      	mov	r4, r0
 8007388:	460d      	mov	r5, r1
 800738a:	6938      	ldr	r0, [r7, #16]
 800738c:	f7f9 fa16 	bl	80007bc <__aeabi_f2d>
 8007390:	a33f      	add	r3, pc, #252	; (adr r3, 8007490 <init_buffer+0x2b0>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f8 ff83 	bl	80002a0 <__aeabi_dmul>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4690      	mov	r8, r2
 80073a0:	4699      	mov	r9, r3
 80073a2:	6938      	ldr	r0, [r7, #16]
 80073a4:	f7f9 fa0a 	bl	80007bc <__aeabi_f2d>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f7f8 ff76 	bl	80002a0 <__aeabi_dmul>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4620      	mov	r0, r4
 80073ba:	4629      	mov	r1, r5
 80073bc:	f7f9 f8a0 	bl	8000500 <__adddf3>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4610      	mov	r0, r2
 80073c6:	4619      	mov	r1, r3
 80073c8:	f7f9 fa50 	bl	800086c <__aeabi_d2iz>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bfb8      	it	lt
 80073d2:	425b      	neglt	r3, r3
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073dc:	edc7 7a01 	vstr	s15, [r7, #4]
			  if(rad_head > 150*150 && rad_head < 170*170) {
 80073e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80073e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80074a4 <init_buffer+0x2c4>
 80073e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	dd13      	ble.n	800741a <init_buffer+0x23a>
 80073f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80073f6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80074a8 <init_buffer+0x2c8>
 80073fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007402:	d50a      	bpl.n	800741a <init_buffer+0x23a>
				  true_buffer[i][j] = (uint8_t) 255;
 8007404:	4b25      	ldr	r3, [pc, #148]	; (800749c <init_buffer+0x2bc>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	4413      	add	r3, r2
 8007414:	22ff      	movs	r2, #255	; 0xff
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e056      	b.n	80074c8 <init_buffer+0x2e8>
			  } else if (rad_eyes < 20*20) {
 800741a:	edd7 7a02 	vldr	s15, [r7, #8]
 800741e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80074ac <init_buffer+0x2cc>
 8007422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742a:	d50a      	bpl.n	8007442 <init_buffer+0x262>
				  true_buffer[i][j] = (uint8_t) 255;
 800742c:	4b1b      	ldr	r3, [pc, #108]	; (800749c <init_buffer+0x2bc>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	4413      	add	r3, r2
 800743c:	22ff      	movs	r2, #255	; 0xff
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e042      	b.n	80074c8 <init_buffer+0x2e8>
			  } else if (quad_rad < 10 && y < -55) {
 8007442:	edd7 7a01 	vldr	s15, [r7, #4]
 8007446:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800744a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007452:	d52f      	bpl.n	80074b4 <init_buffer+0x2d4>
 8007454:	edd7 7a05 	vldr	s15, [r7, #20]
 8007458:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80074b0 <init_buffer+0x2d0>
 800745c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	d526      	bpl.n	80074b4 <init_buffer+0x2d4>
				  true_buffer[i][j] = (uint8_t) 255;
 8007466:	4b0d      	ldr	r3, [pc, #52]	; (800749c <init_buffer+0x2bc>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	4413      	add	r3, r2
 8007476:	22ff      	movs	r2, #255	; 0xff
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	e025      	b.n	80074c8 <init_buffer+0x2e8>
 800747c:	f3af 8000 	nop.w
 8007480:	505d0fa6 	.word	0x505d0fa6
 8007484:	4011f2df 	.word	0x4011f2df
 8007488:	00000000 	.word	0x00000000
 800748c:	4065e000 	.word	0x4065e000
 8007490:	47ae147b 	.word	0x47ae147b
 8007494:	3f847ae1 	.word	0x3f847ae1
 8007498:	2000038c 	.word	0x2000038c
 800749c:	200002ac 	.word	0x200002ac
 80074a0:	42c80000 	.word	0x42c80000
 80074a4:	46afc800 	.word	0x46afc800
 80074a8:	46e1c800 	.word	0x46e1c800
 80074ac:	43c80000 	.word	0x43c80000
 80074b0:	c25c0000 	.word	0xc25c0000
			  } else {
				  true_buffer[i][j] = (uint8_t) 0;
 80074b4:	4b32      	ldr	r3, [pc, #200]	; (8007580 <init_buffer+0x3a0>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	4413      	add	r3, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
			  }
			  frame_buffer[i][j] = (uint8_t) (2.8*(i%44)+12*(j%10));
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	4a2e      	ldr	r2, [pc, #184]	; (8007584 <init_buffer+0x3a4>)
 80074cc:	fb82 1203 	smull	r1, r2, r2, r3
 80074d0:	10d1      	asrs	r1, r2, #3
 80074d2:	17da      	asrs	r2, r3, #31
 80074d4:	1a8a      	subs	r2, r1, r2
 80074d6:	212c      	movs	r1, #44	; 0x2c
 80074d8:	fb01 f202 	mul.w	r2, r1, r2
 80074dc:	1a9a      	subs	r2, r3, r2
 80074de:	4610      	mov	r0, r2
 80074e0:	f7f9 f95a 	bl	8000798 <__aeabi_i2d>
 80074e4:	a324      	add	r3, pc, #144	; (adr r3, 8007578 <init_buffer+0x398>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 fed9 	bl	80002a0 <__aeabi_dmul>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4614      	mov	r4, r2
 80074f4:	461d      	mov	r5, r3
 80074f6:	6a39      	ldr	r1, [r7, #32]
 80074f8:	4b23      	ldr	r3, [pc, #140]	; (8007588 <init_buffer+0x3a8>)
 80074fa:	fb83 2301 	smull	r2, r3, r3, r1
 80074fe:	109a      	asrs	r2, r3, #2
 8007500:	17cb      	asrs	r3, r1, #31
 8007502:	1ad2      	subs	r2, r2, r3
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	1aca      	subs	r2, r1, r3
 800750e:	4613      	mov	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4618      	mov	r0, r3
 8007518:	f7f9 f93e 	bl	8000798 <__aeabi_i2d>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4620      	mov	r0, r4
 8007522:	4629      	mov	r1, r5
 8007524:	f7f8 ffec 	bl	8000500 <__adddf3>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4610      	mov	r0, r2
 800752e:	4619      	mov	r1, r3
 8007530:	4b16      	ldr	r3, [pc, #88]	; (800758c <init_buffer+0x3ac>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	18d4      	adds	r4, r2, r3
 8007540:	f7f9 f9bc 	bl	80008bc <__aeabi_d2uiz>
 8007544:	4603      	mov	r3, r0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	7023      	strb	r3, [r4, #0]
	  for(int j = 0; j < horiz_size; j++) {
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	3301      	adds	r3, #1
 800754e:	623b      	str	r3, [r7, #32]
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	2b63      	cmp	r3, #99	; 0x63
 8007554:	f77f ae84 	ble.w	8007260 <init_buffer+0x80>
  for(int i = 0; i < vert_size; i++) {
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	3301      	adds	r3, #1
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8007564:	f77f ae5f 	ble.w	8007226 <init_buffer+0x46>
		  }


	  }
  }
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	3728      	adds	r7, #40	; 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007574:	f3af 8000 	nop.w
 8007578:	66666666 	.word	0x66666666
 800757c:	40066666 	.word	0x40066666
 8007580:	200002ac 	.word	0x200002ac
 8007584:	2e8ba2e9 	.word	0x2e8ba2e9
 8007588:	66666667 	.word	0x66666667
 800758c:	2000038c 	.word	0x2000038c

08007590 <swap_buffer>:



void swap_buffer() {
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
	// Swap pointers
	uint8_t** tmp = true_buffer;
 8007596:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <swap_buffer+0x34>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	607b      	str	r3, [r7, #4]
	true_buffer = frame_buffer;
 800759c:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <swap_buffer+0x38>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <swap_buffer+0x34>)
 80075a2:	6013      	str	r3, [r2, #0]
	frame_buffer = tmp;
 80075a4:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <swap_buffer+0x38>)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6013      	str	r3, [r2, #0]
	//clear_buffer();
	// Change DMA memory address
	hdac1.DMA_Handle1->Instance->CMAR = (uint32_t) true_buffer[0];
 80075aa:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <swap_buffer+0x34>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <swap_buffer+0x3c>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60da      	str	r2, [r3, #12]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	200002ac 	.word	0x200002ac
 80075c8:	2000038c 	.word	0x2000038c
 80075cc:	200001ec 	.word	0x200001ec

080075d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80075d6:	f7f9 fb5d 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075da:	f000 f83d 	bl	8007658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075de:	f000 fb11 	bl	8007c04 <MX_GPIO_Init>
  MX_DMA_Init();
 80075e2:	f000 fadd 	bl	8007ba0 <MX_DMA_Init>
  MX_DAC1_Init();
 80075e6:	f000 f889 	bl	80076fc <MX_DAC1_Init>

  MX_TIM4_Init();
 80075ea:	f000 f9eb 	bl	80079c4 <MX_TIM4_Init>
  MX_TIM2_Init();
 80075ee:	f000 f91d 	bl	800782c <MX_TIM2_Init>
  MX_TIM1_Init();
 80075f2:	f000 f8c3 	bl	800777c <MX_TIM1_Init>
  MX_TIM3_Init();
 80075f6:	f000 f995 	bl	8007924 <MX_TIM3_Init>
  MX_TIM8_Init();
 80075fa:	f000 fa31 	bl	8007a60 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80075fe:	f000 fa83 	bl	8007b08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Fill the frame buffer
  init_buffer();
 8007602:	f7ff fded 	bl	80071e0 <init_buffer>
  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 8007606:	480d      	ldr	r0, [pc, #52]	; (800763c <main+0x6c>)
 8007608:	f7fc fa7e 	bl	8003b08 <HAL_TIM_Base_Start_IT>
  //HAL_Delay(50);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 800760c:	210c      	movs	r1, #12
 800760e:	480c      	ldr	r0, [pc, #48]	; (8007640 <main+0x70>)
 8007610:	f7fc fb4c 	bl	8003cac <HAL_TIM_PWM_Start>
  //HAL_Delay(50);
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) true_buffer[0], horiz_size*vert_size, DAC_ALIGN_8B_R);
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <main+0x74>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	2308      	movs	r3, #8
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	f64a 7364 	movw	r3, #44900	; 0xaf64
 8007622:	2100      	movs	r1, #0
 8007624:	4808      	ldr	r0, [pc, #32]	; (8007648 <main+0x78>)
 8007626:	f7f9 fd01 	bl	800102c <HAL_DAC_Start_DMA>
  //HAL_Delay(50);
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 800762a:	4808      	ldr	r0, [pc, #32]	; (800764c <main+0x7c>)
 800762c:	f7fc fa04 	bl	8003a38 <HAL_TIM_Base_Start>

  HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 8007630:	2201      	movs	r2, #1
 8007632:	4907      	ldr	r1, [pc, #28]	; (8007650 <main+0x80>)
 8007634:	4807      	ldr	r0, [pc, #28]	; (8007654 <main+0x84>)
 8007636:	f7fd fdf7 	bl	8005228 <HAL_UART_Receive_IT>
  //clear_buffer();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800763a:	e7fe      	b.n	800763a <main+0x6a>
 800763c:	20000340 	.word	0x20000340
 8007640:	20000390 	.word	0x20000390
 8007644:	200002ac 	.word	0x200002ac
 8007648:	200001ec 	.word	0x200001ec
 800764c:	200001a0 	.word	0x200001a0
 8007650:	20000058 	.word	0x20000058
 8007654:	200002b0 	.word	0x200002b0

08007658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b096      	sub	sp, #88	; 0x58
 800765c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800765e:	f107 0314 	add.w	r3, r7, #20
 8007662:	2244      	movs	r2, #68	; 0x44
 8007664:	2100      	movs	r1, #0
 8007666:	4618      	mov	r0, r3
 8007668:	f000 feac 	bl	80083c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800766c:	463b      	mov	r3, r7
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	605a      	str	r2, [r3, #4]
 8007674:	609a      	str	r2, [r3, #8]
 8007676:	60da      	str	r2, [r3, #12]
 8007678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800767a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800767e:	f7fa fcef 	bl	8002060 <HAL_PWREx_ControlVoltageScaling>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8007688:	f000 fbae 	bl	8007de8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800768c:	2310      	movs	r3, #16
 800768e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007690:	2301      	movs	r3, #1
 8007692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007698:	2360      	movs	r3, #96	; 0x60
 800769a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800769c:	2302      	movs	r3, #2
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80076a0:	2301      	movs	r3, #1
 80076a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80076a4:	2301      	movs	r3, #1
 80076a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80076a8:	2328      	movs	r3, #40	; 0x28
 80076aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80076ac:	2302      	movs	r3, #2
 80076ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80076b0:	2302      	movs	r3, #2
 80076b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80076b4:	2302      	movs	r3, #2
 80076b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076b8:	f107 0314 	add.w	r3, r7, #20
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fa fd73 	bl	80021a8 <HAL_RCC_OscConfig>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80076c8:	f000 fb8e 	bl	8007de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076cc:	230f      	movs	r3, #15
 80076ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076d0:	2303      	movs	r3, #3
 80076d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076dc:	2300      	movs	r3, #0
 80076de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80076e0:	463b      	mov	r3, r7
 80076e2:	2103      	movs	r1, #3
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fb f985 	bl	80029f4 <HAL_RCC_ClockConfig>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80076f0:	f000 fb7a 	bl	8007de8 <Error_Handler>
  }
}
 80076f4:	bf00      	nop
 80076f6:	3758      	adds	r7, #88	; 0x58
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8007702:	463b      	mov	r3, r7
 8007704:	2228      	movs	r2, #40	; 0x28
 8007706:	2100      	movs	r1, #0
 8007708:	4618      	mov	r0, r3
 800770a:	f000 fe5b 	bl	80083c4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800770e:	4b19      	ldr	r3, [pc, #100]	; (8007774 <MX_DAC1_Init+0x78>)
 8007710:	4a19      	ldr	r2, [pc, #100]	; (8007778 <MX_DAC1_Init+0x7c>)
 8007712:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007714:	4817      	ldr	r0, [pc, #92]	; (8007774 <MX_DAC1_Init+0x78>)
 8007716:	f7f9 fc66 	bl	8000fe6 <HAL_DAC_Init>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007720:	f000 fb62 	bl	8007de8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007724:	2300      	movs	r3, #0
 8007726:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8007728:	230e      	movs	r3, #14
 800772a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800772c:	2300      	movs	r3, #0
 800772e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007738:	2300      	movs	r3, #0
 800773a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800773c:	463b      	mov	r3, r7
 800773e:	2200      	movs	r2, #0
 8007740:	4619      	mov	r1, r3
 8007742:	480c      	ldr	r0, [pc, #48]	; (8007774 <MX_DAC1_Init+0x78>)
 8007744:	f7f9 fdc0 	bl	80012c8 <HAL_DAC_ConfigChannel>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800774e:	f000 fb4b 	bl	8007de8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8007752:	231e      	movs	r3, #30
 8007754:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007756:	463b      	mov	r3, r7
 8007758:	2210      	movs	r2, #16
 800775a:	4619      	mov	r1, r3
 800775c:	4805      	ldr	r0, [pc, #20]	; (8007774 <MX_DAC1_Init+0x78>)
 800775e:	f7f9 fdb3 	bl	80012c8 <HAL_DAC_ConfigChannel>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8007768:	f000 fb3e 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 800776c:	bf00      	nop
 800776e:	3728      	adds	r7, #40	; 0x28
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	200001ec 	.word	0x200001ec
 8007778:	40007400 	.word	0x40007400

0800777c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007782:	f107 030c 	add.w	r3, r7, #12
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	605a      	str	r2, [r3, #4]
 800778c:	609a      	str	r2, [r3, #8]
 800778e:	60da      	str	r2, [r3, #12]
 8007790:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007792:	463b      	mov	r3, r7
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800779c:	4b21      	ldr	r3, [pc, #132]	; (8007824 <MX_TIM1_Init+0xa8>)
 800779e:	4a22      	ldr	r2, [pc, #136]	; (8007828 <MX_TIM1_Init+0xac>)
 80077a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80077a2:	4b20      	ldr	r3, [pc, #128]	; (8007824 <MX_TIM1_Init+0xa8>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077a8:	4b1e      	ldr	r3, [pc, #120]	; (8007824 <MX_TIM1_Init+0xa8>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80077ae:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <MX_TIM1_Init+0xa8>)
 80077b0:	2263      	movs	r2, #99	; 0x63
 80077b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077b4:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <MX_TIM1_Init+0xa8>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80077ba:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <MX_TIM1_Init+0xa8>)
 80077bc:	2200      	movs	r2, #0
 80077be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077c0:	4b18      	ldr	r3, [pc, #96]	; (8007824 <MX_TIM1_Init+0xa8>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80077c6:	4817      	ldr	r0, [pc, #92]	; (8007824 <MX_TIM1_Init+0xa8>)
 80077c8:	f7fc f8de 	bl	8003988 <HAL_TIM_Base_Init>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80077d2:	f000 fb09 	bl	8007de8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80077d6:	2306      	movs	r3, #6
 80077d8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80077da:	2330      	movs	r3, #48	; 0x30
 80077dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80077de:	f107 030c 	add.w	r3, r7, #12
 80077e2:	4619      	mov	r1, r3
 80077e4:	480f      	ldr	r0, [pc, #60]	; (8007824 <MX_TIM1_Init+0xa8>)
 80077e6:	f7fc fe64 	bl	80044b2 <HAL_TIM_SlaveConfigSynchro>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80077f0:	f000 fafa 	bl	8007de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80077f4:	2320      	movs	r3, #32
 80077f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80077f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80077fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007802:	463b      	mov	r3, r7
 8007804:	4619      	mov	r1, r3
 8007806:	4807      	ldr	r0, [pc, #28]	; (8007824 <MX_TIM1_Init+0xa8>)
 8007808:	f7fd fb80 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8007812:	f000 fae9 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 8007816:	4b04      	ldr	r3, [pc, #16]	; (8007828 <MX_TIM1_Init+0xac>)
 8007818:	2237      	movs	r2, #55	; 0x37
 800781a:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM1_Init 2 */

}
 800781c:	bf00      	nop
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000340 	.word	0x20000340
 8007828:	40012c00 	.word	0x40012c00

0800782c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b090      	sub	sp, #64	; 0x40
 8007830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	605a      	str	r2, [r3, #4]
 800783c:	609a      	str	r2, [r3, #8]
 800783e:	60da      	str	r2, [r3, #12]
 8007840:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007842:	f107 0320 	add.w	r3, r7, #32
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	605a      	str	r2, [r3, #4]
 800784c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800784e:	1d3b      	adds	r3, r7, #4
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	605a      	str	r2, [r3, #4]
 8007856:	609a      	str	r2, [r3, #8]
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	611a      	str	r2, [r3, #16]
 800785c:	615a      	str	r2, [r3, #20]
 800785e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007860:	4b2f      	ldr	r3, [pc, #188]	; (8007920 <MX_TIM2_Init+0xf4>)
 8007862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007868:	4b2d      	ldr	r3, [pc, #180]	; (8007920 <MX_TIM2_Init+0xf4>)
 800786a:	2200      	movs	r2, #0
 800786c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800786e:	4b2c      	ldr	r3, [pc, #176]	; (8007920 <MX_TIM2_Init+0xf4>)
 8007870:	2200      	movs	r2, #0
 8007872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8007874:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <MX_TIM2_Init+0xf4>)
 8007876:	2263      	movs	r2, #99	; 0x63
 8007878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800787a:	4b29      	ldr	r3, [pc, #164]	; (8007920 <MX_TIM2_Init+0xf4>)
 800787c:	2200      	movs	r2, #0
 800787e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007880:	4b27      	ldr	r3, [pc, #156]	; (8007920 <MX_TIM2_Init+0xf4>)
 8007882:	2200      	movs	r2, #0
 8007884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007886:	4826      	ldr	r0, [pc, #152]	; (8007920 <MX_TIM2_Init+0xf4>)
 8007888:	f7fc f87e 	bl	8003988 <HAL_TIM_Base_Init>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8007892:	f000 faa9 	bl	8007de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007896:	4822      	ldr	r0, [pc, #136]	; (8007920 <MX_TIM2_Init+0xf4>)
 8007898:	f7fc f9a6 	bl	8003be8 <HAL_TIM_PWM_Init>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80078a2:	f000 faa1 	bl	8007de8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80078a6:	2306      	movs	r3, #6
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80078aa:	2330      	movs	r3, #48	; 0x30
 80078ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80078ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078b2:	4619      	mov	r1, r3
 80078b4:	481a      	ldr	r0, [pc, #104]	; (8007920 <MX_TIM2_Init+0xf4>)
 80078b6:	f7fc fdfc 	bl	80044b2 <HAL_TIM_SlaveConfigSynchro>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80078c0:	f000 fa92 	bl	8007de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80078c4:	2320      	movs	r3, #32
 80078c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078c8:	2300      	movs	r3, #0
 80078ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80078cc:	f107 0320 	add.w	r3, r7, #32
 80078d0:	4619      	mov	r1, r3
 80078d2:	4813      	ldr	r0, [pc, #76]	; (8007920 <MX_TIM2_Init+0xf4>)
 80078d4:	f7fd fb1a 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80078de:	f000 fa83 	bl	8007de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80078e2:	2360      	movs	r3, #96	; 0x60
 80078e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 80078e6:	235a      	movs	r3, #90	; 0x5a
 80078e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80078f2:	1d3b      	adds	r3, r7, #4
 80078f4:	220c      	movs	r2, #12
 80078f6:	4619      	mov	r1, r3
 80078f8:	4809      	ldr	r0, [pc, #36]	; (8007920 <MX_TIM2_Init+0xf4>)
 80078fa:	f7fc fbfd 	bl	80040f8 <HAL_TIM_PWM_ConfigChannel>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8007904:	f000 fa70 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 8007908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800790c:	2237      	movs	r2, #55	; 0x37
 800790e:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007910:	4803      	ldr	r0, [pc, #12]	; (8007920 <MX_TIM2_Init+0xf4>)
 8007912:	f000 fbb3 	bl	800807c <HAL_TIM_MspPostInit>

}
 8007916:	bf00      	nop
 8007918:	3740      	adds	r7, #64	; 0x40
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000390 	.word	0x20000390

08007924 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800792a:	f107 0310 	add.w	r3, r7, #16
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	605a      	str	r2, [r3, #4]
 8007934:	609a      	str	r2, [r3, #8]
 8007936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007938:	1d3b      	adds	r3, r7, #4
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	605a      	str	r2, [r3, #4]
 8007940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007942:	4b1e      	ldr	r3, [pc, #120]	; (80079bc <MX_TIM3_Init+0x98>)
 8007944:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <MX_TIM3_Init+0x9c>)
 8007946:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8007948:	4b1c      	ldr	r3, [pc, #112]	; (80079bc <MX_TIM3_Init+0x98>)
 800794a:	f242 720f 	movw	r2, #9999	; 0x270f
 800794e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007950:	4b1a      	ldr	r3, [pc, #104]	; (80079bc <MX_TIM3_Init+0x98>)
 8007952:	2200      	movs	r2, #0
 8007954:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25400;
 8007956:	4b19      	ldr	r3, [pc, #100]	; (80079bc <MX_TIM3_Init+0x98>)
 8007958:	f246 3238 	movw	r2, #25400	; 0x6338
 800795c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800795e:	4b17      	ldr	r3, [pc, #92]	; (80079bc <MX_TIM3_Init+0x98>)
 8007960:	2200      	movs	r2, #0
 8007962:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007964:	4b15      	ldr	r3, [pc, #84]	; (80079bc <MX_TIM3_Init+0x98>)
 8007966:	2200      	movs	r2, #0
 8007968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800796a:	4814      	ldr	r0, [pc, #80]	; (80079bc <MX_TIM3_Init+0x98>)
 800796c:	f7fc f80c 	bl	8003988 <HAL_TIM_Base_Init>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8007976:	f000 fa37 	bl	8007de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800797a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800797e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007980:	f107 0310 	add.w	r3, r7, #16
 8007984:	4619      	mov	r1, r3
 8007986:	480d      	ldr	r0, [pc, #52]	; (80079bc <MX_TIM3_Init+0x98>)
 8007988:	f7fc fcca 	bl	8004320 <HAL_TIM_ConfigClockSource>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8007992:	f000 fa29 	bl	8007de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007996:	2300      	movs	r3, #0
 8007998:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800799e:	1d3b      	adds	r3, r7, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4806      	ldr	r0, [pc, #24]	; (80079bc <MX_TIM3_Init+0x98>)
 80079a4:	f7fd fab2 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80079ae:	f000 fa1b 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80079b2:	bf00      	nop
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000260 	.word	0x20000260
 80079c0:	40000400 	.word	0x40000400

080079c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80079ca:	f107 0310 	add.w	r3, r7, #16
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	605a      	str	r2, [r3, #4]
 80079d4:	609a      	str	r2, [r3, #8]
 80079d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079d8:	1d3b      	adds	r3, r7, #4
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	605a      	str	r2, [r3, #4]
 80079e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <MX_TIM4_Init+0x94>)
 80079e4:	4a1d      	ldr	r2, [pc, #116]	; (8007a5c <MX_TIM4_Init+0x98>)
 80079e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 80079e8:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <MX_TIM4_Init+0x94>)
 80079ea:	2207      	movs	r2, #7
 80079ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079ee:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <MX_TIM4_Init+0x94>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 80079f4:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <MX_TIM4_Init+0x94>)
 80079f6:	2202      	movs	r2, #2
 80079f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079fa:	4b17      	ldr	r3, [pc, #92]	; (8007a58 <MX_TIM4_Init+0x94>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a00:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <MX_TIM4_Init+0x94>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007a06:	4814      	ldr	r0, [pc, #80]	; (8007a58 <MX_TIM4_Init+0x94>)
 8007a08:	f7fb ffbe 	bl	8003988 <HAL_TIM_Base_Init>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8007a12:	f000 f9e9 	bl	8007de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	4619      	mov	r1, r3
 8007a22:	480d      	ldr	r0, [pc, #52]	; (8007a58 <MX_TIM4_Init+0x94>)
 8007a24:	f7fc fc7c 	bl	8004320 <HAL_TIM_ConfigClockSource>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8007a2e:	f000 f9db 	bl	8007de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007a32:	2320      	movs	r3, #32
 8007a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007a3a:	1d3b      	adds	r3, r7, #4
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4806      	ldr	r0, [pc, #24]	; (8007a58 <MX_TIM4_Init+0x94>)
 8007a40:	f7fd fa64 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8007a4a:	f000 f9cd 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007a4e:	bf00      	nop
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200001a0 	.word	0x200001a0
 8007a5c:	40000800 	.word	0x40000800

08007a60 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a66:	f107 0310 	add.w	r3, r7, #16
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	605a      	str	r2, [r3, #4]
 8007a70:	609a      	str	r2, [r3, #8]
 8007a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a74:	1d3b      	adds	r3, r7, #4
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	605a      	str	r2, [r3, #4]
 8007a7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007a7e:	4b20      	ldr	r3, [pc, #128]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007a80:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <MX_TIM8_Init+0xa4>)
 8007a82:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007a84:	4b1e      	ldr	r3, [pc, #120]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8007a90:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007a92:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a96:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a98:	4b19      	ldr	r3, [pc, #100]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007a9e:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007aa4:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007aaa:	4815      	ldr	r0, [pc, #84]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007aac:	f7fb ff6c 	bl	8003988 <HAL_TIM_Base_Init>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8007ab6:	f000 f997 	bl	8007de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007ac0:	f107 0310 	add.w	r3, r7, #16
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	480e      	ldr	r0, [pc, #56]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007ac8:	f7fc fc2a 	bl	8004320 <HAL_TIM_ConfigClockSource>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8007ad2:	f000 f989 	bl	8007de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007ad6:	2320      	movs	r3, #32
 8007ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8007ada:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ade:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007ae4:	1d3b      	adds	r3, r7, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4805      	ldr	r0, [pc, #20]	; (8007b00 <MX_TIM8_Init+0xa0>)
 8007aea:	f7fd fa0f 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8007af4:	f000 f978 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007af8:	bf00      	nop
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	200000f4 	.word	0x200000f4
 8007b04:	40013400 	.word	0x40013400

08007b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007b0c:	4b22      	ldr	r3, [pc, #136]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b0e:	4a23      	ldr	r2, [pc, #140]	; (8007b9c <MX_USART1_UART_Init+0x94>)
 8007b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007b12:	4b21      	ldr	r3, [pc, #132]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007b1a:	4b1f      	ldr	r3, [pc, #124]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007b20:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007b26:	4b1c      	ldr	r3, [pc, #112]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007b2c:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b2e:	220c      	movs	r2, #12
 8007b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b32:	4b19      	ldr	r3, [pc, #100]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b38:	4b17      	ldr	r3, [pc, #92]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007b3e:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007b44:	4b14      	ldr	r3, [pc, #80]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007b4a:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007b50:	4811      	ldr	r0, [pc, #68]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b52:	f7fd fa81 	bl	8005058 <HAL_UART_Init>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007b5c:	f000 f944 	bl	8007de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007b60:	2100      	movs	r1, #0
 8007b62:	480d      	ldr	r0, [pc, #52]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b64:	f7ff f9f9 	bl	8006f5a <HAL_UARTEx_SetTxFifoThreshold>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007b6e:	f000 f93b 	bl	8007de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007b72:	2100      	movs	r1, #0
 8007b74:	4808      	ldr	r0, [pc, #32]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b76:	f7ff fa2e 	bl	8006fd6 <HAL_UARTEx_SetRxFifoThreshold>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007b80:	f000 f932 	bl	8007de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007b84:	4804      	ldr	r0, [pc, #16]	; (8007b98 <MX_USART1_UART_Init+0x90>)
 8007b86:	f7ff f9af 	bl	8006ee8 <HAL_UARTEx_DisableFifoMode>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007b90:	f000 f92a 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007b94:	bf00      	nop
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	200002b0 	.word	0x200002b0
 8007b9c:	40013800 	.word	0x40013800

08007ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <MX_DMA_Init+0x60>)
 8007ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007baa:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <MX_DMA_Init+0x60>)
 8007bac:	f043 0304 	orr.w	r3, r3, #4
 8007bb0:	6493      	str	r3, [r2, #72]	; 0x48
 8007bb2:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <MX_DMA_Init+0x60>)
 8007bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	607b      	str	r3, [r7, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007bbe:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <MX_DMA_Init+0x60>)
 8007bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc2:	4a0f      	ldr	r2, [pc, #60]	; (8007c00 <MX_DMA_Init+0x60>)
 8007bc4:	f043 0301 	orr.w	r3, r3, #1
 8007bc8:	6493      	str	r3, [r2, #72]	; 0x48
 8007bca:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <MX_DMA_Init+0x60>)
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2100      	movs	r1, #0
 8007bda:	200b      	movs	r0, #11
 8007bdc:	f7f9 f9cd 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007be0:	200b      	movs	r0, #11
 8007be2:	f7f9 f9e6 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007be6:	2200      	movs	r2, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	200c      	movs	r0, #12
 8007bec:	f7f9 f9c5 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007bf0:	200c      	movs	r0, #12
 8007bf2:	f7f9 f9de 	bl	8000fb2 <HAL_NVIC_EnableIRQ>

}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40021000 	.word	0x40021000

08007c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c0a:	f107 030c 	add.w	r3, r7, #12
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	605a      	str	r2, [r3, #4]
 8007c14:	609a      	str	r2, [r3, #8]
 8007c16:	60da      	str	r2, [r3, #12]
 8007c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c1a:	4b24      	ldr	r3, [pc, #144]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c1e:	4a23      	ldr	r2, [pc, #140]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c20:	f043 0304 	orr.w	r3, r3, #4
 8007c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c26:	4b21      	ldr	r3, [pc, #132]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	60bb      	str	r3, [r7, #8]
 8007c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c32:	4b1e      	ldr	r3, [pc, #120]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c36:	4a1d      	ldr	r2, [pc, #116]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c38:	f043 0301 	orr.w	r3, r3, #1
 8007c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c3e:	4b1b      	ldr	r3, [pc, #108]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	607b      	str	r3, [r7, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c4a:	4b18      	ldr	r3, [pc, #96]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4e:	4a17      	ldr	r2, [pc, #92]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c50:	f043 0302 	orr.w	r3, r3, #2
 8007c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c56:	4b15      	ldr	r3, [pc, #84]	; (8007cac <MX_GPIO_Init+0xa8>)
 8007c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 8007c62:	2200      	movs	r2, #0
 8007c64:	2104      	movs	r1, #4
 8007c66:	4812      	ldr	r0, [pc, #72]	; (8007cb0 <MX_GPIO_Init+0xac>)
 8007c68:	f7fa f9c2 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 8007c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007c72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 8007c7c:	f107 030c 	add.w	r3, r7, #12
 8007c80:	4619      	mov	r1, r3
 8007c82:	480c      	ldr	r0, [pc, #48]	; (8007cb4 <MX_GPIO_Init+0xb0>)
 8007c84:	f7fa f822 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 8007c88:	2304      	movs	r3, #4
 8007c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c94:	2300      	movs	r3, #0
 8007c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4804      	ldr	r0, [pc, #16]	; (8007cb0 <MX_GPIO_Init+0xac>)
 8007ca0:	f7fa f814 	bl	8001ccc <HAL_GPIO_Init>

}
 8007ca4:	bf00      	nop
 8007ca6:	3720      	adds	r7, #32
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40021000 	.word	0x40021000
 8007cb0:	48000400 	.word	0x48000400
 8007cb4:	48000800 	.word	0x48000800

08007cb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
//	if (htim->Instance == TIM1) {
		vert_count = (vert_count + 1) % 449;
 8007cc0:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	1c59      	adds	r1, r3, #1
 8007cc6:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8007cc8:	fb83 2301 	smull	r2, r3, r3, r1
 8007ccc:	440b      	add	r3, r1
 8007cce:	121a      	asrs	r2, r3, #8
 8007cd0:	17cb      	asrs	r3, r1, #31
 8007cd2:	1ad2      	subs	r2, r2, r3
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	019b      	lsls	r3, r3, #6
 8007cdc:	4413      	add	r3, r2
 8007cde:	1aca      	subs	r2, r1, r3
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007ce2:	601a      	str	r2, [r3, #0]
		if(vert_count >= 447) {
 8007ce4:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 8007cec:	dd05      	ble.n	8007cfa <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2104      	movs	r1, #4
 8007cf2:	4808      	ldr	r0, [pc, #32]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8007cf4:	f7fa f97c 	bl	8001ff0 <HAL_GPIO_WritePin>
		} else {
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
		}
//	}
}
 8007cf8:	e004      	b.n	8007d04 <HAL_TIM_PeriodElapsedCallback+0x4c>
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	2104      	movs	r1, #4
 8007cfe:	4805      	ldr	r0, [pc, #20]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8007d00:	f7fa f976 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200000e0 	.word	0x200000e0
 8007d10:	91f5bcb9 	.word	0x91f5bcb9
 8007d14:	48000400 	.word	0x48000400

08007d18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
//	print_inbuf();
	char c = ((huart)->Instance)->RDR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	73fb      	strb	r3, [r7, #15]
	swap_buffer();
 8007d2a:	f7ff fc31 	bl	8007590 <swap_buffer>
	switch (c) {
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b73      	cmp	r3, #115	; 0x73
 8007d32:	dc4a      	bgt.n	8007dca <HAL_UART_RxCpltCallback+0xb2>
 8007d34:	2b61      	cmp	r3, #97	; 0x61
 8007d36:	da04      	bge.n	8007d42 <HAL_UART_RxCpltCallback+0x2a>
 8007d38:	2b35      	cmp	r3, #53	; 0x35
 8007d3a:	d02f      	beq.n	8007d9c <HAL_UART_RxCpltCallback+0x84>
 8007d3c:	2b3b      	cmp	r3, #59	; 0x3b
 8007d3e:	d03c      	beq.n	8007dba <HAL_UART_RxCpltCallback+0xa2>
		print_gameInput(DOWN);
		break;
	case 32: // space
		//togglePause();
	default:
		break;
 8007d40:	e043      	b.n	8007dca <HAL_UART_RxCpltCallback+0xb2>
 8007d42:	3b61      	subs	r3, #97	; 0x61
 8007d44:	2b12      	cmp	r3, #18
 8007d46:	d840      	bhi.n	8007dca <HAL_UART_RxCpltCallback+0xb2>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <HAL_UART_RxCpltCallback+0x38>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007da3 	.word	0x08007da3
 8007d54:	08007dcb 	.word	0x08007dcb
 8007d58:	08007dcb 	.word	0x08007dcb
 8007d5c:	08007dab 	.word	0x08007dab
 8007d60:	08007dcb 	.word	0x08007dcb
 8007d64:	08007dcb 	.word	0x08007dcb
 8007d68:	08007dcb 	.word	0x08007dcb
 8007d6c:	08007dcb 	.word	0x08007dcb
 8007d70:	08007dcb 	.word	0x08007dcb
 8007d74:	08007dcb 	.word	0x08007dcb
 8007d78:	08007db3 	.word	0x08007db3
 8007d7c:	08007dcb 	.word	0x08007dcb
 8007d80:	08007dcb 	.word	0x08007dcb
 8007d84:	08007dcb 	.word	0x08007dcb
 8007d88:	08007dcb 	.word	0x08007dcb
 8007d8c:	08007dcb 	.word	0x08007dcb
 8007d90:	08007dcb 	.word	0x08007dcb
 8007d94:	08007dcb 	.word	0x08007dcb
 8007d98:	08007dc3 	.word	0x08007dc3
		hello_world();
 8007d9c:	f7ff f9c4 	bl	8007128 <hello_world>
		break;
 8007da0:	e014      	b.n	8007dcc <HAL_UART_RxCpltCallback+0xb4>
		print_gameInput(LEFT);
 8007da2:	2003      	movs	r0, #3
 8007da4:	f7ff f9ce 	bl	8007144 <print_gameInput>
		break;
 8007da8:	e010      	b.n	8007dcc <HAL_UART_RxCpltCallback+0xb4>
		print_gameInput(RIGHT);
 8007daa:	2004      	movs	r0, #4
 8007dac:	f7ff f9ca 	bl	8007144 <print_gameInput>
		break;
 8007db0:	e00c      	b.n	8007dcc <HAL_UART_RxCpltCallback+0xb4>
		print_gameInput(CCW);
 8007db2:	2002      	movs	r0, #2
 8007db4:	f7ff f9c6 	bl	8007144 <print_gameInput>
		break;
 8007db8:	e008      	b.n	8007dcc <HAL_UART_RxCpltCallback+0xb4>
		print_gameInput(CW);
 8007dba:	2001      	movs	r0, #1
 8007dbc:	f7ff f9c2 	bl	8007144 <print_gameInput>
		break;
 8007dc0:	e004      	b.n	8007dcc <HAL_UART_RxCpltCallback+0xb4>
		print_gameInput(DOWN);
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	f7ff f9be 	bl	8007144 <print_gameInput>
		break;
 8007dc8:	e000      	b.n	8007dcc <HAL_UART_RxCpltCallback+0xb4>
		break;
 8007dca:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 8007dcc:	2201      	movs	r2, #1
 8007dce:	4904      	ldr	r1, [pc, #16]	; (8007de0 <HAL_UART_RxCpltCallback+0xc8>)
 8007dd0:	4804      	ldr	r0, [pc, #16]	; (8007de4 <HAL_UART_RxCpltCallback+0xcc>)
 8007dd2:	f7fd fa29 	bl	8005228 <HAL_UART_Receive_IT>
}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000058 	.word	0x20000058
 8007de4:	200002b0 	.word	0x200002b0

08007de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007dec:	b672      	cpsid	i
}
 8007dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007df0:	e7fe      	b.n	8007df0 <Error_Handler+0x8>
	...

08007df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dfa:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <HAL_MspInit+0x44>)
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	4a0e      	ldr	r2, [pc, #56]	; (8007e38 <HAL_MspInit+0x44>)
 8007e00:	f043 0301 	orr.w	r3, r3, #1
 8007e04:	6613      	str	r3, [r2, #96]	; 0x60
 8007e06:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <HAL_MspInit+0x44>)
 8007e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	607b      	str	r3, [r7, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <HAL_MspInit+0x44>)
 8007e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e16:	4a08      	ldr	r2, [pc, #32]	; (8007e38 <HAL_MspInit+0x44>)
 8007e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e1e:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <HAL_MspInit+0x44>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40021000 	.word	0x40021000

08007e3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	; 0x28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e44:	f107 0314 	add.w	r3, r7, #20
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	605a      	str	r2, [r3, #4]
 8007e4e:	609a      	str	r2, [r3, #8]
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a44      	ldr	r2, [pc, #272]	; (8007f6c <HAL_DAC_MspInit+0x130>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	f040 8081 	bne.w	8007f62 <HAL_DAC_MspInit+0x126>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007e60:	4b43      	ldr	r3, [pc, #268]	; (8007f70 <HAL_DAC_MspInit+0x134>)
 8007e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e64:	4a42      	ldr	r2, [pc, #264]	; (8007f70 <HAL_DAC_MspInit+0x134>)
 8007e66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8007e6c:	4b40      	ldr	r3, [pc, #256]	; (8007f70 <HAL_DAC_MspInit+0x134>)
 8007e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e78:	4b3d      	ldr	r3, [pc, #244]	; (8007f70 <HAL_DAC_MspInit+0x134>)
 8007e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7c:	4a3c      	ldr	r2, [pc, #240]	; (8007f70 <HAL_DAC_MspInit+0x134>)
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e84:	4b3a      	ldr	r3, [pc, #232]	; (8007f70 <HAL_DAC_MspInit+0x134>)
 8007e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007e90:	2330      	movs	r3, #48	; 0x30
 8007e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e94:	2303      	movs	r3, #3
 8007e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e9c:	f107 0314 	add.w	r3, r7, #20
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ea6:	f7f9 ff11 	bl	8001ccc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8007eaa:	4b32      	ldr	r3, [pc, #200]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007eac:	4a32      	ldr	r2, [pc, #200]	; (8007f78 <HAL_DAC_MspInit+0x13c>)
 8007eae:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8007eb0:	4b30      	ldr	r3, [pc, #192]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007eb2:	2206      	movs	r2, #6
 8007eb4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007eb6:	4b2f      	ldr	r3, [pc, #188]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007eb8:	2210      	movs	r2, #16
 8007eba:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ebc:	4b2d      	ldr	r3, [pc, #180]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007ec2:	4b2c      	ldr	r3, [pc, #176]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007ec4:	2280      	movs	r2, #128	; 0x80
 8007ec6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ec8:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ece:	4b29      	ldr	r3, [pc, #164]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007ed4:	4b27      	ldr	r3, [pc, #156]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007eda:	4b26      	ldr	r3, [pc, #152]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007ee0:	4824      	ldr	r0, [pc, #144]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007ee2:	f7f9 fbc5 	bl	8001670 <HAL_DMA_Init>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8007eec:	f7ff ff7c 	bl	8007de8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a20      	ldr	r2, [pc, #128]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007ef4:	609a      	str	r2, [r3, #8]
 8007ef6:	4a1f      	ldr	r2, [pc, #124]	; (8007f74 <HAL_DAC_MspInit+0x138>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 8007efc:	4b1f      	ldr	r3, [pc, #124]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007efe:	4a20      	ldr	r2, [pc, #128]	; (8007f80 <HAL_DAC_MspInit+0x144>)
 8007f00:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 8007f02:	4b1e      	ldr	r3, [pc, #120]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f04:	2207      	movs	r2, #7
 8007f06:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007f08:	4b1c      	ldr	r3, [pc, #112]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f0a:	2210      	movs	r2, #16
 8007f0c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f0e:	4b1b      	ldr	r3, [pc, #108]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8007f14:	4b19      	ldr	r3, [pc, #100]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f16:	2280      	movs	r2, #128	; 0x80
 8007f18:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f20:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007f22:	4b16      	ldr	r3, [pc, #88]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f28:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8007f2a:	4b14      	ldr	r3, [pc, #80]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8007f30:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8007f36:	4811      	ldr	r0, [pc, #68]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f38:	f7f9 fb9a 	bl	8001670 <HAL_DMA_Init>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <HAL_DAC_MspInit+0x10a>
    {
      Error_Handler();
 8007f42:	f7ff ff51 	bl	8007de8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a0c      	ldr	r2, [pc, #48]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f4a:	60da      	str	r2, [r3, #12]
 8007f4c:	4a0b      	ldr	r2, [pc, #44]	; (8007f7c <HAL_DAC_MspInit+0x140>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007f52:	2200      	movs	r2, #0
 8007f54:	2100      	movs	r1, #0
 8007f56:	2036      	movs	r0, #54	; 0x36
 8007f58:	f7f9 f80f 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007f5c:	2036      	movs	r0, #54	; 0x36
 8007f5e:	f7f9 f828 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007f62:	bf00      	nop
 8007f64:	3728      	adds	r7, #40	; 0x28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40007400 	.word	0x40007400
 8007f70:	40021000 	.word	0x40021000
 8007f74:	20000200 	.word	0x20000200
 8007f78:	40020008 	.word	0x40020008
 8007f7c:	20000140 	.word	0x20000140
 8007f80:	4002001c 	.word	0x4002001c

08007f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a35      	ldr	r2, [pc, #212]	; (8008068 <HAL_TIM_Base_MspInit+0xe4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d114      	bne.n	8007fc0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007f96:	4b35      	ldr	r3, [pc, #212]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f9a:	4a34      	ldr	r2, [pc, #208]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8007fa2:	4b32      	ldr	r3, [pc, #200]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007faa:	61fb      	str	r3, [r7, #28]
 8007fac:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	2019      	movs	r0, #25
 8007fb4:	f7f8 ffe1 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007fb8:	2019      	movs	r0, #25
 8007fba:	f7f8 fffa 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007fbe:	e04e      	b.n	800805e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc8:	d10c      	bne.n	8007fe4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007fca:	4b28      	ldr	r3, [pc, #160]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fce:	4a27      	ldr	r2, [pc, #156]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007fd0:	f043 0301 	orr.w	r3, r3, #1
 8007fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8007fd6:	4b25      	ldr	r3, [pc, #148]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	61bb      	str	r3, [r7, #24]
 8007fe0:	69bb      	ldr	r3, [r7, #24]
}
 8007fe2:	e03c      	b.n	800805e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a21      	ldr	r2, [pc, #132]	; (8008070 <HAL_TIM_Base_MspInit+0xec>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d114      	bne.n	8008018 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007fee:	4b1f      	ldr	r3, [pc, #124]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff2:	4a1e      	ldr	r2, [pc, #120]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007ff4:	f043 0302 	orr.w	r3, r3, #2
 8007ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8007ffa:	4b1c      	ldr	r3, [pc, #112]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008006:	2200      	movs	r2, #0
 8008008:	2100      	movs	r1, #0
 800800a:	201d      	movs	r0, #29
 800800c:	f7f8 ffb5 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008010:	201d      	movs	r0, #29
 8008012:	f7f8 ffce 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
}
 8008016:	e022      	b.n	800805e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a15      	ldr	r2, [pc, #84]	; (8008074 <HAL_TIM_Base_MspInit+0xf0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d10c      	bne.n	800803c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8008024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008026:	4a11      	ldr	r2, [pc, #68]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8008028:	f043 0304 	orr.w	r3, r3, #4
 800802c:	6593      	str	r3, [r2, #88]	; 0x58
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	f003 0304 	and.w	r3, r3, #4
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	693b      	ldr	r3, [r7, #16]
}
 800803a:	e010      	b.n	800805e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM8)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a0d      	ldr	r2, [pc, #52]	; (8008078 <HAL_TIM_Base_MspInit+0xf4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d10b      	bne.n	800805e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008046:	4b09      	ldr	r3, [pc, #36]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8008048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804a:	4a08      	ldr	r2, [pc, #32]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 800804c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008050:	6613      	str	r3, [r2, #96]	; 0x60
 8008052:	4b06      	ldr	r3, [pc, #24]	; (800806c <HAL_TIM_Base_MspInit+0xe8>)
 8008054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
}
 800805e:	bf00      	nop
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40021000 	.word	0x40021000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40013400 	.word	0x40013400

0800807c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809c:	d11c      	bne.n	80080d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800809e:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <HAL_TIM_MspPostInit+0x64>)
 80080a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a2:	4a0f      	ldr	r2, [pc, #60]	; (80080e0 <HAL_TIM_MspPostInit+0x64>)
 80080a4:	f043 0301 	orr.w	r3, r3, #1
 80080a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <HAL_TIM_MspPostInit+0x64>)
 80080ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	60bb      	str	r3, [r7, #8]
 80080b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 80080b6:	2308      	movs	r3, #8
 80080b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ba:	2302      	movs	r3, #2
 80080bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080c2:	2300      	movs	r3, #0
 80080c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80080c6:	2301      	movs	r3, #1
 80080c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 80080ca:	f107 030c 	add.w	r3, r7, #12
 80080ce:	4619      	mov	r1, r3
 80080d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080d4:	f7f9 fdfa 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80080d8:	bf00      	nop
 80080da:	3720      	adds	r7, #32
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40021000 	.word	0x40021000

080080e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b0ae      	sub	sp, #184	; 0xb8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	605a      	str	r2, [r3, #4]
 80080f6:	609a      	str	r2, [r3, #8]
 80080f8:	60da      	str	r2, [r3, #12]
 80080fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080fc:	f107 0310 	add.w	r3, r7, #16
 8008100:	2294      	movs	r2, #148	; 0x94
 8008102:	2100      	movs	r1, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f95d 	bl	80083c4 <memset>
  if(huart->Instance==USART1)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a25      	ldr	r2, [pc, #148]	; (80081a4 <HAL_UART_MspInit+0xc0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d142      	bne.n	800819a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008114:	2301      	movs	r3, #1
 8008116:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008118:	2300      	movs	r3, #0
 800811a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800811c:	f107 0310 	add.w	r3, r7, #16
 8008120:	4618      	mov	r0, r3
 8008122:	f7fa ff19 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800812c:	f7ff fe5c 	bl	8007de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008130:	4b1d      	ldr	r3, [pc, #116]	; (80081a8 <HAL_UART_MspInit+0xc4>)
 8008132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008134:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <HAL_UART_MspInit+0xc4>)
 8008136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800813a:	6613      	str	r3, [r2, #96]	; 0x60
 800813c:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <HAL_UART_MspInit+0xc4>)
 800813e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008148:	4b17      	ldr	r3, [pc, #92]	; (80081a8 <HAL_UART_MspInit+0xc4>)
 800814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814c:	4a16      	ldr	r2, [pc, #88]	; (80081a8 <HAL_UART_MspInit+0xc4>)
 800814e:	f043 0302 	orr.w	r3, r3, #2
 8008152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008154:	4b14      	ldr	r3, [pc, #80]	; (80081a8 <HAL_UART_MspInit+0xc4>)
 8008156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	60bb      	str	r3, [r7, #8]
 800815e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008160:	23c0      	movs	r3, #192	; 0xc0
 8008162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008166:	2302      	movs	r3, #2
 8008168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816c:	2300      	movs	r3, #0
 800816e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008172:	2303      	movs	r3, #3
 8008174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008178:	2307      	movs	r3, #7
 800817a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800817e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008182:	4619      	mov	r1, r3
 8008184:	4809      	ldr	r0, [pc, #36]	; (80081ac <HAL_UART_MspInit+0xc8>)
 8008186:	f7f9 fda1 	bl	8001ccc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800818a:	2200      	movs	r2, #0
 800818c:	2101      	movs	r1, #1
 800818e:	2025      	movs	r0, #37	; 0x25
 8008190:	f7f8 fef3 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008194:	2025      	movs	r0, #37	; 0x25
 8008196:	f7f8 ff0c 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800819a:	bf00      	nop
 800819c:	37b8      	adds	r7, #184	; 0xb8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40013800 	.word	0x40013800
 80081a8:	40021000 	.word	0x40021000
 80081ac:	48000400 	.word	0x48000400

080081b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80081b4:	e7fe      	b.n	80081b4 <NMI_Handler+0x4>

080081b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081b6:	b480      	push	{r7}
 80081b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081ba:	e7fe      	b.n	80081ba <HardFault_Handler+0x4>

080081bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081c0:	e7fe      	b.n	80081c0 <MemManage_Handler+0x4>

080081c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081c2:	b480      	push	{r7}
 80081c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081c6:	e7fe      	b.n	80081c6 <BusFault_Handler+0x4>

080081c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081cc:	e7fe      	b.n	80081cc <UsageFault_Handler+0x4>

080081ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081ce:	b480      	push	{r7}
 80081d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081d2:	bf00      	nop
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081e0:	bf00      	nop
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081ea:	b480      	push	{r7}
 80081ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081ee:	bf00      	nop
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081fc:	f7f8 fd9e 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008200:	bf00      	nop
 8008202:	bd80      	pop	{r7, pc}

08008204 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008208:	4802      	ldr	r0, [pc, #8]	; (8008214 <DMA1_Channel1_IRQHandler+0x10>)
 800820a:	f7f9 fc0f 	bl	8001a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800820e:	bf00      	nop
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000200 	.word	0x20000200

08008218 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800821c:	4802      	ldr	r0, [pc, #8]	; (8008228 <DMA1_Channel2_IRQHandler+0x10>)
 800821e:	f7f9 fc05 	bl	8001a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008222:	bf00      	nop
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000140 	.word	0x20000140

0800822c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008230:	4802      	ldr	r0, [pc, #8]	; (800823c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8008232:	f7fb fe41 	bl	8003eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008236:	bf00      	nop
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000340 	.word	0x20000340

08008240 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008244:	4802      	ldr	r0, [pc, #8]	; (8008250 <TIM3_IRQHandler+0x10>)
 8008246:	f7fb fe37 	bl	8003eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800824a:	bf00      	nop
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000260 	.word	0x20000260

08008254 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008258:	4802      	ldr	r0, [pc, #8]	; (8008264 <USART1_IRQHandler+0x10>)
 800825a:	f7fd f83b 	bl	80052d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800825e:	bf00      	nop
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	200002b0 	.word	0x200002b0

08008268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800826c:	4802      	ldr	r0, [pc, #8]	; (8008278 <TIM6_DAC_IRQHandler+0x10>)
 800826e:	f7f8 ffa9 	bl	80011c4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008272:	bf00      	nop
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	200001ec 	.word	0x200001ec

0800827c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008284:	4a14      	ldr	r2, [pc, #80]	; (80082d8 <_sbrk+0x5c>)
 8008286:	4b15      	ldr	r3, [pc, #84]	; (80082dc <_sbrk+0x60>)
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008290:	4b13      	ldr	r3, [pc, #76]	; (80082e0 <_sbrk+0x64>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d102      	bne.n	800829e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008298:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <_sbrk+0x64>)
 800829a:	4a12      	ldr	r2, [pc, #72]	; (80082e4 <_sbrk+0x68>)
 800829c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800829e:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <_sbrk+0x64>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4413      	add	r3, r2
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d207      	bcs.n	80082bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80082ac:	f000 f858 	bl	8008360 <__errno>
 80082b0:	4603      	mov	r3, r0
 80082b2:	220c      	movs	r2, #12
 80082b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80082b6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ba:	e009      	b.n	80082d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80082bc:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <_sbrk+0x64>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80082c2:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <_sbrk+0x64>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4413      	add	r3, r2
 80082ca:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <_sbrk+0x64>)
 80082cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80082ce:	68fb      	ldr	r3, [r7, #12]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	200a0000 	.word	0x200a0000
 80082dc:	00000400 	.word	0x00000400
 80082e0:	200000e4 	.word	0x200000e4
 80082e4:	200003f0 	.word	0x200003f0

080082e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80082ec:	4b06      	ldr	r3, [pc, #24]	; (8008308 <SystemInit+0x20>)
 80082ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f2:	4a05      	ldr	r2, [pc, #20]	; (8008308 <SystemInit+0x20>)
 80082f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80082fc:	bf00      	nop
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	e000ed00 	.word	0xe000ed00

0800830c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800830c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008344 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008310:	f7ff ffea 	bl	80082e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008314:	480c      	ldr	r0, [pc, #48]	; (8008348 <LoopForever+0x6>)
  ldr r1, =_edata
 8008316:	490d      	ldr	r1, [pc, #52]	; (800834c <LoopForever+0xa>)
 ldr r2, =_sidata
 8008318:	4a0d      	ldr	r2, [pc, #52]	; (8008350 <LoopForever+0xe>)
  movs r3, #0
 800831a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800831c:	e002      	b.n	8008324 <LoopCopyDataInit>

0800831e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800831e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008322:	3304      	adds	r3, #4

08008324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008328:	d3f9      	bcc.n	800831e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800832a:	4a0a      	ldr	r2, [pc, #40]	; (8008354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800832c:	4c0a      	ldr	r4, [pc, #40]	; (8008358 <LoopForever+0x16>)
  movs r3, #0
 800832e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008330:	e001      	b.n	8008336 <LoopFillZerobss>

08008332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008334:	3204      	adds	r2, #4

08008336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008338:	d3fb      	bcc.n	8008332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800833a:	f000 f817 	bl	800836c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800833e:	f7ff f947 	bl	80075d0 <main>

08008342 <LoopForever>:

LoopForever:
    b LoopForever
 8008342:	e7fe      	b.n	8008342 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008344:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8008348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800834c:	200000c4 	.word	0x200000c4
 ldr r2, =_sidata
 8008350:	08008dcc 	.word	0x08008dcc
  ldr r2, =_sbss
 8008354:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8008358:	200003ec 	.word	0x200003ec

0800835c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800835c:	e7fe      	b.n	800835c <ADC1_IRQHandler>
	...

08008360 <__errno>:
 8008360:	4b01      	ldr	r3, [pc, #4]	; (8008368 <__errno+0x8>)
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	20000060 	.word	0x20000060

0800836c <__libc_init_array>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4d0d      	ldr	r5, [pc, #52]	; (80083a4 <__libc_init_array+0x38>)
 8008370:	4c0d      	ldr	r4, [pc, #52]	; (80083a8 <__libc_init_array+0x3c>)
 8008372:	1b64      	subs	r4, r4, r5
 8008374:	10a4      	asrs	r4, r4, #2
 8008376:	2600      	movs	r6, #0
 8008378:	42a6      	cmp	r6, r4
 800837a:	d109      	bne.n	8008390 <__libc_init_array+0x24>
 800837c:	4d0b      	ldr	r5, [pc, #44]	; (80083ac <__libc_init_array+0x40>)
 800837e:	4c0c      	ldr	r4, [pc, #48]	; (80083b0 <__libc_init_array+0x44>)
 8008380:	f000 fc56 	bl	8008c30 <_init>
 8008384:	1b64      	subs	r4, r4, r5
 8008386:	10a4      	asrs	r4, r4, #2
 8008388:	2600      	movs	r6, #0
 800838a:	42a6      	cmp	r6, r4
 800838c:	d105      	bne.n	800839a <__libc_init_array+0x2e>
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	f855 3b04 	ldr.w	r3, [r5], #4
 8008394:	4798      	blx	r3
 8008396:	3601      	adds	r6, #1
 8008398:	e7ee      	b.n	8008378 <__libc_init_array+0xc>
 800839a:	f855 3b04 	ldr.w	r3, [r5], #4
 800839e:	4798      	blx	r3
 80083a0:	3601      	adds	r6, #1
 80083a2:	e7f2      	b.n	800838a <__libc_init_array+0x1e>
 80083a4:	08008dc4 	.word	0x08008dc4
 80083a8:	08008dc4 	.word	0x08008dc4
 80083ac:	08008dc4 	.word	0x08008dc4
 80083b0:	08008dc8 	.word	0x08008dc8

080083b4 <malloc>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <malloc+0xc>)
 80083b6:	4601      	mov	r1, r0
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f000 b85b 	b.w	8008474 <_malloc_r>
 80083be:	bf00      	nop
 80083c0:	20000060 	.word	0x20000060

080083c4 <memset>:
 80083c4:	4402      	add	r2, r0
 80083c6:	4603      	mov	r3, r0
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d100      	bne.n	80083ce <memset+0xa>
 80083cc:	4770      	bx	lr
 80083ce:	f803 1b01 	strb.w	r1, [r3], #1
 80083d2:	e7f9      	b.n	80083c8 <memset+0x4>

080083d4 <_free_r>:
 80083d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083d6:	2900      	cmp	r1, #0
 80083d8:	d048      	beq.n	800846c <_free_r+0x98>
 80083da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083de:	9001      	str	r0, [sp, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f1a1 0404 	sub.w	r4, r1, #4
 80083e6:	bfb8      	it	lt
 80083e8:	18e4      	addlt	r4, r4, r3
 80083ea:	f000 f8cd 	bl	8008588 <__malloc_lock>
 80083ee:	4a20      	ldr	r2, [pc, #128]	; (8008470 <_free_r+0x9c>)
 80083f0:	9801      	ldr	r0, [sp, #4]
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	4615      	mov	r5, r2
 80083f6:	b933      	cbnz	r3, 8008406 <_free_r+0x32>
 80083f8:	6063      	str	r3, [r4, #4]
 80083fa:	6014      	str	r4, [r2, #0]
 80083fc:	b003      	add	sp, #12
 80083fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008402:	f000 b8c7 	b.w	8008594 <__malloc_unlock>
 8008406:	42a3      	cmp	r3, r4
 8008408:	d90b      	bls.n	8008422 <_free_r+0x4e>
 800840a:	6821      	ldr	r1, [r4, #0]
 800840c:	1862      	adds	r2, r4, r1
 800840e:	4293      	cmp	r3, r2
 8008410:	bf04      	itt	eq
 8008412:	681a      	ldreq	r2, [r3, #0]
 8008414:	685b      	ldreq	r3, [r3, #4]
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	bf04      	itt	eq
 800841a:	1852      	addeq	r2, r2, r1
 800841c:	6022      	streq	r2, [r4, #0]
 800841e:	602c      	str	r4, [r5, #0]
 8008420:	e7ec      	b.n	80083fc <_free_r+0x28>
 8008422:	461a      	mov	r2, r3
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	b10b      	cbz	r3, 800842c <_free_r+0x58>
 8008428:	42a3      	cmp	r3, r4
 800842a:	d9fa      	bls.n	8008422 <_free_r+0x4e>
 800842c:	6811      	ldr	r1, [r2, #0]
 800842e:	1855      	adds	r5, r2, r1
 8008430:	42a5      	cmp	r5, r4
 8008432:	d10b      	bne.n	800844c <_free_r+0x78>
 8008434:	6824      	ldr	r4, [r4, #0]
 8008436:	4421      	add	r1, r4
 8008438:	1854      	adds	r4, r2, r1
 800843a:	42a3      	cmp	r3, r4
 800843c:	6011      	str	r1, [r2, #0]
 800843e:	d1dd      	bne.n	80083fc <_free_r+0x28>
 8008440:	681c      	ldr	r4, [r3, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	6053      	str	r3, [r2, #4]
 8008446:	4421      	add	r1, r4
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	e7d7      	b.n	80083fc <_free_r+0x28>
 800844c:	d902      	bls.n	8008454 <_free_r+0x80>
 800844e:	230c      	movs	r3, #12
 8008450:	6003      	str	r3, [r0, #0]
 8008452:	e7d3      	b.n	80083fc <_free_r+0x28>
 8008454:	6825      	ldr	r5, [r4, #0]
 8008456:	1961      	adds	r1, r4, r5
 8008458:	428b      	cmp	r3, r1
 800845a:	bf04      	itt	eq
 800845c:	6819      	ldreq	r1, [r3, #0]
 800845e:	685b      	ldreq	r3, [r3, #4]
 8008460:	6063      	str	r3, [r4, #4]
 8008462:	bf04      	itt	eq
 8008464:	1949      	addeq	r1, r1, r5
 8008466:	6021      	streq	r1, [r4, #0]
 8008468:	6054      	str	r4, [r2, #4]
 800846a:	e7c7      	b.n	80083fc <_free_r+0x28>
 800846c:	b003      	add	sp, #12
 800846e:	bd30      	pop	{r4, r5, pc}
 8008470:	200000e8 	.word	0x200000e8

08008474 <_malloc_r>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	1ccd      	adds	r5, r1, #3
 8008478:	f025 0503 	bic.w	r5, r5, #3
 800847c:	3508      	adds	r5, #8
 800847e:	2d0c      	cmp	r5, #12
 8008480:	bf38      	it	cc
 8008482:	250c      	movcc	r5, #12
 8008484:	2d00      	cmp	r5, #0
 8008486:	4606      	mov	r6, r0
 8008488:	db01      	blt.n	800848e <_malloc_r+0x1a>
 800848a:	42a9      	cmp	r1, r5
 800848c:	d903      	bls.n	8008496 <_malloc_r+0x22>
 800848e:	230c      	movs	r3, #12
 8008490:	6033      	str	r3, [r6, #0]
 8008492:	2000      	movs	r0, #0
 8008494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008496:	f000 f877 	bl	8008588 <__malloc_lock>
 800849a:	4921      	ldr	r1, [pc, #132]	; (8008520 <_malloc_r+0xac>)
 800849c:	680a      	ldr	r2, [r1, #0]
 800849e:	4614      	mov	r4, r2
 80084a0:	b99c      	cbnz	r4, 80084ca <_malloc_r+0x56>
 80084a2:	4f20      	ldr	r7, [pc, #128]	; (8008524 <_malloc_r+0xb0>)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	b923      	cbnz	r3, 80084b2 <_malloc_r+0x3e>
 80084a8:	4621      	mov	r1, r4
 80084aa:	4630      	mov	r0, r6
 80084ac:	f000 f83c 	bl	8008528 <_sbrk_r>
 80084b0:	6038      	str	r0, [r7, #0]
 80084b2:	4629      	mov	r1, r5
 80084b4:	4630      	mov	r0, r6
 80084b6:	f000 f837 	bl	8008528 <_sbrk_r>
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	d123      	bne.n	8008506 <_malloc_r+0x92>
 80084be:	230c      	movs	r3, #12
 80084c0:	6033      	str	r3, [r6, #0]
 80084c2:	4630      	mov	r0, r6
 80084c4:	f000 f866 	bl	8008594 <__malloc_unlock>
 80084c8:	e7e3      	b.n	8008492 <_malloc_r+0x1e>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	1b5b      	subs	r3, r3, r5
 80084ce:	d417      	bmi.n	8008500 <_malloc_r+0x8c>
 80084d0:	2b0b      	cmp	r3, #11
 80084d2:	d903      	bls.n	80084dc <_malloc_r+0x68>
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	441c      	add	r4, r3
 80084d8:	6025      	str	r5, [r4, #0]
 80084da:	e004      	b.n	80084e6 <_malloc_r+0x72>
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	42a2      	cmp	r2, r4
 80084e0:	bf0c      	ite	eq
 80084e2:	600b      	streq	r3, [r1, #0]
 80084e4:	6053      	strne	r3, [r2, #4]
 80084e6:	4630      	mov	r0, r6
 80084e8:	f000 f854 	bl	8008594 <__malloc_unlock>
 80084ec:	f104 000b 	add.w	r0, r4, #11
 80084f0:	1d23      	adds	r3, r4, #4
 80084f2:	f020 0007 	bic.w	r0, r0, #7
 80084f6:	1ac2      	subs	r2, r0, r3
 80084f8:	d0cc      	beq.n	8008494 <_malloc_r+0x20>
 80084fa:	1a1b      	subs	r3, r3, r0
 80084fc:	50a3      	str	r3, [r4, r2]
 80084fe:	e7c9      	b.n	8008494 <_malloc_r+0x20>
 8008500:	4622      	mov	r2, r4
 8008502:	6864      	ldr	r4, [r4, #4]
 8008504:	e7cc      	b.n	80084a0 <_malloc_r+0x2c>
 8008506:	1cc4      	adds	r4, r0, #3
 8008508:	f024 0403 	bic.w	r4, r4, #3
 800850c:	42a0      	cmp	r0, r4
 800850e:	d0e3      	beq.n	80084d8 <_malloc_r+0x64>
 8008510:	1a21      	subs	r1, r4, r0
 8008512:	4630      	mov	r0, r6
 8008514:	f000 f808 	bl	8008528 <_sbrk_r>
 8008518:	3001      	adds	r0, #1
 800851a:	d1dd      	bne.n	80084d8 <_malloc_r+0x64>
 800851c:	e7cf      	b.n	80084be <_malloc_r+0x4a>
 800851e:	bf00      	nop
 8008520:	200000e8 	.word	0x200000e8
 8008524:	200000ec 	.word	0x200000ec

08008528 <_sbrk_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4d06      	ldr	r5, [pc, #24]	; (8008544 <_sbrk_r+0x1c>)
 800852c:	2300      	movs	r3, #0
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	f7ff fea2 	bl	800827c <_sbrk>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_sbrk_r+0x1a>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_sbrk_r+0x1a>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	200003dc 	.word	0x200003dc

08008548 <siprintf>:
 8008548:	b40e      	push	{r1, r2, r3}
 800854a:	b500      	push	{lr}
 800854c:	b09c      	sub	sp, #112	; 0x70
 800854e:	ab1d      	add	r3, sp, #116	; 0x74
 8008550:	9002      	str	r0, [sp, #8]
 8008552:	9006      	str	r0, [sp, #24]
 8008554:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008558:	4809      	ldr	r0, [pc, #36]	; (8008580 <siprintf+0x38>)
 800855a:	9107      	str	r1, [sp, #28]
 800855c:	9104      	str	r1, [sp, #16]
 800855e:	4909      	ldr	r1, [pc, #36]	; (8008584 <siprintf+0x3c>)
 8008560:	f853 2b04 	ldr.w	r2, [r3], #4
 8008564:	9105      	str	r1, [sp, #20]
 8008566:	6800      	ldr	r0, [r0, #0]
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	a902      	add	r1, sp, #8
 800856c:	f000 f874 	bl	8008658 <_svfiprintf_r>
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	2200      	movs	r2, #0
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	b01c      	add	sp, #112	; 0x70
 8008578:	f85d eb04 	ldr.w	lr, [sp], #4
 800857c:	b003      	add	sp, #12
 800857e:	4770      	bx	lr
 8008580:	20000060 	.word	0x20000060
 8008584:	ffff0208 	.word	0xffff0208

08008588 <__malloc_lock>:
 8008588:	4801      	ldr	r0, [pc, #4]	; (8008590 <__malloc_lock+0x8>)
 800858a:	f000 baf9 	b.w	8008b80 <__retarget_lock_acquire_recursive>
 800858e:	bf00      	nop
 8008590:	200003e4 	.word	0x200003e4

08008594 <__malloc_unlock>:
 8008594:	4801      	ldr	r0, [pc, #4]	; (800859c <__malloc_unlock+0x8>)
 8008596:	f000 baf4 	b.w	8008b82 <__retarget_lock_release_recursive>
 800859a:	bf00      	nop
 800859c:	200003e4 	.word	0x200003e4

080085a0 <__ssputs_r>:
 80085a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a4:	688e      	ldr	r6, [r1, #8]
 80085a6:	429e      	cmp	r6, r3
 80085a8:	4682      	mov	sl, r0
 80085aa:	460c      	mov	r4, r1
 80085ac:	4690      	mov	r8, r2
 80085ae:	461f      	mov	r7, r3
 80085b0:	d838      	bhi.n	8008624 <__ssputs_r+0x84>
 80085b2:	898a      	ldrh	r2, [r1, #12]
 80085b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085b8:	d032      	beq.n	8008620 <__ssputs_r+0x80>
 80085ba:	6825      	ldr	r5, [r4, #0]
 80085bc:	6909      	ldr	r1, [r1, #16]
 80085be:	eba5 0901 	sub.w	r9, r5, r1
 80085c2:	6965      	ldr	r5, [r4, #20]
 80085c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085cc:	3301      	adds	r3, #1
 80085ce:	444b      	add	r3, r9
 80085d0:	106d      	asrs	r5, r5, #1
 80085d2:	429d      	cmp	r5, r3
 80085d4:	bf38      	it	cc
 80085d6:	461d      	movcc	r5, r3
 80085d8:	0553      	lsls	r3, r2, #21
 80085da:	d531      	bpl.n	8008640 <__ssputs_r+0xa0>
 80085dc:	4629      	mov	r1, r5
 80085de:	f7ff ff49 	bl	8008474 <_malloc_r>
 80085e2:	4606      	mov	r6, r0
 80085e4:	b950      	cbnz	r0, 80085fc <__ssputs_r+0x5c>
 80085e6:	230c      	movs	r3, #12
 80085e8:	f8ca 3000 	str.w	r3, [sl]
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f2:	81a3      	strh	r3, [r4, #12]
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fc:	6921      	ldr	r1, [r4, #16]
 80085fe:	464a      	mov	r2, r9
 8008600:	f000 fac0 	bl	8008b84 <memcpy>
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800860a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860e:	81a3      	strh	r3, [r4, #12]
 8008610:	6126      	str	r6, [r4, #16]
 8008612:	6165      	str	r5, [r4, #20]
 8008614:	444e      	add	r6, r9
 8008616:	eba5 0509 	sub.w	r5, r5, r9
 800861a:	6026      	str	r6, [r4, #0]
 800861c:	60a5      	str	r5, [r4, #8]
 800861e:	463e      	mov	r6, r7
 8008620:	42be      	cmp	r6, r7
 8008622:	d900      	bls.n	8008626 <__ssputs_r+0x86>
 8008624:	463e      	mov	r6, r7
 8008626:	4632      	mov	r2, r6
 8008628:	6820      	ldr	r0, [r4, #0]
 800862a:	4641      	mov	r1, r8
 800862c:	f000 fab8 	bl	8008ba0 <memmove>
 8008630:	68a3      	ldr	r3, [r4, #8]
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	1b9b      	subs	r3, r3, r6
 8008636:	4432      	add	r2, r6
 8008638:	60a3      	str	r3, [r4, #8]
 800863a:	6022      	str	r2, [r4, #0]
 800863c:	2000      	movs	r0, #0
 800863e:	e7db      	b.n	80085f8 <__ssputs_r+0x58>
 8008640:	462a      	mov	r2, r5
 8008642:	f000 fac7 	bl	8008bd4 <_realloc_r>
 8008646:	4606      	mov	r6, r0
 8008648:	2800      	cmp	r0, #0
 800864a:	d1e1      	bne.n	8008610 <__ssputs_r+0x70>
 800864c:	6921      	ldr	r1, [r4, #16]
 800864e:	4650      	mov	r0, sl
 8008650:	f7ff fec0 	bl	80083d4 <_free_r>
 8008654:	e7c7      	b.n	80085e6 <__ssputs_r+0x46>
	...

08008658 <_svfiprintf_r>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	4698      	mov	r8, r3
 800865e:	898b      	ldrh	r3, [r1, #12]
 8008660:	061b      	lsls	r3, r3, #24
 8008662:	b09d      	sub	sp, #116	; 0x74
 8008664:	4607      	mov	r7, r0
 8008666:	460d      	mov	r5, r1
 8008668:	4614      	mov	r4, r2
 800866a:	d50e      	bpl.n	800868a <_svfiprintf_r+0x32>
 800866c:	690b      	ldr	r3, [r1, #16]
 800866e:	b963      	cbnz	r3, 800868a <_svfiprintf_r+0x32>
 8008670:	2140      	movs	r1, #64	; 0x40
 8008672:	f7ff feff 	bl	8008474 <_malloc_r>
 8008676:	6028      	str	r0, [r5, #0]
 8008678:	6128      	str	r0, [r5, #16]
 800867a:	b920      	cbnz	r0, 8008686 <_svfiprintf_r+0x2e>
 800867c:	230c      	movs	r3, #12
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	e0d1      	b.n	800882a <_svfiprintf_r+0x1d2>
 8008686:	2340      	movs	r3, #64	; 0x40
 8008688:	616b      	str	r3, [r5, #20]
 800868a:	2300      	movs	r3, #0
 800868c:	9309      	str	r3, [sp, #36]	; 0x24
 800868e:	2320      	movs	r3, #32
 8008690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008694:	f8cd 800c 	str.w	r8, [sp, #12]
 8008698:	2330      	movs	r3, #48	; 0x30
 800869a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008844 <_svfiprintf_r+0x1ec>
 800869e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086a2:	f04f 0901 	mov.w	r9, #1
 80086a6:	4623      	mov	r3, r4
 80086a8:	469a      	mov	sl, r3
 80086aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ae:	b10a      	cbz	r2, 80086b4 <_svfiprintf_r+0x5c>
 80086b0:	2a25      	cmp	r2, #37	; 0x25
 80086b2:	d1f9      	bne.n	80086a8 <_svfiprintf_r+0x50>
 80086b4:	ebba 0b04 	subs.w	fp, sl, r4
 80086b8:	d00b      	beq.n	80086d2 <_svfiprintf_r+0x7a>
 80086ba:	465b      	mov	r3, fp
 80086bc:	4622      	mov	r2, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff ff6d 	bl	80085a0 <__ssputs_r>
 80086c6:	3001      	adds	r0, #1
 80086c8:	f000 80aa 	beq.w	8008820 <_svfiprintf_r+0x1c8>
 80086cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ce:	445a      	add	r2, fp
 80086d0:	9209      	str	r2, [sp, #36]	; 0x24
 80086d2:	f89a 3000 	ldrb.w	r3, [sl]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80a2 	beq.w	8008820 <_svfiprintf_r+0x1c8>
 80086dc:	2300      	movs	r3, #0
 80086de:	f04f 32ff 	mov.w	r2, #4294967295
 80086e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e6:	f10a 0a01 	add.w	sl, sl, #1
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	9307      	str	r3, [sp, #28]
 80086ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086f2:	931a      	str	r3, [sp, #104]	; 0x68
 80086f4:	4654      	mov	r4, sl
 80086f6:	2205      	movs	r2, #5
 80086f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fc:	4851      	ldr	r0, [pc, #324]	; (8008844 <_svfiprintf_r+0x1ec>)
 80086fe:	f7f7 fd7f 	bl	8000200 <memchr>
 8008702:	9a04      	ldr	r2, [sp, #16]
 8008704:	b9d8      	cbnz	r0, 800873e <_svfiprintf_r+0xe6>
 8008706:	06d0      	lsls	r0, r2, #27
 8008708:	bf44      	itt	mi
 800870a:	2320      	movmi	r3, #32
 800870c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008710:	0711      	lsls	r1, r2, #28
 8008712:	bf44      	itt	mi
 8008714:	232b      	movmi	r3, #43	; 0x2b
 8008716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871a:	f89a 3000 	ldrb.w	r3, [sl]
 800871e:	2b2a      	cmp	r3, #42	; 0x2a
 8008720:	d015      	beq.n	800874e <_svfiprintf_r+0xf6>
 8008722:	9a07      	ldr	r2, [sp, #28]
 8008724:	4654      	mov	r4, sl
 8008726:	2000      	movs	r0, #0
 8008728:	f04f 0c0a 	mov.w	ip, #10
 800872c:	4621      	mov	r1, r4
 800872e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008732:	3b30      	subs	r3, #48	; 0x30
 8008734:	2b09      	cmp	r3, #9
 8008736:	d94e      	bls.n	80087d6 <_svfiprintf_r+0x17e>
 8008738:	b1b0      	cbz	r0, 8008768 <_svfiprintf_r+0x110>
 800873a:	9207      	str	r2, [sp, #28]
 800873c:	e014      	b.n	8008768 <_svfiprintf_r+0x110>
 800873e:	eba0 0308 	sub.w	r3, r0, r8
 8008742:	fa09 f303 	lsl.w	r3, r9, r3
 8008746:	4313      	orrs	r3, r2
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	46a2      	mov	sl, r4
 800874c:	e7d2      	b.n	80086f4 <_svfiprintf_r+0x9c>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	1d19      	adds	r1, r3, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	9103      	str	r1, [sp, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	bfbb      	ittet	lt
 800875a:	425b      	neglt	r3, r3
 800875c:	f042 0202 	orrlt.w	r2, r2, #2
 8008760:	9307      	strge	r3, [sp, #28]
 8008762:	9307      	strlt	r3, [sp, #28]
 8008764:	bfb8      	it	lt
 8008766:	9204      	strlt	r2, [sp, #16]
 8008768:	7823      	ldrb	r3, [r4, #0]
 800876a:	2b2e      	cmp	r3, #46	; 0x2e
 800876c:	d10c      	bne.n	8008788 <_svfiprintf_r+0x130>
 800876e:	7863      	ldrb	r3, [r4, #1]
 8008770:	2b2a      	cmp	r3, #42	; 0x2a
 8008772:	d135      	bne.n	80087e0 <_svfiprintf_r+0x188>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	1d1a      	adds	r2, r3, #4
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	9203      	str	r2, [sp, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	bfb8      	it	lt
 8008780:	f04f 33ff 	movlt.w	r3, #4294967295
 8008784:	3402      	adds	r4, #2
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008854 <_svfiprintf_r+0x1fc>
 800878c:	7821      	ldrb	r1, [r4, #0]
 800878e:	2203      	movs	r2, #3
 8008790:	4650      	mov	r0, sl
 8008792:	f7f7 fd35 	bl	8000200 <memchr>
 8008796:	b140      	cbz	r0, 80087aa <_svfiprintf_r+0x152>
 8008798:	2340      	movs	r3, #64	; 0x40
 800879a:	eba0 000a 	sub.w	r0, r0, sl
 800879e:	fa03 f000 	lsl.w	r0, r3, r0
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	4303      	orrs	r3, r0
 80087a6:	3401      	adds	r4, #1
 80087a8:	9304      	str	r3, [sp, #16]
 80087aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ae:	4826      	ldr	r0, [pc, #152]	; (8008848 <_svfiprintf_r+0x1f0>)
 80087b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087b4:	2206      	movs	r2, #6
 80087b6:	f7f7 fd23 	bl	8000200 <memchr>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d038      	beq.n	8008830 <_svfiprintf_r+0x1d8>
 80087be:	4b23      	ldr	r3, [pc, #140]	; (800884c <_svfiprintf_r+0x1f4>)
 80087c0:	bb1b      	cbnz	r3, 800880a <_svfiprintf_r+0x1b2>
 80087c2:	9b03      	ldr	r3, [sp, #12]
 80087c4:	3307      	adds	r3, #7
 80087c6:	f023 0307 	bic.w	r3, r3, #7
 80087ca:	3308      	adds	r3, #8
 80087cc:	9303      	str	r3, [sp, #12]
 80087ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d0:	4433      	add	r3, r6
 80087d2:	9309      	str	r3, [sp, #36]	; 0x24
 80087d4:	e767      	b.n	80086a6 <_svfiprintf_r+0x4e>
 80087d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087da:	460c      	mov	r4, r1
 80087dc:	2001      	movs	r0, #1
 80087de:	e7a5      	b.n	800872c <_svfiprintf_r+0xd4>
 80087e0:	2300      	movs	r3, #0
 80087e2:	3401      	adds	r4, #1
 80087e4:	9305      	str	r3, [sp, #20]
 80087e6:	4619      	mov	r1, r3
 80087e8:	f04f 0c0a 	mov.w	ip, #10
 80087ec:	4620      	mov	r0, r4
 80087ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f2:	3a30      	subs	r2, #48	; 0x30
 80087f4:	2a09      	cmp	r2, #9
 80087f6:	d903      	bls.n	8008800 <_svfiprintf_r+0x1a8>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0c5      	beq.n	8008788 <_svfiprintf_r+0x130>
 80087fc:	9105      	str	r1, [sp, #20]
 80087fe:	e7c3      	b.n	8008788 <_svfiprintf_r+0x130>
 8008800:	fb0c 2101 	mla	r1, ip, r1, r2
 8008804:	4604      	mov	r4, r0
 8008806:	2301      	movs	r3, #1
 8008808:	e7f0      	b.n	80087ec <_svfiprintf_r+0x194>
 800880a:	ab03      	add	r3, sp, #12
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	462a      	mov	r2, r5
 8008810:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <_svfiprintf_r+0x1f8>)
 8008812:	a904      	add	r1, sp, #16
 8008814:	4638      	mov	r0, r7
 8008816:	f3af 8000 	nop.w
 800881a:	1c42      	adds	r2, r0, #1
 800881c:	4606      	mov	r6, r0
 800881e:	d1d6      	bne.n	80087ce <_svfiprintf_r+0x176>
 8008820:	89ab      	ldrh	r3, [r5, #12]
 8008822:	065b      	lsls	r3, r3, #25
 8008824:	f53f af2c 	bmi.w	8008680 <_svfiprintf_r+0x28>
 8008828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800882a:	b01d      	add	sp, #116	; 0x74
 800882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008830:	ab03      	add	r3, sp, #12
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	462a      	mov	r2, r5
 8008836:	4b06      	ldr	r3, [pc, #24]	; (8008850 <_svfiprintf_r+0x1f8>)
 8008838:	a904      	add	r1, sp, #16
 800883a:	4638      	mov	r0, r7
 800883c:	f000 f87a 	bl	8008934 <_printf_i>
 8008840:	e7eb      	b.n	800881a <_svfiprintf_r+0x1c2>
 8008842:	bf00      	nop
 8008844:	08008d88 	.word	0x08008d88
 8008848:	08008d92 	.word	0x08008d92
 800884c:	00000000 	.word	0x00000000
 8008850:	080085a1 	.word	0x080085a1
 8008854:	08008d8e 	.word	0x08008d8e

08008858 <_printf_common>:
 8008858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	4616      	mov	r6, r2
 800885e:	4699      	mov	r9, r3
 8008860:	688a      	ldr	r2, [r1, #8]
 8008862:	690b      	ldr	r3, [r1, #16]
 8008864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008868:	4293      	cmp	r3, r2
 800886a:	bfb8      	it	lt
 800886c:	4613      	movlt	r3, r2
 800886e:	6033      	str	r3, [r6, #0]
 8008870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008874:	4607      	mov	r7, r0
 8008876:	460c      	mov	r4, r1
 8008878:	b10a      	cbz	r2, 800887e <_printf_common+0x26>
 800887a:	3301      	adds	r3, #1
 800887c:	6033      	str	r3, [r6, #0]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	0699      	lsls	r1, r3, #26
 8008882:	bf42      	ittt	mi
 8008884:	6833      	ldrmi	r3, [r6, #0]
 8008886:	3302      	addmi	r3, #2
 8008888:	6033      	strmi	r3, [r6, #0]
 800888a:	6825      	ldr	r5, [r4, #0]
 800888c:	f015 0506 	ands.w	r5, r5, #6
 8008890:	d106      	bne.n	80088a0 <_printf_common+0x48>
 8008892:	f104 0a19 	add.w	sl, r4, #25
 8008896:	68e3      	ldr	r3, [r4, #12]
 8008898:	6832      	ldr	r2, [r6, #0]
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	42ab      	cmp	r3, r5
 800889e:	dc26      	bgt.n	80088ee <_printf_common+0x96>
 80088a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088a4:	1e13      	subs	r3, r2, #0
 80088a6:	6822      	ldr	r2, [r4, #0]
 80088a8:	bf18      	it	ne
 80088aa:	2301      	movne	r3, #1
 80088ac:	0692      	lsls	r2, r2, #26
 80088ae:	d42b      	bmi.n	8008908 <_printf_common+0xb0>
 80088b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088b4:	4649      	mov	r1, r9
 80088b6:	4638      	mov	r0, r7
 80088b8:	47c0      	blx	r8
 80088ba:	3001      	adds	r0, #1
 80088bc:	d01e      	beq.n	80088fc <_printf_common+0xa4>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	68e5      	ldr	r5, [r4, #12]
 80088c2:	6832      	ldr	r2, [r6, #0]
 80088c4:	f003 0306 	and.w	r3, r3, #6
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	bf08      	it	eq
 80088cc:	1aad      	subeq	r5, r5, r2
 80088ce:	68a3      	ldr	r3, [r4, #8]
 80088d0:	6922      	ldr	r2, [r4, #16]
 80088d2:	bf0c      	ite	eq
 80088d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088d8:	2500      	movne	r5, #0
 80088da:	4293      	cmp	r3, r2
 80088dc:	bfc4      	itt	gt
 80088de:	1a9b      	subgt	r3, r3, r2
 80088e0:	18ed      	addgt	r5, r5, r3
 80088e2:	2600      	movs	r6, #0
 80088e4:	341a      	adds	r4, #26
 80088e6:	42b5      	cmp	r5, r6
 80088e8:	d11a      	bne.n	8008920 <_printf_common+0xc8>
 80088ea:	2000      	movs	r0, #0
 80088ec:	e008      	b.n	8008900 <_printf_common+0xa8>
 80088ee:	2301      	movs	r3, #1
 80088f0:	4652      	mov	r2, sl
 80088f2:	4649      	mov	r1, r9
 80088f4:	4638      	mov	r0, r7
 80088f6:	47c0      	blx	r8
 80088f8:	3001      	adds	r0, #1
 80088fa:	d103      	bne.n	8008904 <_printf_common+0xac>
 80088fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008904:	3501      	adds	r5, #1
 8008906:	e7c6      	b.n	8008896 <_printf_common+0x3e>
 8008908:	18e1      	adds	r1, r4, r3
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	2030      	movs	r0, #48	; 0x30
 800890e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008912:	4422      	add	r2, r4
 8008914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800891c:	3302      	adds	r3, #2
 800891e:	e7c7      	b.n	80088b0 <_printf_common+0x58>
 8008920:	2301      	movs	r3, #1
 8008922:	4622      	mov	r2, r4
 8008924:	4649      	mov	r1, r9
 8008926:	4638      	mov	r0, r7
 8008928:	47c0      	blx	r8
 800892a:	3001      	adds	r0, #1
 800892c:	d0e6      	beq.n	80088fc <_printf_common+0xa4>
 800892e:	3601      	adds	r6, #1
 8008930:	e7d9      	b.n	80088e6 <_printf_common+0x8e>
	...

08008934 <_printf_i>:
 8008934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	460c      	mov	r4, r1
 800893a:	4691      	mov	r9, r2
 800893c:	7e27      	ldrb	r7, [r4, #24]
 800893e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008940:	2f78      	cmp	r7, #120	; 0x78
 8008942:	4680      	mov	r8, r0
 8008944:	469a      	mov	sl, r3
 8008946:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800894a:	d807      	bhi.n	800895c <_printf_i+0x28>
 800894c:	2f62      	cmp	r7, #98	; 0x62
 800894e:	d80a      	bhi.n	8008966 <_printf_i+0x32>
 8008950:	2f00      	cmp	r7, #0
 8008952:	f000 80d8 	beq.w	8008b06 <_printf_i+0x1d2>
 8008956:	2f58      	cmp	r7, #88	; 0x58
 8008958:	f000 80a3 	beq.w	8008aa2 <_printf_i+0x16e>
 800895c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008964:	e03a      	b.n	80089dc <_printf_i+0xa8>
 8008966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800896a:	2b15      	cmp	r3, #21
 800896c:	d8f6      	bhi.n	800895c <_printf_i+0x28>
 800896e:	a001      	add	r0, pc, #4	; (adr r0, 8008974 <_printf_i+0x40>)
 8008970:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008974:	080089cd 	.word	0x080089cd
 8008978:	080089e1 	.word	0x080089e1
 800897c:	0800895d 	.word	0x0800895d
 8008980:	0800895d 	.word	0x0800895d
 8008984:	0800895d 	.word	0x0800895d
 8008988:	0800895d 	.word	0x0800895d
 800898c:	080089e1 	.word	0x080089e1
 8008990:	0800895d 	.word	0x0800895d
 8008994:	0800895d 	.word	0x0800895d
 8008998:	0800895d 	.word	0x0800895d
 800899c:	0800895d 	.word	0x0800895d
 80089a0:	08008aed 	.word	0x08008aed
 80089a4:	08008a11 	.word	0x08008a11
 80089a8:	08008acf 	.word	0x08008acf
 80089ac:	0800895d 	.word	0x0800895d
 80089b0:	0800895d 	.word	0x0800895d
 80089b4:	08008b0f 	.word	0x08008b0f
 80089b8:	0800895d 	.word	0x0800895d
 80089bc:	08008a11 	.word	0x08008a11
 80089c0:	0800895d 	.word	0x0800895d
 80089c4:	0800895d 	.word	0x0800895d
 80089c8:	08008ad7 	.word	0x08008ad7
 80089cc:	680b      	ldr	r3, [r1, #0]
 80089ce:	1d1a      	adds	r2, r3, #4
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	600a      	str	r2, [r1, #0]
 80089d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089dc:	2301      	movs	r3, #1
 80089de:	e0a3      	b.n	8008b28 <_printf_i+0x1f4>
 80089e0:	6825      	ldr	r5, [r4, #0]
 80089e2:	6808      	ldr	r0, [r1, #0]
 80089e4:	062e      	lsls	r6, r5, #24
 80089e6:	f100 0304 	add.w	r3, r0, #4
 80089ea:	d50a      	bpl.n	8008a02 <_printf_i+0xce>
 80089ec:	6805      	ldr	r5, [r0, #0]
 80089ee:	600b      	str	r3, [r1, #0]
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	da03      	bge.n	80089fc <_printf_i+0xc8>
 80089f4:	232d      	movs	r3, #45	; 0x2d
 80089f6:	426d      	negs	r5, r5
 80089f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fc:	485e      	ldr	r0, [pc, #376]	; (8008b78 <_printf_i+0x244>)
 80089fe:	230a      	movs	r3, #10
 8008a00:	e019      	b.n	8008a36 <_printf_i+0x102>
 8008a02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a06:	6805      	ldr	r5, [r0, #0]
 8008a08:	600b      	str	r3, [r1, #0]
 8008a0a:	bf18      	it	ne
 8008a0c:	b22d      	sxthne	r5, r5
 8008a0e:	e7ef      	b.n	80089f0 <_printf_i+0xbc>
 8008a10:	680b      	ldr	r3, [r1, #0]
 8008a12:	6825      	ldr	r5, [r4, #0]
 8008a14:	1d18      	adds	r0, r3, #4
 8008a16:	6008      	str	r0, [r1, #0]
 8008a18:	0628      	lsls	r0, r5, #24
 8008a1a:	d501      	bpl.n	8008a20 <_printf_i+0xec>
 8008a1c:	681d      	ldr	r5, [r3, #0]
 8008a1e:	e002      	b.n	8008a26 <_printf_i+0xf2>
 8008a20:	0669      	lsls	r1, r5, #25
 8008a22:	d5fb      	bpl.n	8008a1c <_printf_i+0xe8>
 8008a24:	881d      	ldrh	r5, [r3, #0]
 8008a26:	4854      	ldr	r0, [pc, #336]	; (8008b78 <_printf_i+0x244>)
 8008a28:	2f6f      	cmp	r7, #111	; 0x6f
 8008a2a:	bf0c      	ite	eq
 8008a2c:	2308      	moveq	r3, #8
 8008a2e:	230a      	movne	r3, #10
 8008a30:	2100      	movs	r1, #0
 8008a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a36:	6866      	ldr	r6, [r4, #4]
 8008a38:	60a6      	str	r6, [r4, #8]
 8008a3a:	2e00      	cmp	r6, #0
 8008a3c:	bfa2      	ittt	ge
 8008a3e:	6821      	ldrge	r1, [r4, #0]
 8008a40:	f021 0104 	bicge.w	r1, r1, #4
 8008a44:	6021      	strge	r1, [r4, #0]
 8008a46:	b90d      	cbnz	r5, 8008a4c <_printf_i+0x118>
 8008a48:	2e00      	cmp	r6, #0
 8008a4a:	d04d      	beq.n	8008ae8 <_printf_i+0x1b4>
 8008a4c:	4616      	mov	r6, r2
 8008a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a52:	fb03 5711 	mls	r7, r3, r1, r5
 8008a56:	5dc7      	ldrb	r7, [r0, r7]
 8008a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a5c:	462f      	mov	r7, r5
 8008a5e:	42bb      	cmp	r3, r7
 8008a60:	460d      	mov	r5, r1
 8008a62:	d9f4      	bls.n	8008a4e <_printf_i+0x11a>
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d10b      	bne.n	8008a80 <_printf_i+0x14c>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	07df      	lsls	r7, r3, #31
 8008a6c:	d508      	bpl.n	8008a80 <_printf_i+0x14c>
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	6861      	ldr	r1, [r4, #4]
 8008a72:	4299      	cmp	r1, r3
 8008a74:	bfde      	ittt	le
 8008a76:	2330      	movle	r3, #48	; 0x30
 8008a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a80:	1b92      	subs	r2, r2, r6
 8008a82:	6122      	str	r2, [r4, #16]
 8008a84:	f8cd a000 	str.w	sl, [sp]
 8008a88:	464b      	mov	r3, r9
 8008a8a:	aa03      	add	r2, sp, #12
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f7ff fee2 	bl	8008858 <_printf_common>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d14c      	bne.n	8008b32 <_printf_i+0x1fe>
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	b004      	add	sp, #16
 8008a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa2:	4835      	ldr	r0, [pc, #212]	; (8008b78 <_printf_i+0x244>)
 8008aa4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	680e      	ldr	r6, [r1, #0]
 8008aac:	061f      	lsls	r7, r3, #24
 8008aae:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ab2:	600e      	str	r6, [r1, #0]
 8008ab4:	d514      	bpl.n	8008ae0 <_printf_i+0x1ac>
 8008ab6:	07d9      	lsls	r1, r3, #31
 8008ab8:	bf44      	itt	mi
 8008aba:	f043 0320 	orrmi.w	r3, r3, #32
 8008abe:	6023      	strmi	r3, [r4, #0]
 8008ac0:	b91d      	cbnz	r5, 8008aca <_printf_i+0x196>
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	f023 0320 	bic.w	r3, r3, #32
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	2310      	movs	r3, #16
 8008acc:	e7b0      	b.n	8008a30 <_printf_i+0xfc>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	f043 0320 	orr.w	r3, r3, #32
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	2378      	movs	r3, #120	; 0x78
 8008ad8:	4828      	ldr	r0, [pc, #160]	; (8008b7c <_printf_i+0x248>)
 8008ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ade:	e7e3      	b.n	8008aa8 <_printf_i+0x174>
 8008ae0:	065e      	lsls	r6, r3, #25
 8008ae2:	bf48      	it	mi
 8008ae4:	b2ad      	uxthmi	r5, r5
 8008ae6:	e7e6      	b.n	8008ab6 <_printf_i+0x182>
 8008ae8:	4616      	mov	r6, r2
 8008aea:	e7bb      	b.n	8008a64 <_printf_i+0x130>
 8008aec:	680b      	ldr	r3, [r1, #0]
 8008aee:	6826      	ldr	r6, [r4, #0]
 8008af0:	6960      	ldr	r0, [r4, #20]
 8008af2:	1d1d      	adds	r5, r3, #4
 8008af4:	600d      	str	r5, [r1, #0]
 8008af6:	0635      	lsls	r5, r6, #24
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	d501      	bpl.n	8008b00 <_printf_i+0x1cc>
 8008afc:	6018      	str	r0, [r3, #0]
 8008afe:	e002      	b.n	8008b06 <_printf_i+0x1d2>
 8008b00:	0671      	lsls	r1, r6, #25
 8008b02:	d5fb      	bpl.n	8008afc <_printf_i+0x1c8>
 8008b04:	8018      	strh	r0, [r3, #0]
 8008b06:	2300      	movs	r3, #0
 8008b08:	6123      	str	r3, [r4, #16]
 8008b0a:	4616      	mov	r6, r2
 8008b0c:	e7ba      	b.n	8008a84 <_printf_i+0x150>
 8008b0e:	680b      	ldr	r3, [r1, #0]
 8008b10:	1d1a      	adds	r2, r3, #4
 8008b12:	600a      	str	r2, [r1, #0]
 8008b14:	681e      	ldr	r6, [r3, #0]
 8008b16:	6862      	ldr	r2, [r4, #4]
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f7f7 fb70 	bl	8000200 <memchr>
 8008b20:	b108      	cbz	r0, 8008b26 <_printf_i+0x1f2>
 8008b22:	1b80      	subs	r0, r0, r6
 8008b24:	6060      	str	r0, [r4, #4]
 8008b26:	6863      	ldr	r3, [r4, #4]
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b30:	e7a8      	b.n	8008a84 <_printf_i+0x150>
 8008b32:	6923      	ldr	r3, [r4, #16]
 8008b34:	4632      	mov	r2, r6
 8008b36:	4649      	mov	r1, r9
 8008b38:	4640      	mov	r0, r8
 8008b3a:	47d0      	blx	sl
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d0ab      	beq.n	8008a98 <_printf_i+0x164>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	079b      	lsls	r3, r3, #30
 8008b44:	d413      	bmi.n	8008b6e <_printf_i+0x23a>
 8008b46:	68e0      	ldr	r0, [r4, #12]
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	4298      	cmp	r0, r3
 8008b4c:	bfb8      	it	lt
 8008b4e:	4618      	movlt	r0, r3
 8008b50:	e7a4      	b.n	8008a9c <_printf_i+0x168>
 8008b52:	2301      	movs	r3, #1
 8008b54:	4632      	mov	r2, r6
 8008b56:	4649      	mov	r1, r9
 8008b58:	4640      	mov	r0, r8
 8008b5a:	47d0      	blx	sl
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d09b      	beq.n	8008a98 <_printf_i+0x164>
 8008b60:	3501      	adds	r5, #1
 8008b62:	68e3      	ldr	r3, [r4, #12]
 8008b64:	9903      	ldr	r1, [sp, #12]
 8008b66:	1a5b      	subs	r3, r3, r1
 8008b68:	42ab      	cmp	r3, r5
 8008b6a:	dcf2      	bgt.n	8008b52 <_printf_i+0x21e>
 8008b6c:	e7eb      	b.n	8008b46 <_printf_i+0x212>
 8008b6e:	2500      	movs	r5, #0
 8008b70:	f104 0619 	add.w	r6, r4, #25
 8008b74:	e7f5      	b.n	8008b62 <_printf_i+0x22e>
 8008b76:	bf00      	nop
 8008b78:	08008d99 	.word	0x08008d99
 8008b7c:	08008daa 	.word	0x08008daa

08008b80 <__retarget_lock_acquire_recursive>:
 8008b80:	4770      	bx	lr

08008b82 <__retarget_lock_release_recursive>:
 8008b82:	4770      	bx	lr

08008b84 <memcpy>:
 8008b84:	440a      	add	r2, r1
 8008b86:	4291      	cmp	r1, r2
 8008b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b8c:	d100      	bne.n	8008b90 <memcpy+0xc>
 8008b8e:	4770      	bx	lr
 8008b90:	b510      	push	{r4, lr}
 8008b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	d1f9      	bne.n	8008b92 <memcpy+0xe>
 8008b9e:	bd10      	pop	{r4, pc}

08008ba0 <memmove>:
 8008ba0:	4288      	cmp	r0, r1
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	eb01 0402 	add.w	r4, r1, r2
 8008ba8:	d902      	bls.n	8008bb0 <memmove+0x10>
 8008baa:	4284      	cmp	r4, r0
 8008bac:	4623      	mov	r3, r4
 8008bae:	d807      	bhi.n	8008bc0 <memmove+0x20>
 8008bb0:	1e43      	subs	r3, r0, #1
 8008bb2:	42a1      	cmp	r1, r4
 8008bb4:	d008      	beq.n	8008bc8 <memmove+0x28>
 8008bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bbe:	e7f8      	b.n	8008bb2 <memmove+0x12>
 8008bc0:	4402      	add	r2, r0
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	428a      	cmp	r2, r1
 8008bc6:	d100      	bne.n	8008bca <memmove+0x2a>
 8008bc8:	bd10      	pop	{r4, pc}
 8008bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bd2:	e7f7      	b.n	8008bc4 <memmove+0x24>

08008bd4 <_realloc_r>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	4614      	mov	r4, r2
 8008bda:	460e      	mov	r6, r1
 8008bdc:	b921      	cbnz	r1, 8008be8 <_realloc_r+0x14>
 8008bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008be2:	4611      	mov	r1, r2
 8008be4:	f7ff bc46 	b.w	8008474 <_malloc_r>
 8008be8:	b922      	cbnz	r2, 8008bf4 <_realloc_r+0x20>
 8008bea:	f7ff fbf3 	bl	80083d4 <_free_r>
 8008bee:	4625      	mov	r5, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bf4:	f000 f814 	bl	8008c20 <_malloc_usable_size_r>
 8008bf8:	42a0      	cmp	r0, r4
 8008bfa:	d20f      	bcs.n	8008c1c <_realloc_r+0x48>
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f7ff fc38 	bl	8008474 <_malloc_r>
 8008c04:	4605      	mov	r5, r0
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d0f2      	beq.n	8008bf0 <_realloc_r+0x1c>
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	f7ff ffb9 	bl	8008b84 <memcpy>
 8008c12:	4631      	mov	r1, r6
 8008c14:	4638      	mov	r0, r7
 8008c16:	f7ff fbdd 	bl	80083d4 <_free_r>
 8008c1a:	e7e9      	b.n	8008bf0 <_realloc_r+0x1c>
 8008c1c:	4635      	mov	r5, r6
 8008c1e:	e7e7      	b.n	8008bf0 <_realloc_r+0x1c>

08008c20 <_malloc_usable_size_r>:
 8008c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c24:	1f18      	subs	r0, r3, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bfbc      	itt	lt
 8008c2a:	580b      	ldrlt	r3, [r1, r0]
 8008c2c:	18c0      	addlt	r0, r0, r3
 8008c2e:	4770      	bx	lr

08008c30 <_init>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	bf00      	nop
 8008c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c36:	bc08      	pop	{r3}
 8008c38:	469e      	mov	lr, r3
 8008c3a:	4770      	bx	lr

08008c3c <_fini>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr
