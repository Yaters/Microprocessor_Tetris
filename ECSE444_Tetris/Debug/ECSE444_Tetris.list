
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b04  08009b04  00020698  2**0
                  CONTENTS
  4 .ARM          00000008  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b0c  08009b0c  00020698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b10  08009b10  00019b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000698  20000000  08009b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000698  0800a1ac  00020698  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  0800a1ac  000209c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a194  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccb  00000000  00000000  0003a85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003d528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003e7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be9d  00000000  00000000  0003f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163c2  00000000  00000000  0006b855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010eedb  00000000  00000000  00081c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190af2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005438  00000000  00000000  00190b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000698 	.word	0x20000698
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009980 	.word	0x08009980

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000069c 	.word	0x2000069c
 80001fc:	08009980 	.word	0x08009980

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2iz>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d215      	bcs.n	80008a2 <__aeabi_d2iz+0x36>
 8000876:	d511      	bpl.n	800089c <__aeabi_d2iz+0x30>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d912      	bls.n	80008a8 <__aeabi_d2iz+0x3c>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000892:	fa23 f002 	lsr.w	r0, r3, r2
 8000896:	bf18      	it	ne
 8000898:	4240      	negne	r0, r0
 800089a:	4770      	bx	lr
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	4770      	bx	lr
 80008a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008a6:	d105      	bne.n	80008b4 <__aeabi_d2iz+0x48>
 80008a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	bf08      	it	eq
 80008ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b96e 	b.w	8000bb0 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	4604      	mov	r4, r0
 80008f4:	468c      	mov	ip, r1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 8083 	bne.w	8000a02 <__udivmoddi4+0x116>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4617      	mov	r7, r2
 8000900:	d947      	bls.n	8000992 <__udivmoddi4+0xa6>
 8000902:	fab2 f282 	clz	r2, r2
 8000906:	b142      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000908:	f1c2 0020 	rsb	r0, r2, #32
 800090c:	fa24 f000 	lsr.w	r0, r4, r0
 8000910:	4091      	lsls	r1, r2
 8000912:	4097      	lsls	r7, r2
 8000914:	ea40 0c01 	orr.w	ip, r0, r1
 8000918:	4094      	lsls	r4, r2
 800091a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800091e:	0c23      	lsrs	r3, r4, #16
 8000920:	fbbc f6f8 	udiv	r6, ip, r8
 8000924:	fa1f fe87 	uxth.w	lr, r7
 8000928:	fb08 c116 	mls	r1, r8, r6, ip
 800092c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000930:	fb06 f10e 	mul.w	r1, r6, lr
 8000934:	4299      	cmp	r1, r3
 8000936:	d909      	bls.n	800094c <__udivmoddi4+0x60>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f106 30ff 	add.w	r0, r6, #4294967295
 800093e:	f080 8119 	bcs.w	8000b74 <__udivmoddi4+0x288>
 8000942:	4299      	cmp	r1, r3
 8000944:	f240 8116 	bls.w	8000b74 <__udivmoddi4+0x288>
 8000948:	3e02      	subs	r6, #2
 800094a:	443b      	add	r3, r7
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	b2a4      	uxth	r4, r4
 8000950:	fbb3 f0f8 	udiv	r0, r3, r8
 8000954:	fb08 3310 	mls	r3, r8, r0, r3
 8000958:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800095c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000960:	45a6      	cmp	lr, r4
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x8c>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 33ff 	add.w	r3, r0, #4294967295
 800096a:	f080 8105 	bcs.w	8000b78 <__udivmoddi4+0x28c>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8102 	bls.w	8000b78 <__udivmoddi4+0x28c>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097c:	eba4 040e 	sub.w	r4, r4, lr
 8000980:	2600      	movs	r6, #0
 8000982:	b11d      	cbz	r5, 800098c <__udivmoddi4+0xa0>
 8000984:	40d4      	lsrs	r4, r2
 8000986:	2300      	movs	r3, #0
 8000988:	e9c5 4300 	strd	r4, r3, [r5]
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	b902      	cbnz	r2, 8000996 <__udivmoddi4+0xaa>
 8000994:	deff      	udf	#255	; 0xff
 8000996:	fab2 f282 	clz	r2, r2
 800099a:	2a00      	cmp	r2, #0
 800099c:	d150      	bne.n	8000a40 <__udivmoddi4+0x154>
 800099e:	1bcb      	subs	r3, r1, r7
 80009a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a4:	fa1f f887 	uxth.w	r8, r7
 80009a8:	2601      	movs	r6, #1
 80009aa:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ae:	0c21      	lsrs	r1, r4, #16
 80009b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b8:	fb08 f30c 	mul.w	r3, r8, ip
 80009bc:	428b      	cmp	r3, r1
 80009be:	d907      	bls.n	80009d0 <__udivmoddi4+0xe4>
 80009c0:	1879      	adds	r1, r7, r1
 80009c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0xe2>
 80009c8:	428b      	cmp	r3, r1
 80009ca:	f200 80e9 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 80009ce:	4684      	mov	ip, r0
 80009d0:	1ac9      	subs	r1, r1, r3
 80009d2:	b2a3      	uxth	r3, r4
 80009d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009dc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009e0:	fb08 f800 	mul.w	r8, r8, r0
 80009e4:	45a0      	cmp	r8, r4
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x10c>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x10a>
 80009f0:	45a0      	cmp	r8, r4
 80009f2:	f200 80d9 	bhi.w	8000ba8 <__udivmoddi4+0x2bc>
 80009f6:	4618      	mov	r0, r3
 80009f8:	eba4 0408 	sub.w	r4, r4, r8
 80009fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a00:	e7bf      	b.n	8000982 <__udivmoddi4+0x96>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d909      	bls.n	8000a1a <__udivmoddi4+0x12e>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	f000 80b1 	beq.w	8000b6e <__udivmoddi4+0x282>
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a12:	4630      	mov	r0, r6
 8000a14:	4631      	mov	r1, r6
 8000a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1a:	fab3 f683 	clz	r6, r3
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d14a      	bne.n	8000ab8 <__udivmoddi4+0x1cc>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d302      	bcc.n	8000a2c <__udivmoddi4+0x140>
 8000a26:	4282      	cmp	r2, r0
 8000a28:	f200 80b8 	bhi.w	8000b9c <__udivmoddi4+0x2b0>
 8000a2c:	1a84      	subs	r4, r0, r2
 8000a2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a32:	2001      	movs	r0, #1
 8000a34:	468c      	mov	ip, r1
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0a8      	beq.n	800098c <__udivmoddi4+0xa0>
 8000a3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a3e:	e7a5      	b.n	800098c <__udivmoddi4+0xa0>
 8000a40:	f1c2 0320 	rsb	r3, r2, #32
 8000a44:	fa20 f603 	lsr.w	r6, r0, r3
 8000a48:	4097      	lsls	r7, r2
 8000a4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a52:	40d9      	lsrs	r1, r3
 8000a54:	4330      	orrs	r0, r6
 8000a56:	0c03      	lsrs	r3, r0, #16
 8000a58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a5c:	fa1f f887 	uxth.w	r8, r7
 8000a60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f108 	mul.w	r1, r6, r8
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a72:	d909      	bls.n	8000a88 <__udivmoddi4+0x19c>
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a7a:	f080 808d 	bcs.w	8000b98 <__udivmoddi4+0x2ac>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 808a 	bls.w	8000b98 <__udivmoddi4+0x2ac>
 8000a84:	3e02      	subs	r6, #2
 8000a86:	443b      	add	r3, r7
 8000a88:	1a5b      	subs	r3, r3, r1
 8000a8a:	b281      	uxth	r1, r0
 8000a8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a98:	fb00 f308 	mul.w	r3, r0, r8
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d907      	bls.n	8000ab0 <__udivmoddi4+0x1c4>
 8000aa0:	1879      	adds	r1, r7, r1
 8000aa2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000aa6:	d273      	bcs.n	8000b90 <__udivmoddi4+0x2a4>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	d971      	bls.n	8000b90 <__udivmoddi4+0x2a4>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4439      	add	r1, r7
 8000ab0:	1acb      	subs	r3, r1, r3
 8000ab2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ab6:	e778      	b.n	80009aa <__udivmoddi4+0xbe>
 8000ab8:	f1c6 0c20 	rsb	ip, r6, #32
 8000abc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ac0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ac4:	431c      	orrs	r4, r3
 8000ac6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ace:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ad2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ad6:	431f      	orrs	r7, r3
 8000ad8:	0c3b      	lsrs	r3, r7, #16
 8000ada:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ade:	fa1f f884 	uxth.w	r8, r4
 8000ae2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ae6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aea:	fb09 fa08 	mul.w	sl, r9, r8
 8000aee:	458a      	cmp	sl, r1
 8000af0:	fa02 f206 	lsl.w	r2, r2, r6
 8000af4:	fa00 f306 	lsl.w	r3, r0, r6
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x220>
 8000afa:	1861      	adds	r1, r4, r1
 8000afc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b00:	d248      	bcs.n	8000b94 <__udivmoddi4+0x2a8>
 8000b02:	458a      	cmp	sl, r1
 8000b04:	d946      	bls.n	8000b94 <__udivmoddi4+0x2a8>
 8000b06:	f1a9 0902 	sub.w	r9, r9, #2
 8000b0a:	4421      	add	r1, r4
 8000b0c:	eba1 010a 	sub.w	r1, r1, sl
 8000b10:	b2bf      	uxth	r7, r7
 8000b12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b1e:	fb00 f808 	mul.w	r8, r0, r8
 8000b22:	45b8      	cmp	r8, r7
 8000b24:	d907      	bls.n	8000b36 <__udivmoddi4+0x24a>
 8000b26:	19e7      	adds	r7, r4, r7
 8000b28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b2c:	d22e      	bcs.n	8000b8c <__udivmoddi4+0x2a0>
 8000b2e:	45b8      	cmp	r8, r7
 8000b30:	d92c      	bls.n	8000b8c <__udivmoddi4+0x2a0>
 8000b32:	3802      	subs	r0, #2
 8000b34:	4427      	add	r7, r4
 8000b36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b3a:	eba7 0708 	sub.w	r7, r7, r8
 8000b3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b42:	454f      	cmp	r7, r9
 8000b44:	46c6      	mov	lr, r8
 8000b46:	4649      	mov	r1, r9
 8000b48:	d31a      	bcc.n	8000b80 <__udivmoddi4+0x294>
 8000b4a:	d017      	beq.n	8000b7c <__udivmoddi4+0x290>
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x27a>
 8000b4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b52:	eb67 0701 	sbc.w	r7, r7, r1
 8000b56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b5a:	40f2      	lsrs	r2, r6
 8000b5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b60:	40f7      	lsrs	r7, r6
 8000b62:	e9c5 2700 	strd	r2, r7, [r5]
 8000b66:	2600      	movs	r6, #0
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e70b      	b.n	800098c <__udivmoddi4+0xa0>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e9      	b.n	800094c <__udivmoddi4+0x60>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6fd      	b.n	8000978 <__udivmoddi4+0x8c>
 8000b7c:	4543      	cmp	r3, r8
 8000b7e:	d2e5      	bcs.n	8000b4c <__udivmoddi4+0x260>
 8000b80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b84:	eb69 0104 	sbc.w	r1, r9, r4
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7df      	b.n	8000b4c <__udivmoddi4+0x260>
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e7d2      	b.n	8000b36 <__udivmoddi4+0x24a>
 8000b90:	4660      	mov	r0, ip
 8000b92:	e78d      	b.n	8000ab0 <__udivmoddi4+0x1c4>
 8000b94:	4681      	mov	r9, r0
 8000b96:	e7b9      	b.n	8000b0c <__udivmoddi4+0x220>
 8000b98:	4666      	mov	r6, ip
 8000b9a:	e775      	b.n	8000a88 <__udivmoddi4+0x19c>
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	e74a      	b.n	8000a36 <__udivmoddi4+0x14a>
 8000ba0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ba4:	4439      	add	r1, r7
 8000ba6:	e713      	b.n	80009d0 <__udivmoddi4+0xe4>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	443c      	add	r4, r7
 8000bac:	e724      	b.n	80009f8 <__udivmoddi4+0x10c>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_idiv0>:
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f960 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 f80d 	bl	8000be4 <HAL_InitTick>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	e001      	b.n	8000bda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd6:	f007 f9a5 	bl	8007f24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d023      	beq.n	8000c40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_InitTick+0x70>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f96d 	bl	8000eee <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10f      	bne.n	8000c3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d809      	bhi.n	8000c34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f937 	bl	8000e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_InitTick+0x74>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e004      	b.n	8000c44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e001      	b.n	8000c44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000004 	.word	0x20000004
 8000c54:	20000620 	.word	0x20000620
 8000c58:	20000000 	.word	0x20000000

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000004 	.word	0x20000004
 8000c80:	200006cc 	.word	0x200006cc

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	200006cc 	.word	0x200006cc

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffde 	bl	8000c84 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f7ff ff8e 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff29 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff3e 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff8e 	bl	8000dd8 <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff31 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa2 	bl	8000e40 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e014      	b.n	8000f42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	791b      	ldrb	r3, [r3, #4]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d105      	bne.n	8000f2e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f007 f81f 	bl	8007f6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2202      	movs	r2, #2
 8000f32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <HAL_DAC_Start_DMA+0x1e>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e0ab      	b.n	80010c2 <HAL_DAC_Start_DMA+0x176>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2202      	movs	r2, #2
 8000f74:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d12f      	bne.n	8000fdc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a52      	ldr	r2, [pc, #328]	; (80010cc <HAL_DAC_Start_DMA+0x180>)
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a51      	ldr	r2, [pc, #324]	; (80010d0 <HAL_DAC_Start_DMA+0x184>)
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <HAL_DAC_Start_DMA+0x188>)
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fa2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d013      	beq.n	8000fd2 <HAL_DAC_Start_DMA+0x86>
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d845      	bhi.n	800103c <HAL_DAC_Start_DMA+0xf0>
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_DAC_Start_DMA+0x72>
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d005      	beq.n	8000fc8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000fbc:	e03e      	b.n	800103c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3308      	adds	r3, #8
 8000fc4:	613b      	str	r3, [r7, #16]
        break;
 8000fc6:	e03c      	b.n	8001042 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	330c      	adds	r3, #12
 8000fce:	613b      	str	r3, [r7, #16]
        break;
 8000fd0:	e037      	b.n	8001042 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3310      	adds	r3, #16
 8000fd8:	613b      	str	r3, [r7, #16]
        break;
 8000fda:	e032      	b.n	8001042 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4a3d      	ldr	r2, [pc, #244]	; (80010d8 <HAL_DAC_Start_DMA+0x18c>)
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4a3c      	ldr	r2, [pc, #240]	; (80010dc <HAL_DAC_Start_DMA+0x190>)
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	4a3b      	ldr	r2, [pc, #236]	; (80010e0 <HAL_DAC_Start_DMA+0x194>)
 8000ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001002:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	2b08      	cmp	r3, #8
 8001008:	d013      	beq.n	8001032 <HAL_DAC_Start_DMA+0xe6>
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	2b08      	cmp	r3, #8
 800100e:	d817      	bhi.n	8001040 <HAL_DAC_Start_DMA+0xf4>
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_DAC_Start_DMA+0xd2>
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d005      	beq.n	8001028 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800101c:	e010      	b.n	8001040 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3314      	adds	r3, #20
 8001024:	613b      	str	r3, [r7, #16]
        break;
 8001026:	e00c      	b.n	8001042 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3318      	adds	r3, #24
 800102e:	613b      	str	r3, [r7, #16]
        break;
 8001030:	e007      	b.n	8001042 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	331c      	adds	r3, #28
 8001038:	613b      	str	r3, [r7, #16]
        break;
 800103a:	e002      	b.n	8001042 <HAL_DAC_Start_DMA+0xf6>
        break;
 800103c:	bf00      	nop
 800103e:	e000      	b.n	8001042 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001040:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d111      	bne.n	800106c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001056:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6898      	ldr	r0, [r3, #8]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	f000 fb3d 	bl	80016e0 <HAL_DMA_Start_IT>
 8001066:	4603      	mov	r3, r0
 8001068:	75fb      	strb	r3, [r7, #23]
 800106a:	e010      	b.n	800108e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800107a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	68d8      	ldr	r0, [r3, #12]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	f000 fb2b 	bl	80016e0 <HAL_DMA_Start_IT>
 800108a:	4603      	mov	r3, r0
 800108c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10c      	bne.n	80010b4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2201      	movs	r2, #1
 80010a8:	409a      	lsls	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e005      	b.n	80010c0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	f043 0204 	orr.w	r2, r3, #4
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08001469 	.word	0x08001469
 80010d0:	0800148b 	.word	0x0800148b
 80010d4:	080014a7 	.word	0x080014a7
 80010d8:	08001525 	.word	0x08001525
 80010dc:	08001547 	.word	0x08001547
 80010e0:	08001563 	.word	0x08001563

080010e4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010fa:	d120      	bne.n	800113e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800110a:	d118      	bne.n	800113e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2204      	movs	r2, #4
 8001110:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001136:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f84b 	bl	80011d4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800114c:	d120      	bne.n	8001190 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800115c:	d118      	bne.n	8001190 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2204      	movs	r2, #4
 8001162:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f043 0202 	orr.w	r2, r3, #2
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001178:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001188:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9c0 	bl	8001510 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	795b      	ldrb	r3, [r3, #5]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_DAC_ConfigChannel+0x1c>
 8001200:	2302      	movs	r3, #2
 8001202:	e12a      	b.n	800145a <HAL_DAC_ConfigChannel+0x272>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2201      	movs	r2, #1
 8001208:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2202      	movs	r2, #2
 800120e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d174      	bne.n	8001302 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001218:	f7ff fd34 	bl	8000c84 <HAL_GetTick>
 800121c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d134      	bne.n	800128e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001224:	e011      	b.n	800124a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001226:	f7ff fd2d 	bl	8000c84 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d90a      	bls.n	800124a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	f043 0208 	orr.w	r2, r3, #8
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2203      	movs	r2, #3
 8001244:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e107      	b.n	800145a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e6      	bne.n	8001226 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f7ff fd1f 	bl	8000c9c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	69d2      	ldr	r2, [r2, #28]
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
 8001268:	e01e      	b.n	80012a8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800126a:	f7ff fd0b 	bl	8000c84 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d90a      	bls.n	800128e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f043 0208 	orr.w	r2, r3, #8
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2203      	movs	r2, #3
 8001288:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e0e5      	b.n	800145a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001294:	2b00      	cmp	r3, #0
 8001296:	dbe8      	blt.n	800126a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff fcff 	bl	8000c9c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	69d2      	ldr	r2, [r2, #28]
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	ea02 0103 	and.w	r1, r2, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	409a      	lsls	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	ea02 0103 	and.w	r1, r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	409a      	lsls	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d11d      	bne.n	8001346 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	221f      	movs	r2, #31
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	4013      	ands	r3, r2
 8001324:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	4313      	orrs	r3, r2
 800133c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2207      	movs	r2, #7
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	4013      	ands	r3, r2
 8001360:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	431a      	orrs	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	4313      	orrs	r3, r2
 8001384:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	400a      	ands	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ea:	d104      	bne.n	80013f6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	e018      	b.n	8001428 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d104      	bne.n	8001408 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	e00f      	b.n	8001428 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001408:	f001 fc3c 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 800140c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_DAC_ConfigChannel+0x27c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d904      	bls.n	8001420 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e003      	b.n	8001428 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001426:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	22c0      	movs	r2, #192	; 0xc0
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2201      	movs	r2, #1
 8001450:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	04c4b400 	.word	0x04c4b400

08001468 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f7ff fe8e 	bl	8001198 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	711a      	strb	r2, [r3, #4]
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff fe87 	bl	80011ac <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f043 0204 	orr.w	r2, r3, #4
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff fe7d 	bl	80011c0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	711a      	strb	r2, [r3, #4]
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff ffce 	bl	80014d4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	711a      	strb	r2, [r3, #4]
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f7ff ffc7 	bl	80014e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	f043 0204 	orr.w	r2, r3, #4
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff ffbd 	bl	80014fc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	711a      	strb	r2, [r3, #4]
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e08d      	b.n	80016be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_DMA_Init+0x138>)
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d80f      	bhi.n	80015ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b45      	ldr	r3, [pc, #276]	; (80016cc <HAL_DMA_Init+0x13c>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <HAL_DMA_Init+0x140>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	009a      	lsls	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a42      	ldr	r2, [pc, #264]	; (80016d4 <HAL_DMA_Init+0x144>)
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
 80015cc:	e00e      	b.n	80015ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <HAL_DMA_Init+0x148>)
 80015d6:	4413      	add	r3, r2
 80015d8:	4a3d      	ldr	r2, [pc, #244]	; (80016d0 <HAL_DMA_Init+0x140>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	009a      	lsls	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a3c      	ldr	r2, [pc, #240]	; (80016dc <HAL_DMA_Init+0x14c>)
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001606:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fa72 	bl	8001b28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800164c:	d102      	bne.n	8001654 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001668:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d010      	beq.n	8001694 <HAL_DMA_Init+0x104>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b04      	cmp	r3, #4
 8001678:	d80c      	bhi.n	8001694 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa92 	bl	8001ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	e008      	b.n	80016a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40020407 	.word	0x40020407
 80016cc:	bffdfff8 	.word	0xbffdfff8
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	40020000 	.word	0x40020000
 80016d8:	bffdfbf8 	.word	0xbffdfbf8
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_DMA_Start_IT+0x20>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e066      	b.n	80017ce <HAL_DMA_Start_IT+0xee>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d155      	bne.n	80017c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f9b6 	bl	8001aaa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	2b00      	cmp	r3, #0
 8001744:	d008      	beq.n	8001758 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 020e 	orr.w	r2, r2, #14
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e00f      	b.n	8001778 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0204 	bic.w	r2, r2, #4
 8001766:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 020a 	orr.w	r2, r2, #10
 8001776:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001794:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017ac:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e005      	b.n	80017cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
 80017ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d008      	beq.n	8001800 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2204      	movs	r2, #4
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e040      	b.n	8001882 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 020e 	bic.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800181e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f003 021c 	and.w	r2, r3, #28
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800184c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001864:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800186e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d005      	beq.n	80018b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2204      	movs	r2, #4
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e047      	b.n	8001942 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 020e 	bic.w	r2, r2, #14
 80018c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f003 021c 	and.w	r2, r3, #28
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018fe:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00c      	beq.n	8001922 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001916:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001920:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
    }
  }
  return status;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f003 031c 	and.w	r3, r3, #28
 800196c:	2204      	movs	r2, #4
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d026      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x7a>
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d021      	beq.n	80019c6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0204 	bic.w	r2, r2, #4
 800199e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f003 021c 	and.w	r2, r3, #28
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	2104      	movs	r1, #4
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d071      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80019c4:	e06c      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f003 031c 	and.w	r3, r3, #28
 80019ce:	2202      	movs	r2, #2
 80019d0:	409a      	lsls	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d02e      	beq.n	8001a38 <HAL_DMA_IRQHandler+0xec>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d029      	beq.n	8001a38 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10b      	bne.n	8001a0a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 020a 	bic.w	r2, r2, #10
 8001a00:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f003 021c 	and.w	r2, r3, #28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2102      	movs	r1, #2
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d038      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a36:	e033      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f003 031c 	and.w	r3, r3, #28
 8001a40:	2208      	movs	r2, #8
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d02a      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x156>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d025      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 020e 	bic.w	r2, r2, #14
 8001a64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 021c 	and.w	r2, r3, #28
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
}
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ac0:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ad2:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f003 021c 	and.w	r2, r3, #28
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d108      	bne.n	8001b0a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b08:	e007      	b.n	8001b1a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	60da      	str	r2, [r3, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d80a      	bhi.n	8001b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b48:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6493      	str	r3, [r2, #72]	; 0x48
 8001b50:	e007      	b.n	8001b62 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	009a      	lsls	r2, r3, #2
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b5c:	4413      	add	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3b08      	subs	r3, #8
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b78:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	2201      	movs	r2, #1
 8001b82:	409a      	lsls	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40020407 	.word	0x40020407
 8001b98:	4002081c 	.word	0x4002081c
 8001b9c:	cccccccd 	.word	0xcccccccd
 8001ba0:	40020880 	.word	0x40020880

08001ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	1000823f 	.word	0x1000823f
 8001be8:	40020940 	.word	0x40020940

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e166      	b.n	8001eca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8158 	beq.w	8001ec4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d005      	beq.n	8001c2c <HAL_GPIO_Init+0x40>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d130      	bne.n	8001c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c62:	2201      	movs	r2, #1
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f003 0201 	and.w	r2, r3, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d017      	beq.n	8001cca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d123      	bne.n	8001d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	6939      	ldr	r1, [r7, #16]
 8001d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0203 	and.w	r2, r3, #3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80b2 	beq.w	8001ec4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_GPIO_Init+0x2fc>)
 8001d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d64:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <HAL_GPIO_Init+0x2fc>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_GPIO_Init+0x2fc>)
 8001d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d78:	4a5c      	ldr	r2, [pc, #368]	; (8001eec <HAL_GPIO_Init+0x300>)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001da2:	d02b      	beq.n	8001dfc <HAL_GPIO_Init+0x210>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_GPIO_Init+0x304>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d025      	beq.n	8001df8 <HAL_GPIO_Init+0x20c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <HAL_GPIO_Init+0x308>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d01f      	beq.n	8001df4 <HAL_GPIO_Init+0x208>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_GPIO_Init+0x30c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d019      	beq.n	8001df0 <HAL_GPIO_Init+0x204>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x310>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <HAL_GPIO_Init+0x200>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x314>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_GPIO_Init+0x1fc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x318>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0x1f8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x31c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_GPIO_Init+0x1f4>
 8001ddc:	2307      	movs	r3, #7
 8001dde:	e00e      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001de0:	2308      	movs	r3, #8
 8001de2:	e00c      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001de4:	2306      	movs	r3, #6
 8001de6:	e00a      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001de8:	2305      	movs	r3, #5
 8001dea:	e008      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e006      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001df0:	2303      	movs	r3, #3
 8001df2:	e004      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	f002 0203 	and.w	r2, r2, #3
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	4093      	lsls	r3, r2
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0e:	4937      	ldr	r1, [pc, #220]	; (8001eec <HAL_GPIO_Init+0x300>)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e40:	4a32      	ldr	r2, [pc, #200]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e6a:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e94:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f47f ae91 	bne.w	8001bfc <HAL_GPIO_Init+0x10>
  }
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	48000800 	.word	0x48000800
 8001ef8:	48000c00 	.word	0x48000c00
 8001efc:	48001000 	.word	0x48001000
 8001f00:	48001400 	.word	0x48001400
 8001f04:	48001800 	.word	0x48001800
 8001f08:	48001c00 	.word	0x48001c00
 8001f0c:	40010400 	.word	0x40010400

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f50:	d102      	bne.n	8001f58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f56:	e00b      	b.n	8001f70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f66:	d102      	bne.n	8001f6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6c:	e000      	b.n	8001f70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40007000 	.word	0x40007000

08001f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d141      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f8e:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9a:	d131      	bne.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fa2:	4a46      	ldr	r2, [pc, #280]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb4:	4a41      	ldr	r2, [pc, #260]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fbc:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2232      	movs	r2, #50	; 0x32
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	4a3f      	ldr	r2, [pc, #252]	; (80020c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	0c9b      	lsrs	r3, r3, #18
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd2:	e002      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe6:	d102      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f2      	bne.n	8001fd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d158      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e057      	b.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002000:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002006:	4a2d      	ldr	r2, [pc, #180]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800200c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002010:	e04d      	b.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002018:	d141      	bne.n	800209e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002026:	d131      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2232      	movs	r2, #50	; 0x32
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	0c9b      	lsrs	r3, r3, #18
 800205a:	3301      	adds	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205e:	e002      	b.n	8002066 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3b01      	subs	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	d102      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f2      	bne.n	8002060 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002086:	d112      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e011      	b.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800209c:	e007      	b.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40007000 	.word	0x40007000
 80020c0:	20000620 	.word	0x20000620
 80020c4:	431bde83 	.word	0x431bde83

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	f000 bc16 	b.w	8002908 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020dc:	4ba0      	ldr	r3, [pc, #640]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e6:	4b9e      	ldr	r3, [pc, #632]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80e4 	beq.w	80022c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_RCC_OscConfig+0x4c>
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	f040 808b 	bne.w	8002222 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b01      	cmp	r3, #1
 8002110:	f040 8087 	bne.w	8002222 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002114:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_OscConfig+0x64>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e3ed      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <HAL_RCC_OscConfig+0x7e>
 800213c:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002144:	e005      	b.n	8002152 <HAL_RCC_OscConfig+0x8a>
 8002146:	4b86      	ldr	r3, [pc, #536]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002152:	4293      	cmp	r3, r2
 8002154:	d223      	bcs.n	800219e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fdca 	bl	8002cf4 <RCC_SetFlashLatencyFromMSIRange>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e3ce      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216a:	4b7d      	ldr	r3, [pc, #500]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7c      	ldr	r2, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b7a      	ldr	r3, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4977      	ldr	r1, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002188:	4b75      	ldr	r3, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	4972      	ldr	r1, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
 800219c:	e025      	b.n	80021ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800219e:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6f      	ldr	r2, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	496a      	ldr	r1, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	4965      	ldr	r1, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fd8a 	bl	8002cf4 <RCC_SetFlashLatencyFromMSIRange>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e38e      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ea:	f000 fcbf 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	495a      	ldr	r1, [pc, #360]	; (8002364 <HAL_RCC_OscConfig+0x29c>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_OscConfig+0x2a0>)
 8002208:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800220a:	4b58      	ldr	r3, [pc, #352]	; (800236c <HAL_RCC_OscConfig+0x2a4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fce8 	bl	8000be4 <HAL_InitTick>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d052      	beq.n	80022c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	e372      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d032      	beq.n	8002290 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002236:	f7fe fd25 	bl	8000c84 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223e:	f7fe fd21 	bl	8000c84 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e35b      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002250:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225c:	4b40      	ldr	r3, [pc, #256]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3f      	ldr	r2, [pc, #252]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	493a      	ldr	r1, [pc, #232]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
 800228e:	e01a      	b.n	80022c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a32      	ldr	r2, [pc, #200]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800229c:	f7fe fcf2 	bl	8000c84 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a4:	f7fe fcee 	bl	8000c84 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e328      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1dc>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d073      	beq.n	80023ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_OscConfig+0x21c>
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d10e      	bne.n	80022fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d10b      	bne.n	80022fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d063      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d15f      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e305      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d106      	bne.n	8002314 <HAL_RCC_OscConfig+0x24c>
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e01d      	b.n	8002350 <HAL_RCC_OscConfig+0x288>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x270>
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0x288>
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800233e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a05      	ldr	r2, [pc, #20]	; (8002360 <HAL_RCC_OscConfig+0x298>)
 800234a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7fe fc94 	bl	8000c84 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235e:	e010      	b.n	8002382 <HAL_RCC_OscConfig+0x2ba>
 8002360:	40021000 	.word	0x40021000
 8002364:	08009a78 	.word	0x08009a78
 8002368:	20000620 	.word	0x20000620
 800236c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fc88 	bl	8000c84 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e2c2      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	4baf      	ldr	r3, [pc, #700]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x2a8>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fc78 	bl	8000c84 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7fe fc74 	bl	8000c84 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e2ae      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023aa:	4ba5      	ldr	r3, [pc, #660]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x2d0>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d060      	beq.n	8002488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_OscConfig+0x310>
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d119      	bne.n	8002406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d116      	bne.n	8002406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d8:	4b99      	ldr	r3, [pc, #612]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_OscConfig+0x328>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e28b      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b93      	ldr	r3, [pc, #588]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	4990      	ldr	r1, [pc, #576]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002404:	e040      	b.n	8002488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d023      	beq.n	8002456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240e:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a8b      	ldr	r2, [pc, #556]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fc33 	bl	8000c84 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe fc2f 	bl	8000c84 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e269      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002434:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	497c      	ldr	r1, [pc, #496]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
 8002454:	e018      	b.n	8002488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b7a      	ldr	r3, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a79      	ldr	r2, [pc, #484]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800245c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fc0f 	bl	8000c84 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fc0b 	bl	8000c84 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e245      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d03c      	beq.n	800250e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01c      	beq.n	80024d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fbea 	bl	8000c84 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe fbe6 	bl	8000c84 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e220      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c6:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80024c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ef      	beq.n	80024b4 <HAL_RCC_OscConfig+0x3ec>
 80024d4:	e01b      	b.n	800250e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d6:	4b5a      	ldr	r3, [pc, #360]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80024d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe fbcd 	bl	8000c84 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe fbc9 	bl	8000c84 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e203      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002500:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ef      	bne.n	80024ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80a6 	beq.w	8002668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002520:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10d      	bne.n	8002548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b44      	ldr	r3, [pc, #272]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a43      	ldr	r2, [pc, #268]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002544:	2301      	movs	r3, #1
 8002546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <HAL_RCC_OscConfig+0x57c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d118      	bne.n	8002586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCC_OscConfig+0x57c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_RCC_OscConfig+0x57c>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002560:	f7fe fb90 	bl	8000c84 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fb8c 	bl	8000c84 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1c6      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCC_OscConfig+0x57c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4d8>
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259e:	e024      	b.n	80025ea <HAL_RCC_OscConfig+0x522>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d110      	bne.n	80025ca <HAL_RCC_OscConfig+0x502>
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	4a24      	ldr	r2, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c8:	e00f      	b.n	80025ea <HAL_RCC_OscConfig+0x522>
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fb47 	bl	8000c84 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fb43 	bl	8000c84 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e17b      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x578>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ed      	beq.n	80025fa <HAL_RCC_OscConfig+0x532>
 800261e:	e01a      	b.n	8002656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fb30 	bl	8000c84 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002626:	e00f      	b.n	8002648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fb2c 	bl	8000c84 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d906      	bls.n	8002648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e164      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002648:	4ba8      	ldr	r3, [pc, #672]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e8      	bne.n	8002628 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002656:	7ffb      	ldrb	r3, [r7, #31]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4ba3      	ldr	r3, [pc, #652]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4aa2      	ldr	r2, [pc, #648]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d03c      	beq.n	80026ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800267c:	4b9b      	ldr	r3, [pc, #620]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800267e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002682:	4a9a      	ldr	r2, [pc, #616]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fafa 	bl	8000c84 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002694:	f7fe faf6 	bl	8000c84 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e130      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026a6:	4b91      	ldr	r3, [pc, #580]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80026a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ef      	beq.n	8002694 <HAL_RCC_OscConfig+0x5cc>
 80026b4:	e01b      	b.n	80026ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026b6:	4b8d      	ldr	r3, [pc, #564]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80026b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026bc:	4a8b      	ldr	r2, [pc, #556]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fadd 	bl	8000c84 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ce:	f7fe fad9 	bl	8000c84 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e113      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026e0:	4b82      	ldr	r3, [pc, #520]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80026e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ef      	bne.n	80026ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8107 	beq.w	8002906 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	f040 80cb 	bne.w	8002898 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002702:	4b7a      	ldr	r3, [pc, #488]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0203 	and.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	429a      	cmp	r2, r3
 8002714:	d12c      	bne.n	8002770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	3b01      	subs	r3, #1
 8002722:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d123      	bne.n	8002770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d11b      	bne.n	8002770 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d113      	bne.n	8002770 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	3b01      	subs	r3, #1
 8002756:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d109      	bne.n	8002770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	3b01      	subs	r3, #1
 800276a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d06d      	beq.n	800284c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d068      	beq.n	8002848 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002776:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002782:	4b5a      	ldr	r3, [pc, #360]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0ba      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002792:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a55      	ldr	r2, [pc, #340]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800279e:	f7fe fa71 	bl	8000c84 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fa6d 	bl	8000c84 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0a7      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b8:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c4:	4b49      	ldr	r3, [pc, #292]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <HAL_RCC_OscConfig+0x828>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027d4:	3a01      	subs	r2, #1
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	4311      	orrs	r1, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027de:	0212      	lsls	r2, r2, #8
 80027e0:	4311      	orrs	r1, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027e6:	0852      	lsrs	r2, r2, #1
 80027e8:	3a01      	subs	r2, #1
 80027ea:	0552      	lsls	r2, r2, #21
 80027ec:	4311      	orrs	r1, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027f2:	0852      	lsrs	r2, r2, #1
 80027f4:	3a01      	subs	r2, #1
 80027f6:	0652      	lsls	r2, r2, #25
 80027f8:	4311      	orrs	r1, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027fe:	06d2      	lsls	r2, r2, #27
 8002800:	430a      	orrs	r2, r1
 8002802:	493a      	ldr	r1, [pc, #232]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002804:	4313      	orrs	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002808:	4b38      	ldr	r3, [pc, #224]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a37      	ldr	r2, [pc, #220]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800280e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002812:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002814:	4b35      	ldr	r3, [pc, #212]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a34      	ldr	r2, [pc, #208]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800281a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002820:	f7fe fa30 	bl	8000c84 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fa2c 	bl	8000c84 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e066      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002846:	e05e      	b.n	8002906 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e05d      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d156      	bne.n	8002906 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a23      	ldr	r2, [pc, #140]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002870:	f7fe fa08 	bl	8000c84 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe fa04 	bl	8000c84 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e03e      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x7b0>
 8002896:	e036      	b.n	8002906 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d031      	beq.n	8002902 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80028a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80028bc:	f023 0303 	bic.w	r3, r3, #3
 80028c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_OscConfig+0x824>)
 80028c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe f9d7 	bl	8000c84 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d8:	e00c      	b.n	80028f4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe f9d3 	bl	8000c84 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d905      	bls.n	80028f4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e00d      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_OscConfig+0x848>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ec      	bne.n	80028da <HAL_RCC_OscConfig+0x812>
 8002900:	e001      	b.n	8002906 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e10f      	b.n	8002b4c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b89      	ldr	r3, [pc, #548]	; (8002b54 <HAL_RCC_ClockConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d910      	bls.n	800295c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b86      	ldr	r3, [pc, #536]	; (8002b54 <HAL_RCC_ClockConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 020f 	bic.w	r2, r3, #15
 8002942:	4984      	ldr	r1, [pc, #528]	; (8002b54 <HAL_RCC_ClockConfig+0x240>)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_RCC_ClockConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0f7      	b.n	8002b4c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8089 	beq.w	8002a7c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d133      	bne.n	80029da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	4b79      	ldr	r3, [pc, #484]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0e4      	b.n	8002b4c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002982:	f000 fa11 	bl	8002da8 <RCC_GetSysClockFreqFromPLLSource>
 8002986:	4603      	mov	r3, r0
 8002988:	4a74      	ldr	r2, [pc, #464]	; (8002b5c <HAL_RCC_ClockConfig+0x248>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d955      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800298e:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800299a:	4b6f      	ldr	r3, [pc, #444]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a2:	4a6d      	ldr	r2, [pc, #436]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 80029a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e044      	b.n	8002a3a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03e      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x126>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d13a      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029c4:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029cc:	4a62      	ldr	r2, [pc, #392]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 80029ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e02f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029e2:	4b5d      	ldr	r3, [pc, #372]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0ac      	b.n	8002b4c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029fa:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0a0      	b.n	8002b4c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0a:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e098      	b.n	8002b4c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a1a:	f000 f8a7 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4a4e      	ldr	r2, [pc, #312]	; (8002b5c <HAL_RCC_ClockConfig+0x248>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d909      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a26:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2e:	4a4a      	ldr	r2, [pc, #296]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4944      	ldr	r1, [pc, #272]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe f91a 	bl	8000c84 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7fe f916 	bl	8000c84 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e070      	b.n	8002b4c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4930      	ldr	r1, [pc, #192]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b80      	cmp	r3, #128	; 0x80
 8002aa0:	d105      	bne.n	8002aae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002aa2:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_RCC_ClockConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d210      	bcs.n	8002ade <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_RCC_ClockConfig+0x240>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 020f 	bic.w	r2, r3, #15
 8002ac4:	4923      	ldr	r1, [pc, #140]	; (8002b54 <HAL_RCC_ClockConfig+0x240>)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_RCC_ClockConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e036      	b.n	8002b4c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	4918      	ldr	r1, [pc, #96]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4910      	ldr	r1, [pc, #64]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b1c:	f000 f826 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_RCC_ClockConfig+0x244>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <HAL_RCC_ClockConfig+0x24c>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x250>)
 8002b3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x254>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe f84f 	bl	8000be4 <HAL_InitTick>
 8002b46:	4603      	mov	r3, r0
 8002b48:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40022000 	.word	0x40022000
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	04c4b400 	.word	0x04c4b400
 8002b60:	08009a78 	.word	0x08009a78
 8002b64:	20000620 	.word	0x20000620
 8002b68:	20000000 	.word	0x20000000

08002b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b84:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d121      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d11e      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ba0:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bac:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e005      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d102      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e004      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bf0:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d134      	bne.n	8002c64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d003      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0xac>
 8002c10:	e005      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c14:	617b      	str	r3, [r7, #20]
      break;
 8002c16:	e005      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c1a:	617b      	str	r3, [r7, #20]
      break;
 8002c1c:	e002      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	617b      	str	r3, [r7, #20]
      break;
 8002c22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3301      	adds	r3, #1
 8002c30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	fb02 f203 	mul.w	r2, r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	0e5b      	lsrs	r3, r3, #25
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	3301      	adds	r3, #1
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c64:	69bb      	ldr	r3, [r7, #24]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08009a90 	.word	0x08009a90
 8002c7c:	00f42400 	.word	0x00f42400
 8002c80:	007a1200 	.word	0x007a1200

08002c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000620 	.word	0x20000620

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ca0:	f7ff fff0 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4904      	ldr	r1, [pc, #16]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	08009a88 	.word	0x08009a88

08002cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ccc:	f7ff ffda 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0adb      	lsrs	r3, r3, #11
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4904      	ldr	r1, [pc, #16]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	08009a88 	.word	0x08009a88

08002cf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d0c:	f7ff f918 	bl	8001f40 <HAL_PWREx_GetVoltageRange>
 8002d10:	6178      	str	r0, [r7, #20]
 8002d12:	e014      	b.n	8002d3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d2c:	f7ff f908 	bl	8001f40 <HAL_PWREx_GetVoltageRange>
 8002d30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d44:	d10b      	bne.n	8002d5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b80      	cmp	r3, #128	; 0x80
 8002d4a:	d913      	bls.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d50:	d902      	bls.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d52:	2302      	movs	r3, #2
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	e00d      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d58:	2301      	movs	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	e00a      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b7f      	cmp	r3, #127	; 0x7f
 8002d62:	d902      	bls.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d64:	2302      	movs	r3, #2
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e004      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b70      	cmp	r3, #112	; 0x70
 8002d6e:	d101      	bne.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d70:	2301      	movs	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 020f 	bic.w	r2, r3, #15
 8002d7c:	4909      	ldr	r1, [pc, #36]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40022000 	.word	0x40022000

08002da8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d118      	bne.n	8002df0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dca:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e005      	b.n	8002de6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002de6:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d003      	beq.n	8002e08 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d003      	beq.n	8002e0e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002e06:	e005      	b.n	8002e14 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e08:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e0a:	613b      	str	r3, [r7, #16]
    break;
 8002e0c:	e005      	b.n	8002e1a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002e10:	613b      	str	r3, [r7, #16]
    break;
 8002e12:	e002      	b.n	8002e1a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	613b      	str	r3, [r7, #16]
    break;
 8002e18:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	3301      	adds	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	fb02 f203 	mul.w	r2, r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0e5b      	lsrs	r3, r3, #25
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e5a:	683b      	ldr	r3, [r7, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08009a90 	.word	0x08009a90
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e80:	2300      	movs	r3, #0
 8002e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e84:	2300      	movs	r3, #0
 8002e86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d040      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e98:	2b80      	cmp	r3, #128	; 0x80
 8002e9a:	d02a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d825      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ea0:	2b60      	cmp	r3, #96	; 0x60
 8002ea2:	d026      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ea4:	2b60      	cmp	r3, #96	; 0x60
 8002ea6:	d821      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d006      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d81d      	bhi.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d010      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002eb8:	e018      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eba:	4b89      	ldr	r3, [pc, #548]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a88      	ldr	r2, [pc, #544]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec6:	e015      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fb02 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed8:	e00c      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3320      	adds	r3, #32
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fbed 	bl	80036c0 <RCCEx_PLLSAI2_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eea:	e003      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	74fb      	strb	r3, [r7, #19]
      break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efa:	4b79      	ldr	r3, [pc, #484]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f00:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f08:	4975      	ldr	r1, [pc, #468]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f10:	e001      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d047      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d030      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d82a      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f36:	d02a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f3c:	d824      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f42:	d008      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f48:	d81e      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f52:	d010      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f54:	e018      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f56:	4b62      	ldr	r3, [pc, #392]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4a61      	ldr	r2, [pc, #388]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f62:	e015      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fab4 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f74:	e00c      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3320      	adds	r3, #32
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fb9f 	bl	80036c0 <RCCEx_PLLSAI2_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f86:	e003      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	74fb      	strb	r3, [r7, #19]
      break;
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f96:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	494e      	ldr	r1, [pc, #312]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fac:	e001      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 809f 	beq.w	80030fe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	4a40      	ldr	r2, [pc, #256]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003002:	f7fd fe3f 	bl	8000c84 <HAL_GetTick>
 8003006:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003008:	e009      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300a:	f7fd fe3b 	bl	8000c84 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d902      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	74fb      	strb	r3, [r7, #19]
        break;
 800301c:	e005      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301e:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ef      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d15b      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003030:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01f      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	429a      	cmp	r2, r3
 800304c:	d019      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800307a:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d016      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fd fdfa 	bl	8000c84 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	e00b      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fd fdf6 	bl	8000c84 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d902      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	74fb      	strb	r3, [r7, #19]
            break;
 80030aa:	e006      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0ec      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10c      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	4903      	ldr	r1, [pc, #12]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d8:	e008      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
 80030de:	e005      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ec:	7c7b      	ldrb	r3, [r7, #17]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4ba0      	ldr	r3, [pc, #640]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	4a9f      	ldr	r2, [pc, #636]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800310a:	4b9a      	ldr	r3, [pc, #616]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f023 0203 	bic.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	4996      	ldr	r1, [pc, #600]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800312c:	4b91      	ldr	r3, [pc, #580]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	f023 020c 	bic.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	498e      	ldr	r1, [pc, #568]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800314e:	4b89      	ldr	r3, [pc, #548]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	4985      	ldr	r1, [pc, #532]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003170:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	497d      	ldr	r1, [pc, #500]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003192:	4b78      	ldr	r3, [pc, #480]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a0:	4974      	ldr	r1, [pc, #464]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031b4:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	496c      	ldr	r1, [pc, #432]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d6:	4b67      	ldr	r3, [pc, #412]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e4:	4963      	ldr	r1, [pc, #396]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031f8:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003206:	495b      	ldr	r1, [pc, #364]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003220:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	4952      	ldr	r1, [pc, #328]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800323c:	4b4d      	ldr	r3, [pc, #308]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	494a      	ldr	r1, [pc, #296]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800325e:	4b45      	ldr	r3, [pc, #276]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	4941      	ldr	r1, [pc, #260]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003280:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	4939      	ldr	r1, [pc, #228]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d028      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a2:	4b34      	ldr	r3, [pc, #208]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b0:	4930      	ldr	r1, [pc, #192]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032cc:	60d3      	str	r3, [r2, #12]
 80032ce:	e011      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	2101      	movs	r1, #1
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f8f9 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d04d      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003308:	d108      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003316:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800331a:	e012      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003328:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800333a:	490e      	ldr	r1, [pc, #56]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800334a:	d106      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003356:	60d3      	str	r3, [r2, #12]
 8003358:	e020      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003362:	d109      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a02      	ldr	r2, [pc, #8]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	60d3      	str	r3, [r2, #12]
 8003370:	e014      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f8a5 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d028      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a8:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b6:	4947      	ldr	r1, [pc, #284]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c6:	d106      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c8:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a41      	ldr	r2, [pc, #260]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d2:	60d3      	str	r3, [r2, #12]
 80033d4:	e011      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033de:	d10c      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f876 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01e      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003406:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003416:	492f      	ldr	r1, [pc, #188]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2102      	movs	r1, #2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f851 	bl	80034d8 <RCCEx_PLLSAI1_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003456:	f023 0204 	bic.w	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003460:	491c      	ldr	r1, [pc, #112]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00b      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003474:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003476:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800347a:	f023 0218 	bic.w	r2, r3, #24
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	4913      	ldr	r1, [pc, #76]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d017      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800349e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a8:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ba:	d105      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000

080034d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034e6:	4b72      	ldr	r3, [pc, #456]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00e      	beq.n	8003510 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034f2:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0203 	and.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d103      	bne.n	800350a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
       ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	d142      	bne.n	8003590 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e03f      	b.n	8003590 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d018      	beq.n	800354a <RCCEx_PLLSAI1_Config+0x72>
 8003518:	2b03      	cmp	r3, #3
 800351a:	d825      	bhi.n	8003568 <RCCEx_PLLSAI1_Config+0x90>
 800351c:	2b01      	cmp	r3, #1
 800351e:	d002      	beq.n	8003526 <RCCEx_PLLSAI1_Config+0x4e>
 8003520:	2b02      	cmp	r3, #2
 8003522:	d009      	beq.n	8003538 <RCCEx_PLLSAI1_Config+0x60>
 8003524:	e020      	b.n	8003568 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003526:	4b62      	ldr	r3, [pc, #392]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003536:	e01a      	b.n	800356e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003538:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d116      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003548:	e013      	b.n	8003572 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800354a:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003556:	4b56      	ldr	r3, [pc, #344]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003566:	e006      	b.n	8003576 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      break;
 800356c:	e004      	b.n	8003578 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003576:	bf00      	nop
    }

    if(status == HAL_OK)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800357e:	4b4c      	ldr	r3, [pc, #304]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4949      	ldr	r1, [pc, #292]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800358c:	4313      	orrs	r3, r2
 800358e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 8086 	bne.w	80036a4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003598:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800359e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a4:	f7fd fb6e 	bl	8000c84 <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035aa:	e009      	b.n	80035c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ac:	f7fd fb6a 	bl	8000c84 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d902      	bls.n	80035c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	73fb      	strb	r3, [r7, #15]
        break;
 80035be:	e005      	b.n	80035cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035c0:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ef      	bne.n	80035ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d168      	bne.n	80036a4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035de:	4013      	ands	r3, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	0211      	lsls	r1, r2, #8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68d2      	ldr	r2, [r2, #12]
 80035ea:	06d2      	lsls	r2, r2, #27
 80035ec:	4311      	orrs	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6852      	ldr	r2, [r2, #4]
 80035f2:	3a01      	subs	r2, #1
 80035f4:	0112      	lsls	r2, r2, #4
 80035f6:	430a      	orrs	r2, r1
 80035f8:	492d      	ldr	r1, [pc, #180]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]
 80035fe:	e02d      	b.n	800365c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d115      	bne.n	8003632 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6892      	ldr	r2, [r2, #8]
 8003612:	0211      	lsls	r1, r2, #8
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6912      	ldr	r2, [r2, #16]
 8003618:	0852      	lsrs	r2, r2, #1
 800361a:	3a01      	subs	r2, #1
 800361c:	0552      	lsls	r2, r2, #21
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6852      	ldr	r2, [r2, #4]
 8003624:	3a01      	subs	r2, #1
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	430a      	orrs	r2, r1
 800362a:	4921      	ldr	r1, [pc, #132]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362c:	4313      	orrs	r3, r2
 800362e:	610b      	str	r3, [r1, #16]
 8003630:	e014      	b.n	800365c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003632:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6892      	ldr	r2, [r2, #8]
 800363e:	0211      	lsls	r1, r2, #8
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6952      	ldr	r2, [r2, #20]
 8003644:	0852      	lsrs	r2, r2, #1
 8003646:	3a01      	subs	r2, #1
 8003648:	0652      	lsls	r2, r2, #25
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6852      	ldr	r2, [r2, #4]
 8003650:	3a01      	subs	r2, #1
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	430a      	orrs	r2, r1
 8003656:	4916      	ldr	r1, [pc, #88]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800365c:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003662:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003666:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fd fb0c 	bl	8000c84 <HAL_GetTick>
 800366c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800366e:	e009      	b.n	8003684 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003670:	f7fd fb08 	bl	8000c84 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d902      	bls.n	8003684 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	73fb      	strb	r3, [r7, #15]
          break;
 8003682:	e005      	b.n	8003690 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	4904      	ldr	r1, [pc, #16]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000
 80036b4:	07ff800f 	.word	0x07ff800f
 80036b8:	ff9f800f 	.word	0xff9f800f
 80036bc:	f9ff800f 	.word	0xf9ff800f

080036c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ce:	4b72      	ldr	r3, [pc, #456]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00e      	beq.n	80036f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036da:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0203 	and.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d103      	bne.n	80036f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
       ||
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d142      	bne.n	8003778 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e03f      	b.n	8003778 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d018      	beq.n	8003732 <RCCEx_PLLSAI2_Config+0x72>
 8003700:	2b03      	cmp	r3, #3
 8003702:	d825      	bhi.n	8003750 <RCCEx_PLLSAI2_Config+0x90>
 8003704:	2b01      	cmp	r3, #1
 8003706:	d002      	beq.n	800370e <RCCEx_PLLSAI2_Config+0x4e>
 8003708:	2b02      	cmp	r3, #2
 800370a:	d009      	beq.n	8003720 <RCCEx_PLLSAI2_Config+0x60>
 800370c:	e020      	b.n	8003750 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800370e:	4b62      	ldr	r3, [pc, #392]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11d      	bne.n	8003756 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371e:	e01a      	b.n	8003756 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003720:	4b5d      	ldr	r3, [pc, #372]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d116      	bne.n	800375a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003730:	e013      	b.n	800375a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003732:	4b59      	ldr	r3, [pc, #356]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800373e:	4b56      	ldr	r3, [pc, #344]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800374e:	e006      	b.n	800375e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      break;
 8003754:	e004      	b.n	8003760 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800375e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d108      	bne.n	8003778 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003766:	4b4c      	ldr	r3, [pc, #304]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4949      	ldr	r1, [pc, #292]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 8086 	bne.w	800388c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003780:	4b45      	ldr	r3, [pc, #276]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a44      	ldr	r2, [pc, #272]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800378a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378c:	f7fd fa7a 	bl	8000c84 <HAL_GetTick>
 8003790:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003792:	e009      	b.n	80037a8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003794:	f7fd fa76 	bl	8000c84 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d902      	bls.n	80037a8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	73fb      	strb	r3, [r7, #15]
        break;
 80037a6:	e005      	b.n	80037b4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037a8:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ef      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d168      	bne.n	800388c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d113      	bne.n	80037e8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037c0:	4b35      	ldr	r3, [pc, #212]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	4b35      	ldr	r3, [pc, #212]	; (800389c <RCCEx_PLLSAI2_Config+0x1dc>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	0211      	lsls	r1, r2, #8
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	06d2      	lsls	r2, r2, #27
 80037d4:	4311      	orrs	r1, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6852      	ldr	r2, [r2, #4]
 80037da:	3a01      	subs	r2, #1
 80037dc:	0112      	lsls	r2, r2, #4
 80037de:	430a      	orrs	r2, r1
 80037e0:	492d      	ldr	r1, [pc, #180]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	614b      	str	r3, [r1, #20]
 80037e6:	e02d      	b.n	8003844 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d115      	bne.n	800381a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037ee:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <RCCEx_PLLSAI2_Config+0x1e0>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6892      	ldr	r2, [r2, #8]
 80037fa:	0211      	lsls	r1, r2, #8
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6912      	ldr	r2, [r2, #16]
 8003800:	0852      	lsrs	r2, r2, #1
 8003802:	3a01      	subs	r2, #1
 8003804:	0552      	lsls	r2, r2, #21
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6852      	ldr	r2, [r2, #4]
 800380c:	3a01      	subs	r2, #1
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	430a      	orrs	r2, r1
 8003812:	4921      	ldr	r1, [pc, #132]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	614b      	str	r3, [r1, #20]
 8003818:	e014      	b.n	8003844 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6892      	ldr	r2, [r2, #8]
 8003826:	0211      	lsls	r1, r2, #8
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6952      	ldr	r2, [r2, #20]
 800382c:	0852      	lsrs	r2, r2, #1
 800382e:	3a01      	subs	r2, #1
 8003830:	0652      	lsls	r2, r2, #25
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6852      	ldr	r2, [r2, #4]
 8003838:	3a01      	subs	r2, #1
 800383a:	0112      	lsls	r2, r2, #4
 800383c:	430a      	orrs	r2, r1
 800383e:	4916      	ldr	r1, [pc, #88]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003840:	4313      	orrs	r3, r2
 8003842:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003844:	4b14      	ldr	r3, [pc, #80]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a13      	ldr	r2, [pc, #76]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7fd fa18 	bl	8000c84 <HAL_GetTick>
 8003854:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003856:	e009      	b.n	800386c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003858:	f7fd fa14 	bl	8000c84 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d902      	bls.n	800386c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	73fb      	strb	r3, [r7, #15]
          break;
 800386a:	e005      	b.n	8003878 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0ef      	beq.n	8003858 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	4904      	ldr	r1, [pc, #16]	; (8003898 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	07ff800f 	.word	0x07ff800f
 80038a0:	ff9f800f 	.word	0xff9f800f
 80038a4:	f9ff800f 	.word	0xf9ff800f

080038a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e049      	b.n	800394e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f004 fbf0 	bl	80080b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 fdde 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d001      	beq.n	8003970 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e047      	b.n	8003a00 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <HAL_TIM_Base_Start+0xb4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01d      	beq.n	80039be <HAL_TIM_Base_Start+0x66>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398a:	d018      	beq.n	80039be <HAL_TIM_Base_Start+0x66>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <HAL_TIM_Base_Start+0xb8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_TIM_Base_Start+0x66>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <HAL_TIM_Base_Start+0xbc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00e      	beq.n	80039be <HAL_TIM_Base_Start+0x66>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <HAL_TIM_Base_Start+0xc0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_TIM_Base_Start+0x66>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_TIM_Base_Start+0xc4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d004      	beq.n	80039be <HAL_TIM_Base_Start+0x66>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <HAL_TIM_Base_Start+0xc8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d115      	bne.n	80039ea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <HAL_TIM_Base_Start+0xcc>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b06      	cmp	r3, #6
 80039ce:	d015      	beq.n	80039fc <HAL_TIM_Base_Start+0xa4>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d6:	d011      	beq.n	80039fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	e008      	b.n	80039fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e000      	b.n	80039fe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40012c00 	.word	0x40012c00
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40013400 	.word	0x40013400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	00010007 	.word	0x00010007

08003a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d001      	beq.n	8003a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e04f      	b.n	8003ae0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a23      	ldr	r2, [pc, #140]	; (8003aec <HAL_TIM_Base_Start_IT+0xc4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <HAL_TIM_Base_Start_IT+0x76>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d018      	beq.n	8003a9e <HAL_TIM_Base_Start_IT+0x76>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_TIM_Base_Start_IT+0x76>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_TIM_Base_Start_IT+0x76>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1c      	ldr	r2, [pc, #112]	; (8003af8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_TIM_Base_Start_IT+0x76>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_TIM_Base_Start_IT+0xd4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIM_Base_Start_IT+0x76>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d115      	bne.n	8003aca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_TIM_Base_Start_IT+0xdc>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d015      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0xb4>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d011      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	e008      	b.n	8003adc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e000      	b.n	8003ade <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003adc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800
 8003af8:	40000c00 	.word	0x40000c00
 8003afc:	40013400 	.word	0x40013400
 8003b00:	40014000 	.word	0x40014000
 8003b04:	00010007 	.word	0x00010007

08003b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e049      	b.n	8003bae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f841 	bl	8003bb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 fcae 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_TIM_PWM_Start+0x24>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e03c      	b.n	8003c6a <HAL_TIM_PWM_Start+0x9e>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d109      	bne.n	8003c0a <HAL_TIM_PWM_Start+0x3e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e02f      	b.n	8003c6a <HAL_TIM_PWM_Start+0x9e>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d109      	bne.n	8003c24 <HAL_TIM_PWM_Start+0x58>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e022      	b.n	8003c6a <HAL_TIM_PWM_Start+0x9e>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	d109      	bne.n	8003c3e <HAL_TIM_PWM_Start+0x72>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	e015      	b.n	8003c6a <HAL_TIM_PWM_Start+0x9e>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d109      	bne.n	8003c58 <HAL_TIM_PWM_Start+0x8c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	bf14      	ite	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	2300      	moveq	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	e008      	b.n	8003c6a <HAL_TIM_PWM_Start+0x9e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	bf14      	ite	ne
 8003c64:	2301      	movne	r3, #1
 8003c66:	2300      	moveq	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e09c      	b.n	8003dac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xb6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c80:	e023      	b.n	8003cca <HAL_TIM_PWM_Start+0xfe>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0xc6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c90:	e01b      	b.n	8003cca <HAL_TIM_PWM_Start+0xfe>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start+0xd6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca0:	e013      	b.n	8003cca <HAL_TIM_PWM_Start+0xfe>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d104      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xe6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cb0:	e00b      	b.n	8003cca <HAL_TIM_PWM_Start+0xfe>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0xf6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc0:	e003      	b.n	8003cca <HAL_TIM_PWM_Start+0xfe>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f885 	bl	8004de2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a35      	ldr	r2, [pc, #212]	; (8003db4 <HAL_TIM_PWM_Start+0x1e8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x13e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <HAL_TIM_PWM_Start+0x1ec>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x13e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a32      	ldr	r2, [pc, #200]	; (8003dbc <HAL_TIM_PWM_Start+0x1f0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x13e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a31      	ldr	r2, [pc, #196]	; (8003dc0 <HAL_TIM_PWM_Start+0x1f4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x13e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <HAL_TIM_PWM_Start+0x1f8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x142>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <HAL_TIM_PWM_Start+0x144>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <HAL_TIM_PWM_Start+0x1e8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01d      	beq.n	8003d6a <HAL_TIM_PWM_Start+0x19e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d36:	d018      	beq.n	8003d6a <HAL_TIM_PWM_Start+0x19e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <HAL_TIM_PWM_Start+0x1fc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_TIM_PWM_Start+0x19e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <HAL_TIM_PWM_Start+0x200>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_TIM_PWM_Start+0x19e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <HAL_TIM_PWM_Start+0x204>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_TIM_PWM_Start+0x19e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_TIM_PWM_Start+0x1ec>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_TIM_PWM_Start+0x19e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_TIM_PWM_Start+0x1f0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d115      	bne.n	8003d96 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <HAL_TIM_PWM_Start+0x208>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b06      	cmp	r3, #6
 8003d7a:	d015      	beq.n	8003da8 <HAL_TIM_PWM_Start+0x1dc>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d82:	d011      	beq.n	8003da8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d94:	e008      	b.n	8003da8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e000      	b.n	8003daa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40013400 	.word	0x40013400
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	00010007 	.word	0x00010007

08003dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d122      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d11b      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0202 	mvn.w	r2, #2
 8003e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fb25 	bl	800446a <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fb17 	bl	8004456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fb28 	bl	800447e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d122      	bne.n	8003e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d11b      	bne.n	8003e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0204 	mvn.w	r2, #4
 8003e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fafb 	bl	800446a <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 faed 	bl	8004456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fafe 	bl	800447e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d122      	bne.n	8003edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d11b      	bne.n	8003edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0208 	mvn.w	r2, #8
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fad1 	bl	800446a <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fac3 	bl	8004456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fad4 	bl	800447e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b10      	cmp	r3, #16
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0210 	mvn.w	r2, #16
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2208      	movs	r2, #8
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 faa7 	bl	800446a <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa99 	bl	8004456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 faaa 	bl	800447e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d10e      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d107      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0201 	mvn.w	r2, #1
 8003f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f003 fed8 	bl	8007d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d10e      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b80      	cmp	r3, #128	; 0x80
 8003f76:	d107      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 ffe4 	bl	8004f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d10e      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 ffd7 	bl	8004f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b40      	cmp	r3, #64	; 0x40
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fa58 	bl	8004492 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d10e      	bne.n	800400e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d107      	bne.n	800400e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0220 	mvn.w	r2, #32
 8004006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 ff97 	bl	8004f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004032:	2302      	movs	r3, #2
 8004034:	e0ff      	b.n	8004236 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b14      	cmp	r3, #20
 8004042:	f200 80f0 	bhi.w	8004226 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	080040a1 	.word	0x080040a1
 8004050:	08004227 	.word	0x08004227
 8004054:	08004227 	.word	0x08004227
 8004058:	08004227 	.word	0x08004227
 800405c:	080040e1 	.word	0x080040e1
 8004060:	08004227 	.word	0x08004227
 8004064:	08004227 	.word	0x08004227
 8004068:	08004227 	.word	0x08004227
 800406c:	08004123 	.word	0x08004123
 8004070:	08004227 	.word	0x08004227
 8004074:	08004227 	.word	0x08004227
 8004078:	08004227 	.word	0x08004227
 800407c:	08004163 	.word	0x08004163
 8004080:	08004227 	.word	0x08004227
 8004084:	08004227 	.word	0x08004227
 8004088:	08004227 	.word	0x08004227
 800408c:	080041a5 	.word	0x080041a5
 8004090:	08004227 	.word	0x08004227
 8004094:	08004227 	.word	0x08004227
 8004098:	08004227 	.word	0x08004227
 800409c:	080041e5 	.word	0x080041e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fa98 	bl	80045dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	619a      	str	r2, [r3, #24]
      break;
 80040de:	e0a5      	b.n	800422c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fb08 	bl	80046fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
      break;
 8004120:	e084      	b.n	800422c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fb71 	bl	8004810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0208 	orr.w	r2, r2, #8
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0204 	bic.w	r2, r2, #4
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      break;
 8004160:	e064      	b.n	800422c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fbd9 	bl	8004920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69d9      	ldr	r1, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
      break;
 80041a2:	e043      	b.n	800422c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fc22 	bl	80049f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0208 	orr.w	r2, r2, #8
 80041be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0204 	bic.w	r2, r2, #4
 80041ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041e2:	e023      	b.n	800422c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fc66 	bl	8004abc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004224:	e002      	b.n	800422c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]
      break;
 800422a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop

08004240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIM_ConfigClockSource+0x1c>
 8004258:	2302      	movs	r3, #2
 800425a:	e0b6      	b.n	80043ca <HAL_TIM_ConfigClockSource+0x18a>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800427e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004298:	d03e      	beq.n	8004318 <HAL_TIM_ConfigClockSource+0xd8>
 800429a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429e:	f200 8087 	bhi.w	80043b0 <HAL_TIM_ConfigClockSource+0x170>
 80042a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a6:	f000 8086 	beq.w	80043b6 <HAL_TIM_ConfigClockSource+0x176>
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d87f      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x170>
 80042b0:	2b70      	cmp	r3, #112	; 0x70
 80042b2:	d01a      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0xaa>
 80042b4:	2b70      	cmp	r3, #112	; 0x70
 80042b6:	d87b      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x170>
 80042b8:	2b60      	cmp	r3, #96	; 0x60
 80042ba:	d050      	beq.n	800435e <HAL_TIM_ConfigClockSource+0x11e>
 80042bc:	2b60      	cmp	r3, #96	; 0x60
 80042be:	d877      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x170>
 80042c0:	2b50      	cmp	r3, #80	; 0x50
 80042c2:	d03c      	beq.n	800433e <HAL_TIM_ConfigClockSource+0xfe>
 80042c4:	2b50      	cmp	r3, #80	; 0x50
 80042c6:	d873      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x170>
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d058      	beq.n	800437e <HAL_TIM_ConfigClockSource+0x13e>
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d86f      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x170>
 80042d0:	2b30      	cmp	r3, #48	; 0x30
 80042d2:	d064      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x15e>
 80042d4:	2b30      	cmp	r3, #48	; 0x30
 80042d6:	d86b      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x170>
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d060      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x15e>
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d867      	bhi.n	80043b0 <HAL_TIM_ConfigClockSource+0x170>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d05c      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x15e>
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d05a      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x15e>
 80042e8:	e062      	b.n	80043b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6899      	ldr	r1, [r3, #8]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f000 fd52 	bl	8004da2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800430c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	609a      	str	r2, [r3, #8]
      break;
 8004316:	e04f      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6899      	ldr	r1, [r3, #8]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f000 fd3b 	bl	8004da2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800433a:	609a      	str	r2, [r3, #8]
      break;
 800433c:	e03c      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6859      	ldr	r1, [r3, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	461a      	mov	r2, r3
 800434c:	f000 fcaf 	bl	8004cae <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2150      	movs	r1, #80	; 0x50
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fd08 	bl	8004d6c <TIM_ITRx_SetConfig>
      break;
 800435c:	e02c      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6859      	ldr	r1, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	461a      	mov	r2, r3
 800436c:	f000 fcce 	bl	8004d0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2160      	movs	r1, #96	; 0x60
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fcf8 	bl	8004d6c <TIM_ITRx_SetConfig>
      break;
 800437c:	e01c      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	461a      	mov	r2, r3
 800438c:	f000 fc8f 	bl	8004cae <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2140      	movs	r1, #64	; 0x40
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fce8 	bl	8004d6c <TIM_ITRx_SetConfig>
      break;
 800439c:	e00c      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fcdf 	bl	8004d6c <TIM_ITRx_SetConfig>
      break;
 80043ae:	e003      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e000      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_SlaveConfigSynchro+0x18>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e031      	b.n	800444e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80043fa:	6839      	ldr	r1, [r7, #0]
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fbc3 	bl	8004b88 <TIM_SlaveTimer_SetConfig>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e018      	b.n	800444e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800443a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a40      	ldr	r2, [pc, #256]	; (80045bc <TIM_Base_SetConfig+0x114>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d00f      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3d      	ldr	r2, [pc, #244]	; (80045c0 <TIM_Base_SetConfig+0x118>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <TIM_Base_SetConfig+0x11c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <TIM_Base_SetConfig+0x120>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3a      	ldr	r2, [pc, #232]	; (80045cc <TIM_Base_SetConfig+0x124>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d108      	bne.n	80044fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2f      	ldr	r2, [pc, #188]	; (80045bc <TIM_Base_SetConfig+0x114>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d01b      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <TIM_Base_SetConfig+0x118>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d017      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <TIM_Base_SetConfig+0x11c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <TIM_Base_SetConfig+0x120>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00f      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a29      	ldr	r2, [pc, #164]	; (80045cc <TIM_Base_SetConfig+0x124>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <TIM_Base_SetConfig+0x128>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <TIM_Base_SetConfig+0x12c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <TIM_Base_SetConfig+0x130>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <TIM_Base_SetConfig+0x114>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00f      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a12      	ldr	r2, [pc, #72]	; (80045cc <TIM_Base_SetConfig+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00b      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <TIM_Base_SetConfig+0x128>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <TIM_Base_SetConfig+0x12c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0f      	ldr	r2, [pc, #60]	; (80045d8 <TIM_Base_SetConfig+0x130>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d103      	bne.n	80045a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	615a      	str	r2, [r3, #20]
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40013400 	.word	0x40013400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 0302 	bic.w	r3, r3, #2
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a2c      	ldr	r2, [pc, #176]	; (80046e8 <TIM_OC1_SetConfig+0x10c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00f      	beq.n	800465c <TIM_OC1_SetConfig+0x80>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a2b      	ldr	r2, [pc, #172]	; (80046ec <TIM_OC1_SetConfig+0x110>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00b      	beq.n	800465c <TIM_OC1_SetConfig+0x80>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <TIM_OC1_SetConfig+0x114>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d007      	beq.n	800465c <TIM_OC1_SetConfig+0x80>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a29      	ldr	r2, [pc, #164]	; (80046f4 <TIM_OC1_SetConfig+0x118>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d003      	beq.n	800465c <TIM_OC1_SetConfig+0x80>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <TIM_OC1_SetConfig+0x11c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d10c      	bne.n	8004676 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0308 	bic.w	r3, r3, #8
 8004662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 0304 	bic.w	r3, r3, #4
 8004674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <TIM_OC1_SetConfig+0x10c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00f      	beq.n	800469e <TIM_OC1_SetConfig+0xc2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1a      	ldr	r2, [pc, #104]	; (80046ec <TIM_OC1_SetConfig+0x110>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00b      	beq.n	800469e <TIM_OC1_SetConfig+0xc2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <TIM_OC1_SetConfig+0x114>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d007      	beq.n	800469e <TIM_OC1_SetConfig+0xc2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <TIM_OC1_SetConfig+0x118>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d003      	beq.n	800469e <TIM_OC1_SetConfig+0xc2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <TIM_OC1_SetConfig+0x11c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d111      	bne.n	80046c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40013400 	.word	0x40013400
 80046f0:	40014000 	.word	0x40014000
 80046f4:	40014400 	.word	0x40014400
 80046f8:	40014800 	.word	0x40014800

080046fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0210 	bic.w	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800472a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0320 	bic.w	r3, r3, #32
 800474a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a28      	ldr	r2, [pc, #160]	; (80047fc <TIM_OC2_SetConfig+0x100>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_OC2_SetConfig+0x6c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a27      	ldr	r2, [pc, #156]	; (8004800 <TIM_OC2_SetConfig+0x104>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10d      	bne.n	8004784 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004782:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <TIM_OC2_SetConfig+0x100>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00f      	beq.n	80047ac <TIM_OC2_SetConfig+0xb0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <TIM_OC2_SetConfig+0x104>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00b      	beq.n	80047ac <TIM_OC2_SetConfig+0xb0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <TIM_OC2_SetConfig+0x108>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_OC2_SetConfig+0xb0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a1a      	ldr	r2, [pc, #104]	; (8004808 <TIM_OC2_SetConfig+0x10c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC2_SetConfig+0xb0>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a19      	ldr	r2, [pc, #100]	; (800480c <TIM_OC2_SetConfig+0x110>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d113      	bne.n	80047d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40013400 	.word	0x40013400
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800

08004810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0303 	bic.w	r3, r3, #3
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800485c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a27      	ldr	r2, [pc, #156]	; (800490c <TIM_OC3_SetConfig+0xfc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d003      	beq.n	800487a <TIM_OC3_SetConfig+0x6a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a26      	ldr	r2, [pc, #152]	; (8004910 <TIM_OC3_SetConfig+0x100>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d10d      	bne.n	8004896 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a1c      	ldr	r2, [pc, #112]	; (800490c <TIM_OC3_SetConfig+0xfc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00f      	beq.n	80048be <TIM_OC3_SetConfig+0xae>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <TIM_OC3_SetConfig+0x100>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00b      	beq.n	80048be <TIM_OC3_SetConfig+0xae>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <TIM_OC3_SetConfig+0x104>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <TIM_OC3_SetConfig+0xae>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_OC3_SetConfig+0x108>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_OC3_SetConfig+0xae>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a18      	ldr	r2, [pc, #96]	; (800491c <TIM_OC3_SetConfig+0x10c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d113      	bne.n	80048e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	621a      	str	r2, [r3, #32]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40013400 	.word	0x40013400
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800

08004920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800494e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800496e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	031b      	lsls	r3, r3, #12
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <TIM_OC4_SetConfig+0xc0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00f      	beq.n	80049a4 <TIM_OC4_SetConfig+0x84>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <TIM_OC4_SetConfig+0xc4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_OC4_SetConfig+0x84>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <TIM_OC4_SetConfig+0xc8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_OC4_SetConfig+0x84>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a15      	ldr	r2, [pc, #84]	; (80049ec <TIM_OC4_SetConfig+0xcc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_OC4_SetConfig+0x84>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <TIM_OC4_SetConfig+0xd0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d109      	bne.n	80049b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	40013400 	.word	0x40013400
 80049e8:	40014000 	.word	0x40014000
 80049ec:	40014400 	.word	0x40014400
 80049f0:	40014800 	.word	0x40014800

080049f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a17      	ldr	r2, [pc, #92]	; (8004aa8 <TIM_OC5_SetConfig+0xb4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00f      	beq.n	8004a6e <TIM_OC5_SetConfig+0x7a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a16      	ldr	r2, [pc, #88]	; (8004aac <TIM_OC5_SetConfig+0xb8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <TIM_OC5_SetConfig+0x7a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <TIM_OC5_SetConfig+0xbc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <TIM_OC5_SetConfig+0x7a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a14      	ldr	r2, [pc, #80]	; (8004ab4 <TIM_OC5_SetConfig+0xc0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d003      	beq.n	8004a6e <TIM_OC5_SetConfig+0x7a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <TIM_OC5_SetConfig+0xc4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d109      	bne.n	8004a82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40013400 	.word	0x40013400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800

08004abc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	051b      	lsls	r3, r3, #20
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <TIM_OC6_SetConfig+0xb8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00f      	beq.n	8004b38 <TIM_OC6_SetConfig+0x7c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <TIM_OC6_SetConfig+0xbc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_OC6_SetConfig+0x7c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <TIM_OC6_SetConfig+0xc0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_OC6_SetConfig+0x7c>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a15      	ldr	r2, [pc, #84]	; (8004b80 <TIM_OC6_SetConfig+0xc4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC6_SetConfig+0x7c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <TIM_OC6_SetConfig+0xc8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d109      	bne.n	8004b4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	029b      	lsls	r3, r3, #10
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40013400 	.word	0x40013400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400
 8004b84:	40014800 	.word	0x40014800

08004b88 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb6:	f023 0307 	bic.w	r3, r3, #7
 8004bba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b70      	cmp	r3, #112	; 0x70
 8004bd4:	d01a      	beq.n	8004c0c <TIM_SlaveTimer_SetConfig+0x84>
 8004bd6:	2b70      	cmp	r3, #112	; 0x70
 8004bd8:	d860      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x114>
 8004bda:	2b60      	cmp	r3, #96	; 0x60
 8004bdc:	d054      	beq.n	8004c88 <TIM_SlaveTimer_SetConfig+0x100>
 8004bde:	2b60      	cmp	r3, #96	; 0x60
 8004be0:	d85c      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x114>
 8004be2:	2b50      	cmp	r3, #80	; 0x50
 8004be4:	d046      	beq.n	8004c74 <TIM_SlaveTimer_SetConfig+0xec>
 8004be6:	2b50      	cmp	r3, #80	; 0x50
 8004be8:	d858      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x114>
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d019      	beq.n	8004c22 <TIM_SlaveTimer_SetConfig+0x9a>
 8004bee:	2b40      	cmp	r3, #64	; 0x40
 8004bf0:	d854      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x114>
 8004bf2:	2b30      	cmp	r3, #48	; 0x30
 8004bf4:	d055      	beq.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x11a>
 8004bf6:	2b30      	cmp	r3, #48	; 0x30
 8004bf8:	d850      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x114>
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d051      	beq.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x11a>
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d84c      	bhi.n	8004c9c <TIM_SlaveTimer_SetConfig+0x114>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d04d      	beq.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x11a>
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d04b      	beq.n	8004ca2 <TIM_SlaveTimer_SetConfig+0x11a>
 8004c0a:	e047      	b.n	8004c9c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68d9      	ldr	r1, [r3, #12]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f000 f8c1 	bl	8004da2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004c20:	e040      	b.n	8004ca4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d101      	bne.n	8004c2e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e03b      	b.n	8004ca6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	621a      	str	r2, [r3, #32]
      break;
 8004c72:	e017      	b.n	8004ca4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f000 f814 	bl	8004cae <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c86:	e00d      	b.n	8004ca4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6899      	ldr	r1, [r3, #8]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	461a      	mov	r2, r3
 8004c96:	f000 f839 	bl	8004d0c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c9a:	e003      	b.n	8004ca4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca0:	e000      	b.n	8004ca4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004ca2:	bf00      	nop
  }

  return status;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b087      	sub	sp, #28
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f023 0201 	bic.w	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 030a 	bic.w	r3, r3, #10
 8004cea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	621a      	str	r2, [r3, #32]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f023 0210 	bic.w	r2, r3, #16
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	031b      	lsls	r3, r3, #12
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f043 0307 	orr.w	r3, r3, #7
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	609a      	str	r2, [r3, #8]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b087      	sub	sp, #28
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	021a      	lsls	r2, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	609a      	str	r2, [r3, #8]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b087      	sub	sp, #28
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	2201      	movs	r2, #1
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	401a      	ands	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a1a      	ldr	r2, [r3, #32]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	621a      	str	r2, [r3, #32]
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e068      	b.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2e      	ldr	r2, [pc, #184]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2d      	ldr	r2, [pc, #180]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d108      	bne.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01d      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb6:	d018      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1a      	ldr	r2, [pc, #104]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a18      	ldr	r2, [pc, #96]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d009      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10c      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40013400 	.word	0x40013400
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40000c00 	.word	0x40000c00
 8004f38:	40014000 	.word	0x40014000

08004f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e042      	b.n	8005010 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f003 f939 	bl	8008214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2224      	movs	r2, #36	; 0x24
 8004fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fc52 	bl	8005864 <UART_SetConfig>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e022      	b.n	8005010 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 ff0e 	bl	8005df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 ff95 	bl	8005f38 <UART_CheckIdleState>
 800500e:	4603      	mov	r3, r0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800502e:	2b20      	cmp	r3, #32
 8005030:	f040 8084 	bne.w	800513c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_UART_Transmit+0x28>
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e07c      	b.n	800513e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_UART_Transmit+0x3a>
 800504e:	2302      	movs	r3, #2
 8005050:	e075      	b.n	800513e <HAL_UART_Transmit+0x126>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2221      	movs	r2, #33	; 0x21
 8005066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800506a:	f7fb fe0b 	bl	8000c84 <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005088:	d108      	bne.n	800509c <HAL_UART_Transmit+0x84>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d104      	bne.n	800509c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	e003      	b.n	80050a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80050ac:	e02d      	b.n	800510a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	; 0x80
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 ff88 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e03a      	b.n	800513e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	881a      	ldrh	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050da:	b292      	uxth	r2, r2
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	3302      	adds	r3, #2
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	e008      	b.n	80050f8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	b292      	uxth	r2, r2
 80050f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3301      	adds	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1cb      	bne.n	80050ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	2140      	movs	r1, #64	; 0x40
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 ff54 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e006      	b.n	800513e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	4613      	mov	r3, r2
 8005154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	2b20      	cmp	r3, #32
 800515e:	d142      	bne.n	80051e6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_UART_Receive_IT+0x24>
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e03b      	b.n	80051e8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_UART_Receive_IT+0x36>
 800517a:	2302      	movs	r3, #2
 800517c:	e034      	b.n	80051e8 <HAL_UART_Receive_IT+0xa0>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <HAL_UART_Receive_IT+0xa8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01f      	beq.n	80051d6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d018      	beq.n	80051d6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	613b      	str	r3, [r7, #16]
   return(result);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	69f9      	ldr	r1, [r7, #28]
 80051c8:	6a3a      	ldr	r2, [r7, #32]
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e6      	bne.n	80051a4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	461a      	mov	r2, r3
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 ffbf 	bl	8006160 <UART_Start_Receive_IT>
 80051e2:	4603      	mov	r3, r0
 80051e4:	e000      	b.n	80051e8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
  }
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3728      	adds	r7, #40	; 0x28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40008000 	.word	0x40008000

080051f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b0ba      	sub	sp, #232	; 0xe8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800521a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800521e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005222:	4013      	ands	r3, r2
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d11b      	bne.n	8005268 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 82d6 	beq.w	800580a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4798      	blx	r3
      }
      return;
 8005266:	e2d0      	b.n	800580a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 811f 	beq.w	80054b0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005272:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005276:	4b8b      	ldr	r3, [pc, #556]	; (80054a4 <HAL_UART_IRQHandler+0x2b0>)
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800527e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005282:	4b89      	ldr	r3, [pc, #548]	; (80054a8 <HAL_UART_IRQHandler+0x2b4>)
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8112 	beq.w	80054b0 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d011      	beq.n	80052bc <HAL_UART_IRQHandler+0xc8>
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d011      	beq.n	80052ec <HAL_UART_IRQHandler+0xf8>
 80052c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2202      	movs	r2, #2
 80052da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e2:	f043 0204 	orr.w	r2, r3, #4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d011      	beq.n	800531c <HAL_UART_IRQHandler+0x128>
 80052f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2204      	movs	r2, #4
 800530a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005312:	f043 0202 	orr.w	r2, r3, #2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d017      	beq.n	8005358 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005334:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005338:	4b5a      	ldr	r3, [pc, #360]	; (80054a4 <HAL_UART_IRQHandler+0x2b0>)
 800533a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2208      	movs	r2, #8
 8005346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534e:	f043 0208 	orr.w	r2, r3, #8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <HAL_UART_IRQHandler+0x196>
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00c      	beq.n	800538a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 823c 	beq.w	800580e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d005      	beq.n	80053ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d04f      	beq.n	800548e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 ffe0 	bl	80063b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d141      	bne.n	8005486 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800541c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800542e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800543a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d9      	bne.n	8005402 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d013      	beq.n	800547e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800545a:	4a14      	ldr	r2, [pc, #80]	; (80054ac <HAL_UART_IRQHandler+0x2b8>)
 800545c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005462:	4618      	mov	r0, r3
 8005464:	f7fc fa13 	bl	800188e <HAL_DMA_Abort_IT>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d017      	beq.n	800549e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	e00f      	b.n	800549e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f9da 	bl	8005838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	e00b      	b.n	800549e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f9d6 	bl	8005838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548c:	e007      	b.n	800549e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f9d2 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800549c:	e1b7      	b.n	800580e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549e:	bf00      	nop
    return;
 80054a0:	e1b5      	b.n	800580e <HAL_UART_IRQHandler+0x61a>
 80054a2:	bf00      	nop
 80054a4:	10000001 	.word	0x10000001
 80054a8:	04000120 	.word	0x04000120
 80054ac:	08006481 	.word	0x08006481

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	f040 814a 	bne.w	800574e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8143 	beq.w	800574e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 813c 	beq.w	800574e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2210      	movs	r2, #16
 80054dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	f040 80b5 	bne.w	8005658 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 8187 	beq.w	8005812 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800550a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800550e:	429a      	cmp	r2, r3
 8005510:	f080 817f 	bcs.w	8005812 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800551a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	f040 8086 	bne.w	800563c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005544:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800555a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800555e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005566:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1da      	bne.n	8005530 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800558a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3308      	adds	r3, #8
 800559a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800559e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e1      	bne.n	800557a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3308      	adds	r3, #8
 80055bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e3      	bne.n	80055b6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	f023 0310 	bic.w	r3, r3, #16
 8005610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800561e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005620:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800562c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e4      	bne.n	80055fc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005636:	4618      	mov	r0, r3
 8005638:	f7fc f8cd 	bl	80017d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005648:	b29b      	uxth	r3, r3
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	b29b      	uxth	r3, r3
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f8fb 	bl	800584c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005656:	e0dc      	b.n	8005812 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005664:	b29b      	uxth	r3, r3
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80ce 	beq.w	8005816 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800567a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80c9 	beq.w	8005816 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
 80056a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e4      	bne.n	8005684 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	623b      	str	r3, [r7, #32]
   return(result);
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3308      	adds	r3, #8
 80056de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056e2:	633a      	str	r2, [r7, #48]	; 0x30
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e1      	bne.n	80056ba <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	60fb      	str	r3, [r7, #12]
   return(result);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0310 	bic.w	r3, r3, #16
 800571e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	617b      	str	r3, [r7, #20]
   return(result);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e4      	bne.n	800570a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f880 	bl	800584c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800574c:	e063      	b.n	8005816 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <HAL_UART_IRQHandler+0x584>
 800575a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800576e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fb2b 	bl	8006dcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005776:	e051      	b.n	800581c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d014      	beq.n	80057ae <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d03a      	beq.n	800581a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
    }
    return;
 80057ac:	e035      	b.n	800581a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_UART_IRQHandler+0x5da>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fe70 	bl	80064ac <UART_EndTransmit_IT>
    return;
 80057cc:	e026      	b.n	800581c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <HAL_UART_IRQHandler+0x5fa>
 80057da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 fb04 	bl	8006df4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057ec:	e016      	b.n	800581c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d010      	beq.n	800581c <HAL_UART_IRQHandler+0x628>
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da0c      	bge.n	800581c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f001 faec 	bl	8006de0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005808:	e008      	b.n	800581c <HAL_UART_IRQHandler+0x628>
      return;
 800580a:	bf00      	nop
 800580c:	e006      	b.n	800581c <HAL_UART_IRQHandler+0x628>
    return;
 800580e:	bf00      	nop
 8005810:	e004      	b.n	800581c <HAL_UART_IRQHandler+0x628>
      return;
 8005812:	bf00      	nop
 8005814:	e002      	b.n	800581c <HAL_UART_IRQHandler+0x628>
      return;
 8005816:	bf00      	nop
 8005818:	e000      	b.n	800581c <HAL_UART_IRQHandler+0x628>
    return;
 800581a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800581c:	37e8      	adds	r7, #232	; 0xe8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop

08005824 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	b5b0      	push	{r4, r5, r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4313      	orrs	r3, r2
 8005886:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4bb1      	ldr	r3, [pc, #708]	; (8005b54 <UART_SetConfig+0x2f0>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	69f9      	ldr	r1, [r7, #28]
 8005898:	430b      	orrs	r3, r1
 800589a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4aa6      	ldr	r2, [pc, #664]	; (8005b58 <UART_SetConfig+0x2f4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80058d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	69f9      	ldr	r1, [r7, #28]
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f023 010f 	bic.w	r1, r3, #15
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a97      	ldr	r2, [pc, #604]	; (8005b5c <UART_SetConfig+0x2f8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d120      	bne.n	8005946 <UART_SetConfig+0xe2>
 8005904:	4b96      	ldr	r3, [pc, #600]	; (8005b60 <UART_SetConfig+0x2fc>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b03      	cmp	r3, #3
 8005910:	d816      	bhi.n	8005940 <UART_SetConfig+0xdc>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0xb4>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005929 	.word	0x08005929
 800591c:	08005935 	.word	0x08005935
 8005920:	0800592f 	.word	0x0800592f
 8005924:	0800593b 	.word	0x0800593b
 8005928:	2301      	movs	r3, #1
 800592a:	76fb      	strb	r3, [r7, #27]
 800592c:	e0e7      	b.n	8005afe <UART_SetConfig+0x29a>
 800592e:	2302      	movs	r3, #2
 8005930:	76fb      	strb	r3, [r7, #27]
 8005932:	e0e4      	b.n	8005afe <UART_SetConfig+0x29a>
 8005934:	2304      	movs	r3, #4
 8005936:	76fb      	strb	r3, [r7, #27]
 8005938:	e0e1      	b.n	8005afe <UART_SetConfig+0x29a>
 800593a:	2308      	movs	r3, #8
 800593c:	76fb      	strb	r3, [r7, #27]
 800593e:	e0de      	b.n	8005afe <UART_SetConfig+0x29a>
 8005940:	2310      	movs	r3, #16
 8005942:	76fb      	strb	r3, [r7, #27]
 8005944:	e0db      	b.n	8005afe <UART_SetConfig+0x29a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a86      	ldr	r2, [pc, #536]	; (8005b64 <UART_SetConfig+0x300>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d132      	bne.n	80059b6 <UART_SetConfig+0x152>
 8005950:	4b83      	ldr	r3, [pc, #524]	; (8005b60 <UART_SetConfig+0x2fc>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b0c      	cmp	r3, #12
 800595c:	d828      	bhi.n	80059b0 <UART_SetConfig+0x14c>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x100>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	08005999 	.word	0x08005999
 8005968:	080059b1 	.word	0x080059b1
 800596c:	080059b1 	.word	0x080059b1
 8005970:	080059b1 	.word	0x080059b1
 8005974:	080059a5 	.word	0x080059a5
 8005978:	080059b1 	.word	0x080059b1
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059b1 	.word	0x080059b1
 8005984:	0800599f 	.word	0x0800599f
 8005988:	080059b1 	.word	0x080059b1
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b1 	.word	0x080059b1
 8005994:	080059ab 	.word	0x080059ab
 8005998:	2300      	movs	r3, #0
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	e0af      	b.n	8005afe <UART_SetConfig+0x29a>
 800599e:	2302      	movs	r3, #2
 80059a0:	76fb      	strb	r3, [r7, #27]
 80059a2:	e0ac      	b.n	8005afe <UART_SetConfig+0x29a>
 80059a4:	2304      	movs	r3, #4
 80059a6:	76fb      	strb	r3, [r7, #27]
 80059a8:	e0a9      	b.n	8005afe <UART_SetConfig+0x29a>
 80059aa:	2308      	movs	r3, #8
 80059ac:	76fb      	strb	r3, [r7, #27]
 80059ae:	e0a6      	b.n	8005afe <UART_SetConfig+0x29a>
 80059b0:	2310      	movs	r3, #16
 80059b2:	76fb      	strb	r3, [r7, #27]
 80059b4:	e0a3      	b.n	8005afe <UART_SetConfig+0x29a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6b      	ldr	r2, [pc, #428]	; (8005b68 <UART_SetConfig+0x304>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d120      	bne.n	8005a02 <UART_SetConfig+0x19e>
 80059c0:	4b67      	ldr	r3, [pc, #412]	; (8005b60 <UART_SetConfig+0x2fc>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059ca:	2b30      	cmp	r3, #48	; 0x30
 80059cc:	d013      	beq.n	80059f6 <UART_SetConfig+0x192>
 80059ce:	2b30      	cmp	r3, #48	; 0x30
 80059d0:	d814      	bhi.n	80059fc <UART_SetConfig+0x198>
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d009      	beq.n	80059ea <UART_SetConfig+0x186>
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d810      	bhi.n	80059fc <UART_SetConfig+0x198>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <UART_SetConfig+0x180>
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d006      	beq.n	80059f0 <UART_SetConfig+0x18c>
 80059e2:	e00b      	b.n	80059fc <UART_SetConfig+0x198>
 80059e4:	2300      	movs	r3, #0
 80059e6:	76fb      	strb	r3, [r7, #27]
 80059e8:	e089      	b.n	8005afe <UART_SetConfig+0x29a>
 80059ea:	2302      	movs	r3, #2
 80059ec:	76fb      	strb	r3, [r7, #27]
 80059ee:	e086      	b.n	8005afe <UART_SetConfig+0x29a>
 80059f0:	2304      	movs	r3, #4
 80059f2:	76fb      	strb	r3, [r7, #27]
 80059f4:	e083      	b.n	8005afe <UART_SetConfig+0x29a>
 80059f6:	2308      	movs	r3, #8
 80059f8:	76fb      	strb	r3, [r7, #27]
 80059fa:	e080      	b.n	8005afe <UART_SetConfig+0x29a>
 80059fc:	2310      	movs	r3, #16
 80059fe:	76fb      	strb	r3, [r7, #27]
 8005a00:	e07d      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a59      	ldr	r2, [pc, #356]	; (8005b6c <UART_SetConfig+0x308>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d120      	bne.n	8005a4e <UART_SetConfig+0x1ea>
 8005a0c:	4b54      	ldr	r3, [pc, #336]	; (8005b60 <UART_SetConfig+0x2fc>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a16:	2bc0      	cmp	r3, #192	; 0xc0
 8005a18:	d013      	beq.n	8005a42 <UART_SetConfig+0x1de>
 8005a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a1c:	d814      	bhi.n	8005a48 <UART_SetConfig+0x1e4>
 8005a1e:	2b80      	cmp	r3, #128	; 0x80
 8005a20:	d009      	beq.n	8005a36 <UART_SetConfig+0x1d2>
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d810      	bhi.n	8005a48 <UART_SetConfig+0x1e4>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <UART_SetConfig+0x1cc>
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d006      	beq.n	8005a3c <UART_SetConfig+0x1d8>
 8005a2e:	e00b      	b.n	8005a48 <UART_SetConfig+0x1e4>
 8005a30:	2300      	movs	r3, #0
 8005a32:	76fb      	strb	r3, [r7, #27]
 8005a34:	e063      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a36:	2302      	movs	r3, #2
 8005a38:	76fb      	strb	r3, [r7, #27]
 8005a3a:	e060      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	76fb      	strb	r3, [r7, #27]
 8005a40:	e05d      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a42:	2308      	movs	r3, #8
 8005a44:	76fb      	strb	r3, [r7, #27]
 8005a46:	e05a      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	76fb      	strb	r3, [r7, #27]
 8005a4c:	e057      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a47      	ldr	r2, [pc, #284]	; (8005b70 <UART_SetConfig+0x30c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d125      	bne.n	8005aa4 <UART_SetConfig+0x240>
 8005a58:	4b41      	ldr	r3, [pc, #260]	; (8005b60 <UART_SetConfig+0x2fc>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a66:	d017      	beq.n	8005a98 <UART_SetConfig+0x234>
 8005a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6c:	d817      	bhi.n	8005a9e <UART_SetConfig+0x23a>
 8005a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a72:	d00b      	beq.n	8005a8c <UART_SetConfig+0x228>
 8005a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a78:	d811      	bhi.n	8005a9e <UART_SetConfig+0x23a>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <UART_SetConfig+0x222>
 8005a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a82:	d006      	beq.n	8005a92 <UART_SetConfig+0x22e>
 8005a84:	e00b      	b.n	8005a9e <UART_SetConfig+0x23a>
 8005a86:	2300      	movs	r3, #0
 8005a88:	76fb      	strb	r3, [r7, #27]
 8005a8a:	e038      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	76fb      	strb	r3, [r7, #27]
 8005a90:	e035      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a92:	2304      	movs	r3, #4
 8005a94:	76fb      	strb	r3, [r7, #27]
 8005a96:	e032      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	76fb      	strb	r3, [r7, #27]
 8005a9c:	e02f      	b.n	8005afe <UART_SetConfig+0x29a>
 8005a9e:	2310      	movs	r3, #16
 8005aa0:	76fb      	strb	r3, [r7, #27]
 8005aa2:	e02c      	b.n	8005afe <UART_SetConfig+0x29a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a2b      	ldr	r2, [pc, #172]	; (8005b58 <UART_SetConfig+0x2f4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d125      	bne.n	8005afa <UART_SetConfig+0x296>
 8005aae:	4b2c      	ldr	r3, [pc, #176]	; (8005b60 <UART_SetConfig+0x2fc>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005abc:	d017      	beq.n	8005aee <UART_SetConfig+0x28a>
 8005abe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ac2:	d817      	bhi.n	8005af4 <UART_SetConfig+0x290>
 8005ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac8:	d00b      	beq.n	8005ae2 <UART_SetConfig+0x27e>
 8005aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ace:	d811      	bhi.n	8005af4 <UART_SetConfig+0x290>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <UART_SetConfig+0x278>
 8005ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad8:	d006      	beq.n	8005ae8 <UART_SetConfig+0x284>
 8005ada:	e00b      	b.n	8005af4 <UART_SetConfig+0x290>
 8005adc:	2300      	movs	r3, #0
 8005ade:	76fb      	strb	r3, [r7, #27]
 8005ae0:	e00d      	b.n	8005afe <UART_SetConfig+0x29a>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	76fb      	strb	r3, [r7, #27]
 8005ae6:	e00a      	b.n	8005afe <UART_SetConfig+0x29a>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	76fb      	strb	r3, [r7, #27]
 8005aec:	e007      	b.n	8005afe <UART_SetConfig+0x29a>
 8005aee:	2308      	movs	r3, #8
 8005af0:	76fb      	strb	r3, [r7, #27]
 8005af2:	e004      	b.n	8005afe <UART_SetConfig+0x29a>
 8005af4:	2310      	movs	r3, #16
 8005af6:	76fb      	strb	r3, [r7, #27]
 8005af8:	e001      	b.n	8005afe <UART_SetConfig+0x29a>
 8005afa:	2310      	movs	r3, #16
 8005afc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <UART_SetConfig+0x2f4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	f040 809f 	bne.w	8005c48 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b0a:	7efb      	ldrb	r3, [r7, #27]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d837      	bhi.n	8005b80 <UART_SetConfig+0x31c>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <UART_SetConfig+0x2b4>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b81 	.word	0x08005b81
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b81 	.word	0x08005b81
 8005b28:	08005b4b 	.word	0x08005b4b
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005b81 	.word	0x08005b81
 8005b34:	08005b81 	.word	0x08005b81
 8005b38:	08005b79 	.word	0x08005b79
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3c:	f7fd f8ae 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8005b40:	6178      	str	r0, [r7, #20]
        break;
 8005b42:	e022      	b.n	8005b8a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <UART_SetConfig+0x310>)
 8005b46:	617b      	str	r3, [r7, #20]
        break;
 8005b48:	e01f      	b.n	8005b8a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b4a:	f7fd f80f 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8005b4e:	6178      	str	r0, [r7, #20]
        break;
 8005b50:	e01b      	b.n	8005b8a <UART_SetConfig+0x326>
 8005b52:	bf00      	nop
 8005b54:	cfff69f3 	.word	0xcfff69f3
 8005b58:	40008000 	.word	0x40008000
 8005b5c:	40013800 	.word	0x40013800
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40004400 	.word	0x40004400
 8005b68:	40004800 	.word	0x40004800
 8005b6c:	40004c00 	.word	0x40004c00
 8005b70:	40005000 	.word	0x40005000
 8005b74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b7c:	617b      	str	r3, [r7, #20]
        break;
 8005b7e:	e004      	b.n	8005b8a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	76bb      	strb	r3, [r7, #26]
        break;
 8005b88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8119 	beq.w	8005dc4 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	4a95      	ldr	r2, [pc, #596]	; (8005dec <UART_SetConfig+0x588>)
 8005b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4413      	add	r3, r2
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d305      	bcc.n	8005bc2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d902      	bls.n	8005bc8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	76bb      	strb	r3, [r7, #26]
 8005bc6:	e0fd      	b.n	8005dc4 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	4a85      	ldr	r2, [pc, #532]	; (8005dec <UART_SetConfig+0x588>)
 8005bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	f7fa fe6c 	bl	80008bc <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4610      	mov	r0, r2
 8005bea:	4619      	mov	r1, r3
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	020b      	lsls	r3, r1, #8
 8005bf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bfa:	0202      	lsls	r2, r0, #8
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	6849      	ldr	r1, [r1, #4]
 8005c00:	0849      	lsrs	r1, r1, #1
 8005c02:	4608      	mov	r0, r1
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	1814      	adds	r4, r2, r0
 8005c0a:	eb43 0501 	adc.w	r5, r3, r1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	4620      	mov	r0, r4
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f7fa fe4e 	bl	80008bc <__aeabi_uldivmod>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4613      	mov	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2e:	d308      	bcc.n	8005c42 <UART_SetConfig+0x3de>
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c36:	d204      	bcs.n	8005c42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	60da      	str	r2, [r3, #12]
 8005c40:	e0c0      	b.n	8005dc4 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	76bb      	strb	r3, [r7, #26]
 8005c46:	e0bd      	b.n	8005dc4 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c50:	d164      	bne.n	8005d1c <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005c52:	7efb      	ldrb	r3, [r7, #27]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d828      	bhi.n	8005caa <UART_SetConfig+0x446>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <UART_SetConfig+0x3fc>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c85 	.word	0x08005c85
 8005c64:	08005c8d 	.word	0x08005c8d
 8005c68:	08005c95 	.word	0x08005c95
 8005c6c:	08005cab 	.word	0x08005cab
 8005c70:	08005c9b 	.word	0x08005c9b
 8005c74:	08005cab 	.word	0x08005cab
 8005c78:	08005cab 	.word	0x08005cab
 8005c7c:	08005cab 	.word	0x08005cab
 8005c80:	08005ca3 	.word	0x08005ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c84:	f7fd f80a 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8005c88:	6178      	str	r0, [r7, #20]
        break;
 8005c8a:	e013      	b.n	8005cb4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c8c:	f7fd f81c 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 8005c90:	6178      	str	r0, [r7, #20]
        break;
 8005c92:	e00f      	b.n	8005cb4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c94:	4b56      	ldr	r3, [pc, #344]	; (8005df0 <UART_SetConfig+0x58c>)
 8005c96:	617b      	str	r3, [r7, #20]
        break;
 8005c98:	e00c      	b.n	8005cb4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c9a:	f7fc ff67 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8005c9e:	6178      	str	r0, [r7, #20]
        break;
 8005ca0:	e008      	b.n	8005cb4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca6:	617b      	str	r3, [r7, #20]
        break;
 8005ca8:	e004      	b.n	8005cb4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	76bb      	strb	r3, [r7, #26]
        break;
 8005cb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8084 	beq.w	8005dc4 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	4a4a      	ldr	r2, [pc, #296]	; (8005dec <UART_SetConfig+0x588>)
 8005cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cce:	005a      	lsls	r2, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	441a      	add	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b0f      	cmp	r3, #15
 8005ce6:	d916      	bls.n	8005d16 <UART_SetConfig+0x4b2>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cee:	d212      	bcs.n	8005d16 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f023 030f 	bic.w	r3, r3, #15
 8005cf8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	89fb      	ldrh	r3, [r7, #14]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	89fa      	ldrh	r2, [r7, #14]
 8005d12:	60da      	str	r2, [r3, #12]
 8005d14:	e056      	b.n	8005dc4 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	76bb      	strb	r3, [r7, #26]
 8005d1a:	e053      	b.n	8005dc4 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d1c:	7efb      	ldrb	r3, [r7, #27]
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d827      	bhi.n	8005d72 <UART_SetConfig+0x50e>
 8005d22:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <UART_SetConfig+0x4c4>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d4d 	.word	0x08005d4d
 8005d2c:	08005d55 	.word	0x08005d55
 8005d30:	08005d5d 	.word	0x08005d5d
 8005d34:	08005d73 	.word	0x08005d73
 8005d38:	08005d63 	.word	0x08005d63
 8005d3c:	08005d73 	.word	0x08005d73
 8005d40:	08005d73 	.word	0x08005d73
 8005d44:	08005d73 	.word	0x08005d73
 8005d48:	08005d6b 	.word	0x08005d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d4c:	f7fc ffa6 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8005d50:	6178      	str	r0, [r7, #20]
        break;
 8005d52:	e013      	b.n	8005d7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d54:	f7fc ffb8 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 8005d58:	6178      	str	r0, [r7, #20]
        break;
 8005d5a:	e00f      	b.n	8005d7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d5c:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <UART_SetConfig+0x58c>)
 8005d5e:	617b      	str	r3, [r7, #20]
        break;
 8005d60:	e00c      	b.n	8005d7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d62:	f7fc ff03 	bl	8002b6c <HAL_RCC_GetSysClockFreq>
 8005d66:	6178      	str	r0, [r7, #20]
        break;
 8005d68:	e008      	b.n	8005d7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6e:	617b      	str	r3, [r7, #20]
        break;
 8005d70:	e004      	b.n	8005d7c <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	76bb      	strb	r3, [r7, #26]
        break;
 8005d7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	4a19      	ldr	r2, [pc, #100]	; (8005dec <UART_SetConfig+0x588>)
 8005d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	441a      	add	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b0f      	cmp	r3, #15
 8005daa:	d909      	bls.n	8005dc0 <UART_SetConfig+0x55c>
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d205      	bcs.n	8005dc0 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	e001      	b.n	8005dc4 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005de0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bdb0      	pop	{r4, r5, r7, pc}
 8005dea:	bf00      	nop
 8005dec:	08009a50 	.word	0x08009a50
 8005df0:	00f42400 	.word	0x00f42400

08005df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef2:	d10a      	bne.n	8005f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f48:	f7fa fe9c 	bl	8000c84 <HAL_GetTick>
 8005f4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d10e      	bne.n	8005f7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f82f 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e025      	b.n	8005fc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d10e      	bne.n	8005fa6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f819 	bl	8005fce <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e00f      	b.n	8005fc6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b09c      	sub	sp, #112	; 0x70
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	60b9      	str	r1, [r7, #8]
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fde:	e0a9      	b.n	8006134 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	f000 80a5 	beq.w	8006134 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fa fe4b 	bl	8000c84 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d140      	bne.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800600e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006010:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006014:	667b      	str	r3, [r7, #100]	; 0x64
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006020:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006024:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800602c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e6      	bne.n	8006000 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	663b      	str	r3, [r7, #96]	; 0x60
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006052:	64ba      	str	r2, [r7, #72]	; 0x48
 8006054:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e5      	bne.n	8006032 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e069      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d051      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800609a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609e:	d149      	bne.n	8006134 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e6      	bne.n	80060aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3308      	adds	r3, #8
 80060e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	613b      	str	r3, [r7, #16]
   return(result);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f023 0301 	bic.w	r3, r3, #1
 80060f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3308      	adds	r3, #8
 80060fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060fc:	623a      	str	r2, [r7, #32]
 80060fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	69f9      	ldr	r1, [r7, #28]
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	61bb      	str	r3, [r7, #24]
   return(result);
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e5      	bne.n	80060dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2220      	movs	r2, #32
 8006114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e010      	b.n	8006156 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	4013      	ands	r3, r2
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	429a      	cmp	r2, r3
 8006150:	f43f af46 	beq.w	8005fe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3770      	adds	r7, #112	; 0x70
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006160:	b480      	push	{r7}
 8006162:	b0a3      	sub	sp, #140	; 0x8c
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	d10e      	bne.n	80061b2 <UART_Start_Receive_IT+0x52>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <UART_Start_Receive_IT+0x48>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061a6:	e02d      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	22ff      	movs	r2, #255	; 0xff
 80061ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061b0:	e028      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10d      	bne.n	80061d6 <UART_Start_Receive_IT+0x76>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <UART_Start_Receive_IT+0x6c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061ca:	e01b      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	227f      	movs	r2, #127	; 0x7f
 80061d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061d4:	e016      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061de:	d10d      	bne.n	80061fc <UART_Start_Receive_IT+0x9c>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <UART_Start_Receive_IT+0x92>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	227f      	movs	r2, #127	; 0x7f
 80061ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061f0:	e008      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	223f      	movs	r2, #63	; 0x3f
 80061f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061fa:	e003      	b.n	8006204 <UART_Start_Receive_IT+0xa4>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2222      	movs	r2, #34	; 0x22
 8006210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006238:	673a      	str	r2, [r7, #112]	; 0x70
 800623a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800623e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e3      	bne.n	8006214 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006254:	d153      	bne.n	80062fe <UART_Start_Receive_IT+0x19e>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	429a      	cmp	r2, r3
 8006260:	d34d      	bcc.n	80062fe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626a:	d107      	bne.n	800627c <UART_Start_Receive_IT+0x11c>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4a4b      	ldr	r2, [pc, #300]	; (80063a4 <UART_Start_Receive_IT+0x244>)
 8006278:	671a      	str	r2, [r3, #112]	; 0x70
 800627a:	e002      	b.n	8006282 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4a4a      	ldr	r2, [pc, #296]	; (80063a8 <UART_Start_Receive_IT+0x248>)
 8006280:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01a      	beq.n	80062c8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e4      	bne.n	8006292 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3308      	adds	r3, #8
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3308      	adds	r3, #8
 80062e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80062e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80062ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e5      	bne.n	80062c8 <UART_Start_Receive_IT+0x168>
 80062fc:	e04a      	b.n	8006394 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006306:	d107      	bne.n	8006318 <UART_Start_Receive_IT+0x1b8>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d103      	bne.n	8006318 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a26      	ldr	r2, [pc, #152]	; (80063ac <UART_Start_Receive_IT+0x24c>)
 8006314:	671a      	str	r2, [r3, #112]	; 0x70
 8006316:	e002      	b.n	800631e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4a25      	ldr	r2, [pc, #148]	; (80063b0 <UART_Start_Receive_IT+0x250>)
 800631c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d019      	beq.n	8006362 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006342:	677b      	str	r3, [r7, #116]	; 0x74
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
 800634e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e6      	bne.n	800632e <UART_Start_Receive_IT+0x1ce>
 8006360:	e018      	b.n	8006394 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	613b      	str	r3, [r7, #16]
   return(result);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f043 0320 	orr.w	r3, r3, #32
 8006376:	67bb      	str	r3, [r7, #120]	; 0x78
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006380:	623b      	str	r3, [r7, #32]
 8006382:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	69f9      	ldr	r1, [r7, #28]
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	61bb      	str	r3, [r7, #24]
   return(result);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e6      	bne.n	8006362 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	378c      	adds	r7, #140	; 0x8c
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	08006ac9 	.word	0x08006ac9
 80063a8:	080067cd 	.word	0x080067cd
 80063ac:	08006667 	.word	0x08006667
 80063b0:	08006503 	.word	0x08006503

080063b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b095      	sub	sp, #84	; 0x54
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063da:	643b      	str	r3, [r7, #64]	; 0x40
 80063dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e6      	bne.n	80063bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	64bb      	str	r3, [r7, #72]	; 0x48
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3308      	adds	r3, #8
 8006410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e3      	bne.n	80063ee <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d118      	bne.n	8006460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60bb      	str	r3, [r7, #8]
   return(result);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 0310 	bic.w	r3, r3, #16
 8006442:	647b      	str	r3, [r7, #68]	; 0x44
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e6      	bne.n	800642e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006474:	bf00      	nop
 8006476:	3754      	adds	r7, #84	; 0x54
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff f9ca 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6979      	ldr	r1, [r7, #20]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	613b      	str	r3, [r7, #16]
   return(result);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e6      	bne.n	80064b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff f995 	bl	8005824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064fa:	bf00      	nop
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b096      	sub	sp, #88	; 0x58
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006510:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651a:	2b22      	cmp	r3, #34	; 0x22
 800651c:	f040 8095 	bne.w	800664a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006526:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800652a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800652e:	b2d9      	uxtb	r1, r3
 8006530:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006534:	b2da      	uxtb	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653a:	400a      	ands	r2, r1
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d17a      	bne.n	800665e <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800657c:	653b      	str	r3, [r7, #80]	; 0x50
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006586:	647b      	str	r3, [r7, #68]	; 0x44
 8006588:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800658c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e6      	bne.n	8006568 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	623b      	str	r3, [r7, #32]
   return(result);
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ba:	633a      	str	r2, [r7, #48]	; 0x30
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d12e      	bne.n	8006642 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0310 	bic.w	r3, r3, #16
 80065fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	69b9      	ldr	r1, [r7, #24]
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	617b      	str	r3, [r7, #20]
   return(result);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e6      	bne.n	80065ea <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	2b10      	cmp	r3, #16
 8006628:	d103      	bne.n	8006632 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2210      	movs	r2, #16
 8006630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff f906 	bl	800584c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006640:	e00d      	b.n	800665e <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fbfc 	bl	8007e40 <HAL_UART_RxCpltCallback>
}
 8006648:	e009      	b.n	800665e <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	8b1b      	ldrh	r3, [r3, #24]
 8006650:	b29a      	uxth	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0208 	orr.w	r2, r2, #8
 800665a:	b292      	uxth	r2, r2
 800665c:	831a      	strh	r2, [r3, #24]
}
 800665e:	bf00      	nop
 8006660:	3758      	adds	r7, #88	; 0x58
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b096      	sub	sp, #88	; 0x58
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006674:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	2b22      	cmp	r3, #34	; 0x22
 8006680:	f040 8095 	bne.w	80067ae <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800668a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006692:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006694:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006698:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800669c:	4013      	ands	r3, r2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d17a      	bne.n	80067c2 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ea:	643b      	str	r3, [r7, #64]	; 0x40
 80066ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e6      	bne.n	80066cc <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	61fb      	str	r3, [r7, #28]
   return(result);
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	64bb      	str	r3, [r7, #72]	; 0x48
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800671e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e5      	bne.n	80066fe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d12e      	bne.n	80067a6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	60bb      	str	r3, [r7, #8]
   return(result);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f023 0310 	bic.w	r3, r3, #16
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6979      	ldr	r1, [r7, #20]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	613b      	str	r3, [r7, #16]
   return(result);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e6      	bne.n	800674e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b10      	cmp	r3, #16
 800678c:	d103      	bne.n	8006796 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2210      	movs	r2, #16
 8006794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff f854 	bl	800584c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067a4:	e00d      	b.n	80067c2 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fb4a 	bl	8007e40 <HAL_UART_RxCpltCallback>
}
 80067ac:	e009      	b.n	80067c2 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	8b1b      	ldrh	r3, [r3, #24]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0208 	orr.w	r2, r2, #8
 80067be:	b292      	uxth	r2, r2
 80067c0:	831a      	strh	r2, [r3, #24]
}
 80067c2:	bf00      	nop
 80067c4:	3758      	adds	r7, #88	; 0x58
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b0a6      	sub	sp, #152	; 0x98
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067da:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	2b22      	cmp	r3, #34	; 0x22
 8006804:	f040 814f 	bne.w	8006aa6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800680e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006812:	e0f6      	b.n	8006a02 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800681a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800681e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006822:	b2d9      	uxtb	r1, r3
 8006824:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006828:	b2da      	uxtb	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682e:	400a      	ands	r2, r1
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800685a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b00      	cmp	r3, #0
 8006864:	d053      	beq.n	800690e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006866:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d011      	beq.n	8006896 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2201      	movs	r2, #1
 8006884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800688c:	f043 0201 	orr.w	r2, r3, #1
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d011      	beq.n	80068c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80068a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2202      	movs	r2, #2
 80068b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068bc:	f043 0204 	orr.w	r2, r3, #4
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d011      	beq.n	80068f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80068d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2204      	movs	r2, #4
 80068e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ec:	f043 0202 	orr.w	r2, r3, #2
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d006      	beq.n	800690e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fe ff99 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d173      	bne.n	8006a02 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800692a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800692e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800693c:	66bb      	str	r3, [r7, #104]	; 0x68
 800693e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800694a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e4      	bne.n	800691a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006974:	657a      	str	r2, [r7, #84]	; 0x54
 8006976:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800697a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e3      	bne.n	8006950 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699a:	2b01      	cmp	r3, #1
 800699c:	d12e      	bne.n	80069fc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c2:	643b      	str	r3, [r7, #64]	; 0x40
 80069c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e6      	bne.n	80069a4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d103      	bne.n	80069ec <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2210      	movs	r2, #16
 80069ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fe ff29 	bl	800584c <HAL_UARTEx_RxEventCallback>
 80069fa:	e002      	b.n	8006a02 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fa1f 	bl	8007e40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d006      	beq.n	8006a18 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006a0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f47f aefe 	bne.w	8006814 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a22:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d047      	beq.n	8006aba <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d240      	bcs.n	8006aba <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3308      	adds	r3, #8
 8006a56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e5      	bne.n	8006a38 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8006a70:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f043 0320 	orr.w	r3, r3, #32
 8006a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6979      	ldr	r1, [r7, #20]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aa4:	e009      	b.n	8006aba <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	8b1b      	ldrh	r3, [r3, #24]
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0208 	orr.w	r2, r2, #8
 8006ab6:	b292      	uxth	r2, r2
 8006ab8:	831a      	strh	r2, [r3, #24]
}
 8006aba:	bf00      	nop
 8006abc:	3798      	adds	r7, #152	; 0x98
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	08006503 	.word	0x08006503

08006ac8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b0a8      	sub	sp, #160	; 0xa0
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ad6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afe:	2b22      	cmp	r3, #34	; 0x22
 8006b00:	f040 8153 	bne.w	8006daa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b0a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b0e:	e0fa      	b.n	8006d06 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b16:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b22:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006b26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b38:	1c9a      	adds	r2, r3, #2
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d053      	beq.n	8006c0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d011      	beq.n	8006b96 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2201      	movs	r2, #1
 8006b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d011      	beq.n	8006bc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbc:	f043 0204 	orr.w	r2, r3, #4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d011      	beq.n	8006bf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006bd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2204      	movs	r2, #4
 8006be4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bec:	f043 0202 	orr.w	r2, r3, #2
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d006      	beq.n	8006c0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fe fe19 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d175      	bne.n	8006d06 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c3e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e4      	bne.n	8006c1a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3308      	adds	r3, #8
 8006c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c78:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e1      	bne.n	8006c50 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d12e      	bne.n	8006d00 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	f023 0310 	bic.w	r3, r3, #16
 8006cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e6      	bne.n	8006ca8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b10      	cmp	r3, #16
 8006ce6:	d103      	bne.n	8006cf0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2210      	movs	r2, #16
 8006cee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7fe fda7 	bl	800584c <HAL_UARTEx_RxEventCallback>
 8006cfe:	e002      	b.n	8006d06 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 f89d 	bl	8007e40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d006      	beq.n	8006d1c <UART_RxISR_16BIT_FIFOEN+0x254>
 8006d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f47f aefa 	bne.w	8006b10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d22:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d047      	beq.n	8006dbe <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d34:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d240      	bcs.n	8006dbe <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d52:	677b      	str	r3, [r7, #116]	; 0x74
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3308      	adds	r3, #8
 8006d5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006d5c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8006d74:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f043 0320 	orr.w	r3, r3, #32
 8006d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	69b9      	ldr	r1, [r7, #24]
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	617b      	str	r3, [r7, #20]
   return(result);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e6      	bne.n	8006d76 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006da8:	e009      	b.n	8006dbe <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	8b1b      	ldrh	r3, [r3, #24]
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0208 	orr.w	r2, r2, #8
 8006dba:	b292      	uxth	r2, r2
 8006dbc:	831a      	strh	r2, [r3, #24]
}
 8006dbe:	bf00      	nop
 8006dc0:	37a0      	adds	r7, #160	; 0xa0
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08006667 	.word	0x08006667

08006dcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_UARTEx_DisableFifoMode+0x16>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e027      	b.n	8006e6e <HAL_UARTEx_DisableFifoMode+0x66>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2224      	movs	r2, #36	; 0x24
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0201 	bic.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e02d      	b.n	8006eee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2224      	movs	r2, #36	; 0x24
 8006e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f850 	bl	8006f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e02d      	b.n	8006f6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2224      	movs	r2, #36	; 0x24
 8006f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0201 	bic.w	r2, r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f812 	bl	8006f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d108      	bne.n	8006f96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f94:	e031      	b.n	8006ffa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f96:	2308      	movs	r3, #8
 8006f98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	0e5b      	lsrs	r3, r3, #25
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	0f5b      	lsrs	r3, r3, #29
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	7b3a      	ldrb	r2, [r7, #12]
 8006fc2:	4911      	ldr	r1, [pc, #68]	; (8007008 <UARTEx_SetNbDataToProcess+0x94>)
 8006fc4:	5c8a      	ldrb	r2, [r1, r2]
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fca:	7b3a      	ldrb	r2, [r7, #12]
 8006fcc:	490f      	ldr	r1, [pc, #60]	; (800700c <UARTEx_SetNbDataToProcess+0x98>)
 8006fce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	7b7a      	ldrb	r2, [r7, #13]
 8006fe0:	4909      	ldr	r1, [pc, #36]	; (8007008 <UARTEx_SetNbDataToProcess+0x94>)
 8006fe2:	5c8a      	ldrb	r2, [r1, r2]
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fe8:	7b7a      	ldrb	r2, [r7, #13]
 8006fea:	4908      	ldr	r1, [pc, #32]	; (800700c <UARTEx_SetNbDataToProcess+0x98>)
 8006fec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fee:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	08009a68 	.word	0x08009a68
 800700c:	08009a70 	.word	0x08009a70

08007010 <_print>:
extern uint8_t tetromino_current[];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _print() {
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, buf, 80, 0xFFFF);
 8007014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007018:	2250      	movs	r2, #80	; 0x50
 800701a:	4903      	ldr	r1, [pc, #12]	; (8007028 <_print+0x18>)
 800701c:	4803      	ldr	r0, [pc, #12]	; (800702c <_print+0x1c>)
 800701e:	f7fd fffb 	bl	8005018 <HAL_UART_Transmit>
}
 8007022:	bf00      	nop
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	200005cc 	.word	0x200005cc
 800702c:	20000890 	.word	0x20000890

08007030 <hello_world>:
void clear() {
	sprintf(buf, empty);
//	_print();
}

void hello_world() {
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
	sprintf(buf, "Hello, World!");
 8007034:	4903      	ldr	r1, [pc, #12]	; (8007044 <hello_world+0x14>)
 8007036:	4804      	ldr	r0, [pc, #16]	; (8007048 <hello_world+0x18>)
 8007038:	f002 f92e 	bl	8009298 <siprintf>
	_print();
 800703c:	f7ff ffe8 	bl	8007010 <_print>
}
 8007040:	bf00      	nop
 8007042:	bd80      	pop	{r7, pc}
 8007044:	08009998 	.word	0x08009998
 8007048:	200005cc 	.word	0x200005cc

0800704c <create_window>:
//    }

}

// create window, as well as initializes tetris game
void create_window(Window * window) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    // initialize window
    window->width = IMAGE_WIDTH;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2250      	movs	r2, #80	; 0x50
 8007058:	601a      	str	r2, [r3, #0]
    window->height = IMAGE_HEIGHT;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007060:	605a      	str	r2, [r3, #4]

    window->frame = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8007062:	f240 7004 	movw	r0, #1796	; 0x704
 8007066:	f002 f84d 	bl	8009104 <malloc>
 800706a:	4603      	mov	r3, r0
 800706c:	461a      	mov	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	609a      	str	r2, [r3, #8]
    window->true  = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8007072:	f240 7004 	movw	r0, #1796	; 0x704
 8007076:	f002 f845 	bl	8009104 <malloc>
 800707a:	4603      	mov	r3, r0
 800707c:	461a      	mov	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]

    // Fill image buffers with default value
    for(int i = 0; i < vert_size; i++) {
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	e03e      	b.n	8007106 <create_window+0xba>
		// Point to place in continuous mem location
    	window->frame[i] = window->frameBuff + i*horiz_size;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f103 0210 	add.w	r2, r3, #16
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2164      	movs	r1, #100	; 0x64
 8007092:	fb01 f303 	mul.w	r3, r1, r3
 8007096:	4618      	mov	r0, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6899      	ldr	r1, [r3, #8]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	4402      	add	r2, r0
 80070a4:	601a      	str	r2, [r3, #0]
    	window->true[i]  = window->trueBuff  + i*horiz_size;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 80070ac:	33fc      	adds	r3, #252	; 0xfc
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	2164      	movs	r1, #100	; 0x64
 80070b2:	fb01 f202 	mul.w	r2, r1, r2
 80070b6:	4610      	mov	r0, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68d1      	ldr	r1, [r2, #12]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	0092      	lsls	r2, r2, #2
 80070c0:	440a      	add	r2, r1
 80070c2:	4403      	add	r3, r0
 80070c4:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < horiz_size; j++) {
 80070c6:	2300      	movs	r3, #0
 80070c8:	60bb      	str	r3, [r7, #8]
 80070ca:	e016      	b.n	80070fa <create_window+0xae>
			window->frame[i][j] = 0;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4413      	add	r3, r2
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
			window->true[i][j] = 0;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4413      	add	r3, r2
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < horiz_size; j++) {
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60bb      	str	r3, [r7, #8]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b63      	cmp	r3, #99	; 0x63
 80070fe:	dde5      	ble.n	80070cc <create_window+0x80>
    for(int i = 0; i < vert_size; i++) {
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800710c:	ddbc      	ble.n	8007088 <create_window+0x3c>
		}
    }

    // initialize tetris game board
    tetris_initialize_game(window);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 f994 	bl	800843c <tetris_initialize_game>
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <game_playing>:
 * @brief Use when the tetris game is playing. (state machine -> game)
 *
 * @param window window that is being used
 * @param event user input
 */
void game_playing(Window* window, game_input_t event) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af04      	add	r7, sp, #16
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	2b05      	cmp	r3, #5
 800712c:	d10a      	bne.n	8007144 <game_playing+0x28>
    	window->game.state = Paused;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8007134:	33f0      	adds	r3, #240	; 0xf0
 8007136:	2202      	movs	r2, #2
 8007138:	701a      	strb	r2, [r3, #0]
    	game_paused(window, INPUT_ERROR);
 800713a:	2106      	movs	r1, #6
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f86b 	bl	8007218 <game_paused>
        drawRect_color(window, 0, 0, window->width, window->height, HORIZ_SCALE, VERT_SCALE, 150);
        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
        drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
    }

}
 8007142:	e063      	b.n	800720c <game_playing+0xf0>
        switch (event) {
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	2b06      	cmp	r3, #6
 8007148:	d824      	bhi.n	8007194 <game_playing+0x78>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <game_playing+0x34>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	0800718d 	.word	0x0800718d
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007185 	.word	0x08007185
 800715c:	0800716d 	.word	0x0800716d
 8007160:	08007175 	.word	0x08007175
 8007164:	08007195 	.word	0x08007195
 8007168:	08007195 	.word	0x08007195
                tetris_move_left(window);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 faf3 	bl	8008758 <tetris_move_left>
            break;
 8007172:	e010      	b.n	8007196 <game_playing+0x7a>
                tetris_move_right(window);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 fb10 	bl	800879a <tetris_move_right>
            break;
 800717a:	e00c      	b.n	8007196 <game_playing+0x7a>
                tetris_rotate_C_tetromino(window);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 fa67 	bl	8008650 <tetris_rotate_C_tetromino>
            break;
 8007182:	e008      	b.n	8007196 <game_playing+0x7a>
                tetris_rotate_CC_tetromino(window);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 faa5 	bl	80086d4 <tetris_rotate_CC_tetromino>
            break;
 800718a:	e004      	b.n	8007196 <game_playing+0x7a>
                tetris_move_down(window);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 fb24 	bl	80087da <tetris_move_down>
            break;
 8007192:	e000      	b.n	8007196 <game_playing+0x7a>
            break;
 8007194:	bf00      	nop
        drawRect_color(window, 0, 0, window->width, window->height, HORIZ_SCALE, VERT_SCALE, 150);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2196      	movs	r1, #150	; 0x96
 80071a0:	9103      	str	r1, [sp, #12]
 80071a2:	210c      	movs	r1, #12
 80071a4:	9102      	str	r1, [sp, #8]
 80071a6:	2103      	movs	r1, #3
 80071a8:	9101      	str	r1, [sp, #4]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	2200      	movs	r2, #0
 80071b0:	2100      	movs	r1, #0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 ff02 	bl	8008fbc <drawRect_color>
        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	230c      	movs	r3, #12
 80071c2:	9302      	str	r3, [sp, #8]
 80071c4:	2303      	movs	r3, #3
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	2318      	movs	r3, #24
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	230a      	movs	r3, #10
 80071ce:	2205      	movs	r2, #5
 80071d0:	2105      	movs	r1, #5
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fe62 	bl	8008e9c <drawRect>
        drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80071de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	1d59      	adds	r1, r3, #5
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80071ec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	1d5a      	adds	r2, r3, #5
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <game_playing+0xf8>)
 80071f6:	9303      	str	r3, [sp, #12]
 80071f8:	230c      	movs	r3, #12
 80071fa:	9302      	str	r3, [sp, #8]
 80071fc:	2303      	movs	r3, #3
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	2304      	movs	r3, #4
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2304      	movs	r3, #4
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fe48 	bl	8008e9c <drawRect>
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000624 	.word	0x20000624

08007218 <game_paused>:
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 * @param event user input
 */
void game_paused(Window* window, game_input_t event) {
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af04      	add	r7, sp, #16
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	2b05      	cmp	r3, #5
 8007228:	d10a      	bne.n	8007240 <game_paused+0x28>
    	window->game.state = Playing;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8007230:	33f0      	adds	r3, #240	; 0xf0
 8007232:	2201      	movs	r2, #1
 8007234:	701a      	strb	r2, [r3, #0]
    	game_playing(window, INPUT_ERROR);
 8007236:	2106      	movs	r1, #6
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff ff6f 	bl	800711c <game_playing>
        // draw game board
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 50);
        print_str(window, "Press Space", 2, 00);
        print_str(window, "To Continue", 2, 60);
    }
}
 800723e:	e01c      	b.n	800727a <game_paused+0x62>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 50);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2132      	movs	r1, #50	; 0x32
 800724a:	9103      	str	r1, [sp, #12]
 800724c:	210a      	movs	r1, #10
 800724e:	9102      	str	r1, [sp, #8]
 8007250:	2104      	movs	r1, #4
 8007252:	9101      	str	r1, [sp, #4]
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4613      	mov	r3, r2
 8007258:	2200      	movs	r2, #0
 800725a:	2100      	movs	r1, #0
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fead 	bl	8008fbc <drawRect_color>
        print_str(window, "Press Space", 2, 00);
 8007262:	2300      	movs	r3, #0
 8007264:	2202      	movs	r2, #2
 8007266:	4907      	ldr	r1, [pc, #28]	; (8007284 <game_paused+0x6c>)
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f893 	bl	8007394 <print_str>
        print_str(window, "To Continue", 2, 60);
 800726e:	233c      	movs	r3, #60	; 0x3c
 8007270:	2202      	movs	r2, #2
 8007272:	4905      	ldr	r1, [pc, #20]	; (8007288 <game_paused+0x70>)
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f88d 	bl	8007394 <print_str>
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	08009a24 	.word	0x08009a24
 8007288:	08009a30 	.word	0x08009a30

0800728c <game_start>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_start(Window* window, game_input_t event) {
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af04      	add	r7, sp, #16
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	2b05      	cmp	r3, #5
 800729c:	d10a      	bne.n	80072b4 <game_start+0x28>
    	window->game.state = Playing;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80072a4:	33f0      	adds	r3, #240	; 0xf0
 80072a6:	2201      	movs	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]
    	game_playing(window, INPUT_ERROR);
 80072aa:	2106      	movs	r1, #6
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff ff35 	bl	800711c <game_playing>
        print_str(window, "Welcome To", 2, 0);
        print_str(window, "Tetris!", 20, 100);
        print_str(window, "Press Space", 2, 200);
        print_str(window, "To Continue", 2, 260);
    }
}
 80072b2:	e029      	b.n	8007308 <game_start+0x7c>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 80);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2150      	movs	r1, #80	; 0x50
 80072be:	9103      	str	r1, [sp, #12]
 80072c0:	210a      	movs	r1, #10
 80072c2:	9102      	str	r1, [sp, #8]
 80072c4:	2104      	movs	r1, #4
 80072c6:	9101      	str	r1, [sp, #4]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	4613      	mov	r3, r2
 80072cc:	2200      	movs	r2, #0
 80072ce:	2100      	movs	r1, #0
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 fe73 	bl	8008fbc <drawRect_color>
        print_str(window, "Welcome To", 2, 0);
 80072d6:	2300      	movs	r3, #0
 80072d8:	2202      	movs	r2, #2
 80072da:	490d      	ldr	r1, [pc, #52]	; (8007310 <game_start+0x84>)
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f859 	bl	8007394 <print_str>
        print_str(window, "Tetris!", 20, 100);
 80072e2:	2364      	movs	r3, #100	; 0x64
 80072e4:	2214      	movs	r2, #20
 80072e6:	490b      	ldr	r1, [pc, #44]	; (8007314 <game_start+0x88>)
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f853 	bl	8007394 <print_str>
        print_str(window, "Press Space", 2, 200);
 80072ee:	23c8      	movs	r3, #200	; 0xc8
 80072f0:	2202      	movs	r2, #2
 80072f2:	4909      	ldr	r1, [pc, #36]	; (8007318 <game_start+0x8c>)
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f84d 	bl	8007394 <print_str>
        print_str(window, "To Continue", 2, 260);
 80072fa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80072fe:	2202      	movs	r2, #2
 8007300:	4906      	ldr	r1, [pc, #24]	; (800731c <game_start+0x90>)
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f846 	bl	8007394 <print_str>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	08009a3c 	.word	0x08009a3c
 8007314:	08009a48 	.word	0x08009a48
 8007318:	08009a24 	.word	0x08009a24
 800731c:	08009a30 	.word	0x08009a30

08007320 <game_ended>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_ended(Window* window, game_input_t event) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
	if (event == TOGGLEPAUSE) {
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	2b05      	cmp	r3, #5
 8007330:	d10a      	bne.n	8007348 <game_ended+0x28>
		window->game.state = Start;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8007338:	33f0      	adds	r3, #240	; 0xf0
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]
		game_start(window, INPUT_ERROR);
 800733e:	2106      	movs	r1, #6
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ffa3 	bl	800728c <game_start>
		tetris_draw_endScreen(window);
	}



}
 8007346:	e002      	b.n	800734e <game_ended+0x2e>
		tetris_draw_endScreen(window);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 faed 	bl	8008928 <tetris_draw_endScreen>
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <swap_buffer>:
/**
 * @brief Swap the image buffers.
 *
 * @param window window with the image buffers.
 */
void swap_buffer(Window * window) {
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	// Swap pointers
	uint8_t** tmp = window->true;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	60fb      	str	r3, [r7, #12]
	window->true = window->frame;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60da      	str	r2, [r3, #12]
	window->frame = tmp;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	609a      	str	r2, [r3, #8]
//	clear_buffer();
	// Change DMA memory address
	hdac1.DMA_Handle1->Instance->CMAR = (uint32_t) window->true[0];
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <swap_buffer+0x38>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60da      	str	r2, [r3, #12]
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	200007c8 	.word	0x200007c8

08007394 <print_str>:

void print_str(Window * window, char* buffer, int x, int y) {
 8007394:	b480      	push	{r7}
 8007396:	b08b      	sub	sp, #44	; 0x2c
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]

	x += 3; // Avoid back porch
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3303      	adds	r3, #3
 80073a6:	607b      	str	r3, [r7, #4]
	y += 65;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	3341      	adds	r3, #65	; 0x41
 80073ac:	603b      	str	r3, [r7, #0]

	char cur_char = buffer[0];
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(cur_char >= 97) cur_char -= 32;
 80073b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ba:	2b60      	cmp	r3, #96	; 0x60
 80073bc:	d904      	bls.n	80073c8 <print_str+0x34>
 80073be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073c2:	3b20      	subs	r3, #32
 80073c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	623b      	str	r3, [r7, #32]
	while(cur_char != '\0') {
 80073cc:	e07d      	b.n	80074ca <print_str+0x136>
		char* bitmap = font_map[cur_char - 32]; // 32 = ' '
 80073ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d2:	f1a3 0220 	sub.w	r2, r3, #32
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009a      	lsls	r2, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	4a40      	ldr	r2, [pc, #256]	; (80074e4 <print_str+0x150>)
 80073e2:	4413      	add	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]
		for (int h = 0; h < 50; h++) {
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
 80073ea:	e056      	b.n	800749a <print_str+0x106>
			window->frame[h+y][x] = 80; // Precursor
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	69f9      	ldr	r1, [r7, #28]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	440b      	add	r3, r1
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4413      	add	r3, r2
 8007400:	2250      	movs	r2, #80	; 0x50
 8007402:	701a      	strb	r2, [r3, #0]
			//x += 1;
			for(int w = 0; w < 5; w++) {
 8007404:	2300      	movs	r3, #0
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e034      	b.n	8007474 <print_str+0xe0>
				int array_index = (h/10) * 5 + w; // h/5 = floor division, to stretch
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4a36      	ldr	r2, [pc, #216]	; (80074e8 <print_str+0x154>)
 800740e:	fb82 1203 	smull	r1, r2, r2, r3
 8007412:	1092      	asrs	r2, r2, #2
 8007414:	17db      	asrs	r3, r3, #31
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	4413      	add	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
				if(bitmap[array_index]) window->frame[h+y][1+w+x] = 190;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4413      	add	r3, r2
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00f      	beq.n	8007450 <print_str+0xbc>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	69f9      	ldr	r1, [r7, #28]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	440b      	add	r3, r1
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	1c51      	adds	r1, r2, #1
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	440a      	add	r2, r1
 8007448:	4413      	add	r3, r2
 800744a:	22be      	movs	r2, #190	; 0xbe
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	e00e      	b.n	800746e <print_str+0xda>
				else window->frame[h+y][1+w+x] = 80;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	69f9      	ldr	r1, [r7, #28]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	440b      	add	r3, r1
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	1c51      	adds	r1, r2, #1
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	440a      	add	r2, r1
 8007468:	4413      	add	r3, r2
 800746a:	2250      	movs	r2, #80	; 0x50
 800746c:	701a      	strb	r2, [r3, #0]
			for(int w = 0; w < 5; w++) {
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	3301      	adds	r3, #1
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2b04      	cmp	r3, #4
 8007478:	ddc7      	ble.n	800740a <print_str+0x76>
			}
			window->frame[h+y][x+6] = 80;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	69f9      	ldr	r1, [r7, #28]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	440b      	add	r3, r1
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3306      	adds	r3, #6
 800748e:	4413      	add	r3, r2
 8007490:	2250      	movs	r2, #80	; 0x50
 8007492:	701a      	strb	r2, [r3, #0]
		for (int h = 0; h < 50; h++) {
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	2b31      	cmp	r3, #49	; 0x31
 800749e:	dda5      	ble.n	80073ec <print_str+0x58>
		}
		x += 7; // 1 pre & postcursor
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3307      	adds	r3, #7
 80074a4:	607b      	str	r3, [r7, #4]

		i++;
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	3301      	adds	r3, #1
 80074aa:	623b      	str	r3, [r7, #32]
		cur_char = buffer[i];
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	4413      	add	r3, r2
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//'a' -> 'A' for example
		if(cur_char >= 97) cur_char -= 32;
 80074b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074bc:	2b60      	cmp	r3, #96	; 0x60
 80074be:	d904      	bls.n	80074ca <print_str+0x136>
 80074c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c4:	3b20      	subs	r3, #32
 80074c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(cur_char != '\0') {
 80074ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f47f af7d 	bne.w	80073ce <print_str+0x3a>
	}
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	372c      	adds	r7, #44	; 0x2c
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000008 	.word	0x20000008
 80074e8:	66666667 	.word	0x66666667

080074ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	f5ad 3dc3 	sub.w	sp, sp, #99840	; 0x18600
 80074f2:	b0c2      	sub	sp, #264	; 0x108
 80074f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 80074f6:	2300      	movs	r3, #0
 80074f8:	f507 32c3 	add.w	r2, r7, #99840	; 0x18600
 80074fc:	f102 02fc 	add.w	r2, r2, #252	; 0xfc
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	e013      	b.n	800752c <main+0x40>
	    input_buffer[i] = INPUT_ERROR;
 8007504:	4a62      	ldr	r2, [pc, #392]	; (8007690 <main+0x1a4>)
 8007506:	f507 33c3 	add.w	r3, r7, #99840	; 0x18600
 800750a:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4413      	add	r3, r2
 8007512:	2206      	movs	r2, #6
 8007514:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 8007516:	f507 33c3 	add.w	r3, r7, #99840	; 0x18600
 800751a:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	f507 32c3 	add.w	r2, r7, #99840	; 0x18600
 8007526:	f102 02fc 	add.w	r2, r2, #252	; 0xfc
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	f507 33c3 	add.w	r3, r7, #99840	; 0x18600
 8007530:	f103 03fc 	add.w	r3, r3, #252	; 0xfc
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b04      	cmp	r3, #4
 8007538:	dde4      	ble.n	8007504 <main+0x18>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800753a:	f7f9 fb3b 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800753e:	f000 f8b5 	bl	80076ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007542:	f000 fb89 	bl	8007c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8007546:	f000 fb55 	bl	8007bf4 <MX_DMA_Init>
  MX_DAC1_Init();
 800754a:	f000 f901 	bl	8007750 <MX_DAC1_Init>

  MX_TIM4_Init();
 800754e:	f000 fa63 	bl	8007a18 <MX_TIM4_Init>
  MX_TIM2_Init();
 8007552:	f000 f995 	bl	8007880 <MX_TIM2_Init>
  MX_TIM1_Init();
 8007556:	f000 f93b 	bl	80077d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800755a:	f000 fa0d 	bl	8007978 <MX_TIM3_Init>
  MX_TIM8_Init();
 800755e:	f000 faa9 	bl	8007ab4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8007562:	f000 fafb 	bl	8007b5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Window window;
  create_window(&window);
 8007566:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800756a:	3bfc      	subs	r3, #252	; 0xfc
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fd6d 	bl	800704c <create_window>

  // Fill the frame buffer
  //init_buffer(window.imgBuff1, window.imgBuff2);
  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 8007572:	4848      	ldr	r0, [pc, #288]	; (8007694 <main+0x1a8>)
 8007574:	f7fc fa58 	bl	8003a28 <HAL_TIM_Base_Start_IT>
  HAL_Delay(50);
 8007578:	2032      	movs	r0, #50	; 0x32
 800757a:	f7f9 fb8f 	bl	8000c9c <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 800757e:	210c      	movs	r1, #12
 8007580:	4845      	ldr	r0, [pc, #276]	; (8007698 <main+0x1ac>)
 8007582:	f7fc fb23 	bl	8003bcc <HAL_TIM_PWM_Start>
  HAL_Delay(50);
 8007586:	2032      	movs	r0, #50	; 0x32
 8007588:	f7f9 fb88 	bl	8000c9c <HAL_Delay>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) window.true[0], horiz_size*vert_size, DAC_ALIGN_8B_R);
 800758c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007590:	3bfc      	subs	r3, #252	; 0xfc
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	2308      	movs	r3, #8
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	f64a 7364 	movw	r3, #44900	; 0xaf64
 800759e:	2100      	movs	r1, #0
 80075a0:	483e      	ldr	r0, [pc, #248]	; (800769c <main+0x1b0>)
 80075a2:	f7f9 fcd3 	bl	8000f4c <HAL_DAC_Start_DMA>
  HAL_Delay(50);
 80075a6:	2032      	movs	r0, #50	; 0x32
 80075a8:	f7f9 fb78 	bl	8000c9c <HAL_Delay>
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 80075ac:	483c      	ldr	r0, [pc, #240]	; (80076a0 <main+0x1b4>)
 80075ae:	f7fc f9d3 	bl	8003958 <HAL_TIM_Base_Start>

  HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 80075b2:	2201      	movs	r2, #1
 80075b4:	493b      	ldr	r1, [pc, #236]	; (80076a4 <main+0x1b8>)
 80075b6:	483c      	ldr	r0, [pc, #240]	; (80076a8 <main+0x1bc>)
 80075b8:	f7fd fdc6 	bl	8005148 <HAL_UART_Receive_IT>
  //clear_buffer();

  // Start the Game
  game_start(&window, INPUT_ERROR);
 80075bc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80075c0:	3bfc      	subs	r3, #252	; 0xfc
 80075c2:	2106      	movs	r1, #6
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fe61 	bl	800728c <game_start>
  swap_buffer(&window);
 80075ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80075ce:	3bfc      	subs	r3, #252	; 0xfc
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fec1 	bl	8007358 <swap_buffer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
    // process button presses (update game state)
	game_input_t event = process_user_input(&window);
 80075d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80075da:	3bfc      	subs	r3, #252	; 0xfc
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fc19 	bl	8007e14 <process_user_input>
 80075e2:	4603      	mov	r3, r0
 80075e4:	f507 32c3 	add.w	r2, r7, #99840	; 0x18600
 80075e8:	f102 02fb 	add.w	r2, r2, #251	; 0xfb
 80075ec:	7013      	strb	r3, [r2, #0]

	switch (window.game.state) {
 80075ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80075f2:	3bfc      	subs	r3, #252	; 0xfc
 80075f4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80075f8:	33f0      	adds	r3, #240	; 0xf0
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d83f      	bhi.n	8007680 <main+0x194>
 8007600:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <main+0x11c>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	08007619 	.word	0x08007619
 800760c:	08007633 	.word	0x08007633
 8007610:	0800764d 	.word	0x0800764d
 8007614:	08007667 	.word	0x08007667
	  case Start:
		  game_start(&window, event);
 8007618:	f507 33c3 	add.w	r3, r7, #99840	; 0x18600
 800761c:	f103 03fb 	add.w	r3, r3, #251	; 0xfb
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007626:	3bfc      	subs	r3, #252	; 0xfc
 8007628:	4611      	mov	r1, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fe2e 	bl	800728c <game_start>
	  break;
 8007630:	e026      	b.n	8007680 <main+0x194>
	  case Playing:
		  // update the game state, and draw to frame buffer
		  game_playing(&window, event);
 8007632:	f507 33c3 	add.w	r3, r7, #99840	; 0x18600
 8007636:	f103 03fb 	add.w	r3, r3, #251	; 0xfb
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007640:	3bfc      	subs	r3, #252	; 0xfc
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fd69 	bl	800711c <game_playing>
	  break;
 800764a:	e019      	b.n	8007680 <main+0x194>
	  case Paused:
		  game_paused(&window, event);
 800764c:	f507 33c3 	add.w	r3, r7, #99840	; 0x18600
 8007650:	f103 03fb 	add.w	r3, r3, #251	; 0xfb
 8007654:	781a      	ldrb	r2, [r3, #0]
 8007656:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800765a:	3bfc      	subs	r3, #252	; 0xfc
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fdda 	bl	8007218 <game_paused>
	  break;
 8007664:	e00c      	b.n	8007680 <main+0x194>
	  case Ended:
		  game_ended(&window, event);
 8007666:	f507 33c3 	add.w	r3, r7, #99840	; 0x18600
 800766a:	f103 03fb 	add.w	r3, r3, #251	; 0xfb
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007674:	3bfc      	subs	r3, #252	; 0xfc
 8007676:	4611      	mov	r1, r2
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff fe51 	bl	8007320 <game_ended>
	  break;
 800767e:	bf00      	nop
	}
	swap_buffer(&window);
 8007680:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007684:	3bfc      	subs	r3, #252	; 0xfc
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fe66 	bl	8007358 <swap_buffer>
  while (1){
 800768c:	e7a3      	b.n	80075d6 <main+0xea>
 800768e:	bf00      	nop
 8007690:	20000888 	.word	0x20000888
 8007694:	20000920 	.word	0x20000920
 8007698:	2000096c 	.word	0x2000096c
 800769c:	200007c8 	.word	0x200007c8
 80076a0:	2000077c 	.word	0x2000077c
 80076a4:	2000061c 	.word	0x2000061c
 80076a8:	20000890 	.word	0x20000890

080076ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b096      	sub	sp, #88	; 0x58
 80076b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80076b2:	f107 0314 	add.w	r3, r7, #20
 80076b6:	2244      	movs	r2, #68	; 0x44
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f001 fd2a 	bl	8009114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076c0:	463b      	mov	r3, r7
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	60da      	str	r2, [r3, #12]
 80076cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80076ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80076d2:	f7fa fc55 	bl	8001f80 <HAL_PWREx_ControlVoltageScaling>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80076dc:	f000 fc1c 	bl	8007f18 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80076e0:	2310      	movs	r3, #16
 80076e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80076e4:	2301      	movs	r3, #1
 80076e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80076ec:	2360      	movs	r3, #96	; 0x60
 80076ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076f0:	2302      	movs	r3, #2
 80076f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80076f4:	2301      	movs	r3, #1
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80076fc:	2328      	movs	r3, #40	; 0x28
 80076fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007700:	2302      	movs	r3, #2
 8007702:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007704:	2302      	movs	r3, #2
 8007706:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007708:	2302      	movs	r3, #2
 800770a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800770c:	f107 0314 	add.w	r3, r7, #20
 8007710:	4618      	mov	r0, r3
 8007712:	f7fa fcd9 	bl	80020c8 <HAL_RCC_OscConfig>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800771c:	f000 fbfc 	bl	8007f18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007720:	230f      	movs	r3, #15
 8007722:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007724:	2303      	movs	r3, #3
 8007726:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007728:	2300      	movs	r3, #0
 800772a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007730:	2300      	movs	r3, #0
 8007732:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007734:	463b      	mov	r3, r7
 8007736:	2103      	movs	r1, #3
 8007738:	4618      	mov	r0, r3
 800773a:	f7fb f8eb 	bl	8002914 <HAL_RCC_ClockConfig>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8007744:	f000 fbe8 	bl	8007f18 <Error_Handler>
  }
}
 8007748:	bf00      	nop
 800774a:	3758      	adds	r7, #88	; 0x58
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	; 0x28
 8007754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8007756:	463b      	mov	r3, r7
 8007758:	2228      	movs	r2, #40	; 0x28
 800775a:	2100      	movs	r1, #0
 800775c:	4618      	mov	r0, r3
 800775e:	f001 fcd9 	bl	8009114 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8007762:	4b19      	ldr	r3, [pc, #100]	; (80077c8 <MX_DAC1_Init+0x78>)
 8007764:	4a19      	ldr	r2, [pc, #100]	; (80077cc <MX_DAC1_Init+0x7c>)
 8007766:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007768:	4817      	ldr	r0, [pc, #92]	; (80077c8 <MX_DAC1_Init+0x78>)
 800776a:	f7f9 fbcc 	bl	8000f06 <HAL_DAC_Init>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007774:	f000 fbd0 	bl	8007f18 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007778:	2300      	movs	r3, #0
 800777a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800777c:	230e      	movs	r3, #14
 800777e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007780:	2300      	movs	r3, #0
 8007782:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800778c:	2300      	movs	r3, #0
 800778e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007790:	463b      	mov	r3, r7
 8007792:	2200      	movs	r2, #0
 8007794:	4619      	mov	r1, r3
 8007796:	480c      	ldr	r0, [pc, #48]	; (80077c8 <MX_DAC1_Init+0x78>)
 8007798:	f7f9 fd26 	bl	80011e8 <HAL_DAC_ConfigChannel>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 80077a2:	f000 fbb9 	bl	8007f18 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80077a6:	231e      	movs	r3, #30
 80077a8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80077aa:	463b      	mov	r3, r7
 80077ac:	2210      	movs	r2, #16
 80077ae:	4619      	mov	r1, r3
 80077b0:	4805      	ldr	r0, [pc, #20]	; (80077c8 <MX_DAC1_Init+0x78>)
 80077b2:	f7f9 fd19 	bl	80011e8 <HAL_DAC_ConfigChannel>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 80077bc:	f000 fbac 	bl	8007f18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 80077c0:	bf00      	nop
 80077c2:	3728      	adds	r7, #40	; 0x28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	200007c8 	.word	0x200007c8
 80077cc:	40007400 	.word	0x40007400

080077d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80077d6:	f107 030c 	add.w	r3, r7, #12
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	605a      	str	r2, [r3, #4]
 80077e0:	609a      	str	r2, [r3, #8]
 80077e2:	60da      	str	r2, [r3, #12]
 80077e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077e6:	463b      	mov	r3, r7
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80077f0:	4b21      	ldr	r3, [pc, #132]	; (8007878 <MX_TIM1_Init+0xa8>)
 80077f2:	4a22      	ldr	r2, [pc, #136]	; (800787c <MX_TIM1_Init+0xac>)
 80077f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80077f6:	4b20      	ldr	r3, [pc, #128]	; (8007878 <MX_TIM1_Init+0xa8>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077fc:	4b1e      	ldr	r3, [pc, #120]	; (8007878 <MX_TIM1_Init+0xa8>)
 80077fe:	2200      	movs	r2, #0
 8007800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8007802:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <MX_TIM1_Init+0xa8>)
 8007804:	2263      	movs	r2, #99	; 0x63
 8007806:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007808:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <MX_TIM1_Init+0xa8>)
 800780a:	2200      	movs	r2, #0
 800780c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800780e:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <MX_TIM1_Init+0xa8>)
 8007810:	2200      	movs	r2, #0
 8007812:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007814:	4b18      	ldr	r3, [pc, #96]	; (8007878 <MX_TIM1_Init+0xa8>)
 8007816:	2200      	movs	r2, #0
 8007818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800781a:	4817      	ldr	r0, [pc, #92]	; (8007878 <MX_TIM1_Init+0xa8>)
 800781c:	f7fc f844 	bl	80038a8 <HAL_TIM_Base_Init>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007826:	f000 fb77 	bl	8007f18 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800782a:	2306      	movs	r3, #6
 800782c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800782e:	2330      	movs	r3, #48	; 0x30
 8007830:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8007832:	f107 030c 	add.w	r3, r7, #12
 8007836:	4619      	mov	r1, r3
 8007838:	480f      	ldr	r0, [pc, #60]	; (8007878 <MX_TIM1_Init+0xa8>)
 800783a:	f7fc fdca 	bl	80043d2 <HAL_TIM_SlaveConfigSynchro>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8007844:	f000 fb68 	bl	8007f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007848:	2320      	movs	r3, #32
 800784a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800784c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007852:	2300      	movs	r3, #0
 8007854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007856:	463b      	mov	r3, r7
 8007858:	4619      	mov	r1, r3
 800785a:	4807      	ldr	r0, [pc, #28]	; (8007878 <MX_TIM1_Init+0xa8>)
 800785c:	f7fd fae6 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8007866:	f000 fb57 	bl	8007f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800786a:	4b04      	ldr	r3, [pc, #16]	; (800787c <MX_TIM1_Init+0xac>)
 800786c:	2237      	movs	r2, #55	; 0x37
 800786e:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM1_Init 2 */

}
 8007870:	bf00      	nop
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20000920 	.word	0x20000920
 800787c:	40012c00 	.word	0x40012c00

08007880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b090      	sub	sp, #64	; 0x40
 8007884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	605a      	str	r2, [r3, #4]
 8007890:	609a      	str	r2, [r3, #8]
 8007892:	60da      	str	r2, [r3, #12]
 8007894:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007896:	f107 0320 	add.w	r3, r7, #32
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80078a2:	1d3b      	adds	r3, r7, #4
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	60da      	str	r2, [r3, #12]
 80078ae:	611a      	str	r2, [r3, #16]
 80078b0:	615a      	str	r2, [r3, #20]
 80078b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80078b4:	4b2f      	ldr	r3, [pc, #188]	; (8007974 <MX_TIM2_Init+0xf4>)
 80078b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80078ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80078bc:	4b2d      	ldr	r3, [pc, #180]	; (8007974 <MX_TIM2_Init+0xf4>)
 80078be:	2200      	movs	r2, #0
 80078c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078c2:	4b2c      	ldr	r3, [pc, #176]	; (8007974 <MX_TIM2_Init+0xf4>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80078c8:	4b2a      	ldr	r3, [pc, #168]	; (8007974 <MX_TIM2_Init+0xf4>)
 80078ca:	2263      	movs	r2, #99	; 0x63
 80078cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078ce:	4b29      	ldr	r3, [pc, #164]	; (8007974 <MX_TIM2_Init+0xf4>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078d4:	4b27      	ldr	r3, [pc, #156]	; (8007974 <MX_TIM2_Init+0xf4>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80078da:	4826      	ldr	r0, [pc, #152]	; (8007974 <MX_TIM2_Init+0xf4>)
 80078dc:	f7fb ffe4 	bl	80038a8 <HAL_TIM_Base_Init>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80078e6:	f000 fb17 	bl	8007f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80078ea:	4822      	ldr	r0, [pc, #136]	; (8007974 <MX_TIM2_Init+0xf4>)
 80078ec:	f7fc f90c 	bl	8003b08 <HAL_TIM_PWM_Init>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80078f6:	f000 fb0f 	bl	8007f18 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80078fa:	2306      	movs	r3, #6
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80078fe:	2330      	movs	r3, #48	; 0x30
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8007902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007906:	4619      	mov	r1, r3
 8007908:	481a      	ldr	r0, [pc, #104]	; (8007974 <MX_TIM2_Init+0xf4>)
 800790a:	f7fc fd62 	bl	80043d2 <HAL_TIM_SlaveConfigSynchro>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8007914:	f000 fb00 	bl	8007f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007918:	2320      	movs	r3, #32
 800791a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800791c:	2300      	movs	r3, #0
 800791e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007920:	f107 0320 	add.w	r3, r7, #32
 8007924:	4619      	mov	r1, r3
 8007926:	4813      	ldr	r0, [pc, #76]	; (8007974 <MX_TIM2_Init+0xf4>)
 8007928:	f7fd fa80 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8007932:	f000 faf1 	bl	8007f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007936:	2360      	movs	r3, #96	; 0x60
 8007938:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 800793a:	235a      	movs	r3, #90	; 0x5a
 800793c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007946:	1d3b      	adds	r3, r7, #4
 8007948:	220c      	movs	r2, #12
 800794a:	4619      	mov	r1, r3
 800794c:	4809      	ldr	r0, [pc, #36]	; (8007974 <MX_TIM2_Init+0xf4>)
 800794e:	f7fc fb63 	bl	8004018 <HAL_TIM_PWM_ConfigChannel>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8007958:	f000 fade 	bl	8007f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800795c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007960:	2237      	movs	r2, #55	; 0x37
 8007962:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007964:	4803      	ldr	r0, [pc, #12]	; (8007974 <MX_TIM2_Init+0xf4>)
 8007966:	f000 fc21 	bl	80081ac <HAL_TIM_MspPostInit>

}
 800796a:	bf00      	nop
 800796c:	3740      	adds	r7, #64	; 0x40
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	2000096c 	.word	0x2000096c

08007978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800797e:	f107 0310 	add.w	r3, r7, #16
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	605a      	str	r2, [r3, #4]
 8007988:	609a      	str	r2, [r3, #8]
 800798a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800798c:	1d3b      	adds	r3, r7, #4
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	605a      	str	r2, [r3, #4]
 8007994:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007996:	4b1e      	ldr	r3, [pc, #120]	; (8007a10 <MX_TIM3_Init+0x98>)
 8007998:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <MX_TIM3_Init+0x9c>)
 800799a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800799c:	4b1c      	ldr	r3, [pc, #112]	; (8007a10 <MX_TIM3_Init+0x98>)
 800799e:	f242 720f 	movw	r2, #9999	; 0x270f
 80079a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <MX_TIM3_Init+0x98>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25400;
 80079aa:	4b19      	ldr	r3, [pc, #100]	; (8007a10 <MX_TIM3_Init+0x98>)
 80079ac:	f246 3238 	movw	r2, #25400	; 0x6338
 80079b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079b2:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <MX_TIM3_Init+0x98>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079b8:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <MX_TIM3_Init+0x98>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80079be:	4814      	ldr	r0, [pc, #80]	; (8007a10 <MX_TIM3_Init+0x98>)
 80079c0:	f7fb ff72 	bl	80038a8 <HAL_TIM_Base_Init>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80079ca:	f000 faa5 	bl	8007f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80079d4:	f107 0310 	add.w	r3, r7, #16
 80079d8:	4619      	mov	r1, r3
 80079da:	480d      	ldr	r0, [pc, #52]	; (8007a10 <MX_TIM3_Init+0x98>)
 80079dc:	f7fc fc30 	bl	8004240 <HAL_TIM_ConfigClockSource>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80079e6:	f000 fa97 	bl	8007f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079ea:	2300      	movs	r3, #0
 80079ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80079f2:	1d3b      	adds	r3, r7, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4806      	ldr	r0, [pc, #24]	; (8007a10 <MX_TIM3_Init+0x98>)
 80079f8:	f7fd fa18 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8007a02:	f000 fa89 	bl	8007f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007a06:	bf00      	nop
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	2000083c 	.word	0x2000083c
 8007a14:	40000400 	.word	0x40000400

08007a18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a1e:	f107 0310 	add.w	r3, r7, #16
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	605a      	str	r2, [r3, #4]
 8007a28:	609a      	str	r2, [r3, #8]
 8007a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a2c:	1d3b      	adds	r3, r7, #4
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	605a      	str	r2, [r3, #4]
 8007a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007a36:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a38:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <MX_TIM4_Init+0x98>)
 8007a3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8007a3c:	4b1b      	ldr	r3, [pc, #108]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a3e:	2207      	movs	r2, #7
 8007a40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a42:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 8007a48:	4b18      	ldr	r3, [pc, #96]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a4e:	4b17      	ldr	r3, [pc, #92]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a54:	4b15      	ldr	r3, [pc, #84]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007a5a:	4814      	ldr	r0, [pc, #80]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a5c:	f7fb ff24 	bl	80038a8 <HAL_TIM_Base_Init>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8007a66:	f000 fa57 	bl	8007f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007a70:	f107 0310 	add.w	r3, r7, #16
 8007a74:	4619      	mov	r1, r3
 8007a76:	480d      	ldr	r0, [pc, #52]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a78:	f7fc fbe2 	bl	8004240 <HAL_TIM_ConfigClockSource>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8007a82:	f000 fa49 	bl	8007f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007a86:	2320      	movs	r3, #32
 8007a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007a8e:	1d3b      	adds	r3, r7, #4
 8007a90:	4619      	mov	r1, r3
 8007a92:	4806      	ldr	r0, [pc, #24]	; (8007aac <MX_TIM4_Init+0x94>)
 8007a94:	f7fd f9ca 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8007a9e:	f000 fa3b 	bl	8007f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007aa2:	bf00      	nop
 8007aa4:	3720      	adds	r7, #32
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	2000077c 	.word	0x2000077c
 8007ab0:	40000800 	.word	0x40000800

08007ab4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007aba:	f107 0310 	add.w	r3, r7, #16
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	609a      	str	r2, [r3, #8]
 8007ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007ad2:	4b20      	ldr	r3, [pc, #128]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007ad4:	4a20      	ldr	r2, [pc, #128]	; (8007b58 <MX_TIM8_Init+0xa4>)
 8007ad6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007ad8:	4b1e      	ldr	r3, [pc, #120]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ade:	4b1d      	ldr	r3, [pc, #116]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007ae6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007aea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007aec:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007af2:	4b18      	ldr	r3, [pc, #96]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007af8:	4b16      	ldr	r3, [pc, #88]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007afe:	4815      	ldr	r0, [pc, #84]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007b00:	f7fb fed2 	bl	80038a8 <HAL_TIM_Base_Init>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8007b0a:	f000 fa05 	bl	8007f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007b14:	f107 0310 	add.w	r3, r7, #16
 8007b18:	4619      	mov	r1, r3
 8007b1a:	480e      	ldr	r0, [pc, #56]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007b1c:	f7fc fb90 	bl	8004240 <HAL_TIM_ConfigClockSource>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8007b26:	f000 f9f7 	bl	8007f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007b2a:	2320      	movs	r3, #32
 8007b2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8007b2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b32:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007b38:	1d3b      	adds	r3, r7, #4
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4805      	ldr	r0, [pc, #20]	; (8007b54 <MX_TIM8_Init+0xa0>)
 8007b3e:	f7fd f975 	bl	8004e2c <HAL_TIMEx_MasterConfigSynchronization>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8007b48:	f000 f9e6 	bl	8007f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007b4c:	bf00      	nop
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	200006d0 	.word	0x200006d0
 8007b58:	40013400 	.word	0x40013400

08007b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007b60:	4b22      	ldr	r3, [pc, #136]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b62:	4a23      	ldr	r2, [pc, #140]	; (8007bf0 <MX_USART1_UART_Init+0x94>)
 8007b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007b66:	4b21      	ldr	r3, [pc, #132]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007b6e:	4b1f      	ldr	r3, [pc, #124]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007b74:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007b80:	4b1a      	ldr	r3, [pc, #104]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b82:	220c      	movs	r2, #12
 8007b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b86:	4b19      	ldr	r3, [pc, #100]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b8c:	4b17      	ldr	r3, [pc, #92]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007b92:	4b16      	ldr	r3, [pc, #88]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007b98:	4b14      	ldr	r3, [pc, #80]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007b9e:	4b13      	ldr	r3, [pc, #76]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007ba4:	4811      	ldr	r0, [pc, #68]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007ba6:	f7fd f9e7 	bl	8004f78 <HAL_UART_Init>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007bb0:	f000 f9b2 	bl	8007f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	480d      	ldr	r0, [pc, #52]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007bb8:	f7ff f95f 	bl	8006e7a <HAL_UARTEx_SetTxFifoThreshold>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007bc2:	f000 f9a9 	bl	8007f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	4808      	ldr	r0, [pc, #32]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007bca:	f7ff f994 	bl	8006ef6 <HAL_UARTEx_SetRxFifoThreshold>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007bd4:	f000 f9a0 	bl	8007f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007bd8:	4804      	ldr	r0, [pc, #16]	; (8007bec <MX_USART1_UART_Init+0x90>)
 8007bda:	f7ff f915 	bl	8006e08 <HAL_UARTEx_DisableFifoMode>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007be4:	f000 f998 	bl	8007f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007be8:	bf00      	nop
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000890 	.word	0x20000890
 8007bf0:	40013800 	.word	0x40013800

08007bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007bfa:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <MX_DMA_Init+0x60>)
 8007bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfe:	4a15      	ldr	r2, [pc, #84]	; (8007c54 <MX_DMA_Init+0x60>)
 8007c00:	f043 0304 	orr.w	r3, r3, #4
 8007c04:	6493      	str	r3, [r2, #72]	; 0x48
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <MX_DMA_Init+0x60>)
 8007c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	607b      	str	r3, [r7, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007c12:	4b10      	ldr	r3, [pc, #64]	; (8007c54 <MX_DMA_Init+0x60>)
 8007c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c16:	4a0f      	ldr	r2, [pc, #60]	; (8007c54 <MX_DMA_Init+0x60>)
 8007c18:	f043 0301 	orr.w	r3, r3, #1
 8007c1c:	6493      	str	r3, [r2, #72]	; 0x48
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <MX_DMA_Init+0x60>)
 8007c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	200b      	movs	r0, #11
 8007c30:	f7f9 f933 	bl	8000e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007c34:	200b      	movs	r0, #11
 8007c36:	f7f9 f94c 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	200c      	movs	r0, #12
 8007c40:	f7f9 f92b 	bl	8000e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007c44:	200c      	movs	r0, #12
 8007c46:	f7f9 f944 	bl	8000ed2 <HAL_NVIC_EnableIRQ>

}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	40021000 	.word	0x40021000

08007c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c5e:	f107 030c 	add.w	r3, r7, #12
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	605a      	str	r2, [r3, #4]
 8007c68:	609a      	str	r2, [r3, #8]
 8007c6a:	60da      	str	r2, [r3, #12]
 8007c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c6e:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c72:	4a23      	ldr	r2, [pc, #140]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007c74:	f043 0304 	orr.w	r3, r3, #4
 8007c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c7a:	4b21      	ldr	r3, [pc, #132]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	60bb      	str	r3, [r7, #8]
 8007c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c86:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8a:	4a1d      	ldr	r2, [pc, #116]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007c8c:	f043 0301 	orr.w	r3, r3, #1
 8007c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c92:	4b1b      	ldr	r3, [pc, #108]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	607b      	str	r3, [r7, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca2:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007ca4:	f043 0302 	orr.w	r3, r3, #2
 8007ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <MX_GPIO_Init+0xa8>)
 8007cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2104      	movs	r1, #4
 8007cba:	4812      	ldr	r0, [pc, #72]	; (8007d04 <MX_GPIO_Init+0xac>)
 8007cbc:	f7fa f928 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 8007cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007cc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 8007cd0:	f107 030c 	add.w	r3, r7, #12
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	480c      	ldr	r0, [pc, #48]	; (8007d08 <MX_GPIO_Init+0xb0>)
 8007cd8:	f7f9 ff88 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 8007cdc:	2304      	movs	r3, #4
 8007cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 8007cec:	f107 030c 	add.w	r3, r7, #12
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4804      	ldr	r0, [pc, #16]	; (8007d04 <MX_GPIO_Init+0xac>)
 8007cf4:	f7f9 ff7a 	bl	8001bec <HAL_GPIO_Init>

}
 8007cf8:	bf00      	nop
 8007cfa:	3720      	adds	r7, #32
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40021000 	.word	0x40021000
 8007d04:	48000400 	.word	0x48000400
 8007d08:	48000800 	.word	0x48000800

08007d0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
//	if (htim->Instance == TIM1) {
		vert_count = (vert_count + 1) % 449;
 8007d14:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	1c59      	adds	r1, r3, #1
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8007d1c:	fb83 2301 	smull	r2, r3, r3, r1
 8007d20:	440b      	add	r3, r1
 8007d22:	121a      	asrs	r2, r3, #8
 8007d24:	17cb      	asrs	r3, r1, #31
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	4613      	mov	r3, r2
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	1a9b      	subs	r3, r3, r2
 8007d2e:	019b      	lsls	r3, r3, #6
 8007d30:	4413      	add	r3, r2
 8007d32:	1aca      	subs	r2, r1, r3
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007d36:	601a      	str	r2, [r3, #0]
		if(vert_count >= 447) {
 8007d38:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 8007d40:	dd05      	ble.n	8007d4e <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 8007d42:	2200      	movs	r2, #0
 8007d44:	2104      	movs	r1, #4
 8007d46:	4808      	ldr	r0, [pc, #32]	; (8007d68 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8007d48:	f7fa f8e2 	bl	8001f10 <HAL_GPIO_WritePin>
		} else {
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
		}
//	}
}
 8007d4c:	e004      	b.n	8007d58 <HAL_TIM_PeriodElapsedCallback+0x4c>
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
 8007d4e:	2201      	movs	r2, #1
 8007d50:	2104      	movs	r1, #4
 8007d52:	4805      	ldr	r0, [pc, #20]	; (8007d68 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8007d54:	f7fa f8dc 	bl	8001f10 <HAL_GPIO_WritePin>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	200006bc 	.word	0x200006bc
 8007d64:	91f5bcb9 	.word	0x91f5bcb9
 8007d68:	48000400 	.word	0x48000400

08007d6c <push_input_buffer>:



void push_input_buffer(game_input_t input) {
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	71fb      	strb	r3, [r7, #7]
	input_buffer[buffer_push] = input;
 8007d76:	4b0d      	ldr	r3, [pc, #52]	; (8007dac <push_input_buffer+0x40>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	490d      	ldr	r1, [pc, #52]	; (8007db0 <push_input_buffer+0x44>)
 8007d7c:	79fa      	ldrb	r2, [r7, #7]
 8007d7e:	54ca      	strb	r2, [r1, r3]
	buffer_push = (buffer_push + 1) % INPUT_BUFFER_SIZE;
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <push_input_buffer+0x40>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	1c59      	adds	r1, r3, #1
 8007d86:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <push_input_buffer+0x48>)
 8007d88:	fb83 2301 	smull	r2, r3, r3, r1
 8007d8c:	105a      	asrs	r2, r3, #1
 8007d8e:	17cb      	asrs	r3, r1, #31
 8007d90:	1ad2      	subs	r2, r2, r3
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	1aca      	subs	r2, r1, r3
 8007d9a:	4b04      	ldr	r3, [pc, #16]	; (8007dac <push_input_buffer+0x40>)
 8007d9c:	601a      	str	r2, [r3, #0]
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	200006b8 	.word	0x200006b8
 8007db0:	20000888 	.word	0x20000888
 8007db4:	66666667 	.word	0x66666667

08007db8 <pop_input_buffer>:

game_input_t pop_input_buffer() {
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
	if(buffer_pop == buffer_push) return INPUT_ERROR;
 8007dbe:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <pop_input_buffer+0x4c>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <pop_input_buffer+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d101      	bne.n	8007dce <pop_input_buffer+0x16>
 8007dca:	2306      	movs	r3, #6
 8007dcc:	e014      	b.n	8007df8 <pop_input_buffer+0x40>
	game_input_t ret = input_buffer[buffer_pop];
 8007dce:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <pop_input_buffer+0x4c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a0e      	ldr	r2, [pc, #56]	; (8007e0c <pop_input_buffer+0x54>)
 8007dd4:	5cd3      	ldrb	r3, [r2, r3]
 8007dd6:	71fb      	strb	r3, [r7, #7]
	buffer_pop = (buffer_pop + 1) % INPUT_BUFFER_SIZE;
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <pop_input_buffer+0x4c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	1c59      	adds	r1, r3, #1
 8007dde:	4b0c      	ldr	r3, [pc, #48]	; (8007e10 <pop_input_buffer+0x58>)
 8007de0:	fb83 2301 	smull	r2, r3, r3, r1
 8007de4:	105a      	asrs	r2, r3, #1
 8007de6:	17cb      	asrs	r3, r1, #31
 8007de8:	1ad2      	subs	r2, r2, r3
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	1aca      	subs	r2, r1, r3
 8007df2:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <pop_input_buffer+0x4c>)
 8007df4:	601a      	str	r2, [r3, #0]
	return ret;
 8007df6:	79fb      	ldrb	r3, [r7, #7]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	200006b4 	.word	0x200006b4
 8007e08:	200006b8 	.word	0x200006b8
 8007e0c:	20000888 	.word	0x20000888
 8007e10:	66666667 	.word	0x66666667

08007e14 <process_user_input>:



game_input_t process_user_input(Window * window) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
    //char c = getchar();
    game_input_t c = pop_input_buffer();
 8007e1c:	f7ff ffcc 	bl	8007db8 <pop_input_buffer>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
    while(c == INPUT_ERROR) c = pop_input_buffer();
 8007e24:	e003      	b.n	8007e2e <process_user_input+0x1a>
 8007e26:	f7ff ffc7 	bl	8007db8 <pop_input_buffer>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73fb      	strb	r3, [r7, #15]
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	2b06      	cmp	r3, #6
 8007e32:	d0f8      	beq.n	8007e26 <process_user_input+0x12>
    return c;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
//	print_inbuf();
	char c = ((huart)->Instance)->RDR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	73fb      	strb	r3, [r7, #15]
//	swap_buffer();
	switch (c) {
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b73      	cmp	r3, #115	; 0x73
 8007e56:	dc51      	bgt.n	8007efc <HAL_UART_RxCpltCallback+0xbc>
 8007e58:	2b61      	cmp	r3, #97	; 0x61
 8007e5a:	da08      	bge.n	8007e6e <HAL_UART_RxCpltCallback+0x2e>
 8007e5c:	2b3b      	cmp	r3, #59	; 0x3b
 8007e5e:	d042      	beq.n	8007ee6 <HAL_UART_RxCpltCallback+0xa6>
 8007e60:	2b3b      	cmp	r3, #59	; 0x3b
 8007e62:	dc4b      	bgt.n	8007efc <HAL_UART_RxCpltCallback+0xbc>
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d046      	beq.n	8007ef6 <HAL_UART_RxCpltCallback+0xb6>
 8007e68:	2b35      	cmp	r3, #53	; 0x35
 8007e6a:	d02d      	beq.n	8007ec8 <HAL_UART_RxCpltCallback+0x88>
		break;
	case 32: // space
		push_input_buffer(TOGGLEPAUSE);
		//togglePause();
	default:
		break;
 8007e6c:	e046      	b.n	8007efc <HAL_UART_RxCpltCallback+0xbc>
 8007e6e:	3b61      	subs	r3, #97	; 0x61
 8007e70:	2b12      	cmp	r3, #18
 8007e72:	d843      	bhi.n	8007efc <HAL_UART_RxCpltCallback+0xbc>
 8007e74:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <HAL_UART_RxCpltCallback+0x3c>)
 8007e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	08007ecf 	.word	0x08007ecf
 8007e80:	08007efd 	.word	0x08007efd
 8007e84:	08007efd 	.word	0x08007efd
 8007e88:	08007ed7 	.word	0x08007ed7
 8007e8c:	08007efd 	.word	0x08007efd
 8007e90:	08007efd 	.word	0x08007efd
 8007e94:	08007efd 	.word	0x08007efd
 8007e98:	08007efd 	.word	0x08007efd
 8007e9c:	08007efd 	.word	0x08007efd
 8007ea0:	08007efd 	.word	0x08007efd
 8007ea4:	08007efd 	.word	0x08007efd
 8007ea8:	08007edf 	.word	0x08007edf
 8007eac:	08007efd 	.word	0x08007efd
 8007eb0:	08007efd 	.word	0x08007efd
 8007eb4:	08007efd 	.word	0x08007efd
 8007eb8:	08007efd 	.word	0x08007efd
 8007ebc:	08007efd 	.word	0x08007efd
 8007ec0:	08007efd 	.word	0x08007efd
 8007ec4:	08007eef 	.word	0x08007eef
		hello_world();
 8007ec8:	f7ff f8b2 	bl	8007030 <hello_world>
		break;
 8007ecc:	e017      	b.n	8007efe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(LEFT);
 8007ece:	2003      	movs	r0, #3
 8007ed0:	f7ff ff4c 	bl	8007d6c <push_input_buffer>
		break;
 8007ed4:	e013      	b.n	8007efe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(RIGHT);
 8007ed6:	2004      	movs	r0, #4
 8007ed8:	f7ff ff48 	bl	8007d6c <push_input_buffer>
		break;
 8007edc:	e00f      	b.n	8007efe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(CCW);
 8007ede:	2002      	movs	r0, #2
 8007ee0:	f7ff ff44 	bl	8007d6c <push_input_buffer>
		break;
 8007ee4:	e00b      	b.n	8007efe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(CW);
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	f7ff ff40 	bl	8007d6c <push_input_buffer>
		break;
 8007eec:	e007      	b.n	8007efe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(DOWN);
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f7ff ff3c 	bl	8007d6c <push_input_buffer>
		break;
 8007ef4:	e003      	b.n	8007efe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(TOGGLEPAUSE);
 8007ef6:	2005      	movs	r0, #5
 8007ef8:	f7ff ff38 	bl	8007d6c <push_input_buffer>
		break;
 8007efc:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 8007efe:	2201      	movs	r2, #1
 8007f00:	4903      	ldr	r1, [pc, #12]	; (8007f10 <HAL_UART_RxCpltCallback+0xd0>)
 8007f02:	4804      	ldr	r0, [pc, #16]	; (8007f14 <HAL_UART_RxCpltCallback+0xd4>)
 8007f04:	f7fd f920 	bl	8005148 <HAL_UART_Receive_IT>
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	2000061c 	.word	0x2000061c
 8007f14:	20000890 	.word	0x20000890

08007f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007f1c:	b672      	cpsid	i
}
 8007f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007f20:	e7fe      	b.n	8007f20 <Error_Handler+0x8>
	...

08007f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f2a:	4b0f      	ldr	r3, [pc, #60]	; (8007f68 <HAL_MspInit+0x44>)
 8007f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2e:	4a0e      	ldr	r2, [pc, #56]	; (8007f68 <HAL_MspInit+0x44>)
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	6613      	str	r3, [r2, #96]	; 0x60
 8007f36:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <HAL_MspInit+0x44>)
 8007f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <HAL_MspInit+0x44>)
 8007f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f46:	4a08      	ldr	r2, [pc, #32]	; (8007f68 <HAL_MspInit+0x44>)
 8007f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007f4e:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <HAL_MspInit+0x44>)
 8007f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	40021000 	.word	0x40021000

08007f6c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08a      	sub	sp, #40	; 0x28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	605a      	str	r2, [r3, #4]
 8007f7e:	609a      	str	r2, [r3, #8]
 8007f80:	60da      	str	r2, [r3, #12]
 8007f82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a44      	ldr	r2, [pc, #272]	; (800809c <HAL_DAC_MspInit+0x130>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	f040 8081 	bne.w	8008092 <HAL_DAC_MspInit+0x126>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007f90:	4b43      	ldr	r3, [pc, #268]	; (80080a0 <HAL_DAC_MspInit+0x134>)
 8007f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f94:	4a42      	ldr	r2, [pc, #264]	; (80080a0 <HAL_DAC_MspInit+0x134>)
 8007f96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8007f9c:	4b40      	ldr	r3, [pc, #256]	; (80080a0 <HAL_DAC_MspInit+0x134>)
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fa8:	4b3d      	ldr	r3, [pc, #244]	; (80080a0 <HAL_DAC_MspInit+0x134>)
 8007faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fac:	4a3c      	ldr	r2, [pc, #240]	; (80080a0 <HAL_DAC_MspInit+0x134>)
 8007fae:	f043 0301 	orr.w	r3, r3, #1
 8007fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fb4:	4b3a      	ldr	r3, [pc, #232]	; (80080a0 <HAL_DAC_MspInit+0x134>)
 8007fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007fc0:	2330      	movs	r3, #48	; 0x30
 8007fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fcc:	f107 0314 	add.w	r3, r7, #20
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007fd6:	f7f9 fe09 	bl	8001bec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8007fda:	4b32      	ldr	r3, [pc, #200]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8007fdc:	4a32      	ldr	r2, [pc, #200]	; (80080a8 <HAL_DAC_MspInit+0x13c>)
 8007fde:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8007fe0:	4b30      	ldr	r3, [pc, #192]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8007fe2:	2206      	movs	r2, #6
 8007fe4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007fe6:	4b2f      	ldr	r3, [pc, #188]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8007fe8:	2210      	movs	r2, #16
 8007fea:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fec:	4b2d      	ldr	r3, [pc, #180]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007ff2:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8007ff4:	2280      	movs	r2, #128	; 0x80
 8007ff6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ff8:	4b2a      	ldr	r3, [pc, #168]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ffe:	4b29      	ldr	r3, [pc, #164]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8008000:	2200      	movs	r2, #0
 8008002:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8008004:	4b27      	ldr	r3, [pc, #156]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8008006:	2220      	movs	r2, #32
 8008008:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800800a:	4b26      	ldr	r3, [pc, #152]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 800800c:	2200      	movs	r2, #0
 800800e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8008010:	4824      	ldr	r0, [pc, #144]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8008012:	f7f9 fabd 	bl	8001590 <HAL_DMA_Init>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 800801c:	f7ff ff7c 	bl	8007f18 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a20      	ldr	r2, [pc, #128]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8008024:	609a      	str	r2, [r3, #8]
 8008026:	4a1f      	ldr	r2, [pc, #124]	; (80080a4 <HAL_DAC_MspInit+0x138>)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 800802c:	4b1f      	ldr	r3, [pc, #124]	; (80080ac <HAL_DAC_MspInit+0x140>)
 800802e:	4a20      	ldr	r2, [pc, #128]	; (80080b0 <HAL_DAC_MspInit+0x144>)
 8008030:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 8008032:	4b1e      	ldr	r3, [pc, #120]	; (80080ac <HAL_DAC_MspInit+0x140>)
 8008034:	2207      	movs	r2, #7
 8008036:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008038:	4b1c      	ldr	r3, [pc, #112]	; (80080ac <HAL_DAC_MspInit+0x140>)
 800803a:	2210      	movs	r2, #16
 800803c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800803e:	4b1b      	ldr	r3, [pc, #108]	; (80080ac <HAL_DAC_MspInit+0x140>)
 8008040:	2200      	movs	r2, #0
 8008042:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8008044:	4b19      	ldr	r3, [pc, #100]	; (80080ac <HAL_DAC_MspInit+0x140>)
 8008046:	2280      	movs	r2, #128	; 0x80
 8008048:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800804a:	4b18      	ldr	r3, [pc, #96]	; (80080ac <HAL_DAC_MspInit+0x140>)
 800804c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008050:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008052:	4b16      	ldr	r3, [pc, #88]	; (80080ac <HAL_DAC_MspInit+0x140>)
 8008054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008058:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800805a:	4b14      	ldr	r3, [pc, #80]	; (80080ac <HAL_DAC_MspInit+0x140>)
 800805c:	2220      	movs	r2, #32
 800805e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8008060:	4b12      	ldr	r3, [pc, #72]	; (80080ac <HAL_DAC_MspInit+0x140>)
 8008062:	2200      	movs	r2, #0
 8008064:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8008066:	4811      	ldr	r0, [pc, #68]	; (80080ac <HAL_DAC_MspInit+0x140>)
 8008068:	f7f9 fa92 	bl	8001590 <HAL_DMA_Init>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_DAC_MspInit+0x10a>
    {
      Error_Handler();
 8008072:	f7ff ff51 	bl	8007f18 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <HAL_DAC_MspInit+0x140>)
 800807a:	60da      	str	r2, [r3, #12]
 800807c:	4a0b      	ldr	r2, [pc, #44]	; (80080ac <HAL_DAC_MspInit+0x140>)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	2036      	movs	r0, #54	; 0x36
 8008088:	f7f8 ff07 	bl	8000e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800808c:	2036      	movs	r0, #54	; 0x36
 800808e:	f7f8 ff20 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008092:	bf00      	nop
 8008094:	3728      	adds	r7, #40	; 0x28
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	40007400 	.word	0x40007400
 80080a0:	40021000 	.word	0x40021000
 80080a4:	200007dc 	.word	0x200007dc
 80080a8:	40020008 	.word	0x40020008
 80080ac:	2000071c 	.word	0x2000071c
 80080b0:	4002001c 	.word	0x4002001c

080080b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a35      	ldr	r2, [pc, #212]	; (8008198 <HAL_TIM_Base_MspInit+0xe4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d114      	bne.n	80080f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80080c6:	4b35      	ldr	r3, [pc, #212]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 80080c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ca:	4a34      	ldr	r2, [pc, #208]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 80080cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80080d0:	6613      	str	r3, [r2, #96]	; 0x60
 80080d2:	4b32      	ldr	r3, [pc, #200]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 80080d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080da:	61fb      	str	r3, [r7, #28]
 80080dc:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	2019      	movs	r0, #25
 80080e4:	f7f8 fed9 	bl	8000e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80080e8:	2019      	movs	r0, #25
 80080ea:	f7f8 fef2 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80080ee:	e04e      	b.n	800818e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f8:	d10c      	bne.n	8008114 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80080fa:	4b28      	ldr	r3, [pc, #160]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 80080fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fe:	4a27      	ldr	r2, [pc, #156]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008100:	f043 0301 	orr.w	r3, r3, #1
 8008104:	6593      	str	r3, [r2, #88]	; 0x58
 8008106:	4b25      	ldr	r3, [pc, #148]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	69bb      	ldr	r3, [r7, #24]
}
 8008112:	e03c      	b.n	800818e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <HAL_TIM_Base_MspInit+0xec>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d114      	bne.n	8008148 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800811e:	4b1f      	ldr	r3, [pc, #124]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008122:	4a1e      	ldr	r2, [pc, #120]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008124:	f043 0302 	orr.w	r3, r3, #2
 8008128:	6593      	str	r3, [r2, #88]	; 0x58
 800812a:	4b1c      	ldr	r3, [pc, #112]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 800812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008136:	2200      	movs	r2, #0
 8008138:	2100      	movs	r1, #0
 800813a:	201d      	movs	r0, #29
 800813c:	f7f8 fead 	bl	8000e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008140:	201d      	movs	r0, #29
 8008142:	f7f8 fec6 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
}
 8008146:	e022      	b.n	800818e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <HAL_TIM_Base_MspInit+0xf0>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d10c      	bne.n	800816c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008152:	4b12      	ldr	r3, [pc, #72]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008156:	4a11      	ldr	r2, [pc, #68]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008158:	f043 0304 	orr.w	r3, r3, #4
 800815c:	6593      	str	r3, [r2, #88]	; 0x58
 800815e:	4b0f      	ldr	r3, [pc, #60]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	693b      	ldr	r3, [r7, #16]
}
 800816a:	e010      	b.n	800818e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM8)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a0d      	ldr	r2, [pc, #52]	; (80081a8 <HAL_TIM_Base_MspInit+0xf4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d10b      	bne.n	800818e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008176:	4b09      	ldr	r3, [pc, #36]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800817a:	4a08      	ldr	r2, [pc, #32]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 800817c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008180:	6613      	str	r3, [r2, #96]	; 0x60
 8008182:	4b06      	ldr	r3, [pc, #24]	; (800819c <HAL_TIM_Base_MspInit+0xe8>)
 8008184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40012c00 	.word	0x40012c00
 800819c:	40021000 	.word	0x40021000
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40013400 	.word	0x40013400

080081ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b4:	f107 030c 	add.w	r3, r7, #12
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081cc:	d11c      	bne.n	8008208 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ce:	4b10      	ldr	r3, [pc, #64]	; (8008210 <HAL_TIM_MspPostInit+0x64>)
 80081d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d2:	4a0f      	ldr	r2, [pc, #60]	; (8008210 <HAL_TIM_MspPostInit+0x64>)
 80081d4:	f043 0301 	orr.w	r3, r3, #1
 80081d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081da:	4b0d      	ldr	r3, [pc, #52]	; (8008210 <HAL_TIM_MspPostInit+0x64>)
 80081dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	60bb      	str	r3, [r7, #8]
 80081e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 80081e6:	2308      	movs	r3, #8
 80081e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081ea:	2302      	movs	r3, #2
 80081ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80081f6:	2301      	movs	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 80081fa:	f107 030c 	add.w	r3, r7, #12
 80081fe:	4619      	mov	r1, r3
 8008200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008204:	f7f9 fcf2 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8008208:	bf00      	nop
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	40021000 	.word	0x40021000

08008214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b0ae      	sub	sp, #184	; 0xb8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800821c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	609a      	str	r2, [r3, #8]
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800822c:	f107 0310 	add.w	r3, r7, #16
 8008230:	2294      	movs	r2, #148	; 0x94
 8008232:	2100      	movs	r1, #0
 8008234:	4618      	mov	r0, r3
 8008236:	f000 ff6d 	bl	8009114 <memset>
  if(huart->Instance==USART1)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a25      	ldr	r2, [pc, #148]	; (80082d4 <HAL_UART_MspInit+0xc0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d142      	bne.n	80082ca <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008244:	2301      	movs	r3, #1
 8008246:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008248:	2300      	movs	r3, #0
 800824a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800824c:	f107 0310 	add.w	r3, r7, #16
 8008250:	4618      	mov	r0, r3
 8008252:	f7fa fe11 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800825c:	f7ff fe5c 	bl	8007f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008260:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <HAL_UART_MspInit+0xc4>)
 8008262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008264:	4a1c      	ldr	r2, [pc, #112]	; (80082d8 <HAL_UART_MspInit+0xc4>)
 8008266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800826a:	6613      	str	r3, [r2, #96]	; 0x60
 800826c:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <HAL_UART_MspInit+0xc4>)
 800826e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008278:	4b17      	ldr	r3, [pc, #92]	; (80082d8 <HAL_UART_MspInit+0xc4>)
 800827a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827c:	4a16      	ldr	r2, [pc, #88]	; (80082d8 <HAL_UART_MspInit+0xc4>)
 800827e:	f043 0302 	orr.w	r3, r3, #2
 8008282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008284:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <HAL_UART_MspInit+0xc4>)
 8008286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	60bb      	str	r3, [r7, #8]
 800828e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008290:	23c0      	movs	r3, #192	; 0xc0
 8008292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008296:	2302      	movs	r3, #2
 8008298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829c:	2300      	movs	r3, #0
 800829e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082a2:	2303      	movs	r3, #3
 80082a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80082a8:	2307      	movs	r3, #7
 80082aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4809      	ldr	r0, [pc, #36]	; (80082dc <HAL_UART_MspInit+0xc8>)
 80082b6:	f7f9 fc99 	bl	8001bec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80082ba:	2200      	movs	r2, #0
 80082bc:	2101      	movs	r1, #1
 80082be:	2025      	movs	r0, #37	; 0x25
 80082c0:	f7f8 fdeb 	bl	8000e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80082c4:	2025      	movs	r0, #37	; 0x25
 80082c6:	f7f8 fe04 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80082ca:	bf00      	nop
 80082cc:	37b8      	adds	r7, #184	; 0xb8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	40013800 	.word	0x40013800
 80082d8:	40021000 	.word	0x40021000
 80082dc:	48000400 	.word	0x48000400

080082e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082e4:	e7fe      	b.n	80082e4 <NMI_Handler+0x4>

080082e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082e6:	b480      	push	{r7}
 80082e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082ea:	e7fe      	b.n	80082ea <HardFault_Handler+0x4>

080082ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082f0:	e7fe      	b.n	80082f0 <MemManage_Handler+0x4>

080082f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082f2:	b480      	push	{r7}
 80082f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082f6:	e7fe      	b.n	80082f6 <BusFault_Handler+0x4>

080082f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082fc:	e7fe      	b.n	80082fc <UsageFault_Handler+0x4>

080082fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082fe:	b480      	push	{r7}
 8008300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008302:	bf00      	nop
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008310:	bf00      	nop
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800831a:	b480      	push	{r7}
 800831c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800831e:	bf00      	nop
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800832c:	f7f8 fc96 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008330:	bf00      	nop
 8008332:	bd80      	pop	{r7, pc}

08008334 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008338:	4802      	ldr	r0, [pc, #8]	; (8008344 <DMA1_Channel1_IRQHandler+0x10>)
 800833a:	f7f9 fb07 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800833e:	bf00      	nop
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200007dc 	.word	0x200007dc

08008348 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800834c:	4802      	ldr	r0, [pc, #8]	; (8008358 <DMA1_Channel2_IRQHandler+0x10>)
 800834e:	f7f9 fafd 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	2000071c 	.word	0x2000071c

0800835c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008360:	4802      	ldr	r0, [pc, #8]	; (800836c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8008362:	f7fb fd39 	bl	8003dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008366:	bf00      	nop
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20000920 	.word	0x20000920

08008370 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008374:	4802      	ldr	r0, [pc, #8]	; (8008380 <TIM3_IRQHandler+0x10>)
 8008376:	f7fb fd2f 	bl	8003dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800837a:	bf00      	nop
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	2000083c 	.word	0x2000083c

08008384 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008388:	4802      	ldr	r0, [pc, #8]	; (8008394 <USART1_IRQHandler+0x10>)
 800838a:	f7fc ff33 	bl	80051f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800838e:	bf00      	nop
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000890 	.word	0x20000890

08008398 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800839c:	4802      	ldr	r0, [pc, #8]	; (80083a8 <TIM6_DAC_IRQHandler+0x10>)
 800839e:	f7f8 fea1 	bl	80010e4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80083a2:	bf00      	nop
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200007c8 	.word	0x200007c8

080083ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083b4:	4a14      	ldr	r2, [pc, #80]	; (8008408 <_sbrk+0x5c>)
 80083b6:	4b15      	ldr	r3, [pc, #84]	; (800840c <_sbrk+0x60>)
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083c0:	4b13      	ldr	r3, [pc, #76]	; (8008410 <_sbrk+0x64>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083c8:	4b11      	ldr	r3, [pc, #68]	; (8008410 <_sbrk+0x64>)
 80083ca:	4a12      	ldr	r2, [pc, #72]	; (8008414 <_sbrk+0x68>)
 80083cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083ce:	4b10      	ldr	r3, [pc, #64]	; (8008410 <_sbrk+0x64>)
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d207      	bcs.n	80083ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083dc:	f000 fe68 	bl	80090b0 <__errno>
 80083e0:	4603      	mov	r3, r0
 80083e2:	220c      	movs	r2, #12
 80083e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ea:	e009      	b.n	8008400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083ec:	4b08      	ldr	r3, [pc, #32]	; (8008410 <_sbrk+0x64>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083f2:	4b07      	ldr	r3, [pc, #28]	; (8008410 <_sbrk+0x64>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	4a05      	ldr	r2, [pc, #20]	; (8008410 <_sbrk+0x64>)
 80083fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083fe:	68fb      	ldr	r3, [r7, #12]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	200a0000 	.word	0x200a0000
 800840c:	00000400 	.word	0x00000400
 8008410:	200006c0 	.word	0x200006c0
 8008414:	200009c8 	.word	0x200009c8

08008418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <SystemInit+0x20>)
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008422:	4a05      	ldr	r2, [pc, #20]	; (8008438 <SystemInit+0x20>)
 8008424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800842c:	bf00      	nop
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	e000ed00 	.word	0xe000ed00

0800843c <tetris_initialize_game>:
/**
 * @brief populate window game variable with a reset tetris game.
 *
 * @param window window
 */
void tetris_initialize_game(Window * window) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
    // fill game board with empty data
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	e009      	b.n	800845e <tetris_initialize_game+0x22>
        window->game.board[i] = EMPTY_BOARD_CHAR;
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4413      	add	r3, r2
 8008450:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008454:	2205      	movs	r2, #5
 8008456:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2bef      	cmp	r3, #239	; 0xef
 8008462:	ddf2      	ble.n	800844a <tetris_initialize_game+0xe>
    // TODO: Make this rand again
//    time_t t;
//    srand((unsigned) time(&t));

    // initialize game state (tetromino, rotation, next tetromino, x, y, game state)
    window->game.rotation = 0;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800846a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800846e:	2200      	movs	r2, #0
 8008470:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = tetris_get_next_tetromino();
 8008472:	f000 f82b 	bl	80084cc <tetris_get_next_tetromino>
 8008476:	4602      	mov	r2, r0
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800847e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008482:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino();
 8008484:	f000 f822 	bl	80084cc <tetris_get_next_tetromino>
 8008488:	4602      	mov	r2, r0
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008490:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8008494:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800849c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80084a0:	2203      	movs	r2, #3
 80084a2:	601a      	str	r2, [r3, #0]
    window->game.y = 0;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80084aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
    window->game.state = Start;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80084b8:	33f0      	adds	r3, #240	; 0xf0
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]

    // initialize the current tetromino
    tetris_update_current_tetromino(window);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f80e 	bl	80084e0 <tetris_update_current_tetromino>
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <tetris_get_next_tetromino>:
/**
 * @brief generate random tetromino piece (select random number between 0 and 7)
 *
 * @return const char* pointer to random tetromino piece
 */
const uint8_t * tetris_get_next_tetromino() {
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
	// TODO: Make this rand again
    switch (0 % 7) {
        case 0:
            return tetromino_I;
 80084d0:	4b02      	ldr	r3, [pc, #8]	; (80084dc <tetris_get_next_tetromino+0x10>)
        default:
            return tetromino_I; // TODO: this is never supposed to happen.
        break;
    }

}
 80084d2:	4618      	mov	r0, r3
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	08009ac0 	.word	0x08009ac0

080084e0 <tetris_update_current_tetromino>:
/**
 * @brief Updates the tetromino piece used for collision/drawing purposes
 *
 * @param window window
 */
void tetris_update_current_tetromino(Window * window) {
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
    // update piece based on rotation state
    int index = 0, row, col;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
    switch (window->game.rotation) {
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80084f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80084f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	f200 80a0 	bhi.w	8008640 <tetris_update_current_tetromino+0x160>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <tetris_update_current_tetromino+0x28>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	08008519 	.word	0x08008519
 800850c:	08008563 	.word	0x08008563
 8008510:	080085ad 	.word	0x080085ad
 8008514:	080085f7 	.word	0x080085f7
        case 0:
            // no rotation
            for (row = 0; row < 4; row++) {
 8008518:	2300      	movs	r3, #0
 800851a:	613b      	str	r3, [r7, #16]
 800851c:	e01d      	b.n	800855a <tetris_update_current_tetromino+0x7a>
                for (col = 0; col < 4; col++) {
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e014      	b.n	800854e <tetris_update_current_tetromino+0x6e>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800852a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	441a      	add	r2, r3
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	0099      	lsls	r1, r3, #2
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	440b      	add	r3, r1
 800853c:	7811      	ldrb	r1, [r2, #0]
 800853e:	4a43      	ldr	r2, [pc, #268]	; (800864c <tetris_update_current_tetromino+0x16c>)
 8008540:	54d1      	strb	r1, [r2, r3]
                    index++;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	3301      	adds	r3, #1
 8008546:	617b      	str	r3, [r7, #20]
                for (col = 0; col < 4; col++) {
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3301      	adds	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b03      	cmp	r3, #3
 8008552:	dde7      	ble.n	8008524 <tetris_update_current_tetromino+0x44>
            for (row = 0; row < 4; row++) {
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	3301      	adds	r3, #1
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2b03      	cmp	r3, #3
 800855e:	ddde      	ble.n	800851e <tetris_update_current_tetromino+0x3e>
                }
            }
        break;
 8008560:	e06e      	b.n	8008640 <tetris_update_current_tetromino+0x160>
        case 1:
            // C 1; CC 3;
            for (col = 3; col >= 0; col--) {
 8008562:	2303      	movs	r3, #3
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	e01d      	b.n	80085a4 <tetris_update_current_tetromino+0xc4>
                for (row = 0; row < 4; row++) {
 8008568:	2300      	movs	r3, #0
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	e014      	b.n	8008598 <tetris_update_current_tetromino+0xb8>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008574:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	441a      	add	r2, r3
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	0099      	lsls	r1, r3, #2
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	440b      	add	r3, r1
 8008586:	7811      	ldrb	r1, [r2, #0]
 8008588:	4a30      	ldr	r2, [pc, #192]	; (800864c <tetris_update_current_tetromino+0x16c>)
 800858a:	54d1      	strb	r1, [r2, r3]
                    index++;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	3301      	adds	r3, #1
 8008590:	617b      	str	r3, [r7, #20]
                for (row = 0; row < 4; row++) {
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3301      	adds	r3, #1
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	2b03      	cmp	r3, #3
 800859c:	dde7      	ble.n	800856e <tetris_update_current_tetromino+0x8e>
            for (col = 3; col >= 0; col--) {
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3b01      	subs	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	dade      	bge.n	8008568 <tetris_update_current_tetromino+0x88>
                }
            }
        break;
 80085aa:	e049      	b.n	8008640 <tetris_update_current_tetromino+0x160>
        case 2:
            // C 2; CC 2;
            for (row = 3; row >= 0; row--) {
 80085ac:	2303      	movs	r3, #3
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	e01d      	b.n	80085ee <tetris_update_current_tetromino+0x10e>
                for (col = 3; col >= 0; col--) {
 80085b2:	2303      	movs	r3, #3
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	e014      	b.n	80085e2 <tetris_update_current_tetromino+0x102>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80085be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	441a      	add	r2, r3
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	0099      	lsls	r1, r3, #2
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	440b      	add	r3, r1
 80085d0:	7811      	ldrb	r1, [r2, #0]
 80085d2:	4a1e      	ldr	r2, [pc, #120]	; (800864c <tetris_update_current_tetromino+0x16c>)
 80085d4:	54d1      	strb	r1, [r2, r3]
                    index++;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	3301      	adds	r3, #1
 80085da:	617b      	str	r3, [r7, #20]
                for (col = 3; col >= 0; col--) {
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3b01      	subs	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dae7      	bge.n	80085b8 <tetris_update_current_tetromino+0xd8>
            for (row = 3; row >= 0; row--) {
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	613b      	str	r3, [r7, #16]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dade      	bge.n	80085b2 <tetris_update_current_tetromino+0xd2>
                }
            }
        break;
 80085f4:	e024      	b.n	8008640 <tetris_update_current_tetromino+0x160>
        case 3:
            // C 3; CC 1;
            for (col = 0; col < 4; col++) {
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	e01d      	b.n	8008638 <tetris_update_current_tetromino+0x158>
                for (row = 3; row >= 0; row--) {
 80085fc:	2303      	movs	r3, #3
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	e014      	b.n	800862c <tetris_update_current_tetromino+0x14c>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008608:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	441a      	add	r2, r3
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	0099      	lsls	r1, r3, #2
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	440b      	add	r3, r1
 800861a:	7811      	ldrb	r1, [r2, #0]
 800861c:	4a0b      	ldr	r2, [pc, #44]	; (800864c <tetris_update_current_tetromino+0x16c>)
 800861e:	54d1      	strb	r1, [r2, r3]
                    index++;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	3301      	adds	r3, #1
 8008624:	617b      	str	r3, [r7, #20]
                for (row = 3; row >= 0; row--) {
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	3b01      	subs	r3, #1
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dae7      	bge.n	8008602 <tetris_update_current_tetromino+0x122>
            for (col = 0; col < 4; col++) {
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b03      	cmp	r3, #3
 800863c:	ddde      	ble.n	80085fc <tetris_update_current_tetromino+0x11c>
                }
            }
        break;
 800863e:	bf00      	nop
    }
}
 8008640:	bf00      	nop
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	20000624 	.word	0x20000624

08008650 <tetris_rotate_C_tetromino>:
/**
 * @brief Rotate the tetromino piece clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_C_tetromino(Window * window) {
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 1) % 4;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800865e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008666:	3301      	adds	r3, #1
 8008668:	425a      	negs	r2, r3
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	f002 0203 	and.w	r2, r2, #3
 8008672:	bf58      	it	pl
 8008674:	4253      	negpl	r3, r2
 8008676:	b21a      	sxth	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800867e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008682:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ff2b 	bl	80084e0 <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800868a:	2200      	movs	r2, #0
 800868c:	2100      	movs	r1, #0
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f8ca 	bl	8008828 <tetris_validate_position>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d018      	beq.n	80086cc <tetris_rotate_C_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 3) % 4;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80086a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086a8:	3303      	adds	r3, #3
 80086aa:	425a      	negs	r2, r3
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	f002 0203 	and.w	r2, r2, #3
 80086b4:	bf58      	it	pl
 80086b6:	4253      	negpl	r3, r2
 80086b8:	b21a      	sxth	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80086c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086c4:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff ff0a 	bl	80084e0 <tetris_update_current_tetromino>
    }
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <tetris_rotate_CC_tetromino>:
/**
 * @brief Rotate the tetromino piece conter clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_CC_tetromino(Window * window) {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 3) % 4;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80086e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ea:	3303      	adds	r3, #3
 80086ec:	425a      	negs	r2, r3
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	f002 0203 	and.w	r2, r2, #3
 80086f6:	bf58      	it	pl
 80086f8:	4253      	negpl	r3, r2
 80086fa:	b21a      	sxth	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008702:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008706:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fee9 	bl	80084e0 <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800870e:	2200      	movs	r2, #0
 8008710:	2100      	movs	r1, #0
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f888 	bl	8008828 <tetris_validate_position>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d018      	beq.n	8008750 <tetris_rotate_CC_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 1) % 4;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008724:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800872c:	3301      	adds	r3, #1
 800872e:	425a      	negs	r2, r3
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	f002 0203 	and.w	r2, r2, #3
 8008738:	bf58      	it	pl
 800873a:	4253      	negpl	r3, r2
 800873c:	b21a      	sxth	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008744:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008748:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff fec8 	bl	80084e0 <tetris_update_current_tetromino>
    }
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <tetris_move_left>:
 * @brief Move the piece to the left. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_left(Window * window) {
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, -1, 0)) {
 8008760:	2200      	movs	r2, #0
 8008762:	f04f 31ff 	mov.w	r1, #4294967295
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f85e 	bl	8008828 <tetris_validate_position>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10e      	bne.n	8008790 <tetris_move_left+0x38>
        window->game.x--;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008778:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	1e5a      	subs	r2, r3, #1
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008786:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800878a:	601a      	str	r2, [r3, #0]
        return 1;
 800878c:	2301      	movs	r3, #1
 800878e:	e000      	b.n	8008792 <tetris_move_left+0x3a>
    }
    return 0;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <tetris_move_right>:
 * @brief Move the piece to the right. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_right(Window * window) {
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 1, 0)) {
 80087a2:	2200      	movs	r2, #0
 80087a4:	2101      	movs	r1, #1
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f83e 	bl	8008828 <tetris_validate_position>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10e      	bne.n	80087d0 <tetris_move_right+0x36>
        window->game.x++;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80087b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80087c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087ca:	601a      	str	r2, [r3, #0]
        return 1;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <tetris_move_right+0x38>
    }
    return 0;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <tetris_move_down>:
 * @brief Move the piece down. Tetromino piece position is finalized if collision occurs. Get next tetromino & update board accordingly.
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_down(Window * window) {
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 0, 1)) {
 80087e2:	2201      	movs	r2, #1
 80087e4:	2100      	movs	r1, #0
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f81e 	bl	8008828 <tetris_validate_position>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10e      	bne.n	8008810 <tetris_move_down+0x36>
        window->game.y++;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80087f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	1c5a      	adds	r2, r3, #1
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008806:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800880a:	601a      	str	r2, [r3, #0]
        return 1;
 800880c:	2301      	movs	r3, #1
 800880e:	e006      	b.n	800881e <tetris_move_down+0x44>
    }

    tetris_finished_tetromino(window);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f99f 	bl	8008b54 <tetris_finished_tetromino>
    tetris_detect_rowCompletion(window);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa36 	bl	8008c88 <tetris_detect_rowCompletion>
    return 1;
 800881c:	2301      	movs	r3, #1
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <tetris_validate_position>:
 * @param window tetris game window w/ tetromino data we want to validate
 * @param x_offset added to tetromino current x. X position to validate
 * @param y_offset added to tetromino current y. Y position to validate
 * @return int error code. 0 = no collision. 1 = collision w/ left wall. 2 = collision w/ right wall. 3 = collision with bottom floor. 4 = collision w/another block
 */
int tetris_validate_position(Window * window, int x_offset, int y_offset) {
 8008828:	b480      	push	{r7}
 800882a:	b089      	sub	sp, #36	; 0x24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
    int index = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	61fb      	str	r3, [r7, #28]
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800883e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	4413      	add	r3, r2
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	e056      	b.n	80088fa <tetris_validate_position+0xd2>
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008852:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	4413      	add	r3, r2
 800885c:	617b      	str	r3, [r7, #20]
 800885e:	e03d      	b.n	80088dc <tetris_validate_position+0xb4>
            // check for collision w/ bottom floor
            if (row >= BOARD_HEIGHT && tetromino_current[index] != 10) {
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	2b17      	cmp	r3, #23
 8008864:	dd07      	ble.n	8008876 <tetris_validate_position+0x4e>
 8008866:	4a2e      	ldr	r2, [pc, #184]	; (8008920 <tetris_validate_position+0xf8>)
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b0a      	cmp	r3, #10
 8008870:	d001      	beq.n	8008876 <tetris_validate_position+0x4e>
                return 3;
 8008872:	2303      	movs	r3, #3
 8008874:	e04e      	b.n	8008914 <tetris_validate_position+0xec>
            }
            // collision w/ left wall
            if (col < 0 && tetromino_current[index] != 10) {
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	da07      	bge.n	800888c <tetris_validate_position+0x64>
 800887c:	4a28      	ldr	r2, [pc, #160]	; (8008920 <tetris_validate_position+0xf8>)
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	4413      	add	r3, r2
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b0a      	cmp	r3, #10
 8008886:	d001      	beq.n	800888c <tetris_validate_position+0x64>
                return 1;
 8008888:	2301      	movs	r3, #1
 800888a:	e043      	b.n	8008914 <tetris_validate_position+0xec>
            }
            if (col >= BOARD_WIDTH && tetromino_current[index] != 10) {
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2b09      	cmp	r3, #9
 8008890:	dd07      	ble.n	80088a2 <tetris_validate_position+0x7a>
 8008892:	4a23      	ldr	r2, [pc, #140]	; (8008920 <tetris_validate_position+0xf8>)
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	4413      	add	r3, r2
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b0a      	cmp	r3, #10
 800889c:	d001      	beq.n	80088a2 <tetris_validate_position+0x7a>
                return 2;
 800889e:	2302      	movs	r3, #2
 80088a0:	e038      	b.n	8008914 <tetris_validate_position+0xec>
            }
            if (tetromino_current[index] != 10 && window->game.board[BOARD_WIDTH * row + col] != EMPTY_BOARD_CHAR) {
 80088a2:	4a1f      	ldr	r2, [pc, #124]	; (8008920 <tetris_validate_position+0xf8>)
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	4413      	add	r3, r2
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b0a      	cmp	r3, #10
 80088ac:	d010      	beq.n	80088d0 <tetris_validate_position+0xa8>
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	4613      	mov	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	461a      	mov	r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	4413      	add	r3, r2
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b05      	cmp	r3, #5
 80088ca:	d001      	beq.n	80088d0 <tetris_validate_position+0xa8>
                return 4;
 80088cc:	2304      	movs	r3, #4
 80088ce:	e021      	b.n	8008914 <tetris_validate_position+0xec>
            }
            index++;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	3301      	adds	r3, #1
 80088d4:	61fb      	str	r3, [r7, #28]
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	3301      	adds	r3, #1
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 80088e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	1d1a      	adds	r2, r3, #4
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	4413      	add	r3, r2
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	dbb5      	blt.n	8008860 <tetris_validate_position+0x38>
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	3301      	adds	r3, #1
 80088f8:	61bb      	str	r3, [r7, #24]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008900:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	1d1a      	adds	r2, r3, #4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	429a      	cmp	r2, r3
 8008910:	db9c      	blt.n	800884c <tetris_validate_position+0x24>
        }
    }
    return 0;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3724      	adds	r7, #36	; 0x24
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	20000624 	.word	0x20000624
 8008924:	00000000 	.word	0x00000000

08008928 <tetris_draw_endScreen>:
 * @brief Draws the final screen of Tetris.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_draw_endScreen(Window * window) {
 8008928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800892c:	b08a      	sub	sp, #40	; 0x28
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
	// Draw a smiley face
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 8008932:	233c      	movs	r3, #60	; 0x3c
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
 8008936:	e0f0      	b.n	8008b1a <tetris_draw_endScreen+0x1f2>
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 8008938:	2302      	movs	r3, #2
 800893a:	623b      	str	r3, [r7, #32]
 800893c:	e0e6      	b.n	8008b0c <tetris_draw_endScreen+0x1e4>
			float y = IMAGE_HEIGHT-(i-IMAGE_Y) - (((float)IMAGE_HEIGHT)/2);
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	f5c3 73cd 	rsb	r3, r3, #410	; 0x19a
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800894c:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8008b38 <tetris_draw_endScreen+0x210>
 8008950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008954:	edc7 7a07 	vstr	s15, [r7, #28]
			float x = (((float)IMAGE_HEIGHT)/IMAGE_WIDTH)*(j-IMAGE_X) - (((float)IMAGE_HEIGHT)/2);
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	3b02      	subs	r3, #2
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008964:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8008b3c <tetris_draw_endScreen+0x214>
 8008968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800896c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8008b38 <tetris_draw_endScreen+0x210>
 8008970:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008974:	edc7 7a06 	vstr	s15, [r7, #24]
			float rad_head = x*x + y*y;
 8008978:	edd7 7a06 	vldr	s15, [r7, #24]
 800897c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008980:	edd7 7a07 	vldr	s15, [r7, #28]
 8008984:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800898c:	edc7 7a05 	vstr	s15, [r7, #20]
			float rad_eyes = (abs(x)-70)*(abs(x)-70) + (y-30)*(y-30);
 8008990:	edd7 7a06 	vldr	s15, [r7, #24]
 8008994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008998:	ee17 3a90 	vmov	r3, s15
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfb8      	it	lt
 80089a0:	425b      	neglt	r3, r3
 80089a2:	3b46      	subs	r3, #70	; 0x46
 80089a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80089a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089ac:	ee17 2a90 	vmov	r2, s15
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	bfb8      	it	lt
 80089b4:	4252      	neglt	r2, r2
 80089b6:	3a46      	subs	r2, #70	; 0x46
 80089b8:	fb02 f303 	mul.w	r3, r2, r3
 80089bc:	ee07 3a90 	vmov	s15, r3
 80089c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80089c8:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 80089cc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80089d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80089d4:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 80089d8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80089dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089e4:	edc7 7a04 	vstr	s15, [r7, #16]
			float quad_rad = abs((y+100)+0.01*x*x);
 80089e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80089ec:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8008b40 <tetris_draw_endScreen+0x218>
 80089f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089f4:	ee17 0a90 	vmov	r0, s15
 80089f8:	f7f7 fee0 	bl	80007bc <__aeabi_f2d>
 80089fc:	4604      	mov	r4, r0
 80089fe:	460d      	mov	r5, r1
 8008a00:	69b8      	ldr	r0, [r7, #24]
 8008a02:	f7f7 fedb 	bl	80007bc <__aeabi_f2d>
 8008a06:	a34a      	add	r3, pc, #296	; (adr r3, 8008b30 <tetris_draw_endScreen+0x208>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f7f7 fc48 	bl	80002a0 <__aeabi_dmul>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4690      	mov	r8, r2
 8008a16:	4699      	mov	r9, r3
 8008a18:	69b8      	ldr	r0, [r7, #24]
 8008a1a:	f7f7 fecf 	bl	80007bc <__aeabi_f2d>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4640      	mov	r0, r8
 8008a24:	4649      	mov	r1, r9
 8008a26:	f7f7 fc3b 	bl	80002a0 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 fd65 	bl	8000500 <__adddf3>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f7f7 ff15 	bl	800086c <__aeabi_d2iz>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bfb8      	it	lt
 8008a48:	425b      	neglt	r3, r3
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a52:	edc7 7a03 	vstr	s15, [r7, #12]
			if(rad_head > 150*150 && rad_head < 170*170) {
 8008a56:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a5a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8008b44 <tetris_draw_endScreen+0x21c>
 8008a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a66:	dd13      	ble.n	8008a90 <tetris_draw_endScreen+0x168>
 8008a68:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a6c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008b48 <tetris_draw_endScreen+0x220>
 8008a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a78:	d50a      	bpl.n	8008a90 <tetris_draw_endScreen+0x168>
				window->frame[i][j] = (uint8_t) 255;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689a      	ldr	r2, [r3, #8]
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	4413      	add	r3, r2
 8008a8a:	22ff      	movs	r2, #255	; 0xff
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	e03a      	b.n	8008b06 <tetris_draw_endScreen+0x1de>
			} else if (rad_eyes < 20*20) {
 8008a90:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a94:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8008b4c <tetris_draw_endScreen+0x224>
 8008a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa0:	d50a      	bpl.n	8008ab8 <tetris_draw_endScreen+0x190>
				window->frame[i][j] = (uint8_t) 255;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	22ff      	movs	r2, #255	; 0xff
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	e026      	b.n	8008b06 <tetris_draw_endScreen+0x1de>
			} else if (quad_rad < 10 && y < -55) {
 8008ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008abc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac8:	d513      	bpl.n	8008af2 <tetris_draw_endScreen+0x1ca>
 8008aca:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ace:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008b50 <tetris_draw_endScreen+0x228>
 8008ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ada:	d50a      	bpl.n	8008af2 <tetris_draw_endScreen+0x1ca>
				window->frame[i][j] = (uint8_t) 255;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	4413      	add	r3, r2
 8008aec:	22ff      	movs	r2, #255	; 0xff
 8008aee:	701a      	strb	r2, [r3, #0]
 8008af0:	e009      	b.n	8008b06 <tetris_draw_endScreen+0x1de>
			} else {
				window->frame[i][j] = (uint8_t) 0;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	4413      	add	r3, r2
 8008b02:	2200      	movs	r2, #0
 8008b04:	701a      	strb	r2, [r3, #0]
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	623b      	str	r3, [r7, #32]
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	2b51      	cmp	r3, #81	; 0x51
 8008b10:	f77f af15 	ble.w	800893e <tetris_draw_endScreen+0x16>
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	3301      	adds	r3, #1
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8008b20:	f6ff af0a 	blt.w	8008938 <tetris_draw_endScreen+0x10>
			}
		}
	}
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	3728      	adds	r7, #40	; 0x28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b30:	47ae147b 	.word	0x47ae147b
 8008b34:	3f847ae1 	.word	0x3f847ae1
 8008b38:	432f0000 	.word	0x432f0000
 8008b3c:	408c0000 	.word	0x408c0000
 8008b40:	42c80000 	.word	0x42c80000
 8008b44:	46afc800 	.word	0x46afc800
 8008b48:	46e1c800 	.word	0x46e1c800
 8008b4c:	43c80000 	.word	0x43c80000
 8008b50:	c25c0000 	.word	0xc25c0000

08008b54 <tetris_finished_tetromino>:
 * @brief Finalizes the tetromino position and generates a new tetromino.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_finished_tetromino(Window * window) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
    int index = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	617b      	str	r3, [r7, #20]
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008b66:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	613b      	str	r3, [r7, #16]
 8008b6e:	e04d      	b.n	8008c0c <tetris_finished_tetromino+0xb8>
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008b76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	e038      	b.n	8008bf2 <tetris_finished_tetromino+0x9e>
            if (row >= 0 && row < BOARD_HEIGHT && col >= 0 && col < BOARD_WIDTH && tetromino_current[index] != 10) {
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	db2f      	blt.n	8008be6 <tetris_finished_tetromino+0x92>
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b17      	cmp	r3, #23
 8008b8a:	dc2c      	bgt.n	8008be6 <tetris_finished_tetromino+0x92>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	db29      	blt.n	8008be6 <tetris_finished_tetromino+0x92>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b09      	cmp	r3, #9
 8008b96:	dc26      	bgt.n	8008be6 <tetris_finished_tetromino+0x92>
 8008b98:	4a3a      	ldr	r2, [pc, #232]	; (8008c84 <tetris_finished_tetromino+0x130>)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b0a      	cmp	r3, #10
 8008ba2:	d020      	beq.n	8008be6 <tetris_finished_tetromino+0x92>
                window->game.board[BOARD_WIDTH * row + col] = tetromino_current[index];
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	461a      	mov	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	4933      	ldr	r1, [pc, #204]	; (8008c84 <tetris_finished_tetromino+0x130>)
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	440a      	add	r2, r1
 8008bba:	7811      	ldrb	r1, [r2, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008bc4:	460a      	mov	r2, r1
 8008bc6:	701a      	strb	r2, [r3, #0]

                // check to see if game over!
                if (row < 4) {
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	dc0b      	bgt.n	8008be6 <tetris_finished_tetromino+0x92>
                    tetris_initialize_game(window);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff fc34 	bl	800843c <tetris_initialize_game>
                    tetris_draw_endScreen(window);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff fea7 	bl	8008928 <tetris_draw_endScreen>
                    window->game.state = Ended;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008be0:	33f0      	adds	r3, #240	; 0xf0
 8008be2:	2203      	movs	r2, #3
 8008be4:	701a      	strb	r2, [r3, #0]
                }
            }
            index++;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	3301      	adds	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008bf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3303      	adds	r3, #3
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	ddbc      	ble.n	8008b80 <tetris_finished_tetromino+0x2c>
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008c12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3303      	adds	r3, #3
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	dda7      	ble.n	8008b70 <tetris_finished_tetromino+0x1c>
        }
    }

    // reset tetromino position & spawn next tetromino
    window->game.y = 0;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008c26:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008c34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c38:	2203      	movs	r2, #3
 8008c3a:	601a      	str	r2, [r3, #0]
    window->game.rotation = 0;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008c42:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008c46:	2200      	movs	r2, #0
 8008c48:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = window->game.nextTetromino;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008c50:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008c5c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008c60:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino(window);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff fc32 	bl	80084cc <tetris_get_next_tetromino>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8008c70:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8008c74:	601a      	str	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7ff fc32 	bl	80084e0 <tetris_update_current_tetromino>
}
 8008c7c:	bf00      	nop
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	20000624 	.word	0x20000624

08008c88 <tetris_detect_rowCompletion>:
/**
 * @brief Detect full rows, and clears them out of the board
 *
 * @param window window w/ game
 */
void tetris_detect_rowCompletion(Window * window) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b0aa      	sub	sp, #168	; 0xa8
 8008c8c:	af04      	add	r7, sp, #16
 8008c8e:	6078      	str	r0, [r7, #4]
    // go over board & detect all lines that need to be cleared.
    int rowCompleted[BOARD_HEIGHT];

    for (int row = 0; row < BOARD_HEIGHT; row++) {
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c96:	e034      	b.n	8008d02 <tetris_detect_rowCompletion+0x7a>
        rowCompleted[row] = 1;
 8008c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008ca2:	4413      	add	r3, r2
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f843 2c8c 	str.w	r2, [r3, #-140]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 8008caa:	2300      	movs	r3, #0
 8008cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cb0:	e01e      	b.n	8008cf0 <tetris_detect_rowCompletion+0x68>
            if (window->game.board[BOARD_WIDTH * row + col] == EMPTY_BOARD_CHAR) {
 8008cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cc4:	4413      	add	r3, r2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b05      	cmp	r3, #5
 8008cd2:	d108      	bne.n	8008ce6 <tetris_detect_rowCompletion+0x5e>
                rowCompleted[row] = 0;
 8008cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008cde:	4413      	add	r3, r2
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f843 2c8c 	str.w	r2, [r3, #-140]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 8008ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cea:	3301      	adds	r3, #1
 8008cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cf4:	2b09      	cmp	r3, #9
 8008cf6:	dddc      	ble.n	8008cb2 <tetris_detect_rowCompletion+0x2a>
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 8008cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d06:	2b17      	cmp	r3, #23
 8008d08:	ddc6      	ble.n	8008c98 <tetris_detect_rowCompletion+0x10>
            }
        }
    }

    for (int i = 0; i < 4; i++) {
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008d10:	e05b      	b.n	8008dca <tetris_detect_rowCompletion+0x142>
        int anyRowFlag = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        // go over board from bottom to top & turn lines that need to be cleared on/off
        for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 8008d18:	2317      	movs	r3, #23
 8008d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d1e:	e037      	b.n	8008d90 <tetris_detect_rowCompletion+0x108>
            if (rowCompleted[row]) {
 8008d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d028      	beq.n	8008d86 <tetris_detect_rowCompletion+0xfe>
                for (int col = 0; col < BOARD_WIDTH; col++) {
 8008d34:	2300      	movs	r3, #0
 8008d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d3a:	e01d      	b.n	8008d78 <tetris_detect_rowCompletion+0xf0>
                    window->game.board[BOARD_WIDTH * row + col] = (i%2) ? 150 : EMPTY_BOARD_CHAR;
 8008d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <tetris_detect_rowCompletion+0xc4>
 8008d48:	2196      	movs	r1, #150	; 0x96
 8008d4a:	e000      	b.n	8008d4e <tetris_detect_rowCompletion+0xc6>
 8008d4c:	2105      	movs	r1, #5
 8008d4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d60:	4413      	add	r3, r2
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	4413      	add	r3, r2
 8008d66:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008d6a:	460a      	mov	r2, r1
 8008d6c:	701a      	strb	r2, [r3, #0]
                for (int col = 0; col < BOARD_WIDTH; col++) {
 8008d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d72:	3301      	adds	r3, #1
 8008d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	dddd      	ble.n	8008d3c <tetris_detect_rowCompletion+0xb4>
                }
                anyRowFlag = 1;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 8008d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	dac3      	bge.n	8008d20 <tetris_detect_rowCompletion+0x98>
            }
        }

        if (!anyRowFlag) {
 8008d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d019      	beq.n	8008dd4 <tetris_detect_rowCompletion+0x14c>
            break;
        }

        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, 1, 1, window->game.board);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008da6:	9303      	str	r3, [sp, #12]
 8008da8:	2301      	movs	r3, #1
 8008daa:	9302      	str	r3, [sp, #8]
 8008dac:	2301      	movs	r3, #1
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	2318      	movs	r3, #24
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	230a      	movs	r3, #10
 8008db6:	2205      	movs	r2, #5
 8008db8:	2105      	movs	r1, #5
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f86e 	bl	8008e9c <drawRect>
    for (int i = 0; i < 4; i++) {
 8008dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	dd9f      	ble.n	8008d12 <tetris_detect_rowCompletion+0x8a>
 8008dd2:	e000      	b.n	8008dd6 <tetris_detect_rowCompletion+0x14e>
            break;
 8008dd4:	bf00      	nop
    }

    // go over board from bottom to top & delete the lines that need to be cleared
    int row_currently_drawn = BOARD_HEIGHT - 1;
 8008dd6:	2317      	movs	r3, #23
 8008dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 8008dda:	2317      	movs	r3, #23
 8008ddc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008dde:	e032      	b.n	8008e46 <tetris_detect_rowCompletion+0x1be>
        if (!rowCompleted[row]) {
 8008de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008de8:	4413      	add	r3, r2
 8008dea:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d126      	bne.n	8008e40 <tetris_detect_rowCompletion+0x1b8>
            for (int col = 0; col < BOARD_WIDTH; col++) {
 8008df2:	2300      	movs	r3, #0
 8008df4:	677b      	str	r3, [r7, #116]	; 0x74
 8008df6:	e01d      	b.n	8008e34 <tetris_detect_rowCompletion+0x1ac>
                window->game.board[BOARD_WIDTH * row_currently_drawn + col] = window->game.board[BOARD_WIDTH * row + col];
 8008df8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	461a      	mov	r2, r3
 8008e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e06:	18d1      	adds	r1, r2, r3
 8008e08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	461a      	mov	r2, r3
 8008e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e16:	4413      	add	r3, r2
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8008e20:	7811      	ldrb	r1, [r2, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	701a      	strb	r2, [r3, #0]
            for (int col = 0; col < BOARD_WIDTH; col++) {
 8008e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e30:	3301      	adds	r3, #1
 8008e32:	677b      	str	r3, [r7, #116]	; 0x74
 8008e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e36:	2b09      	cmp	r3, #9
 8008e38:	ddde      	ble.n	8008df8 <tetris_detect_rowCompletion+0x170>
            }
            row_currently_drawn--;
 8008e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 8008e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e42:	3b01      	subs	r3, #1
 8008e44:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dac9      	bge.n	8008de0 <tetris_detect_rowCompletion+0x158>
        }
    }

    for (int row = row_currently_drawn; row >= 0; row--) {
 8008e4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8008e50:	e01c      	b.n	8008e8c <tetris_detect_rowCompletion+0x204>
        for (int col = 0; col < BOARD_WIDTH; col++) {
 8008e52:	2300      	movs	r3, #0
 8008e54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e56:	e010      	b.n	8008e7a <tetris_detect_rowCompletion+0x1f2>
            window->game.board[BOARD_WIDTH * row_currently_drawn + col] = EMPTY_BOARD_CHAR;
 8008e58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	461a      	mov	r2, r3
 8008e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e66:	4413      	add	r3, r2
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8008e70:	2205      	movs	r2, #5
 8008e72:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 8008e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e76:	3301      	adds	r3, #1
 8008e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7c:	2b09      	cmp	r3, #9
 8008e7e:	ddeb      	ble.n	8008e58 <tetris_detect_rowCompletion+0x1d0>
        }
        row_currently_drawn--;
 8008e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e82:	3b01      	subs	r3, #1
 8008e84:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int row = row_currently_drawn; row >= 0; row--) {
 8008e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8008e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	dadf      	bge.n	8008e52 <tetris_detect_rowCompletion+0x1ca>
    }
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	3798      	adds	r7, #152	; 0x98
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <drawRect>:
 * @param height height of 2D data rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param data data to write to screen
 */
void drawRect(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t* data) {
 8008e9c:	b480      	push	{r7}
 8008e9e:	b08b      	sub	sp, #44	; 0x2c
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	617b      	str	r3, [r7, #20]

    int indexRow = 0, indexCol;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eb8:	fb02 f303 	mul.w	r3, r2, r3
 8008ebc:	333c      	adds	r3, #60	; 0x3c
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	e06b      	b.n	8008f9a <drawRect+0xfe>
        indexCol = 0;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	3302      	adds	r3, #2
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	e041      	b.n	8008f58 <drawRect+0xbc>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X && data[indexRow * width + indexCol] != 10) {
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b3b      	cmp	r3, #59	; 0x3b
 8008ed8:	dd27      	ble.n	8008f2a <drawRect+0x8e>
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8008ee0:	da23      	bge.n	8008f2a <drawRect+0x8e>
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	dd20      	ble.n	8008f2a <drawRect+0x8e>
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	2b51      	cmp	r3, #81	; 0x51
 8008eec:	dc1d      	bgt.n	8008f2a <drawRect+0x8e>
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	fb02 f203 	mul.w	r2, r2, r3
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	4413      	add	r3, r2
 8008efa:	461a      	mov	r2, r3
 8008efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efe:	4413      	add	r3, r2
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	2b0a      	cmp	r3, #10
 8008f04:	d011      	beq.n	8008f2a <drawRect+0x8e>
                buff[row][col] = data[indexRow * width + indexCol];
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	fb02 f203 	mul.w	r2, r2, r3
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	4413      	add	r3, r2
 8008f12:	461a      	mov	r2, r3
 8008f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f16:	441a      	add	r2, r3
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	6979      	ldr	r1, [r7, #20]
 8008f1e:	440b      	add	r3, r1
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	440b      	add	r3, r1
 8008f26:	7812      	ldrb	r2, [r2, #0]
 8008f28:	701a      	strb	r2, [r3, #0]
            }
            if ((col - (x_start * scaling_h + IMAGE_X) + 1) % scaling_h == 0) {
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f2e:	fb02 f303 	mul.w	r3, r2, r3
 8008f32:	3302      	adds	r3, #2
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	3301      	adds	r3, #1
 8008f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f3c:	fb93 f2f2 	sdiv	r2, r3, r2
 8008f40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f42:	fb01 f202 	mul.w	r2, r1, r2
 8008f46:	1a9b      	subs	r3, r3, r2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <drawRect+0xb6>
                indexCol++;
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	3301      	adds	r3, #1
 8008f56:	61bb      	str	r3, [r7, #24]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f60:	fb02 f303 	mul.w	r3, r2, r3
 8008f64:	3301      	adds	r3, #1
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	ddb3      	ble.n	8008ed4 <drawRect+0x38>
            }
        }
        if ((row - (y_start * scaling_v + IMAGE_Y) + 1) % scaling_v == 0) {
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
 8008f74:	333c      	adds	r3, #60	; 0x3c
 8008f76:	69fa      	ldr	r2, [r7, #28]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f7e:	fb93 f2f2 	sdiv	r2, r3, r2
 8008f82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f84:	fb01 f202 	mul.w	r2, r1, r2
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d102      	bne.n	8008f94 <drawRect+0xf8>
            indexRow++;
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	3301      	adds	r3, #1
 8008f92:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	3301      	adds	r3, #1
 8008f98:	61fb      	str	r3, [r7, #28]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	4413      	add	r3, r2
 8008fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	333b      	adds	r3, #59	; 0x3b
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	dd89      	ble.n	8008ec2 <drawRect+0x26>
        }
    }
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	372c      	adds	r7, #44	; 0x2c
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <drawRect_color>:
 * @param height height of rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param color color to draw in rectangle
 */
void drawRect_color(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t color) {
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	617b      	str	r3, [r7, #20]

    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	333c      	adds	r3, #60	; 0x3c
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	e02d      	b.n	800903a <drawRect_color+0x7e>
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
 8008fe6:	3302      	adds	r3, #2
 8008fe8:	61bb      	str	r3, [r7, #24]
 8008fea:	e019      	b.n	8009020 <drawRect_color+0x64>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X) {
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	2b3b      	cmp	r3, #59	; 0x3b
 8008ff0:	dd13      	ble.n	800901a <drawRect_color+0x5e>
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8008ff8:	da0f      	bge.n	800901a <drawRect_color+0x5e>
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	dd0c      	ble.n	800901a <drawRect_color+0x5e>
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	2b51      	cmp	r3, #81	; 0x51
 8009004:	dc09      	bgt.n	800901a <drawRect_color+0x5e>
            	buff[row][col] = color;
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	4413      	add	r3, r2
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	4413      	add	r3, r2
 8009014:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8009018:	701a      	strb	r2, [r3, #0]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	3301      	adds	r3, #1
 800901e:	61bb      	str	r3, [r7, #24]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	4413      	add	r3, r2
 8009026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009028:	fb02 f303 	mul.w	r3, r2, r3
 800902c:	3301      	adds	r3, #1
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	429a      	cmp	r2, r3
 8009032:	dddb      	ble.n	8008fec <drawRect_color+0x30>
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	3301      	adds	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	4413      	add	r3, r2
 8009040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009042:	fb02 f303 	mul.w	r3, r2, r3
 8009046:	333b      	adds	r3, #59	; 0x3b
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	429a      	cmp	r2, r3
 800904c:	ddc7      	ble.n	8008fde <drawRect_color+0x22>
            }
        }
    }
}
 800904e:	bf00      	nop
 8009050:	bf00      	nop
 8009052:	3724      	adds	r7, #36	; 0x24
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800905c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009094 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009060:	f7ff f9da 	bl	8008418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009064:	480c      	ldr	r0, [pc, #48]	; (8009098 <LoopForever+0x6>)
  ldr r1, =_edata
 8009066:	490d      	ldr	r1, [pc, #52]	; (800909c <LoopForever+0xa>)
 ldr r2, =_sidata
 8009068:	4a0d      	ldr	r2, [pc, #52]	; (80090a0 <LoopForever+0xe>)
  movs r3, #0
 800906a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800906c:	e002      	b.n	8009074 <LoopCopyDataInit>

0800906e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800906e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009072:	3304      	adds	r3, #4

08009074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009078:	d3f9      	bcc.n	800906e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800907a:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800907c:	4c0a      	ldr	r4, [pc, #40]	; (80090a8 <LoopForever+0x16>)
  movs r3, #0
 800907e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009080:	e001      	b.n	8009086 <LoopFillZerobss>

08009082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009084:	3204      	adds	r2, #4

08009086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009088:	d3fb      	bcc.n	8009082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800908a:	f000 f817 	bl	80090bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800908e:	f7fe fa2d 	bl	80074ec <main>

08009092 <LoopForever>:

LoopForever:
    b LoopForever
 8009092:	e7fe      	b.n	8009092 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009094:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8009098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800909c:	20000698 	.word	0x20000698
 ldr r2, =_sidata
 80090a0:	08009b14 	.word	0x08009b14
  ldr r2, =_sbss
 80090a4:	20000698 	.word	0x20000698
  ldr r4, =_ebss
 80090a8:	200009c8 	.word	0x200009c8

080090ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80090ac:	e7fe      	b.n	80090ac <ADC1_IRQHandler>
	...

080090b0 <__errno>:
 80090b0:	4b01      	ldr	r3, [pc, #4]	; (80090b8 <__errno+0x8>)
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20000634 	.word	0x20000634

080090bc <__libc_init_array>:
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	4d0d      	ldr	r5, [pc, #52]	; (80090f4 <__libc_init_array+0x38>)
 80090c0:	4c0d      	ldr	r4, [pc, #52]	; (80090f8 <__libc_init_array+0x3c>)
 80090c2:	1b64      	subs	r4, r4, r5
 80090c4:	10a4      	asrs	r4, r4, #2
 80090c6:	2600      	movs	r6, #0
 80090c8:	42a6      	cmp	r6, r4
 80090ca:	d109      	bne.n	80090e0 <__libc_init_array+0x24>
 80090cc:	4d0b      	ldr	r5, [pc, #44]	; (80090fc <__libc_init_array+0x40>)
 80090ce:	4c0c      	ldr	r4, [pc, #48]	; (8009100 <__libc_init_array+0x44>)
 80090d0:	f000 fc56 	bl	8009980 <_init>
 80090d4:	1b64      	subs	r4, r4, r5
 80090d6:	10a4      	asrs	r4, r4, #2
 80090d8:	2600      	movs	r6, #0
 80090da:	42a6      	cmp	r6, r4
 80090dc:	d105      	bne.n	80090ea <__libc_init_array+0x2e>
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e4:	4798      	blx	r3
 80090e6:	3601      	adds	r6, #1
 80090e8:	e7ee      	b.n	80090c8 <__libc_init_array+0xc>
 80090ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ee:	4798      	blx	r3
 80090f0:	3601      	adds	r6, #1
 80090f2:	e7f2      	b.n	80090da <__libc_init_array+0x1e>
 80090f4:	08009b0c 	.word	0x08009b0c
 80090f8:	08009b0c 	.word	0x08009b0c
 80090fc:	08009b0c 	.word	0x08009b0c
 8009100:	08009b10 	.word	0x08009b10

08009104 <malloc>:
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <malloc+0xc>)
 8009106:	4601      	mov	r1, r0
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f000 b85b 	b.w	80091c4 <_malloc_r>
 800910e:	bf00      	nop
 8009110:	20000634 	.word	0x20000634

08009114 <memset>:
 8009114:	4402      	add	r2, r0
 8009116:	4603      	mov	r3, r0
 8009118:	4293      	cmp	r3, r2
 800911a:	d100      	bne.n	800911e <memset+0xa>
 800911c:	4770      	bx	lr
 800911e:	f803 1b01 	strb.w	r1, [r3], #1
 8009122:	e7f9      	b.n	8009118 <memset+0x4>

08009124 <_free_r>:
 8009124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009126:	2900      	cmp	r1, #0
 8009128:	d048      	beq.n	80091bc <_free_r+0x98>
 800912a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800912e:	9001      	str	r0, [sp, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	f1a1 0404 	sub.w	r4, r1, #4
 8009136:	bfb8      	it	lt
 8009138:	18e4      	addlt	r4, r4, r3
 800913a:	f000 f8cd 	bl	80092d8 <__malloc_lock>
 800913e:	4a20      	ldr	r2, [pc, #128]	; (80091c0 <_free_r+0x9c>)
 8009140:	9801      	ldr	r0, [sp, #4]
 8009142:	6813      	ldr	r3, [r2, #0]
 8009144:	4615      	mov	r5, r2
 8009146:	b933      	cbnz	r3, 8009156 <_free_r+0x32>
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	6014      	str	r4, [r2, #0]
 800914c:	b003      	add	sp, #12
 800914e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009152:	f000 b8c7 	b.w	80092e4 <__malloc_unlock>
 8009156:	42a3      	cmp	r3, r4
 8009158:	d90b      	bls.n	8009172 <_free_r+0x4e>
 800915a:	6821      	ldr	r1, [r4, #0]
 800915c:	1862      	adds	r2, r4, r1
 800915e:	4293      	cmp	r3, r2
 8009160:	bf04      	itt	eq
 8009162:	681a      	ldreq	r2, [r3, #0]
 8009164:	685b      	ldreq	r3, [r3, #4]
 8009166:	6063      	str	r3, [r4, #4]
 8009168:	bf04      	itt	eq
 800916a:	1852      	addeq	r2, r2, r1
 800916c:	6022      	streq	r2, [r4, #0]
 800916e:	602c      	str	r4, [r5, #0]
 8009170:	e7ec      	b.n	800914c <_free_r+0x28>
 8009172:	461a      	mov	r2, r3
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	b10b      	cbz	r3, 800917c <_free_r+0x58>
 8009178:	42a3      	cmp	r3, r4
 800917a:	d9fa      	bls.n	8009172 <_free_r+0x4e>
 800917c:	6811      	ldr	r1, [r2, #0]
 800917e:	1855      	adds	r5, r2, r1
 8009180:	42a5      	cmp	r5, r4
 8009182:	d10b      	bne.n	800919c <_free_r+0x78>
 8009184:	6824      	ldr	r4, [r4, #0]
 8009186:	4421      	add	r1, r4
 8009188:	1854      	adds	r4, r2, r1
 800918a:	42a3      	cmp	r3, r4
 800918c:	6011      	str	r1, [r2, #0]
 800918e:	d1dd      	bne.n	800914c <_free_r+0x28>
 8009190:	681c      	ldr	r4, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	6053      	str	r3, [r2, #4]
 8009196:	4421      	add	r1, r4
 8009198:	6011      	str	r1, [r2, #0]
 800919a:	e7d7      	b.n	800914c <_free_r+0x28>
 800919c:	d902      	bls.n	80091a4 <_free_r+0x80>
 800919e:	230c      	movs	r3, #12
 80091a0:	6003      	str	r3, [r0, #0]
 80091a2:	e7d3      	b.n	800914c <_free_r+0x28>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1961      	adds	r1, r4, r5
 80091a8:	428b      	cmp	r3, r1
 80091aa:	bf04      	itt	eq
 80091ac:	6819      	ldreq	r1, [r3, #0]
 80091ae:	685b      	ldreq	r3, [r3, #4]
 80091b0:	6063      	str	r3, [r4, #4]
 80091b2:	bf04      	itt	eq
 80091b4:	1949      	addeq	r1, r1, r5
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	6054      	str	r4, [r2, #4]
 80091ba:	e7c7      	b.n	800914c <_free_r+0x28>
 80091bc:	b003      	add	sp, #12
 80091be:	bd30      	pop	{r4, r5, pc}
 80091c0:	200006c4 	.word	0x200006c4

080091c4 <_malloc_r>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	1ccd      	adds	r5, r1, #3
 80091c8:	f025 0503 	bic.w	r5, r5, #3
 80091cc:	3508      	adds	r5, #8
 80091ce:	2d0c      	cmp	r5, #12
 80091d0:	bf38      	it	cc
 80091d2:	250c      	movcc	r5, #12
 80091d4:	2d00      	cmp	r5, #0
 80091d6:	4606      	mov	r6, r0
 80091d8:	db01      	blt.n	80091de <_malloc_r+0x1a>
 80091da:	42a9      	cmp	r1, r5
 80091dc:	d903      	bls.n	80091e6 <_malloc_r+0x22>
 80091de:	230c      	movs	r3, #12
 80091e0:	6033      	str	r3, [r6, #0]
 80091e2:	2000      	movs	r0, #0
 80091e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091e6:	f000 f877 	bl	80092d8 <__malloc_lock>
 80091ea:	4921      	ldr	r1, [pc, #132]	; (8009270 <_malloc_r+0xac>)
 80091ec:	680a      	ldr	r2, [r1, #0]
 80091ee:	4614      	mov	r4, r2
 80091f0:	b99c      	cbnz	r4, 800921a <_malloc_r+0x56>
 80091f2:	4f20      	ldr	r7, [pc, #128]	; (8009274 <_malloc_r+0xb0>)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	b923      	cbnz	r3, 8009202 <_malloc_r+0x3e>
 80091f8:	4621      	mov	r1, r4
 80091fa:	4630      	mov	r0, r6
 80091fc:	f000 f83c 	bl	8009278 <_sbrk_r>
 8009200:	6038      	str	r0, [r7, #0]
 8009202:	4629      	mov	r1, r5
 8009204:	4630      	mov	r0, r6
 8009206:	f000 f837 	bl	8009278 <_sbrk_r>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	d123      	bne.n	8009256 <_malloc_r+0x92>
 800920e:	230c      	movs	r3, #12
 8009210:	6033      	str	r3, [r6, #0]
 8009212:	4630      	mov	r0, r6
 8009214:	f000 f866 	bl	80092e4 <__malloc_unlock>
 8009218:	e7e3      	b.n	80091e2 <_malloc_r+0x1e>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	1b5b      	subs	r3, r3, r5
 800921e:	d417      	bmi.n	8009250 <_malloc_r+0x8c>
 8009220:	2b0b      	cmp	r3, #11
 8009222:	d903      	bls.n	800922c <_malloc_r+0x68>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	441c      	add	r4, r3
 8009228:	6025      	str	r5, [r4, #0]
 800922a:	e004      	b.n	8009236 <_malloc_r+0x72>
 800922c:	6863      	ldr	r3, [r4, #4]
 800922e:	42a2      	cmp	r2, r4
 8009230:	bf0c      	ite	eq
 8009232:	600b      	streq	r3, [r1, #0]
 8009234:	6053      	strne	r3, [r2, #4]
 8009236:	4630      	mov	r0, r6
 8009238:	f000 f854 	bl	80092e4 <__malloc_unlock>
 800923c:	f104 000b 	add.w	r0, r4, #11
 8009240:	1d23      	adds	r3, r4, #4
 8009242:	f020 0007 	bic.w	r0, r0, #7
 8009246:	1ac2      	subs	r2, r0, r3
 8009248:	d0cc      	beq.n	80091e4 <_malloc_r+0x20>
 800924a:	1a1b      	subs	r3, r3, r0
 800924c:	50a3      	str	r3, [r4, r2]
 800924e:	e7c9      	b.n	80091e4 <_malloc_r+0x20>
 8009250:	4622      	mov	r2, r4
 8009252:	6864      	ldr	r4, [r4, #4]
 8009254:	e7cc      	b.n	80091f0 <_malloc_r+0x2c>
 8009256:	1cc4      	adds	r4, r0, #3
 8009258:	f024 0403 	bic.w	r4, r4, #3
 800925c:	42a0      	cmp	r0, r4
 800925e:	d0e3      	beq.n	8009228 <_malloc_r+0x64>
 8009260:	1a21      	subs	r1, r4, r0
 8009262:	4630      	mov	r0, r6
 8009264:	f000 f808 	bl	8009278 <_sbrk_r>
 8009268:	3001      	adds	r0, #1
 800926a:	d1dd      	bne.n	8009228 <_malloc_r+0x64>
 800926c:	e7cf      	b.n	800920e <_malloc_r+0x4a>
 800926e:	bf00      	nop
 8009270:	200006c4 	.word	0x200006c4
 8009274:	200006c8 	.word	0x200006c8

08009278 <_sbrk_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d06      	ldr	r5, [pc, #24]	; (8009294 <_sbrk_r+0x1c>)
 800927c:	2300      	movs	r3, #0
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7ff f892 	bl	80083ac <_sbrk>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_sbrk_r+0x1a>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_sbrk_r+0x1a>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	200009b8 	.word	0x200009b8

08009298 <siprintf>:
 8009298:	b40e      	push	{r1, r2, r3}
 800929a:	b500      	push	{lr}
 800929c:	b09c      	sub	sp, #112	; 0x70
 800929e:	ab1d      	add	r3, sp, #116	; 0x74
 80092a0:	9002      	str	r0, [sp, #8]
 80092a2:	9006      	str	r0, [sp, #24]
 80092a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092a8:	4809      	ldr	r0, [pc, #36]	; (80092d0 <siprintf+0x38>)
 80092aa:	9107      	str	r1, [sp, #28]
 80092ac:	9104      	str	r1, [sp, #16]
 80092ae:	4909      	ldr	r1, [pc, #36]	; (80092d4 <siprintf+0x3c>)
 80092b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092b4:	9105      	str	r1, [sp, #20]
 80092b6:	6800      	ldr	r0, [r0, #0]
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	a902      	add	r1, sp, #8
 80092bc:	f000 f874 	bl	80093a8 <_svfiprintf_r>
 80092c0:	9b02      	ldr	r3, [sp, #8]
 80092c2:	2200      	movs	r2, #0
 80092c4:	701a      	strb	r2, [r3, #0]
 80092c6:	b01c      	add	sp, #112	; 0x70
 80092c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092cc:	b003      	add	sp, #12
 80092ce:	4770      	bx	lr
 80092d0:	20000634 	.word	0x20000634
 80092d4:	ffff0208 	.word	0xffff0208

080092d8 <__malloc_lock>:
 80092d8:	4801      	ldr	r0, [pc, #4]	; (80092e0 <__malloc_lock+0x8>)
 80092da:	f000 baf9 	b.w	80098d0 <__retarget_lock_acquire_recursive>
 80092de:	bf00      	nop
 80092e0:	200009c0 	.word	0x200009c0

080092e4 <__malloc_unlock>:
 80092e4:	4801      	ldr	r0, [pc, #4]	; (80092ec <__malloc_unlock+0x8>)
 80092e6:	f000 baf4 	b.w	80098d2 <__retarget_lock_release_recursive>
 80092ea:	bf00      	nop
 80092ec:	200009c0 	.word	0x200009c0

080092f0 <__ssputs_r>:
 80092f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	688e      	ldr	r6, [r1, #8]
 80092f6:	429e      	cmp	r6, r3
 80092f8:	4682      	mov	sl, r0
 80092fa:	460c      	mov	r4, r1
 80092fc:	4690      	mov	r8, r2
 80092fe:	461f      	mov	r7, r3
 8009300:	d838      	bhi.n	8009374 <__ssputs_r+0x84>
 8009302:	898a      	ldrh	r2, [r1, #12]
 8009304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009308:	d032      	beq.n	8009370 <__ssputs_r+0x80>
 800930a:	6825      	ldr	r5, [r4, #0]
 800930c:	6909      	ldr	r1, [r1, #16]
 800930e:	eba5 0901 	sub.w	r9, r5, r1
 8009312:	6965      	ldr	r5, [r4, #20]
 8009314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800931c:	3301      	adds	r3, #1
 800931e:	444b      	add	r3, r9
 8009320:	106d      	asrs	r5, r5, #1
 8009322:	429d      	cmp	r5, r3
 8009324:	bf38      	it	cc
 8009326:	461d      	movcc	r5, r3
 8009328:	0553      	lsls	r3, r2, #21
 800932a:	d531      	bpl.n	8009390 <__ssputs_r+0xa0>
 800932c:	4629      	mov	r1, r5
 800932e:	f7ff ff49 	bl	80091c4 <_malloc_r>
 8009332:	4606      	mov	r6, r0
 8009334:	b950      	cbnz	r0, 800934c <__ssputs_r+0x5c>
 8009336:	230c      	movs	r3, #12
 8009338:	f8ca 3000 	str.w	r3, [sl]
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934c:	6921      	ldr	r1, [r4, #16]
 800934e:	464a      	mov	r2, r9
 8009350:	f000 fac0 	bl	80098d4 <memcpy>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800935a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	6126      	str	r6, [r4, #16]
 8009362:	6165      	str	r5, [r4, #20]
 8009364:	444e      	add	r6, r9
 8009366:	eba5 0509 	sub.w	r5, r5, r9
 800936a:	6026      	str	r6, [r4, #0]
 800936c:	60a5      	str	r5, [r4, #8]
 800936e:	463e      	mov	r6, r7
 8009370:	42be      	cmp	r6, r7
 8009372:	d900      	bls.n	8009376 <__ssputs_r+0x86>
 8009374:	463e      	mov	r6, r7
 8009376:	4632      	mov	r2, r6
 8009378:	6820      	ldr	r0, [r4, #0]
 800937a:	4641      	mov	r1, r8
 800937c:	f000 fab8 	bl	80098f0 <memmove>
 8009380:	68a3      	ldr	r3, [r4, #8]
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	1b9b      	subs	r3, r3, r6
 8009386:	4432      	add	r2, r6
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	6022      	str	r2, [r4, #0]
 800938c:	2000      	movs	r0, #0
 800938e:	e7db      	b.n	8009348 <__ssputs_r+0x58>
 8009390:	462a      	mov	r2, r5
 8009392:	f000 fac7 	bl	8009924 <_realloc_r>
 8009396:	4606      	mov	r6, r0
 8009398:	2800      	cmp	r0, #0
 800939a:	d1e1      	bne.n	8009360 <__ssputs_r+0x70>
 800939c:	6921      	ldr	r1, [r4, #16]
 800939e:	4650      	mov	r0, sl
 80093a0:	f7ff fec0 	bl	8009124 <_free_r>
 80093a4:	e7c7      	b.n	8009336 <__ssputs_r+0x46>
	...

080093a8 <_svfiprintf_r>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	4698      	mov	r8, r3
 80093ae:	898b      	ldrh	r3, [r1, #12]
 80093b0:	061b      	lsls	r3, r3, #24
 80093b2:	b09d      	sub	sp, #116	; 0x74
 80093b4:	4607      	mov	r7, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	4614      	mov	r4, r2
 80093ba:	d50e      	bpl.n	80093da <_svfiprintf_r+0x32>
 80093bc:	690b      	ldr	r3, [r1, #16]
 80093be:	b963      	cbnz	r3, 80093da <_svfiprintf_r+0x32>
 80093c0:	2140      	movs	r1, #64	; 0x40
 80093c2:	f7ff feff 	bl	80091c4 <_malloc_r>
 80093c6:	6028      	str	r0, [r5, #0]
 80093c8:	6128      	str	r0, [r5, #16]
 80093ca:	b920      	cbnz	r0, 80093d6 <_svfiprintf_r+0x2e>
 80093cc:	230c      	movs	r3, #12
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	e0d1      	b.n	800957a <_svfiprintf_r+0x1d2>
 80093d6:	2340      	movs	r3, #64	; 0x40
 80093d8:	616b      	str	r3, [r5, #20]
 80093da:	2300      	movs	r3, #0
 80093dc:	9309      	str	r3, [sp, #36]	; 0x24
 80093de:	2320      	movs	r3, #32
 80093e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80093e8:	2330      	movs	r3, #48	; 0x30
 80093ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009594 <_svfiprintf_r+0x1ec>
 80093ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093f2:	f04f 0901 	mov.w	r9, #1
 80093f6:	4623      	mov	r3, r4
 80093f8:	469a      	mov	sl, r3
 80093fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093fe:	b10a      	cbz	r2, 8009404 <_svfiprintf_r+0x5c>
 8009400:	2a25      	cmp	r2, #37	; 0x25
 8009402:	d1f9      	bne.n	80093f8 <_svfiprintf_r+0x50>
 8009404:	ebba 0b04 	subs.w	fp, sl, r4
 8009408:	d00b      	beq.n	8009422 <_svfiprintf_r+0x7a>
 800940a:	465b      	mov	r3, fp
 800940c:	4622      	mov	r2, r4
 800940e:	4629      	mov	r1, r5
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff ff6d 	bl	80092f0 <__ssputs_r>
 8009416:	3001      	adds	r0, #1
 8009418:	f000 80aa 	beq.w	8009570 <_svfiprintf_r+0x1c8>
 800941c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800941e:	445a      	add	r2, fp
 8009420:	9209      	str	r2, [sp, #36]	; 0x24
 8009422:	f89a 3000 	ldrb.w	r3, [sl]
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 80a2 	beq.w	8009570 <_svfiprintf_r+0x1c8>
 800942c:	2300      	movs	r3, #0
 800942e:	f04f 32ff 	mov.w	r2, #4294967295
 8009432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009436:	f10a 0a01 	add.w	sl, sl, #1
 800943a:	9304      	str	r3, [sp, #16]
 800943c:	9307      	str	r3, [sp, #28]
 800943e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009442:	931a      	str	r3, [sp, #104]	; 0x68
 8009444:	4654      	mov	r4, sl
 8009446:	2205      	movs	r2, #5
 8009448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944c:	4851      	ldr	r0, [pc, #324]	; (8009594 <_svfiprintf_r+0x1ec>)
 800944e:	f7f6 fed7 	bl	8000200 <memchr>
 8009452:	9a04      	ldr	r2, [sp, #16]
 8009454:	b9d8      	cbnz	r0, 800948e <_svfiprintf_r+0xe6>
 8009456:	06d0      	lsls	r0, r2, #27
 8009458:	bf44      	itt	mi
 800945a:	2320      	movmi	r3, #32
 800945c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009460:	0711      	lsls	r1, r2, #28
 8009462:	bf44      	itt	mi
 8009464:	232b      	movmi	r3, #43	; 0x2b
 8009466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800946a:	f89a 3000 	ldrb.w	r3, [sl]
 800946e:	2b2a      	cmp	r3, #42	; 0x2a
 8009470:	d015      	beq.n	800949e <_svfiprintf_r+0xf6>
 8009472:	9a07      	ldr	r2, [sp, #28]
 8009474:	4654      	mov	r4, sl
 8009476:	2000      	movs	r0, #0
 8009478:	f04f 0c0a 	mov.w	ip, #10
 800947c:	4621      	mov	r1, r4
 800947e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009482:	3b30      	subs	r3, #48	; 0x30
 8009484:	2b09      	cmp	r3, #9
 8009486:	d94e      	bls.n	8009526 <_svfiprintf_r+0x17e>
 8009488:	b1b0      	cbz	r0, 80094b8 <_svfiprintf_r+0x110>
 800948a:	9207      	str	r2, [sp, #28]
 800948c:	e014      	b.n	80094b8 <_svfiprintf_r+0x110>
 800948e:	eba0 0308 	sub.w	r3, r0, r8
 8009492:	fa09 f303 	lsl.w	r3, r9, r3
 8009496:	4313      	orrs	r3, r2
 8009498:	9304      	str	r3, [sp, #16]
 800949a:	46a2      	mov	sl, r4
 800949c:	e7d2      	b.n	8009444 <_svfiprintf_r+0x9c>
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	1d19      	adds	r1, r3, #4
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	9103      	str	r1, [sp, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bfbb      	ittet	lt
 80094aa:	425b      	neglt	r3, r3
 80094ac:	f042 0202 	orrlt.w	r2, r2, #2
 80094b0:	9307      	strge	r3, [sp, #28]
 80094b2:	9307      	strlt	r3, [sp, #28]
 80094b4:	bfb8      	it	lt
 80094b6:	9204      	strlt	r2, [sp, #16]
 80094b8:	7823      	ldrb	r3, [r4, #0]
 80094ba:	2b2e      	cmp	r3, #46	; 0x2e
 80094bc:	d10c      	bne.n	80094d8 <_svfiprintf_r+0x130>
 80094be:	7863      	ldrb	r3, [r4, #1]
 80094c0:	2b2a      	cmp	r3, #42	; 0x2a
 80094c2:	d135      	bne.n	8009530 <_svfiprintf_r+0x188>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	1d1a      	adds	r2, r3, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	9203      	str	r2, [sp, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	bfb8      	it	lt
 80094d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80094d4:	3402      	adds	r4, #2
 80094d6:	9305      	str	r3, [sp, #20]
 80094d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095a4 <_svfiprintf_r+0x1fc>
 80094dc:	7821      	ldrb	r1, [r4, #0]
 80094de:	2203      	movs	r2, #3
 80094e0:	4650      	mov	r0, sl
 80094e2:	f7f6 fe8d 	bl	8000200 <memchr>
 80094e6:	b140      	cbz	r0, 80094fa <_svfiprintf_r+0x152>
 80094e8:	2340      	movs	r3, #64	; 0x40
 80094ea:	eba0 000a 	sub.w	r0, r0, sl
 80094ee:	fa03 f000 	lsl.w	r0, r3, r0
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	4303      	orrs	r3, r0
 80094f6:	3401      	adds	r4, #1
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fe:	4826      	ldr	r0, [pc, #152]	; (8009598 <_svfiprintf_r+0x1f0>)
 8009500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009504:	2206      	movs	r2, #6
 8009506:	f7f6 fe7b 	bl	8000200 <memchr>
 800950a:	2800      	cmp	r0, #0
 800950c:	d038      	beq.n	8009580 <_svfiprintf_r+0x1d8>
 800950e:	4b23      	ldr	r3, [pc, #140]	; (800959c <_svfiprintf_r+0x1f4>)
 8009510:	bb1b      	cbnz	r3, 800955a <_svfiprintf_r+0x1b2>
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	3307      	adds	r3, #7
 8009516:	f023 0307 	bic.w	r3, r3, #7
 800951a:	3308      	adds	r3, #8
 800951c:	9303      	str	r3, [sp, #12]
 800951e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009520:	4433      	add	r3, r6
 8009522:	9309      	str	r3, [sp, #36]	; 0x24
 8009524:	e767      	b.n	80093f6 <_svfiprintf_r+0x4e>
 8009526:	fb0c 3202 	mla	r2, ip, r2, r3
 800952a:	460c      	mov	r4, r1
 800952c:	2001      	movs	r0, #1
 800952e:	e7a5      	b.n	800947c <_svfiprintf_r+0xd4>
 8009530:	2300      	movs	r3, #0
 8009532:	3401      	adds	r4, #1
 8009534:	9305      	str	r3, [sp, #20]
 8009536:	4619      	mov	r1, r3
 8009538:	f04f 0c0a 	mov.w	ip, #10
 800953c:	4620      	mov	r0, r4
 800953e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009542:	3a30      	subs	r2, #48	; 0x30
 8009544:	2a09      	cmp	r2, #9
 8009546:	d903      	bls.n	8009550 <_svfiprintf_r+0x1a8>
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0c5      	beq.n	80094d8 <_svfiprintf_r+0x130>
 800954c:	9105      	str	r1, [sp, #20]
 800954e:	e7c3      	b.n	80094d8 <_svfiprintf_r+0x130>
 8009550:	fb0c 2101 	mla	r1, ip, r1, r2
 8009554:	4604      	mov	r4, r0
 8009556:	2301      	movs	r3, #1
 8009558:	e7f0      	b.n	800953c <_svfiprintf_r+0x194>
 800955a:	ab03      	add	r3, sp, #12
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	462a      	mov	r2, r5
 8009560:	4b0f      	ldr	r3, [pc, #60]	; (80095a0 <_svfiprintf_r+0x1f8>)
 8009562:	a904      	add	r1, sp, #16
 8009564:	4638      	mov	r0, r7
 8009566:	f3af 8000 	nop.w
 800956a:	1c42      	adds	r2, r0, #1
 800956c:	4606      	mov	r6, r0
 800956e:	d1d6      	bne.n	800951e <_svfiprintf_r+0x176>
 8009570:	89ab      	ldrh	r3, [r5, #12]
 8009572:	065b      	lsls	r3, r3, #25
 8009574:	f53f af2c 	bmi.w	80093d0 <_svfiprintf_r+0x28>
 8009578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800957a:	b01d      	add	sp, #116	; 0x74
 800957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009580:	ab03      	add	r3, sp, #12
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	462a      	mov	r2, r5
 8009586:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <_svfiprintf_r+0x1f8>)
 8009588:	a904      	add	r1, sp, #16
 800958a:	4638      	mov	r0, r7
 800958c:	f000 f87a 	bl	8009684 <_printf_i>
 8009590:	e7eb      	b.n	800956a <_svfiprintf_r+0x1c2>
 8009592:	bf00      	nop
 8009594:	08009ad0 	.word	0x08009ad0
 8009598:	08009ada 	.word	0x08009ada
 800959c:	00000000 	.word	0x00000000
 80095a0:	080092f1 	.word	0x080092f1
 80095a4:	08009ad6 	.word	0x08009ad6

080095a8 <_printf_common>:
 80095a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	4616      	mov	r6, r2
 80095ae:	4699      	mov	r9, r3
 80095b0:	688a      	ldr	r2, [r1, #8]
 80095b2:	690b      	ldr	r3, [r1, #16]
 80095b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	bfb8      	it	lt
 80095bc:	4613      	movlt	r3, r2
 80095be:	6033      	str	r3, [r6, #0]
 80095c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095c4:	4607      	mov	r7, r0
 80095c6:	460c      	mov	r4, r1
 80095c8:	b10a      	cbz	r2, 80095ce <_printf_common+0x26>
 80095ca:	3301      	adds	r3, #1
 80095cc:	6033      	str	r3, [r6, #0]
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	0699      	lsls	r1, r3, #26
 80095d2:	bf42      	ittt	mi
 80095d4:	6833      	ldrmi	r3, [r6, #0]
 80095d6:	3302      	addmi	r3, #2
 80095d8:	6033      	strmi	r3, [r6, #0]
 80095da:	6825      	ldr	r5, [r4, #0]
 80095dc:	f015 0506 	ands.w	r5, r5, #6
 80095e0:	d106      	bne.n	80095f0 <_printf_common+0x48>
 80095e2:	f104 0a19 	add.w	sl, r4, #25
 80095e6:	68e3      	ldr	r3, [r4, #12]
 80095e8:	6832      	ldr	r2, [r6, #0]
 80095ea:	1a9b      	subs	r3, r3, r2
 80095ec:	42ab      	cmp	r3, r5
 80095ee:	dc26      	bgt.n	800963e <_printf_common+0x96>
 80095f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095f4:	1e13      	subs	r3, r2, #0
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	bf18      	it	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	0692      	lsls	r2, r2, #26
 80095fe:	d42b      	bmi.n	8009658 <_printf_common+0xb0>
 8009600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009604:	4649      	mov	r1, r9
 8009606:	4638      	mov	r0, r7
 8009608:	47c0      	blx	r8
 800960a:	3001      	adds	r0, #1
 800960c:	d01e      	beq.n	800964c <_printf_common+0xa4>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	68e5      	ldr	r5, [r4, #12]
 8009612:	6832      	ldr	r2, [r6, #0]
 8009614:	f003 0306 	and.w	r3, r3, #6
 8009618:	2b04      	cmp	r3, #4
 800961a:	bf08      	it	eq
 800961c:	1aad      	subeq	r5, r5, r2
 800961e:	68a3      	ldr	r3, [r4, #8]
 8009620:	6922      	ldr	r2, [r4, #16]
 8009622:	bf0c      	ite	eq
 8009624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009628:	2500      	movne	r5, #0
 800962a:	4293      	cmp	r3, r2
 800962c:	bfc4      	itt	gt
 800962e:	1a9b      	subgt	r3, r3, r2
 8009630:	18ed      	addgt	r5, r5, r3
 8009632:	2600      	movs	r6, #0
 8009634:	341a      	adds	r4, #26
 8009636:	42b5      	cmp	r5, r6
 8009638:	d11a      	bne.n	8009670 <_printf_common+0xc8>
 800963a:	2000      	movs	r0, #0
 800963c:	e008      	b.n	8009650 <_printf_common+0xa8>
 800963e:	2301      	movs	r3, #1
 8009640:	4652      	mov	r2, sl
 8009642:	4649      	mov	r1, r9
 8009644:	4638      	mov	r0, r7
 8009646:	47c0      	blx	r8
 8009648:	3001      	adds	r0, #1
 800964a:	d103      	bne.n	8009654 <_printf_common+0xac>
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009654:	3501      	adds	r5, #1
 8009656:	e7c6      	b.n	80095e6 <_printf_common+0x3e>
 8009658:	18e1      	adds	r1, r4, r3
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	2030      	movs	r0, #48	; 0x30
 800965e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009662:	4422      	add	r2, r4
 8009664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800966c:	3302      	adds	r3, #2
 800966e:	e7c7      	b.n	8009600 <_printf_common+0x58>
 8009670:	2301      	movs	r3, #1
 8009672:	4622      	mov	r2, r4
 8009674:	4649      	mov	r1, r9
 8009676:	4638      	mov	r0, r7
 8009678:	47c0      	blx	r8
 800967a:	3001      	adds	r0, #1
 800967c:	d0e6      	beq.n	800964c <_printf_common+0xa4>
 800967e:	3601      	adds	r6, #1
 8009680:	e7d9      	b.n	8009636 <_printf_common+0x8e>
	...

08009684 <_printf_i>:
 8009684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009688:	460c      	mov	r4, r1
 800968a:	4691      	mov	r9, r2
 800968c:	7e27      	ldrb	r7, [r4, #24]
 800968e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009690:	2f78      	cmp	r7, #120	; 0x78
 8009692:	4680      	mov	r8, r0
 8009694:	469a      	mov	sl, r3
 8009696:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800969a:	d807      	bhi.n	80096ac <_printf_i+0x28>
 800969c:	2f62      	cmp	r7, #98	; 0x62
 800969e:	d80a      	bhi.n	80096b6 <_printf_i+0x32>
 80096a0:	2f00      	cmp	r7, #0
 80096a2:	f000 80d8 	beq.w	8009856 <_printf_i+0x1d2>
 80096a6:	2f58      	cmp	r7, #88	; 0x58
 80096a8:	f000 80a3 	beq.w	80097f2 <_printf_i+0x16e>
 80096ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096b4:	e03a      	b.n	800972c <_printf_i+0xa8>
 80096b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ba:	2b15      	cmp	r3, #21
 80096bc:	d8f6      	bhi.n	80096ac <_printf_i+0x28>
 80096be:	a001      	add	r0, pc, #4	; (adr r0, 80096c4 <_printf_i+0x40>)
 80096c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80096c4:	0800971d 	.word	0x0800971d
 80096c8:	08009731 	.word	0x08009731
 80096cc:	080096ad 	.word	0x080096ad
 80096d0:	080096ad 	.word	0x080096ad
 80096d4:	080096ad 	.word	0x080096ad
 80096d8:	080096ad 	.word	0x080096ad
 80096dc:	08009731 	.word	0x08009731
 80096e0:	080096ad 	.word	0x080096ad
 80096e4:	080096ad 	.word	0x080096ad
 80096e8:	080096ad 	.word	0x080096ad
 80096ec:	080096ad 	.word	0x080096ad
 80096f0:	0800983d 	.word	0x0800983d
 80096f4:	08009761 	.word	0x08009761
 80096f8:	0800981f 	.word	0x0800981f
 80096fc:	080096ad 	.word	0x080096ad
 8009700:	080096ad 	.word	0x080096ad
 8009704:	0800985f 	.word	0x0800985f
 8009708:	080096ad 	.word	0x080096ad
 800970c:	08009761 	.word	0x08009761
 8009710:	080096ad 	.word	0x080096ad
 8009714:	080096ad 	.word	0x080096ad
 8009718:	08009827 	.word	0x08009827
 800971c:	680b      	ldr	r3, [r1, #0]
 800971e:	1d1a      	adds	r2, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	600a      	str	r2, [r1, #0]
 8009724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800972c:	2301      	movs	r3, #1
 800972e:	e0a3      	b.n	8009878 <_printf_i+0x1f4>
 8009730:	6825      	ldr	r5, [r4, #0]
 8009732:	6808      	ldr	r0, [r1, #0]
 8009734:	062e      	lsls	r6, r5, #24
 8009736:	f100 0304 	add.w	r3, r0, #4
 800973a:	d50a      	bpl.n	8009752 <_printf_i+0xce>
 800973c:	6805      	ldr	r5, [r0, #0]
 800973e:	600b      	str	r3, [r1, #0]
 8009740:	2d00      	cmp	r5, #0
 8009742:	da03      	bge.n	800974c <_printf_i+0xc8>
 8009744:	232d      	movs	r3, #45	; 0x2d
 8009746:	426d      	negs	r5, r5
 8009748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800974c:	485e      	ldr	r0, [pc, #376]	; (80098c8 <_printf_i+0x244>)
 800974e:	230a      	movs	r3, #10
 8009750:	e019      	b.n	8009786 <_printf_i+0x102>
 8009752:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009756:	6805      	ldr	r5, [r0, #0]
 8009758:	600b      	str	r3, [r1, #0]
 800975a:	bf18      	it	ne
 800975c:	b22d      	sxthne	r5, r5
 800975e:	e7ef      	b.n	8009740 <_printf_i+0xbc>
 8009760:	680b      	ldr	r3, [r1, #0]
 8009762:	6825      	ldr	r5, [r4, #0]
 8009764:	1d18      	adds	r0, r3, #4
 8009766:	6008      	str	r0, [r1, #0]
 8009768:	0628      	lsls	r0, r5, #24
 800976a:	d501      	bpl.n	8009770 <_printf_i+0xec>
 800976c:	681d      	ldr	r5, [r3, #0]
 800976e:	e002      	b.n	8009776 <_printf_i+0xf2>
 8009770:	0669      	lsls	r1, r5, #25
 8009772:	d5fb      	bpl.n	800976c <_printf_i+0xe8>
 8009774:	881d      	ldrh	r5, [r3, #0]
 8009776:	4854      	ldr	r0, [pc, #336]	; (80098c8 <_printf_i+0x244>)
 8009778:	2f6f      	cmp	r7, #111	; 0x6f
 800977a:	bf0c      	ite	eq
 800977c:	2308      	moveq	r3, #8
 800977e:	230a      	movne	r3, #10
 8009780:	2100      	movs	r1, #0
 8009782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009786:	6866      	ldr	r6, [r4, #4]
 8009788:	60a6      	str	r6, [r4, #8]
 800978a:	2e00      	cmp	r6, #0
 800978c:	bfa2      	ittt	ge
 800978e:	6821      	ldrge	r1, [r4, #0]
 8009790:	f021 0104 	bicge.w	r1, r1, #4
 8009794:	6021      	strge	r1, [r4, #0]
 8009796:	b90d      	cbnz	r5, 800979c <_printf_i+0x118>
 8009798:	2e00      	cmp	r6, #0
 800979a:	d04d      	beq.n	8009838 <_printf_i+0x1b4>
 800979c:	4616      	mov	r6, r2
 800979e:	fbb5 f1f3 	udiv	r1, r5, r3
 80097a2:	fb03 5711 	mls	r7, r3, r1, r5
 80097a6:	5dc7      	ldrb	r7, [r0, r7]
 80097a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097ac:	462f      	mov	r7, r5
 80097ae:	42bb      	cmp	r3, r7
 80097b0:	460d      	mov	r5, r1
 80097b2:	d9f4      	bls.n	800979e <_printf_i+0x11a>
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d10b      	bne.n	80097d0 <_printf_i+0x14c>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	07df      	lsls	r7, r3, #31
 80097bc:	d508      	bpl.n	80097d0 <_printf_i+0x14c>
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	6861      	ldr	r1, [r4, #4]
 80097c2:	4299      	cmp	r1, r3
 80097c4:	bfde      	ittt	le
 80097c6:	2330      	movle	r3, #48	; 0x30
 80097c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097d0:	1b92      	subs	r2, r2, r6
 80097d2:	6122      	str	r2, [r4, #16]
 80097d4:	f8cd a000 	str.w	sl, [sp]
 80097d8:	464b      	mov	r3, r9
 80097da:	aa03      	add	r2, sp, #12
 80097dc:	4621      	mov	r1, r4
 80097de:	4640      	mov	r0, r8
 80097e0:	f7ff fee2 	bl	80095a8 <_printf_common>
 80097e4:	3001      	adds	r0, #1
 80097e6:	d14c      	bne.n	8009882 <_printf_i+0x1fe>
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ec:	b004      	add	sp, #16
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	4835      	ldr	r0, [pc, #212]	; (80098c8 <_printf_i+0x244>)
 80097f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	680e      	ldr	r6, [r1, #0]
 80097fc:	061f      	lsls	r7, r3, #24
 80097fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8009802:	600e      	str	r6, [r1, #0]
 8009804:	d514      	bpl.n	8009830 <_printf_i+0x1ac>
 8009806:	07d9      	lsls	r1, r3, #31
 8009808:	bf44      	itt	mi
 800980a:	f043 0320 	orrmi.w	r3, r3, #32
 800980e:	6023      	strmi	r3, [r4, #0]
 8009810:	b91d      	cbnz	r5, 800981a <_printf_i+0x196>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	f023 0320 	bic.w	r3, r3, #32
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	2310      	movs	r3, #16
 800981c:	e7b0      	b.n	8009780 <_printf_i+0xfc>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	f043 0320 	orr.w	r3, r3, #32
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	2378      	movs	r3, #120	; 0x78
 8009828:	4828      	ldr	r0, [pc, #160]	; (80098cc <_printf_i+0x248>)
 800982a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800982e:	e7e3      	b.n	80097f8 <_printf_i+0x174>
 8009830:	065e      	lsls	r6, r3, #25
 8009832:	bf48      	it	mi
 8009834:	b2ad      	uxthmi	r5, r5
 8009836:	e7e6      	b.n	8009806 <_printf_i+0x182>
 8009838:	4616      	mov	r6, r2
 800983a:	e7bb      	b.n	80097b4 <_printf_i+0x130>
 800983c:	680b      	ldr	r3, [r1, #0]
 800983e:	6826      	ldr	r6, [r4, #0]
 8009840:	6960      	ldr	r0, [r4, #20]
 8009842:	1d1d      	adds	r5, r3, #4
 8009844:	600d      	str	r5, [r1, #0]
 8009846:	0635      	lsls	r5, r6, #24
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	d501      	bpl.n	8009850 <_printf_i+0x1cc>
 800984c:	6018      	str	r0, [r3, #0]
 800984e:	e002      	b.n	8009856 <_printf_i+0x1d2>
 8009850:	0671      	lsls	r1, r6, #25
 8009852:	d5fb      	bpl.n	800984c <_printf_i+0x1c8>
 8009854:	8018      	strh	r0, [r3, #0]
 8009856:	2300      	movs	r3, #0
 8009858:	6123      	str	r3, [r4, #16]
 800985a:	4616      	mov	r6, r2
 800985c:	e7ba      	b.n	80097d4 <_printf_i+0x150>
 800985e:	680b      	ldr	r3, [r1, #0]
 8009860:	1d1a      	adds	r2, r3, #4
 8009862:	600a      	str	r2, [r1, #0]
 8009864:	681e      	ldr	r6, [r3, #0]
 8009866:	6862      	ldr	r2, [r4, #4]
 8009868:	2100      	movs	r1, #0
 800986a:	4630      	mov	r0, r6
 800986c:	f7f6 fcc8 	bl	8000200 <memchr>
 8009870:	b108      	cbz	r0, 8009876 <_printf_i+0x1f2>
 8009872:	1b80      	subs	r0, r0, r6
 8009874:	6060      	str	r0, [r4, #4]
 8009876:	6863      	ldr	r3, [r4, #4]
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	2300      	movs	r3, #0
 800987c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009880:	e7a8      	b.n	80097d4 <_printf_i+0x150>
 8009882:	6923      	ldr	r3, [r4, #16]
 8009884:	4632      	mov	r2, r6
 8009886:	4649      	mov	r1, r9
 8009888:	4640      	mov	r0, r8
 800988a:	47d0      	blx	sl
 800988c:	3001      	adds	r0, #1
 800988e:	d0ab      	beq.n	80097e8 <_printf_i+0x164>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	079b      	lsls	r3, r3, #30
 8009894:	d413      	bmi.n	80098be <_printf_i+0x23a>
 8009896:	68e0      	ldr	r0, [r4, #12]
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	4298      	cmp	r0, r3
 800989c:	bfb8      	it	lt
 800989e:	4618      	movlt	r0, r3
 80098a0:	e7a4      	b.n	80097ec <_printf_i+0x168>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4632      	mov	r2, r6
 80098a6:	4649      	mov	r1, r9
 80098a8:	4640      	mov	r0, r8
 80098aa:	47d0      	blx	sl
 80098ac:	3001      	adds	r0, #1
 80098ae:	d09b      	beq.n	80097e8 <_printf_i+0x164>
 80098b0:	3501      	adds	r5, #1
 80098b2:	68e3      	ldr	r3, [r4, #12]
 80098b4:	9903      	ldr	r1, [sp, #12]
 80098b6:	1a5b      	subs	r3, r3, r1
 80098b8:	42ab      	cmp	r3, r5
 80098ba:	dcf2      	bgt.n	80098a2 <_printf_i+0x21e>
 80098bc:	e7eb      	b.n	8009896 <_printf_i+0x212>
 80098be:	2500      	movs	r5, #0
 80098c0:	f104 0619 	add.w	r6, r4, #25
 80098c4:	e7f5      	b.n	80098b2 <_printf_i+0x22e>
 80098c6:	bf00      	nop
 80098c8:	08009ae1 	.word	0x08009ae1
 80098cc:	08009af2 	.word	0x08009af2

080098d0 <__retarget_lock_acquire_recursive>:
 80098d0:	4770      	bx	lr

080098d2 <__retarget_lock_release_recursive>:
 80098d2:	4770      	bx	lr

080098d4 <memcpy>:
 80098d4:	440a      	add	r2, r1
 80098d6:	4291      	cmp	r1, r2
 80098d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098dc:	d100      	bne.n	80098e0 <memcpy+0xc>
 80098de:	4770      	bx	lr
 80098e0:	b510      	push	{r4, lr}
 80098e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ea:	4291      	cmp	r1, r2
 80098ec:	d1f9      	bne.n	80098e2 <memcpy+0xe>
 80098ee:	bd10      	pop	{r4, pc}

080098f0 <memmove>:
 80098f0:	4288      	cmp	r0, r1
 80098f2:	b510      	push	{r4, lr}
 80098f4:	eb01 0402 	add.w	r4, r1, r2
 80098f8:	d902      	bls.n	8009900 <memmove+0x10>
 80098fa:	4284      	cmp	r4, r0
 80098fc:	4623      	mov	r3, r4
 80098fe:	d807      	bhi.n	8009910 <memmove+0x20>
 8009900:	1e43      	subs	r3, r0, #1
 8009902:	42a1      	cmp	r1, r4
 8009904:	d008      	beq.n	8009918 <memmove+0x28>
 8009906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800990a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800990e:	e7f8      	b.n	8009902 <memmove+0x12>
 8009910:	4402      	add	r2, r0
 8009912:	4601      	mov	r1, r0
 8009914:	428a      	cmp	r2, r1
 8009916:	d100      	bne.n	800991a <memmove+0x2a>
 8009918:	bd10      	pop	{r4, pc}
 800991a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800991e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009922:	e7f7      	b.n	8009914 <memmove+0x24>

08009924 <_realloc_r>:
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009926:	4607      	mov	r7, r0
 8009928:	4614      	mov	r4, r2
 800992a:	460e      	mov	r6, r1
 800992c:	b921      	cbnz	r1, 8009938 <_realloc_r+0x14>
 800992e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009932:	4611      	mov	r1, r2
 8009934:	f7ff bc46 	b.w	80091c4 <_malloc_r>
 8009938:	b922      	cbnz	r2, 8009944 <_realloc_r+0x20>
 800993a:	f7ff fbf3 	bl	8009124 <_free_r>
 800993e:	4625      	mov	r5, r4
 8009940:	4628      	mov	r0, r5
 8009942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009944:	f000 f814 	bl	8009970 <_malloc_usable_size_r>
 8009948:	42a0      	cmp	r0, r4
 800994a:	d20f      	bcs.n	800996c <_realloc_r+0x48>
 800994c:	4621      	mov	r1, r4
 800994e:	4638      	mov	r0, r7
 8009950:	f7ff fc38 	bl	80091c4 <_malloc_r>
 8009954:	4605      	mov	r5, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	d0f2      	beq.n	8009940 <_realloc_r+0x1c>
 800995a:	4631      	mov	r1, r6
 800995c:	4622      	mov	r2, r4
 800995e:	f7ff ffb9 	bl	80098d4 <memcpy>
 8009962:	4631      	mov	r1, r6
 8009964:	4638      	mov	r0, r7
 8009966:	f7ff fbdd 	bl	8009124 <_free_r>
 800996a:	e7e9      	b.n	8009940 <_realloc_r+0x1c>
 800996c:	4635      	mov	r5, r6
 800996e:	e7e7      	b.n	8009940 <_realloc_r+0x1c>

08009970 <_malloc_usable_size_r>:
 8009970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009974:	1f18      	subs	r0, r3, #4
 8009976:	2b00      	cmp	r3, #0
 8009978:	bfbc      	itt	lt
 800997a:	580b      	ldrlt	r3, [r1, r0]
 800997c:	18c0      	addlt	r0, r0, r3
 800997e:	4770      	bx	lr

08009980 <_init>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr

0800998c <_fini>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr
