
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c524  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800c6e4  0800c6e4  0001c6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c92c  0800c92c  0002069c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c92c  0800c92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c934  0800c934  0002069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c934  0800c934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c938  0800c938  0001c938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000069c  20000000  0800c93c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a444  2000069c  0800cfd8  0002069c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001aae0  0800cfd8  0002aae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002069c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002848e  00000000  00000000  000206cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004537  00000000  00000000  00048b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  0004d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  0004eb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e7b0  00000000  00000000  00050528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed1f  00000000  00000000  0007ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119627  00000000  00000000  0009d9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b701e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007838  00000000  00000000  001b7074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000069c 	.word	0x2000069c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c6cc 	.word	0x0800c6cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200006a0 	.word	0x200006a0
 80001fc:	0800c6cc 	.word	0x0800c6cc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2iz>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d215      	bcs.n	80008a2 <__aeabi_d2iz+0x36>
 8000876:	d511      	bpl.n	800089c <__aeabi_d2iz+0x30>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d912      	bls.n	80008a8 <__aeabi_d2iz+0x3c>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000892:	fa23 f002 	lsr.w	r0, r3, r2
 8000896:	bf18      	it	ne
 8000898:	4240      	negne	r0, r0
 800089a:	4770      	bx	lr
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	4770      	bx	lr
 80008a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008a6:	d105      	bne.n	80008b4 <__aeabi_d2iz+0x48>
 80008a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	bf08      	it	eq
 80008ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b96e 	b.w	8000bb0 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	4604      	mov	r4, r0
 80008f4:	468c      	mov	ip, r1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 8083 	bne.w	8000a02 <__udivmoddi4+0x116>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4617      	mov	r7, r2
 8000900:	d947      	bls.n	8000992 <__udivmoddi4+0xa6>
 8000902:	fab2 f282 	clz	r2, r2
 8000906:	b142      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000908:	f1c2 0020 	rsb	r0, r2, #32
 800090c:	fa24 f000 	lsr.w	r0, r4, r0
 8000910:	4091      	lsls	r1, r2
 8000912:	4097      	lsls	r7, r2
 8000914:	ea40 0c01 	orr.w	ip, r0, r1
 8000918:	4094      	lsls	r4, r2
 800091a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800091e:	0c23      	lsrs	r3, r4, #16
 8000920:	fbbc f6f8 	udiv	r6, ip, r8
 8000924:	fa1f fe87 	uxth.w	lr, r7
 8000928:	fb08 c116 	mls	r1, r8, r6, ip
 800092c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000930:	fb06 f10e 	mul.w	r1, r6, lr
 8000934:	4299      	cmp	r1, r3
 8000936:	d909      	bls.n	800094c <__udivmoddi4+0x60>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f106 30ff 	add.w	r0, r6, #4294967295
 800093e:	f080 8119 	bcs.w	8000b74 <__udivmoddi4+0x288>
 8000942:	4299      	cmp	r1, r3
 8000944:	f240 8116 	bls.w	8000b74 <__udivmoddi4+0x288>
 8000948:	3e02      	subs	r6, #2
 800094a:	443b      	add	r3, r7
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	b2a4      	uxth	r4, r4
 8000950:	fbb3 f0f8 	udiv	r0, r3, r8
 8000954:	fb08 3310 	mls	r3, r8, r0, r3
 8000958:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800095c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000960:	45a6      	cmp	lr, r4
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x8c>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 33ff 	add.w	r3, r0, #4294967295
 800096a:	f080 8105 	bcs.w	8000b78 <__udivmoddi4+0x28c>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8102 	bls.w	8000b78 <__udivmoddi4+0x28c>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097c:	eba4 040e 	sub.w	r4, r4, lr
 8000980:	2600      	movs	r6, #0
 8000982:	b11d      	cbz	r5, 800098c <__udivmoddi4+0xa0>
 8000984:	40d4      	lsrs	r4, r2
 8000986:	2300      	movs	r3, #0
 8000988:	e9c5 4300 	strd	r4, r3, [r5]
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	b902      	cbnz	r2, 8000996 <__udivmoddi4+0xaa>
 8000994:	deff      	udf	#255	; 0xff
 8000996:	fab2 f282 	clz	r2, r2
 800099a:	2a00      	cmp	r2, #0
 800099c:	d150      	bne.n	8000a40 <__udivmoddi4+0x154>
 800099e:	1bcb      	subs	r3, r1, r7
 80009a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a4:	fa1f f887 	uxth.w	r8, r7
 80009a8:	2601      	movs	r6, #1
 80009aa:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ae:	0c21      	lsrs	r1, r4, #16
 80009b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b8:	fb08 f30c 	mul.w	r3, r8, ip
 80009bc:	428b      	cmp	r3, r1
 80009be:	d907      	bls.n	80009d0 <__udivmoddi4+0xe4>
 80009c0:	1879      	adds	r1, r7, r1
 80009c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0xe2>
 80009c8:	428b      	cmp	r3, r1
 80009ca:	f200 80e9 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 80009ce:	4684      	mov	ip, r0
 80009d0:	1ac9      	subs	r1, r1, r3
 80009d2:	b2a3      	uxth	r3, r4
 80009d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009dc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009e0:	fb08 f800 	mul.w	r8, r8, r0
 80009e4:	45a0      	cmp	r8, r4
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x10c>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x10a>
 80009f0:	45a0      	cmp	r8, r4
 80009f2:	f200 80d9 	bhi.w	8000ba8 <__udivmoddi4+0x2bc>
 80009f6:	4618      	mov	r0, r3
 80009f8:	eba4 0408 	sub.w	r4, r4, r8
 80009fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a00:	e7bf      	b.n	8000982 <__udivmoddi4+0x96>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d909      	bls.n	8000a1a <__udivmoddi4+0x12e>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	f000 80b1 	beq.w	8000b6e <__udivmoddi4+0x282>
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a12:	4630      	mov	r0, r6
 8000a14:	4631      	mov	r1, r6
 8000a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1a:	fab3 f683 	clz	r6, r3
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d14a      	bne.n	8000ab8 <__udivmoddi4+0x1cc>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d302      	bcc.n	8000a2c <__udivmoddi4+0x140>
 8000a26:	4282      	cmp	r2, r0
 8000a28:	f200 80b8 	bhi.w	8000b9c <__udivmoddi4+0x2b0>
 8000a2c:	1a84      	subs	r4, r0, r2
 8000a2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a32:	2001      	movs	r0, #1
 8000a34:	468c      	mov	ip, r1
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0a8      	beq.n	800098c <__udivmoddi4+0xa0>
 8000a3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a3e:	e7a5      	b.n	800098c <__udivmoddi4+0xa0>
 8000a40:	f1c2 0320 	rsb	r3, r2, #32
 8000a44:	fa20 f603 	lsr.w	r6, r0, r3
 8000a48:	4097      	lsls	r7, r2
 8000a4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a52:	40d9      	lsrs	r1, r3
 8000a54:	4330      	orrs	r0, r6
 8000a56:	0c03      	lsrs	r3, r0, #16
 8000a58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a5c:	fa1f f887 	uxth.w	r8, r7
 8000a60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f108 	mul.w	r1, r6, r8
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a72:	d909      	bls.n	8000a88 <__udivmoddi4+0x19c>
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a7a:	f080 808d 	bcs.w	8000b98 <__udivmoddi4+0x2ac>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 808a 	bls.w	8000b98 <__udivmoddi4+0x2ac>
 8000a84:	3e02      	subs	r6, #2
 8000a86:	443b      	add	r3, r7
 8000a88:	1a5b      	subs	r3, r3, r1
 8000a8a:	b281      	uxth	r1, r0
 8000a8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a98:	fb00 f308 	mul.w	r3, r0, r8
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d907      	bls.n	8000ab0 <__udivmoddi4+0x1c4>
 8000aa0:	1879      	adds	r1, r7, r1
 8000aa2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000aa6:	d273      	bcs.n	8000b90 <__udivmoddi4+0x2a4>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	d971      	bls.n	8000b90 <__udivmoddi4+0x2a4>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4439      	add	r1, r7
 8000ab0:	1acb      	subs	r3, r1, r3
 8000ab2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ab6:	e778      	b.n	80009aa <__udivmoddi4+0xbe>
 8000ab8:	f1c6 0c20 	rsb	ip, r6, #32
 8000abc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ac0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ac4:	431c      	orrs	r4, r3
 8000ac6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ace:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ad2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ad6:	431f      	orrs	r7, r3
 8000ad8:	0c3b      	lsrs	r3, r7, #16
 8000ada:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ade:	fa1f f884 	uxth.w	r8, r4
 8000ae2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ae6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aea:	fb09 fa08 	mul.w	sl, r9, r8
 8000aee:	458a      	cmp	sl, r1
 8000af0:	fa02 f206 	lsl.w	r2, r2, r6
 8000af4:	fa00 f306 	lsl.w	r3, r0, r6
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x220>
 8000afa:	1861      	adds	r1, r4, r1
 8000afc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b00:	d248      	bcs.n	8000b94 <__udivmoddi4+0x2a8>
 8000b02:	458a      	cmp	sl, r1
 8000b04:	d946      	bls.n	8000b94 <__udivmoddi4+0x2a8>
 8000b06:	f1a9 0902 	sub.w	r9, r9, #2
 8000b0a:	4421      	add	r1, r4
 8000b0c:	eba1 010a 	sub.w	r1, r1, sl
 8000b10:	b2bf      	uxth	r7, r7
 8000b12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b1e:	fb00 f808 	mul.w	r8, r0, r8
 8000b22:	45b8      	cmp	r8, r7
 8000b24:	d907      	bls.n	8000b36 <__udivmoddi4+0x24a>
 8000b26:	19e7      	adds	r7, r4, r7
 8000b28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b2c:	d22e      	bcs.n	8000b8c <__udivmoddi4+0x2a0>
 8000b2e:	45b8      	cmp	r8, r7
 8000b30:	d92c      	bls.n	8000b8c <__udivmoddi4+0x2a0>
 8000b32:	3802      	subs	r0, #2
 8000b34:	4427      	add	r7, r4
 8000b36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b3a:	eba7 0708 	sub.w	r7, r7, r8
 8000b3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b42:	454f      	cmp	r7, r9
 8000b44:	46c6      	mov	lr, r8
 8000b46:	4649      	mov	r1, r9
 8000b48:	d31a      	bcc.n	8000b80 <__udivmoddi4+0x294>
 8000b4a:	d017      	beq.n	8000b7c <__udivmoddi4+0x290>
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x27a>
 8000b4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b52:	eb67 0701 	sbc.w	r7, r7, r1
 8000b56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b5a:	40f2      	lsrs	r2, r6
 8000b5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b60:	40f7      	lsrs	r7, r6
 8000b62:	e9c5 2700 	strd	r2, r7, [r5]
 8000b66:	2600      	movs	r6, #0
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e70b      	b.n	800098c <__udivmoddi4+0xa0>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e9      	b.n	800094c <__udivmoddi4+0x60>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6fd      	b.n	8000978 <__udivmoddi4+0x8c>
 8000b7c:	4543      	cmp	r3, r8
 8000b7e:	d2e5      	bcs.n	8000b4c <__udivmoddi4+0x260>
 8000b80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b84:	eb69 0104 	sbc.w	r1, r9, r4
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7df      	b.n	8000b4c <__udivmoddi4+0x260>
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e7d2      	b.n	8000b36 <__udivmoddi4+0x24a>
 8000b90:	4660      	mov	r0, ip
 8000b92:	e78d      	b.n	8000ab0 <__udivmoddi4+0x1c4>
 8000b94:	4681      	mov	r9, r0
 8000b96:	e7b9      	b.n	8000b0c <__udivmoddi4+0x220>
 8000b98:	4666      	mov	r6, ip
 8000b9a:	e775      	b.n	8000a88 <__udivmoddi4+0x19c>
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	e74a      	b.n	8000a36 <__udivmoddi4+0x14a>
 8000ba0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ba4:	4439      	add	r1, r7
 8000ba6:	e713      	b.n	80009d0 <__udivmoddi4+0xe4>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	443c      	add	r4, r7
 8000bac:	e724      	b.n	80009f8 <__udivmoddi4+0x10c>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_idiv0>:
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f901 	bl	8000dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc4:	200f      	movs	r0, #15
 8000bc6:	f00a f909 	bl	800addc <HAL_InitTick>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	e001      	b.n	8000bda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd6:	f009 ff1f 	bl	800aa18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000004 	.word	0x20000004
 8000c08:	20002058 	.word	0x20002058

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20002058 	.word	0x20002058

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000004 	.word	0x20000004

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff4c 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dee:	f7ff ff61 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	6978      	ldr	r0, [r7, #20]
 8000dfa:	f7ff ffb1 	bl	8000d60 <NVIC_EncodePriority>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff80 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff54 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e014      	b.n	8000e6c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	791b      	ldrb	r3, [r3, #4]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f009 fe08 	bl	800aa68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	795b      	ldrb	r3, [r3, #5]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d101      	bne.n	8000e92 <HAL_DAC_Start_DMA+0x1e>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e0ab      	b.n	8000fea <HAL_DAC_Start_DMA+0x176>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2201      	movs	r2, #1
 8000e96:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12f      	bne.n	8000f04 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a52      	ldr	r2, [pc, #328]	; (8000ff4 <HAL_DAC_Start_DMA+0x180>)
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <HAL_DAC_Start_DMA+0x184>)
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4a50      	ldr	r2, [pc, #320]	; (8000ffc <HAL_DAC_Start_DMA+0x188>)
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000eca:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d013      	beq.n	8000efa <HAL_DAC_Start_DMA+0x86>
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d845      	bhi.n	8000f64 <HAL_DAC_Start_DMA+0xf0>
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_DAC_Start_DMA+0x72>
 8000ede:	6a3b      	ldr	r3, [r7, #32]
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d005      	beq.n	8000ef0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000ee4:	e03e      	b.n	8000f64 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3308      	adds	r3, #8
 8000eec:	613b      	str	r3, [r7, #16]
        break;
 8000eee:	e03c      	b.n	8000f6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	613b      	str	r3, [r7, #16]
        break;
 8000ef8:	e037      	b.n	8000f6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3310      	adds	r3, #16
 8000f00:	613b      	str	r3, [r7, #16]
        break;
 8000f02:	e032      	b.n	8000f6a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a3d      	ldr	r2, [pc, #244]	; (8001000 <HAL_DAC_Start_DMA+0x18c>)
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	4a3c      	ldr	r2, [pc, #240]	; (8001004 <HAL_DAC_Start_DMA+0x190>)
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	4a3b      	ldr	r2, [pc, #236]	; (8001008 <HAL_DAC_Start_DMA+0x194>)
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d013      	beq.n	8000f5a <HAL_DAC_Start_DMA+0xe6>
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d817      	bhi.n	8000f68 <HAL_DAC_Start_DMA+0xf4>
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_DAC_Start_DMA+0xd2>
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d005      	beq.n	8000f50 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000f44:	e010      	b.n	8000f68 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3314      	adds	r3, #20
 8000f4c:	613b      	str	r3, [r7, #16]
        break;
 8000f4e:	e00c      	b.n	8000f6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3318      	adds	r3, #24
 8000f56:	613b      	str	r3, [r7, #16]
        break;
 8000f58:	e007      	b.n	8000f6a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	331c      	adds	r3, #28
 8000f60:	613b      	str	r3, [r7, #16]
        break;
 8000f62:	e002      	b.n	8000f6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000f64:	bf00      	nop
 8000f66:	e000      	b.n	8000f6a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000f68:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d111      	bne.n	8000f94 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	f000 fb3d 	bl	8001608 <HAL_DMA_Start_IT>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	75fb      	strb	r3, [r7, #23]
 8000f92:	e010      	b.n	8000fb6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000fa2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	68d8      	ldr	r0, [r3, #12]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	f000 fb2b 	bl	8001608 <HAL_DMA_Start_IT>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10c      	bne.n	8000fdc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	2201      	movs	r2, #1
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e005      	b.n	8000fe8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	f043 0204 	orr.w	r2, r3, #4
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	08001391 	.word	0x08001391
 8000ff8:	080013b3 	.word	0x080013b3
 8000ffc:	080013cf 	.word	0x080013cf
 8001000:	0800144d 	.word	0x0800144d
 8001004:	0800146f 	.word	0x0800146f
 8001008:	0800148b 	.word	0x0800148b

0800100c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001022:	d120      	bne.n	8001066 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001032:	d118      	bne.n	8001066 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2204      	movs	r2, #4
 8001038:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800105e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f84b 	bl	80010fc <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001074:	d120      	bne.n	80010b8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001084:	d118      	bne.n	80010b8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	f043 0202 	orr.w	r2, r3, #2
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80010b0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f9c0 	bl	8001438 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	795b      	ldrb	r3, [r3, #5]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_DAC_ConfigChannel+0x1c>
 8001128:	2302      	movs	r3, #2
 800112a:	e12a      	b.n	8001382 <HAL_DAC_ConfigChannel+0x272>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2201      	movs	r2, #1
 8001130:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2202      	movs	r2, #2
 8001136:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d174      	bne.n	800122a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001140:	f7ff fd64 	bl	8000c0c <HAL_GetTick>
 8001144:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d134      	bne.n	80011b6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800114c:	e011      	b.n	8001172 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800114e:	f7ff fd5d 	bl	8000c0c <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d90a      	bls.n	8001172 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f043 0208 	orr.w	r2, r3, #8
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2203      	movs	r2, #3
 800116c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e107      	b.n	8001382 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e6      	bne.n	800114e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fd4f 	bl	8000c24 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	69d2      	ldr	r2, [r2, #28]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
 8001190:	e01e      	b.n	80011d0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001192:	f7ff fd3b 	bl	8000c0c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d90a      	bls.n	80011b6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f043 0208 	orr.w	r2, r3, #8
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2203      	movs	r2, #3
 80011b0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0e5      	b.n	8001382 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dbe8      	blt.n	8001192 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fd2f 	bl	8000c24 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	69d2      	ldr	r2, [r2, #28]
 80011ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	ea02 0103 	and.w	r1, r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	6a1a      	ldr	r2, [r3, #32]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	409a      	lsls	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	21ff      	movs	r1, #255	; 0xff
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	ea02 0103 	and.w	r1, r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	409a      	lsls	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d11d      	bne.n	800126e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001238:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	221f      	movs	r2, #31
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	4013      	ands	r3, r2
 800124c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	4313      	orrs	r3, r2
 8001264:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001274:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2207      	movs	r2, #7
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	4013      	ands	r3, r2
 8001288:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	431a      	orrs	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	4313      	orrs	r3, r2
 8001308:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001312:	d104      	bne.n	800131e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	e018      	b.n	8001350 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d104      	bne.n	8001330 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e00f      	b.n	8001350 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001330:	f001 fc3c 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8001334:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_DAC_ConfigChannel+0x27c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d904      	bls.n	8001348 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	e003      	b.n	8001350 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800134e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	22c0      	movs	r2, #192	; 0xc0
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	04c4b400 	.word	0x04c4b400

08001390 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fe8e 	bl	80010c0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2201      	movs	r2, #1
 80013a8:	711a      	strb	r2, [r3, #4]
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff fe87 	bl	80010d4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	f043 0204 	orr.w	r2, r3, #4
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f7ff fe7d 	bl	80010e8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2201      	movs	r2, #1
 80013f2:	711a      	strb	r2, [r3, #4]
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff ffce 	bl	80013fc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	711a      	strb	r2, [r3, #4]
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff ffc7 	bl	8001410 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b084      	sub	sp, #16
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	f043 0204 	orr.w	r2, r3, #4
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff ffbd 	bl	8001424 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	711a      	strb	r2, [r3, #4]
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e08d      	b.n	80015e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_DMA_Init+0x138>)
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d80f      	bhi.n	80014f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_DMA_Init+0x13c>)
 80014de:	4413      	add	r3, r2
 80014e0:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_DMA_Init+0x140>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	009a      	lsls	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a42      	ldr	r2, [pc, #264]	; (80015fc <HAL_DMA_Init+0x144>)
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
 80014f4:	e00e      	b.n	8001514 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b40      	ldr	r3, [pc, #256]	; (8001600 <HAL_DMA_Init+0x148>)
 80014fe:	4413      	add	r3, r2
 8001500:	4a3d      	ldr	r2, [pc, #244]	; (80015f8 <HAL_DMA_Init+0x140>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	009a      	lsls	r2, r3, #2
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a3c      	ldr	r2, [pc, #240]	; (8001604 <HAL_DMA_Init+0x14c>)
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800152a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800152e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001538:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fa72 	bl	8001a50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001574:	d102      	bne.n	800157c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001590:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d010      	beq.n	80015bc <HAL_DMA_Init+0x104>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d80c      	bhi.n	80015bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fa92 	bl	8001acc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	e008      	b.n	80015ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020407 	.word	0x40020407
 80015f4:	bffdfff8 	.word	0xbffdfff8
 80015f8:	cccccccd 	.word	0xcccccccd
 80015fc:	40020000 	.word	0x40020000
 8001600:	bffdfbf8 	.word	0xbffdfbf8
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_DMA_Start_IT+0x20>
 8001624:	2302      	movs	r3, #2
 8001626:	e066      	b.n	80016f6 <HAL_DMA_Start_IT+0xee>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d155      	bne.n	80016e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f9b6 	bl	80019d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 020e 	orr.w	r2, r2, #14
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e00f      	b.n	80016a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0204 	bic.w	r2, r2, #4
 800168e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 020a 	orr.w	r2, r2, #10
 800169e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016bc:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016d4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0201 	orr.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e005      	b.n	80016f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
 80016f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d008      	beq.n	8001728 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2204      	movs	r2, #4
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e040      	b.n	80017aa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 020e 	bic.w	r2, r2, #14
 8001736:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001746:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f003 021c 	and.w	r2, r3, #28
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001774:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800178c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001796:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d005      	beq.n	80017da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2204      	movs	r2, #4
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e047      	b.n	800186a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 020e 	bic.w	r2, r2, #14
 80017e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001808:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f003 021c 	and.w	r2, r3, #28
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2101      	movs	r1, #1
 8001818:	fa01 f202 	lsl.w	r2, r1, r2
 800181c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001826:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00c      	beq.n	800184a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001848:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
    }
  }
  return status;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	f003 031c 	and.w	r3, r3, #28
 8001894:	2204      	movs	r2, #4
 8001896:	409a      	lsls	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d026      	beq.n	80018ee <HAL_DMA_IRQHandler+0x7a>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d021      	beq.n	80018ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d107      	bne.n	80018c8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0204 	bic.w	r2, r2, #4
 80018c6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f003 021c 	and.w	r2, r3, #28
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2104      	movs	r1, #4
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d071      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80018ec:	e06c      	b.n	80019c8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f003 031c 	and.w	r3, r3, #28
 80018f6:	2202      	movs	r2, #2
 80018f8:	409a      	lsls	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d02e      	beq.n	8001960 <HAL_DMA_IRQHandler+0xec>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d029      	beq.n	8001960 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10b      	bne.n	8001932 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 020a 	bic.w	r2, r2, #10
 8001928:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 021c 	and.w	r2, r3, #28
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2102      	movs	r1, #2
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	2b00      	cmp	r3, #0
 8001954:	d038      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800195e:	e033      	b.n	80019c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f003 031c 	and.w	r3, r3, #28
 8001968:	2208      	movs	r2, #8
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02a      	beq.n	80019ca <HAL_DMA_IRQHandler+0x156>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d025      	beq.n	80019ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 020e 	bic.w	r2, r2, #14
 800198c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f003 021c 	and.w	r2, r3, #28
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
}
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019e8:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019fa:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	f003 021c 	and.w	r2, r3, #28
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	d108      	bne.n	8001a32 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a30:	e007      	b.n	8001a42 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	60da      	str	r2, [r3, #12]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d80a      	bhi.n	8001a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a70:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6493      	str	r3, [r2, #72]	; 0x48
 8001a78:	e007      	b.n	8001a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	009a      	lsls	r2, r3, #2
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a84:	4413      	add	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	3b08      	subs	r3, #8
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40020407 	.word	0x40020407
 8001ac0:	4002081c 	.word	0x4002081c
 8001ac4:	cccccccd 	.word	0xcccccccd
 8001ac8:	40020880 	.word	0x40020880

08001acc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001aee:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2201      	movs	r2, #1
 8001afa:	409a      	lsls	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	1000823f 	.word	0x1000823f
 8001b10:	40020940 	.word	0x40020940

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	e166      	b.n	8001df2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8158 	beq.w	8001dec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d005      	beq.n	8001b54 <HAL_GPIO_Init+0x40>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d130      	bne.n	8001bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 0201 	and.w	r2, r3, #1
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d017      	beq.n	8001bf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d123      	bne.n	8001c46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	6939      	ldr	r1, [r7, #16]
 8001c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0203 	and.w	r2, r3, #3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80b2 	beq.w	8001dec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c88:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	4a60      	ldr	r2, [pc, #384]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6613      	str	r3, [r2, #96]	; 0x60
 8001c94:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <HAL_GPIO_Init+0x2fc>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ca0:	4a5c      	ldr	r2, [pc, #368]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cca:	d02b      	beq.n	8001d24 <HAL_GPIO_Init+0x210>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_GPIO_Init+0x304>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d025      	beq.n	8001d20 <HAL_GPIO_Init+0x20c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a51      	ldr	r2, [pc, #324]	; (8001e1c <HAL_GPIO_Init+0x308>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d01f      	beq.n	8001d1c <HAL_GPIO_Init+0x208>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a50      	ldr	r2, [pc, #320]	; (8001e20 <HAL_GPIO_Init+0x30c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d019      	beq.n	8001d18 <HAL_GPIO_Init+0x204>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_GPIO_Init+0x310>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d013      	beq.n	8001d14 <HAL_GPIO_Init+0x200>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a4e      	ldr	r2, [pc, #312]	; (8001e28 <HAL_GPIO_Init+0x314>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00d      	beq.n	8001d10 <HAL_GPIO_Init+0x1fc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a4d      	ldr	r2, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x318>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d007      	beq.n	8001d0c <HAL_GPIO_Init+0x1f8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x31c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_GPIO_Init+0x1f4>
 8001d04:	2307      	movs	r3, #7
 8001d06:	e00e      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d08:	2308      	movs	r3, #8
 8001d0a:	e00c      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	e00a      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d10:	2305      	movs	r3, #5
 8001d12:	e008      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d14:	2304      	movs	r3, #4
 8001d16:	e006      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e004      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_GPIO_Init+0x212>
 8001d24:	2300      	movs	r3, #0
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d36:	4937      	ldr	r1, [pc, #220]	; (8001e14 <HAL_GPIO_Init+0x300>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d44:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d68:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001de6:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_GPIO_Init+0x320>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f ae91 	bne.w	8001b24 <HAL_GPIO_Init+0x10>
  }
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	48000800 	.word	0x48000800
 8001e20:	48000c00 	.word	0x48000c00
 8001e24:	48001000 	.word	0x48001000
 8001e28:	48001400 	.word	0x48001400
 8001e2c:	48001800 	.word	0x48001800
 8001e30:	48001c00 	.word	0x48001c00
 8001e34:	40010400 	.word	0x40010400

08001e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
 8001e44:	4613      	mov	r3, r2
 8001e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e48:	787b      	ldrb	r3, [r7, #1]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e78:	d102      	bne.n	8001e80 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7e:	e00b      	b.n	8001e98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e8e:	d102      	bne.n	8001e96 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e94:	e000      	b.n	8001e98 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001e96:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40007000 	.word	0x40007000

08001ea8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d141      	bne.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d131      	bne.n	8001f28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec4:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eca:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001edc:	4a41      	ldr	r2, [pc, #260]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ee4:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2232      	movs	r2, #50	; 0x32
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	4a3f      	ldr	r2, [pc, #252]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001efa:	e002      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d102      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f2      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f16:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d158      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e057      	b.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f2e:	4a2d      	ldr	r2, [pc, #180]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f38:	e04d      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f40:	d141      	bne.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d131      	bne.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f50:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2232      	movs	r2, #50	; 0x32
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f86:	e002      	b.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9a:	d102      	bne.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f2      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d112      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e011      	b.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fc4:	e007      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	20000624 	.word	0x20000624
 8001fec:	431bde83 	.word	0x431bde83

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f000 bc16 	b.w	8002830 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002004:	4ba0      	ldr	r3, [pc, #640]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800200e:	4b9e      	ldr	r3, [pc, #632]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80e4 	beq.w	80021ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_RCC_OscConfig+0x4c>
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	f040 808b 	bne.w	800214a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b01      	cmp	r3, #1
 8002038:	f040 8087 	bne.w	800214a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203c:	4b92      	ldr	r3, [pc, #584]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_OscConfig+0x64>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e3ed      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	4b8b      	ldr	r3, [pc, #556]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <HAL_RCC_OscConfig+0x7e>
 8002064:	4b88      	ldr	r3, [pc, #544]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800206c:	e005      	b.n	800207a <HAL_RCC_OscConfig+0x8a>
 800206e:	4b86      	ldr	r3, [pc, #536]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207a:	4293      	cmp	r3, r2
 800207c:	d223      	bcs.n	80020c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fdfc 	bl	8002c80 <RCC_SetFlashLatencyFromMSIRange>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e3ce      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002092:	4b7d      	ldr	r3, [pc, #500]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7c      	ldr	r2, [pc, #496]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b7a      	ldr	r3, [pc, #488]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4977      	ldr	r1, [pc, #476]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b0:	4b75      	ldr	r3, [pc, #468]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	4972      	ldr	r1, [pc, #456]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
 80020c4:	e025      	b.n	8002112 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6f      	ldr	r2, [pc, #444]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b6d      	ldr	r3, [pc, #436]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	496a      	ldr	r1, [pc, #424]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e4:	4b68      	ldr	r3, [pc, #416]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	4965      	ldr	r1, [pc, #404]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fdbc 	bl	8002c80 <RCC_SetFlashLatencyFromMSIRange>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e38e      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002112:	f000 fcbf 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002116:	4602      	mov	r2, r0
 8002118:	4b5b      	ldr	r3, [pc, #364]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	495a      	ldr	r1, [pc, #360]	; (800228c <HAL_RCC_OscConfig+0x29c>)
 8002124:	5ccb      	ldrb	r3, [r1, r3]
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_RCC_OscConfig+0x2a0>)
 8002130:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002132:	4b58      	ldr	r3, [pc, #352]	; (8002294 <HAL_RCC_OscConfig+0x2a4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f008 fe50 	bl	800addc <HAL_InitTick>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d052      	beq.n	80021ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	e372      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d032      	beq.n	80021b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002152:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a4c      	ldr	r2, [pc, #304]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800215e:	f7fe fd55 	bl	8000c0c <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002166:	f7fe fd51 	bl	8000c0c <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e35b      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002178:	4b43      	ldr	r3, [pc, #268]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800218a:	f043 0308 	orr.w	r3, r3, #8
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	493a      	ldr	r1, [pc, #232]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	4935      	ldr	r1, [pc, #212]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
 80021b6:	e01a      	b.n	80021ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021b8:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a32      	ldr	r2, [pc, #200]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c4:	f7fe fd22 	bl	8000c0c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021cc:	f7fe fd1e 	bl	8000c0c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e328      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1dc>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d073      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x21c>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d10e      	bne.n	8002224 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d10b      	bne.n	8002224 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d063      	beq.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d15f      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e305      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d106      	bne.n	800223c <HAL_RCC_OscConfig+0x24c>
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0x288>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x270>
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0x288>
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a08      	ldr	r2, [pc, #32]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_RCC_OscConfig+0x298>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fcc4 	bl	8000c0c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002286:	e010      	b.n	80022aa <HAL_RCC_OscConfig+0x2ba>
 8002288:	40021000 	.word	0x40021000
 800228c:	0800c840 	.word	0x0800c840
 8002290:	20000624 	.word	0x20000624
 8002294:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe fcb8 	bl	8000c0c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e2c2      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022aa:	4baf      	ldr	r3, [pc, #700]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x2a8>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fca8 	bl	8000c0c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe fca4 	bl	8000c0c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e2ae      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d2:	4ba5      	ldr	r3, [pc, #660]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2d0>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d060      	beq.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_OscConfig+0x310>
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d119      	bne.n	800232e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d116      	bne.n	800232e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002300:	4b99      	ldr	r3, [pc, #612]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_OscConfig+0x328>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e28b      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b93      	ldr	r3, [pc, #588]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	4990      	ldr	r1, [pc, #576]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232c:	e040      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d023      	beq.n	800237e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002336:	4b8c      	ldr	r3, [pc, #560]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a8b      	ldr	r2, [pc, #556]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe fc63 	bl	8000c0c <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234a:	f7fe fc5f 	bl	8000c0c <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e269      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	4b82      	ldr	r3, [pc, #520]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	497c      	ldr	r1, [pc, #496]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e018      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237e:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a79      	ldr	r2, [pc, #484]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe fc3f 	bl	8000c0c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7fe fc3b 	bl	8000c0c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e245      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a4:	4b70      	ldr	r3, [pc, #448]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03c      	beq.n	8002436 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01c      	beq.n	80023fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c4:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ca:	4a67      	ldr	r2, [pc, #412]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fc1a 	bl	8000c0c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fc16 	bl	8000c0c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e220      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ee:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ef      	beq.n	80023dc <HAL_RCC_OscConfig+0x3ec>
 80023fc:	e01b      	b.n	8002436 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7fe fbfd 	bl	8000c0c <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002416:	f7fe fbf9 	bl	8000c0c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e203      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002428:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80a6 	beq.w	8002590 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002448:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	4b44      	ldr	r3, [pc, #272]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4a43      	ldr	r2, [pc, #268]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	; 0x58
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246c:	2301      	movs	r3, #1
 800246e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_RCC_OscConfig+0x57c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d118      	bne.n	80024ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x57c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_RCC_OscConfig+0x57c>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002486:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002488:	f7fe fbc0 	bl	8000c0c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002490:	f7fe fbbc 	bl	8000c0c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1c6      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a2:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_RCC_OscConfig+0x57c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d108      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4d8>
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	4a2a      	ldr	r2, [pc, #168]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c6:	e024      	b.n	8002512 <HAL_RCC_OscConfig+0x522>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d110      	bne.n	80024f2 <HAL_RCC_OscConfig+0x502>
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	4a24      	ldr	r2, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f0:	e00f      	b.n	8002512 <HAL_RCC_OscConfig+0x522>
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe fb77 	bl	8000c0c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe fb73 	bl	8000c0c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e17b      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_OscConfig+0x578>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ed      	beq.n	8002522 <HAL_RCC_OscConfig+0x532>
 8002546:	e01a      	b.n	800257e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fb60 	bl	8000c0c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800254e:	e00f      	b.n	8002570 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe fb5c 	bl	8000c0c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d906      	bls.n	8002570 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e164      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	4ba8      	ldr	r3, [pc, #672]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e8      	bne.n	8002550 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4ba3      	ldr	r3, [pc, #652]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	4aa2      	ldr	r2, [pc, #648]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d03c      	beq.n	8002616 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01c      	beq.n	80025de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025a4:	4b9b      	ldr	r3, [pc, #620]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025aa:	4a9a      	ldr	r2, [pc, #616]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fb2a 	bl	8000c0c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025bc:	f7fe fb26 	bl	8000c0c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e130      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ce:	4b91      	ldr	r3, [pc, #580]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ef      	beq.n	80025bc <HAL_RCC_OscConfig+0x5cc>
 80025dc:	e01b      	b.n	8002616 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025de:	4b8d      	ldr	r3, [pc, #564]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e4:	4a8b      	ldr	r2, [pc, #556]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7fe fb0d 	bl	8000c0c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f6:	f7fe fb09 	bl	8000c0c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e113      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002608:	4b82      	ldr	r3, [pc, #520]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800260a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8107 	beq.w	800282e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	2b02      	cmp	r3, #2
 8002626:	f040 80cb 	bne.w	80027c0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800262a:	4b7a      	ldr	r3, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0203 	and.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	429a      	cmp	r2, r3
 800263c:	d12c      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	3b01      	subs	r3, #1
 800264a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d123      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d11b      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d113      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	3b01      	subs	r3, #1
 800267e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d109      	bne.n	8002698 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	3b01      	subs	r3, #1
 8002692:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d06d      	beq.n	8002774 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d068      	beq.n	8002770 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026aa:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0ba      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a55      	ldr	r2, [pc, #340]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026c6:	f7fe faa1 	bl	8000c0c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fa9d 	bl	8000c0c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0a7      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e0:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ec:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_RCC_OscConfig+0x828>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026fc:	3a01      	subs	r2, #1
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	4311      	orrs	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002706:	0212      	lsls	r2, r2, #8
 8002708:	4311      	orrs	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800270e:	0852      	lsrs	r2, r2, #1
 8002710:	3a01      	subs	r2, #1
 8002712:	0552      	lsls	r2, r2, #21
 8002714:	4311      	orrs	r1, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800271a:	0852      	lsrs	r2, r2, #1
 800271c:	3a01      	subs	r2, #1
 800271e:	0652      	lsls	r2, r2, #25
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002726:	06d2      	lsls	r2, r2, #27
 8002728:	430a      	orrs	r2, r1
 800272a:	493a      	ldr	r1, [pc, #232]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800272c:	4313      	orrs	r3, r2
 800272e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002730:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a37      	ldr	r2, [pc, #220]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002748:	f7fe fa60 	bl	8000c0c <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fa5c 	bl	8000c0c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e066      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800276e:	e05e      	b.n	800282e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e05d      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d156      	bne.n	800282e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002798:	f7fe fa38 	bl	8000c0c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fa34 	bl	8000c0c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e03e      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x7b0>
 80027be:	e036      	b.n	800282e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d031      	beq.n	800282a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027e4:	f023 0303 	bic.w	r3, r3, #3
 80027e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_OscConfig+0x824>)
 80027f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fa07 	bl	8000c0c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	e00c      	b.n	800281c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7fe fa03 	bl	8000c0c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d905      	bls.n	800281c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e00d      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
 8002814:	40021000 	.word	0x40021000
 8002818:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_OscConfig+0x848>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ec      	bne.n	8002802 <HAL_RCC_OscConfig+0x812>
 8002828:	e001      	b.n	800282e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e10f      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 020f 	bic.w	r2, r3, #15
 800286a:	4984      	ldr	r1, [pc, #528]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0f7      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8089 	beq.w	80029a4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d133      	bne.n	8002902 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	4b79      	ldr	r3, [pc, #484]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0e4      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028aa:	f000 fa43 	bl	8002d34 <RCC_GetSysClockFreqFromPLLSource>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a74      	ldr	r2, [pc, #464]	; (8002a84 <HAL_RCC_ClockConfig+0x248>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d955      	bls.n	8002962 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028b6:	4b72      	ldr	r3, [pc, #456]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028c2:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ca:	4a6d      	ldr	r2, [pc, #436]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e044      	b.n	8002962 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d03e      	beq.n	8002962 <HAL_RCC_ClockConfig+0x126>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d13a      	bne.n	8002962 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f4:	4a62      	ldr	r2, [pc, #392]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80028f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e02f      	b.n	8002962 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d115      	bne.n	8002942 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0ac      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002922:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0a0      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002932:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e098      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002942:	f000 f8a7 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002946:	4603      	mov	r3, r0
 8002948:	4a4e      	ldr	r2, [pc, #312]	; (8002a84 <HAL_RCC_ClockConfig+0x248>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d909      	bls.n	8002962 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002956:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4944      	ldr	r1, [pc, #272]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe f94a 	bl	8000c0c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fe f946 	bl	8000c0c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e070      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4930      	ldr	r1, [pc, #192]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b80      	cmp	r3, #128	; 0x80
 80029c8:	d105      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4a2c      	ldr	r2, [pc, #176]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 80029d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d210      	bcs.n	8002a06 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 020f 	bic.w	r2, r3, #15
 80029ec:	4923      	ldr	r1, [pc, #140]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCC_ClockConfig+0x240>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e036      	b.n	8002a74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	4918      	ldr	r1, [pc, #96]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4910      	ldr	r1, [pc, #64]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a44:	f000 f826 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_RCC_ClockConfig+0x244>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	490c      	ldr	r1, [pc, #48]	; (8002a88 <HAL_RCC_ClockConfig+0x24c>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x250>)
 8002a62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x254>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f008 f9b7 	bl	800addc <HAL_InitTick>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	04c4b400 	.word	0x04c4b400
 8002a88:	0800c840 	.word	0x0800c840
 8002a8c:	20000624 	.word	0x20000624
 8002a90:	20000000 	.word	0x20000000

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa2:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d121      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d11e      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ac8:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ad4:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e005      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d102      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e004      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d134      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d003      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0xac>
 8002b38:	e005      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b3c:	617b      	str	r3, [r7, #20]
      break;
 8002b3e:	e005      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b42:	617b      	str	r3, [r7, #20]
      break;
 8002b44:	e002      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	617b      	str	r3, [r7, #20]
      break;
 8002b4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3301      	adds	r3, #1
 8002b58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	fb02 f203 	mul.w	r2, r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	0e5b      	lsrs	r3, r3, #25
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	0800c858 	.word	0x0800c858
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000624 	.word	0x20000624

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4904      	ldr	r1, [pc, #16]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	0800c850 	.word	0x0800c850

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bf4:	f7ff ffda 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0adb      	lsrs	r3, r3, #11
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	0800c850 	.word	0x0800c850

08002c1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	220f      	movs	r2, #15
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_RCC_GetClockConfig+0x60>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 020f 	and.w	r2, r3, #15
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40022000 	.word	0x40022000

08002c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c98:	f7ff f8e6 	bl	8001e68 <HAL_PWREx_GetVoltageRange>
 8002c9c:	6178      	str	r0, [r7, #20]
 8002c9e:	e014      	b.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cb8:	f7ff f8d6 	bl	8001e68 <HAL_PWREx_GetVoltageRange>
 8002cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d10b      	bne.n	8002cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d913      	bls.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2ba0      	cmp	r3, #160	; 0xa0
 8002cdc:	d902      	bls.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cde:	2302      	movs	r3, #2
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e00d      	b.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	e00a      	b.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b7f      	cmp	r3, #127	; 0x7f
 8002cee:	d902      	bls.n	8002cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	e004      	b.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b70      	cmp	r3, #112	; 0x70
 8002cfa:	d101      	bne.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 020f 	bic.w	r2, r3, #15
 8002d08:	4909      	ldr	r1, [pc, #36]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40022000 	.word	0x40022000

08002d34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d118      	bne.n	8002d7c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d107      	bne.n	8002d66 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d56:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e005      	b.n	8002d72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d66:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d72:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d003      	beq.n	8002d94 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d003      	beq.n	8002d9a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002d92:	e005      	b.n	8002da0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d96:	613b      	str	r3, [r7, #16]
    break;
 8002d98:	e005      	b.n	8002da6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d9c:	613b      	str	r3, [r7, #16]
    break;
 8002d9e:	e002      	b.n	8002da6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	613b      	str	r3, [r7, #16]
    break;
 8002da4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	3301      	adds	r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	fb02 f203 	mul.w	r2, r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0e5b      	lsrs	r3, r3, #25
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002de6:	683b      	ldr	r3, [r7, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40021000 	.word	0x40021000
 8002df8:	0800c858 	.word	0x0800c858
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e10:	2300      	movs	r3, #0
 8002e12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d040      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d02a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d825      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e2c:	2b60      	cmp	r3, #96	; 0x60
 8002e2e:	d026      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e30:	2b60      	cmp	r3, #96	; 0x60
 8002e32:	d821      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d006      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d81d      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d010      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002e44:	e018      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4a88      	ldr	r2, [pc, #544]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e52:	e015      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fb02 	bl	8003464 <RCCEx_PLLSAI1_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e64:	e00c      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3320      	adds	r3, #32
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fbed 	bl	800364c <RCCEx_PLLSAI2_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e76:	e003      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	74fb      	strb	r3, [r7, #19]
      break;
 8002e7c:	e000      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e86:	4b79      	ldr	r3, [pc, #484]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e8c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e94:	4975      	ldr	r1, [pc, #468]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e9c:	e001      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ea0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d047      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb6:	d030      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d82a      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec2:	d02a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec8:	d824      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed4:	d81e      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ede:	d010      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ee0:	e018      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee2:	4b62      	ldr	r3, [pc, #392]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a61      	ldr	r2, [pc, #388]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eee:	e015      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fab4 	bl	8003464 <RCCEx_PLLSAI1_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f00:	e00c      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3320      	adds	r3, #32
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fb9f 	bl	800364c <RCCEx_PLLSAI2_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f12:	e003      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	74fb      	strb	r3, [r7, #19]
      break;
 8002f18:	e000      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f22:	4b52      	ldr	r3, [pc, #328]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	494e      	ldr	r1, [pc, #312]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f38:	e001      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 809f 	beq.w	800308a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f50:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	4a40      	ldr	r2, [pc, #256]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6593      	str	r3, [r2, #88]	; 0x58
 8002f72:	4b3e      	ldr	r3, [pc, #248]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f8e:	f7fd fe3d 	bl	8000c0c <HAL_GetTick>
 8002f92:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f94:	e009      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f96:	f7fd fe39 	bl	8000c0c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d902      	bls.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	74fb      	strb	r3, [r7, #19]
        break;
 8002fa8:	e005      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ef      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d15b      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01f      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d019      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003006:	4a19      	ldr	r2, [pc, #100]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d016      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fd fdf8 	bl	8000c0c <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301e:	e00b      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fd fdf4 	bl	8000c0c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d902      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	74fb      	strb	r3, [r7, #19]
            break;
 8003036:	e006      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ec      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10c      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003064:	e008      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	74bb      	strb	r3, [r7, #18]
 800306a:	e005      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003078:	7c7b      	ldrb	r3, [r7, #17]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d105      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4ba0      	ldr	r3, [pc, #640]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	4a9f      	ldr	r2, [pc, #636]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003088:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003096:	4b9a      	ldr	r3, [pc, #616]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f023 0203 	bic.w	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	4996      	ldr	r1, [pc, #600]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030b8:	4b91      	ldr	r3, [pc, #580]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f023 020c 	bic.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	498e      	ldr	r1, [pc, #568]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030da:	4b89      	ldr	r3, [pc, #548]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	4985      	ldr	r1, [pc, #532]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030fc:	4b80      	ldr	r3, [pc, #512]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310a:	497d      	ldr	r1, [pc, #500]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800311e:	4b78      	ldr	r3, [pc, #480]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312c:	4974      	ldr	r1, [pc, #464]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003140:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314e:	496c      	ldr	r1, [pc, #432]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003162:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003170:	4963      	ldr	r1, [pc, #396]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003184:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003192:	495b      	ldr	r1, [pc, #364]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a6:	4b56      	ldr	r3, [pc, #344]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	4952      	ldr	r1, [pc, #328]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031c8:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	494a      	ldr	r1, [pc, #296]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ea:	4b45      	ldr	r3, [pc, #276]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	4941      	ldr	r1, [pc, #260]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800320c:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	4939      	ldr	r1, [pc, #228]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d028      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800322e:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	4930      	ldr	r1, [pc, #192]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800324c:	d106      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800324e:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003258:	60d3      	str	r3, [r2, #12]
 800325a:	e011      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003264:	d10c      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3304      	adds	r3, #4
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f8f9 	bl	8003464 <RCCEx_PLLSAI1_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d04d      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003294:	d108      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032a6:	e012      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ae:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c6:	490e      	ldr	r1, [pc, #56]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d6:	d106      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032e2:	60d3      	str	r3, [r2, #12]
 80032e4:	e020      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ee:	d109      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a02      	ldr	r2, [pc, #8]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fa:	60d3      	str	r3, [r2, #12]
 80032fc:	e014      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800330c:	d10c      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f8a5 	bl	8003464 <RCCEx_PLLSAI1_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d028      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003334:	4b4a      	ldr	r3, [pc, #296]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003342:	4947      	ldr	r1, [pc, #284]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800334e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003352:	d106      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003354:	4b42      	ldr	r3, [pc, #264]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a41      	ldr	r2, [pc, #260]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335e:	60d3      	str	r3, [r2, #12]
 8003360:	e011      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800336a:	d10c      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f876 	bl	8003464 <RCCEx_PLLSAI1_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01e      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003392:	4b33      	ldr	r3, [pc, #204]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a2:	492f      	ldr	r1, [pc, #188]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2102      	movs	r1, #2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 f851 	bl	8003464 <RCCEx_PLLSAI1_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033dc:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e2:	f023 0204 	bic.w	r2, r3, #4
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ec:	491c      	ldr	r1, [pc, #112]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003400:	4b17      	ldr	r3, [pc, #92]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003406:	f023 0218 	bic.w	r2, r3, #24
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	4913      	ldr	r1, [pc, #76]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d017      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003434:	490a      	ldr	r1, [pc, #40]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003446:	d105      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003452:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003454:	7cbb      	ldrb	r3, [r7, #18]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000

08003464 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003472:	4b72      	ldr	r3, [pc, #456]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00e      	beq.n	800349c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800347e:	4b6f      	ldr	r3, [pc, #444]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0203 	and.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d103      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
       ||
 8003492:	2b00      	cmp	r3, #0
 8003494:	d142      	bne.n	800351c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	e03f      	b.n	800351c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d018      	beq.n	80034d6 <RCCEx_PLLSAI1_Config+0x72>
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d825      	bhi.n	80034f4 <RCCEx_PLLSAI1_Config+0x90>
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d002      	beq.n	80034b2 <RCCEx_PLLSAI1_Config+0x4e>
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d009      	beq.n	80034c4 <RCCEx_PLLSAI1_Config+0x60>
 80034b0:	e020      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034b2:	4b62      	ldr	r3, [pc, #392]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11d      	bne.n	80034fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c2:	e01a      	b.n	80034fa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c4:	4b5d      	ldr	r3, [pc, #372]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d116      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d4:	e013      	b.n	80034fe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034d6:	4b59      	ldr	r3, [pc, #356]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034e2:	4b56      	ldr	r3, [pc, #344]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034f2:	e006      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e004      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80034fa:	bf00      	nop
 80034fc:	e002      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003502:	bf00      	nop
    }

    if(status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800350a:	4b4c      	ldr	r3, [pc, #304]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f023 0203 	bic.w	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4949      	ldr	r1, [pc, #292]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003518:	4313      	orrs	r3, r2
 800351a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 8086 	bne.w	8003630 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003524:	4b45      	ldr	r3, [pc, #276]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a44      	ldr	r2, [pc, #272]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 800352a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800352e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003530:	f7fd fb6c 	bl	8000c0c <HAL_GetTick>
 8003534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003536:	e009      	b.n	800354c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003538:	f7fd fb68 	bl	8000c0c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d902      	bls.n	800354c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	73fb      	strb	r3, [r7, #15]
        break;
 800354a:	e005      	b.n	8003558 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ef      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d168      	bne.n	8003630 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d113      	bne.n	800358c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003564:	4b35      	ldr	r3, [pc, #212]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	4b35      	ldr	r3, [pc, #212]	; (8003640 <RCCEx_PLLSAI1_Config+0x1dc>)
 800356a:	4013      	ands	r3, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6892      	ldr	r2, [r2, #8]
 8003570:	0211      	lsls	r1, r2, #8
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68d2      	ldr	r2, [r2, #12]
 8003576:	06d2      	lsls	r2, r2, #27
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6852      	ldr	r2, [r2, #4]
 800357e:	3a01      	subs	r2, #1
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	430a      	orrs	r2, r1
 8003584:	492d      	ldr	r1, [pc, #180]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003586:	4313      	orrs	r3, r2
 8003588:	610b      	str	r3, [r1, #16]
 800358a:	e02d      	b.n	80035e8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d115      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6892      	ldr	r2, [r2, #8]
 800359e:	0211      	lsls	r1, r2, #8
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6912      	ldr	r2, [r2, #16]
 80035a4:	0852      	lsrs	r2, r2, #1
 80035a6:	3a01      	subs	r2, #1
 80035a8:	0552      	lsls	r2, r2, #21
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6852      	ldr	r2, [r2, #4]
 80035b0:	3a01      	subs	r2, #1
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	430a      	orrs	r2, r1
 80035b6:	4921      	ldr	r1, [pc, #132]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	610b      	str	r3, [r1, #16]
 80035bc:	e014      	b.n	80035e8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	4b21      	ldr	r3, [pc, #132]	; (8003648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6892      	ldr	r2, [r2, #8]
 80035ca:	0211      	lsls	r1, r2, #8
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6952      	ldr	r2, [r2, #20]
 80035d0:	0852      	lsrs	r2, r2, #1
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0652      	lsls	r2, r2, #25
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6852      	ldr	r2, [r2, #4]
 80035dc:	3a01      	subs	r2, #1
 80035de:	0112      	lsls	r2, r2, #4
 80035e0:	430a      	orrs	r2, r1
 80035e2:	4916      	ldr	r1, [pc, #88]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a13      	ldr	r2, [pc, #76]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fd fb0a 	bl	8000c0c <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035fa:	e009      	b.n	8003610 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035fc:	f7fd fb06 	bl	8000c0c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d902      	bls.n	8003610 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	73fb      	strb	r3, [r7, #15]
          break;
 800360e:	e005      	b.n	800361c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ef      	beq.n	80035fc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	4904      	ldr	r1, [pc, #16]	; (800363c <RCCEx_PLLSAI1_Config+0x1d8>)
 800362c:	4313      	orrs	r3, r2
 800362e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	07ff800f 	.word	0x07ff800f
 8003644:	ff9f800f 	.word	0xff9f800f
 8003648:	f9ff800f 	.word	0xf9ff800f

0800364c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800365a:	4b72      	ldr	r3, [pc, #456]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00e      	beq.n	8003684 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003666:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0203 	and.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d103      	bne.n	800367e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
       ||
 800367a:	2b00      	cmp	r3, #0
 800367c:	d142      	bne.n	8003704 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e03f      	b.n	8003704 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d018      	beq.n	80036be <RCCEx_PLLSAI2_Config+0x72>
 800368c:	2b03      	cmp	r3, #3
 800368e:	d825      	bhi.n	80036dc <RCCEx_PLLSAI2_Config+0x90>
 8003690:	2b01      	cmp	r3, #1
 8003692:	d002      	beq.n	800369a <RCCEx_PLLSAI2_Config+0x4e>
 8003694:	2b02      	cmp	r3, #2
 8003696:	d009      	beq.n	80036ac <RCCEx_PLLSAI2_Config+0x60>
 8003698:	e020      	b.n	80036dc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800369a:	4b62      	ldr	r3, [pc, #392]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11d      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036aa:	e01a      	b.n	80036e2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036ac:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e013      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036be:	4b59      	ldr	r3, [pc, #356]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036ca:	4b56      	ldr	r3, [pc, #344]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036da:	e006      	b.n	80036ea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e004      	b.n	80036ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036e2:	bf00      	nop
 80036e4:	e002      	b.n	80036ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80036f2:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4949      	ldr	r1, [pc, #292]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003700:	4313      	orrs	r3, r2
 8003702:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 8086 	bne.w	8003818 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800370c:	4b45      	ldr	r3, [pc, #276]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a44      	ldr	r2, [pc, #272]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003718:	f7fd fa78 	bl	8000c0c <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800371e:	e009      	b.n	8003734 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003720:	f7fd fa74 	bl	8000c0c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	73fb      	strb	r3, [r7, #15]
        break;
 8003732:	e005      	b.n	8003740 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003734:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ef      	bne.n	8003720 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d168      	bne.n	8003818 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d113      	bne.n	8003774 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800374c:	4b35      	ldr	r3, [pc, #212]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6892      	ldr	r2, [r2, #8]
 8003758:	0211      	lsls	r1, r2, #8
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68d2      	ldr	r2, [r2, #12]
 800375e:	06d2      	lsls	r2, r2, #27
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6852      	ldr	r2, [r2, #4]
 8003766:	3a01      	subs	r2, #1
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	430a      	orrs	r2, r1
 800376c:	492d      	ldr	r1, [pc, #180]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 800376e:	4313      	orrs	r3, r2
 8003770:	614b      	str	r3, [r1, #20]
 8003772:	e02d      	b.n	80037d0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d115      	bne.n	80037a6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800377a:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	4b2b      	ldr	r3, [pc, #172]	; (800382c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003780:	4013      	ands	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	0211      	lsls	r1, r2, #8
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6912      	ldr	r2, [r2, #16]
 800378c:	0852      	lsrs	r2, r2, #1
 800378e:	3a01      	subs	r2, #1
 8003790:	0552      	lsls	r2, r2, #21
 8003792:	4311      	orrs	r1, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6852      	ldr	r2, [r2, #4]
 8003798:	3a01      	subs	r2, #1
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	430a      	orrs	r2, r1
 800379e:	4921      	ldr	r1, [pc, #132]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	614b      	str	r3, [r1, #20]
 80037a4:	e014      	b.n	80037d0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a6:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <RCCEx_PLLSAI2_Config+0x1e4>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6892      	ldr	r2, [r2, #8]
 80037b2:	0211      	lsls	r1, r2, #8
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6952      	ldr	r2, [r2, #20]
 80037b8:	0852      	lsrs	r2, r2, #1
 80037ba:	3a01      	subs	r2, #1
 80037bc:	0652      	lsls	r2, r2, #25
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6852      	ldr	r2, [r2, #4]
 80037c4:	3a01      	subs	r2, #1
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	430a      	orrs	r2, r1
 80037ca:	4916      	ldr	r1, [pc, #88]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fd fa16 	bl	8000c0c <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037e2:	e009      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037e4:	f7fd fa12 	bl	8000c0c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d902      	bls.n	80037f8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	73fb      	strb	r3, [r7, #15]
          break;
 80037f6:	e005      	b.n	8003804 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ef      	beq.n	80037e4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4904      	ldr	r1, [pc, #16]	; (8003824 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	07ff800f 	.word	0x07ff800f
 800382c:	ff9f800f 	.word	0xff9f800f
 8003830:	f9ff800f 	.word	0xf9ff800f

08003834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e049      	b.n	80038da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f007 f9a8 	bl	800abb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f000 fdde 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e047      	b.n	800398c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a23      	ldr	r2, [pc, #140]	; (8003998 <HAL_TIM_Base_Start+0xb4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01d      	beq.n	800394a <HAL_TIM_Base_Start+0x66>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d018      	beq.n	800394a <HAL_TIM_Base_Start+0x66>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <HAL_TIM_Base_Start+0xb8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_TIM_Base_Start+0x66>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <HAL_TIM_Base_Start+0xbc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00e      	beq.n	800394a <HAL_TIM_Base_Start+0x66>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <HAL_TIM_Base_Start+0xc0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_TIM_Base_Start+0x66>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_TIM_Base_Start+0xc4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_TIM_Base_Start+0x66>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_TIM_Base_Start+0xc8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d115      	bne.n	8003976 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_TIM_Base_Start+0xcc>)
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d015      	beq.n	8003988 <HAL_TIM_Base_Start+0xa4>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003962:	d011      	beq.n	8003988 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	e008      	b.n	8003988 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e000      	b.n	800398a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40013400 	.word	0x40013400
 80039ac:	40014000 	.word	0x40014000
 80039b0:	00010007 	.word	0x00010007

080039b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d001      	beq.n	80039cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e04f      	b.n	8003a6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a23      	ldr	r2, [pc, #140]	; (8003a78 <HAL_TIM_Base_Start_IT+0xc4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f6:	d018      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HAL_TIM_Base_Start_IT+0xc8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x76>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_TIM_Base_Start_IT+0xd8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d115      	bne.n	8003a56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b06      	cmp	r3, #6
 8003a3a:	d015      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0xb4>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a42:	d011      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a54:	e008      	b.n	8003a68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e000      	b.n	8003a6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40013400 	.word	0x40013400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	00010007 	.word	0x00010007

08003a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e049      	b.n	8003b3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f841 	bl	8003b42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 fcae 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d109      	bne.n	8003b7c <HAL_TIM_PWM_Start+0x24>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	bf14      	ite	ne
 8003b74:	2301      	movne	r3, #1
 8003b76:	2300      	moveq	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e03c      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x9e>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d109      	bne.n	8003b96 <HAL_TIM_PWM_Start+0x3e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	e02f      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x9e>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d109      	bne.n	8003bb0 <HAL_TIM_PWM_Start+0x58>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e022      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x9e>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d109      	bne.n	8003bca <HAL_TIM_PWM_Start+0x72>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	e015      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x9e>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d109      	bne.n	8003be4 <HAL_TIM_PWM_Start+0x8c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	bf14      	ite	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	2300      	moveq	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e008      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x9e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	bf14      	ite	ne
 8003bf0:	2301      	movne	r3, #1
 8003bf2:	2300      	moveq	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e09c      	b.n	8003d38 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_PWM_Start+0xb6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0c:	e023      	b.n	8003c56 <HAL_TIM_PWM_Start+0xfe>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d104      	bne.n	8003c1e <HAL_TIM_PWM_Start+0xc6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c1c:	e01b      	b.n	8003c56 <HAL_TIM_PWM_Start+0xfe>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d104      	bne.n	8003c2e <HAL_TIM_PWM_Start+0xd6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c2c:	e013      	b.n	8003c56 <HAL_TIM_PWM_Start+0xfe>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d104      	bne.n	8003c3e <HAL_TIM_PWM_Start+0xe6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c3c:	e00b      	b.n	8003c56 <HAL_TIM_PWM_Start+0xfe>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_PWM_Start+0xf6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c4c:	e003      	b.n	8003c56 <HAL_TIM_PWM_Start+0xfe>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 f885 	bl	8004d6e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a35      	ldr	r2, [pc, #212]	; (8003d40 <HAL_TIM_PWM_Start+0x1e8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x13e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a34      	ldr	r2, [pc, #208]	; (8003d44 <HAL_TIM_PWM_Start+0x1ec>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x13e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a32      	ldr	r2, [pc, #200]	; (8003d48 <HAL_TIM_PWM_Start+0x1f0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x13e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_TIM_PWM_Start+0x1f4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_TIM_PWM_Start+0x13e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a2f      	ldr	r2, [pc, #188]	; (8003d50 <HAL_TIM_PWM_Start+0x1f8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x142>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_TIM_PWM_Start+0x144>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <HAL_TIM_PWM_Start+0x1e8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x19e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d018      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x19e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <HAL_TIM_PWM_Start+0x1fc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x19e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a21      	ldr	r2, [pc, #132]	; (8003d58 <HAL_TIM_PWM_Start+0x200>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x19e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <HAL_TIM_PWM_Start+0x204>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x19e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <HAL_TIM_PWM_Start+0x1ec>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIM_PWM_Start+0x19e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <HAL_TIM_PWM_Start+0x1f0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d115      	bne.n	8003d22 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_TIM_PWM_Start+0x208>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b06      	cmp	r3, #6
 8003d06:	d015      	beq.n	8003d34 <HAL_TIM_PWM_Start+0x1dc>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0e:	d011      	beq.n	8003d34 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d20:	e008      	b.n	8003d34 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e000      	b.n	8003d36 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40013400 	.word	0x40013400
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40014400 	.word	0x40014400
 8003d50:	40014800 	.word	0x40014800
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	00010007 	.word	0x00010007

08003d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0202 	mvn.w	r2, #2
 8003d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fb25 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fb17 	bl	80043e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fb28 	bl	800440a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0204 	mvn.w	r2, #4
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fafb 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 faed 	bl	80043e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fafe 	bl	800440a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d122      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d11b      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0208 	mvn.w	r2, #8
 8003e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fad1 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 8003e54:	e005      	b.n	8003e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fac3 	bl	80043e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fad4 	bl	800440a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d122      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d11b      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0210 	mvn.w	r2, #16
 8003e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2208      	movs	r2, #8
 8003e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 faa7 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fa99 	bl	80043e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 faaa 	bl	800440a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0201 	mvn.w	r2, #1
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f006 fd50 	bl	800a988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 ffe4 	bl	8004edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f22:	d10e      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d107      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 ffd7 	bl	8004ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d10e      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fa58 	bl	800441e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d10e      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0220 	mvn.w	r2, #32
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 ff97 	bl	8004ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0ff      	b.n	80041c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b14      	cmp	r3, #20
 8003fce:	f200 80f0 	bhi.w	80041b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003fd2:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	080041b3 	.word	0x080041b3
 8003fe0:	080041b3 	.word	0x080041b3
 8003fe4:	080041b3 	.word	0x080041b3
 8003fe8:	0800406d 	.word	0x0800406d
 8003fec:	080041b3 	.word	0x080041b3
 8003ff0:	080041b3 	.word	0x080041b3
 8003ff4:	080041b3 	.word	0x080041b3
 8003ff8:	080040af 	.word	0x080040af
 8003ffc:	080041b3 	.word	0x080041b3
 8004000:	080041b3 	.word	0x080041b3
 8004004:	080041b3 	.word	0x080041b3
 8004008:	080040ef 	.word	0x080040ef
 800400c:	080041b3 	.word	0x080041b3
 8004010:	080041b3 	.word	0x080041b3
 8004014:	080041b3 	.word	0x080041b3
 8004018:	08004131 	.word	0x08004131
 800401c:	080041b3 	.word	0x080041b3
 8004020:	080041b3 	.word	0x080041b3
 8004024:	080041b3 	.word	0x080041b3
 8004028:	08004171 	.word	0x08004171
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fa98 	bl	8004568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0208 	orr.w	r2, r2, #8
 8004046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0204 	bic.w	r2, r2, #4
 8004056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6999      	ldr	r1, [r3, #24]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	619a      	str	r2, [r3, #24]
      break;
 800406a:	e0a5      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fb08 	bl	8004688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6999      	ldr	r1, [r3, #24]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	021a      	lsls	r2, r3, #8
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	619a      	str	r2, [r3, #24]
      break;
 80040ac:	e084      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fb71 	bl	800479c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0208 	orr.w	r2, r2, #8
 80040c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0204 	bic.w	r2, r2, #4
 80040d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69d9      	ldr	r1, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	61da      	str	r2, [r3, #28]
      break;
 80040ec:	e064      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fbd9 	bl	80048ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69d9      	ldr	r1, [r3, #28]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	021a      	lsls	r2, r3, #8
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	61da      	str	r2, [r3, #28]
      break;
 800412e:	e043      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fc22 	bl	8004980 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0208 	orr.w	r2, r2, #8
 800414a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800416e:	e023      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fc66 	bl	8004a48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041b0:	e002      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      break;
 80041b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop

080041cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0b6      	b.n	8004356 <HAL_TIM_ConfigClockSource+0x18a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800420a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004224:	d03e      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0xd8>
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422a:	f200 8087 	bhi.w	800433c <HAL_TIM_ConfigClockSource+0x170>
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	f000 8086 	beq.w	8004342 <HAL_TIM_ConfigClockSource+0x176>
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423a:	d87f      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x170>
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d01a      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0xaa>
 8004240:	2b70      	cmp	r3, #112	; 0x70
 8004242:	d87b      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x170>
 8004244:	2b60      	cmp	r3, #96	; 0x60
 8004246:	d050      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x11e>
 8004248:	2b60      	cmp	r3, #96	; 0x60
 800424a:	d877      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x170>
 800424c:	2b50      	cmp	r3, #80	; 0x50
 800424e:	d03c      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0xfe>
 8004250:	2b50      	cmp	r3, #80	; 0x50
 8004252:	d873      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x170>
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d058      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x13e>
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d86f      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x170>
 800425c:	2b30      	cmp	r3, #48	; 0x30
 800425e:	d064      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x15e>
 8004260:	2b30      	cmp	r3, #48	; 0x30
 8004262:	d86b      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x170>
 8004264:	2b20      	cmp	r3, #32
 8004266:	d060      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x15e>
 8004268:	2b20      	cmp	r3, #32
 800426a:	d867      	bhi.n	800433c <HAL_TIM_ConfigClockSource+0x170>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d05c      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x15e>
 8004270:	2b10      	cmp	r3, #16
 8004272:	d05a      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x15e>
 8004274:	e062      	b.n	800433c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6899      	ldr	r1, [r3, #8]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f000 fd52 	bl	8004d2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	609a      	str	r2, [r3, #8]
      break;
 80042a2:	e04f      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6899      	ldr	r1, [r3, #8]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f000 fd3b 	bl	8004d2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c6:	609a      	str	r2, [r3, #8]
      break;
 80042c8:	e03c      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 fcaf 	bl	8004c3a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2150      	movs	r1, #80	; 0x50
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fd08 	bl	8004cf8 <TIM_ITRx_SetConfig>
      break;
 80042e8:	e02c      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f000 fcce 	bl	8004c98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2160      	movs	r1, #96	; 0x60
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fcf8 	bl	8004cf8 <TIM_ITRx_SetConfig>
      break;
 8004308:	e01c      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6859      	ldr	r1, [r3, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	461a      	mov	r2, r3
 8004318:	f000 fc8f 	bl	8004c3a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2140      	movs	r1, #64	; 0x40
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fce8 	bl	8004cf8 <TIM_ITRx_SetConfig>
      break;
 8004328:	e00c      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f000 fcdf 	bl	8004cf8 <TIM_ITRx_SetConfig>
      break;
 800433a:	e003      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      break;
 8004340:	e000      	b.n	8004344 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004372:	2302      	movs	r3, #2
 8004374:	e031      	b.n	80043da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004386:	6839      	ldr	r1, [r7, #0]
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fbc3 	bl	8004b14 <TIM_SlaveTimer_SetConfig>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e018      	b.n	80043da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a40      	ldr	r2, [pc, #256]	; (8004548 <TIM_Base_SetConfig+0x114>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d00f      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a3d      	ldr	r2, [pc, #244]	; (800454c <TIM_Base_SetConfig+0x118>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00b      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3c      	ldr	r2, [pc, #240]	; (8004550 <TIM_Base_SetConfig+0x11c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3b      	ldr	r2, [pc, #236]	; (8004554 <TIM_Base_SetConfig+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <TIM_Base_SetConfig+0x124>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2f      	ldr	r2, [pc, #188]	; (8004548 <TIM_Base_SetConfig+0x114>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01f      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d01b      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2c      	ldr	r2, [pc, #176]	; (800454c <TIM_Base_SetConfig+0x118>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d017      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <TIM_Base_SetConfig+0x11c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2a      	ldr	r2, [pc, #168]	; (8004554 <TIM_Base_SetConfig+0x120>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00f      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a29      	ldr	r2, [pc, #164]	; (8004558 <TIM_Base_SetConfig+0x124>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a28      	ldr	r2, [pc, #160]	; (800455c <TIM_Base_SetConfig+0x128>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a27      	ldr	r2, [pc, #156]	; (8004560 <TIM_Base_SetConfig+0x12c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a26      	ldr	r2, [pc, #152]	; (8004564 <TIM_Base_SetConfig+0x130>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a10      	ldr	r2, [pc, #64]	; (8004548 <TIM_Base_SetConfig+0x114>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00f      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <TIM_Base_SetConfig+0x124>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00b      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a11      	ldr	r2, [pc, #68]	; (800455c <TIM_Base_SetConfig+0x128>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a10      	ldr	r2, [pc, #64]	; (8004560 <TIM_Base_SetConfig+0x12c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <TIM_Base_SetConfig+0x130>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	615a      	str	r2, [r3, #20]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40013400 	.word	0x40013400
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800

08004568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 0302 	bic.w	r3, r3, #2
 80045b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a2c      	ldr	r2, [pc, #176]	; (8004674 <TIM_OC1_SetConfig+0x10c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00f      	beq.n	80045e8 <TIM_OC1_SetConfig+0x80>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a2b      	ldr	r2, [pc, #172]	; (8004678 <TIM_OC1_SetConfig+0x110>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00b      	beq.n	80045e8 <TIM_OC1_SetConfig+0x80>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a2a      	ldr	r2, [pc, #168]	; (800467c <TIM_OC1_SetConfig+0x114>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d007      	beq.n	80045e8 <TIM_OC1_SetConfig+0x80>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a29      	ldr	r2, [pc, #164]	; (8004680 <TIM_OC1_SetConfig+0x118>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_OC1_SetConfig+0x80>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a28      	ldr	r2, [pc, #160]	; (8004684 <TIM_OC1_SetConfig+0x11c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10c      	bne.n	8004602 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0308 	bic.w	r3, r3, #8
 80045ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <TIM_OC1_SetConfig+0x10c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00f      	beq.n	800462a <TIM_OC1_SetConfig+0xc2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <TIM_OC1_SetConfig+0x110>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00b      	beq.n	800462a <TIM_OC1_SetConfig+0xc2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <TIM_OC1_SetConfig+0x114>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <TIM_OC1_SetConfig+0xc2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <TIM_OC1_SetConfig+0x118>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_OC1_SetConfig+0xc2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a17      	ldr	r2, [pc, #92]	; (8004684 <TIM_OC1_SetConfig+0x11c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d111      	bne.n	800464e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0210 	bic.w	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0320 	bic.w	r3, r3, #32
 80046d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a28      	ldr	r2, [pc, #160]	; (8004788 <TIM_OC2_SetConfig+0x100>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_OC2_SetConfig+0x6c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a27      	ldr	r2, [pc, #156]	; (800478c <TIM_OC2_SetConfig+0x104>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10d      	bne.n	8004710 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <TIM_OC2_SetConfig+0x100>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00f      	beq.n	8004738 <TIM_OC2_SetConfig+0xb0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a1c      	ldr	r2, [pc, #112]	; (800478c <TIM_OC2_SetConfig+0x104>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00b      	beq.n	8004738 <TIM_OC2_SetConfig+0xb0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <TIM_OC2_SetConfig+0x108>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_OC2_SetConfig+0xb0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <TIM_OC2_SetConfig+0x10c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC2_SetConfig+0xb0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a19      	ldr	r2, [pc, #100]	; (8004798 <TIM_OC2_SetConfig+0x110>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d113      	bne.n	8004760 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800473e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40013400 	.word	0x40013400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a27      	ldr	r2, [pc, #156]	; (8004898 <TIM_OC3_SetConfig+0xfc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC3_SetConfig+0x6a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a26      	ldr	r2, [pc, #152]	; (800489c <TIM_OC3_SetConfig+0x100>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <TIM_OC3_SetConfig+0xfc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00f      	beq.n	800484a <TIM_OC3_SetConfig+0xae>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1b      	ldr	r2, [pc, #108]	; (800489c <TIM_OC3_SetConfig+0x100>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00b      	beq.n	800484a <TIM_OC3_SetConfig+0xae>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <TIM_OC3_SetConfig+0x104>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <TIM_OC3_SetConfig+0xae>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <TIM_OC3_SetConfig+0x108>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_OC3_SetConfig+0xae>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <TIM_OC3_SetConfig+0x10c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d113      	bne.n	8004872 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40013400 	.word	0x40013400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800

080048ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	031b      	lsls	r3, r3, #12
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a18      	ldr	r2, [pc, #96]	; (800496c <TIM_OC4_SetConfig+0xc0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00f      	beq.n	8004930 <TIM_OC4_SetConfig+0x84>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a17      	ldr	r2, [pc, #92]	; (8004970 <TIM_OC4_SetConfig+0xc4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_OC4_SetConfig+0x84>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a16      	ldr	r2, [pc, #88]	; (8004974 <TIM_OC4_SetConfig+0xc8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_OC4_SetConfig+0x84>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <TIM_OC4_SetConfig+0xcc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC4_SetConfig+0x84>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a14      	ldr	r2, [pc, #80]	; (800497c <TIM_OC4_SetConfig+0xd0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d109      	bne.n	8004944 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800

08004980 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a17      	ldr	r2, [pc, #92]	; (8004a34 <TIM_OC5_SetConfig+0xb4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_OC5_SetConfig+0x7a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a16      	ldr	r2, [pc, #88]	; (8004a38 <TIM_OC5_SetConfig+0xb8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_OC5_SetConfig+0x7a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <TIM_OC5_SetConfig+0xbc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_OC5_SetConfig+0x7a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <TIM_OC5_SetConfig+0xc0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_OC5_SetConfig+0x7a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <TIM_OC5_SetConfig+0xc4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d109      	bne.n	8004a0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	621a      	str	r2, [r3, #32]
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40013400 	.word	0x40013400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	051b      	lsls	r3, r3, #20
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <TIM_OC6_SetConfig+0xb8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_OC6_SetConfig+0x7c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_OC6_SetConfig+0xbc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_OC6_SetConfig+0x7c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <TIM_OC6_SetConfig+0xc0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_OC6_SetConfig+0x7c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <TIM_OC6_SetConfig+0xc4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC6_SetConfig+0x7c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <TIM_OC6_SetConfig+0xc8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d109      	bne.n	8004ad8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	029b      	lsls	r3, r3, #10
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800

08004b14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	f023 0307 	bic.w	r3, r3, #7
 8004b46:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b70      	cmp	r3, #112	; 0x70
 8004b60:	d01a      	beq.n	8004b98 <TIM_SlaveTimer_SetConfig+0x84>
 8004b62:	2b70      	cmp	r3, #112	; 0x70
 8004b64:	d860      	bhi.n	8004c28 <TIM_SlaveTimer_SetConfig+0x114>
 8004b66:	2b60      	cmp	r3, #96	; 0x60
 8004b68:	d054      	beq.n	8004c14 <TIM_SlaveTimer_SetConfig+0x100>
 8004b6a:	2b60      	cmp	r3, #96	; 0x60
 8004b6c:	d85c      	bhi.n	8004c28 <TIM_SlaveTimer_SetConfig+0x114>
 8004b6e:	2b50      	cmp	r3, #80	; 0x50
 8004b70:	d046      	beq.n	8004c00 <TIM_SlaveTimer_SetConfig+0xec>
 8004b72:	2b50      	cmp	r3, #80	; 0x50
 8004b74:	d858      	bhi.n	8004c28 <TIM_SlaveTimer_SetConfig+0x114>
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d019      	beq.n	8004bae <TIM_SlaveTimer_SetConfig+0x9a>
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d854      	bhi.n	8004c28 <TIM_SlaveTimer_SetConfig+0x114>
 8004b7e:	2b30      	cmp	r3, #48	; 0x30
 8004b80:	d055      	beq.n	8004c2e <TIM_SlaveTimer_SetConfig+0x11a>
 8004b82:	2b30      	cmp	r3, #48	; 0x30
 8004b84:	d850      	bhi.n	8004c28 <TIM_SlaveTimer_SetConfig+0x114>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d051      	beq.n	8004c2e <TIM_SlaveTimer_SetConfig+0x11a>
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d84c      	bhi.n	8004c28 <TIM_SlaveTimer_SetConfig+0x114>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d04d      	beq.n	8004c2e <TIM_SlaveTimer_SetConfig+0x11a>
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d04b      	beq.n	8004c2e <TIM_SlaveTimer_SetConfig+0x11a>
 8004b96:	e047      	b.n	8004c28 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68d9      	ldr	r1, [r3, #12]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f000 f8c1 	bl	8004d2e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004bac:	e040      	b.n	8004c30 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b05      	cmp	r3, #5
 8004bb4:	d101      	bne.n	8004bba <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e03b      	b.n	8004c32 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a1a      	ldr	r2, [r3, #32]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	621a      	str	r2, [r3, #32]
      break;
 8004bfe:	e017      	b.n	8004c30 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f000 f814 	bl	8004c3a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c12:	e00d      	b.n	8004c30 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	6899      	ldr	r1, [r3, #8]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	461a      	mov	r2, r3
 8004c22:	f000 f839 	bl	8004c98 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c26:	e003      	b.n	8004c30 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2c:	e000      	b.n	8004c30 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004c2e:	bf00      	nop
  }

  return status;
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b087      	sub	sp, #28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f023 0201 	bic.w	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 030a 	bic.w	r3, r3, #10
 8004c76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f023 0210 	bic.w	r2, r3, #16
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	031b      	lsls	r3, r3, #12
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	621a      	str	r2, [r3, #32]
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f043 0307 	orr.w	r3, r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	609a      	str	r2, [r3, #8]
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b087      	sub	sp, #28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	021a      	lsls	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	609a      	str	r2, [r3, #8]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2201      	movs	r2, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	401a      	ands	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	fa01 f303 	lsl.w	r3, r1, r3
 8004da6:	431a      	orrs	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e068      	b.n	8004ea2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a2e      	ldr	r2, [pc, #184]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d108      	bne.n	8004e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01d      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d018      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1a      	ldr	r2, [pc, #104]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00e      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d009      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d10c      	bne.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	40013400 	.word	0x40013400
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40014000 	.word	0x40014000

08004ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e042      	b.n	8004f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f005 fef1 	bl	800ad10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2224      	movs	r2, #36	; 0x24
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0201 	bic.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fc52 	bl	80057f0 <UART_SetConfig>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e022      	b.n	8004f9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 ff0e 	bl	8005d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 ff95 	bl	8005ec4 <UART_CheckIdleState>
 8004f9a:	4603      	mov	r3, r0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	f040 8084 	bne.w	80050c8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_UART_Transmit+0x28>
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e07c      	b.n	80050ca <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Transmit+0x3a>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e075      	b.n	80050ca <HAL_UART_Transmit+0x126>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2221      	movs	r2, #33	; 0x21
 8004ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff6:	f7fb fe09 	bl	8000c0c <HAL_GetTick>
 8004ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	88fa      	ldrh	r2, [r7, #6]
 8005000:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005014:	d108      	bne.n	8005028 <HAL_UART_Transmit+0x84>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	e003      	b.n	8005030 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800502c:	2300      	movs	r3, #0
 800502e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005038:	e02d      	b.n	8005096 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	2180      	movs	r1, #128	; 0x80
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 ff88 	bl	8005f5a <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e03a      	b.n	80050ca <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	881a      	ldrh	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005066:	b292      	uxth	r2, r2
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	3302      	adds	r3, #2
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	e008      	b.n	8005084 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b292      	uxth	r2, r2
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1cb      	bne.n	800503a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2140      	movs	r1, #64	; 0x40
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 ff54 	bl	8005f5a <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e006      	b.n	80050ca <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d142      	bne.n	8005172 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Receive_IT+0x24>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e03b      	b.n	8005174 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UART_Receive_IT+0x36>
 8005106:	2302      	movs	r3, #2
 8005108:	e034      	b.n	8005174 <HAL_UART_Receive_IT+0xa0>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a17      	ldr	r2, [pc, #92]	; (800517c <HAL_UART_Receive_IT+0xa8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01f      	beq.n	8005162 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d018      	beq.n	8005162 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	613b      	str	r3, [r7, #16]
   return(result);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	623b      	str	r3, [r7, #32]
 8005150:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	69f9      	ldr	r1, [r7, #28]
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	61bb      	str	r3, [r7, #24]
   return(result);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e6      	bne.n	8005130 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	461a      	mov	r2, r3
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 ffbf 	bl	80060ec <UART_Start_Receive_IT>
 800516e:	4603      	mov	r3, r0
 8005170:	e000      	b.n	8005174 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3728      	adds	r7, #40	; 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40008000 	.word	0x40008000

08005180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b0ba      	sub	sp, #232	; 0xe8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80051ae:	4013      	ands	r3, r2
 80051b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11b      	bne.n	80051f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d015      	beq.n	80051f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 82d6 	beq.w	8005796 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
      }
      return;
 80051f2:	e2d0      	b.n	8005796 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80051f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 811f 	beq.w	800543c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005202:	4b8b      	ldr	r3, [pc, #556]	; (8005430 <HAL_UART_IRQHandler+0x2b0>)
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800520a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800520e:	4b89      	ldr	r3, [pc, #548]	; (8005434 <HAL_UART_IRQHandler+0x2b4>)
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8112 	beq.w	800543c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d011      	beq.n	8005248 <HAL_UART_IRQHandler+0xc8>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2201      	movs	r2, #1
 8005236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523e:	f043 0201 	orr.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d011      	beq.n	8005278 <HAL_UART_IRQHandler+0xf8>
 8005254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2202      	movs	r2, #2
 8005266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526e:	f043 0204 	orr.w	r2, r3, #4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d011      	beq.n	80052a8 <HAL_UART_IRQHandler+0x128>
 8005284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2204      	movs	r2, #4
 8005296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d017      	beq.n	80052e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052c4:	4b5a      	ldr	r3, [pc, #360]	; (8005430 <HAL_UART_IRQHandler+0x2b0>)
 80052c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2208      	movs	r2, #8
 80052d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052da:	f043 0208 	orr.w	r2, r3, #8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <HAL_UART_IRQHandler+0x196>
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 823c 	beq.w	800579a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d013      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800535c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d005      	beq.n	800537a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800536e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005376:	2b00      	cmp	r3, #0
 8005378:	d04f      	beq.n	800541a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 ffe0 	bl	8006340 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d141      	bne.n	8005412 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1d9      	bne.n	800538e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d013      	beq.n	800540a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e6:	4a14      	ldr	r2, [pc, #80]	; (8005438 <HAL_UART_IRQHandler+0x2b8>)
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fc f9e1 	bl	80017b6 <HAL_DMA_Abort_IT>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d017      	beq.n	800542a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005404:	4610      	mov	r0, r2
 8005406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005408:	e00f      	b.n	800542a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9da 	bl	80057c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005410:	e00b      	b.n	800542a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9d6 	bl	80057c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	e007      	b.n	800542a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9d2 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005428:	e1b7      	b.n	800579a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542a:	bf00      	nop
    return;
 800542c:	e1b5      	b.n	800579a <HAL_UART_IRQHandler+0x61a>
 800542e:	bf00      	nop
 8005430:	10000001 	.word	0x10000001
 8005434:	04000120 	.word	0x04000120
 8005438:	0800640d 	.word	0x0800640d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005440:	2b01      	cmp	r3, #1
 8005442:	f040 814a 	bne.w	80056da <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8143 	beq.w	80056da <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 813c 	beq.w	80056da <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2210      	movs	r2, #16
 8005468:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	f040 80b5 	bne.w	80055e4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005486:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 8187 	beq.w	800579e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800549a:	429a      	cmp	r2, r3
 800549c:	f080 817f 	bcs.w	800579e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 8086 	bne.w	80055c8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1da      	bne.n	80054bc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3308      	adds	r3, #8
 800550c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3308      	adds	r3, #8
 8005526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800552a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800552e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005532:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800553c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e1      	bne.n	8005506 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3308      	adds	r3, #8
 8005548:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3308      	adds	r3, #8
 8005562:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005566:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005568:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800556c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e3      	bne.n	8005542 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005598:	f023 0310 	bic.w	r3, r3, #16
 800559c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e4      	bne.n	8005588 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fc f89b 	bl	80016fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f8fb 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055e2:	e0dc      	b.n	800579e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80ce 	beq.w	80057a2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005606:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80c9 	beq.w	80057a2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005632:	647b      	str	r3, [r7, #68]	; 0x44
 8005634:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e4      	bne.n	8005610 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	623b      	str	r3, [r7, #32]
   return(result);
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800566e:	633a      	str	r2, [r7, #48]	; 0x30
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e1      	bne.n	8005646 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0310 	bic.w	r3, r3, #16
 80056aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	69b9      	ldr	r1, [r7, #24]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	617b      	str	r3, [r7, #20]
   return(result);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e4      	bne.n	8005696 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f880 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056d8:	e063      	b.n	80057a2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00e      	beq.n	8005704 <HAL_UART_IRQHandler+0x584>
 80056e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 fb2b 	bl	8006d58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005702:	e051      	b.n	80057a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570c:	2b00      	cmp	r3, #0
 800570e:	d014      	beq.n	800573a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800571c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572c:	2b00      	cmp	r3, #0
 800572e:	d03a      	beq.n	80057a6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	4798      	blx	r3
    }
    return;
 8005738:	e035      	b.n	80057a6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <HAL_UART_IRQHandler+0x5da>
 8005746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fe70 	bl	8006438 <UART_EndTransmit_IT>
    return;
 8005758:	e026      	b.n	80057a8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <HAL_UART_IRQHandler+0x5fa>
 8005766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 fb04 	bl	8006d80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005778:	e016      	b.n	80057a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d010      	beq.n	80057a8 <HAL_UART_IRQHandler+0x628>
 8005786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578a:	2b00      	cmp	r3, #0
 800578c:	da0c      	bge.n	80057a8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 faec 	bl	8006d6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005794:	e008      	b.n	80057a8 <HAL_UART_IRQHandler+0x628>
      return;
 8005796:	bf00      	nop
 8005798:	e006      	b.n	80057a8 <HAL_UART_IRQHandler+0x628>
    return;
 800579a:	bf00      	nop
 800579c:	e004      	b.n	80057a8 <HAL_UART_IRQHandler+0x628>
      return;
 800579e:	bf00      	nop
 80057a0:	e002      	b.n	80057a8 <HAL_UART_IRQHandler+0x628>
      return;
 80057a2:	bf00      	nop
 80057a4:	e000      	b.n	80057a8 <HAL_UART_IRQHandler+0x628>
    return;
 80057a6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80057a8:	37e8      	adds	r7, #232	; 0xe8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop

080057b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f0:	b5b0      	push	{r4, r5, r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	4313      	orrs	r3, r2
 8005812:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4bb1      	ldr	r3, [pc, #708]	; (8005ae0 <UART_SetConfig+0x2f0>)
 800581c:	4013      	ands	r3, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	430b      	orrs	r3, r1
 8005826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4aa6      	ldr	r2, [pc, #664]	; (8005ae4 <UART_SetConfig+0x2f4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d004      	beq.n	8005858 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	4313      	orrs	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005862:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	69f9      	ldr	r1, [r7, #28]
 800586c:	430b      	orrs	r3, r1
 800586e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	f023 010f 	bic.w	r1, r3, #15
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a97      	ldr	r2, [pc, #604]	; (8005ae8 <UART_SetConfig+0x2f8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d120      	bne.n	80058d2 <UART_SetConfig+0xe2>
 8005890:	4b96      	ldr	r3, [pc, #600]	; (8005aec <UART_SetConfig+0x2fc>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b03      	cmp	r3, #3
 800589c:	d816      	bhi.n	80058cc <UART_SetConfig+0xdc>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0xb4>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058c1 	.word	0x080058c1
 80058ac:	080058bb 	.word	0x080058bb
 80058b0:	080058c7 	.word	0x080058c7
 80058b4:	2301      	movs	r3, #1
 80058b6:	76fb      	strb	r3, [r7, #27]
 80058b8:	e0e7      	b.n	8005a8a <UART_SetConfig+0x29a>
 80058ba:	2302      	movs	r3, #2
 80058bc:	76fb      	strb	r3, [r7, #27]
 80058be:	e0e4      	b.n	8005a8a <UART_SetConfig+0x29a>
 80058c0:	2304      	movs	r3, #4
 80058c2:	76fb      	strb	r3, [r7, #27]
 80058c4:	e0e1      	b.n	8005a8a <UART_SetConfig+0x29a>
 80058c6:	2308      	movs	r3, #8
 80058c8:	76fb      	strb	r3, [r7, #27]
 80058ca:	e0de      	b.n	8005a8a <UART_SetConfig+0x29a>
 80058cc:	2310      	movs	r3, #16
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e0db      	b.n	8005a8a <UART_SetConfig+0x29a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a86      	ldr	r2, [pc, #536]	; (8005af0 <UART_SetConfig+0x300>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d132      	bne.n	8005942 <UART_SetConfig+0x152>
 80058dc:	4b83      	ldr	r3, [pc, #524]	; (8005aec <UART_SetConfig+0x2fc>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b0c      	cmp	r3, #12
 80058e8:	d828      	bhi.n	800593c <UART_SetConfig+0x14c>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x100>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005925 	.word	0x08005925
 80058f4:	0800593d 	.word	0x0800593d
 80058f8:	0800593d 	.word	0x0800593d
 80058fc:	0800593d 	.word	0x0800593d
 8005900:	08005931 	.word	0x08005931
 8005904:	0800593d 	.word	0x0800593d
 8005908:	0800593d 	.word	0x0800593d
 800590c:	0800593d 	.word	0x0800593d
 8005910:	0800592b 	.word	0x0800592b
 8005914:	0800593d 	.word	0x0800593d
 8005918:	0800593d 	.word	0x0800593d
 800591c:	0800593d 	.word	0x0800593d
 8005920:	08005937 	.word	0x08005937
 8005924:	2300      	movs	r3, #0
 8005926:	76fb      	strb	r3, [r7, #27]
 8005928:	e0af      	b.n	8005a8a <UART_SetConfig+0x29a>
 800592a:	2302      	movs	r3, #2
 800592c:	76fb      	strb	r3, [r7, #27]
 800592e:	e0ac      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005930:	2304      	movs	r3, #4
 8005932:	76fb      	strb	r3, [r7, #27]
 8005934:	e0a9      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005936:	2308      	movs	r3, #8
 8005938:	76fb      	strb	r3, [r7, #27]
 800593a:	e0a6      	b.n	8005a8a <UART_SetConfig+0x29a>
 800593c:	2310      	movs	r3, #16
 800593e:	76fb      	strb	r3, [r7, #27]
 8005940:	e0a3      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a6b      	ldr	r2, [pc, #428]	; (8005af4 <UART_SetConfig+0x304>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d120      	bne.n	800598e <UART_SetConfig+0x19e>
 800594c:	4b67      	ldr	r3, [pc, #412]	; (8005aec <UART_SetConfig+0x2fc>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005956:	2b30      	cmp	r3, #48	; 0x30
 8005958:	d013      	beq.n	8005982 <UART_SetConfig+0x192>
 800595a:	2b30      	cmp	r3, #48	; 0x30
 800595c:	d814      	bhi.n	8005988 <UART_SetConfig+0x198>
 800595e:	2b20      	cmp	r3, #32
 8005960:	d009      	beq.n	8005976 <UART_SetConfig+0x186>
 8005962:	2b20      	cmp	r3, #32
 8005964:	d810      	bhi.n	8005988 <UART_SetConfig+0x198>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <UART_SetConfig+0x180>
 800596a:	2b10      	cmp	r3, #16
 800596c:	d006      	beq.n	800597c <UART_SetConfig+0x18c>
 800596e:	e00b      	b.n	8005988 <UART_SetConfig+0x198>
 8005970:	2300      	movs	r3, #0
 8005972:	76fb      	strb	r3, [r7, #27]
 8005974:	e089      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005976:	2302      	movs	r3, #2
 8005978:	76fb      	strb	r3, [r7, #27]
 800597a:	e086      	b.n	8005a8a <UART_SetConfig+0x29a>
 800597c:	2304      	movs	r3, #4
 800597e:	76fb      	strb	r3, [r7, #27]
 8005980:	e083      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005982:	2308      	movs	r3, #8
 8005984:	76fb      	strb	r3, [r7, #27]
 8005986:	e080      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005988:	2310      	movs	r3, #16
 800598a:	76fb      	strb	r3, [r7, #27]
 800598c:	e07d      	b.n	8005a8a <UART_SetConfig+0x29a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a59      	ldr	r2, [pc, #356]	; (8005af8 <UART_SetConfig+0x308>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d120      	bne.n	80059da <UART_SetConfig+0x1ea>
 8005998:	4b54      	ldr	r3, [pc, #336]	; (8005aec <UART_SetConfig+0x2fc>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d013      	beq.n	80059ce <UART_SetConfig+0x1de>
 80059a6:	2bc0      	cmp	r3, #192	; 0xc0
 80059a8:	d814      	bhi.n	80059d4 <UART_SetConfig+0x1e4>
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d009      	beq.n	80059c2 <UART_SetConfig+0x1d2>
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d810      	bhi.n	80059d4 <UART_SetConfig+0x1e4>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <UART_SetConfig+0x1cc>
 80059b6:	2b40      	cmp	r3, #64	; 0x40
 80059b8:	d006      	beq.n	80059c8 <UART_SetConfig+0x1d8>
 80059ba:	e00b      	b.n	80059d4 <UART_SetConfig+0x1e4>
 80059bc:	2300      	movs	r3, #0
 80059be:	76fb      	strb	r3, [r7, #27]
 80059c0:	e063      	b.n	8005a8a <UART_SetConfig+0x29a>
 80059c2:	2302      	movs	r3, #2
 80059c4:	76fb      	strb	r3, [r7, #27]
 80059c6:	e060      	b.n	8005a8a <UART_SetConfig+0x29a>
 80059c8:	2304      	movs	r3, #4
 80059ca:	76fb      	strb	r3, [r7, #27]
 80059cc:	e05d      	b.n	8005a8a <UART_SetConfig+0x29a>
 80059ce:	2308      	movs	r3, #8
 80059d0:	76fb      	strb	r3, [r7, #27]
 80059d2:	e05a      	b.n	8005a8a <UART_SetConfig+0x29a>
 80059d4:	2310      	movs	r3, #16
 80059d6:	76fb      	strb	r3, [r7, #27]
 80059d8:	e057      	b.n	8005a8a <UART_SetConfig+0x29a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a47      	ldr	r2, [pc, #284]	; (8005afc <UART_SetConfig+0x30c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d125      	bne.n	8005a30 <UART_SetConfig+0x240>
 80059e4:	4b41      	ldr	r3, [pc, #260]	; (8005aec <UART_SetConfig+0x2fc>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f2:	d017      	beq.n	8005a24 <UART_SetConfig+0x234>
 80059f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f8:	d817      	bhi.n	8005a2a <UART_SetConfig+0x23a>
 80059fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fe:	d00b      	beq.n	8005a18 <UART_SetConfig+0x228>
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a04:	d811      	bhi.n	8005a2a <UART_SetConfig+0x23a>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <UART_SetConfig+0x222>
 8005a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0e:	d006      	beq.n	8005a1e <UART_SetConfig+0x22e>
 8005a10:	e00b      	b.n	8005a2a <UART_SetConfig+0x23a>
 8005a12:	2300      	movs	r3, #0
 8005a14:	76fb      	strb	r3, [r7, #27]
 8005a16:	e038      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	76fb      	strb	r3, [r7, #27]
 8005a1c:	e035      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a1e:	2304      	movs	r3, #4
 8005a20:	76fb      	strb	r3, [r7, #27]
 8005a22:	e032      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a24:	2308      	movs	r3, #8
 8005a26:	76fb      	strb	r3, [r7, #27]
 8005a28:	e02f      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	76fb      	strb	r3, [r7, #27]
 8005a2e:	e02c      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <UART_SetConfig+0x2f4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d125      	bne.n	8005a86 <UART_SetConfig+0x296>
 8005a3a:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <UART_SetConfig+0x2fc>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a48:	d017      	beq.n	8005a7a <UART_SetConfig+0x28a>
 8005a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4e:	d817      	bhi.n	8005a80 <UART_SetConfig+0x290>
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d00b      	beq.n	8005a6e <UART_SetConfig+0x27e>
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5a:	d811      	bhi.n	8005a80 <UART_SetConfig+0x290>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <UART_SetConfig+0x278>
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	d006      	beq.n	8005a74 <UART_SetConfig+0x284>
 8005a66:	e00b      	b.n	8005a80 <UART_SetConfig+0x290>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	76fb      	strb	r3, [r7, #27]
 8005a6c:	e00d      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	76fb      	strb	r3, [r7, #27]
 8005a72:	e00a      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a74:	2304      	movs	r3, #4
 8005a76:	76fb      	strb	r3, [r7, #27]
 8005a78:	e007      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	76fb      	strb	r3, [r7, #27]
 8005a7e:	e004      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a80:	2310      	movs	r3, #16
 8005a82:	76fb      	strb	r3, [r7, #27]
 8005a84:	e001      	b.n	8005a8a <UART_SetConfig+0x29a>
 8005a86:	2310      	movs	r3, #16
 8005a88:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a15      	ldr	r2, [pc, #84]	; (8005ae4 <UART_SetConfig+0x2f4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	f040 809f 	bne.w	8005bd4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a96:	7efb      	ldrb	r3, [r7, #27]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d837      	bhi.n	8005b0c <UART_SetConfig+0x31c>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x2b4>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005b0d 	.word	0x08005b0d
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005b0d 	.word	0x08005b0d
 8005ab4:	08005ad7 	.word	0x08005ad7
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005b0d 	.word	0x08005b0d
 8005ac0:	08005b0d 	.word	0x08005b0d
 8005ac4:	08005b05 	.word	0x08005b05
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fd f87c 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8005acc:	6178      	str	r0, [r7, #20]
        break;
 8005ace:	e022      	b.n	8005b16 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <UART_SetConfig+0x310>)
 8005ad2:	617b      	str	r3, [r7, #20]
        break;
 8005ad4:	e01f      	b.n	8005b16 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad6:	f7fc ffdd 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8005ada:	6178      	str	r0, [r7, #20]
        break;
 8005adc:	e01b      	b.n	8005b16 <UART_SetConfig+0x326>
 8005ade:	bf00      	nop
 8005ae0:	cfff69f3 	.word	0xcfff69f3
 8005ae4:	40008000 	.word	0x40008000
 8005ae8:	40013800 	.word	0x40013800
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40004400 	.word	0x40004400
 8005af4:	40004800 	.word	0x40004800
 8005af8:	40004c00 	.word	0x40004c00
 8005afc:	40005000 	.word	0x40005000
 8005b00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b08:	617b      	str	r3, [r7, #20]
        break;
 8005b0a:	e004      	b.n	8005b16 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	76bb      	strb	r3, [r7, #26]
        break;
 8005b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8119 	beq.w	8005d50 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	4a95      	ldr	r2, [pc, #596]	; (8005d78 <UART_SetConfig+0x588>)
 8005b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b30:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d305      	bcc.n	8005b4e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d902      	bls.n	8005b54 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	76bb      	strb	r3, [r7, #26]
 8005b52:	e0fd      	b.n	8005d50 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f04f 0100 	mov.w	r1, #0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	4a85      	ldr	r2, [pc, #532]	; (8005d78 <UART_SetConfig+0x588>)
 8005b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	f7fa fea6 	bl	80008bc <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4610      	mov	r0, r2
 8005b76:	4619      	mov	r1, r3
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	020b      	lsls	r3, r1, #8
 8005b82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b86:	0202      	lsls	r2, r0, #8
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	6849      	ldr	r1, [r1, #4]
 8005b8c:	0849      	lsrs	r1, r1, #1
 8005b8e:	4608      	mov	r0, r1
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	1814      	adds	r4, r2, r0
 8005b96:	eb43 0501 	adc.w	r5, r3, r1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	f7fa fe88 	bl	80008bc <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bba:	d308      	bcc.n	8005bce <UART_SetConfig+0x3de>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc2:	d204      	bcs.n	8005bce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	60da      	str	r2, [r3, #12]
 8005bcc:	e0c0      	b.n	8005d50 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	76bb      	strb	r3, [r7, #26]
 8005bd2:	e0bd      	b.n	8005d50 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bdc:	d164      	bne.n	8005ca8 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8005bde:	7efb      	ldrb	r3, [r7, #27]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d828      	bhi.n	8005c36 <UART_SetConfig+0x446>
 8005be4:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x3fc>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005c19 	.word	0x08005c19
 8005bf4:	08005c21 	.word	0x08005c21
 8005bf8:	08005c37 	.word	0x08005c37
 8005bfc:	08005c27 	.word	0x08005c27
 8005c00:	08005c37 	.word	0x08005c37
 8005c04:	08005c37 	.word	0x08005c37
 8005c08:	08005c37 	.word	0x08005c37
 8005c0c:	08005c2f 	.word	0x08005c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c10:	f7fc ffd8 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8005c14:	6178      	str	r0, [r7, #20]
        break;
 8005c16:	e013      	b.n	8005c40 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c18:	f7fc ffea 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8005c1c:	6178      	str	r0, [r7, #20]
        break;
 8005c1e:	e00f      	b.n	8005c40 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c20:	4b56      	ldr	r3, [pc, #344]	; (8005d7c <UART_SetConfig+0x58c>)
 8005c22:	617b      	str	r3, [r7, #20]
        break;
 8005c24:	e00c      	b.n	8005c40 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c26:	f7fc ff35 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8005c2a:	6178      	str	r0, [r7, #20]
        break;
 8005c2c:	e008      	b.n	8005c40 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c32:	617b      	str	r3, [r7, #20]
        break;
 8005c34:	e004      	b.n	8005c40 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	76bb      	strb	r3, [r7, #26]
        break;
 8005c3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8084 	beq.w	8005d50 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	4a4a      	ldr	r2, [pc, #296]	; (8005d78 <UART_SetConfig+0x588>)
 8005c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c52:	461a      	mov	r2, r3
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c5a:	005a      	lsls	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b0f      	cmp	r3, #15
 8005c72:	d916      	bls.n	8005ca2 <UART_SetConfig+0x4b2>
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7a:	d212      	bcs.n	8005ca2 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f023 030f 	bic.w	r3, r3, #15
 8005c84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	89fb      	ldrh	r3, [r7, #14]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	89fa      	ldrh	r2, [r7, #14]
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	e056      	b.n	8005d50 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	76bb      	strb	r3, [r7, #26]
 8005ca6:	e053      	b.n	8005d50 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ca8:	7efb      	ldrb	r3, [r7, #27]
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d827      	bhi.n	8005cfe <UART_SetConfig+0x50e>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x4c4>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cd9 	.word	0x08005cd9
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	08005cff 	.word	0x08005cff
 8005cc4:	08005cef 	.word	0x08005cef
 8005cc8:	08005cff 	.word	0x08005cff
 8005ccc:	08005cff 	.word	0x08005cff
 8005cd0:	08005cff 	.word	0x08005cff
 8005cd4:	08005cf7 	.word	0x08005cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd8:	f7fc ff74 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8005cdc:	6178      	str	r0, [r7, #20]
        break;
 8005cde:	e013      	b.n	8005d08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7fc ff86 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	6178      	str	r0, [r7, #20]
        break;
 8005ce6:	e00f      	b.n	8005d08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce8:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <UART_SetConfig+0x58c>)
 8005cea:	617b      	str	r3, [r7, #20]
        break;
 8005cec:	e00c      	b.n	8005d08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cee:	f7fc fed1 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8005cf2:	6178      	str	r0, [r7, #20]
        break;
 8005cf4:	e008      	b.n	8005d08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	617b      	str	r3, [r7, #20]
        break;
 8005cfc:	e004      	b.n	8005d08 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	76bb      	strb	r3, [r7, #26]
        break;
 8005d06:	bf00      	nop
    }

    if (pclk != 0U)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d020      	beq.n	8005d50 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <UART_SetConfig+0x588>)
 8005d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	441a      	add	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b0f      	cmp	r3, #15
 8005d36:	d909      	bls.n	8005d4c <UART_SetConfig+0x55c>
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3e:	d205      	bcs.n	8005d4c <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	e001      	b.n	8005d50 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d6c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3720      	adds	r7, #32
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bdb0      	pop	{r4, r5, r7, pc}
 8005d76:	bf00      	nop
 8005d78:	0800c7d0 	.word	0x0800c7d0
 8005d7c:	00f42400 	.word	0x00f42400

08005d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01a      	beq.n	8005e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7e:	d10a      	bne.n	8005e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]
  }
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ed4:	f7fa fe9a 	bl	8000c0c <HAL_GetTick>
 8005ed8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d10e      	bne.n	8005f06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f82f 	bl	8005f5a <UART_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e025      	b.n	8005f52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d10e      	bne.n	8005f32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f819 	bl	8005f5a <UART_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e00f      	b.n	8005f52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b09c      	sub	sp, #112	; 0x70
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	603b      	str	r3, [r7, #0]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f6a:	e0a9      	b.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	f000 80a5 	beq.w	80060c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f76:	f7fa fe49 	bl	8000c0c <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d302      	bcc.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x32>
 8005f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d140      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fa0:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e6      	bne.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	f023 0301 	bic.w	r3, r3, #1
 8005fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fde:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fe0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e5      	bne.n	8005fbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e069      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d051      	beq.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602a:	d149      	bne.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006034:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800604a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
 8006056:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800605a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e6      	bne.n	8006036 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3308      	adds	r3, #8
 800606e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	613b      	str	r3, [r7, #16]
   return(result);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006088:	623a      	str	r2, [r7, #32]
 800608a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	69f9      	ldr	r1, [r7, #28]
 800608e:	6a3a      	ldr	r2, [r7, #32]
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	61bb      	str	r3, [r7, #24]
   return(result);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e5      	bne.n	8006068 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e010      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4013      	ands	r3, r2
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	429a      	cmp	r2, r3
 80060dc:	f43f af46 	beq.w	8005f6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3770      	adds	r7, #112	; 0x70
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b0a3      	sub	sp, #140	; 0x8c
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611e:	d10e      	bne.n	800613e <UART_Start_Receive_IT+0x52>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <UART_Start_Receive_IT+0x48>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800612e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006132:	e02d      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	22ff      	movs	r2, #255	; 0xff
 8006138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800613c:	e028      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <UART_Start_Receive_IT+0x76>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <UART_Start_Receive_IT+0x6c>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	22ff      	movs	r2, #255	; 0xff
 8006152:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006156:	e01b      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	227f      	movs	r2, #127	; 0x7f
 800615c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006160:	e016      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800616a:	d10d      	bne.n	8006188 <UART_Start_Receive_IT+0x9c>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <UART_Start_Receive_IT+0x92>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	227f      	movs	r2, #127	; 0x7f
 8006178:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800617c:	e008      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	223f      	movs	r2, #63	; 0x3f
 8006182:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006186:	e003      	b.n	8006190 <UART_Start_Receive_IT+0xa4>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2222      	movs	r2, #34	; 0x22
 800619c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80061b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80061c4:	673a      	str	r2, [r7, #112]	; 0x70
 80061c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80061ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80061d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e3      	bne.n	80061a0 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e0:	d153      	bne.n	800628a <UART_Start_Receive_IT+0x19e>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061e8:	88fa      	ldrh	r2, [r7, #6]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d34d      	bcc.n	800628a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f6:	d107      	bne.n	8006208 <UART_Start_Receive_IT+0x11c>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a4b      	ldr	r2, [pc, #300]	; (8006330 <UART_Start_Receive_IT+0x244>)
 8006204:	671a      	str	r2, [r3, #112]	; 0x70
 8006206:	e002      	b.n	800620e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a4a      	ldr	r2, [pc, #296]	; (8006334 <UART_Start_Receive_IT+0x248>)
 800620c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01a      	beq.n	8006254 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006242:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006246:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800624e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e4      	bne.n	800621e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006274:	64ba      	str	r2, [r7, #72]	; 0x48
 8006276:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800627a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e5      	bne.n	8006254 <UART_Start_Receive_IT+0x168>
 8006288:	e04a      	b.n	8006320 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006292:	d107      	bne.n	80062a4 <UART_Start_Receive_IT+0x1b8>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d103      	bne.n	80062a4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a26      	ldr	r2, [pc, #152]	; (8006338 <UART_Start_Receive_IT+0x24c>)
 80062a0:	671a      	str	r2, [r3, #112]	; 0x70
 80062a2:	e002      	b.n	80062aa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4a25      	ldr	r2, [pc, #148]	; (800633c <UART_Start_Receive_IT+0x250>)
 80062a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d019      	beq.n	80062ee <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80062ce:	677b      	str	r3, [r7, #116]	; 0x74
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d8:	637b      	str	r3, [r7, #52]	; 0x34
 80062da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e6      	bne.n	80062ba <UART_Start_Receive_IT+0x1ce>
 80062ec:	e018      	b.n	8006320 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	613b      	str	r3, [r7, #16]
   return(result);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f043 0320 	orr.w	r3, r3, #32
 8006302:	67bb      	str	r3, [r7, #120]	; 0x78
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	69f9      	ldr	r1, [r7, #28]
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	61bb      	str	r3, [r7, #24]
   return(result);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e6      	bne.n	80062ee <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	378c      	adds	r7, #140	; 0x8c
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	08006a55 	.word	0x08006a55
 8006334:	08006759 	.word	0x08006759
 8006338:	080065f3 	.word	0x080065f3
 800633c:	0800648f 	.word	0x0800648f

08006340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b095      	sub	sp, #84	; 0x54
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800635c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
 8006368:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800636c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e6      	bne.n	8006348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	61fb      	str	r3, [r7, #28]
   return(result);
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006390:	f023 0301 	bic.w	r3, r3, #1
 8006394:	64bb      	str	r3, [r7, #72]	; 0x48
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800639e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e3      	bne.n	800637a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d118      	bne.n	80063ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f023 0310 	bic.w	r3, r3, #16
 80063ce:	647b      	str	r3, [r7, #68]	; 0x44
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	613b      	str	r3, [r7, #16]
   return(result);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006400:	bf00      	nop
 8006402:	3754      	adds	r7, #84	; 0x54
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff f9ca 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	60bb      	str	r3, [r7, #8]
   return(result);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	613b      	str	r3, [r7, #16]
   return(result);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff f995 	bl	80057b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006486:	bf00      	nop
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b096      	sub	sp, #88	; 0x58
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800649c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a6:	2b22      	cmp	r3, #34	; 0x22
 80064a8:	f040 8095 	bne.w	80065d6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80064ba:	b2d9      	uxtb	r1, r3
 80064bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c6:	400a      	ands	r2, r1
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d17a      	bne.n	80065ea <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006508:	653b      	str	r3, [r7, #80]	; 0x50
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
 8006514:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e6      	bne.n	80064f4 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3308      	adds	r3, #8
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	623b      	str	r3, [r7, #32]
   return(result);
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006546:	633a      	str	r2, [r7, #48]	; 0x30
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800654c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d12e      	bne.n	80065ce <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	60fb      	str	r3, [r7, #12]
   return(result);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0310 	bic.w	r3, r3, #16
 800658a:	64bb      	str	r3, [r7, #72]	; 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	69b9      	ldr	r1, [r7, #24]
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	617b      	str	r3, [r7, #20]
   return(result);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f003 0310 	and.w	r3, r3, #16
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d103      	bne.n	80065be <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2210      	movs	r2, #16
 80065bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff f906 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065cc:	e00d      	b.n	80065ea <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f004 f926 	bl	800a820 <HAL_UART_RxCpltCallback>
}
 80065d4:	e009      	b.n	80065ea <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	8b1b      	ldrh	r3, [r3, #24]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	b292      	uxth	r2, r2
 80065e8:	831a      	strh	r2, [r3, #24]
}
 80065ea:	bf00      	nop
 80065ec:	3758      	adds	r7, #88	; 0x58
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b096      	sub	sp, #88	; 0x58
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006600:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660a:	2b22      	cmp	r3, #34	; 0x22
 800660c:	f040 8095 	bne.w	800673a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006616:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006620:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006624:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006628:	4013      	ands	r3, r2
 800662a:	b29a      	uxth	r2, r3
 800662c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d17a      	bne.n	800674e <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800666c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006676:	643b      	str	r3, [r7, #64]	; 0x40
 8006678:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800667c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e6      	bne.n	8006658 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	61fb      	str	r3, [r7, #28]
   return(result);
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3308      	adds	r3, #8
 80066a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e5      	bne.n	800668a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d12e      	bne.n	8006732 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f023 0310 	bic.w	r3, r3, #16
 80066ee:	647b      	str	r3, [r7, #68]	; 0x44
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6979      	ldr	r1, [r7, #20]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	613b      	str	r3, [r7, #16]
   return(result);
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e6      	bne.n	80066da <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b10      	cmp	r3, #16
 8006718:	d103      	bne.n	8006722 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2210      	movs	r2, #16
 8006720:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff f854 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006730:	e00d      	b.n	800674e <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f004 f874 	bl	800a820 <HAL_UART_RxCpltCallback>
}
 8006738:	e009      	b.n	800674e <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	8b1b      	ldrh	r3, [r3, #24]
 8006740:	b29a      	uxth	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0208 	orr.w	r2, r2, #8
 800674a:	b292      	uxth	r2, r2
 800674c:	831a      	strh	r2, [r3, #24]
}
 800674e:	bf00      	nop
 8006750:	3758      	adds	r7, #88	; 0x58
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b0a6      	sub	sp, #152	; 0x98
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006766:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678e:	2b22      	cmp	r3, #34	; 0x22
 8006790:	f040 814f 	bne.w	8006a32 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800679a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800679e:	e0f6      	b.n	800698e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067a6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067aa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80067ae:	b2d9      	uxtb	r1, r3
 80067b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ba:	400a      	ands	r2, r1
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80067e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d053      	beq.n	800689a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d011      	beq.n	8006822 <UART_RxISR_8BIT_FIFOEN+0xca>
 80067fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00b      	beq.n	8006822 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2201      	movs	r2, #1
 8006810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	f043 0201 	orr.w	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d011      	beq.n	8006852 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800682e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00b      	beq.n	8006852 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2202      	movs	r2, #2
 8006840:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006848:	f043 0204 	orr.w	r2, r3, #4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006852:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d011      	beq.n	8006882 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800685e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2204      	movs	r2, #4
 8006870:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006878:	f043 0202 	orr.w	r2, r3, #2
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fe ff99 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d173      	bne.n	800698e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80068b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80068ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80068d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e4      	bne.n	80068a6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80068ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3308      	adds	r3, #8
 80068fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006900:	657a      	str	r2, [r7, #84]	; 0x54
 8006902:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006906:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e3      	bne.n	80068dc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006926:	2b01      	cmp	r3, #1
 8006928:	d12e      	bne.n	8006988 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	f023 0310 	bic.w	r3, r3, #16
 8006944:	67bb      	str	r3, [r7, #120]	; 0x78
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694e:	643b      	str	r3, [r7, #64]	; 0x40
 8006950:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b10      	cmp	r3, #16
 800696e:	d103      	bne.n	8006978 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2210      	movs	r2, #16
 8006976:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7fe ff29 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
 8006986:	e002      	b.n	800698e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f003 ff49 	bl	800a820 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800698e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006992:	2b00      	cmp	r3, #0
 8006994:	d006      	beq.n	80069a4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006996:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f47f aefe 	bne.w	80067a0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d047      	beq.n	8006a46 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d240      	bcs.n	8006a46 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069da:	673b      	str	r3, [r7, #112]	; 0x70
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3308      	adds	r3, #8
 80069e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80069e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e5      	bne.n	80069c4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 80069fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f043 0320 	orr.w	r3, r3, #32
 8006a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6979      	ldr	r1, [r7, #20]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e6      	bne.n	80069fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a30:	e009      	b.n	8006a46 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	8b1b      	ldrh	r3, [r3, #24]
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0208 	orr.w	r2, r2, #8
 8006a42:	b292      	uxth	r2, r2
 8006a44:	831a      	strh	r2, [r3, #24]
}
 8006a46:	bf00      	nop
 8006a48:	3798      	adds	r7, #152	; 0x98
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	0800648f 	.word	0x0800648f

08006a54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b0a8      	sub	sp, #160	; 0xa0
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a62:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8a:	2b22      	cmp	r3, #34	; 0x22
 8006a8c:	f040 8153 	bne.w	8006d36 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a96:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a9a:	e0fa      	b.n	8006c92 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006aa2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006aae:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006ab2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006abe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac4:	1c9a      	adds	r2, r3, #2
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d053      	beq.n	8006b9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006afe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b18:	f043 0201 	orr.w	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d011      	beq.n	8006b52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b48:	f043 0204 	orr.w	r2, r3, #4
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d011      	beq.n	8006b82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b78:	f043 0202 	orr.w	r2, r3, #2
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d006      	beq.n	8006b9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7fe fe19 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d175      	bne.n	8006c92 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bca:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e4      	bne.n	8006ba6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c04:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e1      	bne.n	8006bdc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d12e      	bne.n	8006c8c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	f023 0310 	bic.w	r3, r3, #16
 8006c48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c52:	647b      	str	r3, [r7, #68]	; 0x44
 8006c54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e6      	bne.n	8006c34 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d103      	bne.n	8006c7c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2210      	movs	r2, #16
 8006c7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fe fda7 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
 8006c8a:	e002      	b.n	8006c92 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f003 fdc7 	bl	800a820 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d006      	beq.n	8006ca8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f47f aefa 	bne.w	8006a9c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006cb2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d047      	beq.n	8006d4a <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cc0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d240      	bcs.n	8006d4a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cde:	677b      	str	r3, [r7, #116]	; 0x74
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8006d00:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f043 0320 	orr.w	r3, r3, #32
 8006d16:	673b      	str	r3, [r7, #112]	; 0x70
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	69b9      	ldr	r1, [r7, #24]
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e6      	bne.n	8006d02 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d34:	e009      	b.n	8006d4a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	8b1b      	ldrh	r3, [r3, #24]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0208 	orr.w	r2, r2, #8
 8006d46:	b292      	uxth	r2, r2
 8006d48:	831a      	strh	r2, [r3, #24]
}
 8006d4a:	bf00      	nop
 8006d4c:	37a0      	adds	r7, #160	; 0xa0
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	080065f3 	.word	0x080065f3

08006d58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_UARTEx_DisableFifoMode+0x16>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e027      	b.n	8006dfa <HAL_UARTEx_DisableFifoMode+0x66>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2224      	movs	r2, #36	; 0x24
 8006db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006dd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e02d      	b.n	8006e7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2224      	movs	r2, #36	; 0x24
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0201 	bic.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f850 	bl	8006f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e02d      	b.n	8006ef6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2224      	movs	r2, #36	; 0x24
 8006ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0201 	bic.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f812 	bl	8006f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d108      	bne.n	8006f22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f20:	e031      	b.n	8006f86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f22:	2308      	movs	r3, #8
 8006f24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f26:	2308      	movs	r3, #8
 8006f28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	0e5b      	lsrs	r3, r3, #25
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	0f5b      	lsrs	r3, r3, #29
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	7b3a      	ldrb	r2, [r7, #12]
 8006f4e:	4911      	ldr	r1, [pc, #68]	; (8006f94 <UARTEx_SetNbDataToProcess+0x94>)
 8006f50:	5c8a      	ldrb	r2, [r1, r2]
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f56:	7b3a      	ldrb	r2, [r7, #12]
 8006f58:	490f      	ldr	r1, [pc, #60]	; (8006f98 <UARTEx_SetNbDataToProcess+0x98>)
 8006f5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	7b7a      	ldrb	r2, [r7, #13]
 8006f6c:	4909      	ldr	r1, [pc, #36]	; (8006f94 <UARTEx_SetNbDataToProcess+0x94>)
 8006f6e:	5c8a      	ldrb	r2, [r1, r2]
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f74:	7b7a      	ldrb	r2, [r7, #13]
 8006f76:	4908      	ldr	r1, [pc, #32]	; (8006f98 <UARTEx_SetNbDataToProcess+0x98>)
 8006f78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f86:	bf00      	nop
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	0800c7e8 	.word	0x0800c7e8
 8006f98:	0800c7f0 	.word	0x0800c7f0

08006f9c <__NVIC_SetPriority>:
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	db0a      	blt.n	8006fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	490c      	ldr	r1, [pc, #48]	; (8006fe8 <__NVIC_SetPriority+0x4c>)
 8006fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fba:	0112      	lsls	r2, r2, #4
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006fc4:	e00a      	b.n	8006fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	4908      	ldr	r1, [pc, #32]	; (8006fec <__NVIC_SetPriority+0x50>)
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	3b04      	subs	r3, #4
 8006fd4:	0112      	lsls	r2, r2, #4
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	440b      	add	r3, r1
 8006fda:	761a      	strb	r2, [r3, #24]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	e000e100 	.word	0xe000e100
 8006fec:	e000ed00 	.word	0xe000ed00

08006ff0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <SysTick_Handler+0x1c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ff8:	f001 fd28 	bl	8008a4c <xTaskGetSchedulerState>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d001      	beq.n	8007006 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007002:	f002 fb11 	bl	8009628 <xPortSysTickHandler>
  }
}
 8007006:	bf00      	nop
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	e000e010 	.word	0xe000e010

08007010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007014:	2100      	movs	r1, #0
 8007016:	f06f 0004 	mvn.w	r0, #4
 800701a:	f7ff ffbf 	bl	8006f9c <__NVIC_SetPriority>
#endif
}
 800701e:	bf00      	nop
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800702a:	f3ef 8305 	mrs	r3, IPSR
 800702e:	603b      	str	r3, [r7, #0]
  return(result);
 8007030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007036:	f06f 0305 	mvn.w	r3, #5
 800703a:	607b      	str	r3, [r7, #4]
 800703c:	e00c      	b.n	8007058 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800703e:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <osKernelInitialize+0x44>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d105      	bne.n	8007052 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007046:	4b08      	ldr	r3, [pc, #32]	; (8007068 <osKernelInitialize+0x44>)
 8007048:	2201      	movs	r2, #1
 800704a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800704c:	2300      	movs	r3, #0
 800704e:	607b      	str	r3, [r7, #4]
 8007050:	e002      	b.n	8007058 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007058:	687b      	ldr	r3, [r7, #4]
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	200006b8 	.word	0x200006b8

0800706c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007072:	f3ef 8305 	mrs	r3, IPSR
 8007076:	603b      	str	r3, [r7, #0]
  return(result);
 8007078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <osKernelStart+0x1a>
    stat = osErrorISR;
 800707e:	f06f 0305 	mvn.w	r3, #5
 8007082:	607b      	str	r3, [r7, #4]
 8007084:	e010      	b.n	80070a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <osKernelStart+0x48>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d109      	bne.n	80070a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800708e:	f7ff ffbf 	bl	8007010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007092:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <osKernelStart+0x48>)
 8007094:	2202      	movs	r2, #2
 8007096:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007098:	f001 f87c 	bl	8008194 <vTaskStartScheduler>
      stat = osOK;
 800709c:	2300      	movs	r3, #0
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e002      	b.n	80070a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295
 80070a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070a8:	687b      	ldr	r3, [r7, #4]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	200006b8 	.word	0x200006b8

080070b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08e      	sub	sp, #56	; 0x38
 80070bc:	af04      	add	r7, sp, #16
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070c8:	f3ef 8305 	mrs	r3, IPSR
 80070cc:	617b      	str	r3, [r7, #20]
  return(result);
 80070ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d17e      	bne.n	80071d2 <osThreadNew+0x11a>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d07b      	beq.n	80071d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070de:	2318      	movs	r3, #24
 80070e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80070e6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d045      	beq.n	800717e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <osThreadNew+0x48>
        name = attr->name;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <osThreadNew+0x6e>
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	2b38      	cmp	r3, #56	; 0x38
 8007118:	d805      	bhi.n	8007126 <osThreadNew+0x6e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <osThreadNew+0x72>
        return (NULL);
 8007126:	2300      	movs	r3, #0
 8007128:	e054      	b.n	80071d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00e      	beq.n	8007160 <osThreadNew+0xa8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	2bbb      	cmp	r3, #187	; 0xbb
 8007148:	d90a      	bls.n	8007160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800714e:	2b00      	cmp	r3, #0
 8007150:	d006      	beq.n	8007160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <osThreadNew+0xa8>
        mem = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	e010      	b.n	8007182 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10c      	bne.n	8007182 <osThreadNew+0xca>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d108      	bne.n	8007182 <osThreadNew+0xca>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d104      	bne.n	8007182 <osThreadNew+0xca>
          mem = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	e001      	b.n	8007182 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d110      	bne.n	80071aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007190:	9202      	str	r2, [sp, #8]
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6a3a      	ldr	r2, [r7, #32]
 800719c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 fe0c 	bl	8007dbc <xTaskCreateStatic>
 80071a4:	4603      	mov	r3, r0
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	e013      	b.n	80071d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d110      	bne.n	80071d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	f107 0310 	add.w	r3, r7, #16
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fe57 	bl	8007e76 <xTaskCreate>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d001      	beq.n	80071d2 <osThreadNew+0x11a>
            hTask = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80071d2:	693b      	ldr	r3, [r7, #16]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3728      	adds	r7, #40	; 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071e4:	f3ef 8305 	mrs	r3, IPSR
 80071e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80071ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <osDelay+0x1c>
    stat = osErrorISR;
 80071f0:	f06f 0305 	mvn.w	r3, #5
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e007      	b.n	8007208 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 ff92 	bl	800812c <vTaskDelay>
    }
  }

  return (stat);
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a07      	ldr	r2, [pc, #28]	; (8007240 <vApplicationGetIdleTaskMemory+0x2c>)
 8007224:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	4a06      	ldr	r2, [pc, #24]	; (8007244 <vApplicationGetIdleTaskMemory+0x30>)
 800722a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2280      	movs	r2, #128	; 0x80
 8007230:	601a      	str	r2, [r3, #0]
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	200006bc 	.word	0x200006bc
 8007244:	20000778 	.word	0x20000778

08007248 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4a07      	ldr	r2, [pc, #28]	; (8007274 <vApplicationGetTimerTaskMemory+0x2c>)
 8007258:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	4a06      	ldr	r2, [pc, #24]	; (8007278 <vApplicationGetTimerTaskMemory+0x30>)
 800725e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007266:	601a      	str	r2, [r3, #0]
}
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	20000978 	.word	0x20000978
 8007278:	20000a34 	.word	0x20000a34

0800727c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f103 0208 	add.w	r2, r3, #8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f04f 32ff 	mov.w	r2, #4294967295
 8007294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f103 0208 	add.w	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f103 0208 	add.w	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	601a      	str	r2, [r3, #0]
}
 8007312:	bf00      	nop
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d103      	bne.n	800733e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e00c      	b.n	8007358 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3308      	adds	r3, #8
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	e002      	b.n	800734c <vListInsert+0x2e>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	429a      	cmp	r2, r3
 8007356:	d2f6      	bcs.n	8007346 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	bf00      	nop
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6892      	ldr	r2, [r2, #8]
 80073a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6852      	ldr	r2, [r2, #4]
 80073b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d103      	bne.n	80073c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	1e5a      	subs	r2, r3, #1
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800740e:	f002 f879 	bl	8009504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	441a      	add	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743e:	3b01      	subs	r3, #1
 8007440:	68f9      	ldr	r1, [r7, #12]
 8007442:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	441a      	add	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	22ff      	movs	r2, #255	; 0xff
 8007452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	22ff      	movs	r2, #255	; 0xff
 800745a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d114      	bne.n	800748e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3310      	adds	r3, #16
 8007470:	4618      	mov	r0, r3
 8007472:	f001 f929 	bl	80086c8 <xTaskRemoveFromEventList>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d012      	beq.n	80074a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800747c:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <xQueueGenericReset+0xcc>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	e009      	b.n	80074a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3310      	adds	r3, #16
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fef2 	bl	800727c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3324      	adds	r3, #36	; 0x24
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff feed 	bl	800727c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074a2:	f002 f85f 	bl	8009564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074a6:	2301      	movs	r3, #1
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08e      	sub	sp, #56	; 0x38
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <xQueueGenericCreateStatic+0x52>
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <xQueueGenericCreateStatic+0x56>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <xQueueGenericCreateStatic+0x58>
 800750a:	2300      	movs	r3, #0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	623b      	str	r3, [r7, #32]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <xQueueGenericCreateStatic+0x7e>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <xQueueGenericCreateStatic+0x82>
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <xQueueGenericCreateStatic+0x84>
 8007536:	2300      	movs	r3, #0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	61fb      	str	r3, [r7, #28]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007552:	2350      	movs	r3, #80	; 0x50
 8007554:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b50      	cmp	r3, #80	; 0x50
 800755a:	d00a      	beq.n	8007572 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	61bb      	str	r3, [r7, #24]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007572:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00d      	beq.n	800759a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007586:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	4613      	mov	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f805 	bl	80075a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800759c:	4618      	mov	r0, r3
 800759e:	3730      	adds	r7, #48	; 0x30
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d103      	bne.n	80075c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e002      	b.n	80075c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075d2:	2101      	movs	r1, #1
 80075d4:	69b8      	ldr	r0, [r7, #24]
 80075d6:	f7ff ff05 	bl	80073e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	78fa      	ldrb	r2, [r7, #3]
 80075de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08e      	sub	sp, #56	; 0x38
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075fa:	2300      	movs	r3, #0
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <xQueueGenericSend+0x32>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800761a:	bf00      	nop
 800761c:	e7fe      	b.n	800761c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d103      	bne.n	800762c <xQueueGenericSend+0x40>
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <xQueueGenericSend+0x44>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <xQueueGenericSend+0x46>
 8007630:	2300      	movs	r3, #0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <xQueueGenericSend+0x60>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d103      	bne.n	800765a <xQueueGenericSend+0x6e>
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <xQueueGenericSend+0x72>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <xQueueGenericSend+0x74>
 800765e:	2300      	movs	r3, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10a      	bne.n	800767a <xQueueGenericSend+0x8e>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	623b      	str	r3, [r7, #32]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800767a:	f001 f9e7 	bl	8008a4c <xTaskGetSchedulerState>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <xQueueGenericSend+0x9e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <xQueueGenericSend+0xa2>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <xQueueGenericSend+0xa4>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xQueueGenericSend+0xbe>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	61fb      	str	r3, [r7, #28]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076aa:	f001 ff2b 	bl	8009504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d302      	bcc.n	80076c0 <xQueueGenericSend+0xd4>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d129      	bne.n	8007714 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076c6:	f000 fa0b 	bl	8007ae0 <prvCopyDataToQueue>
 80076ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d010      	beq.n	80076f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	3324      	adds	r3, #36	; 0x24
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fff5 	bl	80086c8 <xTaskRemoveFromEventList>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d013      	beq.n	800770c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076e4:	4b3f      	ldr	r3, [pc, #252]	; (80077e4 <xQueueGenericSend+0x1f8>)
 80076e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	e00a      	b.n	800770c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076fc:	4b39      	ldr	r3, [pc, #228]	; (80077e4 <xQueueGenericSend+0x1f8>)
 80076fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800770c:	f001 ff2a 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 8007710:	2301      	movs	r3, #1
 8007712:	e063      	b.n	80077dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800771a:	f001 ff23 	bl	8009564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800771e:	2300      	movs	r3, #0
 8007720:	e05c      	b.n	80077dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007724:	2b00      	cmp	r3, #0
 8007726:	d106      	bne.n	8007736 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007728:	f107 0314 	add.w	r3, r7, #20
 800772c:	4618      	mov	r0, r3
 800772e:	f001 f82f 	bl	8008790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007736:	f001 ff15 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800773a:	f000 fd9b 	bl	8008274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800773e:	f001 fee1 	bl	8009504 <vPortEnterCritical>
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007748:	b25b      	sxtb	r3, r3
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d103      	bne.n	8007758 <xQueueGenericSend+0x16c>
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800775e:	b25b      	sxtb	r3, r3
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d103      	bne.n	800776e <xQueueGenericSend+0x182>
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800776e:	f001 fef9 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007772:	1d3a      	adds	r2, r7, #4
 8007774:	f107 0314 	add.w	r3, r7, #20
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f81e 	bl	80087bc <xTaskCheckForTimeOut>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d124      	bne.n	80077d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007788:	f000 faa2 	bl	8007cd0 <prvIsQueueFull>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d018      	beq.n	80077c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	3310      	adds	r3, #16
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4611      	mov	r1, r2
 800779a:	4618      	mov	r0, r3
 800779c:	f000 ff44 	bl	8008628 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077a2:	f000 fa2d 	bl	8007c00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077a6:	f000 fd73 	bl	8008290 <xTaskResumeAll>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f47f af7c 	bne.w	80076aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80077b2:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <xQueueGenericSend+0x1f8>)
 80077b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	e772      	b.n	80076aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077c6:	f000 fa1b 	bl	8007c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077ca:	f000 fd61 	bl	8008290 <xTaskResumeAll>
 80077ce:	e76c      	b.n	80076aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077d2:	f000 fa15 	bl	8007c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077d6:	f000 fd5b 	bl	8008290 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3738      	adds	r7, #56	; 0x38
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	e000ed04 	.word	0xe000ed04

080077e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b090      	sub	sp, #64	; 0x40
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d103      	bne.n	8007824 <xQueueGenericSendFromISR+0x3c>
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <xQueueGenericSendFromISR+0x40>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <xQueueGenericSendFromISR+0x42>
 8007828:	2300      	movs	r3, #0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d103      	bne.n	8007852 <xQueueGenericSendFromISR+0x6a>
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <xQueueGenericSendFromISR+0x6e>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <xQueueGenericSendFromISR+0x70>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	623b      	str	r3, [r7, #32]
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007872:	f001 ff29 	bl	80096c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007876:	f3ef 8211 	mrs	r2, BASEPRI
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	61fa      	str	r2, [r7, #28]
 800788c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800788e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	429a      	cmp	r2, r3
 800789c:	d302      	bcc.n	80078a4 <xQueueGenericSendFromISR+0xbc>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d12f      	bne.n	8007904 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078ba:	f000 f911 	bl	8007ae0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d112      	bne.n	80078ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d016      	beq.n	80078fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	3324      	adds	r3, #36	; 0x24
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fef7 	bl	80086c8 <xTaskRemoveFromEventList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00e      	beq.n	80078fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e007      	b.n	80078fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078f2:	3301      	adds	r3, #1
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	b25a      	sxtb	r2, r3
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078fe:	2301      	movs	r3, #1
 8007900:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007902:	e001      	b.n	8007908 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007904:	2300      	movs	r3, #0
 8007906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007912:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007916:	4618      	mov	r0, r3
 8007918:	3740      	adds	r7, #64	; 0x40
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08c      	sub	sp, #48	; 0x30
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800792c:	2300      	movs	r3, #0
 800792e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <xQueueReceive+0x30>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	623b      	str	r3, [r7, #32]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d103      	bne.n	800795e <xQueueReceive+0x3e>
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <xQueueReceive+0x42>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <xQueueReceive+0x44>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10a      	bne.n	800797e <xQueueReceive+0x5e>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	61fb      	str	r3, [r7, #28]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800797e:	f001 f865 	bl	8008a4c <xTaskGetSchedulerState>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <xQueueReceive+0x6e>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <xQueueReceive+0x72>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <xQueueReceive+0x74>
 8007992:	2300      	movs	r3, #0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <xQueueReceive+0x8e>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	61bb      	str	r3, [r7, #24]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079ae:	f001 fda9 	bl	8009504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01f      	beq.n	80079fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079c2:	f000 f8f7 	bl	8007bb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	1e5a      	subs	r2, r3, #1
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00f      	beq.n	80079f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	3310      	adds	r3, #16
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fe74 	bl	80086c8 <xTaskRemoveFromEventList>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d007      	beq.n	80079f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079e6:	4b3d      	ldr	r3, [pc, #244]	; (8007adc <xQueueReceive+0x1bc>)
 80079e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079f6:	f001 fdb5 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e069      	b.n	8007ad2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a04:	f001 fdae 	bl	8009564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e062      	b.n	8007ad2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d106      	bne.n	8007a20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a12:	f107 0310 	add.w	r3, r7, #16
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 feba 	bl	8008790 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a20:	f001 fda0 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a24:	f000 fc26 	bl	8008274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a28:	f001 fd6c 	bl	8009504 <vPortEnterCritical>
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a32:	b25b      	sxtb	r3, r3
 8007a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a38:	d103      	bne.n	8007a42 <xQueueReceive+0x122>
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a48:	b25b      	sxtb	r3, r3
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4e:	d103      	bne.n	8007a58 <xQueueReceive+0x138>
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a58:	f001 fd84 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a5c:	1d3a      	adds	r2, r7, #4
 8007a5e:	f107 0310 	add.w	r3, r7, #16
 8007a62:	4611      	mov	r1, r2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fea9 	bl	80087bc <xTaskCheckForTimeOut>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d123      	bne.n	8007ab8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a72:	f000 f917 	bl	8007ca4 <prvIsQueueEmpty>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d017      	beq.n	8007aac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fdcf 	bl	8008628 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a8c:	f000 f8b8 	bl	8007c00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a90:	f000 fbfe 	bl	8008290 <xTaskResumeAll>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d189      	bne.n	80079ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <xQueueReceive+0x1bc>)
 8007a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	e780      	b.n	80079ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aae:	f000 f8a7 	bl	8007c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ab2:	f000 fbed 	bl	8008290 <xTaskResumeAll>
 8007ab6:	e77a      	b.n	80079ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aba:	f000 f8a1 	bl	8007c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007abe:	f000 fbe7 	bl	8008290 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ac4:	f000 f8ee 	bl	8007ca4 <prvIsQueueEmpty>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f43f af6f 	beq.w	80079ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ad0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3730      	adds	r7, #48	; 0x30
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	e000ed04 	.word	0xe000ed04

08007ae0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10d      	bne.n	8007b1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d14d      	bne.n	8007ba2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 ffbc 	bl	8008a88 <xTaskPriorityDisinherit>
 8007b10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	609a      	str	r2, [r3, #8]
 8007b18:	e043      	b.n	8007ba2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d119      	bne.n	8007b54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6858      	ldr	r0, [r3, #4]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	461a      	mov	r2, r3
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	f004 f930 	bl	800bd90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	441a      	add	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d32b      	bcc.n	8007ba2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	e026      	b.n	8007ba2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	68d8      	ldr	r0, [r3, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	f004 f916 	bl	800bd90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	425b      	negs	r3, r3
 8007b6e:	441a      	add	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	68da      	ldr	r2, [r3, #12]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d207      	bcs.n	8007b90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b88:	425b      	negs	r3, r3
 8007b8a:	441a      	add	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d105      	bne.n	8007ba2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007baa:	697b      	ldr	r3, [r7, #20]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d018      	beq.n	8007bf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	441a      	add	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d303      	bcc.n	8007be8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68d9      	ldr	r1, [r3, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6838      	ldr	r0, [r7, #0]
 8007bf4:	f004 f8cc 	bl	800bd90 <memcpy>
	}
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c08:	f001 fc7c 	bl	8009504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c14:	e011      	b.n	8007c3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d012      	beq.n	8007c44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3324      	adds	r3, #36	; 0x24
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fd50 	bl	80086c8 <xTaskRemoveFromEventList>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c2e:	f000 fe27 	bl	8008880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dce9      	bgt.n	8007c16 <prvUnlockQueue+0x16>
 8007c42:	e000      	b.n	8007c46 <prvUnlockQueue+0x46>
					break;
 8007c44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	22ff      	movs	r2, #255	; 0xff
 8007c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c4e:	f001 fc89 	bl	8009564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c52:	f001 fc57 	bl	8009504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c5e:	e011      	b.n	8007c84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d012      	beq.n	8007c8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3310      	adds	r3, #16
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fd2b 	bl	80086c8 <xTaskRemoveFromEventList>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c78:	f000 fe02 	bl	8008880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	dce9      	bgt.n	8007c60 <prvUnlockQueue+0x60>
 8007c8c:	e000      	b.n	8007c90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	22ff      	movs	r2, #255	; 0xff
 8007c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c98:	f001 fc64 	bl	8009564 <vPortExitCritical>
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cac:	f001 fc2a 	bl	8009504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	e001      	b.n	8007cc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cc2:	f001 fc4f 	bl	8009564 <vPortExitCritical>

	return xReturn;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cd8:	f001 fc14 	bl	8009504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d102      	bne.n	8007cee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	e001      	b.n	8007cf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cf2:	f001 fc37 	bl	8009564 <vPortExitCritical>

	return xReturn;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e014      	b.n	8007d3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d10:	4a0f      	ldr	r2, [pc, #60]	; (8007d50 <vQueueAddToRegistry+0x50>)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10b      	bne.n	8007d34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d1c:	490c      	ldr	r1, [pc, #48]	; (8007d50 <vQueueAddToRegistry+0x50>)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d26:	4a0a      	ldr	r2, [pc, #40]	; (8007d50 <vQueueAddToRegistry+0x50>)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d32:	e006      	b.n	8007d42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b07      	cmp	r3, #7
 8007d3e:	d9e7      	bls.n	8007d10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	2000205c 	.word	0x2000205c

08007d54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d64:	f001 fbce 	bl	8009504 <vPortEnterCritical>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d6e:	b25b      	sxtb	r3, r3
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d103      	bne.n	8007d7e <vQueueWaitForMessageRestricted+0x2a>
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d84:	b25b      	sxtb	r3, r3
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d103      	bne.n	8007d94 <vQueueWaitForMessageRestricted+0x40>
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d94:	f001 fbe6 	bl	8009564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d106      	bne.n	8007dae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	3324      	adds	r3, #36	; 0x24
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fc61 	bl	8008670 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dae:	6978      	ldr	r0, [r7, #20]
 8007db0:	f7ff ff26 	bl	8007c00 <prvUnlockQueue>
	}
 8007db4:	bf00      	nop
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08e      	sub	sp, #56	; 0x38
 8007dc0:	af04      	add	r7, sp, #16
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	623b      	str	r3, [r7, #32]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xTaskCreateStatic+0x46>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	61fb      	str	r3, [r7, #28]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e02:	23bc      	movs	r3, #188	; 0xbc
 8007e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2bbc      	cmp	r3, #188	; 0xbc
 8007e0a:	d00a      	beq.n	8007e22 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	61bb      	str	r3, [r7, #24]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01e      	beq.n	8007e68 <xTaskCreateStatic+0xac>
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01b      	beq.n	8007e68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e42:	2300      	movs	r3, #0
 8007e44:	9303      	str	r3, [sp, #12]
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	9302      	str	r3, [sp, #8]
 8007e4a:	f107 0314 	add.w	r3, r7, #20
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f850 	bl	8007f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e62:	f000 f8f3 	bl	800804c <prvAddNewTaskToReadyList>
 8007e66:	e001      	b.n	8007e6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e6c:	697b      	ldr	r3, [r7, #20]
	}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3728      	adds	r7, #40	; 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b08c      	sub	sp, #48	; 0x30
 8007e7a:	af04      	add	r7, sp, #16
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	603b      	str	r3, [r7, #0]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 fc5c 	bl	8009748 <pvPortMalloc>
 8007e90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00e      	beq.n	8007eb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e98:	20bc      	movs	r0, #188	; 0xbc
 8007e9a:	f001 fc55 	bl	8009748 <pvPortMalloc>
 8007e9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8007eac:	e005      	b.n	8007eba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eae:	6978      	ldr	r0, [r7, #20]
 8007eb0:	f001 fd16 	bl	80098e0 <vPortFree>
 8007eb4:	e001      	b.n	8007eba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d017      	beq.n	8007ef0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ec8:	88fa      	ldrh	r2, [r7, #6]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	9303      	str	r3, [sp, #12]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f80e 	bl	8007f00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ee4:	69f8      	ldr	r0, [r7, #28]
 8007ee6:	f000 f8b1 	bl	800804c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	e002      	b.n	8007ef6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	461a      	mov	r2, r3
 8007f18:	21a5      	movs	r1, #165	; 0xa5
 8007f1a:	f003 ff47 	bl	800bdac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	f023 0307 	bic.w	r3, r3, #7
 8007f36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	617b      	str	r3, [r7, #20]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01f      	beq.n	8007f9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61fb      	str	r3, [r7, #28]
 8007f62:	e012      	b.n	8007f8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	4413      	add	r3, r2
 8007f6a:	7819      	ldrb	r1, [r3, #0]
 8007f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	4413      	add	r3, r2
 8007f72:	3334      	adds	r3, #52	; 0x34
 8007f74:	460a      	mov	r2, r1
 8007f76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	3301      	adds	r3, #1
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	2b0f      	cmp	r3, #15
 8007f8e:	d9e9      	bls.n	8007f64 <prvInitialiseNewTask+0x64>
 8007f90:	e000      	b.n	8007f94 <prvInitialiseNewTask+0x94>
			{
				break;
 8007f92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f9c:	e003      	b.n	8007fa6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	2b37      	cmp	r3, #55	; 0x37
 8007faa:	d901      	bls.n	8007fb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fac:	2337      	movs	r3, #55	; 0x37
 8007fae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff f978 	bl	80072bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	3318      	adds	r3, #24
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff f973 	bl	80072bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	3354      	adds	r3, #84	; 0x54
 8008000:	2260      	movs	r2, #96	; 0x60
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f003 fed1 	bl	800bdac <memset>
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	4a0c      	ldr	r2, [pc, #48]	; (8008040 <prvInitialiseNewTask+0x140>)
 800800e:	659a      	str	r2, [r3, #88]	; 0x58
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	4a0c      	ldr	r2, [pc, #48]	; (8008044 <prvInitialiseNewTask+0x144>)
 8008014:	65da      	str	r2, [r3, #92]	; 0x5c
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	4a0b      	ldr	r2, [pc, #44]	; (8008048 <prvInitialiseNewTask+0x148>)
 800801a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	69b8      	ldr	r0, [r7, #24]
 8008022:	f001 f941 	bl	80092a8 <pxPortInitialiseStack>
 8008026:	4602      	mov	r2, r0
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008036:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008038:	bf00      	nop
 800803a:	3720      	adds	r7, #32
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	0800c8b8 	.word	0x0800c8b8
 8008044:	0800c8d8 	.word	0x0800c8d8
 8008048:	0800c898 	.word	0x0800c898

0800804c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008054:	f001 fa56 	bl	8009504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008058:	4b2d      	ldr	r3, [pc, #180]	; (8008110 <prvAddNewTaskToReadyList+0xc4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	4a2c      	ldr	r2, [pc, #176]	; (8008110 <prvAddNewTaskToReadyList+0xc4>)
 8008060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008062:	4b2c      	ldr	r3, [pc, #176]	; (8008114 <prvAddNewTaskToReadyList+0xc8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800806a:	4a2a      	ldr	r2, [pc, #168]	; (8008114 <prvAddNewTaskToReadyList+0xc8>)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008070:	4b27      	ldr	r3, [pc, #156]	; (8008110 <prvAddNewTaskToReadyList+0xc4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d110      	bne.n	800809a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008078:	f000 fc26 	bl	80088c8 <prvInitialiseTaskLists>
 800807c:	e00d      	b.n	800809a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800807e:	4b26      	ldr	r3, [pc, #152]	; (8008118 <prvAddNewTaskToReadyList+0xcc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008086:	4b23      	ldr	r3, [pc, #140]	; (8008114 <prvAddNewTaskToReadyList+0xc8>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	429a      	cmp	r2, r3
 8008092:	d802      	bhi.n	800809a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008094:	4a1f      	ldr	r2, [pc, #124]	; (8008114 <prvAddNewTaskToReadyList+0xc8>)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800809a:	4b20      	ldr	r3, [pc, #128]	; (800811c <prvAddNewTaskToReadyList+0xd0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	4a1e      	ldr	r2, [pc, #120]	; (800811c <prvAddNewTaskToReadyList+0xd0>)
 80080a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080a4:	4b1d      	ldr	r3, [pc, #116]	; (800811c <prvAddNewTaskToReadyList+0xd0>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	4b1b      	ldr	r3, [pc, #108]	; (8008120 <prvAddNewTaskToReadyList+0xd4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d903      	bls.n	80080c0 <prvAddNewTaskToReadyList+0x74>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	4a18      	ldr	r2, [pc, #96]	; (8008120 <prvAddNewTaskToReadyList+0xd4>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4a15      	ldr	r2, [pc, #84]	; (8008124 <prvAddNewTaskToReadyList+0xd8>)
 80080ce:	441a      	add	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f7ff f8fd 	bl	80072d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080dc:	f001 fa42 	bl	8009564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080e0:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <prvAddNewTaskToReadyList+0xcc>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00e      	beq.n	8008106 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080e8:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <prvAddNewTaskToReadyList+0xc8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d207      	bcs.n	8008106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <prvAddNewTaskToReadyList+0xdc>)
 80080f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20001308 	.word	0x20001308
 8008114:	20000e34 	.word	0x20000e34
 8008118:	20001314 	.word	0x20001314
 800811c:	20001324 	.word	0x20001324
 8008120:	20001310 	.word	0x20001310
 8008124:	20000e38 	.word	0x20000e38
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d017      	beq.n	800816e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <vTaskDelay+0x60>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <vTaskDelay+0x30>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	60bb      	str	r3, [r7, #8]
}
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800815c:	f000 f88a 	bl	8008274 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fcfe 	bl	8008b64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008168:	f000 f892 	bl	8008290 <xTaskResumeAll>
 800816c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d107      	bne.n	8008184 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008174:	4b06      	ldr	r3, [pc, #24]	; (8008190 <vTaskDelay+0x64>)
 8008176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20001330 	.word	0x20001330
 8008190:	e000ed04 	.word	0xe000ed04

08008194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	; 0x28
 8008198:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081a2:	463a      	mov	r2, r7
 80081a4:	1d39      	adds	r1, r7, #4
 80081a6:	f107 0308 	add.w	r3, r7, #8
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff f832 	bl	8007214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	9202      	str	r2, [sp, #8]
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	2300      	movs	r3, #0
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	2300      	movs	r3, #0
 80081c0:	460a      	mov	r2, r1
 80081c2:	4924      	ldr	r1, [pc, #144]	; (8008254 <vTaskStartScheduler+0xc0>)
 80081c4:	4824      	ldr	r0, [pc, #144]	; (8008258 <vTaskStartScheduler+0xc4>)
 80081c6:	f7ff fdf9 	bl	8007dbc <xTaskCreateStatic>
 80081ca:	4603      	mov	r3, r0
 80081cc:	4a23      	ldr	r2, [pc, #140]	; (800825c <vTaskStartScheduler+0xc8>)
 80081ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081d0:	4b22      	ldr	r3, [pc, #136]	; (800825c <vTaskStartScheduler+0xc8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081d8:	2301      	movs	r3, #1
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	e001      	b.n	80081e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d102      	bne.n	80081ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081e8:	f000 fd10 	bl	8008c0c <xTimerCreateTimerTask>
 80081ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d11b      	bne.n	800822c <vTaskStartScheduler+0x98>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	613b      	str	r3, [r7, #16]
}
 8008206:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <vTaskStartScheduler+0xcc>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3354      	adds	r3, #84	; 0x54
 800820e:	4a15      	ldr	r2, [pc, #84]	; (8008264 <vTaskStartScheduler+0xd0>)
 8008210:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008212:	4b15      	ldr	r3, [pc, #84]	; (8008268 <vTaskStartScheduler+0xd4>)
 8008214:	f04f 32ff 	mov.w	r2, #4294967295
 8008218:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800821a:	4b14      	ldr	r3, [pc, #80]	; (800826c <vTaskStartScheduler+0xd8>)
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008220:	4b13      	ldr	r3, [pc, #76]	; (8008270 <vTaskStartScheduler+0xdc>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008226:	f001 f8cb 	bl	80093c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800822a:	e00e      	b.n	800824a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d10a      	bne.n	800824a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60fb      	str	r3, [r7, #12]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <vTaskStartScheduler+0xb4>
}
 800824a:	bf00      	nop
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	0800c6e4 	.word	0x0800c6e4
 8008258:	08008899 	.word	0x08008899
 800825c:	2000132c 	.word	0x2000132c
 8008260:	20000e34 	.word	0x20000e34
 8008264:	20000638 	.word	0x20000638
 8008268:	20001328 	.word	0x20001328
 800826c:	20001314 	.word	0x20001314
 8008270:	2000130c 	.word	0x2000130c

08008274 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <vTaskSuspendAll+0x18>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	4a03      	ldr	r2, [pc, #12]	; (800828c <vTaskSuspendAll+0x18>)
 8008280:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008282:	bf00      	nop
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	20001330 	.word	0x20001330

08008290 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800829a:	2300      	movs	r3, #0
 800829c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800829e:	4b42      	ldr	r3, [pc, #264]	; (80083a8 <xTaskResumeAll+0x118>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10a      	bne.n	80082bc <xTaskResumeAll+0x2c>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	603b      	str	r3, [r7, #0]
}
 80082b8:	bf00      	nop
 80082ba:	e7fe      	b.n	80082ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082bc:	f001 f922 	bl	8009504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082c0:	4b39      	ldr	r3, [pc, #228]	; (80083a8 <xTaskResumeAll+0x118>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	4a38      	ldr	r2, [pc, #224]	; (80083a8 <xTaskResumeAll+0x118>)
 80082c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ca:	4b37      	ldr	r3, [pc, #220]	; (80083a8 <xTaskResumeAll+0x118>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d162      	bne.n	8008398 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082d2:	4b36      	ldr	r3, [pc, #216]	; (80083ac <xTaskResumeAll+0x11c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d05e      	beq.n	8008398 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082da:	e02f      	b.n	800833c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082dc:	4b34      	ldr	r3, [pc, #208]	; (80083b0 <xTaskResumeAll+0x120>)
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3318      	adds	r3, #24
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff f851 	bl	8007390 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff f84c 	bl	8007390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4b2d      	ldr	r3, [pc, #180]	; (80083b4 <xTaskResumeAll+0x124>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d903      	bls.n	800830c <xTaskResumeAll+0x7c>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	4a2a      	ldr	r2, [pc, #168]	; (80083b4 <xTaskResumeAll+0x124>)
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4a27      	ldr	r2, [pc, #156]	; (80083b8 <xTaskResumeAll+0x128>)
 800831a:	441a      	add	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe ffd7 	bl	80072d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832c:	4b23      	ldr	r3, [pc, #140]	; (80083bc <xTaskResumeAll+0x12c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008332:	429a      	cmp	r2, r3
 8008334:	d302      	bcc.n	800833c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008336:	4b22      	ldr	r3, [pc, #136]	; (80083c0 <xTaskResumeAll+0x130>)
 8008338:	2201      	movs	r2, #1
 800833a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800833c:	4b1c      	ldr	r3, [pc, #112]	; (80083b0 <xTaskResumeAll+0x120>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1cb      	bne.n	80082dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800834a:	f000 fb5f 	bl	8008a0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800834e:	4b1d      	ldr	r3, [pc, #116]	; (80083c4 <xTaskResumeAll+0x134>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d010      	beq.n	800837c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800835a:	f000 f847 	bl	80083ec <xTaskIncrementTick>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008364:	4b16      	ldr	r3, [pc, #88]	; (80083c0 <xTaskResumeAll+0x130>)
 8008366:	2201      	movs	r2, #1
 8008368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3b01      	subs	r3, #1
 800836e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1f1      	bne.n	800835a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <xTaskResumeAll+0x134>)
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800837c:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <xTaskResumeAll+0x130>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008388:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <xTaskResumeAll+0x138>)
 800838a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008398:	f001 f8e4 	bl	8009564 <vPortExitCritical>

	return xAlreadyYielded;
 800839c:	68bb      	ldr	r3, [r7, #8]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20001330 	.word	0x20001330
 80083ac:	20001308 	.word	0x20001308
 80083b0:	200012c8 	.word	0x200012c8
 80083b4:	20001310 	.word	0x20001310
 80083b8:	20000e38 	.word	0x20000e38
 80083bc:	20000e34 	.word	0x20000e34
 80083c0:	2000131c 	.word	0x2000131c
 80083c4:	20001318 	.word	0x20001318
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083d2:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <xTaskGetTickCount+0x1c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083d8:	687b      	ldr	r3, [r7, #4]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	2000130c 	.word	0x2000130c

080083ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083f2:	2300      	movs	r3, #0
 80083f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083f6:	4b4f      	ldr	r3, [pc, #316]	; (8008534 <xTaskIncrementTick+0x148>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 808f 	bne.w	800851e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008400:	4b4d      	ldr	r3, [pc, #308]	; (8008538 <xTaskIncrementTick+0x14c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008408:	4a4b      	ldr	r2, [pc, #300]	; (8008538 <xTaskIncrementTick+0x14c>)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d120      	bne.n	8008456 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008414:	4b49      	ldr	r3, [pc, #292]	; (800853c <xTaskIncrementTick+0x150>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <xTaskIncrementTick+0x48>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	603b      	str	r3, [r7, #0]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <xTaskIncrementTick+0x46>
 8008434:	4b41      	ldr	r3, [pc, #260]	; (800853c <xTaskIncrementTick+0x150>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	4b41      	ldr	r3, [pc, #260]	; (8008540 <xTaskIncrementTick+0x154>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a3f      	ldr	r2, [pc, #252]	; (800853c <xTaskIncrementTick+0x150>)
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	4a3f      	ldr	r2, [pc, #252]	; (8008540 <xTaskIncrementTick+0x154>)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	4b3e      	ldr	r3, [pc, #248]	; (8008544 <xTaskIncrementTick+0x158>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3301      	adds	r3, #1
 800844e:	4a3d      	ldr	r2, [pc, #244]	; (8008544 <xTaskIncrementTick+0x158>)
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	f000 fadb 	bl	8008a0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008456:	4b3c      	ldr	r3, [pc, #240]	; (8008548 <xTaskIncrementTick+0x15c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	429a      	cmp	r2, r3
 800845e:	d349      	bcc.n	80084f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008460:	4b36      	ldr	r3, [pc, #216]	; (800853c <xTaskIncrementTick+0x150>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d104      	bne.n	8008474 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846a:	4b37      	ldr	r3, [pc, #220]	; (8008548 <xTaskIncrementTick+0x15c>)
 800846c:	f04f 32ff 	mov.w	r2, #4294967295
 8008470:	601a      	str	r2, [r3, #0]
					break;
 8008472:	e03f      	b.n	80084f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008474:	4b31      	ldr	r3, [pc, #196]	; (800853c <xTaskIncrementTick+0x150>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	429a      	cmp	r2, r3
 800848a:	d203      	bcs.n	8008494 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800848c:	4a2e      	ldr	r2, [pc, #184]	; (8008548 <xTaskIncrementTick+0x15c>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008492:	e02f      	b.n	80084f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	3304      	adds	r3, #4
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe ff79 	bl	8007390 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	3318      	adds	r3, #24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe ff70 	bl	8007390 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4b25      	ldr	r3, [pc, #148]	; (800854c <xTaskIncrementTick+0x160>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d903      	bls.n	80084c4 <xTaskIncrementTick+0xd8>
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	4a22      	ldr	r2, [pc, #136]	; (800854c <xTaskIncrementTick+0x160>)
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <xTaskIncrementTick+0x164>)
 80084d2:	441a      	add	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f7fe fefb 	bl	80072d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e4:	4b1b      	ldr	r3, [pc, #108]	; (8008554 <xTaskIncrementTick+0x168>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d3b8      	bcc.n	8008460 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084ee:	2301      	movs	r3, #1
 80084f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f2:	e7b5      	b.n	8008460 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084f4:	4b17      	ldr	r3, [pc, #92]	; (8008554 <xTaskIncrementTick+0x168>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fa:	4915      	ldr	r1, [pc, #84]	; (8008550 <xTaskIncrementTick+0x164>)
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d901      	bls.n	8008510 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800850c:	2301      	movs	r3, #1
 800850e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008510:	4b11      	ldr	r3, [pc, #68]	; (8008558 <xTaskIncrementTick+0x16c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008518:	2301      	movs	r3, #1
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	e004      	b.n	8008528 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800851e:	4b0f      	ldr	r3, [pc, #60]	; (800855c <xTaskIncrementTick+0x170>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	4a0d      	ldr	r2, [pc, #52]	; (800855c <xTaskIncrementTick+0x170>)
 8008526:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008528:	697b      	ldr	r3, [r7, #20]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20001330 	.word	0x20001330
 8008538:	2000130c 	.word	0x2000130c
 800853c:	200012c0 	.word	0x200012c0
 8008540:	200012c4 	.word	0x200012c4
 8008544:	20001320 	.word	0x20001320
 8008548:	20001328 	.word	0x20001328
 800854c:	20001310 	.word	0x20001310
 8008550:	20000e38 	.word	0x20000e38
 8008554:	20000e34 	.word	0x20000e34
 8008558:	2000131c 	.word	0x2000131c
 800855c:	20001318 	.word	0x20001318

08008560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008566:	4b2a      	ldr	r3, [pc, #168]	; (8008610 <vTaskSwitchContext+0xb0>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800856e:	4b29      	ldr	r3, [pc, #164]	; (8008614 <vTaskSwitchContext+0xb4>)
 8008570:	2201      	movs	r2, #1
 8008572:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008574:	e046      	b.n	8008604 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008576:	4b27      	ldr	r3, [pc, #156]	; (8008614 <vTaskSwitchContext+0xb4>)
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800857c:	4b26      	ldr	r3, [pc, #152]	; (8008618 <vTaskSwitchContext+0xb8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e010      	b.n	80085a6 <vTaskSwitchContext+0x46>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10a      	bne.n	80085a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	607b      	str	r3, [r7, #4]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <vTaskSwitchContext+0x3e>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	491d      	ldr	r1, [pc, #116]	; (800861c <vTaskSwitchContext+0xbc>)
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0e4      	beq.n	8008584 <vTaskSwitchContext+0x24>
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4a15      	ldr	r2, [pc, #84]	; (800861c <vTaskSwitchContext+0xbc>)
 80085c6:	4413      	add	r3, r2
 80085c8:	60bb      	str	r3, [r7, #8]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	605a      	str	r2, [r3, #4]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	3308      	adds	r3, #8
 80085dc:	429a      	cmp	r2, r3
 80085de:	d104      	bne.n	80085ea <vTaskSwitchContext+0x8a>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	605a      	str	r2, [r3, #4]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	4a0b      	ldr	r2, [pc, #44]	; (8008620 <vTaskSwitchContext+0xc0>)
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	4a08      	ldr	r2, [pc, #32]	; (8008618 <vTaskSwitchContext+0xb8>)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085fa:	4b09      	ldr	r3, [pc, #36]	; (8008620 <vTaskSwitchContext+0xc0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3354      	adds	r3, #84	; 0x54
 8008600:	4a08      	ldr	r2, [pc, #32]	; (8008624 <vTaskSwitchContext+0xc4>)
 8008602:	6013      	str	r3, [r2, #0]
}
 8008604:	bf00      	nop
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	20001330 	.word	0x20001330
 8008614:	2000131c 	.word	0x2000131c
 8008618:	20001310 	.word	0x20001310
 800861c:	20000e38 	.word	0x20000e38
 8008620:	20000e34 	.word	0x20000e34
 8008624:	20000638 	.word	0x20000638

08008628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	60fb      	str	r3, [r7, #12]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800864e:	4b07      	ldr	r3, [pc, #28]	; (800866c <vTaskPlaceOnEventList+0x44>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3318      	adds	r3, #24
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7fe fe61 	bl	800731e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800865c:	2101      	movs	r1, #1
 800865e:	6838      	ldr	r0, [r7, #0]
 8008660:	f000 fa80 	bl	8008b64 <prvAddCurrentTaskToDelayedList>
}
 8008664:	bf00      	nop
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20000e34 	.word	0x20000e34

08008670 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	617b      	str	r3, [r7, #20]
}
 8008694:	bf00      	nop
 8008696:	e7fe      	b.n	8008696 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008698:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3318      	adds	r3, #24
 800869e:	4619      	mov	r1, r3
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7fe fe18 	bl	80072d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80086ac:	f04f 33ff 	mov.w	r3, #4294967295
 80086b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	68b8      	ldr	r0, [r7, #8]
 80086b6:	f000 fa55 	bl	8008b64 <prvAddCurrentTaskToDelayedList>
	}
 80086ba:	bf00      	nop
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000e34 	.word	0x20000e34

080086c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	60fb      	str	r3, [r7, #12]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	3318      	adds	r3, #24
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe fe49 	bl	8007390 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086fe:	4b1e      	ldr	r3, [pc, #120]	; (8008778 <xTaskRemoveFromEventList+0xb0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d11d      	bne.n	8008742 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3304      	adds	r3, #4
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fe40 	bl	8007390 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008714:	4b19      	ldr	r3, [pc, #100]	; (800877c <xTaskRemoveFromEventList+0xb4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	429a      	cmp	r2, r3
 800871a:	d903      	bls.n	8008724 <xTaskRemoveFromEventList+0x5c>
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	4a16      	ldr	r2, [pc, #88]	; (800877c <xTaskRemoveFromEventList+0xb4>)
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4a13      	ldr	r2, [pc, #76]	; (8008780 <xTaskRemoveFromEventList+0xb8>)
 8008732:	441a      	add	r2, r3
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	3304      	adds	r3, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f7fe fdcb 	bl	80072d6 <vListInsertEnd>
 8008740:	e005      	b.n	800874e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	3318      	adds	r3, #24
 8008746:	4619      	mov	r1, r3
 8008748:	480e      	ldr	r0, [pc, #56]	; (8008784 <xTaskRemoveFromEventList+0xbc>)
 800874a:	f7fe fdc4 	bl	80072d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <xTaskRemoveFromEventList+0xc0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008758:	429a      	cmp	r2, r3
 800875a:	d905      	bls.n	8008768 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800875c:	2301      	movs	r3, #1
 800875e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008760:	4b0a      	ldr	r3, [pc, #40]	; (800878c <xTaskRemoveFromEventList+0xc4>)
 8008762:	2201      	movs	r2, #1
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e001      	b.n	800876c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008768:	2300      	movs	r3, #0
 800876a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800876c:	697b      	ldr	r3, [r7, #20]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20001330 	.word	0x20001330
 800877c:	20001310 	.word	0x20001310
 8008780:	20000e38 	.word	0x20000e38
 8008784:	200012c8 	.word	0x200012c8
 8008788:	20000e34 	.word	0x20000e34
 800878c:	2000131c 	.word	0x2000131c

08008790 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008798:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <vTaskInternalSetTimeOutState+0x24>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087a0:	4b05      	ldr	r3, [pc, #20]	; (80087b8 <vTaskInternalSetTimeOutState+0x28>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	605a      	str	r2, [r3, #4]
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	20001320 	.word	0x20001320
 80087b8:	2000130c 	.word	0x2000130c

080087bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	613b      	str	r3, [r7, #16]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	60fb      	str	r3, [r7, #12]
}
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087fe:	f000 fe81 	bl	8009504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008802:	4b1d      	ldr	r3, [pc, #116]	; (8008878 <xTaskCheckForTimeOut+0xbc>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d102      	bne.n	8008822 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]
 8008820:	e023      	b.n	800886a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4b15      	ldr	r3, [pc, #84]	; (800887c <xTaskCheckForTimeOut+0xc0>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d007      	beq.n	800883e <xTaskCheckForTimeOut+0x82>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	429a      	cmp	r2, r3
 8008836:	d302      	bcc.n	800883e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008838:	2301      	movs	r3, #1
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	e015      	b.n	800886a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	429a      	cmp	r2, r3
 8008846:	d20b      	bcs.n	8008860 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff ff9b 	bl	8008790 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800885a:	2300      	movs	r3, #0
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	e004      	b.n	800886a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008866:	2301      	movs	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800886a:	f000 fe7b 	bl	8009564 <vPortExitCritical>

	return xReturn;
 800886e:	69fb      	ldr	r3, [r7, #28]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3720      	adds	r7, #32
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	2000130c 	.word	0x2000130c
 800887c:	20001320 	.word	0x20001320

08008880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008884:	4b03      	ldr	r3, [pc, #12]	; (8008894 <vTaskMissedYield+0x14>)
 8008886:	2201      	movs	r2, #1
 8008888:	601a      	str	r2, [r3, #0]
}
 800888a:	bf00      	nop
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	2000131c 	.word	0x2000131c

08008898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088a0:	f000 f852 	bl	8008948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088a4:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <prvIdleTask+0x28>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d9f9      	bls.n	80088a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <prvIdleTask+0x2c>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088bc:	e7f0      	b.n	80088a0 <prvIdleTask+0x8>
 80088be:	bf00      	nop
 80088c0:	20000e38 	.word	0x20000e38
 80088c4:	e000ed04 	.word	0xe000ed04

080088c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088ce:	2300      	movs	r3, #0
 80088d0:	607b      	str	r3, [r7, #4]
 80088d2:	e00c      	b.n	80088ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4a12      	ldr	r2, [pc, #72]	; (8008928 <prvInitialiseTaskLists+0x60>)
 80088e0:	4413      	add	r3, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fcca 	bl	800727c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3301      	adds	r3, #1
 80088ec:	607b      	str	r3, [r7, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b37      	cmp	r3, #55	; 0x37
 80088f2:	d9ef      	bls.n	80088d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088f4:	480d      	ldr	r0, [pc, #52]	; (800892c <prvInitialiseTaskLists+0x64>)
 80088f6:	f7fe fcc1 	bl	800727c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088fa:	480d      	ldr	r0, [pc, #52]	; (8008930 <prvInitialiseTaskLists+0x68>)
 80088fc:	f7fe fcbe 	bl	800727c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008900:	480c      	ldr	r0, [pc, #48]	; (8008934 <prvInitialiseTaskLists+0x6c>)
 8008902:	f7fe fcbb 	bl	800727c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008906:	480c      	ldr	r0, [pc, #48]	; (8008938 <prvInitialiseTaskLists+0x70>)
 8008908:	f7fe fcb8 	bl	800727c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800890c:	480b      	ldr	r0, [pc, #44]	; (800893c <prvInitialiseTaskLists+0x74>)
 800890e:	f7fe fcb5 	bl	800727c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008912:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <prvInitialiseTaskLists+0x78>)
 8008914:	4a05      	ldr	r2, [pc, #20]	; (800892c <prvInitialiseTaskLists+0x64>)
 8008916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <prvInitialiseTaskLists+0x7c>)
 800891a:	4a05      	ldr	r2, [pc, #20]	; (8008930 <prvInitialiseTaskLists+0x68>)
 800891c:	601a      	str	r2, [r3, #0]
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000e38 	.word	0x20000e38
 800892c:	20001298 	.word	0x20001298
 8008930:	200012ac 	.word	0x200012ac
 8008934:	200012c8 	.word	0x200012c8
 8008938:	200012dc 	.word	0x200012dc
 800893c:	200012f4 	.word	0x200012f4
 8008940:	200012c0 	.word	0x200012c0
 8008944:	200012c4 	.word	0x200012c4

08008948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800894e:	e019      	b.n	8008984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008950:	f000 fdd8 	bl	8009504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008954:	4b10      	ldr	r3, [pc, #64]	; (8008998 <prvCheckTasksWaitingTermination+0x50>)
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3304      	adds	r3, #4
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fd15 	bl	8007390 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <prvCheckTasksWaitingTermination+0x54>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3b01      	subs	r3, #1
 800896c:	4a0b      	ldr	r2, [pc, #44]	; (800899c <prvCheckTasksWaitingTermination+0x54>)
 800896e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008970:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <prvCheckTasksWaitingTermination+0x58>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3b01      	subs	r3, #1
 8008976:	4a0a      	ldr	r2, [pc, #40]	; (80089a0 <prvCheckTasksWaitingTermination+0x58>)
 8008978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800897a:	f000 fdf3 	bl	8009564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f810 	bl	80089a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <prvCheckTasksWaitingTermination+0x58>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e1      	bne.n	8008950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800898c:	bf00      	nop
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200012dc 	.word	0x200012dc
 800899c:	20001308 	.word	0x20001308
 80089a0:	200012f0 	.word	0x200012f0

080089a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3354      	adds	r3, #84	; 0x54
 80089b0:	4618      	mov	r0, r3
 80089b2:	f003 fabb 	bl	800bf2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d108      	bne.n	80089d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 ff8b 	bl	80098e0 <vPortFree>
				vPortFree( pxTCB );
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 ff88 	bl	80098e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089d0:	e018      	b.n	8008a04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d103      	bne.n	80089e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 ff7f 	bl	80098e0 <vPortFree>
	}
 80089e2:	e00f      	b.n	8008a04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d00a      	beq.n	8008a04 <prvDeleteTCB+0x60>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60fb      	str	r3, [r7, #12]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <prvDeleteTCB+0x5e>
	}
 8008a04:	bf00      	nop
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <prvResetNextTaskUnblockTime+0x38>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <prvResetNextTaskUnblockTime+0x3c>)
 8008a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a24:	e008      	b.n	8008a38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a26:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <prvResetNextTaskUnblockTime+0x38>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4a04      	ldr	r2, [pc, #16]	; (8008a48 <prvResetNextTaskUnblockTime+0x3c>)
 8008a36:	6013      	str	r3, [r2, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	200012c0 	.word	0x200012c0
 8008a48:	20001328 	.word	0x20001328

08008a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a52:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <xTaskGetSchedulerState+0x34>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	607b      	str	r3, [r7, #4]
 8008a5e:	e008      	b.n	8008a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a60:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <xTaskGetSchedulerState+0x38>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d102      	bne.n	8008a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	607b      	str	r3, [r7, #4]
 8008a6c:	e001      	b.n	8008a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a72:	687b      	ldr	r3, [r7, #4]
	}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	20001314 	.word	0x20001314
 8008a84:	20001330 	.word	0x20001330

08008a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d056      	beq.n	8008b4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a9e:	4b2e      	ldr	r3, [pc, #184]	; (8008b58 <xTaskPriorityDisinherit+0xd0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d00a      	beq.n	8008abe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60fb      	str	r3, [r7, #12]
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae0:	1e5a      	subs	r2, r3, #1
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d02c      	beq.n	8008b4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d128      	bne.n	8008b4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	3304      	adds	r3, #4
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fc46 	bl	8007390 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <xTaskPriorityDisinherit+0xd4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d903      	bls.n	8008b2c <xTaskPriorityDisinherit+0xa4>
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <xTaskPriorityDisinherit+0xd4>)
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4a09      	ldr	r2, [pc, #36]	; (8008b60 <xTaskPriorityDisinherit+0xd8>)
 8008b3a:	441a      	add	r2, r3
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4619      	mov	r1, r3
 8008b42:	4610      	mov	r0, r2
 8008b44:	f7fe fbc7 	bl	80072d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b4c:	697b      	ldr	r3, [r7, #20]
	}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000e34 	.word	0x20000e34
 8008b5c:	20001310 	.word	0x20001310
 8008b60:	20000e38 	.word	0x20000e38

08008b64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b6e:	4b21      	ldr	r3, [pc, #132]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b74:	4b20      	ldr	r3, [pc, #128]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fc08 	bl	8007390 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b86:	d10a      	bne.n	8008b9e <prvAddCurrentTaskToDelayedList+0x3a>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d007      	beq.n	8008b9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b8e:	4b1a      	ldr	r3, [pc, #104]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3304      	adds	r3, #4
 8008b94:	4619      	mov	r1, r3
 8008b96:	4819      	ldr	r0, [pc, #100]	; (8008bfc <prvAddCurrentTaskToDelayedList+0x98>)
 8008b98:	f7fe fb9d 	bl	80072d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b9c:	e026      	b.n	8008bec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d209      	bcs.n	8008bca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb6:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f7fe fbab 	bl	800731e <vListInsert>
}
 8008bc8:	e010      	b.n	8008bec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bca:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	f7fe fba1 	bl	800731e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	; (8008c08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d202      	bcs.n	8008bec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008be6:	4a08      	ldr	r2, [pc, #32]	; (8008c08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	6013      	str	r3, [r2, #0]
}
 8008bec:	bf00      	nop
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	2000130c 	.word	0x2000130c
 8008bf8:	20000e34 	.word	0x20000e34
 8008bfc:	200012f4 	.word	0x200012f4
 8008c00:	200012c4 	.word	0x200012c4
 8008c04:	200012c0 	.word	0x200012c0
 8008c08:	20001328 	.word	0x20001328

08008c0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08a      	sub	sp, #40	; 0x28
 8008c10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c16:	f000 fb07 	bl	8009228 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c1a:	4b1c      	ldr	r3, [pc, #112]	; (8008c8c <xTimerCreateTimerTask+0x80>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d021      	beq.n	8008c66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c2a:	1d3a      	adds	r2, r7, #4
 8008c2c:	f107 0108 	add.w	r1, r7, #8
 8008c30:	f107 030c 	add.w	r3, r7, #12
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe fb07 	bl	8007248 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	9202      	str	r2, [sp, #8]
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	2302      	movs	r3, #2
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	460a      	mov	r2, r1
 8008c4c:	4910      	ldr	r1, [pc, #64]	; (8008c90 <xTimerCreateTimerTask+0x84>)
 8008c4e:	4811      	ldr	r0, [pc, #68]	; (8008c94 <xTimerCreateTimerTask+0x88>)
 8008c50:	f7ff f8b4 	bl	8007dbc <xTaskCreateStatic>
 8008c54:	4603      	mov	r3, r0
 8008c56:	4a10      	ldr	r2, [pc, #64]	; (8008c98 <xTimerCreateTimerTask+0x8c>)
 8008c58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c5a:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <xTimerCreateTimerTask+0x8c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c62:	2301      	movs	r3, #1
 8008c64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	613b      	str	r3, [r7, #16]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c82:	697b      	ldr	r3, [r7, #20]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20001364 	.word	0x20001364
 8008c90:	0800c6ec 	.word	0x0800c6ec
 8008c94:	08008dd1 	.word	0x08008dd1
 8008c98:	20001368 	.word	0x20001368

08008c9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08a      	sub	sp, #40	; 0x28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xTimerGenericCommand+0x2e>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	623b      	str	r3, [r7, #32]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cca:	4b1a      	ldr	r3, [pc, #104]	; (8008d34 <xTimerGenericCommand+0x98>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d02a      	beq.n	8008d28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2b05      	cmp	r3, #5
 8008ce2:	dc18      	bgt.n	8008d16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ce4:	f7ff feb2 	bl	8008a4c <xTaskGetSchedulerState>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d109      	bne.n	8008d02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cee:	4b11      	ldr	r3, [pc, #68]	; (8008d34 <xTimerGenericCommand+0x98>)
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	f107 0110 	add.w	r1, r7, #16
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cfa:	f7fe fc77 	bl	80075ec <xQueueGenericSend>
 8008cfe:	6278      	str	r0, [r7, #36]	; 0x24
 8008d00:	e012      	b.n	8008d28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d02:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <xTimerGenericCommand+0x98>)
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	f107 0110 	add.w	r1, r7, #16
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f7fe fc6d 	bl	80075ec <xQueueGenericSend>
 8008d12:	6278      	str	r0, [r7, #36]	; 0x24
 8008d14:	e008      	b.n	8008d28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d16:	4b07      	ldr	r3, [pc, #28]	; (8008d34 <xTimerGenericCommand+0x98>)
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	f107 0110 	add.w	r1, r7, #16
 8008d1e:	2300      	movs	r3, #0
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	f7fe fd61 	bl	80077e8 <xQueueGenericSendFromISR>
 8008d26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3728      	adds	r7, #40	; 0x28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20001364 	.word	0x20001364

08008d38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af02      	add	r7, sp, #8
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d42:	4b22      	ldr	r3, [pc, #136]	; (8008dcc <prvProcessExpiredTimer+0x94>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe fb1d 	bl	8007390 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d022      	beq.n	8008daa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	699a      	ldr	r2, [r3, #24]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	18d1      	adds	r1, r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	6978      	ldr	r0, [r7, #20]
 8008d72:	f000 f8d1 	bl	8008f18 <prvInsertTimerInActiveList>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01f      	beq.n	8008dbc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	2300      	movs	r3, #0
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	2100      	movs	r1, #0
 8008d86:	6978      	ldr	r0, [r7, #20]
 8008d88:	f7ff ff88 	bl	8008c9c <xTimerGenericCommand>
 8008d8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d113      	bne.n	8008dbc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	60fb      	str	r3, [r7, #12]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008db0:	f023 0301 	bic.w	r3, r3, #1
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	6978      	ldr	r0, [r7, #20]
 8008dc2:	4798      	blx	r3
}
 8008dc4:	bf00      	nop
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	2000135c 	.word	0x2000135c

08008dd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dd8:	f107 0308 	add.w	r3, r7, #8
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 f857 	bl	8008e90 <prvGetNextExpireTime>
 8008de2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	4619      	mov	r1, r3
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f803 	bl	8008df4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dee:	f000 f8d5 	bl	8008f9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008df2:	e7f1      	b.n	8008dd8 <prvTimerTask+0x8>

08008df4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dfe:	f7ff fa39 	bl	8008274 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e02:	f107 0308 	add.w	r3, r7, #8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 f866 	bl	8008ed8 <prvSampleTimeNow>
 8008e0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d130      	bne.n	8008e76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <prvProcessTimerOrBlockTask+0x3c>
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d806      	bhi.n	8008e30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e22:	f7ff fa35 	bl	8008290 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff ff85 	bl	8008d38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e2e:	e024      	b.n	8008e7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d008      	beq.n	8008e48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e36:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <prvProcessTimerOrBlockTask+0x90>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <prvProcessTimerOrBlockTask+0x50>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e000      	b.n	8008e46 <prvProcessTimerOrBlockTask+0x52>
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <prvProcessTimerOrBlockTask+0x94>)
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	4619      	mov	r1, r3
 8008e56:	f7fe ff7d 	bl	8007d54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e5a:	f7ff fa19 	bl	8008290 <xTaskResumeAll>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e64:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <prvProcessTimerOrBlockTask+0x98>)
 8008e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	f3bf 8f6f 	isb	sy
}
 8008e74:	e001      	b.n	8008e7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e76:	f7ff fa0b 	bl	8008290 <xTaskResumeAll>
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20001360 	.word	0x20001360
 8008e88:	20001364 	.word	0x20001364
 8008e8c:	e000ed04 	.word	0xe000ed04

08008e90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e98:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <prvGetNextExpireTime+0x44>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <prvGetNextExpireTime+0x16>
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	e000      	b.n	8008ea8 <prvGetNextExpireTime+0x18>
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d105      	bne.n	8008ec0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eb4:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <prvGetNextExpireTime+0x44>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e001      	b.n	8008ec4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	2000135c 	.word	0x2000135c

08008ed8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ee0:	f7ff fa74 	bl	80083cc <xTaskGetTickCount>
 8008ee4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ee6:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <prvSampleTimeNow+0x3c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d205      	bcs.n	8008efc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ef0:	f000 f936 	bl	8009160 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	e002      	b.n	8008f02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f02:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <prvSampleTimeNow+0x3c>)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f08:	68fb      	ldr	r3, [r7, #12]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2000136c 	.word	0x2000136c

08008f18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d812      	bhi.n	8008f64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	1ad2      	subs	r2, r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d302      	bcc.n	8008f52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	e01b      	b.n	8008f8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f52:	4b10      	ldr	r3, [pc, #64]	; (8008f94 <prvInsertTimerInActiveList+0x7c>)
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	f7fe f9de 	bl	800731e <vListInsert>
 8008f62:	e012      	b.n	8008f8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d206      	bcs.n	8008f7a <prvInsertTimerInActiveList+0x62>
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d302      	bcc.n	8008f7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f74:	2301      	movs	r3, #1
 8008f76:	617b      	str	r3, [r7, #20]
 8008f78:	e007      	b.n	8008f8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f7a:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <prvInsertTimerInActiveList+0x80>)
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3304      	adds	r3, #4
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f7fe f9ca 	bl	800731e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f8a:	697b      	ldr	r3, [r7, #20]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20001360 	.word	0x20001360
 8008f98:	2000135c 	.word	0x2000135c

08008f9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08e      	sub	sp, #56	; 0x38
 8008fa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fa2:	e0ca      	b.n	800913a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	da18      	bge.n	8008fdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008faa:	1d3b      	adds	r3, r7, #4
 8008fac:	3304      	adds	r3, #4
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10a      	bne.n	8008fcc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	61fb      	str	r3, [r7, #28]
}
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd2:	6850      	ldr	r0, [r2, #4]
 8008fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd6:	6892      	ldr	r2, [r2, #8]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f2c0 80aa 	blt.w	8009138 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe f9cb 	bl	8007390 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7ff ff6b 	bl	8008ed8 <prvSampleTimeNow>
 8009002:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b09      	cmp	r3, #9
 8009008:	f200 8097 	bhi.w	800913a <prvProcessReceivedCommands+0x19e>
 800900c:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <prvProcessReceivedCommands+0x78>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	0800903d 	.word	0x0800903d
 8009018:	0800903d 	.word	0x0800903d
 800901c:	0800903d 	.word	0x0800903d
 8009020:	080090b1 	.word	0x080090b1
 8009024:	080090c5 	.word	0x080090c5
 8009028:	0800910f 	.word	0x0800910f
 800902c:	0800903d 	.word	0x0800903d
 8009030:	0800903d 	.word	0x0800903d
 8009034:	080090b1 	.word	0x080090b1
 8009038:	080090c5 	.word	0x080090c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009042:	f043 0301 	orr.w	r3, r3, #1
 8009046:	b2da      	uxtb	r2, r3
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	18d1      	adds	r1, r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800905a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905c:	f7ff ff5c 	bl	8008f18 <prvInsertTimerInActiveList>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d069      	beq.n	800913a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800906c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05e      	beq.n	800913a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	441a      	add	r2, r3
 8009084:	2300      	movs	r3, #0
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2300      	movs	r3, #0
 800908a:	2100      	movs	r1, #0
 800908c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800908e:	f7ff fe05 	bl	8008c9c <xTimerGenericCommand>
 8009092:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d14f      	bne.n	800913a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	61bb      	str	r3, [r7, #24]
}
 80090ac:	bf00      	nop
 80090ae:	e7fe      	b.n	80090ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b6:	f023 0301 	bic.w	r3, r3, #1
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090c2:	e03a      	b.n	800913a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090ca:	f043 0301 	orr.w	r3, r3, #1
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10a      	bne.n	80090fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	617b      	str	r3, [r7, #20]
}
 80090f6:	bf00      	nop
 80090f8:	e7fe      	b.n	80090f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fc:	699a      	ldr	r2, [r3, #24]
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	18d1      	adds	r1, r2, r3
 8009102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009108:	f7ff ff06 	bl	8008f18 <prvInsertTimerInActiveList>
					break;
 800910c:	e015      	b.n	800913a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d103      	bne.n	8009124 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800911c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800911e:	f000 fbdf 	bl	80098e0 <vPortFree>
 8009122:	e00a      	b.n	800913a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800912a:	f023 0301 	bic.w	r3, r3, #1
 800912e:	b2da      	uxtb	r2, r3
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009136:	e000      	b.n	800913a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009138:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800913a:	4b08      	ldr	r3, [pc, #32]	; (800915c <prvProcessReceivedCommands+0x1c0>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	1d39      	adds	r1, r7, #4
 8009140:	2200      	movs	r2, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe fbec 	bl	8007920 <xQueueReceive>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	f47f af2a 	bne.w	8008fa4 <prvProcessReceivedCommands+0x8>
	}
}
 8009150:	bf00      	nop
 8009152:	bf00      	nop
 8009154:	3730      	adds	r7, #48	; 0x30
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20001364 	.word	0x20001364

08009160 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009166:	e048      	b.n	80091fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009168:	4b2d      	ldr	r3, [pc, #180]	; (8009220 <prvSwitchTimerLists+0xc0>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009172:	4b2b      	ldr	r3, [pc, #172]	; (8009220 <prvSwitchTimerLists+0xc0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3304      	adds	r3, #4
 8009180:	4618      	mov	r0, r3
 8009182:	f7fe f905 	bl	8007390 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009194:	f003 0304 	and.w	r3, r3, #4
 8009198:	2b00      	cmp	r3, #0
 800919a:	d02e      	beq.n	80091fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	4413      	add	r3, r2
 80091a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d90e      	bls.n	80091cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091ba:	4b19      	ldr	r3, [pc, #100]	; (8009220 <prvSwitchTimerLists+0xc0>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4619      	mov	r1, r3
 80091c4:	4610      	mov	r0, r2
 80091c6:	f7fe f8aa 	bl	800731e <vListInsert>
 80091ca:	e016      	b.n	80091fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091cc:	2300      	movs	r3, #0
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	2300      	movs	r3, #0
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	2100      	movs	r1, #0
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f7ff fd60 	bl	8008c9c <xTimerGenericCommand>
 80091dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	603b      	str	r3, [r7, #0]
}
 80091f6:	bf00      	nop
 80091f8:	e7fe      	b.n	80091f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091fa:	4b09      	ldr	r3, [pc, #36]	; (8009220 <prvSwitchTimerLists+0xc0>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1b1      	bne.n	8009168 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009204:	4b06      	ldr	r3, [pc, #24]	; (8009220 <prvSwitchTimerLists+0xc0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800920a:	4b06      	ldr	r3, [pc, #24]	; (8009224 <prvSwitchTimerLists+0xc4>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a04      	ldr	r2, [pc, #16]	; (8009220 <prvSwitchTimerLists+0xc0>)
 8009210:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009212:	4a04      	ldr	r2, [pc, #16]	; (8009224 <prvSwitchTimerLists+0xc4>)
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	6013      	str	r3, [r2, #0]
}
 8009218:	bf00      	nop
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	2000135c 	.word	0x2000135c
 8009224:	20001360 	.word	0x20001360

08009228 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800922e:	f000 f969 	bl	8009504 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009232:	4b15      	ldr	r3, [pc, #84]	; (8009288 <prvCheckForValidListAndQueue+0x60>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d120      	bne.n	800927c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800923a:	4814      	ldr	r0, [pc, #80]	; (800928c <prvCheckForValidListAndQueue+0x64>)
 800923c:	f7fe f81e 	bl	800727c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009240:	4813      	ldr	r0, [pc, #76]	; (8009290 <prvCheckForValidListAndQueue+0x68>)
 8009242:	f7fe f81b 	bl	800727c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009246:	4b13      	ldr	r3, [pc, #76]	; (8009294 <prvCheckForValidListAndQueue+0x6c>)
 8009248:	4a10      	ldr	r2, [pc, #64]	; (800928c <prvCheckForValidListAndQueue+0x64>)
 800924a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800924c:	4b12      	ldr	r3, [pc, #72]	; (8009298 <prvCheckForValidListAndQueue+0x70>)
 800924e:	4a10      	ldr	r2, [pc, #64]	; (8009290 <prvCheckForValidListAndQueue+0x68>)
 8009250:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009252:	2300      	movs	r3, #0
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	4b11      	ldr	r3, [pc, #68]	; (800929c <prvCheckForValidListAndQueue+0x74>)
 8009258:	4a11      	ldr	r2, [pc, #68]	; (80092a0 <prvCheckForValidListAndQueue+0x78>)
 800925a:	2110      	movs	r1, #16
 800925c:	200a      	movs	r0, #10
 800925e:	f7fe f929 	bl	80074b4 <xQueueGenericCreateStatic>
 8009262:	4603      	mov	r3, r0
 8009264:	4a08      	ldr	r2, [pc, #32]	; (8009288 <prvCheckForValidListAndQueue+0x60>)
 8009266:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009268:	4b07      	ldr	r3, [pc, #28]	; (8009288 <prvCheckForValidListAndQueue+0x60>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <prvCheckForValidListAndQueue+0x60>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	490b      	ldr	r1, [pc, #44]	; (80092a4 <prvCheckForValidListAndQueue+0x7c>)
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fd42 	bl	8007d00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800927c:	f000 f972 	bl	8009564 <vPortExitCritical>
}
 8009280:	bf00      	nop
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20001364 	.word	0x20001364
 800928c:	20001334 	.word	0x20001334
 8009290:	20001348 	.word	0x20001348
 8009294:	2000135c 	.word	0x2000135c
 8009298:	20001360 	.word	0x20001360
 800929c:	20001410 	.word	0x20001410
 80092a0:	20001370 	.word	0x20001370
 80092a4:	0800c6f4 	.word	0x0800c6f4

080092a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3b04      	subs	r3, #4
 80092b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3b04      	subs	r3, #4
 80092c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f023 0201 	bic.w	r2, r3, #1
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3b04      	subs	r3, #4
 80092d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092d8:	4a0c      	ldr	r2, [pc, #48]	; (800930c <pxPortInitialiseStack+0x64>)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3b14      	subs	r3, #20
 80092e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3b04      	subs	r3, #4
 80092ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f06f 0202 	mvn.w	r2, #2
 80092f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3b20      	subs	r3, #32
 80092fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092fe:	68fb      	ldr	r3, [r7, #12]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	08009311 	.word	0x08009311

08009310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800931a:	4b12      	ldr	r3, [pc, #72]	; (8009364 <prvTaskExitError+0x54>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009322:	d00a      	beq.n	800933a <prvTaskExitError+0x2a>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	60fb      	str	r3, [r7, #12]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <prvTaskExitError+0x28>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	60bb      	str	r3, [r7, #8]
}
 800934c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800934e:	bf00      	nop
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0fc      	beq.n	8009350 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	20000008 	.word	0x20000008
	...

08009370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <pxCurrentTCBConst2>)
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	f380 8809 	msr	PSP, r0
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8811 	msr	BASEPRI, r0
 800938a:	4770      	bx	lr
 800938c:	f3af 8000 	nop.w

08009390 <pxCurrentTCBConst2>:
 8009390:	20000e34 	.word	0x20000e34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009398:	4808      	ldr	r0, [pc, #32]	; (80093bc <prvPortStartFirstTask+0x24>)
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	6800      	ldr	r0, [r0, #0]
 800939e:	f380 8808 	msr	MSP, r0
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8814 	msr	CONTROL, r0
 80093aa:	b662      	cpsie	i
 80093ac:	b661      	cpsie	f
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	df00      	svc	0
 80093b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ba:	bf00      	nop
 80093bc:	e000ed08 	.word	0xe000ed08

080093c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093c6:	4b46      	ldr	r3, [pc, #280]	; (80094e0 <xPortStartScheduler+0x120>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a46      	ldr	r2, [pc, #280]	; (80094e4 <xPortStartScheduler+0x124>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d10a      	bne.n	80093e6 <xPortStartScheduler+0x26>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	613b      	str	r3, [r7, #16]
}
 80093e2:	bf00      	nop
 80093e4:	e7fe      	b.n	80093e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093e6:	4b3e      	ldr	r3, [pc, #248]	; (80094e0 <xPortStartScheduler+0x120>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a3f      	ldr	r2, [pc, #252]	; (80094e8 <xPortStartScheduler+0x128>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10a      	bne.n	8009406 <xPortStartScheduler+0x46>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009406:	4b39      	ldr	r3, [pc, #228]	; (80094ec <xPortStartScheduler+0x12c>)
 8009408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	22ff      	movs	r2, #255	; 0xff
 8009416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009428:	b2da      	uxtb	r2, r3
 800942a:	4b31      	ldr	r3, [pc, #196]	; (80094f0 <xPortStartScheduler+0x130>)
 800942c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800942e:	4b31      	ldr	r3, [pc, #196]	; (80094f4 <xPortStartScheduler+0x134>)
 8009430:	2207      	movs	r2, #7
 8009432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009434:	e009      	b.n	800944a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009436:	4b2f      	ldr	r3, [pc, #188]	; (80094f4 <xPortStartScheduler+0x134>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3b01      	subs	r3, #1
 800943c:	4a2d      	ldr	r2, [pc, #180]	; (80094f4 <xPortStartScheduler+0x134>)
 800943e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	b2db      	uxtb	r3, r3
 8009448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009452:	2b80      	cmp	r3, #128	; 0x80
 8009454:	d0ef      	beq.n	8009436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009456:	4b27      	ldr	r3, [pc, #156]	; (80094f4 <xPortStartScheduler+0x134>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f1c3 0307 	rsb	r3, r3, #7
 800945e:	2b04      	cmp	r3, #4
 8009460:	d00a      	beq.n	8009478 <xPortStartScheduler+0xb8>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	60bb      	str	r3, [r7, #8]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009478:	4b1e      	ldr	r3, [pc, #120]	; (80094f4 <xPortStartScheduler+0x134>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <xPortStartScheduler+0x134>)
 8009480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <xPortStartScheduler+0x134>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800948a:	4a1a      	ldr	r2, [pc, #104]	; (80094f4 <xPortStartScheduler+0x134>)
 800948c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	b2da      	uxtb	r2, r3
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009496:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <xPortStartScheduler+0x138>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a17      	ldr	r2, [pc, #92]	; (80094f8 <xPortStartScheduler+0x138>)
 800949c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <xPortStartScheduler+0x138>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a14      	ldr	r2, [pc, #80]	; (80094f8 <xPortStartScheduler+0x138>)
 80094a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094ae:	f000 f8dd 	bl	800966c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094b2:	4b12      	ldr	r3, [pc, #72]	; (80094fc <xPortStartScheduler+0x13c>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094b8:	f000 f8fc 	bl	80096b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094bc:	4b10      	ldr	r3, [pc, #64]	; (8009500 <xPortStartScheduler+0x140>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a0f      	ldr	r2, [pc, #60]	; (8009500 <xPortStartScheduler+0x140>)
 80094c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094c8:	f7ff ff66 	bl	8009398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094cc:	f7ff f848 	bl	8008560 <vTaskSwitchContext>
	prvTaskExitError();
 80094d0:	f7ff ff1e 	bl	8009310 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	e000ed00 	.word	0xe000ed00
 80094e4:	410fc271 	.word	0x410fc271
 80094e8:	410fc270 	.word	0x410fc270
 80094ec:	e000e400 	.word	0xe000e400
 80094f0:	20001460 	.word	0x20001460
 80094f4:	20001464 	.word	0x20001464
 80094f8:	e000ed20 	.word	0xe000ed20
 80094fc:	20000008 	.word	0x20000008
 8009500:	e000ef34 	.word	0xe000ef34

08009504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	607b      	str	r3, [r7, #4]
}
 800951c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800951e:	4b0f      	ldr	r3, [pc, #60]	; (800955c <vPortEnterCritical+0x58>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3301      	adds	r3, #1
 8009524:	4a0d      	ldr	r2, [pc, #52]	; (800955c <vPortEnterCritical+0x58>)
 8009526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <vPortEnterCritical+0x58>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d10f      	bne.n	8009550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009530:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <vPortEnterCritical+0x5c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00a      	beq.n	8009550 <vPortEnterCritical+0x4c>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	603b      	str	r3, [r7, #0]
}
 800954c:	bf00      	nop
 800954e:	e7fe      	b.n	800954e <vPortEnterCritical+0x4a>
	}
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	20000008 	.word	0x20000008
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800956a:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <vPortExitCritical+0x50>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <vPortExitCritical+0x24>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	607b      	str	r3, [r7, #4]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009588:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <vPortExitCritical+0x50>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3b01      	subs	r3, #1
 800958e:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <vPortExitCritical+0x50>)
 8009590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009592:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <vPortExitCritical+0x50>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <vPortExitCritical+0x42>
 800959a:	2300      	movs	r3, #0
 800959c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	f383 8811 	msr	BASEPRI, r3
}
 80095a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000008 	.word	0x20000008
	...

080095c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095c0:	f3ef 8009 	mrs	r0, PSP
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	4b15      	ldr	r3, [pc, #84]	; (8009620 <pxCurrentTCBConst>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	f01e 0f10 	tst.w	lr, #16
 80095d0:	bf08      	it	eq
 80095d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095da:	6010      	str	r0, [r2, #0]
 80095dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095e4:	f380 8811 	msr	BASEPRI, r0
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f7fe ffb6 	bl	8008560 <vTaskSwitchContext>
 80095f4:	f04f 0000 	mov.w	r0, #0
 80095f8:	f380 8811 	msr	BASEPRI, r0
 80095fc:	bc09      	pop	{r0, r3}
 80095fe:	6819      	ldr	r1, [r3, #0]
 8009600:	6808      	ldr	r0, [r1, #0]
 8009602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009606:	f01e 0f10 	tst.w	lr, #16
 800960a:	bf08      	it	eq
 800960c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009610:	f380 8809 	msr	PSP, r0
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	f3af 8000 	nop.w

08009620 <pxCurrentTCBConst>:
 8009620:	20000e34 	.word	0x20000e34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop

08009628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	607b      	str	r3, [r7, #4]
}
 8009640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009642:	f7fe fed3 	bl	80083ec <xTaskIncrementTick>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <xPortSysTickHandler+0x40>)
 800964e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	f383 8811 	msr	BASEPRI, r3
}
 800965e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	e000ed04 	.word	0xe000ed04

0800966c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009670:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <vPortSetupTimerInterrupt+0x34>)
 8009672:	2200      	movs	r2, #0
 8009674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009676:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <vPortSetupTimerInterrupt+0x38>)
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800967c:	4b0a      	ldr	r3, [pc, #40]	; (80096a8 <vPortSetupTimerInterrupt+0x3c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <vPortSetupTimerInterrupt+0x40>)
 8009682:	fba2 2303 	umull	r2, r3, r2, r3
 8009686:	099b      	lsrs	r3, r3, #6
 8009688:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <vPortSetupTimerInterrupt+0x44>)
 800968a:	3b01      	subs	r3, #1
 800968c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <vPortSetupTimerInterrupt+0x34>)
 8009690:	2207      	movs	r2, #7
 8009692:	601a      	str	r2, [r3, #0]
}
 8009694:	bf00      	nop
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	e000e010 	.word	0xe000e010
 80096a4:	e000e018 	.word	0xe000e018
 80096a8:	20000624 	.word	0x20000624
 80096ac:	10624dd3 	.word	0x10624dd3
 80096b0:	e000e014 	.word	0xe000e014

080096b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096c4 <vPortEnableVFP+0x10>
 80096b8:	6801      	ldr	r1, [r0, #0]
 80096ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096be:	6001      	str	r1, [r0, #0]
 80096c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096c2:	bf00      	nop
 80096c4:	e000ed88 	.word	0xe000ed88

080096c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096ce:	f3ef 8305 	mrs	r3, IPSR
 80096d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b0f      	cmp	r3, #15
 80096d8:	d914      	bls.n	8009704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096da:	4a17      	ldr	r2, [pc, #92]	; (8009738 <vPortValidateInterruptPriority+0x70>)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096e4:	4b15      	ldr	r3, [pc, #84]	; (800973c <vPortValidateInterruptPriority+0x74>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	7afa      	ldrb	r2, [r7, #11]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d20a      	bcs.n	8009704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	607b      	str	r3, [r7, #4]
}
 8009700:	bf00      	nop
 8009702:	e7fe      	b.n	8009702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009704:	4b0e      	ldr	r3, [pc, #56]	; (8009740 <vPortValidateInterruptPriority+0x78>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800970c:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <vPortValidateInterruptPriority+0x7c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	429a      	cmp	r2, r3
 8009712:	d90a      	bls.n	800972a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	603b      	str	r3, [r7, #0]
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <vPortValidateInterruptPriority+0x60>
	}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	e000e3f0 	.word	0xe000e3f0
 800973c:	20001460 	.word	0x20001460
 8009740:	e000ed0c 	.word	0xe000ed0c
 8009744:	20001464 	.word	0x20001464

08009748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009754:	f7fe fd8e 	bl	8008274 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009758:	4b5b      	ldr	r3, [pc, #364]	; (80098c8 <pvPortMalloc+0x180>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009760:	f000 f920 	bl	80099a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009764:	4b59      	ldr	r3, [pc, #356]	; (80098cc <pvPortMalloc+0x184>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4013      	ands	r3, r2
 800976c:	2b00      	cmp	r3, #0
 800976e:	f040 8093 	bne.w	8009898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d01d      	beq.n	80097b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009778:	2208      	movs	r2, #8
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4413      	add	r3, r2
 800977e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	2b00      	cmp	r3, #0
 8009788:	d014      	beq.n	80097b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f023 0307 	bic.w	r3, r3, #7
 8009790:	3308      	adds	r3, #8
 8009792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <pvPortMalloc+0x6c>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	617b      	str	r3, [r7, #20]
}
 80097b0:	bf00      	nop
 80097b2:	e7fe      	b.n	80097b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d06e      	beq.n	8009898 <pvPortMalloc+0x150>
 80097ba:	4b45      	ldr	r3, [pc, #276]	; (80098d0 <pvPortMalloc+0x188>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d869      	bhi.n	8009898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097c4:	4b43      	ldr	r3, [pc, #268]	; (80098d4 <pvPortMalloc+0x18c>)
 80097c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097c8:	4b42      	ldr	r3, [pc, #264]	; (80098d4 <pvPortMalloc+0x18c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097ce:	e004      	b.n	80097da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d903      	bls.n	80097ec <pvPortMalloc+0xa4>
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1f1      	bne.n	80097d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097ec:	4b36      	ldr	r3, [pc, #216]	; (80098c8 <pvPortMalloc+0x180>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d050      	beq.n	8009898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2208      	movs	r2, #8
 80097fc:	4413      	add	r3, r2
 80097fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	1ad2      	subs	r2, r2, r3
 8009810:	2308      	movs	r3, #8
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	429a      	cmp	r2, r3
 8009816:	d91f      	bls.n	8009858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4413      	add	r3, r2
 800981e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <pvPortMalloc+0xf8>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	613b      	str	r3, [r7, #16]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	1ad2      	subs	r2, r2, r3
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009852:	69b8      	ldr	r0, [r7, #24]
 8009854:	f000 f908 	bl	8009a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009858:	4b1d      	ldr	r3, [pc, #116]	; (80098d0 <pvPortMalloc+0x188>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <pvPortMalloc+0x188>)
 8009864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009866:	4b1a      	ldr	r3, [pc, #104]	; (80098d0 <pvPortMalloc+0x188>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	4b1b      	ldr	r3, [pc, #108]	; (80098d8 <pvPortMalloc+0x190>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d203      	bcs.n	800987a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009872:	4b17      	ldr	r3, [pc, #92]	; (80098d0 <pvPortMalloc+0x188>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a18      	ldr	r2, [pc, #96]	; (80098d8 <pvPortMalloc+0x190>)
 8009878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	4b13      	ldr	r3, [pc, #76]	; (80098cc <pvPortMalloc+0x184>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	431a      	orrs	r2, r3
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800988e:	4b13      	ldr	r3, [pc, #76]	; (80098dc <pvPortMalloc+0x194>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	4a11      	ldr	r2, [pc, #68]	; (80098dc <pvPortMalloc+0x194>)
 8009896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009898:	f7fe fcfa 	bl	8008290 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00a      	beq.n	80098bc <pvPortMalloc+0x174>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60fb      	str	r3, [r7, #12]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <pvPortMalloc+0x172>
	return pvReturn;
 80098bc:	69fb      	ldr	r3, [r7, #28]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3728      	adds	r7, #40	; 0x28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20002028 	.word	0x20002028
 80098cc:	2000203c 	.word	0x2000203c
 80098d0:	2000202c 	.word	0x2000202c
 80098d4:	20002020 	.word	0x20002020
 80098d8:	20002030 	.word	0x20002030
 80098dc:	20002034 	.word	0x20002034

080098e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d04d      	beq.n	800998e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098f2:	2308      	movs	r3, #8
 80098f4:	425b      	negs	r3, r3
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	4413      	add	r3, r2
 80098fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	4b24      	ldr	r3, [pc, #144]	; (8009998 <vPortFree+0xb8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4013      	ands	r3, r2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <vPortFree+0x44>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	60fb      	str	r3, [r7, #12]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00a      	beq.n	8009942 <vPortFree+0x62>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60bb      	str	r3, [r7, #8]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <vPortFree+0xb8>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4013      	ands	r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01e      	beq.n	800998e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d11a      	bne.n	800998e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <vPortFree+0xb8>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	43db      	mvns	r3, r3
 8009962:	401a      	ands	r2, r3
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009968:	f7fe fc84 	bl	8008274 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	4b0a      	ldr	r3, [pc, #40]	; (800999c <vPortFree+0xbc>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4413      	add	r3, r2
 8009976:	4a09      	ldr	r2, [pc, #36]	; (800999c <vPortFree+0xbc>)
 8009978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800997a:	6938      	ldr	r0, [r7, #16]
 800997c:	f000 f874 	bl	8009a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009980:	4b07      	ldr	r3, [pc, #28]	; (80099a0 <vPortFree+0xc0>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3301      	adds	r3, #1
 8009986:	4a06      	ldr	r2, [pc, #24]	; (80099a0 <vPortFree+0xc0>)
 8009988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800998a:	f7fe fc81 	bl	8008290 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800998e:	bf00      	nop
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	2000203c 	.word	0x2000203c
 800999c:	2000202c 	.word	0x2000202c
 80099a0:	20002038 	.word	0x20002038

080099a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80099ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099b0:	4b27      	ldr	r3, [pc, #156]	; (8009a50 <prvHeapInit+0xac>)
 80099b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00c      	beq.n	80099d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3307      	adds	r3, #7
 80099c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	4a1f      	ldr	r2, [pc, #124]	; (8009a50 <prvHeapInit+0xac>)
 80099d4:	4413      	add	r3, r2
 80099d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099dc:	4a1d      	ldr	r2, [pc, #116]	; (8009a54 <prvHeapInit+0xb0>)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099e2:	4b1c      	ldr	r3, [pc, #112]	; (8009a54 <prvHeapInit+0xb0>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	4413      	add	r3, r2
 80099ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099f0:	2208      	movs	r2, #8
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f023 0307 	bic.w	r3, r3, #7
 80099fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4a15      	ldr	r2, [pc, #84]	; (8009a58 <prvHeapInit+0xb4>)
 8009a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a06:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <prvHeapInit+0xb4>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a0e:	4b12      	ldr	r3, [pc, #72]	; (8009a58 <prvHeapInit+0xb4>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	1ad2      	subs	r2, r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a24:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <prvHeapInit+0xb4>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <prvHeapInit+0xb8>)
 8009a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <prvHeapInit+0xbc>)
 8009a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <prvHeapInit+0xc0>)
 8009a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a42:	601a      	str	r2, [r3, #0]
}
 8009a44:	bf00      	nop
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	20001468 	.word	0x20001468
 8009a54:	20002020 	.word	0x20002020
 8009a58:	20002028 	.word	0x20002028
 8009a5c:	20002030 	.word	0x20002030
 8009a60:	2000202c 	.word	0x2000202c
 8009a64:	2000203c 	.word	0x2000203c

08009a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a70:	4b28      	ldr	r3, [pc, #160]	; (8009b14 <prvInsertBlockIntoFreeList+0xac>)
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	e002      	b.n	8009a7c <prvInsertBlockIntoFreeList+0x14>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d8f7      	bhi.n	8009a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	4413      	add	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d108      	bne.n	8009aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	441a      	add	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d118      	bne.n	8009af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d00d      	beq.n	8009ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	441a      	add	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	e008      	b.n	8009af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ae6:	4b0c      	ldr	r3, [pc, #48]	; (8009b18 <prvInsertBlockIntoFreeList+0xb0>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e003      	b.n	8009af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d002      	beq.n	8009b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b06:	bf00      	nop
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	20002020 	.word	0x20002020
 8009b18:	20002028 	.word	0x20002028

08009b1c <_print>:
extern uint8_t tetromino_current[];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _print() {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, buf, 80, 0xFFFF);
 8009b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b24:	2250      	movs	r2, #80	; 0x50
 8009b26:	4903      	ldr	r1, [pc, #12]	; (8009b34 <_print+0x18>)
 8009b28:	4803      	ldr	r0, [pc, #12]	; (8009b38 <_print+0x1c>)
 8009b2a:	f7fb fa3b 	bl	8004fa4 <HAL_UART_Transmit>
}
 8009b2e:	bf00      	nop
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200005d0 	.word	0x200005d0
 8009b38:	2000225c 	.word	0x2000225c

08009b3c <hello_world>:
void clear() {
	sprintf(buf, empty);
//	_print();
}

void hello_world() {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
	sprintf(buf, "Hello, World!");
 8009b40:	4903      	ldr	r1, [pc, #12]	; (8009b50 <hello_world+0x14>)
 8009b42:	4804      	ldr	r0, [pc, #16]	; (8009b54 <hello_world+0x18>)
 8009b44:	f002 fa5e 	bl	800c004 <siprintf>
	_print();
 8009b48:	f7ff ffe8 	bl	8009b1c <_print>
}
 8009b4c:	bf00      	nop
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	0800c714 	.word	0x0800c714
 8009b54:	200005d0 	.word	0x200005d0

08009b58 <create_window>:
	_print();
}


// create window, as well as initializes tetris game
void create_window(Window * window) {
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
    // initialize window
    window->width = IMAGE_WIDTH;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2250      	movs	r2, #80	; 0x50
 8009b64:	601a      	str	r2, [r3, #0]
    window->height = IMAGE_HEIGHT;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009b6c:	605a      	str	r2, [r3, #4]

    window->frame = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8009b6e:	f240 7004 	movw	r0, #1796	; 0x704
 8009b72:	f002 f905 	bl	800bd80 <malloc>
 8009b76:	4603      	mov	r3, r0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	609a      	str	r2, [r3, #8]
    window->true  = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8009b7e:	f240 7004 	movw	r0, #1796	; 0x704
 8009b82:	f002 f8fd 	bl	800bd80 <malloc>
 8009b86:	4603      	mov	r3, r0
 8009b88:	461a      	mov	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60da      	str	r2, [r3, #12]

    // Fill image buffers with default value
    for(int i = 0; i < vert_size; i++) {
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	e03e      	b.n	8009c12 <create_window+0xba>
		// Point to place in continuous mem location
    	window->frame[i] = window->frameBuff + i*horiz_size;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f103 0210 	add.w	r2, r3, #16
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2164      	movs	r1, #100	; 0x64
 8009b9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6899      	ldr	r1, [r3, #8]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	4402      	add	r2, r0
 8009bb0:	601a      	str	r2, [r3, #0]
    	window->true[i]  = window->trueBuff  + i*horiz_size;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 8009bb8:	33fc      	adds	r3, #252	; 0xfc
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	2164      	movs	r1, #100	; 0x64
 8009bbe:	fb01 f202 	mul.w	r2, r1, r2
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	68d1      	ldr	r1, [r2, #12]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	0092      	lsls	r2, r2, #2
 8009bcc:	440a      	add	r2, r1
 8009bce:	4403      	add	r3, r0
 8009bd0:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < horiz_size; j++) {
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60bb      	str	r3, [r7, #8]
 8009bd6:	e016      	b.n	8009c06 <create_window+0xae>
			window->frame[i][j] = 0;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	4413      	add	r3, r2
 8009be8:	2200      	movs	r2, #0
 8009bea:	701a      	strb	r2, [r3, #0]
			window->true[i][j] = 0;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < horiz_size; j++) {
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	3301      	adds	r3, #1
 8009c04:	60bb      	str	r3, [r7, #8]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2b63      	cmp	r3, #99	; 0x63
 8009c0a:	dde5      	ble.n	8009bd8 <create_window+0x80>
    for(int i = 0; i < vert_size; i++) {
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	60fb      	str	r3, [r7, #12]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8009c18:	ddbc      	ble.n	8009b94 <create_window+0x3c>
		}
    }

    // initialize tetris game board
    tetris_initialize_game(window);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 f9f0 	bl	800b000 <tetris_initialize_game>
}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <game_playing>:
 * @brief Use when the tetris game is playing. (state machine -> game)
 *
 * @param window window that is being used
 * @param event user input
 */
void game_playing(Window* window, game_input_t event) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af04      	add	r7, sp, #16
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	2b05      	cmp	r3, #5
 8009c38:	d10a      	bne.n	8009c50 <game_playing+0x28>
    	window->game.state = Paused;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8009c40:	33f4      	adds	r3, #244	; 0xf4
 8009c42:	2202      	movs	r2, #2
 8009c44:	701a      	strb	r2, [r3, #0]
    	game_paused(window, INPUT_ERROR);
 8009c46:	2106      	movs	r1, #6
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f86d 	bl	8009d28 <game_paused>
        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
        drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
        tetris_write_points(window);
    }

}
 8009c4e:	e065      	b.n	8009d1c <game_playing+0xf4>
        switch (event) {
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	2b06      	cmp	r3, #6
 8009c54:	d824      	bhi.n	8009ca0 <game_playing+0x78>
 8009c56:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <game_playing+0x34>)
 8009c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5c:	08009c99 	.word	0x08009c99
 8009c60:	08009c89 	.word	0x08009c89
 8009c64:	08009c91 	.word	0x08009c91
 8009c68:	08009c79 	.word	0x08009c79
 8009c6c:	08009c81 	.word	0x08009c81
 8009c70:	08009ca1 	.word	0x08009ca1
 8009c74:	08009ca1 	.word	0x08009ca1
                tetris_move_left(window);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 fb55 	bl	800b328 <tetris_move_left>
            break;
 8009c7e:	e010      	b.n	8009ca2 <game_playing+0x7a>
                tetris_move_right(window);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f001 fb72 	bl	800b36a <tetris_move_right>
            break;
 8009c86:	e00c      	b.n	8009ca2 <game_playing+0x7a>
                tetris_rotate_C_tetromino(window);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fac9 	bl	800b220 <tetris_rotate_C_tetromino>
            break;
 8009c8e:	e008      	b.n	8009ca2 <game_playing+0x7a>
                tetris_rotate_CC_tetromino(window);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 fb07 	bl	800b2a4 <tetris_rotate_CC_tetromino>
            break;
 8009c96:	e004      	b.n	8009ca2 <game_playing+0x7a>
                tetris_move_down(window);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fb86 	bl	800b3aa <tetris_move_down>
            break;
 8009c9e:	e000      	b.n	8009ca2 <game_playing+0x7a>
            break;
 8009ca0:	bf00      	nop
        drawRect_color(window, 0, 0, window->width, window->height, HORIZ_SCALE, VERT_SCALE, 150);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	2196      	movs	r1, #150	; 0x96
 8009cac:	9103      	str	r1, [sp, #12]
 8009cae:	210c      	movs	r1, #12
 8009cb0:	9102      	str	r1, [sp, #8]
 8009cb2:	2103      	movs	r1, #3
 8009cb4:	9101      	str	r1, [sp, #4]
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 ffb8 	bl	800bc34 <drawRect_color>
        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8009cca:	3304      	adds	r3, #4
 8009ccc:	9303      	str	r3, [sp, #12]
 8009cce:	230c      	movs	r3, #12
 8009cd0:	9302      	str	r3, [sp, #8]
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	2318      	movs	r3, #24
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	230a      	movs	r3, #10
 8009cdc:	2205      	movs	r2, #5
 8009cde:	2101      	movs	r1, #1
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 ff17 	bl	800bb14 <drawRect>
        drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 8009cec:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	1c59      	adds	r1, r3, #1
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	1d5a      	adds	r2, r3, #5
 8009cfe:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <game_playing+0xfc>)
 8009d00:	9303      	str	r3, [sp, #12]
 8009d02:	230c      	movs	r3, #12
 8009d04:	9302      	str	r3, [sp, #8]
 8009d06:	2303      	movs	r3, #3
 8009d08:	9301      	str	r3, [sp, #4]
 8009d0a:	2304      	movs	r3, #4
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	2304      	movs	r3, #4
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 feff 	bl	800bb14 <drawRect>
        tetris_write_points(window);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 f954 	bl	800afc4 <tetris_write_points>
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20000628 	.word	0x20000628

08009d28 <game_paused>:
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 * @param event user input
 */
void game_paused(Window* window, game_input_t event) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af04      	add	r7, sp, #16
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	2b05      	cmp	r3, #5
 8009d38:	d10a      	bne.n	8009d50 <game_paused+0x28>
    	window->game.state = Playing;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8009d40:	33f4      	adds	r3, #244	; 0xf4
 8009d42:	2201      	movs	r2, #1
 8009d44:	701a      	strb	r2, [r3, #0]
    	game_playing(window, INPUT_ERROR);
 8009d46:	2106      	movs	r1, #6
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff ff6d 	bl	8009c28 <game_playing>
        // draw game board
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 50);
        print_str(window, "Press Space", 2, 10);
        print_str(window, "To Continue", 2, 70);
    }
}
 8009d4e:	e01c      	b.n	8009d8a <game_paused+0x62>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 50);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	2132      	movs	r1, #50	; 0x32
 8009d5a:	9103      	str	r1, [sp, #12]
 8009d5c:	210a      	movs	r1, #10
 8009d5e:	9102      	str	r1, [sp, #8]
 8009d60:	2104      	movs	r1, #4
 8009d62:	9101      	str	r1, [sp, #4]
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4613      	mov	r3, r2
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 ff61 	bl	800bc34 <drawRect_color>
        print_str(window, "Press Space", 2, 10);
 8009d72:	230a      	movs	r3, #10
 8009d74:	2202      	movs	r2, #2
 8009d76:	4907      	ldr	r1, [pc, #28]	; (8009d94 <game_paused+0x6c>)
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f893 	bl	8009ea4 <print_str>
        print_str(window, "To Continue", 2, 70);
 8009d7e:	2346      	movs	r3, #70	; 0x46
 8009d80:	2202      	movs	r2, #2
 8009d82:	4905      	ldr	r1, [pc, #20]	; (8009d98 <game_paused+0x70>)
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f88d 	bl	8009ea4 <print_str>
}
 8009d8a:	bf00      	nop
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	0800c7a0 	.word	0x0800c7a0
 8009d98:	0800c7ac 	.word	0x0800c7ac

08009d9c <game_start>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_start(Window* window, game_input_t event) {
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af04      	add	r7, sp, #16
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	2b05      	cmp	r3, #5
 8009dac:	d10a      	bne.n	8009dc4 <game_start+0x28>
    	window->game.state = Playing;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8009db4:	33f4      	adds	r3, #244	; 0xf4
 8009db6:	2201      	movs	r2, #1
 8009db8:	701a      	strb	r2, [r3, #0]
    	game_playing(window, INPUT_ERROR);
 8009dba:	2106      	movs	r1, #6
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff ff33 	bl	8009c28 <game_playing>
        print_str(window, "Welcome To", 2, 10);
        print_str(window, "Tetris!", 20, 110);
        print_str(window, "Press Space", 2, 210);
        print_str(window, "To Continue", 2, 270);
    }
}
 8009dc2:	e029      	b.n	8009e18 <game_start+0x7c>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 80);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	2150      	movs	r1, #80	; 0x50
 8009dce:	9103      	str	r1, [sp, #12]
 8009dd0:	210a      	movs	r1, #10
 8009dd2:	9102      	str	r1, [sp, #8]
 8009dd4:	2104      	movs	r1, #4
 8009dd6:	9101      	str	r1, [sp, #4]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2100      	movs	r1, #0
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 ff27 	bl	800bc34 <drawRect_color>
        print_str(window, "Welcome To", 2, 10);
 8009de6:	230a      	movs	r3, #10
 8009de8:	2202      	movs	r2, #2
 8009dea:	490d      	ldr	r1, [pc, #52]	; (8009e20 <game_start+0x84>)
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f859 	bl	8009ea4 <print_str>
        print_str(window, "Tetris!", 20, 110);
 8009df2:	236e      	movs	r3, #110	; 0x6e
 8009df4:	2214      	movs	r2, #20
 8009df6:	490b      	ldr	r1, [pc, #44]	; (8009e24 <game_start+0x88>)
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f853 	bl	8009ea4 <print_str>
        print_str(window, "Press Space", 2, 210);
 8009dfe:	23d2      	movs	r3, #210	; 0xd2
 8009e00:	2202      	movs	r2, #2
 8009e02:	4909      	ldr	r1, [pc, #36]	; (8009e28 <game_start+0x8c>)
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f84d 	bl	8009ea4 <print_str>
        print_str(window, "To Continue", 2, 270);
 8009e0a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8009e0e:	2202      	movs	r2, #2
 8009e10:	4906      	ldr	r1, [pc, #24]	; (8009e2c <game_start+0x90>)
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f846 	bl	8009ea4 <print_str>
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	0800c7b8 	.word	0x0800c7b8
 8009e24:	0800c7c4 	.word	0x0800c7c4
 8009e28:	0800c7a0 	.word	0x0800c7a0
 8009e2c:	0800c7ac 	.word	0x0800c7ac

08009e30 <game_ended>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_ended(Window* window, game_input_t event) {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
	if (event == TOGGLEPAUSE) {
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	2b05      	cmp	r3, #5
 8009e40:	d10a      	bne.n	8009e58 <game_ended+0x28>
		window->game.state = Start;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8009e48:	33f4      	adds	r3, #244	; 0xf4
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	701a      	strb	r2, [r3, #0]
		game_start(window, INPUT_ERROR);
 8009e4e:	2106      	movs	r1, #6
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff ffa3 	bl	8009d9c <game_start>
		tetris_draw_endScreen(window);
	}



}
 8009e56:	e002      	b.n	8009e5e <game_ended+0x2e>
		tetris_draw_endScreen(window);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fb45 	bl	800b4e8 <tetris_draw_endScreen>
}
 8009e5e:	bf00      	nop
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <swap_buffer>:
/**
 * @brief Swap the image buffers.
 *
 * @param window window with the image buffers.
 */
void swap_buffer(Window * window) {
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	// Swap pointers
	uint8_t** tmp = window->true;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	60fb      	str	r3, [r7, #12]
	window->true = window->frame;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60da      	str	r2, [r3, #12]
	window->frame = tmp;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	609a      	str	r2, [r3, #8]
//	clear_buffer();
	// Change DMA memory address
	hdac1.DMA_Handle1->Instance->CMAR = (uint32_t) window->true[0];
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <swap_buffer+0x38>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60da      	str	r2, [r3, #12]
}
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20002194 	.word	0x20002194

08009ea4 <print_str>:

void print_str(Window * window, char* buffer, int x, int y) {
 8009ea4:	b480      	push	{r7}
 8009ea6:	b08b      	sub	sp, #44	; 0x2c
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	603b      	str	r3, [r7, #0]

	x += 3; // Avoid back porch
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3303      	adds	r3, #3
 8009eb6:	607b      	str	r3, [r7, #4]
	y += 70;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	3346      	adds	r3, #70	; 0x46
 8009ebc:	603b      	str	r3, [r7, #0]

	char cur_char = buffer[0];
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(cur_char >= 97) cur_char -= 32;
 8009ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eca:	2b60      	cmp	r3, #96	; 0x60
 8009ecc:	d904      	bls.n	8009ed8 <print_str+0x34>
 8009ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ed2:	3b20      	subs	r3, #32
 8009ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	623b      	str	r3, [r7, #32]
	while(cur_char != '\0') {
 8009edc:	e073      	b.n	8009fc6 <print_str+0x122>
		char* bitmap = font_map[cur_char - 32]; // 32 = ' '
 8009ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ee2:	f1a3 0220 	sub.w	r2, r3, #32
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	009a      	lsls	r2, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	4a3a      	ldr	r2, [pc, #232]	; (8009fdc <print_str+0x138>)
 8009ef2:	4413      	add	r3, r2
 8009ef4:	617b      	str	r3, [r7, #20]
		// y-value precursor
		for(int h = 0; h < 70; h++) {
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	e04c      	b.n	8009f96 <print_str+0xf2>
			for (int w = 0; w < 7; w++) {
 8009efc:	2300      	movs	r3, #0
 8009efe:	61bb      	str	r3, [r7, #24]
 8009f00:	e043      	b.n	8009f8a <print_str+0xe6>
				// Pre- and Post- empty space on x & y
				if (h < 10 || w == 0 || h >= 60 || w == 6) {
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	2b09      	cmp	r3, #9
 8009f06:	dd08      	ble.n	8009f1a <print_str+0x76>
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d005      	beq.n	8009f1a <print_str+0x76>
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	2b3b      	cmp	r3, #59	; 0x3b
 8009f12:	dc02      	bgt.n	8009f1a <print_str+0x76>
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2b06      	cmp	r3, #6
 8009f18:	d10e      	bne.n	8009f38 <print_str+0x94>
					window->frame[y+h][x+w] = 80;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	440b      	add	r3, r1
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	440a      	add	r2, r1
 8009f30:	4413      	add	r3, r2
 8009f32:	2250      	movs	r2, #80	; 0x50
 8009f34:	701a      	strb	r2, [r3, #0]
					continue;
 8009f36:	e025      	b.n	8009f84 <print_str+0xe0>
				}
				int array_index = ((h-10)/10) * 5 + (w-1); // h/10 = floor division, to stretch
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	3b0a      	subs	r3, #10
 8009f3c:	4a28      	ldr	r2, [pc, #160]	; (8009fe0 <print_str+0x13c>)
 8009f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8009f42:	1092      	asrs	r2, r2, #2
 8009f44:	17db      	asrs	r3, r3, #31
 8009f46:	1ad2      	subs	r2, r2, r3
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	441a      	add	r2, r3
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	4413      	add	r3, r2
 8009f54:	613b      	str	r3, [r7, #16]
				window->frame[y+h][x+w] = bitmap[array_index] ? 190 : 80;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <print_str+0xc2>
 8009f62:	20be      	movs	r0, #190	; 0xbe
 8009f64:	e000      	b.n	8009f68 <print_str+0xc4>
 8009f66:	2050      	movs	r0, #80	; 0x50
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	689a      	ldr	r2, [r3, #8]
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	440b      	add	r3, r1
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	69ba      	ldr	r2, [r7, #24]
 8009f7c:	440a      	add	r2, r1
 8009f7e:	4413      	add	r3, r2
 8009f80:	4602      	mov	r2, r0
 8009f82:	701a      	strb	r2, [r3, #0]
			for (int w = 0; w < 7; w++) {
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	3301      	adds	r3, #1
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b06      	cmp	r3, #6
 8009f8e:	ddb8      	ble.n	8009f02 <print_str+0x5e>
		for(int h = 0; h < 70; h++) {
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	3301      	adds	r3, #1
 8009f94:	61fb      	str	r3, [r7, #28]
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	2b45      	cmp	r3, #69	; 0x45
 8009f9a:	ddaf      	ble.n	8009efc <print_str+0x58>
			}
		}
		x += 7; // 1 pre, 5 char, 1 post
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3307      	adds	r3, #7
 8009fa0:	607b      	str	r3, [r7, #4]
		i++;
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	623b      	str	r3, [r7, #32]
		cur_char = buffer[i];
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	4413      	add	r3, r2
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//'a' -> 'A' for example
		if(cur_char >= 97) cur_char -= 32;
 8009fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fb8:	2b60      	cmp	r3, #96	; 0x60
 8009fba:	d904      	bls.n	8009fc6 <print_str+0x122>
 8009fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc0:	3b20      	subs	r3, #32
 8009fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(cur_char != '\0') {
 8009fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d187      	bne.n	8009ede <print_str+0x3a>
	}
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	372c      	adds	r7, #44	; 0x2c
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	2000000c 	.word	0x2000000c
 8009fe0:	66666667 	.word	0x66666667

08009fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 8009fea:	2300      	movs	r3, #0
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	e007      	b.n	800a000 <main+0x1c>
	    input_buffer[i] = INPUT_ERROR;
 8009ff0:	4a30      	ldr	r2, [pc, #192]	; (800a0b4 <main+0xd0>)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	2206      	movs	r2, #6
 8009ff8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	607b      	str	r3, [r7, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b04      	cmp	r3, #4
 800a004:	ddf4      	ble.n	8009ff0 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a006:	f7f6 fdd5 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a00a:	f000 f86f 	bl	800a0ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a00e:	f000 fb43 	bl	800a698 <MX_GPIO_Init>
  MX_DMA_Init();
 800a012:	f000 fb0f 	bl	800a634 <MX_DMA_Init>
  MX_DAC1_Init();
 800a016:	f000 f8bb 	bl	800a190 <MX_DAC1_Init>

  MX_TIM4_Init();
 800a01a:	f000 fa1d 	bl	800a458 <MX_TIM4_Init>
  MX_TIM2_Init();
 800a01e:	f000 f94f 	bl	800a2c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800a022:	f000 f8f5 	bl	800a210 <MX_TIM1_Init>
  MX_TIM3_Init();
 800a026:	f000 f9c7 	bl	800a3b8 <MX_TIM3_Init>
  MX_TIM8_Init();
 800a02a:	f000 fa63 	bl	800a4f4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800a02e:	f000 fab5 	bl	800a59c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  create_window(&window);
 800a032:	4821      	ldr	r0, [pc, #132]	; (800a0b8 <main+0xd4>)
 800a034:	f7ff fd90 	bl	8009b58 <create_window>

  // Fill the frame buffer
  //init_buffer(window.imgBuff1, window.imgBuff2);
  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 800a038:	4820      	ldr	r0, [pc, #128]	; (800a0bc <main+0xd8>)
 800a03a:	f7f9 fcbb 	bl	80039b4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800a03e:	2064      	movs	r0, #100	; 0x64
 800a040:	f7f6 fdf0 	bl	8000c24 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 800a044:	210c      	movs	r1, #12
 800a046:	481e      	ldr	r0, [pc, #120]	; (800a0c0 <main+0xdc>)
 800a048:	f7f9 fd86 	bl	8003b58 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 800a04c:	2064      	movs	r0, #100	; 0x64
 800a04e:	f7f6 fde9 	bl	8000c24 <HAL_Delay>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) window.true[0], horiz_size*vert_size, DAC_ALIGN_8B_R);
 800a052:	4b19      	ldr	r3, [pc, #100]	; (800a0b8 <main+0xd4>)
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	2308      	movs	r3, #8
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	f64a 7364 	movw	r3, #44900	; 0xaf64
 800a060:	2100      	movs	r1, #0
 800a062:	4818      	ldr	r0, [pc, #96]	; (800a0c4 <main+0xe0>)
 800a064:	f7f6 ff06 	bl	8000e74 <HAL_DAC_Start_DMA>
  HAL_Delay(100);
 800a068:	2064      	movs	r0, #100	; 0x64
 800a06a:	f7f6 fddb 	bl	8000c24 <HAL_Delay>
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 800a06e:	4816      	ldr	r0, [pc, #88]	; (800a0c8 <main+0xe4>)
 800a070:	f7f9 fc38 	bl	80038e4 <HAL_TIM_Base_Start>
  HAL_Delay(100);
 800a074:	2064      	movs	r0, #100	; 0x64
 800a076:	f7f6 fdd5 	bl	8000c24 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800a07a:	2201      	movs	r2, #1
 800a07c:	4913      	ldr	r1, [pc, #76]	; (800a0cc <main+0xe8>)
 800a07e:	4814      	ldr	r0, [pc, #80]	; (800a0d0 <main+0xec>)
 800a080:	f7fb f828 	bl	80050d4 <HAL_UART_Receive_IT>
  HAL_Delay(100);
 800a084:	2064      	movs	r0, #100	; 0x64
 800a086:	f7f6 fdcd 	bl	8000c24 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800a08a:	f7fc ffcb 	bl	8007024 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of frameTask */
  frameTaskHandle = osThreadNew(updateGameLogic, NULL, &frameTask_attributes);
 800a08e:	4a11      	ldr	r2, [pc, #68]	; (800a0d4 <main+0xf0>)
 800a090:	2100      	movs	r1, #0
 800a092:	4811      	ldr	r0, [pc, #68]	; (800a0d8 <main+0xf4>)
 800a094:	f7fd f810 	bl	80070b8 <osThreadNew>
 800a098:	4603      	mov	r3, r0
 800a09a:	4a10      	ldr	r2, [pc, #64]	; (800a0dc <main+0xf8>)
 800a09c:	6013      	str	r3, [r2, #0]

  /* creation of soundTask */
  soundTaskHandle = osThreadNew(soundController, NULL, &soundTask_attributes);
 800a09e:	4a10      	ldr	r2, [pc, #64]	; (800a0e0 <main+0xfc>)
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4810      	ldr	r0, [pc, #64]	; (800a0e4 <main+0x100>)
 800a0a4:	f7fd f808 	bl	80070b8 <osThreadNew>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	4a0f      	ldr	r2, [pc, #60]	; (800a0e8 <main+0x104>)
 800a0ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800a0ae:	f7fc ffdd 	bl	800706c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800a0b2:	e7fe      	b.n	800a0b2 <main+0xce>
 800a0b4:	20002254 	.word	0x20002254
 800a0b8:	20002388 	.word	0x20002388
 800a0bc:	200022f0 	.word	0x200022f0
 800a0c0:	2000233c 	.word	0x2000233c
 800a0c4:	20002194 	.word	0x20002194
 800a0c8:	20002148 	.word	0x20002148
 800a0cc:	20000620 	.word	0x20000620
 800a0d0:	2000225c 	.word	0x2000225c
 800a0d4:	0800c7f8 	.word	0x0800c7f8
 800a0d8:	0800a8f9 	.word	0x0800a8f9
 800a0dc:	2001aa80 	.word	0x2001aa80
 800a0e0:	0800c81c 	.word	0x0800c81c
 800a0e4:	0800a979 	.word	0x0800a979
 800a0e8:	200022ec 	.word	0x200022ec

0800a0ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b096      	sub	sp, #88	; 0x58
 800a0f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a0f2:	f107 0314 	add.w	r3, r7, #20
 800a0f6:	2244      	movs	r2, #68	; 0x44
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f001 fe56 	bl	800bdac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a100:	463b      	mov	r3, r7
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	605a      	str	r2, [r3, #4]
 800a108:	609a      	str	r2, [r3, #8]
 800a10a:	60da      	str	r2, [r3, #12]
 800a10c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a10e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a112:	f7f7 fec9 	bl	8001ea8 <HAL_PWREx_ControlVoltageScaling>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800a11c:	f000 fc76 	bl	800aa0c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a120:	2310      	movs	r3, #16
 800a122:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a124:	2301      	movs	r3, #1
 800a126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a12c:	2360      	movs	r3, #96	; 0x60
 800a12e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a130:	2302      	movs	r3, #2
 800a132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a134:	2301      	movs	r3, #1
 800a136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a138:	2301      	movs	r3, #1
 800a13a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800a13c:	2328      	movs	r3, #40	; 0x28
 800a13e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a140:	2302      	movs	r3, #2
 800a142:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a144:	2302      	movs	r3, #2
 800a146:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a148:	2302      	movs	r3, #2
 800a14a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a14c:	f107 0314 	add.w	r3, r7, #20
 800a150:	4618      	mov	r0, r3
 800a152:	f7f7 ff4d 	bl	8001ff0 <HAL_RCC_OscConfig>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800a15c:	f000 fc56 	bl	800aa0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a160:	230f      	movs	r3, #15
 800a162:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a164:	2303      	movs	r3, #3
 800a166:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a168:	2300      	movs	r3, #0
 800a16a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800a174:	463b      	mov	r3, r7
 800a176:	2103      	movs	r1, #3
 800a178:	4618      	mov	r0, r3
 800a17a:	f7f8 fb5f 	bl	800283c <HAL_RCC_ClockConfig>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800a184:	f000 fc42 	bl	800aa0c <Error_Handler>
  }
}
 800a188:	bf00      	nop
 800a18a:	3758      	adds	r7, #88	; 0x58
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08a      	sub	sp, #40	; 0x28
 800a194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a196:	463b      	mov	r3, r7
 800a198:	2228      	movs	r2, #40	; 0x28
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 fe05 	bl	800bdac <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a1a2:	4b19      	ldr	r3, [pc, #100]	; (800a208 <MX_DAC1_Init+0x78>)
 800a1a4:	4a19      	ldr	r2, [pc, #100]	; (800a20c <MX_DAC1_Init+0x7c>)
 800a1a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a1a8:	4817      	ldr	r0, [pc, #92]	; (800a208 <MX_DAC1_Init+0x78>)
 800a1aa:	f7f6 fe41 	bl	8000e30 <HAL_DAC_Init>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a1b4:	f000 fc2a 	bl	800aa0c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800a1bc:	230e      	movs	r3, #14
 800a1be:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	480c      	ldr	r0, [pc, #48]	; (800a208 <MX_DAC1_Init+0x78>)
 800a1d8:	f7f6 ff9a 	bl	8001110 <HAL_DAC_ConfigChannel>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800a1e2:	f000 fc13 	bl	800aa0c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800a1e6:	231e      	movs	r3, #30
 800a1e8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800a1ea:	463b      	mov	r3, r7
 800a1ec:	2210      	movs	r2, #16
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4805      	ldr	r0, [pc, #20]	; (800a208 <MX_DAC1_Init+0x78>)
 800a1f2:	f7f6 ff8d 	bl	8001110 <HAL_DAC_ConfigChannel>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 800a1fc:	f000 fc06 	bl	800aa0c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 800a200:	bf00      	nop
 800a202:	3728      	adds	r7, #40	; 0x28
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20002194 	.word	0x20002194
 800a20c:	40007400 	.word	0x40007400

0800a210 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a216:	f107 030c 	add.w	r3, r7, #12
 800a21a:	2200      	movs	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	605a      	str	r2, [r3, #4]
 800a220:	609a      	str	r2, [r3, #8]
 800a222:	60da      	str	r2, [r3, #12]
 800a224:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a226:	463b      	mov	r3, r7
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	605a      	str	r2, [r3, #4]
 800a22e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a230:	4b21      	ldr	r3, [pc, #132]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a232:	4a22      	ldr	r2, [pc, #136]	; (800a2bc <MX_TIM1_Init+0xac>)
 800a234:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a236:	4b20      	ldr	r3, [pc, #128]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a238:	2200      	movs	r2, #0
 800a23a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a23c:	4b1e      	ldr	r3, [pc, #120]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a23e:	2200      	movs	r2, #0
 800a240:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800a242:	4b1d      	ldr	r3, [pc, #116]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a244:	2263      	movs	r2, #99	; 0x63
 800a246:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a248:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a24e:	4b1a      	ldr	r3, [pc, #104]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a250:	2200      	movs	r2, #0
 800a252:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a254:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a256:	2200      	movs	r2, #0
 800a258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a25a:	4817      	ldr	r0, [pc, #92]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a25c:	f7f9 faea 	bl	8003834 <HAL_TIM_Base_Init>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a266:	f000 fbd1 	bl	800aa0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800a26a:	2306      	movs	r3, #6
 800a26c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800a26e:	2330      	movs	r3, #48	; 0x30
 800a270:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800a272:	f107 030c 	add.w	r3, r7, #12
 800a276:	4619      	mov	r1, r3
 800a278:	480f      	ldr	r0, [pc, #60]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a27a:	f7fa f870 	bl	800435e <HAL_TIM_SlaveConfigSynchro>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800a284:	f000 fbc2 	bl	800aa0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a288:	2320      	movs	r3, #32
 800a28a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800a28c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a290:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a292:	2300      	movs	r3, #0
 800a294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a296:	463b      	mov	r3, r7
 800a298:	4619      	mov	r1, r3
 800a29a:	4807      	ldr	r0, [pc, #28]	; (800a2b8 <MX_TIM1_Init+0xa8>)
 800a29c:	f7fa fd8c 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800a2a6:	f000 fbb1 	bl	800aa0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800a2aa:	4b04      	ldr	r3, [pc, #16]	; (800a2bc <MX_TIM1_Init+0xac>)
 800a2ac:	2237      	movs	r2, #55	; 0x37
 800a2ae:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM1_Init 2 */

}
 800a2b0:	bf00      	nop
 800a2b2:	3720      	adds	r7, #32
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	200022f0 	.word	0x200022f0
 800a2bc:	40012c00 	.word	0x40012c00

0800a2c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b090      	sub	sp, #64	; 0x40
 800a2c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a2c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	605a      	str	r2, [r3, #4]
 800a2d0:	609a      	str	r2, [r3, #8]
 800a2d2:	60da      	str	r2, [r3, #12]
 800a2d4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2d6:	f107 0320 	add.w	r3, r7, #32
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	605a      	str	r2, [r3, #4]
 800a2e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a2e2:	1d3b      	adds	r3, r7, #4
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	605a      	str	r2, [r3, #4]
 800a2ea:	609a      	str	r2, [r3, #8]
 800a2ec:	60da      	str	r2, [r3, #12]
 800a2ee:	611a      	str	r2, [r3, #16]
 800a2f0:	615a      	str	r2, [r3, #20]
 800a2f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a2f4:	4b2f      	ldr	r3, [pc, #188]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a2f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a2fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a2fc:	4b2d      	ldr	r3, [pc, #180]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a302:	4b2c      	ldr	r3, [pc, #176]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a304:	2200      	movs	r2, #0
 800a306:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800a308:	4b2a      	ldr	r3, [pc, #168]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a30a:	2263      	movs	r2, #99	; 0x63
 800a30c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a30e:	4b29      	ldr	r3, [pc, #164]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a310:	2200      	movs	r2, #0
 800a312:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a314:	4b27      	ldr	r3, [pc, #156]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a316:	2200      	movs	r2, #0
 800a318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a31a:	4826      	ldr	r0, [pc, #152]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a31c:	f7f9 fa8a 	bl	8003834 <HAL_TIM_Base_Init>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800a326:	f000 fb71 	bl	800aa0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a32a:	4822      	ldr	r0, [pc, #136]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a32c:	f7f9 fbb2 	bl	8003a94 <HAL_TIM_PWM_Init>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800a336:	f000 fb69 	bl	800aa0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800a33a:	2306      	movs	r3, #6
 800a33c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800a33e:	2330      	movs	r3, #48	; 0x30
 800a340:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800a342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a346:	4619      	mov	r1, r3
 800a348:	481a      	ldr	r0, [pc, #104]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a34a:	f7fa f808 	bl	800435e <HAL_TIM_SlaveConfigSynchro>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800a354:	f000 fb5a 	bl	800aa0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a358:	2320      	movs	r3, #32
 800a35a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a360:	f107 0320 	add.w	r3, r7, #32
 800a364:	4619      	mov	r1, r3
 800a366:	4813      	ldr	r0, [pc, #76]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a368:	f7fa fd26 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800a372:	f000 fb4b 	bl	800aa0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a376:	2360      	movs	r3, #96	; 0x60
 800a378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 800a37a:	235a      	movs	r3, #90	; 0x5a
 800a37c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a37e:	2300      	movs	r3, #0
 800a380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a382:	2300      	movs	r3, #0
 800a384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a386:	1d3b      	adds	r3, r7, #4
 800a388:	220c      	movs	r2, #12
 800a38a:	4619      	mov	r1, r3
 800a38c:	4809      	ldr	r0, [pc, #36]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a38e:	f7f9 fe09 	bl	8003fa4 <HAL_TIM_PWM_ConfigChannel>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800a398:	f000 fb38 	bl	800aa0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800a39c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3a0:	2237      	movs	r2, #55	; 0x37
 800a3a2:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a3a4:	4803      	ldr	r0, [pc, #12]	; (800a3b4 <MX_TIM2_Init+0xf4>)
 800a3a6:	f000 fc7f 	bl	800aca8 <HAL_TIM_MspPostInit>

}
 800a3aa:	bf00      	nop
 800a3ac:	3740      	adds	r7, #64	; 0x40
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	2000233c 	.word	0x2000233c

0800a3b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a3be:	f107 0310 	add.w	r3, r7, #16
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]
 800a3c6:	605a      	str	r2, [r3, #4]
 800a3c8:	609a      	str	r2, [r3, #8]
 800a3ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a3cc:	1d3b      	adds	r3, r7, #4
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	605a      	str	r2, [r3, #4]
 800a3d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a3d6:	4b1e      	ldr	r3, [pc, #120]	; (800a450 <MX_TIM3_Init+0x98>)
 800a3d8:	4a1e      	ldr	r2, [pc, #120]	; (800a454 <MX_TIM3_Init+0x9c>)
 800a3da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800a3dc:	4b1c      	ldr	r3, [pc, #112]	; (800a450 <MX_TIM3_Init+0x98>)
 800a3de:	f242 720f 	movw	r2, #9999	; 0x270f
 800a3e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3e4:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <MX_TIM3_Init+0x98>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25400;
 800a3ea:	4b19      	ldr	r3, [pc, #100]	; (800a450 <MX_TIM3_Init+0x98>)
 800a3ec:	f246 3238 	movw	r2, #25400	; 0x6338
 800a3f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3f2:	4b17      	ldr	r3, [pc, #92]	; (800a450 <MX_TIM3_Init+0x98>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <MX_TIM3_Init+0x98>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a3fe:	4814      	ldr	r0, [pc, #80]	; (800a450 <MX_TIM3_Init+0x98>)
 800a400:	f7f9 fa18 	bl	8003834 <HAL_TIM_Base_Init>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800a40a:	f000 faff 	bl	800aa0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a40e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a414:	f107 0310 	add.w	r3, r7, #16
 800a418:	4619      	mov	r1, r3
 800a41a:	480d      	ldr	r0, [pc, #52]	; (800a450 <MX_TIM3_Init+0x98>)
 800a41c:	f7f9 fed6 	bl	80041cc <HAL_TIM_ConfigClockSource>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800a426:	f000 faf1 	bl	800aa0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a42a:	2300      	movs	r3, #0
 800a42c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a432:	1d3b      	adds	r3, r7, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4806      	ldr	r0, [pc, #24]	; (800a450 <MX_TIM3_Init+0x98>)
 800a438:	f7fa fcbe 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800a442:	f000 fae3 	bl	800aa0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a446:	bf00      	nop
 800a448:	3720      	adds	r7, #32
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	20002208 	.word	0x20002208
 800a454:	40000400 	.word	0x40000400

0800a458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a45e:	f107 0310 	add.w	r3, r7, #16
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	605a      	str	r2, [r3, #4]
 800a468:	609a      	str	r2, [r3, #8]
 800a46a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a46c:	1d3b      	adds	r3, r7, #4
 800a46e:	2200      	movs	r2, #0
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	605a      	str	r2, [r3, #4]
 800a474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a476:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a478:	4a1d      	ldr	r2, [pc, #116]	; (800a4f0 <MX_TIM4_Init+0x98>)
 800a47a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 800a47c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a47e:	2207      	movs	r2, #7
 800a480:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a482:	4b1a      	ldr	r3, [pc, #104]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a484:	2200      	movs	r2, #0
 800a486:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 800a488:	4b18      	ldr	r3, [pc, #96]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a48a:	2202      	movs	r2, #2
 800a48c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a48e:	4b17      	ldr	r3, [pc, #92]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a490:	2200      	movs	r2, #0
 800a492:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a494:	4b15      	ldr	r3, [pc, #84]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a496:	2200      	movs	r2, #0
 800a498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a49a:	4814      	ldr	r0, [pc, #80]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a49c:	f7f9 f9ca 	bl	8003834 <HAL_TIM_Base_Init>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800a4a6:	f000 fab1 	bl	800aa0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a4aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a4b0:	f107 0310 	add.w	r3, r7, #16
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	480d      	ldr	r0, [pc, #52]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a4b8:	f7f9 fe88 	bl	80041cc <HAL_TIM_ConfigClockSource>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800a4c2:	f000 faa3 	bl	800aa0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a4c6:	2320      	movs	r3, #32
 800a4c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a4ce:	1d3b      	adds	r3, r7, #4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4806      	ldr	r0, [pc, #24]	; (800a4ec <MX_TIM4_Init+0x94>)
 800a4d4:	f7fa fc70 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800a4de:	f000 fa95 	bl	800aa0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a4e2:	bf00      	nop
 800a4e4:	3720      	adds	r7, #32
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20002148 	.word	0x20002148
 800a4f0:	40000800 	.word	0x40000800

0800a4f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a4fa:	f107 0310 	add.w	r3, r7, #16
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	605a      	str	r2, [r3, #4]
 800a504:	609a      	str	r2, [r3, #8]
 800a506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a508:	1d3b      	adds	r3, r7, #4
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	605a      	str	r2, [r3, #4]
 800a510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a512:	4b20      	ldr	r3, [pc, #128]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a514:	4a20      	ldr	r2, [pc, #128]	; (800a598 <MX_TIM8_Init+0xa4>)
 800a516:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a518:	4b1e      	ldr	r3, [pc, #120]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a51e:	4b1d      	ldr	r3, [pc, #116]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a520:	2200      	movs	r2, #0
 800a522:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 800a524:	4b1b      	ldr	r3, [pc, #108]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a526:	f242 7210 	movw	r2, #10000	; 0x2710
 800a52a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a52c:	4b19      	ldr	r3, [pc, #100]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a52e:	2200      	movs	r2, #0
 800a530:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a532:	4b18      	ldr	r3, [pc, #96]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a534:	2200      	movs	r2, #0
 800a536:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a538:	4b16      	ldr	r3, [pc, #88]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a53e:	4815      	ldr	r0, [pc, #84]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a540:	f7f9 f978 	bl	8003834 <HAL_TIM_Base_Init>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800a54a:	f000 fa5f 	bl	800aa0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a54e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a552:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a554:	f107 0310 	add.w	r3, r7, #16
 800a558:	4619      	mov	r1, r3
 800a55a:	480e      	ldr	r0, [pc, #56]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a55c:	f7f9 fe36 	bl	80041cc <HAL_TIM_ConfigClockSource>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800a566:	f000 fa51 	bl	800aa0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a56a:	2320      	movs	r3, #32
 800a56c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800a56e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a572:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a574:	2300      	movs	r3, #0
 800a576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a578:	1d3b      	adds	r3, r7, #4
 800a57a:	4619      	mov	r1, r3
 800a57c:	4805      	ldr	r0, [pc, #20]	; (800a594 <MX_TIM8_Init+0xa0>)
 800a57e:	f7fa fc1b 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800a588:	f000 fa40 	bl	800aa0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a58c:	bf00      	nop
 800a58e:	3720      	adds	r7, #32
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	2000209c 	.word	0x2000209c
 800a598:	40013400 	.word	0x40013400

0800a59c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a5a0:	4b22      	ldr	r3, [pc, #136]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5a2:	4a23      	ldr	r2, [pc, #140]	; (800a630 <MX_USART1_UART_Init+0x94>)
 800a5a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a5a6:	4b21      	ldr	r3, [pc, #132]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a5ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a5ae:	4b1f      	ldr	r3, [pc, #124]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a5b4:	4b1d      	ldr	r3, [pc, #116]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a5ba:	4b1c      	ldr	r3, [pc, #112]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a5c0:	4b1a      	ldr	r3, [pc, #104]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5c2:	220c      	movs	r2, #12
 800a5c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a5c6:	4b19      	ldr	r3, [pc, #100]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a5cc:	4b17      	ldr	r3, [pc, #92]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a5d2:	4b16      	ldr	r3, [pc, #88]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a5d8:	4b14      	ldr	r3, [pc, #80]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a5e4:	4811      	ldr	r0, [pc, #68]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5e6:	f7fa fc8d 	bl	8004f04 <HAL_UART_Init>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800a5f0:	f000 fa0c 	bl	800aa0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	480d      	ldr	r0, [pc, #52]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a5f8:	f7fc fc05 	bl	8006e06 <HAL_UARTEx_SetTxFifoThreshold>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800a602:	f000 fa03 	bl	800aa0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a606:	2100      	movs	r1, #0
 800a608:	4808      	ldr	r0, [pc, #32]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a60a:	f7fc fc3a 	bl	8006e82 <HAL_UARTEx_SetRxFifoThreshold>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800a614:	f000 f9fa 	bl	800aa0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a618:	4804      	ldr	r0, [pc, #16]	; (800a62c <MX_USART1_UART_Init+0x90>)
 800a61a:	f7fc fbbb 	bl	8006d94 <HAL_UARTEx_DisableFifoMode>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800a624:	f000 f9f2 	bl	800aa0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a628:	bf00      	nop
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	2000225c 	.word	0x2000225c
 800a630:	40013800 	.word	0x40013800

0800a634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a63a:	4b16      	ldr	r3, [pc, #88]	; (800a694 <MX_DMA_Init+0x60>)
 800a63c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a63e:	4a15      	ldr	r2, [pc, #84]	; (800a694 <MX_DMA_Init+0x60>)
 800a640:	f043 0304 	orr.w	r3, r3, #4
 800a644:	6493      	str	r3, [r2, #72]	; 0x48
 800a646:	4b13      	ldr	r3, [pc, #76]	; (800a694 <MX_DMA_Init+0x60>)
 800a648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a64a:	f003 0304 	and.w	r3, r3, #4
 800a64e:	607b      	str	r3, [r7, #4]
 800a650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a652:	4b10      	ldr	r3, [pc, #64]	; (800a694 <MX_DMA_Init+0x60>)
 800a654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a656:	4a0f      	ldr	r2, [pc, #60]	; (800a694 <MX_DMA_Init+0x60>)
 800a658:	f043 0301 	orr.w	r3, r3, #1
 800a65c:	6493      	str	r3, [r2, #72]	; 0x48
 800a65e:	4b0d      	ldr	r3, [pc, #52]	; (800a694 <MX_DMA_Init+0x60>)
 800a660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800a66a:	2200      	movs	r2, #0
 800a66c:	2105      	movs	r1, #5
 800a66e:	200b      	movs	r0, #11
 800a670:	f7f6 fbb4 	bl	8000ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a674:	200b      	movs	r0, #11
 800a676:	f7f6 fbcd 	bl	8000e14 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800a67a:	2200      	movs	r2, #0
 800a67c:	2105      	movs	r1, #5
 800a67e:	200c      	movs	r0, #12
 800a680:	f7f6 fbac 	bl	8000ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a684:	200c      	movs	r0, #12
 800a686:	f7f6 fbc5 	bl	8000e14 <HAL_NVIC_EnableIRQ>

}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	40021000 	.word	0x40021000

0800a698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a69e:	f107 030c 	add.w	r3, r7, #12
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
 800a6a6:	605a      	str	r2, [r3, #4]
 800a6a8:	609a      	str	r2, [r3, #8]
 800a6aa:	60da      	str	r2, [r3, #12]
 800a6ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6ae:	4b24      	ldr	r3, [pc, #144]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6b2:	4a23      	ldr	r2, [pc, #140]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6b4:	f043 0304 	orr.w	r3, r3, #4
 800a6b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6ba:	4b21      	ldr	r3, [pc, #132]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6be:	f003 0304 	and.w	r3, r3, #4
 800a6c2:	60bb      	str	r3, [r7, #8]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6c6:	4b1e      	ldr	r3, [pc, #120]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ca:	4a1d      	ldr	r2, [pc, #116]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6cc:	f043 0301 	orr.w	r3, r3, #1
 800a6d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6d2:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	607b      	str	r3, [r7, #4]
 800a6dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6de:	4b18      	ldr	r3, [pc, #96]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e2:	4a17      	ldr	r2, [pc, #92]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6e4:	f043 0302 	orr.w	r3, r3, #2
 800a6e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6ea:	4b15      	ldr	r3, [pc, #84]	; (800a740 <MX_GPIO_Init+0xa8>)
 800a6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2104      	movs	r1, #4
 800a6fa:	4812      	ldr	r0, [pc, #72]	; (800a744 <MX_GPIO_Init+0xac>)
 800a6fc:	f7f7 fb9c 	bl	8001e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800a700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a70a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800a710:	f107 030c 	add.w	r3, r7, #12
 800a714:	4619      	mov	r1, r3
 800a716:	480c      	ldr	r0, [pc, #48]	; (800a748 <MX_GPIO_Init+0xb0>)
 800a718:	f7f7 f9fc 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 800a71c:	2304      	movs	r3, #4
 800a71e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a720:	2301      	movs	r3, #1
 800a722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a724:	2300      	movs	r3, #0
 800a726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a728:	2300      	movs	r3, #0
 800a72a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 800a72c:	f107 030c 	add.w	r3, r7, #12
 800a730:	4619      	mov	r1, r3
 800a732:	4804      	ldr	r0, [pc, #16]	; (800a744 <MX_GPIO_Init+0xac>)
 800a734:	f7f7 f9ee 	bl	8001b14 <HAL_GPIO_Init>

}
 800a738:	bf00      	nop
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	40021000 	.word	0x40021000
 800a744:	48000400 	.word	0x48000400
 800a748:	48000800 	.word	0x48000800

0800a74c <push_input_buffer>:

/* USER CODE BEGIN 4 */
void push_input_buffer(game_input_t input) {
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	71fb      	strb	r3, [r7, #7]
	// Can't lock the queue, don't need one since this is called by an interrupt
	input_buffer[buffer_push] = input;
 800a756:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <push_input_buffer+0x40>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	490d      	ldr	r1, [pc, #52]	; (800a790 <push_input_buffer+0x44>)
 800a75c:	79fa      	ldrb	r2, [r7, #7]
 800a75e:	54ca      	strb	r2, [r1, r3]
	buffer_push = (buffer_push + 1) % INPUT_BUFFER_SIZE;
 800a760:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <push_input_buffer+0x40>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	1c59      	adds	r1, r3, #1
 800a766:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <push_input_buffer+0x48>)
 800a768:	fb83 2301 	smull	r2, r3, r3, r1
 800a76c:	105a      	asrs	r2, r3, #1
 800a76e:	17cb      	asrs	r3, r1, #31
 800a770:	1ad2      	subs	r2, r2, r3
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	1aca      	subs	r2, r1, r3
 800a77a:	4b04      	ldr	r3, [pc, #16]	; (800a78c <push_input_buffer+0x40>)
 800a77c:	601a      	str	r2, [r3, #0]
}
 800a77e:	bf00      	nop
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	20002044 	.word	0x20002044
 800a790:	20002254 	.word	0x20002254
 800a794:	66666667 	.word	0x66666667

0800a798 <pop_input_buffer>:

game_input_t pop_input_buffer() {
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
	if(buffer_pop == buffer_push) {
 800a79e:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <pop_input_buffer+0x4c>)
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	4b11      	ldr	r3, [pc, #68]	; (800a7e8 <pop_input_buffer+0x50>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d101      	bne.n	800a7ae <pop_input_buffer+0x16>
		return INPUT_ERROR;
 800a7aa:	2306      	movs	r3, #6
 800a7ac:	e014      	b.n	800a7d8 <pop_input_buffer+0x40>
	}
	game_input_t ret = input_buffer[buffer_pop];
 800a7ae:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <pop_input_buffer+0x4c>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a0e      	ldr	r2, [pc, #56]	; (800a7ec <pop_input_buffer+0x54>)
 800a7b4:	5cd3      	ldrb	r3, [r2, r3]
 800a7b6:	71fb      	strb	r3, [r7, #7]
	buffer_pop = (buffer_pop + 1) % INPUT_BUFFER_SIZE;
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <pop_input_buffer+0x4c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	1c59      	adds	r1, r3, #1
 800a7be:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <pop_input_buffer+0x58>)
 800a7c0:	fb83 2301 	smull	r2, r3, r3, r1
 800a7c4:	105a      	asrs	r2, r3, #1
 800a7c6:	17cb      	asrs	r3, r1, #31
 800a7c8:	1ad2      	subs	r2, r2, r3
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	1aca      	subs	r2, r1, r3
 800a7d2:	4b04      	ldr	r3, [pc, #16]	; (800a7e4 <pop_input_buffer+0x4c>)
 800a7d4:	601a      	str	r2, [r3, #0]
	return ret;
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	20002040 	.word	0x20002040
 800a7e8:	20002044 	.word	0x20002044
 800a7ec:	20002254 	.word	0x20002254
 800a7f0:	66666667 	.word	0x66666667

0800a7f4 <process_user_input>:



game_input_t process_user_input(Window * window) {
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
    game_input_t c = pop_input_buffer();
 800a7fc:	f7ff ffcc 	bl	800a798 <pop_input_buffer>
 800a800:	4603      	mov	r3, r0
 800a802:	73fb      	strb	r3, [r7, #15]
    while(c == INPUT_ERROR) c = pop_input_buffer();
 800a804:	e003      	b.n	800a80e <process_user_input+0x1a>
 800a806:	f7ff ffc7 	bl	800a798 <pop_input_buffer>
 800a80a:	4603      	mov	r3, r0
 800a80c:	73fb      	strb	r3, [r7, #15]
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	2b06      	cmp	r3, #6
 800a812:	d0f8      	beq.n	800a806 <process_user_input+0x12>
    return c;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	char c = ((huart)->Instance)->RDR;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a82e:	b29b      	uxth	r3, r3
 800a830:	73fb      	strb	r3, [r7, #15]
	switch (c) {
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b73      	cmp	r3, #115	; 0x73
 800a836:	dc51      	bgt.n	800a8dc <HAL_UART_RxCpltCallback+0xbc>
 800a838:	2b61      	cmp	r3, #97	; 0x61
 800a83a:	da08      	bge.n	800a84e <HAL_UART_RxCpltCallback+0x2e>
 800a83c:	2b3b      	cmp	r3, #59	; 0x3b
 800a83e:	d042      	beq.n	800a8c6 <HAL_UART_RxCpltCallback+0xa6>
 800a840:	2b3b      	cmp	r3, #59	; 0x3b
 800a842:	dc4b      	bgt.n	800a8dc <HAL_UART_RxCpltCallback+0xbc>
 800a844:	2b20      	cmp	r3, #32
 800a846:	d046      	beq.n	800a8d6 <HAL_UART_RxCpltCallback+0xb6>
 800a848:	2b35      	cmp	r3, #53	; 0x35
 800a84a:	d02d      	beq.n	800a8a8 <HAL_UART_RxCpltCallback+0x88>
		push_input_buffer(DOWN);
		break;
	case 32: // space
		push_input_buffer(TOGGLEPAUSE);
	default:
		break;
 800a84c:	e046      	b.n	800a8dc <HAL_UART_RxCpltCallback+0xbc>
 800a84e:	3b61      	subs	r3, #97	; 0x61
 800a850:	2b12      	cmp	r3, #18
 800a852:	d843      	bhi.n	800a8dc <HAL_UART_RxCpltCallback+0xbc>
 800a854:	a201      	add	r2, pc, #4	; (adr r2, 800a85c <HAL_UART_RxCpltCallback+0x3c>)
 800a856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85a:	bf00      	nop
 800a85c:	0800a8af 	.word	0x0800a8af
 800a860:	0800a8dd 	.word	0x0800a8dd
 800a864:	0800a8dd 	.word	0x0800a8dd
 800a868:	0800a8b7 	.word	0x0800a8b7
 800a86c:	0800a8dd 	.word	0x0800a8dd
 800a870:	0800a8dd 	.word	0x0800a8dd
 800a874:	0800a8dd 	.word	0x0800a8dd
 800a878:	0800a8dd 	.word	0x0800a8dd
 800a87c:	0800a8dd 	.word	0x0800a8dd
 800a880:	0800a8dd 	.word	0x0800a8dd
 800a884:	0800a8dd 	.word	0x0800a8dd
 800a888:	0800a8bf 	.word	0x0800a8bf
 800a88c:	0800a8dd 	.word	0x0800a8dd
 800a890:	0800a8dd 	.word	0x0800a8dd
 800a894:	0800a8dd 	.word	0x0800a8dd
 800a898:	0800a8dd 	.word	0x0800a8dd
 800a89c:	0800a8dd 	.word	0x0800a8dd
 800a8a0:	0800a8dd 	.word	0x0800a8dd
 800a8a4:	0800a8cf 	.word	0x0800a8cf
		hello_world();
 800a8a8:	f7ff f948 	bl	8009b3c <hello_world>
		break;
 800a8ac:	e017      	b.n	800a8de <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(LEFT);
 800a8ae:	2003      	movs	r0, #3
 800a8b0:	f7ff ff4c 	bl	800a74c <push_input_buffer>
		break;
 800a8b4:	e013      	b.n	800a8de <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(RIGHT);
 800a8b6:	2004      	movs	r0, #4
 800a8b8:	f7ff ff48 	bl	800a74c <push_input_buffer>
		break;
 800a8bc:	e00f      	b.n	800a8de <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(CCW);
 800a8be:	2002      	movs	r0, #2
 800a8c0:	f7ff ff44 	bl	800a74c <push_input_buffer>
		break;
 800a8c4:	e00b      	b.n	800a8de <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(CW);
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	f7ff ff40 	bl	800a74c <push_input_buffer>
		break;
 800a8cc:	e007      	b.n	800a8de <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(DOWN);
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	f7ff ff3c 	bl	800a74c <push_input_buffer>
		break;
 800a8d4:	e003      	b.n	800a8de <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(TOGGLEPAUSE);
 800a8d6:	2005      	movs	r0, #5
 800a8d8:	f7ff ff38 	bl	800a74c <push_input_buffer>
		break;
 800a8dc:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800a8de:	2201      	movs	r2, #1
 800a8e0:	4903      	ldr	r1, [pc, #12]	; (800a8f0 <HAL_UART_RxCpltCallback+0xd0>)
 800a8e2:	4804      	ldr	r0, [pc, #16]	; (800a8f4 <HAL_UART_RxCpltCallback+0xd4>)
 800a8e4:	f7fa fbf6 	bl	80050d4 <HAL_UART_Receive_IT>
}
 800a8e8:	bf00      	nop
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	20000620 	.word	0x20000620
 800a8f4:	2000225c 	.word	0x2000225c

0800a8f8 <updateGameLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_updateGameLogic */
void updateGameLogic(void *argument)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Start the Game
	game_start(&window, INPUT_ERROR);
 800a900:	2106      	movs	r1, #6
 800a902:	481c      	ldr	r0, [pc, #112]	; (800a974 <updateGameLogic+0x7c>)
 800a904:	f7ff fa4a 	bl	8009d9c <game_start>
	swap_buffer(&window);
 800a908:	481a      	ldr	r0, [pc, #104]	; (800a974 <updateGameLogic+0x7c>)
 800a90a:	f7ff faad 	bl	8009e68 <swap_buffer>

	/* Infinite loop */
	for(;;) {
		//osDelay(1);
	    // process button presses (update game state)
		game_input_t event = process_user_input(&window);
 800a90e:	4819      	ldr	r0, [pc, #100]	; (800a974 <updateGameLogic+0x7c>)
 800a910:	f7ff ff70 	bl	800a7f4 <process_user_input>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]

		switch (window.game.state) {
 800a918:	4b16      	ldr	r3, [pc, #88]	; (800a974 <updateGameLogic+0x7c>)
 800a91a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a91e:	33f4      	adds	r3, #244	; 0xf4
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	2b03      	cmp	r3, #3
 800a924:	d822      	bhi.n	800a96c <updateGameLogic+0x74>
 800a926:	a201      	add	r2, pc, #4	; (adr r2, 800a92c <updateGameLogic+0x34>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a93d 	.word	0x0800a93d
 800a930:	0800a949 	.word	0x0800a949
 800a934:	0800a955 	.word	0x0800a955
 800a938:	0800a961 	.word	0x0800a961
		  case Start:
			  game_start(&window, event);
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	4619      	mov	r1, r3
 800a940:	480c      	ldr	r0, [pc, #48]	; (800a974 <updateGameLogic+0x7c>)
 800a942:	f7ff fa2b 	bl	8009d9c <game_start>
		  break;
 800a946:	e011      	b.n	800a96c <updateGameLogic+0x74>
		  case Playing:
			  // update the game state, and draw to frame buffer
			  game_playing(&window, event);
 800a948:	7bfb      	ldrb	r3, [r7, #15]
 800a94a:	4619      	mov	r1, r3
 800a94c:	4809      	ldr	r0, [pc, #36]	; (800a974 <updateGameLogic+0x7c>)
 800a94e:	f7ff f96b 	bl	8009c28 <game_playing>
		  break;
 800a952:	e00b      	b.n	800a96c <updateGameLogic+0x74>
		  case Paused:
			  game_paused(&window, event);
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	4619      	mov	r1, r3
 800a958:	4806      	ldr	r0, [pc, #24]	; (800a974 <updateGameLogic+0x7c>)
 800a95a:	f7ff f9e5 	bl	8009d28 <game_paused>
		  break;
 800a95e:	e005      	b.n	800a96c <updateGameLogic+0x74>
		  case Ended:
			  game_ended(&window, event);
 800a960:	7bfb      	ldrb	r3, [r7, #15]
 800a962:	4619      	mov	r1, r3
 800a964:	4803      	ldr	r0, [pc, #12]	; (800a974 <updateGameLogic+0x7c>)
 800a966:	f7ff fa63 	bl	8009e30 <game_ended>
		  break;
 800a96a:	bf00      	nop
		}
		swap_buffer(&window);
 800a96c:	4801      	ldr	r0, [pc, #4]	; (800a974 <updateGameLogic+0x7c>)
 800a96e:	f7ff fa7b 	bl	8009e68 <swap_buffer>
	for(;;) {
 800a972:	e7cc      	b.n	800a90e <updateGameLogic+0x16>
 800a974:	20002388 	.word	0x20002388

0800a978 <soundController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_soundController */
void soundController(void *argument)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN soundController */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a980:	2001      	movs	r0, #1
 800a982:	f7fc fc2b 	bl	80071dc <osDelay>
 800a986:	e7fb      	b.n	800a980 <soundController+0x8>

0800a988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a18      	ldr	r2, [pc, #96]	; (800a9f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d102      	bne.n	800a9a0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800a99a:	f7f6 f923 	bl	8000be4 <HAL_IncTick>
	} else {
		HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
	}
  }
  /* USER CODE END Callback 1 */
}
 800a99e:	e026      	b.n	800a9ee <HAL_TIM_PeriodElapsedCallback+0x66>
  else if (htim->Instance == TIM1) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a15      	ldr	r2, [pc, #84]	; (800a9fc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d121      	bne.n	800a9ee <HAL_TIM_PeriodElapsedCallback+0x66>
	vert_count = (vert_count + 1) % 449;
 800a9aa:	4b15      	ldr	r3, [pc, #84]	; (800aa00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	1c59      	adds	r1, r3, #1
 800a9b0:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800a9b2:	fb83 2301 	smull	r2, r3, r3, r1
 800a9b6:	440b      	add	r3, r1
 800a9b8:	121a      	asrs	r2, r3, #8
 800a9ba:	17cb      	asrs	r3, r1, #31
 800a9bc:	1ad2      	subs	r2, r2, r3
 800a9be:	4613      	mov	r3, r2
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	1a9b      	subs	r3, r3, r2
 800a9c4:	019b      	lsls	r3, r3, #6
 800a9c6:	4413      	add	r3, r2
 800a9c8:	1aca      	subs	r2, r1, r3
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	; (800aa00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800a9cc:	601a      	str	r2, [r3, #0]
	if(vert_count >= 447) {
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 800a9d6:	dd05      	ble.n	800a9e4 <HAL_TIM_PeriodElapsedCallback+0x5c>
		HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2104      	movs	r1, #4
 800a9dc:	480a      	ldr	r0, [pc, #40]	; (800aa08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800a9de:	f7f7 fa2b 	bl	8001e38 <HAL_GPIO_WritePin>
}
 800a9e2:	e004      	b.n	800a9ee <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	2104      	movs	r1, #4
 800a9e8:	4807      	ldr	r0, [pc, #28]	; (800aa08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800a9ea:	f7f7 fa25 	bl	8001e38 <HAL_GPIO_WritePin>
}
 800a9ee:	bf00      	nop
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	40001000 	.word	0x40001000
 800a9fc:	40012c00 	.word	0x40012c00
 800aa00:	20002048 	.word	0x20002048
 800aa04:	91f5bcb9 	.word	0x91f5bcb9
 800aa08:	48000400 	.word	0x48000400

0800aa0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800aa10:	b672      	cpsid	i
}
 800aa12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aa14:	e7fe      	b.n	800aa14 <Error_Handler+0x8>
	...

0800aa18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa1e:	4b11      	ldr	r3, [pc, #68]	; (800aa64 <HAL_MspInit+0x4c>)
 800aa20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa22:	4a10      	ldr	r2, [pc, #64]	; (800aa64 <HAL_MspInit+0x4c>)
 800aa24:	f043 0301 	orr.w	r3, r3, #1
 800aa28:	6613      	str	r3, [r2, #96]	; 0x60
 800aa2a:	4b0e      	ldr	r3, [pc, #56]	; (800aa64 <HAL_MspInit+0x4c>)
 800aa2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	607b      	str	r3, [r7, #4]
 800aa34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aa36:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <HAL_MspInit+0x4c>)
 800aa38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3a:	4a0a      	ldr	r2, [pc, #40]	; (800aa64 <HAL_MspInit+0x4c>)
 800aa3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa40:	6593      	str	r3, [r2, #88]	; 0x58
 800aa42:	4b08      	ldr	r3, [pc, #32]	; (800aa64 <HAL_MspInit+0x4c>)
 800aa44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800aa4e:	2200      	movs	r2, #0
 800aa50:	210f      	movs	r1, #15
 800aa52:	f06f 0001 	mvn.w	r0, #1
 800aa56:	f7f6 f9c1 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	40021000 	.word	0x40021000

0800aa68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08a      	sub	sp, #40	; 0x28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa70:	f107 0314 	add.w	r3, r7, #20
 800aa74:	2200      	movs	r2, #0
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	605a      	str	r2, [r3, #4]
 800aa7a:	609a      	str	r2, [r3, #8]
 800aa7c:	60da      	str	r2, [r3, #12]
 800aa7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a44      	ldr	r2, [pc, #272]	; (800ab98 <HAL_DAC_MspInit+0x130>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	f040 8081 	bne.w	800ab8e <HAL_DAC_MspInit+0x126>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800aa8c:	4b43      	ldr	r3, [pc, #268]	; (800ab9c <HAL_DAC_MspInit+0x134>)
 800aa8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa90:	4a42      	ldr	r2, [pc, #264]	; (800ab9c <HAL_DAC_MspInit+0x134>)
 800aa92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa96:	6593      	str	r3, [r2, #88]	; 0x58
 800aa98:	4b40      	ldr	r3, [pc, #256]	; (800ab9c <HAL_DAC_MspInit+0x134>)
 800aa9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaa0:	613b      	str	r3, [r7, #16]
 800aaa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaa4:	4b3d      	ldr	r3, [pc, #244]	; (800ab9c <HAL_DAC_MspInit+0x134>)
 800aaa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa8:	4a3c      	ldr	r2, [pc, #240]	; (800ab9c <HAL_DAC_MspInit+0x134>)
 800aaaa:	f043 0301 	orr.w	r3, r3, #1
 800aaae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aab0:	4b3a      	ldr	r3, [pc, #232]	; (800ab9c <HAL_DAC_MspInit+0x134>)
 800aab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800aabc:	2330      	movs	r3, #48	; 0x30
 800aabe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aac0:	2303      	movs	r3, #3
 800aac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aac4:	2300      	movs	r3, #0
 800aac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aac8:	f107 0314 	add.w	r3, r7, #20
 800aacc:	4619      	mov	r1, r3
 800aace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aad2:	f7f7 f81f 	bl	8001b14 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800aad6:	4b32      	ldr	r3, [pc, #200]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800aad8:	4a32      	ldr	r2, [pc, #200]	; (800aba4 <HAL_DAC_MspInit+0x13c>)
 800aada:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800aadc:	4b30      	ldr	r3, [pc, #192]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800aade:	2206      	movs	r2, #6
 800aae0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aae2:	4b2f      	ldr	r3, [pc, #188]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800aae4:	2210      	movs	r2, #16
 800aae6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800aae8:	4b2d      	ldr	r3, [pc, #180]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800aaee:	4b2c      	ldr	r3, [pc, #176]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800aaf0:	2280      	movs	r2, #128	; 0x80
 800aaf2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aaf4:	4b2a      	ldr	r3, [pc, #168]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aafa:	4b29      	ldr	r3, [pc, #164]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800ab00:	4b27      	ldr	r3, [pc, #156]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800ab02:	2220      	movs	r2, #32
 800ab04:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800ab06:	4b26      	ldr	r3, [pc, #152]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800ab0c:	4824      	ldr	r0, [pc, #144]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800ab0e:	f7f6 fcd3 	bl	80014b8 <HAL_DMA_Init>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 800ab18:	f7ff ff78 	bl	800aa0c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a20      	ldr	r2, [pc, #128]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800ab20:	609a      	str	r2, [r3, #8]
 800ab22:	4a1f      	ldr	r2, [pc, #124]	; (800aba0 <HAL_DAC_MspInit+0x138>)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 800ab28:	4b1f      	ldr	r3, [pc, #124]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab2a:	4a20      	ldr	r2, [pc, #128]	; (800abac <HAL_DAC_MspInit+0x144>)
 800ab2c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 800ab2e:	4b1e      	ldr	r3, [pc, #120]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab30:	2207      	movs	r2, #7
 800ab32:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab34:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab36:	2210      	movs	r2, #16
 800ab38:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab3a:	4b1b      	ldr	r3, [pc, #108]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ab40:	4b19      	ldr	r3, [pc, #100]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab42:	2280      	movs	r2, #128	; 0x80
 800ab44:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ab46:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab4c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ab4e:	4b16      	ldr	r3, [pc, #88]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab54:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800ab56:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab58:	2220      	movs	r2, #32
 800ab5a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800ab5c:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800ab62:	4811      	ldr	r0, [pc, #68]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab64:	f7f6 fca8 	bl	80014b8 <HAL_DMA_Init>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <HAL_DAC_MspInit+0x10a>
    {
      Error_Handler();
 800ab6e:	f7ff ff4d 	bl	800aa0c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a0c      	ldr	r2, [pc, #48]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab76:	60da      	str	r2, [r3, #12]
 800ab78:	4a0b      	ldr	r2, [pc, #44]	; (800aba8 <HAL_DAC_MspInit+0x140>)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800ab7e:	2200      	movs	r2, #0
 800ab80:	210f      	movs	r1, #15
 800ab82:	2036      	movs	r0, #54	; 0x36
 800ab84:	f7f6 f92a 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ab88:	2036      	movs	r0, #54	; 0x36
 800ab8a:	f7f6 f943 	bl	8000e14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800ab8e:	bf00      	nop
 800ab90:	3728      	adds	r7, #40	; 0x28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	40007400 	.word	0x40007400
 800ab9c:	40021000 	.word	0x40021000
 800aba0:	200021a8 	.word	0x200021a8
 800aba4:	40020008 	.word	0x40020008
 800aba8:	200020e8 	.word	0x200020e8
 800abac:	4002001c 	.word	0x4002001c

0800abb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b088      	sub	sp, #32
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a35      	ldr	r2, [pc, #212]	; (800ac94 <HAL_TIM_Base_MspInit+0xe4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d114      	bne.n	800abec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800abc2:	4b35      	ldr	r3, [pc, #212]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800abc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abc6:	4a34      	ldr	r2, [pc, #208]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800abc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abcc:	6613      	str	r3, [r2, #96]	; 0x60
 800abce:	4b32      	ldr	r3, [pc, #200]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800abd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abd6:	61fb      	str	r3, [r7, #28]
 800abd8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800abda:	2200      	movs	r2, #0
 800abdc:	2105      	movs	r1, #5
 800abde:	2019      	movs	r0, #25
 800abe0:	f7f6 f8fc 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800abe4:	2019      	movs	r0, #25
 800abe6:	f7f6 f915 	bl	8000e14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800abea:	e04e      	b.n	800ac8a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf4:	d10c      	bne.n	800ac10 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800abf6:	4b28      	ldr	r3, [pc, #160]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800abf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abfa:	4a27      	ldr	r2, [pc, #156]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800abfc:	f043 0301 	orr.w	r3, r3, #1
 800ac00:	6593      	str	r3, [r2, #88]	; 0x58
 800ac02:	4b25      	ldr	r3, [pc, #148]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	61bb      	str	r3, [r7, #24]
 800ac0c:	69bb      	ldr	r3, [r7, #24]
}
 800ac0e:	e03c      	b.n	800ac8a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a21      	ldr	r2, [pc, #132]	; (800ac9c <HAL_TIM_Base_MspInit+0xec>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d114      	bne.n	800ac44 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ac1a:	4b1f      	ldr	r3, [pc, #124]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac1e:	4a1e      	ldr	r2, [pc, #120]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	6593      	str	r3, [r2, #88]	; 0x58
 800ac26:	4b1c      	ldr	r3, [pc, #112]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800ac32:	2200      	movs	r2, #0
 800ac34:	2105      	movs	r1, #5
 800ac36:	201d      	movs	r0, #29
 800ac38:	f7f6 f8d0 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ac3c:	201d      	movs	r0, #29
 800ac3e:	f7f6 f8e9 	bl	8000e14 <HAL_NVIC_EnableIRQ>
}
 800ac42:	e022      	b.n	800ac8a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a15      	ldr	r2, [pc, #84]	; (800aca0 <HAL_TIM_Base_MspInit+0xf0>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d10c      	bne.n	800ac68 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ac4e:	4b12      	ldr	r3, [pc, #72]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac52:	4a11      	ldr	r2, [pc, #68]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac54:	f043 0304 	orr.w	r3, r3, #4
 800ac58:	6593      	str	r3, [r2, #88]	; 0x58
 800ac5a:	4b0f      	ldr	r3, [pc, #60]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac5e:	f003 0304 	and.w	r3, r3, #4
 800ac62:	613b      	str	r3, [r7, #16]
 800ac64:	693b      	ldr	r3, [r7, #16]
}
 800ac66:	e010      	b.n	800ac8a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM8)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a0d      	ldr	r2, [pc, #52]	; (800aca4 <HAL_TIM_Base_MspInit+0xf4>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d10b      	bne.n	800ac8a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800ac72:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac76:	4a08      	ldr	r2, [pc, #32]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ac7c:	6613      	str	r3, [r2, #96]	; 0x60
 800ac7e:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <HAL_TIM_Base_MspInit+0xe8>)
 800ac80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac86:	60fb      	str	r3, [r7, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	bf00      	nop
 800ac8c:	3720      	adds	r7, #32
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	40012c00 	.word	0x40012c00
 800ac98:	40021000 	.word	0x40021000
 800ac9c:	40000400 	.word	0x40000400
 800aca0:	40000800 	.word	0x40000800
 800aca4:	40013400 	.word	0x40013400

0800aca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acb0:	f107 030c 	add.w	r3, r7, #12
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	605a      	str	r2, [r3, #4]
 800acba:	609a      	str	r2, [r3, #8]
 800acbc:	60da      	str	r2, [r3, #12]
 800acbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc8:	d11c      	bne.n	800ad04 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acca:	4b10      	ldr	r3, [pc, #64]	; (800ad0c <HAL_TIM_MspPostInit+0x64>)
 800accc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acce:	4a0f      	ldr	r2, [pc, #60]	; (800ad0c <HAL_TIM_MspPostInit+0x64>)
 800acd0:	f043 0301 	orr.w	r3, r3, #1
 800acd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acd6:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <HAL_TIM_MspPostInit+0x64>)
 800acd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	60bb      	str	r3, [r7, #8]
 800ace0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 800ace2:	2308      	movs	r3, #8
 800ace4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ace6:	2302      	movs	r3, #2
 800ace8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acee:	2300      	movs	r3, #0
 800acf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800acf2:	2301      	movs	r3, #1
 800acf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 800acf6:	f107 030c 	add.w	r3, r7, #12
 800acfa:	4619      	mov	r1, r3
 800acfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad00:	f7f6 ff08 	bl	8001b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800ad04:	bf00      	nop
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	40021000 	.word	0x40021000

0800ad10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b0ae      	sub	sp, #184	; 0xb8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	605a      	str	r2, [r3, #4]
 800ad22:	609a      	str	r2, [r3, #8]
 800ad24:	60da      	str	r2, [r3, #12]
 800ad26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ad28:	f107 0310 	add.w	r3, r7, #16
 800ad2c:	2294      	movs	r2, #148	; 0x94
 800ad2e:	2100      	movs	r1, #0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f001 f83b 	bl	800bdac <memset>
  if(huart->Instance==USART1)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a25      	ldr	r2, [pc, #148]	; (800add0 <HAL_UART_MspInit+0xc0>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d142      	bne.n	800adc6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ad40:	2301      	movs	r3, #1
 800ad42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800ad44:	2300      	movs	r3, #0
 800ad46:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad48:	f107 0310 	add.w	r3, r7, #16
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f8 f859 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800ad58:	f7ff fe58 	bl	800aa0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad5c:	4b1d      	ldr	r3, [pc, #116]	; (800add4 <HAL_UART_MspInit+0xc4>)
 800ad5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad60:	4a1c      	ldr	r2, [pc, #112]	; (800add4 <HAL_UART_MspInit+0xc4>)
 800ad62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad66:	6613      	str	r3, [r2, #96]	; 0x60
 800ad68:	4b1a      	ldr	r3, [pc, #104]	; (800add4 <HAL_UART_MspInit+0xc4>)
 800ad6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad74:	4b17      	ldr	r3, [pc, #92]	; (800add4 <HAL_UART_MspInit+0xc4>)
 800ad76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad78:	4a16      	ldr	r2, [pc, #88]	; (800add4 <HAL_UART_MspInit+0xc4>)
 800ad7a:	f043 0302 	orr.w	r3, r3, #2
 800ad7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad80:	4b14      	ldr	r3, [pc, #80]	; (800add4 <HAL_UART_MspInit+0xc4>)
 800ad82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad84:	f003 0302 	and.w	r3, r3, #2
 800ad88:	60bb      	str	r3, [r7, #8]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ad8c:	23c0      	movs	r3, #192	; 0xc0
 800ad8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad92:	2302      	movs	r3, #2
 800ad94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ada4:	2307      	movs	r3, #7
 800ada6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adaa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800adae:	4619      	mov	r1, r3
 800adb0:	4809      	ldr	r0, [pc, #36]	; (800add8 <HAL_UART_MspInit+0xc8>)
 800adb2:	f7f6 feaf 	bl	8001b14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800adb6:	2200      	movs	r2, #0
 800adb8:	2101      	movs	r1, #1
 800adba:	2025      	movs	r0, #37	; 0x25
 800adbc:	f7f6 f80e 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800adc0:	2025      	movs	r0, #37	; 0x25
 800adc2:	f7f6 f827 	bl	8000e14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800adc6:	bf00      	nop
 800adc8:	37b8      	adds	r7, #184	; 0xb8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	40013800 	.word	0x40013800
 800add4:	40021000 	.word	0x40021000
 800add8:	48000400 	.word	0x48000400

0800addc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08c      	sub	sp, #48	; 0x30
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800adec:	2200      	movs	r2, #0
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	2036      	movs	r0, #54	; 0x36
 800adf2:	f7f5 fff3 	bl	8000ddc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800adf6:	2036      	movs	r0, #54	; 0x36
 800adf8:	f7f6 f80c 	bl	8000e14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800adfc:	4b1e      	ldr	r3, [pc, #120]	; (800ae78 <HAL_InitTick+0x9c>)
 800adfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae00:	4a1d      	ldr	r2, [pc, #116]	; (800ae78 <HAL_InitTick+0x9c>)
 800ae02:	f043 0310 	orr.w	r3, r3, #16
 800ae06:	6593      	str	r3, [r2, #88]	; 0x58
 800ae08:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <HAL_InitTick+0x9c>)
 800ae0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae0c:	f003 0310 	and.w	r3, r3, #16
 800ae10:	60fb      	str	r3, [r7, #12]
 800ae12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ae14:	f107 0210 	add.w	r2, r7, #16
 800ae18:	f107 0314 	add.w	r3, r7, #20
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7f7 fefc 	bl	8002c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800ae24:	f7f7 fece 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 800ae28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	4a13      	ldr	r2, [pc, #76]	; (800ae7c <HAL_InitTick+0xa0>)
 800ae2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae32:	0c9b      	lsrs	r3, r3, #18
 800ae34:	3b01      	subs	r3, #1
 800ae36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ae38:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <HAL_InitTick+0xa4>)
 800ae3a:	4a12      	ldr	r2, [pc, #72]	; (800ae84 <HAL_InitTick+0xa8>)
 800ae3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ae3e:	4b10      	ldr	r3, [pc, #64]	; (800ae80 <HAL_InitTick+0xa4>)
 800ae40:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ae44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ae46:	4a0e      	ldr	r2, [pc, #56]	; (800ae80 <HAL_InitTick+0xa4>)
 800ae48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ae4c:	4b0c      	ldr	r3, [pc, #48]	; (800ae80 <HAL_InitTick+0xa4>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae52:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <HAL_InitTick+0xa4>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800ae58:	4809      	ldr	r0, [pc, #36]	; (800ae80 <HAL_InitTick+0xa4>)
 800ae5a:	f7f8 fceb 	bl	8003834 <HAL_TIM_Base_Init>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d104      	bne.n	800ae6e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ae64:	4806      	ldr	r0, [pc, #24]	; (800ae80 <HAL_InitTick+0xa4>)
 800ae66:	f7f8 fda5 	bl	80039b4 <HAL_TIM_Base_Start_IT>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	e000      	b.n	800ae70 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3730      	adds	r7, #48	; 0x30
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	40021000 	.word	0x40021000
 800ae7c:	431bde83 	.word	0x431bde83
 800ae80:	2001aa84 	.word	0x2001aa84
 800ae84:	40001000 	.word	0x40001000

0800ae88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ae8c:	e7fe      	b.n	800ae8c <NMI_Handler+0x4>

0800ae8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae92:	e7fe      	b.n	800ae92 <HardFault_Handler+0x4>

0800ae94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae94:	b480      	push	{r7}
 800ae96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ae98:	e7fe      	b.n	800ae98 <MemManage_Handler+0x4>

0800ae9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ae9e:	e7fe      	b.n	800ae9e <BusFault_Handler+0x4>

0800aea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aea0:	b480      	push	{r7}
 800aea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aea4:	e7fe      	b.n	800aea4 <UsageFault_Handler+0x4>

0800aea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aea6:	b480      	push	{r7}
 800aea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aeaa:	bf00      	nop
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800aeb8:	4802      	ldr	r0, [pc, #8]	; (800aec4 <DMA1_Channel1_IRQHandler+0x10>)
 800aeba:	f7f6 fcdb 	bl	8001874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800aebe:	bf00      	nop
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	200021a8 	.word	0x200021a8

0800aec8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800aecc:	4802      	ldr	r0, [pc, #8]	; (800aed8 <DMA1_Channel2_IRQHandler+0x10>)
 800aece:	f7f6 fcd1 	bl	8001874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800aed2:	bf00      	nop
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	200020e8 	.word	0x200020e8

0800aedc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800aee0:	4802      	ldr	r0, [pc, #8]	; (800aeec <TIM1_UP_TIM16_IRQHandler+0x10>)
 800aee2:	f7f8 ff3f 	bl	8003d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800aee6:	bf00      	nop
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	200022f0 	.word	0x200022f0

0800aef0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800aef4:	4802      	ldr	r0, [pc, #8]	; (800af00 <TIM3_IRQHandler+0x10>)
 800aef6:	f7f8 ff35 	bl	8003d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800aefa:	bf00      	nop
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20002208 	.word	0x20002208

0800af04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800af08:	4802      	ldr	r0, [pc, #8]	; (800af14 <USART1_IRQHandler+0x10>)
 800af0a:	f7fa f939 	bl	8005180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800af0e:	bf00      	nop
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	2000225c 	.word	0x2000225c

0800af18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800af1c:	4803      	ldr	r0, [pc, #12]	; (800af2c <TIM6_DAC_IRQHandler+0x14>)
 800af1e:	f7f8 ff21 	bl	8003d64 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800af22:	4803      	ldr	r0, [pc, #12]	; (800af30 <TIM6_DAC_IRQHandler+0x18>)
 800af24:	f7f6 f872 	bl	800100c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800af28:	bf00      	nop
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	2001aa84 	.word	0x2001aa84
 800af30:	20002194 	.word	0x20002194

0800af34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800af3c:	4a14      	ldr	r2, [pc, #80]	; (800af90 <_sbrk+0x5c>)
 800af3e:	4b15      	ldr	r3, [pc, #84]	; (800af94 <_sbrk+0x60>)
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800af48:	4b13      	ldr	r3, [pc, #76]	; (800af98 <_sbrk+0x64>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d102      	bne.n	800af56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800af50:	4b11      	ldr	r3, [pc, #68]	; (800af98 <_sbrk+0x64>)
 800af52:	4a12      	ldr	r2, [pc, #72]	; (800af9c <_sbrk+0x68>)
 800af54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800af56:	4b10      	ldr	r3, [pc, #64]	; (800af98 <_sbrk+0x64>)
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4413      	add	r3, r2
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	429a      	cmp	r2, r3
 800af62:	d207      	bcs.n	800af74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800af64:	f000 fee0 	bl	800bd28 <__errno>
 800af68:	4603      	mov	r3, r0
 800af6a:	220c      	movs	r2, #12
 800af6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800af6e:	f04f 33ff 	mov.w	r3, #4294967295
 800af72:	e009      	b.n	800af88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800af74:	4b08      	ldr	r3, [pc, #32]	; (800af98 <_sbrk+0x64>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800af7a:	4b07      	ldr	r3, [pc, #28]	; (800af98 <_sbrk+0x64>)
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4413      	add	r3, r2
 800af82:	4a05      	ldr	r2, [pc, #20]	; (800af98 <_sbrk+0x64>)
 800af84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800af86:	68fb      	ldr	r3, [r7, #12]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	200a0000 	.word	0x200a0000
 800af94:	00000400 	.word	0x00000400
 800af98:	2000204c 	.word	0x2000204c
 800af9c:	2001aae0 	.word	0x2001aae0

0800afa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800afa4:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <SystemInit+0x20>)
 800afa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afaa:	4a05      	ldr	r2, [pc, #20]	; (800afc0 <SystemInit+0x20>)
 800afac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800afb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800afb4:	bf00      	nop
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	e000ed00 	.word	0xe000ed00

0800afc4 <tetris_write_points>:
								10, 10, 10, 10,
								10, 10, 10, 10,
								10, 10, 10, 10};


void tetris_write_points(Window* window) {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
    char point_str[10];
    sprintf(point_str, "%lu", window->game.points);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800afd2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	f107 030c 	add.w	r3, r7, #12
 800afdc:	4907      	ldr	r1, [pc, #28]	; (800affc <tetris_write_points+0x38>)
 800afde:	4618      	mov	r0, r3
 800afe0:	f001 f810 	bl	800c004 <siprintf>
    print_str(window, point_str, 35, 150);
 800afe4:	f107 010c 	add.w	r1, r7, #12
 800afe8:	2396      	movs	r3, #150	; 0x96
 800afea:	2223      	movs	r2, #35	; 0x23
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7fe ff59 	bl	8009ea4 <print_str>
}
 800aff2:	bf00      	nop
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	0800c7cc 	.word	0x0800c7cc

0800b000 <tetris_initialize_game>:
/**
 * @brief populate window game variable with a reset tetris game.
 *
 * @param window window
 */
void tetris_initialize_game(Window * window) {
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
    // fill game board with empty data
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	e00a      	b.n	800b024 <tetris_initialize_game+0x24>
        window->game.board[i] = EMPTY_BOARD_CHAR;
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4413      	add	r3, r2
 800b014:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b018:	3304      	adds	r3, #4
 800b01a:	2205      	movs	r2, #5
 800b01c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3301      	adds	r3, #1
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2bef      	cmp	r3, #239	; 0xef
 800b028:	ddf1      	ble.n	800b00e <tetris_initialize_game+0xe>
    // TODO: Make this rand again
//    time_t t;
//    srand((unsigned) time(&t));

    // initialize game state (tetromino, rotation, next tetromino, x, y, game state)
    window->game.rotation = 0;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b030:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b034:	2200      	movs	r2, #0
 800b036:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = tetris_get_next_tetromino();
 800b038:	f000 f830 	bl	800b09c <tetris_get_next_tetromino>
 800b03c:	4602      	mov	r2, r0
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b044:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b048:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino();
 800b04a:	f000 f827 	bl	800b09c <tetris_get_next_tetromino>
 800b04e:	4602      	mov	r2, r0
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b056:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b05a:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b062:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b066:	2203      	movs	r2, #3
 800b068:	601a      	str	r2, [r3, #0]
    window->game.y = 0;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
    window->game.state = Start;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b07a:	33f4      	adds	r3, #244	; 0xf4
 800b07c:	2200      	movs	r2, #0
 800b07e:	701a      	strb	r2, [r3, #0]
    window->game.points = 0;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b086:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]

    // initialize the current tetromino
    tetris_update_current_tetromino(window);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f80e 	bl	800b0b0 <tetris_update_current_tetromino>
}
 800b094:	bf00      	nop
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <tetris_get_next_tetromino>:
/**
 * @brief generate random tetromino piece (select random number between 0 and 7)
 *
 * @return const char* pointer to random tetromino piece
 */
const uint8_t * tetris_get_next_tetromino() {
 800b09c:	b480      	push	{r7}
 800b09e:	af00      	add	r7, sp, #0
	// TODO: Make this rand again
    switch (0 % 7) {
        case 0:
            return tetromino_I;
 800b0a0:	4b02      	ldr	r3, [pc, #8]	; (800b0ac <tetris_get_next_tetromino+0x10>)
        default:
            return tetromino_I; // TODO: this is never supposed to happen.
        break;
    }

}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	0800c888 	.word	0x0800c888

0800b0b0 <tetris_update_current_tetromino>:
/**
 * @brief Updates the tetromino piece used for collision/drawing purposes
 *
 * @param window window
 */
void tetris_update_current_tetromino(Window * window) {
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
    // update piece based on rotation state
    int index = 0, row, col;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	617b      	str	r3, [r7, #20]
    switch (window->game.rotation) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b0c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b0c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	f200 80a0 	bhi.w	800b210 <tetris_update_current_tetromino+0x160>
 800b0d0:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <tetris_update_current_tetromino+0x28>)
 800b0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d6:	bf00      	nop
 800b0d8:	0800b0e9 	.word	0x0800b0e9
 800b0dc:	0800b133 	.word	0x0800b133
 800b0e0:	0800b17d 	.word	0x0800b17d
 800b0e4:	0800b1c7 	.word	0x0800b1c7
        case 0:
            // no rotation
            for (row = 0; row < 4; row++) {
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	613b      	str	r3, [r7, #16]
 800b0ec:	e01d      	b.n	800b12a <tetris_update_current_tetromino+0x7a>
                for (col = 0; col < 4; col++) {
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]
 800b0f2:	e014      	b.n	800b11e <tetris_update_current_tetromino+0x6e>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b0fa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	441a      	add	r2, r3
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	0099      	lsls	r1, r3, #2
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	440b      	add	r3, r1
 800b10c:	7811      	ldrb	r1, [r2, #0]
 800b10e:	4a43      	ldr	r2, [pc, #268]	; (800b21c <tetris_update_current_tetromino+0x16c>)
 800b110:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	3301      	adds	r3, #1
 800b116:	617b      	str	r3, [r7, #20]
                for (col = 0; col < 4; col++) {
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3301      	adds	r3, #1
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b03      	cmp	r3, #3
 800b122:	dde7      	ble.n	800b0f4 <tetris_update_current_tetromino+0x44>
            for (row = 0; row < 4; row++) {
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	3301      	adds	r3, #1
 800b128:	613b      	str	r3, [r7, #16]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	ddde      	ble.n	800b0ee <tetris_update_current_tetromino+0x3e>
                }
            }
        break;
 800b130:	e06e      	b.n	800b210 <tetris_update_current_tetromino+0x160>
        case 1:
            // C 1; CC 3;
            for (col = 3; col >= 0; col--) {
 800b132:	2303      	movs	r3, #3
 800b134:	60fb      	str	r3, [r7, #12]
 800b136:	e01d      	b.n	800b174 <tetris_update_current_tetromino+0xc4>
                for (row = 0; row < 4; row++) {
 800b138:	2300      	movs	r3, #0
 800b13a:	613b      	str	r3, [r7, #16]
 800b13c:	e014      	b.n	800b168 <tetris_update_current_tetromino+0xb8>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b144:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	441a      	add	r2, r3
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	0099      	lsls	r1, r3, #2
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	440b      	add	r3, r1
 800b156:	7811      	ldrb	r1, [r2, #0]
 800b158:	4a30      	ldr	r2, [pc, #192]	; (800b21c <tetris_update_current_tetromino+0x16c>)
 800b15a:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	3301      	adds	r3, #1
 800b160:	617b      	str	r3, [r7, #20]
                for (row = 0; row < 4; row++) {
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	3301      	adds	r3, #1
 800b166:	613b      	str	r3, [r7, #16]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	dde7      	ble.n	800b13e <tetris_update_current_tetromino+0x8e>
            for (col = 3; col >= 0; col--) {
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3b01      	subs	r3, #1
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	dade      	bge.n	800b138 <tetris_update_current_tetromino+0x88>
                }
            }
        break;
 800b17a:	e049      	b.n	800b210 <tetris_update_current_tetromino+0x160>
        case 2:
            // C 2; CC 2;
            for (row = 3; row >= 0; row--) {
 800b17c:	2303      	movs	r3, #3
 800b17e:	613b      	str	r3, [r7, #16]
 800b180:	e01d      	b.n	800b1be <tetris_update_current_tetromino+0x10e>
                for (col = 3; col >= 0; col--) {
 800b182:	2303      	movs	r3, #3
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	e014      	b.n	800b1b2 <tetris_update_current_tetromino+0x102>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b18e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	441a      	add	r2, r3
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	0099      	lsls	r1, r3, #2
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	440b      	add	r3, r1
 800b1a0:	7811      	ldrb	r1, [r2, #0]
 800b1a2:	4a1e      	ldr	r2, [pc, #120]	; (800b21c <tetris_update_current_tetromino+0x16c>)
 800b1a4:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	617b      	str	r3, [r7, #20]
                for (col = 3; col >= 0; col--) {
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dae7      	bge.n	800b188 <tetris_update_current_tetromino+0xd8>
            for (row = 3; row >= 0; row--) {
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	613b      	str	r3, [r7, #16]
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dade      	bge.n	800b182 <tetris_update_current_tetromino+0xd2>
                }
            }
        break;
 800b1c4:	e024      	b.n	800b210 <tetris_update_current_tetromino+0x160>
        case 3:
            // C 3; CC 1;
            for (col = 0; col < 4; col++) {
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]
 800b1ca:	e01d      	b.n	800b208 <tetris_update_current_tetromino+0x158>
                for (row = 3; row >= 0; row--) {
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	e014      	b.n	800b1fc <tetris_update_current_tetromino+0x14c>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b1d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	441a      	add	r2, r3
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	0099      	lsls	r1, r3, #2
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	440b      	add	r3, r1
 800b1ea:	7811      	ldrb	r1, [r2, #0]
 800b1ec:	4a0b      	ldr	r2, [pc, #44]	; (800b21c <tetris_update_current_tetromino+0x16c>)
 800b1ee:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	617b      	str	r3, [r7, #20]
                for (row = 3; row >= 0; row--) {
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	dae7      	bge.n	800b1d2 <tetris_update_current_tetromino+0x122>
            for (col = 0; col < 4; col++) {
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3301      	adds	r3, #1
 800b206:	60fb      	str	r3, [r7, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	ddde      	ble.n	800b1cc <tetris_update_current_tetromino+0x11c>
                }
            }
        break;
 800b20e:	bf00      	nop
    }
}
 800b210:	bf00      	nop
 800b212:	371c      	adds	r7, #28
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	20000628 	.word	0x20000628

0800b220 <tetris_rotate_C_tetromino>:
/**
 * @brief Rotate the tetromino piece clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_C_tetromino(Window * window) {
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 1) % 4;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b22e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b232:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b236:	3301      	adds	r3, #1
 800b238:	425a      	negs	r2, r3
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	f002 0203 	and.w	r2, r2, #3
 800b242:	bf58      	it	pl
 800b244:	4253      	negpl	r3, r2
 800b246:	b21a      	sxth	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b24e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b252:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff ff2b 	bl	800b0b0 <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800b25a:	2200      	movs	r2, #0
 800b25c:	2100      	movs	r1, #0
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f8c6 	bl	800b3f0 <tetris_validate_position>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d018      	beq.n	800b29c <tetris_rotate_C_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 3) % 4;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b270:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b274:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b278:	3303      	adds	r3, #3
 800b27a:	425a      	negs	r2, r3
 800b27c:	f003 0303 	and.w	r3, r3, #3
 800b280:	f002 0203 	and.w	r2, r2, #3
 800b284:	bf58      	it	pl
 800b286:	4253      	negpl	r3, r2
 800b288:	b21a      	sxth	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b290:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b294:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff ff0a 	bl	800b0b0 <tetris_update_current_tetromino>
    }
}
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <tetris_rotate_CC_tetromino>:
/**
 * @brief Rotate the tetromino piece conter clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_CC_tetromino(Window * window) {
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 3) % 4;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b2b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b2b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2ba:	3303      	adds	r3, #3
 800b2bc:	425a      	negs	r2, r3
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	f002 0203 	and.w	r2, r2, #3
 800b2c6:	bf58      	it	pl
 800b2c8:	4253      	negpl	r3, r2
 800b2ca:	b21a      	sxth	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b2d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b2d6:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7ff fee9 	bl	800b0b0 <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f884 	bl	800b3f0 <tetris_validate_position>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d018      	beq.n	800b320 <tetris_rotate_CC_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 1) % 4;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b2f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b2f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	425a      	negs	r2, r3
 800b300:	f003 0303 	and.w	r3, r3, #3
 800b304:	f002 0203 	and.w	r2, r2, #3
 800b308:	bf58      	it	pl
 800b30a:	4253      	negpl	r3, r2
 800b30c:	b21a      	sxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b314:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b318:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7ff fec8 	bl	800b0b0 <tetris_update_current_tetromino>
    }
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <tetris_move_left>:
 * @brief Move the piece to the left. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_left(Window * window) {
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, -1, 0)) {
 800b330:	2200      	movs	r2, #0
 800b332:	f04f 31ff 	mov.w	r1, #4294967295
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f85a 	bl	800b3f0 <tetris_validate_position>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10e      	bne.n	800b360 <tetris_move_left+0x38>
        window->game.x--;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b348:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	1e5a      	subs	r2, r3, #1
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b356:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b35a:	601a      	str	r2, [r3, #0]
        return 1;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e000      	b.n	800b362 <tetris_move_left+0x3a>
    }
    return 0;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <tetris_move_right>:
 * @brief Move the piece to the right. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_right(Window * window) {
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 1, 0)) {
 800b372:	2200      	movs	r2, #0
 800b374:	2101      	movs	r1, #1
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f83a 	bl	800b3f0 <tetris_validate_position>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10e      	bne.n	800b3a0 <tetris_move_right+0x36>
        window->game.x++;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b388:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b396:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b39a:	601a      	str	r2, [r3, #0]
        return 1;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e000      	b.n	800b3a2 <tetris_move_right+0x38>
    }
    return 0;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <tetris_move_down>:
 * @brief Move the piece down. Tetromino piece position is finalized if collision occurs. Get next tetromino & update board accordingly.
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_down(Window * window) {
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 0, 1)) {
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f81a 	bl	800b3f0 <tetris_validate_position>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10a      	bne.n	800b3d8 <tetris_move_down+0x2e>
        window->game.y++;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b3d2:	601a      	str	r2, [r3, #0]
        return 1;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e006      	b.n	800b3e6 <tetris_move_down+0x3c>
    }

    tetris_finished_tetromino(window);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f99b 	bl	800b714 <tetris_finished_tetromino>
    tetris_detect_rowCompletion(window);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa2e 	bl	800b840 <tetris_detect_rowCompletion>
    return 1;
 800b3e4:	2301      	movs	r3, #1
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
	...

0800b3f0 <tetris_validate_position>:
 * @param window tetris game window w/ tetromino data we want to validate
 * @param x_offset added to tetromino current x. X position to validate
 * @param y_offset added to tetromino current y. Y position to validate
 * @return int error code. 0 = no collision. 1 = collision w/ left wall. 2 = collision w/ right wall. 3 = collision with bottom floor. 4 = collision w/another block
 */
int tetris_validate_position(Window * window, int x_offset, int y_offset) {
 800b3f0:	b480      	push	{r7}
 800b3f2:	b089      	sub	sp, #36	; 0x24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
    int index = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	61fb      	str	r3, [r7, #28]
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	4413      	add	r3, r2
 800b40c:	61bb      	str	r3, [r7, #24]
 800b40e:	e057      	b.n	800b4c0 <tetris_validate_position+0xd0>
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b416:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	4413      	add	r3, r2
 800b420:	617b      	str	r3, [r7, #20]
 800b422:	e03e      	b.n	800b4a2 <tetris_validate_position+0xb2>
            // check for collision w/ bottom floor
            if (row >= BOARD_HEIGHT && tetromino_current[index] != 10) {
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	2b17      	cmp	r3, #23
 800b428:	dd07      	ble.n	800b43a <tetris_validate_position+0x4a>
 800b42a:	4a2e      	ldr	r2, [pc, #184]	; (800b4e4 <tetris_validate_position+0xf4>)
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	4413      	add	r3, r2
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	2b0a      	cmp	r3, #10
 800b434:	d001      	beq.n	800b43a <tetris_validate_position+0x4a>
                return 3;
 800b436:	2303      	movs	r3, #3
 800b438:	e04d      	b.n	800b4d6 <tetris_validate_position+0xe6>
            }
            // collision w/ left wall
            if (col < 0 && tetromino_current[index] != 10) {
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	da07      	bge.n	800b450 <tetris_validate_position+0x60>
 800b440:	4a28      	ldr	r2, [pc, #160]	; (800b4e4 <tetris_validate_position+0xf4>)
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	4413      	add	r3, r2
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b0a      	cmp	r3, #10
 800b44a:	d001      	beq.n	800b450 <tetris_validate_position+0x60>
                return 1;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e042      	b.n	800b4d6 <tetris_validate_position+0xe6>
            }
            if (col >= BOARD_WIDTH && tetromino_current[index] != 10) {
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2b09      	cmp	r3, #9
 800b454:	dd07      	ble.n	800b466 <tetris_validate_position+0x76>
 800b456:	4a23      	ldr	r2, [pc, #140]	; (800b4e4 <tetris_validate_position+0xf4>)
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	4413      	add	r3, r2
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b0a      	cmp	r3, #10
 800b460:	d001      	beq.n	800b466 <tetris_validate_position+0x76>
                return 2;
 800b462:	2302      	movs	r3, #2
 800b464:	e037      	b.n	800b4d6 <tetris_validate_position+0xe6>
            }
            if (tetromino_current[index] != 10 && window->game.board[BOARD_WIDTH * row + col] != EMPTY_BOARD_CHAR) {
 800b466:	4a1f      	ldr	r2, [pc, #124]	; (800b4e4 <tetris_validate_position+0xf4>)
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	4413      	add	r3, r2
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	2b0a      	cmp	r3, #10
 800b470:	d011      	beq.n	800b496 <tetris_validate_position+0xa6>
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	461a      	mov	r2, r3
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	4413      	add	r3, r2
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	4413      	add	r3, r2
 800b486:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b48a:	3304      	adds	r3, #4
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b05      	cmp	r3, #5
 800b490:	d001      	beq.n	800b496 <tetris_validate_position+0xa6>
                return 4;
 800b492:	2304      	movs	r3, #4
 800b494:	e01f      	b.n	800b4d6 <tetris_validate_position+0xe6>
            }
            index++;
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	3301      	adds	r3, #1
 800b49a:	61fb      	str	r3, [r7, #28]
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	617b      	str	r3, [r7, #20]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b4a8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	1d1a      	adds	r2, r3, #4
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	dbb4      	blt.n	800b424 <tetris_validate_position+0x34>
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	61bb      	str	r3, [r7, #24]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	db9d      	blt.n	800b410 <tetris_validate_position+0x20>
        }
    }
    return 0;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3724      	adds	r7, #36	; 0x24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20000628 	.word	0x20000628

0800b4e8 <tetris_draw_endScreen>:
 * @brief Draws the final screen of Tetris.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_draw_endScreen(Window * window) {
 800b4e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b4ec:	b08a      	sub	sp, #40	; 0x28
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
	// Draw a smiley face
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800b4f2:	2346      	movs	r3, #70	; 0x46
 800b4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4f6:	e0f0      	b.n	800b6da <tetris_draw_endScreen+0x1f2>
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	623b      	str	r3, [r7, #32]
 800b4fc:	e0e6      	b.n	800b6cc <tetris_draw_endScreen+0x1e4>
			float y = IMAGE_HEIGHT-(i-IMAGE_Y) - (((float)IMAGE_HEIGHT)/2);
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 800b504:	ee07 3a90 	vmov	s15, r3
 800b508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b50c:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800b6f8 <tetris_draw_endScreen+0x210>
 800b510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b514:	edc7 7a07 	vstr	s15, [r7, #28]
			float x = (((float)IMAGE_HEIGHT)/IMAGE_WIDTH)*(j-IMAGE_X) - (((float)IMAGE_HEIGHT)/2);
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	3b02      	subs	r3, #2
 800b51c:	ee07 3a90 	vmov	s15, r3
 800b520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b524:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800b6fc <tetris_draw_endScreen+0x214>
 800b528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b52c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800b6f8 <tetris_draw_endScreen+0x210>
 800b530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b534:	edc7 7a06 	vstr	s15, [r7, #24]
			float rad_head = x*x + y*y;
 800b538:	edd7 7a06 	vldr	s15, [r7, #24]
 800b53c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b540:	edd7 7a07 	vldr	s15, [r7, #28]
 800b544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b54c:	edc7 7a05 	vstr	s15, [r7, #20]
			float rad_eyes = (abs(x)-70)*(abs(x)-70) + (y-30)*(y-30);
 800b550:	edd7 7a06 	vldr	s15, [r7, #24]
 800b554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b558:	ee17 3a90 	vmov	r3, s15
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfb8      	it	lt
 800b560:	425b      	neglt	r3, r3
 800b562:	3b46      	subs	r3, #70	; 0x46
 800b564:	edd7 7a06 	vldr	s15, [r7, #24]
 800b568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b56c:	ee17 2a90 	vmov	r2, s15
 800b570:	2a00      	cmp	r2, #0
 800b572:	bfb8      	it	lt
 800b574:	4252      	neglt	r2, r2
 800b576:	3a46      	subs	r2, #70	; 0x46
 800b578:	fb02 f303 	mul.w	r3, r2, r3
 800b57c:	ee07 3a90 	vmov	s15, r3
 800b580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b584:	edd7 7a07 	vldr	s15, [r7, #28]
 800b588:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800b58c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b590:	edd7 7a07 	vldr	s15, [r7, #28]
 800b594:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 800b598:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b59c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b5a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5a4:	edc7 7a04 	vstr	s15, [r7, #16]
			// Happy if we get over 80k :)
			// Even though that point count may overflow the screen-
			if (window->game.points < 80,000) {
				quad_rad = abs((y+100)+0.01*x*x);
			} else {
				quad_rad = abs((y+100)-0.01*x*x);
 800b5a8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b5ac:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800b700 <tetris_draw_endScreen+0x218>
 800b5b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5b4:	ee17 0a90 	vmov	r0, s15
 800b5b8:	f7f5 f900 	bl	80007bc <__aeabi_f2d>
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460d      	mov	r5, r1
 800b5c0:	69b8      	ldr	r0, [r7, #24]
 800b5c2:	f7f5 f8fb 	bl	80007bc <__aeabi_f2d>
 800b5c6:	a34a      	add	r3, pc, #296	; (adr r3, 800b6f0 <tetris_draw_endScreen+0x208>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f7f4 fe68 	bl	80002a0 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4690      	mov	r8, r2
 800b5d6:	4699      	mov	r9, r3
 800b5d8:	69b8      	ldr	r0, [r7, #24]
 800b5da:	f7f5 f8ef 	bl	80007bc <__aeabi_f2d>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	f7f4 fe5b 	bl	80002a0 <__aeabi_dmul>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	f7f4 ff83 	bl	80004fc <__aeabi_dsub>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	f7f5 f935 	bl	800086c <__aeabi_d2iz>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	bfb8      	it	lt
 800b608:	425b      	neglt	r3, r3
 800b60a:	ee07 3a90 	vmov	s15, r3
 800b60e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b612:	edc7 7a03 	vstr	s15, [r7, #12]
			}
			if(rad_head > 150*150 && rad_head < 170*170) {
 800b616:	edd7 7a05 	vldr	s15, [r7, #20]
 800b61a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800b704 <tetris_draw_endScreen+0x21c>
 800b61e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b626:	dd13      	ble.n	800b650 <tetris_draw_endScreen+0x168>
 800b628:	edd7 7a05 	vldr	s15, [r7, #20]
 800b62c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b708 <tetris_draw_endScreen+0x220>
 800b630:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b638:	d50a      	bpl.n	800b650 <tetris_draw_endScreen+0x168>
				window->frame[i][j] = (uint8_t) 255;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	689a      	ldr	r2, [r3, #8]
 800b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	4413      	add	r3, r2
 800b64a:	22ff      	movs	r2, #255	; 0xff
 800b64c:	701a      	strb	r2, [r3, #0]
 800b64e:	e03a      	b.n	800b6c6 <tetris_draw_endScreen+0x1de>
			} else if (rad_eyes < 20*20) {
 800b650:	edd7 7a04 	vldr	s15, [r7, #16]
 800b654:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800b70c <tetris_draw_endScreen+0x224>
 800b658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b660:	d50a      	bpl.n	800b678 <tetris_draw_endScreen+0x190>
				window->frame[i][j] = (uint8_t) 255;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689a      	ldr	r2, [r3, #8]
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	6a3b      	ldr	r3, [r7, #32]
 800b670:	4413      	add	r3, r2
 800b672:	22ff      	movs	r2, #255	; 0xff
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	e026      	b.n	800b6c6 <tetris_draw_endScreen+0x1de>
			} else if (quad_rad < 10 && y < -55) {
 800b678:	edd7 7a03 	vldr	s15, [r7, #12]
 800b67c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800b680:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	d513      	bpl.n	800b6b2 <tetris_draw_endScreen+0x1ca>
 800b68a:	edd7 7a07 	vldr	s15, [r7, #28]
 800b68e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b710 <tetris_draw_endScreen+0x228>
 800b692:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b69a:	d50a      	bpl.n	800b6b2 <tetris_draw_endScreen+0x1ca>
				window->frame[i][j] = (uint8_t) 255;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	22ff      	movs	r2, #255	; 0xff
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	e009      	b.n	800b6c6 <tetris_draw_endScreen+0x1de>
			} else {
				window->frame[i][j] = (uint8_t) 0;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	689a      	ldr	r2, [r3, #8]
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	701a      	strb	r2, [r3, #0]
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	623b      	str	r3, [r7, #32]
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	2b51      	cmp	r3, #81	; 0x51
 800b6d0:	f77f af15 	ble.w	800b4fe <tetris_draw_endScreen+0x16>
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800b6e0:	f6ff af0a 	blt.w	800b4f8 <tetris_draw_endScreen+0x10>
			}
		}
	}
}
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop
 800b6e8:	3728      	adds	r7, #40	; 0x28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b6f0:	47ae147b 	.word	0x47ae147b
 800b6f4:	3f847ae1 	.word	0x3f847ae1
 800b6f8:	432f0000 	.word	0x432f0000
 800b6fc:	408c0000 	.word	0x408c0000
 800b700:	42c80000 	.word	0x42c80000
 800b704:	46afc800 	.word	0x46afc800
 800b708:	46e1c800 	.word	0x46e1c800
 800b70c:	43c80000 	.word	0x43c80000
 800b710:	c25c0000 	.word	0xc25c0000

0800b714 <tetris_finished_tetromino>:
 * @brief Finalizes the tetromino position and generates a new tetromino.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_finished_tetromino(Window * window) {
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
    int index = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	617b      	str	r3, [r7, #20]
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	e04e      	b.n	800b7ca <tetris_finished_tetromino+0xb6>
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b732:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	60fb      	str	r3, [r7, #12]
 800b73a:	e039      	b.n	800b7b0 <tetris_finished_tetromino+0x9c>
            if (row >= 0 && row < BOARD_HEIGHT && col >= 0 && col < BOARD_WIDTH && tetromino_current[index] != 10) {
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	db30      	blt.n	800b7a4 <tetris_finished_tetromino+0x90>
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2b17      	cmp	r3, #23
 800b746:	dc2d      	bgt.n	800b7a4 <tetris_finished_tetromino+0x90>
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	db2a      	blt.n	800b7a4 <tetris_finished_tetromino+0x90>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2b09      	cmp	r3, #9
 800b752:	dc27      	bgt.n	800b7a4 <tetris_finished_tetromino+0x90>
 800b754:	4a39      	ldr	r2, [pc, #228]	; (800b83c <tetris_finished_tetromino+0x128>)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	4413      	add	r3, r2
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	2b0a      	cmp	r3, #10
 800b75e:	d021      	beq.n	800b7a4 <tetris_finished_tetromino+0x90>
                window->game.board[BOARD_WIDTH * row + col] = tetromino_current[index];
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	4613      	mov	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	461a      	mov	r2, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4413      	add	r3, r2
 800b770:	4932      	ldr	r1, [pc, #200]	; (800b83c <tetris_finished_tetromino+0x128>)
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	440a      	add	r2, r1
 800b776:	7811      	ldrb	r1, [r2, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	4413      	add	r3, r2
 800b77c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b780:	3304      	adds	r3, #4
 800b782:	460a      	mov	r2, r1
 800b784:	701a      	strb	r2, [r3, #0]

                // check to see if game over!
                if (row < 4) {
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	2b03      	cmp	r3, #3
 800b78a:	dc0b      	bgt.n	800b7a4 <tetris_finished_tetromino+0x90>
                    tetris_initialize_game(window);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff fc37 	bl	800b000 <tetris_initialize_game>
                    tetris_draw_endScreen(window);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff fea8 	bl	800b4e8 <tetris_draw_endScreen>
                    window->game.state = Ended;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b79e:	33f4      	adds	r3, #244	; 0xf4
 800b7a0:	2203      	movs	r2, #3
 800b7a2:	701a      	strb	r2, [r3, #0]
                }
            }
            index++;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	617b      	str	r3, [r7, #20]
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b7b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3303      	adds	r3, #3
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	ddbb      	ble.n	800b73c <tetris_finished_tetromino+0x28>
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	613b      	str	r3, [r7, #16]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3303      	adds	r3, #3
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	dda8      	ble.n	800b72c <tetris_finished_tetromino+0x18>
        }
    }

    // reset tetromino position & spawn next tetromino
    window->game.y = 0;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b7ea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b7ee:	2203      	movs	r2, #3
 800b7f0:	601a      	str	r2, [r3, #0]
    window->game.rotation = 0;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b7f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = window->game.nextTetromino;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b806:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b812:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b816:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino(window);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff fc3f 	bl	800b09c <tetris_get_next_tetromino>
 800b81e:	4602      	mov	r2, r0
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b826:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b82a:	601a      	str	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff fc3f 	bl	800b0b0 <tetris_update_current_tetromino>
}
 800b832:	bf00      	nop
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20000628 	.word	0x20000628

0800b840 <tetris_detect_rowCompletion>:
/**
 * @brief Detect full rows, and clears them out of the board
 *
 * @param window window w/ game
 */
void tetris_detect_rowCompletion(Window * window) {
 800b840:	b580      	push	{r7, lr}
 800b842:	b0aa      	sub	sp, #168	; 0xa8
 800b844:	af04      	add	r7, sp, #16
 800b846:	6078      	str	r0, [r7, #4]
    // go over board & detect all lines that need to be cleared.
    int rowCompleted[BOARD_HEIGHT];
    int numRowsCompleted = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800b84e:	2300      	movs	r3, #0
 800b850:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b854:	e044      	b.n	800b8e0 <tetris_detect_rowCompletion+0xa0>
        rowCompleted[row] = 1;
 800b856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b860:	4413      	add	r3, r2
 800b862:	2201      	movs	r2, #1
 800b864:	f843 2c90 	str.w	r2, [r3, #-144]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800b868:	2300      	movs	r3, #0
 800b86a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b86e:	e01f      	b.n	800b8b0 <tetris_detect_rowCompletion+0x70>
            if (window->game.board[BOARD_WIDTH * row + col] == EMPTY_BOARD_CHAR) {
 800b870:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b874:	4613      	mov	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	461a      	mov	r2, r3
 800b87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b882:	4413      	add	r3, r2
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	4413      	add	r3, r2
 800b888:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b88c:	3304      	adds	r3, #4
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b05      	cmp	r3, #5
 800b892:	d108      	bne.n	800b8a6 <tetris_detect_rowCompletion+0x66>
                rowCompleted[row] = 0;
 800b894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b89e:	4413      	add	r3, r2
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f843 2c90 	str.w	r2, [r3, #-144]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800b8a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b8b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8b4:	2b09      	cmp	r3, #9
 800b8b6:	dddb      	ble.n	800b870 <tetris_detect_rowCompletion+0x30>
            }
        }
        if(rowCompleted[row]) numRowsCompleted++;
 800b8b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d004      	beq.n	800b8d6 <tetris_detect_rowCompletion+0x96>
 800b8cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800b8d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8da:	3301      	adds	r3, #1
 800b8dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8e4:	2b17      	cmp	r3, #23
 800b8e6:	ddb6      	ble.n	800b856 <tetris_detect_rowCompletion+0x16>
    }

    for (int i = 0; i < 4; i++) {
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8ee:	e058      	b.n	800b9a2 <tetris_detect_rowCompletion+0x162>
        int anyRowFlag = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        // go over board from bottom to top & turn lines that need to be cleared on/off
        for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800b8f6:	2317      	movs	r3, #23
 800b8f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8fc:	e033      	b.n	800b966 <tetris_detect_rowCompletion+0x126>
            if (rowCompleted[row]) {
 800b8fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b908:	4413      	add	r3, r2
 800b90a:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d024      	beq.n	800b95c <tetris_detect_rowCompletion+0x11c>
                for (int col = 0; col < BOARD_WIDTH; col++) {
 800b912:	2300      	movs	r3, #0
 800b914:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b916:	e01b      	b.n	800b950 <tetris_detect_rowCompletion+0x110>
                    window->game.board[BOARD_WIDTH * row + col] = (i%2) ? 150 : EMPTY_BOARD_CHAR;
 800b918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b91c:	f003 0301 	and.w	r3, r3, #1
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <tetris_detect_rowCompletion+0xe8>
 800b924:	2196      	movs	r1, #150	; 0x96
 800b926:	e000      	b.n	800b92a <tetris_detect_rowCompletion+0xea>
 800b928:	2105      	movs	r1, #5
 800b92a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b92e:	4613      	mov	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	461a      	mov	r2, r3
 800b938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b93a:	4413      	add	r3, r2
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	4413      	add	r3, r2
 800b940:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b944:	3304      	adds	r3, #4
 800b946:	460a      	mov	r2, r1
 800b948:	701a      	strb	r2, [r3, #0]
                for (int col = 0; col < BOARD_WIDTH; col++) {
 800b94a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b94c:	3301      	adds	r3, #1
 800b94e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b950:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b952:	2b09      	cmp	r3, #9
 800b954:	dde0      	ble.n	800b918 <tetris_detect_rowCompletion+0xd8>
                }
                anyRowFlag = 1;
 800b956:	2301      	movs	r3, #1
 800b958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800b95c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b960:	3b01      	subs	r3, #1
 800b962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b966:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	dac7      	bge.n	800b8fe <tetris_detect_rowCompletion+0xbe>
            }
        }

        if (!anyRowFlag) {
 800b96e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b972:	2b00      	cmp	r3, #0
 800b974:	d01a      	beq.n	800b9ac <tetris_detect_rowCompletion+0x16c>
            break;
        }

        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, 1, 1, window->game.board);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b97c:	3304      	adds	r3, #4
 800b97e:	9303      	str	r3, [sp, #12]
 800b980:	2301      	movs	r3, #1
 800b982:	9302      	str	r3, [sp, #8]
 800b984:	2301      	movs	r3, #1
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	2318      	movs	r3, #24
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	230a      	movs	r3, #10
 800b98e:	2205      	movs	r2, #5
 800b990:	2101      	movs	r1, #1
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f8be 	bl	800bb14 <drawRect>
    for (int i = 0; i < 4; i++) {
 800b998:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b99c:	3301      	adds	r3, #1
 800b99e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	dda2      	ble.n	800b8f0 <tetris_detect_rowCompletion+0xb0>
 800b9aa:	e000      	b.n	800b9ae <tetris_detect_rowCompletion+0x16e>
            break;
 800b9ac:	bf00      	nop
    }

    // go over board from bottom to top & delete the lines that need to be cleared
    int row_currently_drawn = BOARD_HEIGHT - 1;
 800b9ae:	2317      	movs	r3, #23
 800b9b0:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800b9b2:	2317      	movs	r3, #23
 800b9b4:	677b      	str	r3, [r7, #116]	; 0x74
 800b9b6:	e034      	b.n	800ba22 <tetris_detect_rowCompletion+0x1e2>
        if (!rowCompleted[row]) {
 800b9b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d128      	bne.n	800ba1c <tetris_detect_rowCompletion+0x1dc>
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	673b      	str	r3, [r7, #112]	; 0x70
 800b9ce:	e01f      	b.n	800ba10 <tetris_detect_rowCompletion+0x1d0>
                window->game.board[BOARD_WIDTH * row_currently_drawn + col] = window->game.board[BOARD_WIDTH * row + col];
 800b9d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	461a      	mov	r2, r3
 800b9dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9de:	18d1      	adds	r1, r2, r3
 800b9e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9ee:	441a      	add	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	440b      	add	r3, r1
 800b9f4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	7819      	ldrb	r1, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4413      	add	r3, r2
 800ba00:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800ba04:	3304      	adds	r3, #4
 800ba06:	460a      	mov	r2, r1
 800ba08:	701a      	strb	r2, [r3, #0]
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800ba0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	673b      	str	r3, [r7, #112]	; 0x70
 800ba10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba12:	2b09      	cmp	r3, #9
 800ba14:	dddc      	ble.n	800b9d0 <tetris_detect_rowCompletion+0x190>
            }
            row_currently_drawn--;
 800ba16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800ba1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	677b      	str	r3, [r7, #116]	; 0x74
 800ba22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dac7      	bge.n	800b9b8 <tetris_detect_rowCompletion+0x178>
        }
    }

    for (int row = row_currently_drawn; row >= 0; row--) {
 800ba28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba2c:	e01d      	b.n	800ba6a <tetris_detect_rowCompletion+0x22a>
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800ba2e:	2300      	movs	r3, #0
 800ba30:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba32:	e011      	b.n	800ba58 <tetris_detect_rowCompletion+0x218>
            window->game.board[BOARD_WIDTH * row_currently_drawn + col] = EMPTY_BOARD_CHAR;
 800ba34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba36:	4613      	mov	r3, r2
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	005b      	lsls	r3, r3, #1
 800ba3e:	461a      	mov	r2, r3
 800ba40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba42:	4413      	add	r3, r2
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4413      	add	r3, r2
 800ba48:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	2205      	movs	r2, #5
 800ba50:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800ba52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba54:	3301      	adds	r3, #1
 800ba56:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba5a:	2b09      	cmp	r3, #9
 800ba5c:	ddea      	ble.n	800ba34 <tetris_detect_rowCompletion+0x1f4>
        }
        row_currently_drawn--;
 800ba5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba60:	3b01      	subs	r3, #1
 800ba62:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int row = row_currently_drawn; row >= 0; row--) {
 800ba64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba66:	3b01      	subs	r3, #1
 800ba68:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dade      	bge.n	800ba2e <tetris_detect_rowCompletion+0x1ee>
 800ba70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba74:	3b01      	subs	r3, #1
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d846      	bhi.n	800bb08 <tetris_detect_rowCompletion+0x2c8>
 800ba7a:	a201      	add	r2, pc, #4	; (adr r2, 800ba80 <tetris_detect_rowCompletion+0x240>)
 800ba7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba80:	0800ba91 	.word	0x0800ba91
 800ba84:	0800baaf 	.word	0x0800baaf
 800ba88:	0800bacd 	.word	0x0800bacd
 800ba8c:	0800baeb 	.word	0x0800baeb
    }

    switch(numRowsCompleted) {
    case 1:
    	window->game.points += 40;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800ba96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800baa6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800baaa:	601a      	str	r2, [r3, #0]
    	break;
 800baac:	e02d      	b.n	800bb0a <tetris_detect_rowCompletion+0x2ca>
    case 2:
    	window->game.points += 100;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bab4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bac4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bac8:	601a      	str	r2, [r3, #0]
    	break;
 800baca:	e01e      	b.n	800bb0a <tetris_detect_rowCompletion+0x2ca>
    case 3:
    	window->game.points += 300;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bad2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bae2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bae6:	601a      	str	r2, [r3, #0]
    	break;
 800bae8:	e00f      	b.n	800bb0a <tetris_detect_rowCompletion+0x2ca>
    case 4:
    	window->game.points += 1200;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800baf0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bb00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bb04:	601a      	str	r2, [r3, #0]
    	break;
 800bb06:	e000      	b.n	800bb0a <tetris_detect_rowCompletion+0x2ca>
    default:
    	break;
 800bb08:	bf00      	nop
    }
}
 800bb0a:	bf00      	nop
 800bb0c:	3798      	adds	r7, #152	; 0x98
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop

0800bb14 <drawRect>:
 * @param height height of 2D data rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param data data to write to screen
 */
void drawRect(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t* data) {
 800bb14:	b480      	push	{r7}
 800bb16:	b08b      	sub	sp, #44	; 0x2c
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	617b      	str	r3, [r7, #20]

    int indexRow = 0, indexCol;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb30:	fb02 f303 	mul.w	r3, r2, r3
 800bb34:	3346      	adds	r3, #70	; 0x46
 800bb36:	61fb      	str	r3, [r7, #28]
 800bb38:	e06b      	b.n	800bc12 <drawRect+0xfe>
        indexCol = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb42:	fb02 f303 	mul.w	r3, r2, r3
 800bb46:	3302      	adds	r3, #2
 800bb48:	61bb      	str	r3, [r7, #24]
 800bb4a:	e041      	b.n	800bbd0 <drawRect+0xbc>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X && data[indexRow * width + indexCol] != 10) {
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	2b45      	cmp	r3, #69	; 0x45
 800bb50:	dd27      	ble.n	800bba2 <drawRect+0x8e>
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800bb58:	da23      	bge.n	800bba2 <drawRect+0x8e>
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	dd20      	ble.n	800bba2 <drawRect+0x8e>
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2b51      	cmp	r3, #81	; 0x51
 800bb64:	dc1d      	bgt.n	800bba2 <drawRect+0x8e>
 800bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	fb02 f203 	mul.w	r2, r2, r3
 800bb6e:	6a3b      	ldr	r3, [r7, #32]
 800bb70:	4413      	add	r3, r2
 800bb72:	461a      	mov	r2, r3
 800bb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb76:	4413      	add	r3, r2
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b0a      	cmp	r3, #10
 800bb7c:	d011      	beq.n	800bba2 <drawRect+0x8e>
                buff[row][col] = data[indexRow * width + indexCol];
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	fb02 f203 	mul.w	r2, r2, r3
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	4413      	add	r3, r2
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8e:	441a      	add	r2, r3
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	6979      	ldr	r1, [r7, #20]
 800bb96:	440b      	add	r3, r1
 800bb98:	6819      	ldr	r1, [r3, #0]
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	440b      	add	r3, r1
 800bb9e:	7812      	ldrb	r2, [r2, #0]
 800bba0:	701a      	strb	r2, [r3, #0]
            }
            if ((col - (x_start * scaling_h + IMAGE_X) + 1) % scaling_h == 0) {
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba6:	fb02 f303 	mul.w	r3, r2, r3
 800bbaa:	3302      	adds	r3, #2
 800bbac:	69ba      	ldr	r2, [r7, #24]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbb4:	fb93 f2f2 	sdiv	r2, r3, r2
 800bbb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bbba:	fb01 f202 	mul.w	r2, r1, r2
 800bbbe:	1a9b      	subs	r3, r3, r2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d102      	bne.n	800bbca <drawRect+0xb6>
                indexCol++;
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	61bb      	str	r3, [r7, #24]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbd8:	fb02 f303 	mul.w	r3, r2, r3
 800bbdc:	3301      	adds	r3, #1
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	ddb3      	ble.n	800bb4c <drawRect+0x38>
            }
        }
        if ((row - (y_start * scaling_v + IMAGE_Y) + 1) % scaling_v == 0) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbe8:	fb02 f303 	mul.w	r3, r2, r3
 800bbec:	3346      	adds	r3, #70	; 0x46
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf6:	fb93 f2f2 	sdiv	r2, r3, r2
 800bbfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbfc:	fb01 f202 	mul.w	r2, r1, r2
 800bc00:	1a9b      	subs	r3, r3, r2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d102      	bne.n	800bc0c <drawRect+0xf8>
            indexRow++;
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	3301      	adds	r3, #1
 800bc0a:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	61fb      	str	r3, [r7, #28]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc16:	4413      	add	r3, r2
 800bc18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc1a:	fb02 f303 	mul.w	r3, r2, r3
 800bc1e:	3345      	adds	r3, #69	; 0x45
 800bc20:	69fa      	ldr	r2, [r7, #28]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	dd89      	ble.n	800bb3a <drawRect+0x26>
        }
    }
}
 800bc26:	bf00      	nop
 800bc28:	bf00      	nop
 800bc2a:	372c      	adds	r7, #44	; 0x2c
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <drawRect_color>:
 * @param height height of rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param color color to draw in rectangle
 */
void drawRect_color(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t color) {
 800bc34:	b480      	push	{r7}
 800bc36:	b089      	sub	sp, #36	; 0x24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
 800bc40:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	617b      	str	r3, [r7, #20]

    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc4c:	fb02 f303 	mul.w	r3, r2, r3
 800bc50:	3346      	adds	r3, #70	; 0x46
 800bc52:	61fb      	str	r3, [r7, #28]
 800bc54:	e02d      	b.n	800bcb2 <drawRect_color+0x7e>
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc5a:	fb02 f303 	mul.w	r3, r2, r3
 800bc5e:	3302      	adds	r3, #2
 800bc60:	61bb      	str	r3, [r7, #24]
 800bc62:	e019      	b.n	800bc98 <drawRect_color+0x64>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X) {
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	2b45      	cmp	r3, #69	; 0x45
 800bc68:	dd13      	ble.n	800bc92 <drawRect_color+0x5e>
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800bc70:	da0f      	bge.n	800bc92 <drawRect_color+0x5e>
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	dd0c      	ble.n	800bc92 <drawRect_color+0x5e>
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	2b51      	cmp	r3, #81	; 0x51
 800bc7c:	dc09      	bgt.n	800bc92 <drawRect_color+0x5e>
            	buff[row][col] = color;
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	4413      	add	r3, r2
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800bc90:	701a      	strb	r2, [r3, #0]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	3301      	adds	r3, #1
 800bc96:	61bb      	str	r3, [r7, #24]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bca0:	fb02 f303 	mul.w	r3, r2, r3
 800bca4:	3301      	adds	r3, #1
 800bca6:	69ba      	ldr	r2, [r7, #24]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	dddb      	ble.n	800bc64 <drawRect_color+0x30>
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	61fb      	str	r3, [r7, #28]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	4413      	add	r3, r2
 800bcb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcba:	fb02 f303 	mul.w	r3, r2, r3
 800bcbe:	3345      	adds	r3, #69	; 0x45
 800bcc0:	69fa      	ldr	r2, [r7, #28]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	ddc7      	ble.n	800bc56 <drawRect_color+0x22>
            }
        }
    }
}
 800bcc6:	bf00      	nop
 800bcc8:	bf00      	nop
 800bcca:	3724      	adds	r7, #36	; 0x24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800bcd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bd0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800bcd8:	f7ff f962 	bl	800afa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bcdc:	480c      	ldr	r0, [pc, #48]	; (800bd10 <LoopForever+0x6>)
  ldr r1, =_edata
 800bcde:	490d      	ldr	r1, [pc, #52]	; (800bd14 <LoopForever+0xa>)
 ldr r2, =_sidata
 800bce0:	4a0d      	ldr	r2, [pc, #52]	; (800bd18 <LoopForever+0xe>)
  movs r3, #0
 800bce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bce4:	e002      	b.n	800bcec <LoopCopyDataInit>

0800bce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bcea:	3304      	adds	r3, #4

0800bcec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bcec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bcee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bcf0:	d3f9      	bcc.n	800bce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bcf2:	4a0a      	ldr	r2, [pc, #40]	; (800bd1c <LoopForever+0x12>)
  ldr r4, =_ebss
 800bcf4:	4c0a      	ldr	r4, [pc, #40]	; (800bd20 <LoopForever+0x16>)
  movs r3, #0
 800bcf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bcf8:	e001      	b.n	800bcfe <LoopFillZerobss>

0800bcfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bcfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bcfc:	3204      	adds	r2, #4

0800bcfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bcfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd00:	d3fb      	bcc.n	800bcfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bd02:	f000 f817 	bl	800bd34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800bd06:	f7fe f96d 	bl	8009fe4 <main>

0800bd0a <LoopForever>:

LoopForever:
    b LoopForever
 800bd0a:	e7fe      	b.n	800bd0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800bd0c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800bd10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bd14:	2000069c 	.word	0x2000069c
 ldr r2, =_sidata
 800bd18:	0800c93c 	.word	0x0800c93c
  ldr r2, =_sbss
 800bd1c:	2000069c 	.word	0x2000069c
  ldr r4, =_ebss
 800bd20:	2001aae0 	.word	0x2001aae0

0800bd24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800bd24:	e7fe      	b.n	800bd24 <ADC1_IRQHandler>
	...

0800bd28 <__errno>:
 800bd28:	4b01      	ldr	r3, [pc, #4]	; (800bd30 <__errno+0x8>)
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	20000638 	.word	0x20000638

0800bd34 <__libc_init_array>:
 800bd34:	b570      	push	{r4, r5, r6, lr}
 800bd36:	4d0d      	ldr	r5, [pc, #52]	; (800bd6c <__libc_init_array+0x38>)
 800bd38:	4c0d      	ldr	r4, [pc, #52]	; (800bd70 <__libc_init_array+0x3c>)
 800bd3a:	1b64      	subs	r4, r4, r5
 800bd3c:	10a4      	asrs	r4, r4, #2
 800bd3e:	2600      	movs	r6, #0
 800bd40:	42a6      	cmp	r6, r4
 800bd42:	d109      	bne.n	800bd58 <__libc_init_array+0x24>
 800bd44:	4d0b      	ldr	r5, [pc, #44]	; (800bd74 <__libc_init_array+0x40>)
 800bd46:	4c0c      	ldr	r4, [pc, #48]	; (800bd78 <__libc_init_array+0x44>)
 800bd48:	f000 fcc0 	bl	800c6cc <_init>
 800bd4c:	1b64      	subs	r4, r4, r5
 800bd4e:	10a4      	asrs	r4, r4, #2
 800bd50:	2600      	movs	r6, #0
 800bd52:	42a6      	cmp	r6, r4
 800bd54:	d105      	bne.n	800bd62 <__libc_init_array+0x2e>
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
 800bd58:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd5c:	4798      	blx	r3
 800bd5e:	3601      	adds	r6, #1
 800bd60:	e7ee      	b.n	800bd40 <__libc_init_array+0xc>
 800bd62:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd66:	4798      	blx	r3
 800bd68:	3601      	adds	r6, #1
 800bd6a:	e7f2      	b.n	800bd52 <__libc_init_array+0x1e>
 800bd6c:	0800c934 	.word	0x0800c934
 800bd70:	0800c934 	.word	0x0800c934
 800bd74:	0800c934 	.word	0x0800c934
 800bd78:	0800c938 	.word	0x0800c938

0800bd7c <__retarget_lock_acquire_recursive>:
 800bd7c:	4770      	bx	lr

0800bd7e <__retarget_lock_release_recursive>:
 800bd7e:	4770      	bx	lr

0800bd80 <malloc>:
 800bd80:	4b02      	ldr	r3, [pc, #8]	; (800bd8c <malloc+0xc>)
 800bd82:	4601      	mov	r1, r0
 800bd84:	6818      	ldr	r0, [r3, #0]
 800bd86:	f000 b869 	b.w	800be5c <_malloc_r>
 800bd8a:	bf00      	nop
 800bd8c:	20000638 	.word	0x20000638

0800bd90 <memcpy>:
 800bd90:	440a      	add	r2, r1
 800bd92:	4291      	cmp	r1, r2
 800bd94:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd98:	d100      	bne.n	800bd9c <memcpy+0xc>
 800bd9a:	4770      	bx	lr
 800bd9c:	b510      	push	{r4, lr}
 800bd9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bda2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bda6:	4291      	cmp	r1, r2
 800bda8:	d1f9      	bne.n	800bd9e <memcpy+0xe>
 800bdaa:	bd10      	pop	{r4, pc}

0800bdac <memset>:
 800bdac:	4402      	add	r2, r0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d100      	bne.n	800bdb6 <memset+0xa>
 800bdb4:	4770      	bx	lr
 800bdb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdba:	e7f9      	b.n	800bdb0 <memset+0x4>

0800bdbc <_free_r>:
 800bdbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdbe:	2900      	cmp	r1, #0
 800bdc0:	d048      	beq.n	800be54 <_free_r+0x98>
 800bdc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc6:	9001      	str	r0, [sp, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f1a1 0404 	sub.w	r4, r1, #4
 800bdce:	bfb8      	it	lt
 800bdd0:	18e4      	addlt	r4, r4, r3
 800bdd2:	f000 f937 	bl	800c044 <__malloc_lock>
 800bdd6:	4a20      	ldr	r2, [pc, #128]	; (800be58 <_free_r+0x9c>)
 800bdd8:	9801      	ldr	r0, [sp, #4]
 800bdda:	6813      	ldr	r3, [r2, #0]
 800bddc:	4615      	mov	r5, r2
 800bdde:	b933      	cbnz	r3, 800bdee <_free_r+0x32>
 800bde0:	6063      	str	r3, [r4, #4]
 800bde2:	6014      	str	r4, [r2, #0]
 800bde4:	b003      	add	sp, #12
 800bde6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdea:	f000 b931 	b.w	800c050 <__malloc_unlock>
 800bdee:	42a3      	cmp	r3, r4
 800bdf0:	d90b      	bls.n	800be0a <_free_r+0x4e>
 800bdf2:	6821      	ldr	r1, [r4, #0]
 800bdf4:	1862      	adds	r2, r4, r1
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	bf04      	itt	eq
 800bdfa:	681a      	ldreq	r2, [r3, #0]
 800bdfc:	685b      	ldreq	r3, [r3, #4]
 800bdfe:	6063      	str	r3, [r4, #4]
 800be00:	bf04      	itt	eq
 800be02:	1852      	addeq	r2, r2, r1
 800be04:	6022      	streq	r2, [r4, #0]
 800be06:	602c      	str	r4, [r5, #0]
 800be08:	e7ec      	b.n	800bde4 <_free_r+0x28>
 800be0a:	461a      	mov	r2, r3
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	b10b      	cbz	r3, 800be14 <_free_r+0x58>
 800be10:	42a3      	cmp	r3, r4
 800be12:	d9fa      	bls.n	800be0a <_free_r+0x4e>
 800be14:	6811      	ldr	r1, [r2, #0]
 800be16:	1855      	adds	r5, r2, r1
 800be18:	42a5      	cmp	r5, r4
 800be1a:	d10b      	bne.n	800be34 <_free_r+0x78>
 800be1c:	6824      	ldr	r4, [r4, #0]
 800be1e:	4421      	add	r1, r4
 800be20:	1854      	adds	r4, r2, r1
 800be22:	42a3      	cmp	r3, r4
 800be24:	6011      	str	r1, [r2, #0]
 800be26:	d1dd      	bne.n	800bde4 <_free_r+0x28>
 800be28:	681c      	ldr	r4, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	6053      	str	r3, [r2, #4]
 800be2e:	4421      	add	r1, r4
 800be30:	6011      	str	r1, [r2, #0]
 800be32:	e7d7      	b.n	800bde4 <_free_r+0x28>
 800be34:	d902      	bls.n	800be3c <_free_r+0x80>
 800be36:	230c      	movs	r3, #12
 800be38:	6003      	str	r3, [r0, #0]
 800be3a:	e7d3      	b.n	800bde4 <_free_r+0x28>
 800be3c:	6825      	ldr	r5, [r4, #0]
 800be3e:	1961      	adds	r1, r4, r5
 800be40:	428b      	cmp	r3, r1
 800be42:	bf04      	itt	eq
 800be44:	6819      	ldreq	r1, [r3, #0]
 800be46:	685b      	ldreq	r3, [r3, #4]
 800be48:	6063      	str	r3, [r4, #4]
 800be4a:	bf04      	itt	eq
 800be4c:	1949      	addeq	r1, r1, r5
 800be4e:	6021      	streq	r1, [r4, #0]
 800be50:	6054      	str	r4, [r2, #4]
 800be52:	e7c7      	b.n	800bde4 <_free_r+0x28>
 800be54:	b003      	add	sp, #12
 800be56:	bd30      	pop	{r4, r5, pc}
 800be58:	20002050 	.word	0x20002050

0800be5c <_malloc_r>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	1ccd      	adds	r5, r1, #3
 800be60:	f025 0503 	bic.w	r5, r5, #3
 800be64:	3508      	adds	r5, #8
 800be66:	2d0c      	cmp	r5, #12
 800be68:	bf38      	it	cc
 800be6a:	250c      	movcc	r5, #12
 800be6c:	2d00      	cmp	r5, #0
 800be6e:	4606      	mov	r6, r0
 800be70:	db01      	blt.n	800be76 <_malloc_r+0x1a>
 800be72:	42a9      	cmp	r1, r5
 800be74:	d903      	bls.n	800be7e <_malloc_r+0x22>
 800be76:	230c      	movs	r3, #12
 800be78:	6033      	str	r3, [r6, #0]
 800be7a:	2000      	movs	r0, #0
 800be7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be7e:	f000 f8e1 	bl	800c044 <__malloc_lock>
 800be82:	4921      	ldr	r1, [pc, #132]	; (800bf08 <_malloc_r+0xac>)
 800be84:	680a      	ldr	r2, [r1, #0]
 800be86:	4614      	mov	r4, r2
 800be88:	b99c      	cbnz	r4, 800beb2 <_malloc_r+0x56>
 800be8a:	4f20      	ldr	r7, [pc, #128]	; (800bf0c <_malloc_r+0xb0>)
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	b923      	cbnz	r3, 800be9a <_malloc_r+0x3e>
 800be90:	4621      	mov	r1, r4
 800be92:	4630      	mov	r0, r6
 800be94:	f000 f8a6 	bl	800bfe4 <_sbrk_r>
 800be98:	6038      	str	r0, [r7, #0]
 800be9a:	4629      	mov	r1, r5
 800be9c:	4630      	mov	r0, r6
 800be9e:	f000 f8a1 	bl	800bfe4 <_sbrk_r>
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	d123      	bne.n	800beee <_malloc_r+0x92>
 800bea6:	230c      	movs	r3, #12
 800bea8:	6033      	str	r3, [r6, #0]
 800beaa:	4630      	mov	r0, r6
 800beac:	f000 f8d0 	bl	800c050 <__malloc_unlock>
 800beb0:	e7e3      	b.n	800be7a <_malloc_r+0x1e>
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	1b5b      	subs	r3, r3, r5
 800beb6:	d417      	bmi.n	800bee8 <_malloc_r+0x8c>
 800beb8:	2b0b      	cmp	r3, #11
 800beba:	d903      	bls.n	800bec4 <_malloc_r+0x68>
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	441c      	add	r4, r3
 800bec0:	6025      	str	r5, [r4, #0]
 800bec2:	e004      	b.n	800bece <_malloc_r+0x72>
 800bec4:	6863      	ldr	r3, [r4, #4]
 800bec6:	42a2      	cmp	r2, r4
 800bec8:	bf0c      	ite	eq
 800beca:	600b      	streq	r3, [r1, #0]
 800becc:	6053      	strne	r3, [r2, #4]
 800bece:	4630      	mov	r0, r6
 800bed0:	f000 f8be 	bl	800c050 <__malloc_unlock>
 800bed4:	f104 000b 	add.w	r0, r4, #11
 800bed8:	1d23      	adds	r3, r4, #4
 800beda:	f020 0007 	bic.w	r0, r0, #7
 800bede:	1ac2      	subs	r2, r0, r3
 800bee0:	d0cc      	beq.n	800be7c <_malloc_r+0x20>
 800bee2:	1a1b      	subs	r3, r3, r0
 800bee4:	50a3      	str	r3, [r4, r2]
 800bee6:	e7c9      	b.n	800be7c <_malloc_r+0x20>
 800bee8:	4622      	mov	r2, r4
 800beea:	6864      	ldr	r4, [r4, #4]
 800beec:	e7cc      	b.n	800be88 <_malloc_r+0x2c>
 800beee:	1cc4      	adds	r4, r0, #3
 800bef0:	f024 0403 	bic.w	r4, r4, #3
 800bef4:	42a0      	cmp	r0, r4
 800bef6:	d0e3      	beq.n	800bec0 <_malloc_r+0x64>
 800bef8:	1a21      	subs	r1, r4, r0
 800befa:	4630      	mov	r0, r6
 800befc:	f000 f872 	bl	800bfe4 <_sbrk_r>
 800bf00:	3001      	adds	r0, #1
 800bf02:	d1dd      	bne.n	800bec0 <_malloc_r+0x64>
 800bf04:	e7cf      	b.n	800bea6 <_malloc_r+0x4a>
 800bf06:	bf00      	nop
 800bf08:	20002050 	.word	0x20002050
 800bf0c:	20002054 	.word	0x20002054

0800bf10 <cleanup_glue>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	460c      	mov	r4, r1
 800bf14:	6809      	ldr	r1, [r1, #0]
 800bf16:	4605      	mov	r5, r0
 800bf18:	b109      	cbz	r1, 800bf1e <cleanup_glue+0xe>
 800bf1a:	f7ff fff9 	bl	800bf10 <cleanup_glue>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4628      	mov	r0, r5
 800bf22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf26:	f7ff bf49 	b.w	800bdbc <_free_r>
	...

0800bf2c <_reclaim_reent>:
 800bf2c:	4b2c      	ldr	r3, [pc, #176]	; (800bfe0 <_reclaim_reent+0xb4>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4283      	cmp	r3, r0
 800bf32:	b570      	push	{r4, r5, r6, lr}
 800bf34:	4604      	mov	r4, r0
 800bf36:	d051      	beq.n	800bfdc <_reclaim_reent+0xb0>
 800bf38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bf3a:	b143      	cbz	r3, 800bf4e <_reclaim_reent+0x22>
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d14a      	bne.n	800bfd8 <_reclaim_reent+0xac>
 800bf42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf44:	6819      	ldr	r1, [r3, #0]
 800bf46:	b111      	cbz	r1, 800bf4e <_reclaim_reent+0x22>
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f7ff ff37 	bl	800bdbc <_free_r>
 800bf4e:	6961      	ldr	r1, [r4, #20]
 800bf50:	b111      	cbz	r1, 800bf58 <_reclaim_reent+0x2c>
 800bf52:	4620      	mov	r0, r4
 800bf54:	f7ff ff32 	bl	800bdbc <_free_r>
 800bf58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf5a:	b111      	cbz	r1, 800bf62 <_reclaim_reent+0x36>
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f7ff ff2d 	bl	800bdbc <_free_r>
 800bf62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf64:	b111      	cbz	r1, 800bf6c <_reclaim_reent+0x40>
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7ff ff28 	bl	800bdbc <_free_r>
 800bf6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bf6e:	b111      	cbz	r1, 800bf76 <_reclaim_reent+0x4a>
 800bf70:	4620      	mov	r0, r4
 800bf72:	f7ff ff23 	bl	800bdbc <_free_r>
 800bf76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bf78:	b111      	cbz	r1, 800bf80 <_reclaim_reent+0x54>
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	f7ff ff1e 	bl	800bdbc <_free_r>
 800bf80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bf82:	b111      	cbz	r1, 800bf8a <_reclaim_reent+0x5e>
 800bf84:	4620      	mov	r0, r4
 800bf86:	f7ff ff19 	bl	800bdbc <_free_r>
 800bf8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bf8c:	b111      	cbz	r1, 800bf94 <_reclaim_reent+0x68>
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f7ff ff14 	bl	800bdbc <_free_r>
 800bf94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf96:	b111      	cbz	r1, 800bf9e <_reclaim_reent+0x72>
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f7ff ff0f 	bl	800bdbc <_free_r>
 800bf9e:	69a3      	ldr	r3, [r4, #24]
 800bfa0:	b1e3      	cbz	r3, 800bfdc <_reclaim_reent+0xb0>
 800bfa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4798      	blx	r3
 800bfa8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bfaa:	b1b9      	cbz	r1, 800bfdc <_reclaim_reent+0xb0>
 800bfac:	4620      	mov	r0, r4
 800bfae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfb2:	f7ff bfad 	b.w	800bf10 <cleanup_glue>
 800bfb6:	5949      	ldr	r1, [r1, r5]
 800bfb8:	b941      	cbnz	r1, 800bfcc <_reclaim_reent+0xa0>
 800bfba:	3504      	adds	r5, #4
 800bfbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfbe:	2d80      	cmp	r5, #128	; 0x80
 800bfc0:	68d9      	ldr	r1, [r3, #12]
 800bfc2:	d1f8      	bne.n	800bfb6 <_reclaim_reent+0x8a>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f7ff fef9 	bl	800bdbc <_free_r>
 800bfca:	e7ba      	b.n	800bf42 <_reclaim_reent+0x16>
 800bfcc:	680e      	ldr	r6, [r1, #0]
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f7ff fef4 	bl	800bdbc <_free_r>
 800bfd4:	4631      	mov	r1, r6
 800bfd6:	e7ef      	b.n	800bfb8 <_reclaim_reent+0x8c>
 800bfd8:	2500      	movs	r5, #0
 800bfda:	e7ef      	b.n	800bfbc <_reclaim_reent+0x90>
 800bfdc:	bd70      	pop	{r4, r5, r6, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000638 	.word	0x20000638

0800bfe4 <_sbrk_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d06      	ldr	r5, [pc, #24]	; (800c000 <_sbrk_r+0x1c>)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4604      	mov	r4, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	602b      	str	r3, [r5, #0]
 800bff0:	f7fe ffa0 	bl	800af34 <_sbrk>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_sbrk_r+0x1a>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_sbrk_r+0x1a>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	2001aadc 	.word	0x2001aadc

0800c004 <siprintf>:
 800c004:	b40e      	push	{r1, r2, r3}
 800c006:	b500      	push	{lr}
 800c008:	b09c      	sub	sp, #112	; 0x70
 800c00a:	ab1d      	add	r3, sp, #116	; 0x74
 800c00c:	9002      	str	r0, [sp, #8]
 800c00e:	9006      	str	r0, [sp, #24]
 800c010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c014:	4809      	ldr	r0, [pc, #36]	; (800c03c <siprintf+0x38>)
 800c016:	9107      	str	r1, [sp, #28]
 800c018:	9104      	str	r1, [sp, #16]
 800c01a:	4909      	ldr	r1, [pc, #36]	; (800c040 <siprintf+0x3c>)
 800c01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c020:	9105      	str	r1, [sp, #20]
 800c022:	6800      	ldr	r0, [r0, #0]
 800c024:	9301      	str	r3, [sp, #4]
 800c026:	a902      	add	r1, sp, #8
 800c028:	f000 f874 	bl	800c114 <_svfiprintf_r>
 800c02c:	9b02      	ldr	r3, [sp, #8]
 800c02e:	2200      	movs	r2, #0
 800c030:	701a      	strb	r2, [r3, #0]
 800c032:	b01c      	add	sp, #112	; 0x70
 800c034:	f85d eb04 	ldr.w	lr, [sp], #4
 800c038:	b003      	add	sp, #12
 800c03a:	4770      	bx	lr
 800c03c:	20000638 	.word	0x20000638
 800c040:	ffff0208 	.word	0xffff0208

0800c044 <__malloc_lock>:
 800c044:	4801      	ldr	r0, [pc, #4]	; (800c04c <__malloc_lock+0x8>)
 800c046:	f7ff be99 	b.w	800bd7c <__retarget_lock_acquire_recursive>
 800c04a:	bf00      	nop
 800c04c:	2001aad4 	.word	0x2001aad4

0800c050 <__malloc_unlock>:
 800c050:	4801      	ldr	r0, [pc, #4]	; (800c058 <__malloc_unlock+0x8>)
 800c052:	f7ff be94 	b.w	800bd7e <__retarget_lock_release_recursive>
 800c056:	bf00      	nop
 800c058:	2001aad4 	.word	0x2001aad4

0800c05c <__ssputs_r>:
 800c05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c060:	688e      	ldr	r6, [r1, #8]
 800c062:	429e      	cmp	r6, r3
 800c064:	4682      	mov	sl, r0
 800c066:	460c      	mov	r4, r1
 800c068:	4690      	mov	r8, r2
 800c06a:	461f      	mov	r7, r3
 800c06c:	d838      	bhi.n	800c0e0 <__ssputs_r+0x84>
 800c06e:	898a      	ldrh	r2, [r1, #12]
 800c070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c074:	d032      	beq.n	800c0dc <__ssputs_r+0x80>
 800c076:	6825      	ldr	r5, [r4, #0]
 800c078:	6909      	ldr	r1, [r1, #16]
 800c07a:	eba5 0901 	sub.w	r9, r5, r1
 800c07e:	6965      	ldr	r5, [r4, #20]
 800c080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c084:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c088:	3301      	adds	r3, #1
 800c08a:	444b      	add	r3, r9
 800c08c:	106d      	asrs	r5, r5, #1
 800c08e:	429d      	cmp	r5, r3
 800c090:	bf38      	it	cc
 800c092:	461d      	movcc	r5, r3
 800c094:	0553      	lsls	r3, r2, #21
 800c096:	d531      	bpl.n	800c0fc <__ssputs_r+0xa0>
 800c098:	4629      	mov	r1, r5
 800c09a:	f7ff fedf 	bl	800be5c <_malloc_r>
 800c09e:	4606      	mov	r6, r0
 800c0a0:	b950      	cbnz	r0, 800c0b8 <__ssputs_r+0x5c>
 800c0a2:	230c      	movs	r3, #12
 800c0a4:	f8ca 3000 	str.w	r3, [sl]
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b8:	6921      	ldr	r1, [r4, #16]
 800c0ba:	464a      	mov	r2, r9
 800c0bc:	f7ff fe68 	bl	800bd90 <memcpy>
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ca:	81a3      	strh	r3, [r4, #12]
 800c0cc:	6126      	str	r6, [r4, #16]
 800c0ce:	6165      	str	r5, [r4, #20]
 800c0d0:	444e      	add	r6, r9
 800c0d2:	eba5 0509 	sub.w	r5, r5, r9
 800c0d6:	6026      	str	r6, [r4, #0]
 800c0d8:	60a5      	str	r5, [r4, #8]
 800c0da:	463e      	mov	r6, r7
 800c0dc:	42be      	cmp	r6, r7
 800c0de:	d900      	bls.n	800c0e2 <__ssputs_r+0x86>
 800c0e0:	463e      	mov	r6, r7
 800c0e2:	4632      	mov	r2, r6
 800c0e4:	6820      	ldr	r0, [r4, #0]
 800c0e6:	4641      	mov	r1, r8
 800c0e8:	f000 faa8 	bl	800c63c <memmove>
 800c0ec:	68a3      	ldr	r3, [r4, #8]
 800c0ee:	6822      	ldr	r2, [r4, #0]
 800c0f0:	1b9b      	subs	r3, r3, r6
 800c0f2:	4432      	add	r2, r6
 800c0f4:	60a3      	str	r3, [r4, #8]
 800c0f6:	6022      	str	r2, [r4, #0]
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e7db      	b.n	800c0b4 <__ssputs_r+0x58>
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	f000 fab7 	bl	800c670 <_realloc_r>
 800c102:	4606      	mov	r6, r0
 800c104:	2800      	cmp	r0, #0
 800c106:	d1e1      	bne.n	800c0cc <__ssputs_r+0x70>
 800c108:	6921      	ldr	r1, [r4, #16]
 800c10a:	4650      	mov	r0, sl
 800c10c:	f7ff fe56 	bl	800bdbc <_free_r>
 800c110:	e7c7      	b.n	800c0a2 <__ssputs_r+0x46>
	...

0800c114 <_svfiprintf_r>:
 800c114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c118:	4698      	mov	r8, r3
 800c11a:	898b      	ldrh	r3, [r1, #12]
 800c11c:	061b      	lsls	r3, r3, #24
 800c11e:	b09d      	sub	sp, #116	; 0x74
 800c120:	4607      	mov	r7, r0
 800c122:	460d      	mov	r5, r1
 800c124:	4614      	mov	r4, r2
 800c126:	d50e      	bpl.n	800c146 <_svfiprintf_r+0x32>
 800c128:	690b      	ldr	r3, [r1, #16]
 800c12a:	b963      	cbnz	r3, 800c146 <_svfiprintf_r+0x32>
 800c12c:	2140      	movs	r1, #64	; 0x40
 800c12e:	f7ff fe95 	bl	800be5c <_malloc_r>
 800c132:	6028      	str	r0, [r5, #0]
 800c134:	6128      	str	r0, [r5, #16]
 800c136:	b920      	cbnz	r0, 800c142 <_svfiprintf_r+0x2e>
 800c138:	230c      	movs	r3, #12
 800c13a:	603b      	str	r3, [r7, #0]
 800c13c:	f04f 30ff 	mov.w	r0, #4294967295
 800c140:	e0d1      	b.n	800c2e6 <_svfiprintf_r+0x1d2>
 800c142:	2340      	movs	r3, #64	; 0x40
 800c144:	616b      	str	r3, [r5, #20]
 800c146:	2300      	movs	r3, #0
 800c148:	9309      	str	r3, [sp, #36]	; 0x24
 800c14a:	2320      	movs	r3, #32
 800c14c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c150:	f8cd 800c 	str.w	r8, [sp, #12]
 800c154:	2330      	movs	r3, #48	; 0x30
 800c156:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c300 <_svfiprintf_r+0x1ec>
 800c15a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c15e:	f04f 0901 	mov.w	r9, #1
 800c162:	4623      	mov	r3, r4
 800c164:	469a      	mov	sl, r3
 800c166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c16a:	b10a      	cbz	r2, 800c170 <_svfiprintf_r+0x5c>
 800c16c:	2a25      	cmp	r2, #37	; 0x25
 800c16e:	d1f9      	bne.n	800c164 <_svfiprintf_r+0x50>
 800c170:	ebba 0b04 	subs.w	fp, sl, r4
 800c174:	d00b      	beq.n	800c18e <_svfiprintf_r+0x7a>
 800c176:	465b      	mov	r3, fp
 800c178:	4622      	mov	r2, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	4638      	mov	r0, r7
 800c17e:	f7ff ff6d 	bl	800c05c <__ssputs_r>
 800c182:	3001      	adds	r0, #1
 800c184:	f000 80aa 	beq.w	800c2dc <_svfiprintf_r+0x1c8>
 800c188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c18a:	445a      	add	r2, fp
 800c18c:	9209      	str	r2, [sp, #36]	; 0x24
 800c18e:	f89a 3000 	ldrb.w	r3, [sl]
 800c192:	2b00      	cmp	r3, #0
 800c194:	f000 80a2 	beq.w	800c2dc <_svfiprintf_r+0x1c8>
 800c198:	2300      	movs	r3, #0
 800c19a:	f04f 32ff 	mov.w	r2, #4294967295
 800c19e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1a2:	f10a 0a01 	add.w	sl, sl, #1
 800c1a6:	9304      	str	r3, [sp, #16]
 800c1a8:	9307      	str	r3, [sp, #28]
 800c1aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ae:	931a      	str	r3, [sp, #104]	; 0x68
 800c1b0:	4654      	mov	r4, sl
 800c1b2:	2205      	movs	r2, #5
 800c1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b8:	4851      	ldr	r0, [pc, #324]	; (800c300 <_svfiprintf_r+0x1ec>)
 800c1ba:	f7f4 f821 	bl	8000200 <memchr>
 800c1be:	9a04      	ldr	r2, [sp, #16]
 800c1c0:	b9d8      	cbnz	r0, 800c1fa <_svfiprintf_r+0xe6>
 800c1c2:	06d0      	lsls	r0, r2, #27
 800c1c4:	bf44      	itt	mi
 800c1c6:	2320      	movmi	r3, #32
 800c1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1cc:	0711      	lsls	r1, r2, #28
 800c1ce:	bf44      	itt	mi
 800c1d0:	232b      	movmi	r3, #43	; 0x2b
 800c1d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1da:	2b2a      	cmp	r3, #42	; 0x2a
 800c1dc:	d015      	beq.n	800c20a <_svfiprintf_r+0xf6>
 800c1de:	9a07      	ldr	r2, [sp, #28]
 800c1e0:	4654      	mov	r4, sl
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	f04f 0c0a 	mov.w	ip, #10
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ee:	3b30      	subs	r3, #48	; 0x30
 800c1f0:	2b09      	cmp	r3, #9
 800c1f2:	d94e      	bls.n	800c292 <_svfiprintf_r+0x17e>
 800c1f4:	b1b0      	cbz	r0, 800c224 <_svfiprintf_r+0x110>
 800c1f6:	9207      	str	r2, [sp, #28]
 800c1f8:	e014      	b.n	800c224 <_svfiprintf_r+0x110>
 800c1fa:	eba0 0308 	sub.w	r3, r0, r8
 800c1fe:	fa09 f303 	lsl.w	r3, r9, r3
 800c202:	4313      	orrs	r3, r2
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	46a2      	mov	sl, r4
 800c208:	e7d2      	b.n	800c1b0 <_svfiprintf_r+0x9c>
 800c20a:	9b03      	ldr	r3, [sp, #12]
 800c20c:	1d19      	adds	r1, r3, #4
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	9103      	str	r1, [sp, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	bfbb      	ittet	lt
 800c216:	425b      	neglt	r3, r3
 800c218:	f042 0202 	orrlt.w	r2, r2, #2
 800c21c:	9307      	strge	r3, [sp, #28]
 800c21e:	9307      	strlt	r3, [sp, #28]
 800c220:	bfb8      	it	lt
 800c222:	9204      	strlt	r2, [sp, #16]
 800c224:	7823      	ldrb	r3, [r4, #0]
 800c226:	2b2e      	cmp	r3, #46	; 0x2e
 800c228:	d10c      	bne.n	800c244 <_svfiprintf_r+0x130>
 800c22a:	7863      	ldrb	r3, [r4, #1]
 800c22c:	2b2a      	cmp	r3, #42	; 0x2a
 800c22e:	d135      	bne.n	800c29c <_svfiprintf_r+0x188>
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	1d1a      	adds	r2, r3, #4
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	9203      	str	r2, [sp, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	bfb8      	it	lt
 800c23c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c240:	3402      	adds	r4, #2
 800c242:	9305      	str	r3, [sp, #20]
 800c244:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c310 <_svfiprintf_r+0x1fc>
 800c248:	7821      	ldrb	r1, [r4, #0]
 800c24a:	2203      	movs	r2, #3
 800c24c:	4650      	mov	r0, sl
 800c24e:	f7f3 ffd7 	bl	8000200 <memchr>
 800c252:	b140      	cbz	r0, 800c266 <_svfiprintf_r+0x152>
 800c254:	2340      	movs	r3, #64	; 0x40
 800c256:	eba0 000a 	sub.w	r0, r0, sl
 800c25a:	fa03 f000 	lsl.w	r0, r3, r0
 800c25e:	9b04      	ldr	r3, [sp, #16]
 800c260:	4303      	orrs	r3, r0
 800c262:	3401      	adds	r4, #1
 800c264:	9304      	str	r3, [sp, #16]
 800c266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c26a:	4826      	ldr	r0, [pc, #152]	; (800c304 <_svfiprintf_r+0x1f0>)
 800c26c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c270:	2206      	movs	r2, #6
 800c272:	f7f3 ffc5 	bl	8000200 <memchr>
 800c276:	2800      	cmp	r0, #0
 800c278:	d038      	beq.n	800c2ec <_svfiprintf_r+0x1d8>
 800c27a:	4b23      	ldr	r3, [pc, #140]	; (800c308 <_svfiprintf_r+0x1f4>)
 800c27c:	bb1b      	cbnz	r3, 800c2c6 <_svfiprintf_r+0x1b2>
 800c27e:	9b03      	ldr	r3, [sp, #12]
 800c280:	3307      	adds	r3, #7
 800c282:	f023 0307 	bic.w	r3, r3, #7
 800c286:	3308      	adds	r3, #8
 800c288:	9303      	str	r3, [sp, #12]
 800c28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28c:	4433      	add	r3, r6
 800c28e:	9309      	str	r3, [sp, #36]	; 0x24
 800c290:	e767      	b.n	800c162 <_svfiprintf_r+0x4e>
 800c292:	fb0c 3202 	mla	r2, ip, r2, r3
 800c296:	460c      	mov	r4, r1
 800c298:	2001      	movs	r0, #1
 800c29a:	e7a5      	b.n	800c1e8 <_svfiprintf_r+0xd4>
 800c29c:	2300      	movs	r3, #0
 800c29e:	3401      	adds	r4, #1
 800c2a0:	9305      	str	r3, [sp, #20]
 800c2a2:	4619      	mov	r1, r3
 800c2a4:	f04f 0c0a 	mov.w	ip, #10
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2ae:	3a30      	subs	r2, #48	; 0x30
 800c2b0:	2a09      	cmp	r2, #9
 800c2b2:	d903      	bls.n	800c2bc <_svfiprintf_r+0x1a8>
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0c5      	beq.n	800c244 <_svfiprintf_r+0x130>
 800c2b8:	9105      	str	r1, [sp, #20]
 800c2ba:	e7c3      	b.n	800c244 <_svfiprintf_r+0x130>
 800c2bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e7f0      	b.n	800c2a8 <_svfiprintf_r+0x194>
 800c2c6:	ab03      	add	r3, sp, #12
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	462a      	mov	r2, r5
 800c2cc:	4b0f      	ldr	r3, [pc, #60]	; (800c30c <_svfiprintf_r+0x1f8>)
 800c2ce:	a904      	add	r1, sp, #16
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	f3af 8000 	nop.w
 800c2d6:	1c42      	adds	r2, r0, #1
 800c2d8:	4606      	mov	r6, r0
 800c2da:	d1d6      	bne.n	800c28a <_svfiprintf_r+0x176>
 800c2dc:	89ab      	ldrh	r3, [r5, #12]
 800c2de:	065b      	lsls	r3, r3, #25
 800c2e0:	f53f af2c 	bmi.w	800c13c <_svfiprintf_r+0x28>
 800c2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2e6:	b01d      	add	sp, #116	; 0x74
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	ab03      	add	r3, sp, #12
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	462a      	mov	r2, r5
 800c2f2:	4b06      	ldr	r3, [pc, #24]	; (800c30c <_svfiprintf_r+0x1f8>)
 800c2f4:	a904      	add	r1, sp, #16
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	f000 f87a 	bl	800c3f0 <_printf_i>
 800c2fc:	e7eb      	b.n	800c2d6 <_svfiprintf_r+0x1c2>
 800c2fe:	bf00      	nop
 800c300:	0800c8f8 	.word	0x0800c8f8
 800c304:	0800c902 	.word	0x0800c902
 800c308:	00000000 	.word	0x00000000
 800c30c:	0800c05d 	.word	0x0800c05d
 800c310:	0800c8fe 	.word	0x0800c8fe

0800c314 <_printf_common>:
 800c314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c318:	4616      	mov	r6, r2
 800c31a:	4699      	mov	r9, r3
 800c31c:	688a      	ldr	r2, [r1, #8]
 800c31e:	690b      	ldr	r3, [r1, #16]
 800c320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c324:	4293      	cmp	r3, r2
 800c326:	bfb8      	it	lt
 800c328:	4613      	movlt	r3, r2
 800c32a:	6033      	str	r3, [r6, #0]
 800c32c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c330:	4607      	mov	r7, r0
 800c332:	460c      	mov	r4, r1
 800c334:	b10a      	cbz	r2, 800c33a <_printf_common+0x26>
 800c336:	3301      	adds	r3, #1
 800c338:	6033      	str	r3, [r6, #0]
 800c33a:	6823      	ldr	r3, [r4, #0]
 800c33c:	0699      	lsls	r1, r3, #26
 800c33e:	bf42      	ittt	mi
 800c340:	6833      	ldrmi	r3, [r6, #0]
 800c342:	3302      	addmi	r3, #2
 800c344:	6033      	strmi	r3, [r6, #0]
 800c346:	6825      	ldr	r5, [r4, #0]
 800c348:	f015 0506 	ands.w	r5, r5, #6
 800c34c:	d106      	bne.n	800c35c <_printf_common+0x48>
 800c34e:	f104 0a19 	add.w	sl, r4, #25
 800c352:	68e3      	ldr	r3, [r4, #12]
 800c354:	6832      	ldr	r2, [r6, #0]
 800c356:	1a9b      	subs	r3, r3, r2
 800c358:	42ab      	cmp	r3, r5
 800c35a:	dc26      	bgt.n	800c3aa <_printf_common+0x96>
 800c35c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c360:	1e13      	subs	r3, r2, #0
 800c362:	6822      	ldr	r2, [r4, #0]
 800c364:	bf18      	it	ne
 800c366:	2301      	movne	r3, #1
 800c368:	0692      	lsls	r2, r2, #26
 800c36a:	d42b      	bmi.n	800c3c4 <_printf_common+0xb0>
 800c36c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c370:	4649      	mov	r1, r9
 800c372:	4638      	mov	r0, r7
 800c374:	47c0      	blx	r8
 800c376:	3001      	adds	r0, #1
 800c378:	d01e      	beq.n	800c3b8 <_printf_common+0xa4>
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	68e5      	ldr	r5, [r4, #12]
 800c37e:	6832      	ldr	r2, [r6, #0]
 800c380:	f003 0306 	and.w	r3, r3, #6
 800c384:	2b04      	cmp	r3, #4
 800c386:	bf08      	it	eq
 800c388:	1aad      	subeq	r5, r5, r2
 800c38a:	68a3      	ldr	r3, [r4, #8]
 800c38c:	6922      	ldr	r2, [r4, #16]
 800c38e:	bf0c      	ite	eq
 800c390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c394:	2500      	movne	r5, #0
 800c396:	4293      	cmp	r3, r2
 800c398:	bfc4      	itt	gt
 800c39a:	1a9b      	subgt	r3, r3, r2
 800c39c:	18ed      	addgt	r5, r5, r3
 800c39e:	2600      	movs	r6, #0
 800c3a0:	341a      	adds	r4, #26
 800c3a2:	42b5      	cmp	r5, r6
 800c3a4:	d11a      	bne.n	800c3dc <_printf_common+0xc8>
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	e008      	b.n	800c3bc <_printf_common+0xa8>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	4652      	mov	r2, sl
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	47c0      	blx	r8
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	d103      	bne.n	800c3c0 <_printf_common+0xac>
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c0:	3501      	adds	r5, #1
 800c3c2:	e7c6      	b.n	800c352 <_printf_common+0x3e>
 800c3c4:	18e1      	adds	r1, r4, r3
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	2030      	movs	r0, #48	; 0x30
 800c3ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3ce:	4422      	add	r2, r4
 800c3d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3d8:	3302      	adds	r3, #2
 800c3da:	e7c7      	b.n	800c36c <_printf_common+0x58>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	4622      	mov	r2, r4
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	47c0      	blx	r8
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	d0e6      	beq.n	800c3b8 <_printf_common+0xa4>
 800c3ea:	3601      	adds	r6, #1
 800c3ec:	e7d9      	b.n	800c3a2 <_printf_common+0x8e>
	...

0800c3f0 <_printf_i>:
 800c3f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	4691      	mov	r9, r2
 800c3f8:	7e27      	ldrb	r7, [r4, #24]
 800c3fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c3fc:	2f78      	cmp	r7, #120	; 0x78
 800c3fe:	4680      	mov	r8, r0
 800c400:	469a      	mov	sl, r3
 800c402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c406:	d807      	bhi.n	800c418 <_printf_i+0x28>
 800c408:	2f62      	cmp	r7, #98	; 0x62
 800c40a:	d80a      	bhi.n	800c422 <_printf_i+0x32>
 800c40c:	2f00      	cmp	r7, #0
 800c40e:	f000 80d8 	beq.w	800c5c2 <_printf_i+0x1d2>
 800c412:	2f58      	cmp	r7, #88	; 0x58
 800c414:	f000 80a3 	beq.w	800c55e <_printf_i+0x16e>
 800c418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c41c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c420:	e03a      	b.n	800c498 <_printf_i+0xa8>
 800c422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c426:	2b15      	cmp	r3, #21
 800c428:	d8f6      	bhi.n	800c418 <_printf_i+0x28>
 800c42a:	a001      	add	r0, pc, #4	; (adr r0, 800c430 <_printf_i+0x40>)
 800c42c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c430:	0800c489 	.word	0x0800c489
 800c434:	0800c49d 	.word	0x0800c49d
 800c438:	0800c419 	.word	0x0800c419
 800c43c:	0800c419 	.word	0x0800c419
 800c440:	0800c419 	.word	0x0800c419
 800c444:	0800c419 	.word	0x0800c419
 800c448:	0800c49d 	.word	0x0800c49d
 800c44c:	0800c419 	.word	0x0800c419
 800c450:	0800c419 	.word	0x0800c419
 800c454:	0800c419 	.word	0x0800c419
 800c458:	0800c419 	.word	0x0800c419
 800c45c:	0800c5a9 	.word	0x0800c5a9
 800c460:	0800c4cd 	.word	0x0800c4cd
 800c464:	0800c58b 	.word	0x0800c58b
 800c468:	0800c419 	.word	0x0800c419
 800c46c:	0800c419 	.word	0x0800c419
 800c470:	0800c5cb 	.word	0x0800c5cb
 800c474:	0800c419 	.word	0x0800c419
 800c478:	0800c4cd 	.word	0x0800c4cd
 800c47c:	0800c419 	.word	0x0800c419
 800c480:	0800c419 	.word	0x0800c419
 800c484:	0800c593 	.word	0x0800c593
 800c488:	680b      	ldr	r3, [r1, #0]
 800c48a:	1d1a      	adds	r2, r3, #4
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	600a      	str	r2, [r1, #0]
 800c490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c498:	2301      	movs	r3, #1
 800c49a:	e0a3      	b.n	800c5e4 <_printf_i+0x1f4>
 800c49c:	6825      	ldr	r5, [r4, #0]
 800c49e:	6808      	ldr	r0, [r1, #0]
 800c4a0:	062e      	lsls	r6, r5, #24
 800c4a2:	f100 0304 	add.w	r3, r0, #4
 800c4a6:	d50a      	bpl.n	800c4be <_printf_i+0xce>
 800c4a8:	6805      	ldr	r5, [r0, #0]
 800c4aa:	600b      	str	r3, [r1, #0]
 800c4ac:	2d00      	cmp	r5, #0
 800c4ae:	da03      	bge.n	800c4b8 <_printf_i+0xc8>
 800c4b0:	232d      	movs	r3, #45	; 0x2d
 800c4b2:	426d      	negs	r5, r5
 800c4b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4b8:	485e      	ldr	r0, [pc, #376]	; (800c634 <_printf_i+0x244>)
 800c4ba:	230a      	movs	r3, #10
 800c4bc:	e019      	b.n	800c4f2 <_printf_i+0x102>
 800c4be:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c4c2:	6805      	ldr	r5, [r0, #0]
 800c4c4:	600b      	str	r3, [r1, #0]
 800c4c6:	bf18      	it	ne
 800c4c8:	b22d      	sxthne	r5, r5
 800c4ca:	e7ef      	b.n	800c4ac <_printf_i+0xbc>
 800c4cc:	680b      	ldr	r3, [r1, #0]
 800c4ce:	6825      	ldr	r5, [r4, #0]
 800c4d0:	1d18      	adds	r0, r3, #4
 800c4d2:	6008      	str	r0, [r1, #0]
 800c4d4:	0628      	lsls	r0, r5, #24
 800c4d6:	d501      	bpl.n	800c4dc <_printf_i+0xec>
 800c4d8:	681d      	ldr	r5, [r3, #0]
 800c4da:	e002      	b.n	800c4e2 <_printf_i+0xf2>
 800c4dc:	0669      	lsls	r1, r5, #25
 800c4de:	d5fb      	bpl.n	800c4d8 <_printf_i+0xe8>
 800c4e0:	881d      	ldrh	r5, [r3, #0]
 800c4e2:	4854      	ldr	r0, [pc, #336]	; (800c634 <_printf_i+0x244>)
 800c4e4:	2f6f      	cmp	r7, #111	; 0x6f
 800c4e6:	bf0c      	ite	eq
 800c4e8:	2308      	moveq	r3, #8
 800c4ea:	230a      	movne	r3, #10
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4f2:	6866      	ldr	r6, [r4, #4]
 800c4f4:	60a6      	str	r6, [r4, #8]
 800c4f6:	2e00      	cmp	r6, #0
 800c4f8:	bfa2      	ittt	ge
 800c4fa:	6821      	ldrge	r1, [r4, #0]
 800c4fc:	f021 0104 	bicge.w	r1, r1, #4
 800c500:	6021      	strge	r1, [r4, #0]
 800c502:	b90d      	cbnz	r5, 800c508 <_printf_i+0x118>
 800c504:	2e00      	cmp	r6, #0
 800c506:	d04d      	beq.n	800c5a4 <_printf_i+0x1b4>
 800c508:	4616      	mov	r6, r2
 800c50a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c50e:	fb03 5711 	mls	r7, r3, r1, r5
 800c512:	5dc7      	ldrb	r7, [r0, r7]
 800c514:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c518:	462f      	mov	r7, r5
 800c51a:	42bb      	cmp	r3, r7
 800c51c:	460d      	mov	r5, r1
 800c51e:	d9f4      	bls.n	800c50a <_printf_i+0x11a>
 800c520:	2b08      	cmp	r3, #8
 800c522:	d10b      	bne.n	800c53c <_printf_i+0x14c>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	07df      	lsls	r7, r3, #31
 800c528:	d508      	bpl.n	800c53c <_printf_i+0x14c>
 800c52a:	6923      	ldr	r3, [r4, #16]
 800c52c:	6861      	ldr	r1, [r4, #4]
 800c52e:	4299      	cmp	r1, r3
 800c530:	bfde      	ittt	le
 800c532:	2330      	movle	r3, #48	; 0x30
 800c534:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c538:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c53c:	1b92      	subs	r2, r2, r6
 800c53e:	6122      	str	r2, [r4, #16]
 800c540:	f8cd a000 	str.w	sl, [sp]
 800c544:	464b      	mov	r3, r9
 800c546:	aa03      	add	r2, sp, #12
 800c548:	4621      	mov	r1, r4
 800c54a:	4640      	mov	r0, r8
 800c54c:	f7ff fee2 	bl	800c314 <_printf_common>
 800c550:	3001      	adds	r0, #1
 800c552:	d14c      	bne.n	800c5ee <_printf_i+0x1fe>
 800c554:	f04f 30ff 	mov.w	r0, #4294967295
 800c558:	b004      	add	sp, #16
 800c55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c55e:	4835      	ldr	r0, [pc, #212]	; (800c634 <_printf_i+0x244>)
 800c560:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	680e      	ldr	r6, [r1, #0]
 800c568:	061f      	lsls	r7, r3, #24
 800c56a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c56e:	600e      	str	r6, [r1, #0]
 800c570:	d514      	bpl.n	800c59c <_printf_i+0x1ac>
 800c572:	07d9      	lsls	r1, r3, #31
 800c574:	bf44      	itt	mi
 800c576:	f043 0320 	orrmi.w	r3, r3, #32
 800c57a:	6023      	strmi	r3, [r4, #0]
 800c57c:	b91d      	cbnz	r5, 800c586 <_printf_i+0x196>
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	f023 0320 	bic.w	r3, r3, #32
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	2310      	movs	r3, #16
 800c588:	e7b0      	b.n	800c4ec <_printf_i+0xfc>
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	f043 0320 	orr.w	r3, r3, #32
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	2378      	movs	r3, #120	; 0x78
 800c594:	4828      	ldr	r0, [pc, #160]	; (800c638 <_printf_i+0x248>)
 800c596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c59a:	e7e3      	b.n	800c564 <_printf_i+0x174>
 800c59c:	065e      	lsls	r6, r3, #25
 800c59e:	bf48      	it	mi
 800c5a0:	b2ad      	uxthmi	r5, r5
 800c5a2:	e7e6      	b.n	800c572 <_printf_i+0x182>
 800c5a4:	4616      	mov	r6, r2
 800c5a6:	e7bb      	b.n	800c520 <_printf_i+0x130>
 800c5a8:	680b      	ldr	r3, [r1, #0]
 800c5aa:	6826      	ldr	r6, [r4, #0]
 800c5ac:	6960      	ldr	r0, [r4, #20]
 800c5ae:	1d1d      	adds	r5, r3, #4
 800c5b0:	600d      	str	r5, [r1, #0]
 800c5b2:	0635      	lsls	r5, r6, #24
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	d501      	bpl.n	800c5bc <_printf_i+0x1cc>
 800c5b8:	6018      	str	r0, [r3, #0]
 800c5ba:	e002      	b.n	800c5c2 <_printf_i+0x1d2>
 800c5bc:	0671      	lsls	r1, r6, #25
 800c5be:	d5fb      	bpl.n	800c5b8 <_printf_i+0x1c8>
 800c5c0:	8018      	strh	r0, [r3, #0]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	6123      	str	r3, [r4, #16]
 800c5c6:	4616      	mov	r6, r2
 800c5c8:	e7ba      	b.n	800c540 <_printf_i+0x150>
 800c5ca:	680b      	ldr	r3, [r1, #0]
 800c5cc:	1d1a      	adds	r2, r3, #4
 800c5ce:	600a      	str	r2, [r1, #0]
 800c5d0:	681e      	ldr	r6, [r3, #0]
 800c5d2:	6862      	ldr	r2, [r4, #4]
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f7f3 fe12 	bl	8000200 <memchr>
 800c5dc:	b108      	cbz	r0, 800c5e2 <_printf_i+0x1f2>
 800c5de:	1b80      	subs	r0, r0, r6
 800c5e0:	6060      	str	r0, [r4, #4]
 800c5e2:	6863      	ldr	r3, [r4, #4]
 800c5e4:	6123      	str	r3, [r4, #16]
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ec:	e7a8      	b.n	800c540 <_printf_i+0x150>
 800c5ee:	6923      	ldr	r3, [r4, #16]
 800c5f0:	4632      	mov	r2, r6
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	47d0      	blx	sl
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	d0ab      	beq.n	800c554 <_printf_i+0x164>
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	079b      	lsls	r3, r3, #30
 800c600:	d413      	bmi.n	800c62a <_printf_i+0x23a>
 800c602:	68e0      	ldr	r0, [r4, #12]
 800c604:	9b03      	ldr	r3, [sp, #12]
 800c606:	4298      	cmp	r0, r3
 800c608:	bfb8      	it	lt
 800c60a:	4618      	movlt	r0, r3
 800c60c:	e7a4      	b.n	800c558 <_printf_i+0x168>
 800c60e:	2301      	movs	r3, #1
 800c610:	4632      	mov	r2, r6
 800c612:	4649      	mov	r1, r9
 800c614:	4640      	mov	r0, r8
 800c616:	47d0      	blx	sl
 800c618:	3001      	adds	r0, #1
 800c61a:	d09b      	beq.n	800c554 <_printf_i+0x164>
 800c61c:	3501      	adds	r5, #1
 800c61e:	68e3      	ldr	r3, [r4, #12]
 800c620:	9903      	ldr	r1, [sp, #12]
 800c622:	1a5b      	subs	r3, r3, r1
 800c624:	42ab      	cmp	r3, r5
 800c626:	dcf2      	bgt.n	800c60e <_printf_i+0x21e>
 800c628:	e7eb      	b.n	800c602 <_printf_i+0x212>
 800c62a:	2500      	movs	r5, #0
 800c62c:	f104 0619 	add.w	r6, r4, #25
 800c630:	e7f5      	b.n	800c61e <_printf_i+0x22e>
 800c632:	bf00      	nop
 800c634:	0800c909 	.word	0x0800c909
 800c638:	0800c91a 	.word	0x0800c91a

0800c63c <memmove>:
 800c63c:	4288      	cmp	r0, r1
 800c63e:	b510      	push	{r4, lr}
 800c640:	eb01 0402 	add.w	r4, r1, r2
 800c644:	d902      	bls.n	800c64c <memmove+0x10>
 800c646:	4284      	cmp	r4, r0
 800c648:	4623      	mov	r3, r4
 800c64a:	d807      	bhi.n	800c65c <memmove+0x20>
 800c64c:	1e43      	subs	r3, r0, #1
 800c64e:	42a1      	cmp	r1, r4
 800c650:	d008      	beq.n	800c664 <memmove+0x28>
 800c652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c65a:	e7f8      	b.n	800c64e <memmove+0x12>
 800c65c:	4402      	add	r2, r0
 800c65e:	4601      	mov	r1, r0
 800c660:	428a      	cmp	r2, r1
 800c662:	d100      	bne.n	800c666 <memmove+0x2a>
 800c664:	bd10      	pop	{r4, pc}
 800c666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c66a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c66e:	e7f7      	b.n	800c660 <memmove+0x24>

0800c670 <_realloc_r>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	4607      	mov	r7, r0
 800c674:	4614      	mov	r4, r2
 800c676:	460e      	mov	r6, r1
 800c678:	b921      	cbnz	r1, 800c684 <_realloc_r+0x14>
 800c67a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c67e:	4611      	mov	r1, r2
 800c680:	f7ff bbec 	b.w	800be5c <_malloc_r>
 800c684:	b922      	cbnz	r2, 800c690 <_realloc_r+0x20>
 800c686:	f7ff fb99 	bl	800bdbc <_free_r>
 800c68a:	4625      	mov	r5, r4
 800c68c:	4628      	mov	r0, r5
 800c68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c690:	f000 f814 	bl	800c6bc <_malloc_usable_size_r>
 800c694:	42a0      	cmp	r0, r4
 800c696:	d20f      	bcs.n	800c6b8 <_realloc_r+0x48>
 800c698:	4621      	mov	r1, r4
 800c69a:	4638      	mov	r0, r7
 800c69c:	f7ff fbde 	bl	800be5c <_malloc_r>
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d0f2      	beq.n	800c68c <_realloc_r+0x1c>
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	f7ff fb71 	bl	800bd90 <memcpy>
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff fb83 	bl	800bdbc <_free_r>
 800c6b6:	e7e9      	b.n	800c68c <_realloc_r+0x1c>
 800c6b8:	4635      	mov	r5, r6
 800c6ba:	e7e7      	b.n	800c68c <_realloc_r+0x1c>

0800c6bc <_malloc_usable_size_r>:
 800c6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c0:	1f18      	subs	r0, r3, #4
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	bfbc      	itt	lt
 800c6c6:	580b      	ldrlt	r3, [r1, r0]
 800c6c8:	18c0      	addlt	r0, r0, r3
 800c6ca:	4770      	bx	lr

0800c6cc <_init>:
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ce:	bf00      	nop
 800c6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6d2:	bc08      	pop	{r3}
 800c6d4:	469e      	mov	lr, r3
 800c6d6:	4770      	bx	lr

0800c6d8 <_fini>:
 800c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6da:	bf00      	nop
 800c6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6de:	bc08      	pop	{r3}
 800c6e0:	469e      	mov	lr, r3
 800c6e2:	4770      	bx	lr
