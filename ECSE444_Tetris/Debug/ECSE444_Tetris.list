
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c18  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e18  08004e18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e18  08004e18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e18  08004e18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e1c  08004e1c  00014e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08004e90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004e90  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ca  00000000  00000000  0003054d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00032618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a831  00000000  00000000  00034040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8d1  00000000  00000000  0005e871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106efe  00000000  00000000  0006d142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b4c  00000000  00000000  00174094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004dc0 	.word	0x08004dc0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08004dc0 	.word	0x08004dc0

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2iz>:
 80007cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d4:	d215      	bcs.n	8000802 <__aeabi_d2iz+0x36>
 80007d6:	d511      	bpl.n	80007fc <__aeabi_d2iz+0x30>
 80007d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e0:	d912      	bls.n	8000808 <__aeabi_d2iz+0x3c>
 80007e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007f2:	fa23 f002 	lsr.w	r0, r3, r2
 80007f6:	bf18      	it	ne
 80007f8:	4240      	negne	r0, r0
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d105      	bne.n	8000814 <__aeabi_d2iz+0x48>
 8000808:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800080c:	bf08      	it	eq
 800080e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop

0800081c <__aeabi_d2uiz>:
 800081c:	004a      	lsls	r2, r1, #1
 800081e:	d211      	bcs.n	8000844 <__aeabi_d2uiz+0x28>
 8000820:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000824:	d211      	bcs.n	800084a <__aeabi_d2uiz+0x2e>
 8000826:	d50d      	bpl.n	8000844 <__aeabi_d2uiz+0x28>
 8000828:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800082c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000830:	d40e      	bmi.n	8000850 <__aeabi_d2uiz+0x34>
 8000832:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800083a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800083e:	fa23 f002 	lsr.w	r0, r3, r2
 8000842:	4770      	bx	lr
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	4770      	bx	lr
 800084a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800084e:	d102      	bne.n	8000856 <__aeabi_d2uiz+0x3a>
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	4770      	bx	lr
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	4770      	bx	lr

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000906:	2003      	movs	r0, #3
 8000908:	f000 f960 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090c:	2000      	movs	r0, #0
 800090e:	f000 f80d 	bl	800092c <HAL_InitTick>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	71fb      	strb	r3, [r7, #7]
 800091c:	e001      	b.n	8000922 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800091e:	f003 ffdd 	bl	80048dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000922:	79fb      	ldrb	r3, [r7, #7]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_InitTick+0x6c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d023      	beq.n	8000988 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_InitTick+0x70>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_InitTick+0x6c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f96d 	bl	8000c36 <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10f      	bne.n	8000982 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d809      	bhi.n	800097c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f937 	bl	8000be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_InitTick+0x74>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e007      	b.n	800098c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	e004      	b.n	800098c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e001      	b.n	800098c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000004 	.word	0x20000004
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000000 	.word	0x20000000

080009a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x20>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x24>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_IncTick+0x24>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000004 	.word	0x20000004
 80009c8:	2000009c 	.word	0x2000009c

080009cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_GetTick+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	2000009c 	.word	0x2000009c

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff ffee 	bl	80009cc <HAL_GetTick>
 80009f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0a:	bf00      	nop
 8000a0c:	f7ff ffde 	bl	80009cc <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000004 	.word	0x20000004

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <__NVIC_EnableIRQ+0x38>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff29 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf4:	f7ff ff3e 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ff8e 	bl	8000b20 <NVIC_EncodePriority>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff5d 	bl	8000acc <__NVIC_SetPriority>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff31 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffa2 	bl	8000b88 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e014      	b.n	8000c8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	791b      	ldrb	r3, [r3, #4]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d105      	bne.n	8000c76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f003 fe57 	bl	8004924 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2202      	movs	r2, #2
 8000c7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	795b      	ldrb	r3, [r3, #5]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d101      	bne.n	8000cb2 <HAL_DAC_Start_DMA+0x1e>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e0ab      	b.n	8000e0a <HAL_DAC_Start_DMA+0x176>
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2202      	movs	r2, #2
 8000cbc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d12f      	bne.n	8000d24 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	4a52      	ldr	r2, [pc, #328]	; (8000e14 <HAL_DAC_Start_DMA+0x180>)
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4a51      	ldr	r2, [pc, #324]	; (8000e18 <HAL_DAC_Start_DMA+0x184>)
 8000cd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	4a50      	ldr	r2, [pc, #320]	; (8000e1c <HAL_DAC_Start_DMA+0x188>)
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000cec:	6a3b      	ldr	r3, [r7, #32]
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d013      	beq.n	8000d1a <HAL_DAC_Start_DMA+0x86>
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d845      	bhi.n	8000d84 <HAL_DAC_Start_DMA+0xf0>
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_DAC_Start_DMA+0x72>
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d005      	beq.n	8000d10 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000d04:	e03e      	b.n	8000d84 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	613b      	str	r3, [r7, #16]
        break;
 8000d0e:	e03c      	b.n	8000d8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	330c      	adds	r3, #12
 8000d16:	613b      	str	r3, [r7, #16]
        break;
 8000d18:	e037      	b.n	8000d8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3310      	adds	r3, #16
 8000d20:	613b      	str	r3, [r7, #16]
        break;
 8000d22:	e032      	b.n	8000d8a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	4a3d      	ldr	r2, [pc, #244]	; (8000e20 <HAL_DAC_Start_DMA+0x18c>)
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	4a3c      	ldr	r2, [pc, #240]	; (8000e24 <HAL_DAC_Start_DMA+0x190>)
 8000d32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	4a3b      	ldr	r2, [pc, #236]	; (8000e28 <HAL_DAC_Start_DMA+0x194>)
 8000d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	2b08      	cmp	r3, #8
 8000d50:	d013      	beq.n	8000d7a <HAL_DAC_Start_DMA+0xe6>
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d817      	bhi.n	8000d88 <HAL_DAC_Start_DMA+0xf4>
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_DAC_Start_DMA+0xd2>
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d005      	beq.n	8000d70 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000d64:	e010      	b.n	8000d88 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3314      	adds	r3, #20
 8000d6c:	613b      	str	r3, [r7, #16]
        break;
 8000d6e:	e00c      	b.n	8000d8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3318      	adds	r3, #24
 8000d76:	613b      	str	r3, [r7, #16]
        break;
 8000d78:	e007      	b.n	8000d8a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	331c      	adds	r3, #28
 8000d80:	613b      	str	r3, [r7, #16]
        break;
 8000d82:	e002      	b.n	8000d8a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000d84:	bf00      	nop
 8000d86:	e000      	b.n	8000d8a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000d88:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d111      	bne.n	8000db4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6898      	ldr	r0, [r3, #8]
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	f000 facf 	bl	800134c <HAL_DMA_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	75fb      	strb	r3, [r7, #23]
 8000db2:	e010      	b.n	8000dd6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000dc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	68d8      	ldr	r0, [r3, #12]
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	f000 fabd 	bl	800134c <HAL_DMA_Start_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10c      	bne.n	8000dfc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	2201      	movs	r2, #1
 8000df0:	409a      	lsls	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e005      	b.n	8000e08 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	f043 0204 	orr.w	r2, r3, #4
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	080010e9 	.word	0x080010e9
 8000e18:	0800110b 	.word	0x0800110b
 8000e1c:	08001127 	.word	0x08001127
 8000e20:	08001191 	.word	0x08001191
 8000e24:	080011b3 	.word	0x080011b3
 8000e28:	080011cf 	.word	0x080011cf

08000e2c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	795b      	ldrb	r3, [r3, #5]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <HAL_DAC_ConfigChannel+0x1c>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e12a      	b.n	80010da <HAL_DAC_ConfigChannel+0x272>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2201      	movs	r2, #1
 8000e88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d174      	bne.n	8000f82 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000e98:	f7ff fd98 	bl	80009cc <HAL_GetTick>
 8000e9c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d134      	bne.n	8000f0e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ea4:	e011      	b.n	8000eca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ea6:	f7ff fd91 	bl	80009cc <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d90a      	bls.n	8000eca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	f043 0208 	orr.w	r2, r3, #8
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e107      	b.n	80010da <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1e6      	bne.n	8000ea6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fd83 	bl	80009e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	69d2      	ldr	r2, [r2, #28]
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee8:	e01e      	b.n	8000f28 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000eea:	f7ff fd6f 	bl	80009cc <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d90a      	bls.n	8000f0e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	f043 0208 	orr.w	r2, r3, #8
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2203      	movs	r2, #3
 8000f08:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e0e5      	b.n	80010da <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dbe8      	blt.n	8000eea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff fd63 	bl	80009e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	69d2      	ldr	r2, [r2, #28]
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	ea02 0103 	and.w	r1, r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	21ff      	movs	r1, #255	; 0xff
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	ea02 0103 	and.w	r1, r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d11d      	bne.n	8000fc6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f90:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	221f      	movs	r2, #31
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fcc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	4313      	orrs	r3, r2
 8001004:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	400a      	ands	r2, r1
 800102a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	4013      	ands	r3, r2
 8001048:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	4313      	orrs	r3, r2
 8001060:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800106a:	d104      	bne.n	8001076 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	e018      	b.n	80010a8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d104      	bne.n	8001088 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e00f      	b.n	80010a8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001088:	f001 fb76 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 800108c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <HAL_DAC_ConfigChannel+0x27c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d904      	bls.n	80010a0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e003      	b.n	80010a8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010a6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6819      	ldr	r1, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	22c0      	movs	r2, #192	; 0xc0
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2201      	movs	r2, #1
 80010d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	04c4b400 	.word	0x04c4b400

080010e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff fe98 	bl	8000e2c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2201      	movs	r2, #1
 8001100:	711a      	strb	r2, [r3, #4]
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001116:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff fe91 	bl	8000e40 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	f043 0204 	orr.w	r2, r3, #4
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff fe87 	bl	8000e54 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2201      	movs	r2, #1
 800114a:	711a      	strb	r2, [r3, #4]
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ffd8 	bl	8001154 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2201      	movs	r2, #1
 80011a8:	711a      	strb	r2, [r3, #4]
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ffd1 	bl	8001168 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f043 0204 	orr.w	r2, r3, #4
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff ffc7 	bl	800117c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2201      	movs	r2, #1
 80011f2:	711a      	strb	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e08d      	b.n	800132a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b47      	ldr	r3, [pc, #284]	; (8001334 <HAL_DMA_Init+0x138>)
 8001216:	429a      	cmp	r2, r3
 8001218:	d80f      	bhi.n	800123a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b45      	ldr	r3, [pc, #276]	; (8001338 <HAL_DMA_Init+0x13c>)
 8001222:	4413      	add	r3, r2
 8001224:	4a45      	ldr	r2, [pc, #276]	; (800133c <HAL_DMA_Init+0x140>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	009a      	lsls	r2, r3, #2
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a42      	ldr	r2, [pc, #264]	; (8001340 <HAL_DMA_Init+0x144>)
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
 8001238:	e00e      	b.n	8001258 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <HAL_DMA_Init+0x148>)
 8001242:	4413      	add	r3, r2
 8001244:	4a3d      	ldr	r2, [pc, #244]	; (800133c <HAL_DMA_Init+0x140>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	009a      	lsls	r2, r3, #2
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a3c      	ldr	r2, [pc, #240]	; (8001348 <HAL_DMA_Init+0x14c>)
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800126e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001272:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f9b6 	bl	800161c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012b8:	d102      	bne.n	80012c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012d4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d010      	beq.n	8001300 <HAL_DMA_Init+0x104>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d80c      	bhi.n	8001300 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f9d6 	bl	8001698 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	e008      	b.n	8001312 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020407 	.word	0x40020407
 8001338:	bffdfff8 	.word	0xbffdfff8
 800133c:	cccccccd 	.word	0xcccccccd
 8001340:	40020000 	.word	0x40020000
 8001344:	bffdfbf8 	.word	0xbffdfbf8
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_DMA_Start_IT+0x20>
 8001368:	2302      	movs	r3, #2
 800136a:	e066      	b.n	800143a <HAL_DMA_Start_IT+0xee>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d155      	bne.n	800142c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 f8fb 	bl	80015a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 020e 	orr.w	r2, r2, #14
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e00f      	b.n	80013e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0204 	bic.w	r2, r2, #4
 80013d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 020a 	orr.w	r2, r2, #10
 80013e2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001400:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001418:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e005      	b.n	8001438 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001434:	2302      	movs	r3, #2
 8001436:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f003 031c 	and.w	r3, r3, #28
 8001462:	2204      	movs	r2, #4
 8001464:	409a      	lsls	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d026      	beq.n	80014bc <HAL_DMA_IRQHandler+0x7a>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d021      	beq.n	80014bc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	2b00      	cmp	r3, #0
 8001484:	d107      	bne.n	8001496 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0204 	bic.w	r2, r2, #4
 8001494:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f003 021c 	and.w	r2, r3, #28
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	2104      	movs	r1, #4
 80014a4:	fa01 f202 	lsl.w	r2, r1, r2
 80014a8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d071      	beq.n	8001596 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014ba:	e06c      	b.n	8001596 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	f003 031c 	and.w	r3, r3, #28
 80014c4:	2202      	movs	r2, #2
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d02e      	beq.n	800152e <HAL_DMA_IRQHandler+0xec>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d029      	beq.n	800152e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0320 	and.w	r3, r3, #32
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10b      	bne.n	8001500 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 020a 	bic.w	r2, r2, #10
 80014f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	f003 021c 	and.w	r2, r3, #28
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	2102      	movs	r1, #2
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d038      	beq.n	8001596 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800152c:	e033      	b.n	8001596 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f003 031c 	and.w	r3, r3, #28
 8001536:	2208      	movs	r2, #8
 8001538:	409a      	lsls	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d02a      	beq.n	8001598 <HAL_DMA_IRQHandler+0x156>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d025      	beq.n	8001598 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 020e 	bic.w	r2, r2, #14
 800155a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f003 021c 	and.w	r2, r3, #28
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	2101      	movs	r1, #1
 800156a:	fa01 f202 	lsl.w	r2, r1, r2
 800156e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158a:	2b00      	cmp	r3, #0
 800158c:	d004      	beq.n	8001598 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001596:	bf00      	nop
 8001598:	bf00      	nop
}
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015b6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015c8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f003 021c 	and.w	r2, r3, #28
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f202 	lsl.w	r2, r1, r2
 80015dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d108      	bne.n	8001600 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015fe:	e007      	b.n	8001610 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	60da      	str	r2, [r3, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800162c:	429a      	cmp	r2, r3
 800162e:	d80a      	bhi.n	8001646 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800163c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6493      	str	r3, [r2, #72]	; 0x48
 8001644:	e007      	b.n	8001656 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	009a      	lsls	r2, r3, #2
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001650:	4413      	add	r3, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	3b08      	subs	r3, #8
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800166c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	2201      	movs	r2, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40020407 	.word	0x40020407
 800168c:	4002081c 	.word	0x4002081c
 8001690:	cccccccd 	.word	0xcccccccd
 8001694:	40020880 	.word	0x40020880

08001698 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2201      	movs	r2, #1
 80016c6:	409a      	lsls	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	1000823f 	.word	0x1000823f
 80016dc:	40020940 	.word	0x40020940

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e166      	b.n	80019be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8158 	beq.w	80019b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d005      	beq.n	8001720 <HAL_GPIO_Init+0x40>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d130      	bne.n	8001782 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001756:	2201      	movs	r2, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 0201 	and.w	r2, r3, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b03      	cmp	r3, #3
 800178c:	d017      	beq.n	80017be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d123      	bne.n	8001812 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	6939      	ldr	r1, [r7, #16]
 800180e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0203 	and.w	r2, r3, #3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80b2 	beq.w	80019b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	4b61      	ldr	r3, [pc, #388]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 8001856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001858:	4a60      	ldr	r2, [pc, #384]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6613      	str	r3, [r2, #96]	; 0x60
 8001860:	4b5e      	ldr	r3, [pc, #376]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800186c:	4a5c      	ldr	r2, [pc, #368]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001896:	d02b      	beq.n	80018f0 <HAL_GPIO_Init+0x210>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_GPIO_Init+0x304>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d025      	beq.n	80018ec <HAL_GPIO_Init+0x20c>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a51      	ldr	r2, [pc, #324]	; (80019e8 <HAL_GPIO_Init+0x308>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d01f      	beq.n	80018e8 <HAL_GPIO_Init+0x208>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a50      	ldr	r2, [pc, #320]	; (80019ec <HAL_GPIO_Init+0x30c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d019      	beq.n	80018e4 <HAL_GPIO_Init+0x204>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a4f      	ldr	r2, [pc, #316]	; (80019f0 <HAL_GPIO_Init+0x310>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_GPIO_Init+0x200>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a4e      	ldr	r2, [pc, #312]	; (80019f4 <HAL_GPIO_Init+0x314>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00d      	beq.n	80018dc <HAL_GPIO_Init+0x1fc>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x318>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0x1f8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_GPIO_Init+0x31c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_GPIO_Init+0x1f4>
 80018d0:	2307      	movs	r3, #7
 80018d2:	e00e      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018d4:	2308      	movs	r3, #8
 80018d6:	e00c      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018d8:	2306      	movs	r3, #6
 80018da:	e00a      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018dc:	2305      	movs	r3, #5
 80018de:	e008      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018e0:	2304      	movs	r3, #4
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x212>
 80018f0:	2300      	movs	r3, #0
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001902:	4937      	ldr	r1, [pc, #220]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001934:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800193a:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_GPIO_Init+0x320>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800195e:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001964:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_GPIO_Init+0x320>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_GPIO_Init+0x320>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b2:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <HAL_GPIO_Init+0x320>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f ae91 	bne.w	80016f0 <HAL_GPIO_Init+0x10>
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	48000400 	.word	0x48000400
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48000c00 	.word	0x48000c00
 80019f0:	48001000 	.word	0x48001000
 80019f4:	48001400 	.word	0x48001400
 80019f8:	48001800 	.word	0x48001800
 80019fc:	48001c00 	.word	0x48001c00
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a44:	d102      	bne.n	8001a4c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	e00b      	b.n	8001a64 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5a:	d102      	bne.n	8001a62 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a60:	e000      	b.n	8001a64 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a62:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40007000 	.word	0x40007000

08001a74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d141      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d131      	bne.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a90:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a96:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa0:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa8:	4a41      	ldr	r2, [pc, #260]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ab0:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2232      	movs	r2, #50	; 0x32
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	4a3f      	ldr	r2, [pc, #252]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001abc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac0:	0c9b      	lsrs	r3, r3, #18
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac6:	e002      	b.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ada:	d102      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f2      	bne.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aee:	d158      	bne.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e057      	b.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001afa:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b04:	e04d      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b0c:	d141      	bne.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1a:	d131      	bne.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b22:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b34:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2232      	movs	r2, #50	; 0x32
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	0c9b      	lsrs	r3, r3, #18
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b52:	e002      	b.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b66:	d102      	bne.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f2      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7a:	d112      	bne.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e011      	b.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b90:	e007      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	431bde83 	.word	0x431bde83

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f000 bc16 	b.w	80023fc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd0:	4ba0      	ldr	r3, [pc, #640]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bda:	4b9e      	ldr	r3, [pc, #632]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80e4 	beq.w	8001dba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4c>
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	f040 808b 	bne.w	8001d16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	f040 8087 	bne.w	8001d16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c08:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x64>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e3ed      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1a      	ldr	r2, [r3, #32]
 8001c24:	4b8b      	ldr	r3, [pc, #556]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7e>
 8001c30:	4b88      	ldr	r3, [pc, #544]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c38:	e005      	b.n	8001c46 <HAL_RCC_OscConfig+0x8a>
 8001c3a:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d223      	bcs.n	8001c92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fd9e 	bl	8002790 <RCC_SetFlashLatencyFromMSIRange>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e3ce      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5e:	4b7d      	ldr	r3, [pc, #500]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7c      	ldr	r2, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4977      	ldr	r1, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7c:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	4972      	ldr	r1, [pc, #456]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	e025      	b.n	8001cde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c92:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6f      	ldr	r2, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b6d      	ldr	r3, [pc, #436]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	496a      	ldr	r1, [pc, #424]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	4965      	ldr	r1, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fd5e 	bl	8002790 <RCC_SetFlashLatencyFromMSIRange>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e38e      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cde:	f000 fcbf 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	495a      	ldr	r1, [pc, #360]	; (8001e58 <HAL_RCC_OscConfig+0x29c>)
 8001cf0:	5ccb      	ldrb	r3, [r1, r3]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfa:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <HAL_RCC_OscConfig+0x2a0>)
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cfe:	4b58      	ldr	r3, [pc, #352]	; (8001e60 <HAL_RCC_OscConfig+0x2a4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fe12 	bl	800092c <HAL_InitTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d052      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	e372      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d032      	beq.n	8001d84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d1e:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fe4f 	bl	80009cc <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d32:	f7fe fe4b 	bl	80009cc <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e35b      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	493a      	ldr	r1, [pc, #232]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
 8001d82:	e01a      	b.n	8001dba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d84:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fe1c 	bl	80009cc <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d98:	f7fe fe18 	bl	80009cc <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e328      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1dc>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d073      	beq.n	8001eae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x21c>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d10e      	bne.n	8001df0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d063      	beq.n	8001eac <HAL_RCC_OscConfig+0x2f0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d15f      	bne.n	8001eac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e305      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x24c>
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0x288>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x270>
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x288>
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fdbe 	bl	80009cc <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	e010      	b.n	8001e76 <HAL_RCC_OscConfig+0x2ba>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08004dd8 	.word	0x08004dd8
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7fe fdb2 	bl	80009cc <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e2c2      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e76:	4baf      	ldr	r3, [pc, #700]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x2a8>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe fda2 	bl	80009cc <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7fe fd9e 	bl	80009cc <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e2ae      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9e:	4ba5      	ldr	r3, [pc, #660]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2d0>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d060      	beq.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x310>
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d119      	bne.n	8001efa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d116      	bne.n	8001efa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	4b99      	ldr	r3, [pc, #612]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x328>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e28b      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b93      	ldr	r3, [pc, #588]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	4990      	ldr	r1, [pc, #576]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef8:	e040      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d023      	beq.n	8001f4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f02:	4b8c      	ldr	r3, [pc, #560]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a8b      	ldr	r2, [pc, #556]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fd5d 	bl	80009cc <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7fe fd59 	bl	80009cc <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e269      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f28:	4b82      	ldr	r3, [pc, #520]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f34:	4b7f      	ldr	r3, [pc, #508]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	497c      	ldr	r1, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
 8001f48:	e018      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4a:	4b7a      	ldr	r3, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a79      	ldr	r2, [pc, #484]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7fe fd39 	bl	80009cc <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7fe fd35 	bl	80009cc <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e245      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f70:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03c      	beq.n	8002002 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01c      	beq.n	8001fca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	4a67      	ldr	r2, [pc, #412]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fd14 	bl	80009cc <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7fe fd10 	bl	80009cc <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e220      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fba:	4b5e      	ldr	r3, [pc, #376]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ef      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x3ec>
 8001fc8:	e01b      	b.n	8002002 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7fe fcf7 	bl	80009cc <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe2:	f7fe fcf3 	bl	80009cc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e203      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ef      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80a6 	beq.w	800215c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a43      	ldr	r2, [pc, #268]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002038:	2301      	movs	r3, #1
 800203a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_OscConfig+0x57c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d118      	bne.n	800207a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCC_OscConfig+0x57c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_RCC_OscConfig+0x57c>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002054:	f7fe fcba 	bl	80009cc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe fcb6 	bl	80009cc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1c6      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <HAL_RCC_OscConfig+0x57c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d108      	bne.n	8002094 <HAL_RCC_OscConfig+0x4d8>
 8002082:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002092:	e024      	b.n	80020de <HAL_RCC_OscConfig+0x522>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b05      	cmp	r3, #5
 800209a:	d110      	bne.n	80020be <HAL_RCC_OscConfig+0x502>
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020bc:	e00f      	b.n	80020de <HAL_RCC_OscConfig+0x522>
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe fc71 	bl	80009cc <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe fc6d 	bl	80009cc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e17b      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ed      	beq.n	80020ee <HAL_RCC_OscConfig+0x532>
 8002112:	e01a      	b.n	800214a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fc5a 	bl	80009cc <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800211a:	e00f      	b.n	800213c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7fe fc56 	bl	80009cc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d906      	bls.n	800213c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e164      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800213c:	4ba8      	ldr	r3, [pc, #672]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e8      	bne.n	800211c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214a:	7ffb      	ldrb	r3, [r7, #31]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4ba3      	ldr	r3, [pc, #652]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4aa2      	ldr	r2, [pc, #648]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01c      	beq.n	80021aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002170:	4b9b      	ldr	r3, [pc, #620]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002176:	4a9a      	ldr	r2, [pc, #616]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe fc24 	bl	80009cc <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002188:	f7fe fc20 	bl	80009cc <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e130      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800219a:	4b91      	ldr	r3, [pc, #580]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800219c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ef      	beq.n	8002188 <HAL_RCC_OscConfig+0x5cc>
 80021a8:	e01b      	b.n	80021e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021aa:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80021ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b0:	4a8b      	ldr	r2, [pc, #556]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe fc07 	bl	80009cc <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c2:	f7fe fc03 	bl	80009cc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e113      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021d4:	4b82      	ldr	r3, [pc, #520]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80021d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ef      	bne.n	80021c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8107 	beq.w	80023fa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	f040 80cb 	bne.w	800238c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021f6:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	429a      	cmp	r2, r3
 8002208:	d12c      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	3b01      	subs	r3, #1
 8002216:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d123      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d11b      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d113      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d109      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	3b01      	subs	r3, #1
 800225e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d06d      	beq.n	8002340 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d068      	beq.n	800233c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800226a:	4b5d      	ldr	r3, [pc, #372]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002276:	4b5a      	ldr	r3, [pc, #360]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0ba      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002286:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a55      	ldr	r2, [pc, #340]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800228c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002290:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002292:	f7fe fb9b 	bl	80009cc <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe fb97 	bl	80009cc <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0a7      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b8:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x828>)
 80022be:	4013      	ands	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022c8:	3a01      	subs	r2, #1
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022d2:	0212      	lsls	r2, r2, #8
 80022d4:	4311      	orrs	r1, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022da:	0852      	lsrs	r2, r2, #1
 80022dc:	3a01      	subs	r2, #1
 80022de:	0552      	lsls	r2, r2, #21
 80022e0:	4311      	orrs	r1, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022e6:	0852      	lsrs	r2, r2, #1
 80022e8:	3a01      	subs	r2, #1
 80022ea:	0652      	lsls	r2, r2, #25
 80022ec:	4311      	orrs	r1, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022f2:	06d2      	lsls	r2, r2, #27
 80022f4:	430a      	orrs	r2, r1
 80022f6:	493a      	ldr	r1, [pc, #232]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022fc:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002308:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002312:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002314:	f7fe fb5a 	bl	80009cc <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fb56 	bl	80009cc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e066      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233a:	e05e      	b.n	80023fa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e05d      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d156      	bne.n	80023fa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a20      	ldr	r2, [pc, #128]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002362:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002364:	f7fe fb32 	bl	80009cc <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe fb2e 	bl	80009cc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e03e      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x7b0>
 800238a:	e036      	b.n	80023fa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d031      	beq.n	80023f6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023b0:	f023 0303 	bic.w	r3, r3, #3
 80023b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fb01 	bl	80009cc <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	e00c      	b.n	80023e8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fafd 	bl	80009cc <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d905      	bls.n	80023e8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e00d      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_OscConfig+0x848>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ec      	bne.n	80023ce <HAL_RCC_OscConfig+0x812>
 80023f4:	e001      	b.n	80023fa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e10f      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002420:	4b89      	ldr	r3, [pc, #548]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d910      	bls.n	8002450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b86      	ldr	r3, [pc, #536]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 020f 	bic.w	r2, r3, #15
 8002436:	4984      	ldr	r1, [pc, #528]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b82      	ldr	r3, [pc, #520]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0f7      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8089 	beq.w	8002570 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d133      	bne.n	80024ce <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	4b79      	ldr	r3, [pc, #484]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0e4      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002476:	f000 f9e5 	bl	8002844 <RCC_GetSysClockFreqFromPLLSource>
 800247a:	4603      	mov	r3, r0
 800247c:	4a74      	ldr	r2, [pc, #464]	; (8002650 <HAL_RCC_ClockConfig+0x248>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d955      	bls.n	800252e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800248e:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002496:	4a6d      	ldr	r2, [pc, #436]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e044      	b.n	800252e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d03e      	beq.n	800252e <HAL_RCC_ClockConfig+0x126>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d13a      	bne.n	800252e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c0:	4a62      	ldr	r2, [pc, #392]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80024c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e02f      	b.n	800252e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d115      	bne.n	800250e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0ac      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ee:	4b57      	ldr	r3, [pc, #348]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0a0      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fe:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e098      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800250e:	f000 f8a7 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002512:	4603      	mov	r3, r0
 8002514:	4a4e      	ldr	r2, [pc, #312]	; (8002650 <HAL_RCC_ClockConfig+0x248>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d909      	bls.n	800252e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002522:	4a4a      	ldr	r2, [pc, #296]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002528:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4944      	ldr	r1, [pc, #272]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002540:	f7fe fa44 	bl	80009cc <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fa40 	bl	80009cc <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e070      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b33      	ldr	r3, [pc, #204]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4930      	ldr	r1, [pc, #192]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
 800258e:	e008      	b.n	80025a2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b80      	cmp	r3, #128	; 0x80
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4a2c      	ldr	r2, [pc, #176]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800259c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a2:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d210      	bcs.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 020f 	bic.w	r2, r3, #15
 80025b8:	4923      	ldr	r1, [pc, #140]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e036      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4918      	ldr	r1, [pc, #96]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4910      	ldr	r1, [pc, #64]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002610:	f000 f826 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <HAL_RCC_ClockConfig+0x24c>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x250>)
 800262e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x254>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe f979 	bl	800092c <HAL_InitTick>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]

  return status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	04c4b400 	.word	0x04c4b400
 8002654:	08004dd8 	.word	0x08004dd8
 8002658:	20000008 	.word	0x20000008
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002678:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x34>
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d121      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d11e      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e005      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026bc:	4a2b      	ldr	r2, [pc, #172]	; (800276c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d102      	bne.n	80026de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <HAL_RCC_GetSysClockFreq+0x110>)
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	e004      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_RCC_GetSysClockFreq+0x114>)
 80026e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d134      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0xa6>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d003      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0xac>
 8002704:	e005      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <HAL_RCC_GetSysClockFreq+0x110>)
 8002708:	617b      	str	r3, [r7, #20]
      break;
 800270a:	e005      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_GetSysClockFreq+0x114>)
 800270e:	617b      	str	r3, [r7, #20]
      break;
 8002710:	e002      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	617b      	str	r3, [r7, #20]
      break;
 8002716:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3301      	adds	r3, #1
 8002724:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	fb02 f203 	mul.w	r2, r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	0e5b      	lsrs	r3, r3, #25
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	3301      	adds	r3, #1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002758:	69bb      	ldr	r3, [r7, #24]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	08004de8 	.word	0x08004de8
 8002770:	00f42400 	.word	0x00f42400
 8002774:	007a1200 	.word	0x007a1200

08002778 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_RCC_GetHCLKFreq+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008

08002790 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027a8:	f7ff f944 	bl	8001a34 <HAL_PWREx_GetVoltageRange>
 80027ac:	6178      	str	r0, [r7, #20]
 80027ae:	e014      	b.n	80027da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	; 0x58
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027c8:	f7ff f934 	bl	8001a34 <HAL_PWREx_GetVoltageRange>
 80027cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e0:	d10b      	bne.n	80027fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d913      	bls.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2ba0      	cmp	r3, #160	; 0xa0
 80027ec:	d902      	bls.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027ee:	2302      	movs	r3, #2
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	e00d      	b.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027f4:	2301      	movs	r3, #1
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	e00a      	b.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b7f      	cmp	r3, #127	; 0x7f
 80027fe:	d902      	bls.n	8002806 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002800:	2302      	movs	r3, #2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	e004      	b.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b70      	cmp	r3, #112	; 0x70
 800280a:	d101      	bne.n	8002810 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800280c:	2301      	movs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 020f 	bic.w	r2, r3, #15
 8002818:	4909      	ldr	r1, [pc, #36]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	429a      	cmp	r2, r3
 800282c:	d001      	beq.n	8002832 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	40022000 	.word	0x40022000

08002844 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800284e:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d118      	bne.n	800288c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e005      	b.n	8002882 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002882:	4a21      	ldr	r2, [pc, #132]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d003      	beq.n	80028a4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d003      	beq.n	80028aa <RCC_GetSysClockFreqFromPLLSource+0x66>
 80028a2:	e005      	b.n	80028b0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80028a6:	613b      	str	r3, [r7, #16]
    break;
 80028a8:	e005      	b.n	80028b6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028ac:	613b      	str	r3, [r7, #16]
    break;
 80028ae:	e002      	b.n	80028b6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	613b      	str	r3, [r7, #16]
    break;
 80028b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	3301      	adds	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	fb02 f203 	mul.w	r2, r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0e5b      	lsrs	r3, r3, #25
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	3301      	adds	r3, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80028f6:	683b      	ldr	r3, [r7, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40021000 	.word	0x40021000
 8002908:	08004de8 	.word	0x08004de8
 800290c:	00f42400 	.word	0x00f42400
 8002910:	007a1200 	.word	0x007a1200

08002914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e049      	b.n	80029ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f002 f85e 	bl	80049fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f000 fdde 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d001      	beq.n	80029dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e047      	b.n	8002a6c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <HAL_TIM_Base_Start+0xb4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01d      	beq.n	8002a2a <HAL_TIM_Base_Start+0x66>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f6:	d018      	beq.n	8002a2a <HAL_TIM_Base_Start+0x66>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_TIM_Base_Start+0xb8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_TIM_Base_Start+0x66>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_TIM_Base_Start+0xbc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_TIM_Base_Start+0x66>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_TIM_Base_Start+0xc0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_TIM_Base_Start+0x66>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_TIM_Base_Start+0xc4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_TIM_Base_Start+0x66>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_TIM_Base_Start+0xc8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d115      	bne.n	8002a56 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_TIM_Base_Start+0xcc>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d015      	beq.n	8002a68 <HAL_TIM_Base_Start+0xa4>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a42:	d011      	beq.n	8002a68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a54:	e008      	b.n	8002a68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e000      	b.n	8002a6a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	40013400 	.word	0x40013400
 8002a8c:	40014000 	.word	0x40014000
 8002a90:	00010007 	.word	0x00010007

08002a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d001      	beq.n	8002aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e04f      	b.n	8002b4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <HAL_TIM_Base_Start_IT+0xc4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01d      	beq.n	8002b0a <HAL_TIM_Base_Start_IT+0x76>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d018      	beq.n	8002b0a <HAL_TIM_Base_Start_IT+0x76>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_TIM_Base_Start_IT+0xc8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_TIM_Base_Start_IT+0x76>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <HAL_TIM_Base_Start_IT+0x76>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d009      	beq.n	8002b0a <HAL_TIM_Base_Start_IT+0x76>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d004      	beq.n	8002b0a <HAL_TIM_Base_Start_IT+0x76>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d115      	bne.n	8002b36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b06      	cmp	r3, #6
 8002b1a:	d015      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0xb4>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b22:	d011      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b34:	e008      	b.n	8002b48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	e000      	b.n	8002b4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	40013400 	.word	0x40013400
 8002b6c:	40014000 	.word	0x40014000
 8002b70:	00010007 	.word	0x00010007

08002b74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e049      	b.n	8002c1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f841 	bl	8002c22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f000 fcae 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_TIM_PWM_Start+0x24>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e03c      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d109      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x3e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e02f      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d109      	bne.n	8002c90 <HAL_TIM_PWM_Start+0x58>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e022      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d109      	bne.n	8002caa <HAL_TIM_PWM_Start+0x72>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e015      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d109      	bne.n	8002cc4 <HAL_TIM_PWM_Start+0x8c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e008      	b.n	8002cd6 <HAL_TIM_PWM_Start+0x9e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e09c      	b.n	8002e18 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_TIM_PWM_Start+0xb6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	e023      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d104      	bne.n	8002cfe <HAL_TIM_PWM_Start+0xc6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cfc:	e01b      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_PWM_Start+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d0c:	e013      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_PWM_Start+0xe6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d1c:	e00b      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_PWM_Start+0xf6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2c:	e003      	b.n	8002d36 <HAL_TIM_PWM_Start+0xfe>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 f885 	bl	8003e4e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a35      	ldr	r2, [pc, #212]	; (8002e20 <HAL_TIM_PWM_Start+0x1e8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_TIM_PWM_Start+0x13e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <HAL_TIM_PWM_Start+0x1ec>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00e      	beq.n	8002d76 <HAL_TIM_PWM_Start+0x13e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_TIM_PWM_Start+0x1f0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_TIM_PWM_Start+0x13e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a31      	ldr	r2, [pc, #196]	; (8002e2c <HAL_TIM_PWM_Start+0x1f4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_TIM_PWM_Start+0x13e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2f      	ldr	r2, [pc, #188]	; (8002e30 <HAL_TIM_PWM_Start+0x1f8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_TIM_PWM_Start+0x142>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_PWM_Start+0x144>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <HAL_TIM_PWM_Start+0x1e8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01d      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x19e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d018      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x19e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <HAL_TIM_PWM_Start+0x1fc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x19e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <HAL_TIM_PWM_Start+0x200>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x19e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <HAL_TIM_PWM_Start+0x204>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x19e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <HAL_TIM_PWM_Start+0x1ec>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x19e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <HAL_TIM_PWM_Start+0x1f0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d115      	bne.n	8002e02 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_TIM_PWM_Start+0x208>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d015      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1dc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d011      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	e008      	b.n	8002e14 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e000      	b.n	8002e16 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40013400 	.word	0x40013400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40000c00 	.word	0x40000c00
 8002e40:	00010007 	.word	0x00010007

08002e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0202 	mvn.w	r2, #2
 8002e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fb25 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fb17 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fb28 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0204 	mvn.w	r2, #4
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fafb 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 faed 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fafe 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0208 	mvn.w	r2, #8
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fad1 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fac3 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fad4 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0210 	mvn.w	r2, #16
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2208      	movs	r2, #8
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 faa7 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa99 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 faaa 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0201 	mvn.w	r2, #1
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f001 fc54 	bl	8004870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b80      	cmp	r3, #128	; 0x80
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	2b80      	cmp	r3, #128	; 0x80
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 ffe4 	bl	8003fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003002:	d10e      	bne.n	8003022 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d107      	bne.n	8003022 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 ffd7 	bl	8003fd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d10e      	bne.n	800304e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d107      	bne.n	800304e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fa58 	bl	80034fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d10e      	bne.n	800307a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d107      	bne.n	800307a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0220 	mvn.w	r2, #32
 8003072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 ff97 	bl	8003fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800309e:	2302      	movs	r3, #2
 80030a0:	e0ff      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b14      	cmp	r3, #20
 80030ae:	f200 80f0 	bhi.w	8003292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	0800310d 	.word	0x0800310d
 80030bc:	08003293 	.word	0x08003293
 80030c0:	08003293 	.word	0x08003293
 80030c4:	08003293 	.word	0x08003293
 80030c8:	0800314d 	.word	0x0800314d
 80030cc:	08003293 	.word	0x08003293
 80030d0:	08003293 	.word	0x08003293
 80030d4:	08003293 	.word	0x08003293
 80030d8:	0800318f 	.word	0x0800318f
 80030dc:	08003293 	.word	0x08003293
 80030e0:	08003293 	.word	0x08003293
 80030e4:	08003293 	.word	0x08003293
 80030e8:	080031cf 	.word	0x080031cf
 80030ec:	08003293 	.word	0x08003293
 80030f0:	08003293 	.word	0x08003293
 80030f4:	08003293 	.word	0x08003293
 80030f8:	08003211 	.word	0x08003211
 80030fc:	08003293 	.word	0x08003293
 8003100:	08003293 	.word	0x08003293
 8003104:	08003293 	.word	0x08003293
 8003108:	08003251 	.word	0x08003251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fa98 	bl	8003648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0208 	orr.w	r2, r2, #8
 8003126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6999      	ldr	r1, [r3, #24]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	619a      	str	r2, [r3, #24]
      break;
 800314a:	e0a5      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fb08 	bl	8003768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6999      	ldr	r1, [r3, #24]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	021a      	lsls	r2, r3, #8
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	619a      	str	r2, [r3, #24]
      break;
 800318c:	e084      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fb71 	bl	800387c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0208 	orr.w	r2, r2, #8
 80031a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0204 	bic.w	r2, r2, #4
 80031b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	61da      	str	r2, [r3, #28]
      break;
 80031cc:	e064      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fbd9 	bl	800398c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69d9      	ldr	r1, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	021a      	lsls	r2, r3, #8
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	61da      	str	r2, [r3, #28]
      break;
 800320e:	e043      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fc22 	bl	8003a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800324e:	e023      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fc66 	bl	8003b28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	021a      	lsls	r2, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003290:	e002      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
      break;
 8003296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop

080032ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_TIM_ConfigClockSource+0x1c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0b6      	b.n	8003436 <HAL_TIM_ConfigClockSource+0x18a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d03e      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0xd8>
 8003306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330a:	f200 8087 	bhi.w	800341c <HAL_TIM_ConfigClockSource+0x170>
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	f000 8086 	beq.w	8003422 <HAL_TIM_ConfigClockSource+0x176>
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d87f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d01a      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xaa>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d87b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d050      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x11e>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d877      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 800332c:	2b50      	cmp	r3, #80	; 0x50
 800332e:	d03c      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xfe>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d873      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d058      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x13e>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d86f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d064      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15e>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d86b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d060      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15e>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d867      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x170>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05c      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15e>
 8003350:	2b10      	cmp	r3, #16
 8003352:	d05a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x15e>
 8003354:	e062      	b.n	800341c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 fd52 	bl	8003e0e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	609a      	str	r2, [r3, #8]
      break;
 8003382:	e04f      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6899      	ldr	r1, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f000 fd3b 	bl	8003e0e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a6:	609a      	str	r2, [r3, #8]
      break;
 80033a8:	e03c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 fcaf 	bl	8003d1a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2150      	movs	r1, #80	; 0x50
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fd08 	bl	8003dd8 <TIM_ITRx_SetConfig>
      break;
 80033c8:	e02c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f000 fcce 	bl	8003d78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2160      	movs	r1, #96	; 0x60
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fcf8 	bl	8003dd8 <TIM_ITRx_SetConfig>
      break;
 80033e8:	e01c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 fc8f 	bl	8003d1a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fce8 	bl	8003dd8 <TIM_ITRx_SetConfig>
      break;
 8003408:	e00c      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 fcdf 	bl	8003dd8 <TIM_ITRx_SetConfig>
      break;
 800341a:	e003      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e000      	b.n	8003424 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003452:	2302      	movs	r3, #2
 8003454:	e031      	b.n	80034ba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003466:	6839      	ldr	r1, [r7, #0]
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fbc3 	bl	8003bf4 <TIM_SlaveTimer_SetConfig>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e018      	b.n	80034ba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003496:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034a6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a40      	ldr	r2, [pc, #256]	; (8003628 <TIM_Base_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d00f      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3d      	ldr	r2, [pc, #244]	; (800362c <TIM_Base_SetConfig+0x118>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <TIM_Base_SetConfig+0x11c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <TIM_Base_SetConfig+0x120>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <TIM_Base_SetConfig+0x124>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2f      	ldr	r2, [pc, #188]	; (8003628 <TIM_Base_SetConfig+0x114>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <TIM_Base_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d01b      	beq.n	80035ae <TIM_Base_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2c      	ldr	r2, [pc, #176]	; (800362c <TIM_Base_SetConfig+0x118>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d017      	beq.n	80035ae <TIM_Base_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2b      	ldr	r2, [pc, #172]	; (8003630 <TIM_Base_SetConfig+0x11c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <TIM_Base_SetConfig+0x9a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <TIM_Base_SetConfig+0x120>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00f      	beq.n	80035ae <TIM_Base_SetConfig+0x9a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a29      	ldr	r2, [pc, #164]	; (8003638 <TIM_Base_SetConfig+0x124>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00b      	beq.n	80035ae <TIM_Base_SetConfig+0x9a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a28      	ldr	r2, [pc, #160]	; (800363c <TIM_Base_SetConfig+0x128>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <TIM_Base_SetConfig+0x9a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a27      	ldr	r2, [pc, #156]	; (8003640 <TIM_Base_SetConfig+0x12c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_Base_SetConfig+0x9a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <TIM_Base_SetConfig+0x130>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d108      	bne.n	80035c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <TIM_Base_SetConfig+0x114>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00f      	beq.n	800360c <TIM_Base_SetConfig+0xf8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <TIM_Base_SetConfig+0x124>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0xf8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <TIM_Base_SetConfig+0x128>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0xf8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a10      	ldr	r2, [pc, #64]	; (8003640 <TIM_Base_SetConfig+0x12c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0xf8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0f      	ldr	r2, [pc, #60]	; (8003644 <TIM_Base_SetConfig+0x130>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d103      	bne.n	8003614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	615a      	str	r2, [r3, #20]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40013400 	.word	0x40013400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800

08003648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f023 0201 	bic.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 0302 	bic.w	r3, r3, #2
 8003694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <TIM_OC1_SetConfig+0x10c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00f      	beq.n	80036c8 <TIM_OC1_SetConfig+0x80>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <TIM_OC1_SetConfig+0x110>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00b      	beq.n	80036c8 <TIM_OC1_SetConfig+0x80>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a2a      	ldr	r2, [pc, #168]	; (800375c <TIM_OC1_SetConfig+0x114>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_OC1_SetConfig+0x80>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a29      	ldr	r2, [pc, #164]	; (8003760 <TIM_OC1_SetConfig+0x118>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_OC1_SetConfig+0x80>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a28      	ldr	r2, [pc, #160]	; (8003764 <TIM_OC1_SetConfig+0x11c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10c      	bne.n	80036e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0308 	bic.w	r3, r3, #8
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <TIM_OC1_SetConfig+0x10c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00f      	beq.n	800370a <TIM_OC1_SetConfig+0xc2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <TIM_OC1_SetConfig+0x110>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00b      	beq.n	800370a <TIM_OC1_SetConfig+0xc2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <TIM_OC1_SetConfig+0x114>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_OC1_SetConfig+0xc2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a18      	ldr	r2, [pc, #96]	; (8003760 <TIM_OC1_SetConfig+0x118>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_OC1_SetConfig+0xc2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a17      	ldr	r2, [pc, #92]	; (8003764 <TIM_OC1_SetConfig+0x11c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d111      	bne.n	800372e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	621a      	str	r2, [r3, #32]
}
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00
 8003758:	40013400 	.word	0x40013400
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800

08003768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f023 0210 	bic.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f023 0320 	bic.w	r3, r3, #32
 80037b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <TIM_OC2_SetConfig+0x100>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <TIM_OC2_SetConfig+0x6c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a27      	ldr	r2, [pc, #156]	; (800386c <TIM_OC2_SetConfig+0x104>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d10d      	bne.n	80037f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <TIM_OC2_SetConfig+0x100>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00f      	beq.n	8003818 <TIM_OC2_SetConfig+0xb0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <TIM_OC2_SetConfig+0x104>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00b      	beq.n	8003818 <TIM_OC2_SetConfig+0xb0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <TIM_OC2_SetConfig+0x108>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <TIM_OC2_SetConfig+0xb0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <TIM_OC2_SetConfig+0x10c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC2_SetConfig+0xb0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a19      	ldr	r2, [pc, #100]	; (8003878 <TIM_OC2_SetConfig+0x110>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d113      	bne.n	8003840 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800381e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40013400 	.word	0x40013400
 8003870:	40014000 	.word	0x40014000
 8003874:	40014400 	.word	0x40014400
 8003878:	40014800 	.word	0x40014800

0800387c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a27      	ldr	r2, [pc, #156]	; (8003978 <TIM_OC3_SetConfig+0xfc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_OC3_SetConfig+0x6a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a26      	ldr	r2, [pc, #152]	; (800397c <TIM_OC3_SetConfig+0x100>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <TIM_OC3_SetConfig+0xfc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_OC3_SetConfig+0xae>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1b      	ldr	r2, [pc, #108]	; (800397c <TIM_OC3_SetConfig+0x100>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_OC3_SetConfig+0xae>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1a      	ldr	r2, [pc, #104]	; (8003980 <TIM_OC3_SetConfig+0x104>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_OC3_SetConfig+0xae>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <TIM_OC3_SetConfig+0x108>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_OC3_SetConfig+0xae>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <TIM_OC3_SetConfig+0x10c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d113      	bne.n	8003952 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	621a      	str	r2, [r3, #32]
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40013400 	.word	0x40013400
 8003980:	40014000 	.word	0x40014000
 8003984:	40014400 	.word	0x40014400
 8003988:	40014800 	.word	0x40014800

0800398c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	031b      	lsls	r3, r3, #12
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <TIM_OC4_SetConfig+0xc0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00f      	beq.n	8003a10 <TIM_OC4_SetConfig+0x84>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <TIM_OC4_SetConfig+0xc4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <TIM_OC4_SetConfig+0x84>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <TIM_OC4_SetConfig+0xc8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_OC4_SetConfig+0x84>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <TIM_OC4_SetConfig+0xcc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_OC4_SetConfig+0x84>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <TIM_OC4_SetConfig+0xd0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d109      	bne.n	8003a24 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	621a      	str	r2, [r3, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40013400 	.word	0x40013400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <TIM_OC5_SetConfig+0xb4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_OC5_SetConfig+0x7a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <TIM_OC5_SetConfig+0xb8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_OC5_SetConfig+0x7a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <TIM_OC5_SetConfig+0xbc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_OC5_SetConfig+0x7a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <TIM_OC5_SetConfig+0xc0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_OC5_SetConfig+0x7a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <TIM_OC5_SetConfig+0xc4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d109      	bne.n	8003aee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40013400 	.word	0x40013400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800

08003b28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	051b      	lsls	r3, r3, #20
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <TIM_OC6_SetConfig+0xb8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00f      	beq.n	8003ba4 <TIM_OC6_SetConfig+0x7c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <TIM_OC6_SetConfig+0xbc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_OC6_SetConfig+0x7c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a16      	ldr	r2, [pc, #88]	; (8003be8 <TIM_OC6_SetConfig+0xc0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_OC6_SetConfig+0x7c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <TIM_OC6_SetConfig+0xc4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_OC6_SetConfig+0x7c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <TIM_OC6_SetConfig+0xc8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c10:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c22:	f023 0307 	bic.w	r3, r3, #7
 8003c26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b70      	cmp	r3, #112	; 0x70
 8003c40:	d01a      	beq.n	8003c78 <TIM_SlaveTimer_SetConfig+0x84>
 8003c42:	2b70      	cmp	r3, #112	; 0x70
 8003c44:	d860      	bhi.n	8003d08 <TIM_SlaveTimer_SetConfig+0x114>
 8003c46:	2b60      	cmp	r3, #96	; 0x60
 8003c48:	d054      	beq.n	8003cf4 <TIM_SlaveTimer_SetConfig+0x100>
 8003c4a:	2b60      	cmp	r3, #96	; 0x60
 8003c4c:	d85c      	bhi.n	8003d08 <TIM_SlaveTimer_SetConfig+0x114>
 8003c4e:	2b50      	cmp	r3, #80	; 0x50
 8003c50:	d046      	beq.n	8003ce0 <TIM_SlaveTimer_SetConfig+0xec>
 8003c52:	2b50      	cmp	r3, #80	; 0x50
 8003c54:	d858      	bhi.n	8003d08 <TIM_SlaveTimer_SetConfig+0x114>
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d019      	beq.n	8003c8e <TIM_SlaveTimer_SetConfig+0x9a>
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d854      	bhi.n	8003d08 <TIM_SlaveTimer_SetConfig+0x114>
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	d055      	beq.n	8003d0e <TIM_SlaveTimer_SetConfig+0x11a>
 8003c62:	2b30      	cmp	r3, #48	; 0x30
 8003c64:	d850      	bhi.n	8003d08 <TIM_SlaveTimer_SetConfig+0x114>
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d051      	beq.n	8003d0e <TIM_SlaveTimer_SetConfig+0x11a>
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d84c      	bhi.n	8003d08 <TIM_SlaveTimer_SetConfig+0x114>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04d      	beq.n	8003d0e <TIM_SlaveTimer_SetConfig+0x11a>
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d04b      	beq.n	8003d0e <TIM_SlaveTimer_SetConfig+0x11a>
 8003c76:	e047      	b.n	8003d08 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68d9      	ldr	r1, [r3, #12]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f000 f8c1 	bl	8003e0e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003c8c:	e040      	b.n	8003d10 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d101      	bne.n	8003c9a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e03b      	b.n	8003d12 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cc0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	621a      	str	r2, [r3, #32]
      break;
 8003cde:	e017      	b.n	8003d10 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	461a      	mov	r2, r3
 8003cee:	f000 f814 	bl	8003d1a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003cf2:	e00d      	b.n	8003d10 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6899      	ldr	r1, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f000 f839 	bl	8003d78 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003d06:	e003      	b.n	8003d10 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e000      	b.n	8003d10 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003d0e:	bf00      	nop
  }

  return status;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 0201 	bic.w	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 030a 	bic.w	r3, r3, #10
 8003d56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	621a      	str	r2, [r3, #32]
}
 8003d6c:	bf00      	nop
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f023 0210 	bic.w	r2, r3, #16
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	031b      	lsls	r3, r3, #12
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	621a      	str	r2, [r3, #32]
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f043 0307 	orr.w	r3, r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	609a      	str	r2, [r3, #8]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	021a      	lsls	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2201      	movs	r2, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	401a      	ands	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
}
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e068      	b.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a2e      	ldr	r2, [pc, #184]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d108      	bne.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003eea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01d      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d018      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10c      	bne.n	8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40014000 	.word	0x40014000

08003fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	0000      	movs	r0, r0
	...

08003fe8 <init_buffer>:
			frame_buffer[i][j] = 10;
		}
	}
}
// Fill buffers with testing stuff
void init_buffer() {
 8003fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fec:	b08a      	sub	sp, #40	; 0x28
 8003fee:	af00      	add	r7, sp, #0
  // Allocate buffers
  // Continuous memory alloc
  uint8_t* tmp_buffer  = (uint8_t*) malloc(sizeof(uint8_t) * horiz_size * vert_size);
 8003ff0:	f64a 7064 	movw	r0, #44900	; 0xaf64
 8003ff4:	f000 fe5c 	bl	8004cb0 <malloc>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	61fb      	str	r3, [r7, #28]
  uint8_t* tmp2_buffer = (uint8_t*) malloc(sizeof(uint8_t) * horiz_size * vert_size);
 8003ffc:	f64a 7064 	movw	r0, #44900	; 0xaf64
 8004000:	f000 fe56 	bl	8004cb0 <malloc>
 8004004:	4603      	mov	r3, r0
 8004006:	61bb      	str	r3, [r7, #24]
  frame_buffer = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8004008:	f240 7004 	movw	r0, #1796	; 0x704
 800400c:	f000 fe50 	bl	8004cb0 <malloc>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	4ba2      	ldr	r3, [pc, #648]	; (80042a0 <init_buffer+0x2b8>)
 8004016:	601a      	str	r2, [r3, #0]
  true_buffer  = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8004018:	f240 7004 	movw	r0, #1796	; 0x704
 800401c:	f000 fe48 	bl	8004cb0 <malloc>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	4b9f      	ldr	r3, [pc, #636]	; (80042a4 <init_buffer+0x2bc>)
 8004026:	601a      	str	r2, [r3, #0]

  // Fill them with data, start with increasing grayscale (and decreasing for back)
  for(int i = 0; i < vert_size; i++) {
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	e19b      	b.n	8004366 <init_buffer+0x37e>
	  // Point to place in continuous mem location
	  frame_buffer[i] = tmp_buffer  + i*horiz_size;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	2264      	movs	r2, #100	; 0x64
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	4619      	mov	r1, r3
 8004038:	4b99      	ldr	r3, [pc, #612]	; (80042a0 <init_buffer+0x2b8>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	440a      	add	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
	  true_buffer[i] = tmp2_buffer  + i*horiz_size;
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	2264      	movs	r2, #100	; 0x64
 800404c:	fb02 f303 	mul.w	r3, r2, r3
 8004050:	4619      	mov	r1, r3
 8004052:	4b94      	ldr	r3, [pc, #592]	; (80042a4 <init_buffer+0x2bc>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	440a      	add	r2, r1
 8004060:	601a      	str	r2, [r3, #0]
	  for(int j = 0; j < horiz_size; j++) {
 8004062:	2300      	movs	r3, #0
 8004064:	623b      	str	r3, [r7, #32]
 8004066:	e177      	b.n	8004358 <init_buffer+0x370>
		  // Back porch Horizontal || Front Porch Horizontal
//		  if (j < 6 || j >= 85) {
		  if (j < 3 || j >= 82) {
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	2b02      	cmp	r3, #2
 800406c:	dd02      	ble.n	8004074 <init_buffer+0x8c>
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	2b51      	cmp	r3, #81	; 0x51
 8004072:	dd14      	ble.n	800409e <init_buffer+0xb6>
			  frame_buffer[i][j] = (uint8_t) 0;
 8004074:	4b8a      	ldr	r3, [pc, #552]	; (80042a0 <init_buffer+0x2b8>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	4413      	add	r3, r2
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
			  true_buffer[i][j] = (uint8_t) 0;
 8004088:	4b86      	ldr	r3, [pc, #536]	; (80042a4 <init_buffer+0x2bc>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	4413      	add	r3, r2
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e159      	b.n	8004352 <init_buffer+0x36a>
		  }
		  // Back porch Vertical || Front Porch Vertical
		  else if (i < 60 || i >= 410) {
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	2b3b      	cmp	r3, #59	; 0x3b
 80040a2:	dd03      	ble.n	80040ac <init_buffer+0xc4>
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80040aa:	db0a      	blt.n	80040c2 <init_buffer+0xda>
			  true_buffer[i][j] = (uint8_t) 0;
 80040ac:	4b7d      	ldr	r3, [pc, #500]	; (80042a4 <init_buffer+0x2bc>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	4413      	add	r3, r2
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e147      	b.n	8004352 <init_buffer+0x36a>
		  }
		  // Color based on x pos
		  else {
			  float y = 350-(i-60) - 175;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	f1c3 03eb 	rsb	r3, r3, #235	; 0xeb
 80040c8:	ee07 3a90 	vmov	s15, r3
 80040cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d0:	edc7 7a05 	vstr	s15, [r7, #20]
			  float x = 4.48718*(j-3) - 175;
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	3b03      	subs	r3, #3
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fc fb0d 	bl	80006f8 <__aeabi_i2d>
 80040de:	a36a      	add	r3, pc, #424	; (adr r3, 8004288 <init_buffer+0x2a0>)
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f7fc f88c 	bl	8000200 <__aeabi_dmul>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	a367      	add	r3, pc, #412	; (adr r3, 8004290 <init_buffer+0x2a8>)
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	f7fc f9b1 	bl	800045c <__aeabi_dsub>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f7fc fbab 	bl	800085c <__aeabi_d2f>
 8004106:	4603      	mov	r3, r0
 8004108:	613b      	str	r3, [r7, #16]
			  float rad_head = x*x + y*y;
 800410a:	edd7 7a04 	vldr	s15, [r7, #16]
 800410e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004112:	edd7 7a05 	vldr	s15, [r7, #20]
 8004116:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800411a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411e:	edc7 7a03 	vstr	s15, [r7, #12]
			  float rad_eyes = (abs(x)-70)*(abs(x)-70) + (y-30)*(y-30);
 8004122:	edd7 7a04 	vldr	s15, [r7, #16]
 8004126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412a:	ee17 3a90 	vmov	r3, s15
 800412e:	2b00      	cmp	r3, #0
 8004130:	bfb8      	it	lt
 8004132:	425b      	neglt	r3, r3
 8004134:	3b46      	subs	r3, #70	; 0x46
 8004136:	edd7 7a04 	vldr	s15, [r7, #16]
 800413a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413e:	ee17 2a90 	vmov	r2, s15
 8004142:	2a00      	cmp	r2, #0
 8004144:	bfb8      	it	lt
 8004146:	4252      	neglt	r2, r2
 8004148:	3a46      	subs	r2, #70	; 0x46
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004156:	edd7 7a05 	vldr	s15, [r7, #20]
 800415a:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800415e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8004162:	edd7 7a05 	vldr	s15, [r7, #20]
 8004166:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 800416a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800416e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004176:	edc7 7a02 	vstr	s15, [r7, #8]
			  float quad_rad = abs((y+100)-0.01*x*x);
 800417a:	edd7 7a05 	vldr	s15, [r7, #20]
 800417e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80042a8 <init_buffer+0x2c0>
 8004182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004186:	ee17 0a90 	vmov	r0, s15
 800418a:	f7fc fac7 	bl	800071c <__aeabi_f2d>
 800418e:	4604      	mov	r4, r0
 8004190:	460d      	mov	r5, r1
 8004192:	6938      	ldr	r0, [r7, #16]
 8004194:	f7fc fac2 	bl	800071c <__aeabi_f2d>
 8004198:	a33f      	add	r3, pc, #252	; (adr r3, 8004298 <init_buffer+0x2b0>)
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f7fc f82f 	bl	8000200 <__aeabi_dmul>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4690      	mov	r8, r2
 80041a8:	4699      	mov	r9, r3
 80041aa:	6938      	ldr	r0, [r7, #16]
 80041ac:	f7fc fab6 	bl	800071c <__aeabi_f2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4640      	mov	r0, r8
 80041b6:	4649      	mov	r1, r9
 80041b8:	f7fc f822 	bl	8000200 <__aeabi_dmul>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4620      	mov	r0, r4
 80041c2:	4629      	mov	r1, r5
 80041c4:	f7fc f94a 	bl	800045c <__aeabi_dsub>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	f7fc fafc 	bl	80007cc <__aeabi_d2iz>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bfb8      	it	lt
 80041da:	425b      	neglt	r3, r3
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e4:	edc7 7a01 	vstr	s15, [r7, #4]
			  if(rad_head > 150*150 && rad_head < 170*170) {
 80041e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80042ac <init_buffer+0x2c4>
 80041f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	dd13      	ble.n	8004222 <init_buffer+0x23a>
 80041fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80041fe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80042b0 <init_buffer+0x2c8>
 8004202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	d50a      	bpl.n	8004222 <init_buffer+0x23a>
				  true_buffer[i][j] = (uint8_t) 255;
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <init_buffer+0x2bc>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	4413      	add	r3, r2
 800421c:	22ff      	movs	r2, #255	; 0xff
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e056      	b.n	80042d0 <init_buffer+0x2e8>
			  } else if (rad_eyes < 20*20) {
 8004222:	edd7 7a02 	vldr	s15, [r7, #8]
 8004226:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80042b4 <init_buffer+0x2cc>
 800422a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800422e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004232:	d50a      	bpl.n	800424a <init_buffer+0x262>
				  true_buffer[i][j] = (uint8_t) 255;
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <init_buffer+0x2bc>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	4413      	add	r3, r2
 8004244:	22ff      	movs	r2, #255	; 0xff
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e042      	b.n	80042d0 <init_buffer+0x2e8>
			  } else if (quad_rad < 10 && y < -55) {
 800424a:	edd7 7a01 	vldr	s15, [r7, #4]
 800424e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425a:	d52f      	bpl.n	80042bc <init_buffer+0x2d4>
 800425c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004260:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80042b8 <init_buffer+0x2d0>
 8004264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	d526      	bpl.n	80042bc <init_buffer+0x2d4>
				  true_buffer[i][j] = (uint8_t) 255;
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <init_buffer+0x2bc>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	4413      	add	r3, r2
 800427e:	22ff      	movs	r2, #255	; 0xff
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e025      	b.n	80042d0 <init_buffer+0x2e8>
 8004284:	f3af 8000 	nop.w
 8004288:	505d0fa6 	.word	0x505d0fa6
 800428c:	4011f2df 	.word	0x4011f2df
 8004290:	00000000 	.word	0x00000000
 8004294:	4065e000 	.word	0x4065e000
 8004298:	47ae147b 	.word	0x47ae147b
 800429c:	3f847ae1 	.word	0x3f847ae1
 80042a0:	200001b0 	.word	0x200001b0
 80042a4:	20000160 	.word	0x20000160
 80042a8:	42c80000 	.word	0x42c80000
 80042ac:	46afc800 	.word	0x46afc800
 80042b0:	46e1c800 	.word	0x46e1c800
 80042b4:	43c80000 	.word	0x43c80000
 80042b8:	c25c0000 	.word	0xc25c0000
			  } else {
				  true_buffer[i][j] = (uint8_t) 0;
 80042bc:	4b32      	ldr	r3, [pc, #200]	; (8004388 <init_buffer+0x3a0>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	4413      	add	r3, r2
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
			  }
			  frame_buffer[i][j] = (uint8_t) (2.8*(i%44)+12*(j%10));
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	4a2e      	ldr	r2, [pc, #184]	; (800438c <init_buffer+0x3a4>)
 80042d4:	fb82 1203 	smull	r1, r2, r2, r3
 80042d8:	10d1      	asrs	r1, r2, #3
 80042da:	17da      	asrs	r2, r3, #31
 80042dc:	1a8a      	subs	r2, r1, r2
 80042de:	212c      	movs	r1, #44	; 0x2c
 80042e0:	fb01 f202 	mul.w	r2, r1, r2
 80042e4:	1a9a      	subs	r2, r3, r2
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7fc fa06 	bl	80006f8 <__aeabi_i2d>
 80042ec:	a324      	add	r3, pc, #144	; (adr r3, 8004380 <init_buffer+0x398>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f7fb ff85 	bl	8000200 <__aeabi_dmul>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4614      	mov	r4, r2
 80042fc:	461d      	mov	r5, r3
 80042fe:	6a39      	ldr	r1, [r7, #32]
 8004300:	4b23      	ldr	r3, [pc, #140]	; (8004390 <init_buffer+0x3a8>)
 8004302:	fb83 2301 	smull	r2, r3, r3, r1
 8004306:	109a      	asrs	r2, r3, #2
 8004308:	17cb      	asrs	r3, r1, #31
 800430a:	1ad2      	subs	r2, r2, r3
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	1aca      	subs	r2, r1, r3
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc f9ea 	bl	80006f8 <__aeabi_i2d>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4620      	mov	r0, r4
 800432a:	4629      	mov	r1, r5
 800432c:	f7fc f898 	bl	8000460 <__adddf3>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4610      	mov	r0, r2
 8004336:	4619      	mov	r1, r3
 8004338:	4b16      	ldr	r3, [pc, #88]	; (8004394 <init_buffer+0x3ac>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	18d4      	adds	r4, r2, r3
 8004348:	f7fc fa68 	bl	800081c <__aeabi_d2uiz>
 800434c:	4603      	mov	r3, r0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	7023      	strb	r3, [r4, #0]
	  for(int j = 0; j < horiz_size; j++) {
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	3301      	adds	r3, #1
 8004356:	623b      	str	r3, [r7, #32]
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	2b63      	cmp	r3, #99	; 0x63
 800435c:	f77f ae84 	ble.w	8004068 <init_buffer+0x80>
  for(int i = 0; i < vert_size; i++) {
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	3301      	adds	r3, #1
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800436c:	f77f ae5f 	ble.w	800402e <init_buffer+0x46>
		  }


	  }
  }
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3728      	adds	r7, #40	; 0x28
 8004376:	46bd      	mov	sp, r7
 8004378:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800437c:	f3af 8000 	nop.w
 8004380:	66666666 	.word	0x66666666
 8004384:	40066666 	.word	0x40066666
 8004388:	20000160 	.word	0x20000160
 800438c:	2e8ba2e9 	.word	0x2e8ba2e9
 8004390:	66666667 	.word	0x66666667
 8004394:	200001b0 	.word	0x200001b0

08004398 <swap_buffer>:



void swap_buffer() {
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
	// Swap pointers
	uint8_t** tmp = true_buffer;
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <swap_buffer+0x34>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	607b      	str	r3, [r7, #4]
	true_buffer = frame_buffer;
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <swap_buffer+0x38>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a08      	ldr	r2, [pc, #32]	; (80043cc <swap_buffer+0x34>)
 80043aa:	6013      	str	r3, [r2, #0]
	frame_buffer = tmp;
 80043ac:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <swap_buffer+0x38>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6013      	str	r3, [r2, #0]
	//clear_buffer();
	// Change DMA memory address
	hdac1.DMA_Handle1->Instance->CMAR = (uint32_t) true_buffer[0];
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <swap_buffer+0x34>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <swap_buffer+0x3c>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	20000160 	.word	0x20000160
 80043d0:	200001b0 	.word	0x200001b0
 80043d4:	200000ec 	.word	0x200000ec

080043d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043de:	f7fc fa8d 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043e2:	f000 f835 	bl	8004450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043e6:	f000 fa05 	bl	80047f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80043ea:	f000 f9d9 	bl	80047a0 <MX_DMA_Init>
  MX_DAC1_Init();
 80043ee:	f000 f881 	bl	80044f4 <MX_DAC1_Init>

  MX_TIM4_Init();
 80043f2:	f000 f987 	bl	8004704 <MX_TIM4_Init>
  MX_TIM2_Init();
 80043f6:	f000 f909 	bl	800460c <MX_TIM2_Init>
  MX_TIM1_Init();
 80043fa:	f000 f8af 	bl	800455c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Fill the frame buffer
  init_buffer();
 80043fe:	f7ff fdf3 	bl	8003fe8 <init_buffer>
  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 8004402:	480e      	ldr	r0, [pc, #56]	; (800443c <main+0x64>)
 8004404:	f7fe fb46 	bl	8002a94 <HAL_TIM_Base_Start_IT>
  //HAL_Delay(50);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 8004408:	210c      	movs	r1, #12
 800440a:	480d      	ldr	r0, [pc, #52]	; (8004440 <main+0x68>)
 800440c:	f7fe fc14 	bl	8002c38 <HAL_TIM_PWM_Start>
  //HAL_Delay(50);
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) true_buffer[0], horiz_size*vert_size, DAC_ALIGN_8B_R);
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <main+0x6c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	2308      	movs	r3, #8
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	f64a 7364 	movw	r3, #44900	; 0xaf64
 800441e:	2100      	movs	r1, #0
 8004420:	4809      	ldr	r0, [pc, #36]	; (8004448 <main+0x70>)
 8004422:	f7fc fc37 	bl	8000c94 <HAL_DAC_Start_DMA>
  //HAL_Delay(50);
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 8004426:	4809      	ldr	r0, [pc, #36]	; (800444c <main+0x74>)
 8004428:	f7fe facc 	bl	80029c4 <HAL_TIM_Base_Start>
  while (1){
//	print_str("Welcome", 0, 0);
//	print_str("To", 0, 60);
//	print_str("Tetris!", 0, 120);
//	print_str("-Yanis J.", 0, 180);
	swap_buffer();
 800442c:	f7ff ffb4 	bl	8004398 <swap_buffer>
	HAL_Delay(5000);
 8004430:	f241 3088 	movw	r0, #5000	; 0x1388
 8004434:	f7fc fad6 	bl	80009e4 <HAL_Delay>
	swap_buffer();
 8004438:	e7f8      	b.n	800442c <main+0x54>
 800443a:	bf00      	nop
 800443c:	20000164 	.word	0x20000164
 8004440:	200001b4 	.word	0x200001b4
 8004444:	20000160 	.word	0x20000160
 8004448:	200000ec 	.word	0x200000ec
 800444c:	200000a0 	.word	0x200000a0

08004450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b096      	sub	sp, #88	; 0x58
 8004454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	2244      	movs	r2, #68	; 0x44
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fc2e 	bl	8004cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004464:	463b      	mov	r3, r7
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004472:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004476:	f7fd fafd 	bl	8001a74 <HAL_PWREx_ControlVoltageScaling>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004480:	f000 fa26 	bl	80048d0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004484:	2310      	movs	r3, #16
 8004486:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004488:	2301      	movs	r3, #1
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004490:	2360      	movs	r3, #96	; 0x60
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004494:	2302      	movs	r3, #2
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004498:	2301      	movs	r3, #1
 800449a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800449c:	2301      	movs	r3, #1
 800449e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80044a0:	2328      	movs	r3, #40	; 0x28
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044a4:	2302      	movs	r3, #2
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80044a8:	2302      	movs	r3, #2
 80044aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80044ac:	2302      	movs	r3, #2
 80044ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044b0:	f107 0314 	add.w	r3, r7, #20
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd fb81 	bl	8001bbc <HAL_RCC_OscConfig>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80044c0:	f000 fa06 	bl	80048d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044c4:	230f      	movs	r3, #15
 80044c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044c8:	2303      	movs	r3, #3
 80044ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80044d8:	463b      	mov	r3, r7
 80044da:	2103      	movs	r1, #3
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd ff93 	bl	8002408 <HAL_RCC_ClockConfig>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80044e8:	f000 f9f2 	bl	80048d0 <Error_Handler>
  }
}
 80044ec:	bf00      	nop
 80044ee:	3758      	adds	r7, #88	; 0x58
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80044fa:	463b      	mov	r3, r7
 80044fc:	2228      	movs	r2, #40	; 0x28
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fbdd 	bl	8004cc0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <MX_DAC1_Init+0x60>)
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <MX_DAC1_Init+0x64>)
 800450a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800450c:	4811      	ldr	r0, [pc, #68]	; (8004554 <MX_DAC1_Init+0x60>)
 800450e:	f7fc fb9e 	bl	8000c4e <HAL_DAC_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004518:	f000 f9da 	bl	80048d0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800451c:	2300      	movs	r3, #0
 800451e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8004520:	230e      	movs	r3, #14
 8004522:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004534:	463b      	mov	r3, r7
 8004536:	2200      	movs	r2, #0
 8004538:	4619      	mov	r1, r3
 800453a:	4806      	ldr	r0, [pc, #24]	; (8004554 <MX_DAC1_Init+0x60>)
 800453c:	f7fc fc94 	bl	8000e68 <HAL_DAC_ConfigChannel>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8004546:	f000 f9c3 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 800454a:	bf00      	nop
 800454c:	3728      	adds	r7, #40	; 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200000ec 	.word	0x200000ec
 8004558:	40007400 	.word	0x40007400

0800455c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004562:	f107 030c 	add.w	r3, r7, #12
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004572:	463b      	mov	r3, r7
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800457c:	4b21      	ldr	r3, [pc, #132]	; (8004604 <MX_TIM1_Init+0xa8>)
 800457e:	4a22      	ldr	r2, [pc, #136]	; (8004608 <MX_TIM1_Init+0xac>)
 8004580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <MX_TIM1_Init+0xa8>)
 8004584:	2200      	movs	r2, #0
 8004586:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <MX_TIM1_Init+0xa8>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800458e:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <MX_TIM1_Init+0xa8>)
 8004590:	2263      	movs	r2, #99	; 0x63
 8004592:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <MX_TIM1_Init+0xa8>)
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800459a:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <MX_TIM1_Init+0xa8>)
 800459c:	2200      	movs	r2, #0
 800459e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a0:	4b18      	ldr	r3, [pc, #96]	; (8004604 <MX_TIM1_Init+0xa8>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80045a6:	4817      	ldr	r0, [pc, #92]	; (8004604 <MX_TIM1_Init+0xa8>)
 80045a8:	f7fe f9b4 	bl	8002914 <HAL_TIM_Base_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80045b2:	f000 f98d 	bl	80048d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80045b6:	2306      	movs	r3, #6
 80045b8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80045ba:	2330      	movs	r3, #48	; 0x30
 80045bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80045be:	f107 030c 	add.w	r3, r7, #12
 80045c2:	4619      	mov	r1, r3
 80045c4:	480f      	ldr	r0, [pc, #60]	; (8004604 <MX_TIM1_Init+0xa8>)
 80045c6:	f7fe ff3a 	bl	800343e <HAL_TIM_SlaveConfigSynchro>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80045d0:	f000 f97e 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80045d4:	2320      	movs	r3, #32
 80045d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80045d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045e2:	463b      	mov	r3, r7
 80045e4:	4619      	mov	r1, r3
 80045e6:	4807      	ldr	r0, [pc, #28]	; (8004604 <MX_TIM1_Init+0xa8>)
 80045e8:	f7ff fc56 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80045f2:	f000 f96d 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 80045f6:	4b04      	ldr	r3, [pc, #16]	; (8004608 <MX_TIM1_Init+0xac>)
 80045f8:	2237      	movs	r2, #55	; 0x37
 80045fa:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM1_Init 2 */

}
 80045fc:	bf00      	nop
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000164 	.word	0x20000164
 8004608:	40012c00 	.word	0x40012c00

0800460c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b090      	sub	sp, #64	; 0x40
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004622:	f107 0320 	add.w	r3, r7, #32
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
 800463c:	615a      	str	r2, [r3, #20]
 800463e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004640:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <MX_TIM2_Init+0xf4>)
 8004642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004646:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004648:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <MX_TIM2_Init+0xf4>)
 800464a:	2200      	movs	r2, #0
 800464c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <MX_TIM2_Init+0xf4>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <MX_TIM2_Init+0xf4>)
 8004656:	2263      	movs	r2, #99	; 0x63
 8004658:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800465a:	4b29      	ldr	r3, [pc, #164]	; (8004700 <MX_TIM2_Init+0xf4>)
 800465c:	2200      	movs	r2, #0
 800465e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <MX_TIM2_Init+0xf4>)
 8004662:	2200      	movs	r2, #0
 8004664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004666:	4826      	ldr	r0, [pc, #152]	; (8004700 <MX_TIM2_Init+0xf4>)
 8004668:	f7fe f954 	bl	8002914 <HAL_TIM_Base_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004672:	f000 f92d 	bl	80048d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004676:	4822      	ldr	r0, [pc, #136]	; (8004700 <MX_TIM2_Init+0xf4>)
 8004678:	f7fe fa7c 	bl	8002b74 <HAL_TIM_PWM_Init>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004682:	f000 f925 	bl	80048d0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004686:	2306      	movs	r3, #6
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800468a:	2330      	movs	r3, #48	; 0x30
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800468e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004692:	4619      	mov	r1, r3
 8004694:	481a      	ldr	r0, [pc, #104]	; (8004700 <MX_TIM2_Init+0xf4>)
 8004696:	f7fe fed2 	bl	800343e <HAL_TIM_SlaveConfigSynchro>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80046a0:	f000 f916 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80046a4:	2320      	movs	r3, #32
 80046a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046ac:	f107 0320 	add.w	r3, r7, #32
 80046b0:	4619      	mov	r1, r3
 80046b2:	4813      	ldr	r0, [pc, #76]	; (8004700 <MX_TIM2_Init+0xf4>)
 80046b4:	f7ff fbf0 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80046be:	f000 f907 	bl	80048d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046c2:	2360      	movs	r3, #96	; 0x60
 80046c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 80046c6:	235a      	movs	r3, #90	; 0x5a
 80046c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	220c      	movs	r2, #12
 80046d6:	4619      	mov	r1, r3
 80046d8:	4809      	ldr	r0, [pc, #36]	; (8004700 <MX_TIM2_Init+0xf4>)
 80046da:	f7fe fcd3 	bl	8003084 <HAL_TIM_PWM_ConfigChannel>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80046e4:	f000 f8f4 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 80046e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046ec:	2237      	movs	r2, #55	; 0x37
 80046ee:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80046f0:	4803      	ldr	r0, [pc, #12]	; (8004700 <MX_TIM2_Init+0xf4>)
 80046f2:	f000 f9cf 	bl	8004a94 <HAL_TIM_MspPostInit>

}
 80046f6:	bf00      	nop
 80046f8:	3740      	adds	r7, #64	; 0x40
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	200001b4 	.word	0x200001b4

08004704 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800470a:	f107 0310 	add.w	r3, r7, #16
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004718:	1d3b      	adds	r3, r7, #4
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004722:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <MX_TIM4_Init+0x94>)
 8004724:	4a1d      	ldr	r2, [pc, #116]	; (800479c <MX_TIM4_Init+0x98>)
 8004726:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8004728:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <MX_TIM4_Init+0x94>)
 800472a:	2207      	movs	r2, #7
 800472c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800472e:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <MX_TIM4_Init+0x94>)
 8004730:	2200      	movs	r2, #0
 8004732:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <MX_TIM4_Init+0x94>)
 8004736:	2202      	movs	r2, #2
 8004738:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800473a:	4b17      	ldr	r3, [pc, #92]	; (8004798 <MX_TIM4_Init+0x94>)
 800473c:	2200      	movs	r2, #0
 800473e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004740:	4b15      	ldr	r3, [pc, #84]	; (8004798 <MX_TIM4_Init+0x94>)
 8004742:	2200      	movs	r2, #0
 8004744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004746:	4814      	ldr	r0, [pc, #80]	; (8004798 <MX_TIM4_Init+0x94>)
 8004748:	f7fe f8e4 	bl	8002914 <HAL_TIM_Base_Init>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004752:	f000 f8bd 	bl	80048d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	4619      	mov	r1, r3
 8004762:	480d      	ldr	r0, [pc, #52]	; (8004798 <MX_TIM4_Init+0x94>)
 8004764:	f7fe fda2 	bl	80032ac <HAL_TIM_ConfigClockSource>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800476e:	f000 f8af 	bl	80048d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004772:	2320      	movs	r3, #32
 8004774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4806      	ldr	r0, [pc, #24]	; (8004798 <MX_TIM4_Init+0x94>)
 8004780:	f7ff fb8a 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800478a:	f000 f8a1 	bl	80048d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800478e:	bf00      	nop
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	200000a0 	.word	0x200000a0
 800479c:	40000800 	.word	0x40000800

080047a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <MX_DMA_Init+0x50>)
 80047a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047aa:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <MX_DMA_Init+0x50>)
 80047ac:	f043 0304 	orr.w	r3, r3, #4
 80047b0:	6493      	str	r3, [r2, #72]	; 0x48
 80047b2:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <MX_DMA_Init+0x50>)
 80047b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <MX_DMA_Init+0x50>)
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <MX_DMA_Init+0x50>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6493      	str	r3, [r2, #72]	; 0x48
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <MX_DMA_Init+0x50>)
 80047cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2100      	movs	r1, #0
 80047da:	200b      	movs	r0, #11
 80047dc:	f7fc fa01 	bl	8000be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80047e0:	200b      	movs	r0, #11
 80047e2:	f7fc fa1a 	bl	8000c1a <HAL_NVIC_EnableIRQ>

}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000

080047f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fa:	f107 030c 	add.w	r3, r7, #12
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800480a:	4b17      	ldr	r3, [pc, #92]	; (8004868 <MX_GPIO_Init+0x74>)
 800480c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480e:	4a16      	ldr	r2, [pc, #88]	; (8004868 <MX_GPIO_Init+0x74>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <MX_GPIO_Init+0x74>)
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004822:	4b11      	ldr	r3, [pc, #68]	; (8004868 <MX_GPIO_Init+0x74>)
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	4a10      	ldr	r2, [pc, #64]	; (8004868 <MX_GPIO_Init+0x74>)
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800482e:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <MX_GPIO_Init+0x74>)
 8004830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	607b      	str	r3, [r7, #4]
 8004838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800483a:	2200      	movs	r2, #0
 800483c:	2104      	movs	r1, #4
 800483e:	480b      	ldr	r0, [pc, #44]	; (800486c <MX_GPIO_Init+0x78>)
 8004840:	f7fd f8e0 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 8004844:	2304      	movs	r3, #4
 8004846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004848:	2301      	movs	r3, #1
 800484a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 8004854:	f107 030c 	add.w	r3, r7, #12
 8004858:	4619      	mov	r1, r3
 800485a:	4804      	ldr	r0, [pc, #16]	; (800486c <MX_GPIO_Init+0x78>)
 800485c:	f7fc ff40 	bl	80016e0 <HAL_GPIO_Init>

}
 8004860:	bf00      	nop
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	48000400 	.word	0x48000400

08004870 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
//	if (htim->Instance == TIM1) {
		vert_count = (vert_count + 1) % 449;
 8004878:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	1c59      	adds	r1, r3, #1
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004880:	fb83 2301 	smull	r2, r3, r3, r1
 8004884:	440b      	add	r3, r1
 8004886:	121a      	asrs	r2, r3, #8
 8004888:	17cb      	asrs	r3, r1, #31
 800488a:	1ad2      	subs	r2, r2, r3
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	019b      	lsls	r3, r3, #6
 8004894:	4413      	add	r3, r2
 8004896:	1aca      	subs	r2, r1, r3
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800489a:	601a      	str	r2, [r3, #0]
		if(vert_count >= 447) {
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 80048a4:	dd05      	ble.n	80048b2 <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 80048a6:	2200      	movs	r2, #0
 80048a8:	2104      	movs	r1, #4
 80048aa:	4808      	ldr	r0, [pc, #32]	; (80048cc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80048ac:	f7fd f8aa 	bl	8001a04 <HAL_GPIO_WritePin>
		} else {
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
		}
//	}
}
 80048b0:	e004      	b.n	80048bc <HAL_TIM_PeriodElapsedCallback+0x4c>
			HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
 80048b2:	2201      	movs	r2, #1
 80048b4:	2104      	movs	r1, #4
 80048b6:	4805      	ldr	r0, [pc, #20]	; (80048cc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80048b8:	f7fd f8a4 	bl	8001a04 <HAL_GPIO_WritePin>
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	2000008c 	.word	0x2000008c
 80048c8:	91f5bcb9 	.word	0x91f5bcb9
 80048cc:	48000400 	.word	0x48000400

080048d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048d4:	b672      	cpsid	i
}
 80048d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048d8:	e7fe      	b.n	80048d8 <Error_Handler+0x8>
	...

080048dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <HAL_MspInit+0x44>)
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <HAL_MspInit+0x44>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6613      	str	r3, [r2, #96]	; 0x60
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <HAL_MspInit+0x44>)
 80048f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_MspInit+0x44>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <HAL_MspInit+0x44>)
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_MspInit+0x44>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000

08004924 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2a      	ldr	r2, [pc, #168]	; (80049ec <HAL_DAC_MspInit+0xc8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d14d      	bne.n	80049e2 <HAL_DAC_MspInit+0xbe>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004946:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <HAL_DAC_MspInit+0xcc>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	4a29      	ldr	r2, [pc, #164]	; (80049f0 <HAL_DAC_MspInit+0xcc>)
 800494c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004950:	6593      	str	r3, [r2, #88]	; 0x58
 8004952:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <HAL_DAC_MspInit+0xcc>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800495e:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <HAL_DAC_MspInit+0xcc>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <HAL_DAC_MspInit+0xcc>)
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800496a:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <HAL_DAC_MspInit+0xcc>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004976:	2310      	movs	r3, #16
 8004978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800497a:	2303      	movs	r3, #3
 800497c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004982:	f107 0314 	add.w	r3, r7, #20
 8004986:	4619      	mov	r1, r3
 8004988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800498c:	f7fc fea8 	bl	80016e0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8004990:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 8004992:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <HAL_DAC_MspInit+0xd4>)
 8004994:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8004996:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 8004998:	2206      	movs	r2, #6
 800499a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800499c:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 800499e:	2210      	movs	r2, #16
 80049a0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a2:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049aa:	2280      	movs	r2, #128	; 0x80
 80049ac:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049bc:	2220      	movs	r2, #32
 80049be:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80049c6:	480b      	ldr	r0, [pc, #44]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049c8:	f7fc fc18 	bl	80011fc <HAL_DMA_Init>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80049d2:	f7ff ff7d 	bl	80048d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a06      	ldr	r2, [pc, #24]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	4a05      	ldr	r2, [pc, #20]	; (80049f4 <HAL_DAC_MspInit+0xd0>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80049e2:	bf00      	nop
 80049e4:	3728      	adds	r7, #40	; 0x28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40007400 	.word	0x40007400
 80049f0:	40021000 	.word	0x40021000
 80049f4:	20000100 	.word	0x20000100
 80049f8:	40020008 	.word	0x40020008

080049fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <HAL_TIM_Base_MspInit+0x8c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d114      	bne.n	8004a38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a0e:	4b1f      	ldr	r3, [pc, #124]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a18:	6613      	str	r3, [r2, #96]	; 0x60
 8004a1a:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004a26:	2200      	movs	r2, #0
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2019      	movs	r0, #25
 8004a2c:	f7fc f8d9 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004a30:	2019      	movs	r0, #25
 8004a32:	f7fc f8f2 	bl	8000c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004a36:	e022      	b.n	8004a7e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a40:	d10c      	bne.n	8004a5c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a46:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]
}
 8004a5a:	e010      	b.n	8004a7e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0b      	ldr	r2, [pc, #44]	; (8004a90 <HAL_TIM_Base_MspInit+0x94>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10b      	bne.n	8004a7e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	6593      	str	r3, [r2, #88]	; 0x58
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_TIM_Base_MspInit+0x90>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40000800 	.word	0x40000800

08004a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	609a      	str	r2, [r3, #8]
 8004aa8:	60da      	str	r2, [r3, #12]
 8004aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab4:	d11c      	bne.n	8004af0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <HAL_TIM_MspPostInit+0x64>)
 8004ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aba:	4a0f      	ldr	r2, [pc, #60]	; (8004af8 <HAL_TIM_MspPostInit+0x64>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <HAL_TIM_MspPostInit+0x64>)
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 8004ace:	2308      	movs	r3, #8
 8004ad0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 8004ae2:	f107 030c 	add.w	r3, r7, #12
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aec:	f7fc fdf8 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000

08004afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b00:	e7fe      	b.n	8004b00 <NMI_Handler+0x4>

08004b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b06:	e7fe      	b.n	8004b06 <HardFault_Handler+0x4>

08004b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b0c:	e7fe      	b.n	8004b0c <MemManage_Handler+0x4>

08004b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b12:	e7fe      	b.n	8004b12 <BusFault_Handler+0x4>

08004b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b18:	e7fe      	b.n	8004b18 <UsageFault_Handler+0x4>

08004b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b2c:	bf00      	nop
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b36:	b480      	push	{r7}
 8004b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b3a:	bf00      	nop
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b48:	f7fb ff2c 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b4c:	bf00      	nop
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004b54:	4802      	ldr	r0, [pc, #8]	; (8004b60 <DMA1_Channel1_IRQHandler+0x10>)
 8004b56:	f7fc fc74 	bl	8001442 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000100 	.word	0x20000100

08004b64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b68:	4802      	ldr	r0, [pc, #8]	; (8004b74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004b6a:	f7fe f96b 	bl	8002e44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000164 	.word	0x20000164

08004b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <_sbrk+0x5c>)
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <_sbrk+0x60>)
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b8c:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <_sbrk+0x64>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b94:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <_sbrk+0x64>)
 8004b96:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <_sbrk+0x68>)
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b9a:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <_sbrk+0x64>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d207      	bcs.n	8004bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ba8:	f000 f858 	bl	8004c5c <__errno>
 8004bac:	4603      	mov	r3, r0
 8004bae:	220c      	movs	r2, #12
 8004bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	e009      	b.n	8004bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <_sbrk+0x64>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <_sbrk+0x64>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4a05      	ldr	r2, [pc, #20]	; (8004bdc <_sbrk+0x64>)
 8004bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	200a0000 	.word	0x200a0000
 8004bd8:	00000400 	.word	0x00000400
 8004bdc:	20000090 	.word	0x20000090
 8004be0:	20000210 	.word	0x20000210

08004be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <SystemInit+0x20>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <SystemInit+0x20>)
 8004bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004c0c:	f7ff ffea 	bl	8004be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c10:	480c      	ldr	r0, [pc, #48]	; (8004c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c12:	490d      	ldr	r1, [pc, #52]	; (8004c48 <LoopForever+0xa>)
 ldr r2, =_sidata
 8004c14:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <LoopForever+0xe>)
  movs r3, #0
 8004c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c18:	e002      	b.n	8004c20 <LoopCopyDataInit>

08004c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c1e:	3304      	adds	r3, #4

08004c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c24:	d3f9      	bcc.n	8004c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c28:	4c0a      	ldr	r4, [pc, #40]	; (8004c54 <LoopForever+0x16>)
  movs r3, #0
 8004c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c2c:	e001      	b.n	8004c32 <LoopFillZerobss>

08004c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c30:	3204      	adds	r2, #4

08004c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c34:	d3fb      	bcc.n	8004c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c36:	f000 f817 	bl	8004c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c3a:	f7ff fbcd 	bl	80043d8 <main>

08004c3e <LoopForever>:

LoopForever:
    b LoopForever
 8004c3e:	e7fe      	b.n	8004c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004c40:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c48:	20000070 	.word	0x20000070
 ldr r2, =_sidata
 8004c4c:	08004e20 	.word	0x08004e20
  ldr r2, =_sbss
 8004c50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004c54:	20000210 	.word	0x20000210

08004c58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c58:	e7fe      	b.n	8004c58 <ADC1_IRQHandler>
	...

08004c5c <__errno>:
 8004c5c:	4b01      	ldr	r3, [pc, #4]	; (8004c64 <__errno+0x8>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <__libc_init_array>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4d0d      	ldr	r5, [pc, #52]	; (8004ca0 <__libc_init_array+0x38>)
 8004c6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ca4 <__libc_init_array+0x3c>)
 8004c6e:	1b64      	subs	r4, r4, r5
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	2600      	movs	r6, #0
 8004c74:	42a6      	cmp	r6, r4
 8004c76:	d109      	bne.n	8004c8c <__libc_init_array+0x24>
 8004c78:	4d0b      	ldr	r5, [pc, #44]	; (8004ca8 <__libc_init_array+0x40>)
 8004c7a:	4c0c      	ldr	r4, [pc, #48]	; (8004cac <__libc_init_array+0x44>)
 8004c7c:	f000 f8a0 	bl	8004dc0 <_init>
 8004c80:	1b64      	subs	r4, r4, r5
 8004c82:	10a4      	asrs	r4, r4, #2
 8004c84:	2600      	movs	r6, #0
 8004c86:	42a6      	cmp	r6, r4
 8004c88:	d105      	bne.n	8004c96 <__libc_init_array+0x2e>
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c90:	4798      	blx	r3
 8004c92:	3601      	adds	r6, #1
 8004c94:	e7ee      	b.n	8004c74 <__libc_init_array+0xc>
 8004c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9a:	4798      	blx	r3
 8004c9c:	3601      	adds	r6, #1
 8004c9e:	e7f2      	b.n	8004c86 <__libc_init_array+0x1e>
 8004ca0:	08004e18 	.word	0x08004e18
 8004ca4:	08004e18 	.word	0x08004e18
 8004ca8:	08004e18 	.word	0x08004e18
 8004cac:	08004e1c 	.word	0x08004e1c

08004cb0 <malloc>:
 8004cb0:	4b02      	ldr	r3, [pc, #8]	; (8004cbc <malloc+0xc>)
 8004cb2:	4601      	mov	r1, r0
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	f000 b80b 	b.w	8004cd0 <_malloc_r>
 8004cba:	bf00      	nop
 8004cbc:	2000000c 	.word	0x2000000c

08004cc0 <memset>:
 8004cc0:	4402      	add	r2, r0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d100      	bne.n	8004cca <memset+0xa>
 8004cc8:	4770      	bx	lr
 8004cca:	f803 1b01 	strb.w	r1, [r3], #1
 8004cce:	e7f9      	b.n	8004cc4 <memset+0x4>

08004cd0 <_malloc_r>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	1ccd      	adds	r5, r1, #3
 8004cd4:	f025 0503 	bic.w	r5, r5, #3
 8004cd8:	3508      	adds	r5, #8
 8004cda:	2d0c      	cmp	r5, #12
 8004cdc:	bf38      	it	cc
 8004cde:	250c      	movcc	r5, #12
 8004ce0:	2d00      	cmp	r5, #0
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	db01      	blt.n	8004cea <_malloc_r+0x1a>
 8004ce6:	42a9      	cmp	r1, r5
 8004ce8:	d903      	bls.n	8004cf2 <_malloc_r+0x22>
 8004cea:	230c      	movs	r3, #12
 8004cec:	6033      	str	r3, [r6, #0]
 8004cee:	2000      	movs	r0, #0
 8004cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf2:	f000 f857 	bl	8004da4 <__malloc_lock>
 8004cf6:	4921      	ldr	r1, [pc, #132]	; (8004d7c <_malloc_r+0xac>)
 8004cf8:	680a      	ldr	r2, [r1, #0]
 8004cfa:	4614      	mov	r4, r2
 8004cfc:	b99c      	cbnz	r4, 8004d26 <_malloc_r+0x56>
 8004cfe:	4f20      	ldr	r7, [pc, #128]	; (8004d80 <_malloc_r+0xb0>)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	b923      	cbnz	r3, 8004d0e <_malloc_r+0x3e>
 8004d04:	4621      	mov	r1, r4
 8004d06:	4630      	mov	r0, r6
 8004d08:	f000 f83c 	bl	8004d84 <_sbrk_r>
 8004d0c:	6038      	str	r0, [r7, #0]
 8004d0e:	4629      	mov	r1, r5
 8004d10:	4630      	mov	r0, r6
 8004d12:	f000 f837 	bl	8004d84 <_sbrk_r>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d123      	bne.n	8004d62 <_malloc_r+0x92>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	6033      	str	r3, [r6, #0]
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f000 f846 	bl	8004db0 <__malloc_unlock>
 8004d24:	e7e3      	b.n	8004cee <_malloc_r+0x1e>
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	1b5b      	subs	r3, r3, r5
 8004d2a:	d417      	bmi.n	8004d5c <_malloc_r+0x8c>
 8004d2c:	2b0b      	cmp	r3, #11
 8004d2e:	d903      	bls.n	8004d38 <_malloc_r+0x68>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	441c      	add	r4, r3
 8004d34:	6025      	str	r5, [r4, #0]
 8004d36:	e004      	b.n	8004d42 <_malloc_r+0x72>
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	42a2      	cmp	r2, r4
 8004d3c:	bf0c      	ite	eq
 8004d3e:	600b      	streq	r3, [r1, #0]
 8004d40:	6053      	strne	r3, [r2, #4]
 8004d42:	4630      	mov	r0, r6
 8004d44:	f000 f834 	bl	8004db0 <__malloc_unlock>
 8004d48:	f104 000b 	add.w	r0, r4, #11
 8004d4c:	1d23      	adds	r3, r4, #4
 8004d4e:	f020 0007 	bic.w	r0, r0, #7
 8004d52:	1ac2      	subs	r2, r0, r3
 8004d54:	d0cc      	beq.n	8004cf0 <_malloc_r+0x20>
 8004d56:	1a1b      	subs	r3, r3, r0
 8004d58:	50a3      	str	r3, [r4, r2]
 8004d5a:	e7c9      	b.n	8004cf0 <_malloc_r+0x20>
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	6864      	ldr	r4, [r4, #4]
 8004d60:	e7cc      	b.n	8004cfc <_malloc_r+0x2c>
 8004d62:	1cc4      	adds	r4, r0, #3
 8004d64:	f024 0403 	bic.w	r4, r4, #3
 8004d68:	42a0      	cmp	r0, r4
 8004d6a:	d0e3      	beq.n	8004d34 <_malloc_r+0x64>
 8004d6c:	1a21      	subs	r1, r4, r0
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f000 f808 	bl	8004d84 <_sbrk_r>
 8004d74:	3001      	adds	r0, #1
 8004d76:	d1dd      	bne.n	8004d34 <_malloc_r+0x64>
 8004d78:	e7cf      	b.n	8004d1a <_malloc_r+0x4a>
 8004d7a:	bf00      	nop
 8004d7c:	20000094 	.word	0x20000094
 8004d80:	20000098 	.word	0x20000098

08004d84 <_sbrk_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4d06      	ldr	r5, [pc, #24]	; (8004da0 <_sbrk_r+0x1c>)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	602b      	str	r3, [r5, #0]
 8004d90:	f7ff fef2 	bl	8004b78 <_sbrk>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_sbrk_r+0x1a>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_sbrk_r+0x1a>
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	20000200 	.word	0x20000200

08004da4 <__malloc_lock>:
 8004da4:	4801      	ldr	r0, [pc, #4]	; (8004dac <__malloc_lock+0x8>)
 8004da6:	f000 b809 	b.w	8004dbc <__retarget_lock_acquire_recursive>
 8004daa:	bf00      	nop
 8004dac:	20000208 	.word	0x20000208

08004db0 <__malloc_unlock>:
 8004db0:	4801      	ldr	r0, [pc, #4]	; (8004db8 <__malloc_unlock+0x8>)
 8004db2:	f000 b804 	b.w	8004dbe <__retarget_lock_release_recursive>
 8004db6:	bf00      	nop
 8004db8:	20000208 	.word	0x20000208

08004dbc <__retarget_lock_acquire_recursive>:
 8004dbc:	4770      	bx	lr

08004dbe <__retarget_lock_release_recursive>:
 8004dbe:	4770      	bx	lr

08004dc0 <_init>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr

08004dcc <_fini>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr
