
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2bc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00032408  0800d480  0800d480  0001d480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803f888  0803f888  00050660  2**0
                  CONTENTS
  4 .ARM          00000008  0803f888  0803f888  0004f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803f890  0803f890  00050660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803f890  0803f890  0004f890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803f894  0803f894  0004f894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000660  20000000  0803f898  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017c98  20000660  0803fef8  00050660  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200182f8  0803fef8  000582f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050660  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ce2c  00000000  00000000  00050690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e13  00000000  00000000  0007d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  000822d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  00083ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f5c0  00000000  00000000  000858a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002092e  00000000  00000000  000b4e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ba70  00000000  00000000  000d578e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001f11fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ca8  00000000  00000000  001f12c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001f8f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000660 	.word	0x20000660
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d464 	.word	0x0800d464

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000664 	.word	0x20000664
 80001fc:	0800d464 	.word	0x0800d464

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f901 	bl	8001172 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f70:	2006      	movs	r0, #6
 8000f72:	f00a fe2f 	bl	800bbd4 <HAL_InitTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e001      	b.n	8000f86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f82:	f00a fc3d 	bl	800b800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	20002020 	.word	0x20002020

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20002020 	.word	0x20002020

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000004 	.word	0x20000004

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff4c 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119a:	f7ff ff61 	bl	8001060 <__NVIC_GetPriorityGrouping>
 800119e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff ffb1 	bl	800110c <NVIC_EncodePriority>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff80 	bl	80010b8 <__NVIC_SetPriority>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff54 	bl	800107c <__NVIC_EnableIRQ>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e014      	b.n	8001218 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f00a fb26 	bl	800b850 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	795b      	ldrb	r3, [r3, #5]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_DAC_Start+0x16>
 8001232:	2302      	movs	r3, #2
 8001234:	e040      	b.n	80012b8 <HAL_DAC_Start+0x98>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2202      	movs	r2, #2
 8001240:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2201      	movs	r2, #1
 8001250:	409a      	lsls	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10f      	bne.n	8001280 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800126a:	2b02      	cmp	r3, #2
 800126c:	d11d      	bne.n	80012aa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	e014      	b.n	80012aa <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2102      	movs	r1, #2
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	429a      	cmp	r2, r3
 8001298:	d107      	bne.n	80012aa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0202 	orr.w	r2, r2, #2
 80012a8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	795b      	ldrb	r3, [r3, #5]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_DAC_Start_DMA+0x1e>
 80012de:	2302      	movs	r3, #2
 80012e0:	e0ab      	b.n	800143a <HAL_DAC_Start_DMA+0x176>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2202      	movs	r2, #2
 80012ec:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d12f      	bne.n	8001354 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_DAC_Start_DMA+0x180>)
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_DAC_Start_DMA+0x184>)
 8001302:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_DAC_Start_DMA+0x188>)
 800130a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800131a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	2b08      	cmp	r3, #8
 8001320:	d013      	beq.n	800134a <HAL_DAC_Start_DMA+0x86>
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d845      	bhi.n	80013b4 <HAL_DAC_Start_DMA+0xf0>
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_DAC_Start_DMA+0x72>
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	2b04      	cmp	r3, #4
 8001332:	d005      	beq.n	8001340 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001334:	e03e      	b.n	80013b4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3308      	adds	r3, #8
 800133c:	613b      	str	r3, [r7, #16]
        break;
 800133e:	e03c      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	330c      	adds	r3, #12
 8001346:	613b      	str	r3, [r7, #16]
        break;
 8001348:	e037      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3310      	adds	r3, #16
 8001350:	613b      	str	r3, [r7, #16]
        break;
 8001352:	e032      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a3d      	ldr	r2, [pc, #244]	; (8001450 <HAL_DAC_Start_DMA+0x18c>)
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4a3c      	ldr	r2, [pc, #240]	; (8001454 <HAL_DAC_Start_DMA+0x190>)
 8001362:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <HAL_DAC_Start_DMA+0x194>)
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b08      	cmp	r3, #8
 8001380:	d013      	beq.n	80013aa <HAL_DAC_Start_DMA+0xe6>
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d817      	bhi.n	80013b8 <HAL_DAC_Start_DMA+0xf4>
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_DAC_Start_DMA+0xd2>
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d005      	beq.n	80013a0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001394:	e010      	b.n	80013b8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3314      	adds	r3, #20
 800139c:	613b      	str	r3, [r7, #16]
        break;
 800139e:	e00c      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3318      	adds	r3, #24
 80013a6:	613b      	str	r3, [r7, #16]
        break;
 80013a8:	e007      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	331c      	adds	r3, #28
 80013b0:	613b      	str	r3, [r7, #16]
        break;
 80013b2:	e002      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        break;
 80013b4:	bf00      	nop
 80013b6:	e000      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        break;
 80013b8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d111      	bne.n	80013e4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6898      	ldr	r0, [r3, #8]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	f000 fb63 	bl	8001aa4 <HAL_DMA_Start_IT>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]
 80013e2:	e010      	b.n	8001406 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	68d8      	ldr	r0, [r3, #12]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	f000 fb51 	bl	8001aa4 <HAL_DMA_Start_IT>
 8001402:	4603      	mov	r3, r0
 8001404:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6819      	ldr	r1, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2201      	movs	r2, #1
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e005      	b.n	8001438 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f043 0204 	orr.w	r2, r3, #4
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800182d 	.word	0x0800182d
 8001448:	0800184f 	.word	0x0800184f
 800144c:	0800186b 	.word	0x0800186b
 8001450:	080018e9 	.word	0x080018e9
 8001454:	0800190b 	.word	0x0800190b
 8001458:	08001927 	.word	0x08001927

0800145c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800146e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001472:	d120      	bne.n	80014b6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001482:	d118      	bne.n	80014b6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	f043 0201 	orr.w	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014ae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f870 	bl	8001596 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c4:	d120      	bne.n	8001508 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014d4:	d118      	bne.n	8001508 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2204      	movs	r2, #4
 80014da:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f043 0202 	orr.w	r2, r3, #2
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001500:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f9e6 	bl	80018d4 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	3308      	adds	r3, #8
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e004      	b.n	8001544 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	3314      	adds	r3, #20
 8001542:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	461a      	mov	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_DAC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e12a      	b.n	800181e <HAL_DAC_ConfigChannel+0x272>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2202      	movs	r2, #2
 80015d2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d174      	bne.n	80016c6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80015dc:	f7ff fcec 	bl	8000fb8 <HAL_GetTick>
 80015e0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d134      	bne.n	8001652 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015e8:	e011      	b.n	800160e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015ea:	f7ff fce5 	bl	8000fb8 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d90a      	bls.n	800160e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f043 0208 	orr.w	r2, r3, #8
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2203      	movs	r2, #3
 8001608:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e107      	b.n	800181e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e6      	bne.n	80015ea <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fcd7 	bl	8000fd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	69d2      	ldr	r2, [r2, #28]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
 800162c:	e01e      	b.n	800166c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800162e:	f7ff fcc3 	bl	8000fb8 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d90a      	bls.n	8001652 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	f043 0208 	orr.w	r2, r3, #8
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2203      	movs	r2, #3
 800164c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0e5      	b.n	800181e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	dbe8      	blt.n	800162e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff fcb7 	bl	8000fd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	69d2      	ldr	r2, [r2, #28]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	ea02 0103 	and.w	r1, r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	6a1a      	ldr	r2, [r3, #32]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	409a      	lsls	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	21ff      	movs	r1, #255	; 0xff
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	ea02 0103 	and.w	r1, r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d11d      	bne.n	800170a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d4:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	221f      	movs	r2, #31
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001710:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2207      	movs	r2, #7
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	4013      	ands	r3, r2
 8001724:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	431a      	orrs	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	4313      	orrs	r3, r2
 8001748:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	4013      	ands	r3, r2
 800178c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ae:	d104      	bne.n	80017ba <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	e018      	b.n	80017ec <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e00f      	b.n	80017ec <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80017cc:	f001 fc3c 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 80017d0:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_DAC_ConfigChannel+0x27c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d904      	bls.n	80017e4 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e003      	b.n	80017ec <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017ea:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6819      	ldr	r1, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	22c0      	movs	r2, #192	; 0xc0
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	400a      	ands	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	04c4b400 	.word	0x04c4b400

0800182c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff fe8d 	bl	800155a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	711a      	strb	r2, [r3, #4]
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fe86 	bl	800156e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f043 0204 	orr.w	r2, r3, #4
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff fe7c 	bl	8001582 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	711a      	strb	r2, [r3, #4]
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7ff ffce 	bl	8001898 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	711a      	strb	r2, [r3, #4]
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff ffc7 	bl	80018ac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f043 0204 	orr.w	r2, r3, #4
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff ffbd 	bl	80018c0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	711a      	strb	r2, [r3, #4]
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e08d      	b.n	8001a82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_DMA_Init+0x138>)
 800196e:	429a      	cmp	r2, r3
 8001970:	d80f      	bhi.n	8001992 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <HAL_DMA_Init+0x13c>)
 800197a:	4413      	add	r3, r2
 800197c:	4a45      	ldr	r2, [pc, #276]	; (8001a94 <HAL_DMA_Init+0x140>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	009a      	lsls	r2, r3, #2
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a42      	ldr	r2, [pc, #264]	; (8001a98 <HAL_DMA_Init+0x144>)
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
 8001990:	e00e      	b.n	80019b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b40      	ldr	r3, [pc, #256]	; (8001a9c <HAL_DMA_Init+0x148>)
 800199a:	4413      	add	r3, r2
 800199c:	4a3d      	ldr	r2, [pc, #244]	; (8001a94 <HAL_DMA_Init+0x140>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a3c      	ldr	r2, [pc, #240]	; (8001aa0 <HAL_DMA_Init+0x14c>)
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa72 	bl	8001eec <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a10:	d102      	bne.n	8001a18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a2c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <HAL_DMA_Init+0x104>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d80c      	bhi.n	8001a58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fa92 	bl	8001f68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	e008      	b.n	8001a6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40020407 	.word	0x40020407
 8001a90:	bffdfff8 	.word	0xbffdfff8
 8001a94:	cccccccd 	.word	0xcccccccd
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	bffdfbf8 	.word	0xbffdfbf8
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_DMA_Start_IT+0x20>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e066      	b.n	8001b92 <HAL_DMA_Start_IT+0xee>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d155      	bne.n	8001b84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f9b6 	bl	8001e6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 020e 	orr.w	r2, r2, #14
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e00f      	b.n	8001b3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0204 	bic.w	r2, r2, #4
 8001b2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 020a 	orr.w	r2, r2, #10
 8001b3a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b58:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e005      	b.n	8001b90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d008      	beq.n	8001bc4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e040      	b.n	8001c46 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f003 021c 	and.w	r2, r3, #28
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c32:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d005      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e047      	b.n	8001d06 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 020e 	bic.w	r2, r2, #14
 8001c84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f003 021c 	and.w	r2, r3, #28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00c      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ce4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
    }
  }
  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f003 031c 	and.w	r3, r3, #28
 8001d30:	2204      	movs	r2, #4
 8001d32:	409a      	lsls	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d026      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x7a>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d021      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d107      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0204 	bic.w	r2, r2, #4
 8001d62:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f003 021c 	and.w	r2, r3, #28
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2104      	movs	r1, #4
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d071      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	e06c      	b.n	8001e64 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f003 031c 	and.w	r3, r3, #28
 8001d92:	2202      	movs	r2, #2
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d02e      	beq.n	8001dfc <HAL_DMA_IRQHandler+0xec>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d029      	beq.n	8001dfc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10b      	bne.n	8001dce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 020a 	bic.w	r2, r2, #10
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f003 021c 	and.w	r2, r3, #28
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2102      	movs	r1, #2
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d038      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001dfa:	e033      	b.n	8001e64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	f003 031c 	and.w	r3, r3, #28
 8001e04:	2208      	movs	r2, #8
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d02a      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x156>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d025      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 020e 	bic.w	r2, r2, #14
 8001e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f003 021c 	and.w	r2, r3, #28
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
}
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e84:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e96:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f003 021c 	and.w	r2, r3, #28
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eaa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d108      	bne.n	8001ece <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ecc:	e007      	b.n	8001ede <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	60da      	str	r2, [r3, #12]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d80a      	bhi.n	8001f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f0c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6493      	str	r3, [r2, #72]	; 0x48
 8001f14:	e007      	b.n	8001f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	009a      	lsls	r2, r3, #2
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001f20:	4413      	add	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	3b08      	subs	r3, #8
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2201      	movs	r2, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40020407 	.word	0x40020407
 8001f5c:	4002081c 	.word	0x4002081c
 8001f60:	cccccccd 	.word	0xcccccccd
 8001f64:	40020880 	.word	0x40020880

08001f68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a08      	ldr	r2, [pc, #32]	; (8001fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2201      	movs	r2, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	1000823f 	.word	0x1000823f
 8001fac:	40020940 	.word	0x40020940

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e166      	b.n	800228e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8158 	beq.w	8002288 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80b2 	beq.w	8002288 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	4a60      	ldr	r2, [pc, #384]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6613      	str	r3, [r2, #96]	; 0x60
 8002130:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a5c      	ldr	r2, [pc, #368]	; (80022b0 <HAL_GPIO_Init+0x300>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002166:	d02b      	beq.n	80021c0 <HAL_GPIO_Init+0x210>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_GPIO_Init+0x304>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d025      	beq.n	80021bc <HAL_GPIO_Init+0x20c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <HAL_GPIO_Init+0x308>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01f      	beq.n	80021b8 <HAL_GPIO_Init+0x208>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a50      	ldr	r2, [pc, #320]	; (80022bc <HAL_GPIO_Init+0x30c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d019      	beq.n	80021b4 <HAL_GPIO_Init+0x204>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4f      	ldr	r2, [pc, #316]	; (80022c0 <HAL_GPIO_Init+0x310>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x200>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4e      	ldr	r2, [pc, #312]	; (80022c4 <HAL_GPIO_Init+0x314>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1fc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a4d      	ldr	r2, [pc, #308]	; (80022c8 <HAL_GPIO_Init+0x318>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1f8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_GPIO_Init+0x31c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1f4>
 80021a0:	2307      	movs	r3, #7
 80021a2:	e00e      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a4:	2308      	movs	r3, #8
 80021a6:	e00c      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a8:	2306      	movs	r3, #6
 80021aa:	e00a      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021ac:	2305      	movs	r3, #5
 80021ae:	e008      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b0:	2304      	movs	r3, #4
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e004      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021c0:	2300      	movs	r3, #0
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021d2:	4937      	ldr	r1, [pc, #220]	; (80022b0 <HAL_GPIO_Init+0x300>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_GPIO_Init+0x320>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x320>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800222e:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x320>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f ae91 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010000 	.word	0x40010000
 80022b4:	48000400 	.word	0x48000400
 80022b8:	48000800 	.word	0x48000800
 80022bc:	48000c00 	.word	0x48000c00
 80022c0:	48001000 	.word	0x48001000
 80022c4:	48001400 	.word	0x48001400
 80022c8:	48001800 	.word	0x48001800
 80022cc:	48001c00 	.word	0x48001c00
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_PWREx_GetVoltageRange+0x3c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d102      	bne.n	800231c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231a:	e00b      	b.n	8002334 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_PWREx_GetVoltageRange+0x3c>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232a:	d102      	bne.n	8002332 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800232c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002330:	e000      	b.n	8002334 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002332:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40007000 	.word	0x40007000

08002344 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d141      	bne.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002352:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235e:	d131      	bne.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002360:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002366:	4a46      	ldr	r2, [pc, #280]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800236c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002378:	4a41      	ldr	r2, [pc, #260]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002380:	4b40      	ldr	r3, [pc, #256]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2232      	movs	r2, #50	; 0x32
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002396:	e002      	b.n	800239e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3b01      	subs	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239e:	4b38      	ldr	r3, [pc, #224]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	d102      	bne.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f2      	bne.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	d158      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e057      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ca:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023d4:	e04d      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	d141      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023de:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d131      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002404:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2232      	movs	r2, #50	; 0x32
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	0c9b      	lsrs	r3, r3, #18
 800241e:	3301      	adds	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002422:	e002      	b.n	800242a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3b01      	subs	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d102      	bne.n	800243e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f2      	bne.n	8002424 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d112      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e011      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002460:	e007      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002470:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40007000 	.word	0x40007000
 8002484:	20000030 	.word	0x20000030
 8002488:	431bde83 	.word	0x431bde83

0800248c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f000 bc16 	b.w	8002ccc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a0:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024aa:	4b9e      	ldr	r3, [pc, #632]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80e4 	beq.w	800268a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4c>
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	f040 808b 	bne.w	80025e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 8087 	bne.w	80025e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d8:	4b92      	ldr	r3, [pc, #584]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x64>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e3ed      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	4b8b      	ldr	r3, [pc, #556]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_RCC_OscConfig+0x7e>
 8002500:	4b88      	ldr	r3, [pc, #544]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	e005      	b.n	8002516 <HAL_RCC_OscConfig+0x8a>
 800250a:	4b86      	ldr	r3, [pc, #536]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800250c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002516:	4293      	cmp	r3, r2
 8002518:	d223      	bcs.n	8002562 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fdfc 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e3ce      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800252e:	4b7d      	ldr	r3, [pc, #500]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7c      	ldr	r2, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4977      	ldr	r1, [pc, #476]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254c:	4b75      	ldr	r3, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	4972      	ldr	r1, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
 8002560:	e025      	b.n	80025ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002562:	4b70      	ldr	r3, [pc, #448]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6f      	ldr	r2, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002568:	f043 0308 	orr.w	r3, r3, #8
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	496a      	ldr	r1, [pc, #424]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	4965      	ldr	r1, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fdbc 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e38e      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ae:	f000 fcbf 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	495a      	ldr	r1, [pc, #360]	; (8002728 <HAL_RCC_OscConfig+0x29c>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x2a0>)
 80025cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x2a4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f009 fafe 	bl	800bbd4 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d052      	beq.n	8002688 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	e372      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d032      	beq.n	8002654 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ee:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fcdd 	bl	8000fb8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002602:	f7fe fcd9 	bl	8000fb8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e35b      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002614:	4b43      	ldr	r3, [pc, #268]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002620:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002626:	f043 0308 	orr.w	r3, r3, #8
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	493a      	ldr	r1, [pc, #232]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	4935      	ldr	r1, [pc, #212]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
 8002652:	e01a      	b.n	800268a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a32      	ldr	r2, [pc, #200]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002660:	f7fe fcaa 	bl	8000fb8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7fe fca6 	bl	8000fb8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e328      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800267a:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1dc>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d073      	beq.n	800277e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x21c>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d10e      	bne.n	80026c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d10b      	bne.n	80026c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d063      	beq.n	800277c <HAL_RCC_OscConfig+0x2f0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d15f      	bne.n	800277c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e305      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x24c>
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0x288>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x270>
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x288>
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a05      	ldr	r2, [pc, #20]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01b      	beq.n	8002754 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fc4c 	bl	8000fb8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002722:	e010      	b.n	8002746 <HAL_RCC_OscConfig+0x2ba>
 8002724:	40021000 	.word	0x40021000
 8002728:	0803ef94 	.word	0x0803ef94
 800272c:	20000030 	.word	0x20000030
 8002730:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fc40 	bl	8000fb8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e2c2      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	4baf      	ldr	r3, [pc, #700]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x2a8>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fc30 	bl	8000fb8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe fc2c 	bl	8000fb8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e2ae      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276e:	4ba5      	ldr	r3, [pc, #660]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x2d0>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d060      	beq.n	800284c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d005      	beq.n	800279c <HAL_RCC_OscConfig+0x310>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d119      	bne.n	80027ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d116      	bne.n	80027ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800279c:	4b99      	ldr	r3, [pc, #612]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_OscConfig+0x328>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e28b      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	4990      	ldr	r1, [pc, #576]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c8:	e040      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d023      	beq.n	800281a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d2:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a8b      	ldr	r2, [pc, #556]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fbeb 	bl	8000fb8 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe fbe7 	bl	8000fb8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e269      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f8:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	497c      	ldr	r1, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e018      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a79      	ldr	r2, [pc, #484]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fbc7 	bl	8000fb8 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fbc3 	bl	8000fb8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e245      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002840:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01c      	beq.n	800289a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	4a67      	ldr	r2, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fba2 	bl	8000fb8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe fb9e 	bl	8000fb8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e220      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800288a:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <HAL_RCC_OscConfig+0x3ec>
 8002898:	e01b      	b.n	80028d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289a:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800289c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fb85 	bl	8000fb8 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe fb81 	bl	8000fb8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e203      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ef      	bne.n	80028b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80a6 	beq.w	8002a2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028e4:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10d      	bne.n	800290c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	; 0x58
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290c:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d118      	bne.n	800294a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3a      	ldr	r2, [pc, #232]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002924:	f7fe fb48 	bl	8000fb8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe fb44 	bl	8000fb8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1c6      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293e:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_RCC_OscConfig+0x4d8>
 8002952:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002962:	e024      	b.n	80029ae <HAL_RCC_OscConfig+0x522>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d110      	bne.n	800298e <HAL_RCC_OscConfig+0x502>
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298c:	e00f      	b.n	80029ae <HAL_RCC_OscConfig+0x522>
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d016      	beq.n	80029e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe faff 	bl	8000fb8 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fafb 	bl	8000fb8 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e17b      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ed      	beq.n	80029be <HAL_RCC_OscConfig+0x532>
 80029e2:	e01a      	b.n	8002a1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fae8 	bl	8000fb8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fae4 	bl	8000fb8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d906      	bls.n	8002a0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e164      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0c:	4ba8      	ldr	r3, [pc, #672]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e8      	bne.n	80029ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4ba3      	ldr	r3, [pc, #652]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	4aa2      	ldr	r2, [pc, #648]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d03c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a40:	4b9b      	ldr	r3, [pc, #620]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a46:	4a9a      	ldr	r2, [pc, #616]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe fab2 	bl	8000fb8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a58:	f7fe faae 	bl	8000fb8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e130      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a6a:	4b91      	ldr	r3, [pc, #580]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCC_OscConfig+0x5cc>
 8002a78:	e01b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a7a:	4b8d      	ldr	r3, [pc, #564]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a80:	4a8b      	ldr	r2, [pc, #556]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fa95 	bl	8000fb8 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7fe fa91 	bl	8000fb8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e113      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa4:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ef      	bne.n	8002a92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8107 	beq.w	8002cca <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f040 80cb 	bne.w	8002c5c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d12c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d123      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d11b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d113      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d06d      	beq.n	8002c10 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d068      	beq.n	8002c0c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b46:	4b5a      	ldr	r3, [pc, #360]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0ba      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b62:	f7fe fa29 	bl	8000fb8 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fa25 	bl	8000fb8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0a7      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b88:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <HAL_RCC_OscConfig+0x828>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba2:	0212      	lsls	r2, r2, #8
 8002ba4:	4311      	orrs	r1, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002baa:	0852      	lsrs	r2, r2, #1
 8002bac:	3a01      	subs	r2, #1
 8002bae:	0552      	lsls	r2, r2, #21
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bb6:	0852      	lsrs	r2, r2, #1
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	0652      	lsls	r2, r2, #25
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc2:	06d2      	lsls	r2, r2, #27
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	493a      	ldr	r1, [pc, #232]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a37      	ldr	r2, [pc, #220]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be4:	f7fe f9e8 	bl	8000fb8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe f9e4 	bl	8000fb8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e066      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c0a:	e05e      	b.n	8002cca <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e05d      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d156      	bne.n	8002cca <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c34:	f7fe f9c0 	bl	8000fb8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe f9bc 	bl	8000fb8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e03e      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x7b0>
 8002c5a:	e036      	b.n	8002cca <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d031      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c80:	f023 0303 	bic.w	r3, r3, #3
 8002c84:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe f98f 	bl	8000fb8 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	e00c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe f98b 	bl	8000fb8 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d905      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e00d      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCC_OscConfig+0x848>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ec      	bne.n	8002c9e <HAL_RCC_OscConfig+0x812>
 8002cc4:	e001      	b.n	8002cca <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e10f      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b86      	ldr	r3, [pc, #536]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	4984      	ldr	r1, [pc, #528]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0f7      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8089 	beq.w	8002e40 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d133      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0e4      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d46:	f000 fa43 	bl	80031d0 <RCC_GetSysClockFreqFromPLLSource>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4a74      	ldr	r2, [pc, #464]	; (8002f20 <HAL_RCC_ClockConfig+0x248>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d955      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d5e:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d66:	4a6d      	ldr	r2, [pc, #436]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e044      	b.n	8002dfe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d03e      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x126>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d13a      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d88:	4b64      	ldr	r3, [pc, #400]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d90:	4a62      	ldr	r2, [pc, #392]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d96:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e02f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da6:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d115      	bne.n	8002dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0ac      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dbe:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0a0      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dce:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e098      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002dde:	f000 f8a7 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a4e      	ldr	r2, [pc, #312]	; (8002f20 <HAL_RCC_ClockConfig+0x248>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d909      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dea:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	4a4a      	ldr	r2, [pc, #296]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4944      	ldr	r1, [pc, #272]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fe f8d2 	bl	8000fb8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e18:	f7fe f8ce 	bl	8000fb8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e070      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 020c 	and.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1eb      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4930      	ldr	r1, [pc, #192]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e66:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e70:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d210      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 020f 	bic.w	r2, r3, #15
 8002e88:	4923      	ldr	r1, [pc, #140]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e036      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4918      	ldr	r1, [pc, #96]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4910      	ldr	r1, [pc, #64]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee0:	f000 f826 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <HAL_RCC_ClockConfig+0x24c>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x250>)
 8002efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x254>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f008 fe65 	bl	800bbd4 <HAL_InitTick>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	04c4b400 	.word	0x04c4b400
 8002f24:	0803ef94 	.word	0x0803ef94
 8002f28:	20000030 	.word	0x20000030
 8002f2c:	20000000 	.word	0x20000000

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f48:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d121      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d11e      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f80:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f8c:	4a2b      	ldr	r2, [pc, #172]	; (800303c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e004      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d134      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xac>
 8002fd4:	e005      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd8:	617b      	str	r3, [r7, #20]
      break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fde:	617b      	str	r3, [r7, #20]
      break;
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	617b      	str	r3, [r7, #20]
      break;
 8002fe6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	fb02 f203 	mul.w	r2, r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	0e5b      	lsrs	r3, r3, #25
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	3301      	adds	r3, #1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003028:	69bb      	ldr	r3, [r7, #24]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	0803efac 	.word	0x0803efac
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000030 	.word	0x20000030

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4904      	ldr	r1, [pc, #16]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	0803efa4 	.word	0x0803efa4

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003090:	f7ff ffda 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0adb      	lsrs	r3, r3, #11
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	0803efa4 	.word	0x0803efa4

080030b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	220f      	movs	r2, #15
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	08db      	lsrs	r3, r3, #3
 80030f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCC_GetClockConfig+0x60>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40022000 	.word	0x40022000

0800311c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f8e6 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
 800313a:	e014      	b.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f8d6 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316c:	d10b      	bne.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d913      	bls.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2ba0      	cmp	r3, #160	; 0xa0
 8003178:	d902      	bls.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800317a:	2302      	movs	r3, #2
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e00d      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003180:	2301      	movs	r3, #1
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e00a      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b7f      	cmp	r3, #127	; 0x7f
 800318a:	d902      	bls.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800318c:	2302      	movs	r3, #2
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e004      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d101      	bne.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003198:	2301      	movs	r3, #1
 800319a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 020f 	bic.w	r2, r3, #15
 80031a4:	4909      	ldr	r1, [pc, #36]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40022000 	.word	0x40022000

080031d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d118      	bne.n	8003218 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e005      	b.n	800320e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003216:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d003      	beq.n	8003230 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d003      	beq.n	8003236 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800322e:	e005      	b.n	800323c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003232:	613b      	str	r3, [r7, #16]
    break;
 8003234:	e005      	b.n	8003242 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003238:	613b      	str	r3, [r7, #16]
    break;
 800323a:	e002      	b.n	8003242 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]
    break;
 8003240:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	3301      	adds	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	fb02 f203 	mul.w	r2, r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0e5b      	lsrs	r3, r3, #25
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	3301      	adds	r3, #1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003282:	683b      	ldr	r3, [r7, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40021000 	.word	0x40021000
 8003294:	0803efac 	.word	0x0803efac
 8003298:	00f42400 	.word	0x00f42400
 800329c:	007a1200 	.word	0x007a1200

080032a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a8:	2300      	movs	r3, #0
 80032aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ac:	2300      	movs	r3, #0
 80032ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d040      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d02a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d825      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032c8:	2b60      	cmp	r3, #96	; 0x60
 80032ca:	d026      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032cc:	2b60      	cmp	r3, #96	; 0x60
 80032ce:	d821      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d006      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d81d      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d009      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d010      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032e0:	e018      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032e2:	4b89      	ldr	r3, [pc, #548]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a88      	ldr	r2, [pc, #544]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ee:	e015      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fb02 	bl	8003900 <RCCEx_PLLSAI1_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003300:	e00c      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3320      	adds	r3, #32
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fbed 	bl	8003ae8 <RCCEx_PLLSAI2_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	74fb      	strb	r3, [r7, #19]
      break;
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800331a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003322:	4b79      	ldr	r3, [pc, #484]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003328:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003330:	4975      	ldr	r1, [pc, #468]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003338:	e001      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d047      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d030      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d82a      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800335a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335e:	d02a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003364:	d824      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800336c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003370:	d81e      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337a:	d010      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800337c:	e018      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800337e:	4b62      	ldr	r3, [pc, #392]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a61      	ldr	r2, [pc, #388]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800338a:	e015      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fab4 	bl	8003900 <RCCEx_PLLSAI1_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800339c:	e00c      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3320      	adds	r3, #32
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fb9f 	bl	8003ae8 <RCCEx_PLLSAI2_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	74fb      	strb	r3, [r7, #19]
      break;
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80033b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033be:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	494e      	ldr	r1, [pc, #312]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033d4:	e001      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 809f 	beq.w	8003526 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ec:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	4a40      	ldr	r2, [pc, #256]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6593      	str	r3, [r2, #88]	; 0x58
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3a      	ldr	r2, [pc, #232]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800342a:	f7fd fdc5 	bl	8000fb8 <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003430:	e009      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fd fdc1 	bl	8000fb8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d902      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	74fb      	strb	r3, [r7, #19]
        break;
 8003444:	e005      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003446:	4b31      	ldr	r3, [pc, #196]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ef      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d15b      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01f      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	429a      	cmp	r2, r3
 8003474:	d019      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003480:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800348a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d016      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fd fd80 	bl	8000fb8 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	e00b      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fd fd7c 	bl	8000fb8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d902      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	74fb      	strb	r3, [r7, #19]
            break;
 80034d2:	e006      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ec      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10c      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003500:	e008      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	74bb      	strb	r3, [r7, #18]
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003514:	7c7b      	ldrb	r3, [r7, #17]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351a:	4ba0      	ldr	r3, [pc, #640]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4a9f      	ldr	r2, [pc, #636]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003532:	4b9a      	ldr	r3, [pc, #616]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f023 0203 	bic.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	4996      	ldr	r1, [pc, #600]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003554:	4b91      	ldr	r3, [pc, #580]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 020c 	bic.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	498e      	ldr	r1, [pc, #568]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	4985      	ldr	r1, [pc, #532]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003598:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a6:	497d      	ldr	r1, [pc, #500]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ba:	4b78      	ldr	r3, [pc, #480]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	4974      	ldr	r1, [pc, #464]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035dc:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	496c      	ldr	r1, [pc, #432]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360c:	4963      	ldr	r1, [pc, #396]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003620:	4b5e      	ldr	r3, [pc, #376]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362e:	495b      	ldr	r1, [pc, #364]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003642:	4b56      	ldr	r3, [pc, #344]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	4952      	ldr	r1, [pc, #328]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003664:	4b4d      	ldr	r3, [pc, #308]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	494a      	ldr	r1, [pc, #296]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003686:	4b45      	ldr	r3, [pc, #276]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	4941      	ldr	r1, [pc, #260]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036a8:	4b3c      	ldr	r3, [pc, #240]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b6:	4939      	ldr	r1, [pc, #228]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d028      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d8:	4930      	ldr	r1, [pc, #192]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e8:	d106      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ea:	4b2c      	ldr	r3, [pc, #176]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4a2b      	ldr	r2, [pc, #172]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f4:	60d3      	str	r3, [r2, #12]
 80036f6:	e011      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003700:	d10c      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	2101      	movs	r1, #1
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f8f9 	bl	8003900 <RCCEx_PLLSAI1_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d04d      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003730:	d108      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003734:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003742:	e012      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003750:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003762:	490e      	ldr	r1, [pc, #56]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003772:	d106      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a08      	ldr	r2, [pc, #32]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800377e:	60d3      	str	r3, [r2, #12]
 8003780:	e020      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e014      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f8a5 	bl	8003900 <RCCEx_PLLSAI1_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d028      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d0:	4b4a      	ldr	r3, [pc, #296]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ee:	d106      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f0:	4b42      	ldr	r3, [pc, #264]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a41      	ldr	r2, [pc, #260]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e011      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003806:	d10c      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f876 	bl	8003900 <RCCEx_PLLSAI1_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01e      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003834:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383e:	492f      	ldr	r1, [pc, #188]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2102      	movs	r1, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f851 	bl	8003900 <RCCEx_PLLSAI1_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800387e:	f023 0204 	bic.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003888:	491c      	ldr	r1, [pc, #112]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a2:	f023 0218 	bic.w	r2, r3, #24
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	4913      	ldr	r1, [pc, #76]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d017      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038c0:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d0:	490a      	ldr	r1, [pc, #40]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038e2:	d105      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800390e:	4b72      	ldr	r3, [pc, #456]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00e      	beq.n	8003938 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800391a:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d103      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
       ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d142      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e03f      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d018      	beq.n	8003972 <RCCEx_PLLSAI1_Config+0x72>
 8003940:	2b03      	cmp	r3, #3
 8003942:	d825      	bhi.n	8003990 <RCCEx_PLLSAI1_Config+0x90>
 8003944:	2b01      	cmp	r3, #1
 8003946:	d002      	beq.n	800394e <RCCEx_PLLSAI1_Config+0x4e>
 8003948:	2b02      	cmp	r3, #2
 800394a:	d009      	beq.n	8003960 <RCCEx_PLLSAI1_Config+0x60>
 800394c:	e020      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800394e:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11d      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395e:	e01a      	b.n	8003996 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003960:	4b5d      	ldr	r3, [pc, #372]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e013      	b.n	800399a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003972:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800397e:	4b56      	ldr	r3, [pc, #344]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800398e:	e006      	b.n	800399e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e004      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800399e:	bf00      	nop
    }

    if(status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80039a6:	4b4c      	ldr	r3, [pc, #304]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4949      	ldr	r1, [pc, #292]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8086 	bne.w	8003acc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039c0:	4b45      	ldr	r3, [pc, #276]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a44      	ldr	r2, [pc, #272]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fd faf4 	bl	8000fb8 <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d4:	f7fd faf0 	bl	8000fb8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
        break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e8:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ef      	bne.n	80039d4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d168      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d113      	bne.n	8003a28 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6892      	ldr	r2, [r2, #8]
 8003a0c:	0211      	lsls	r1, r2, #8
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	06d2      	lsls	r2, r2, #27
 8003a14:	4311      	orrs	r1, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6852      	ldr	r2, [r2, #4]
 8003a1a:	3a01      	subs	r2, #1
 8003a1c:	0112      	lsls	r2, r2, #4
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	492d      	ldr	r1, [pc, #180]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	610b      	str	r3, [r1, #16]
 8003a26:	e02d      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d115      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6892      	ldr	r2, [r2, #8]
 8003a3a:	0211      	lsls	r1, r2, #8
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6912      	ldr	r2, [r2, #16]
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0552      	lsls	r2, r2, #21
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6852      	ldr	r2, [r2, #4]
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	430a      	orrs	r2, r1
 8003a52:	4921      	ldr	r1, [pc, #132]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	610b      	str	r3, [r1, #16]
 8003a58:	e014      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6892      	ldr	r2, [r2, #8]
 8003a66:	0211      	lsls	r1, r2, #8
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6952      	ldr	r2, [r2, #20]
 8003a6c:	0852      	lsrs	r2, r2, #1
 8003a6e:	3a01      	subs	r2, #1
 8003a70:	0652      	lsls	r2, r2, #25
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6852      	ldr	r2, [r2, #4]
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd fa92 	bl	8000fb8 <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a96:	e009      	b.n	8003aac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a98:	f7fd fa8e 	bl	8000fb8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8003aaa:	e005      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ef      	beq.n	8003a98 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	07ff800f 	.word	0x07ff800f
 8003ae0:	ff9f800f 	.word	0xff9f800f
 8003ae4:	f9ff800f 	.word	0xf9ff800f

08003ae8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003af6:	4b72      	ldr	r3, [pc, #456]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00e      	beq.n	8003b20 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b02:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0203 	and.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d103      	bne.n	8003b1a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
       ||
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d142      	bne.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
 8003b1e:	e03f      	b.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d018      	beq.n	8003b5a <RCCEx_PLLSAI2_Config+0x72>
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d825      	bhi.n	8003b78 <RCCEx_PLLSAI2_Config+0x90>
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d002      	beq.n	8003b36 <RCCEx_PLLSAI2_Config+0x4e>
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d009      	beq.n	8003b48 <RCCEx_PLLSAI2_Config+0x60>
 8003b34:	e020      	b.n	8003b78 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b36:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11d      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b46:	e01a      	b.n	8003b7e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b48:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d116      	bne.n	8003b82 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b58:	e013      	b.n	8003b82 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b5a:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b66:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b76:	e006      	b.n	8003b86 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7c:	e004      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b8e:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4949      	ldr	r1, [pc, #292]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 8086 	bne.w	8003cb4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ba8:	4b45      	ldr	r3, [pc, #276]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a44      	ldr	r2, [pc, #272]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fa00 	bl	8000fb8 <HAL_GetTick>
 8003bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bba:	e009      	b.n	8003bd0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bbc:	f7fd f9fc 	bl	8000fb8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d902      	bls.n	8003bd0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bce:	e005      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bd0:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ef      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d168      	bne.n	8003cb4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d113      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be8:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	4b35      	ldr	r3, [pc, #212]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6892      	ldr	r2, [r2, #8]
 8003bf4:	0211      	lsls	r1, r2, #8
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	06d2      	lsls	r2, r2, #27
 8003bfc:	4311      	orrs	r1, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6852      	ldr	r2, [r2, #4]
 8003c02:	3a01      	subs	r2, #1
 8003c04:	0112      	lsls	r2, r2, #4
 8003c06:	430a      	orrs	r2, r1
 8003c08:	492d      	ldr	r1, [pc, #180]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	614b      	str	r3, [r1, #20]
 8003c0e:	e02d      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d115      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	0211      	lsls	r1, r2, #8
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6912      	ldr	r2, [r2, #16]
 8003c28:	0852      	lsrs	r2, r2, #1
 8003c2a:	3a01      	subs	r2, #1
 8003c2c:	0552      	lsls	r2, r2, #21
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6852      	ldr	r2, [r2, #4]
 8003c34:	3a01      	subs	r2, #1
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	4921      	ldr	r1, [pc, #132]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	614b      	str	r3, [r1, #20]
 8003c40:	e014      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c42:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	0211      	lsls	r1, r2, #8
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6952      	ldr	r2, [r2, #20]
 8003c54:	0852      	lsrs	r2, r2, #1
 8003c56:	3a01      	subs	r2, #1
 8003c58:	0652      	lsls	r2, r2, #25
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6852      	ldr	r2, [r2, #4]
 8003c60:	3a01      	subs	r2, #1
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	430a      	orrs	r2, r1
 8003c66:	4916      	ldr	r1, [pc, #88]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd f99e 	bl	8000fb8 <HAL_GetTick>
 8003c7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c7e:	e009      	b.n	8003c94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c80:	f7fd f99a 	bl	8000fb8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d902      	bls.n	8003c94 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	73fb      	strb	r3, [r7, #15]
          break;
 8003c92:	e005      	b.n	8003ca0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ef      	beq.n	8003c80 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	07ff800f 	.word	0x07ff800f
 8003cc8:	ff9f800f 	.word	0xff9f800f
 8003ccc:	f9ff800f 	.word	0xf9ff800f

08003cd0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e054      	b.n	8003d8c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7a5b      	ldrb	r3, [r3, #9]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f007 fe20 	bl	800b938 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	725a      	strb	r2, [r3, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 0120 	bic.w	r1, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0204 	orr.w	r2, r2, #4
 8003d22:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d104      	bne.n	8003d3c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2204      	movs	r2, #4
 8003d36:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e027      	b.n	8003d8c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d3c:	f7fd f93c 	bl	8000fb8 <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003d42:	e015      	b.n	8003d70 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003d44:	f7fd f938 	bl	8000fb8 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d90e      	bls.n	8003d70 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d107      	bne.n	8003d70 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2204      	movs	r2, #4
 8003d64:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e00d      	b.n	8003d8c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d0e2      	beq.n	8003d44 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7a1b      	ldrb	r3, [r3, #8]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_RNG_GenerateRandomNumber+0x1a>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e03d      	b.n	8003e2a <HAL_RNG_GenerateRandomNumber+0x96>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7a5b      	ldrb	r3, [r3, #9]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d12c      	bne.n	8003e18 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dc4:	f7fd f8f8 	bl	8000fb8 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dca:	e011      	b.n	8003df0 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003dcc:	f7fd f8f4 	bl	8000fb8 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d90a      	bls.n	8003df0 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e01c      	b.n	8003e2a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d1e6      	bne.n	8003dcc <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	725a      	strb	r2, [r3, #9]
 8003e16:	e004      	b.n	8003e22 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	721a      	strb	r2, [r3, #8]

  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e049      	b.n	8003ed8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f007 fdb1 	bl	800b9c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f000 fddd 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d001      	beq.n	8003ef8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e047      	b.n	8003f88 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <HAL_TIM_Base_Start+0xb4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01d      	beq.n	8003f46 <HAL_TIM_Base_Start+0x66>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	d018      	beq.n	8003f46 <HAL_TIM_Base_Start+0x66>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <HAL_TIM_Base_Start+0xb8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_TIM_Base_Start+0x66>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <HAL_TIM_Base_Start+0xbc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_TIM_Base_Start+0x66>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_TIM_Base_Start+0xc0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_TIM_Base_Start+0x66>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <HAL_TIM_Base_Start+0xc4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIM_Base_Start+0x66>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_TIM_Base_Start+0xc8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d115      	bne.n	8003f72 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <HAL_TIM_Base_Start+0xcc>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b06      	cmp	r3, #6
 8003f56:	d015      	beq.n	8003f84 <HAL_TIM_Base_Start+0xa4>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5e:	d011      	beq.n	8003f84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f70:	e008      	b.n	8003f84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e000      	b.n	8003f86 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40013400 	.word	0x40013400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	00010007 	.word	0x00010007

08003fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e04f      	b.n	8004068 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a23      	ldr	r2, [pc, #140]	; (8004074 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff2:	d018      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1e      	ldr	r2, [pc, #120]	; (800407c <HAL_TIM_Base_Start_IT+0xcc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <HAL_TIM_Base_Start_IT+0xd0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <HAL_TIM_Base_Start_IT+0xd4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_TIM_Base_Start_IT+0x76>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <HAL_TIM_Base_Start_IT+0xd8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d115      	bne.n	8004052 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <HAL_TIM_Base_Start_IT+0xdc>)
 800402e:	4013      	ands	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b06      	cmp	r3, #6
 8004036:	d015      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0xb4>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403e:	d011      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004050:	e008      	b.n	8004064 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e000      	b.n	8004066 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004064:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40013400 	.word	0x40013400
 8004088:	40014000 	.word	0x40014000
 800408c:	00010007 	.word	0x00010007

08004090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e049      	b.n	8004136 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f841 	bl	800413e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f000 fcae 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_TIM_PWM_Start+0x24>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e03c      	b.n	80041f2 <HAL_TIM_PWM_Start+0x9e>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b04      	cmp	r3, #4
 800417c:	d109      	bne.n	8004192 <HAL_TIM_PWM_Start+0x3e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	e02f      	b.n	80041f2 <HAL_TIM_PWM_Start+0x9e>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d109      	bne.n	80041ac <HAL_TIM_PWM_Start+0x58>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e022      	b.n	80041f2 <HAL_TIM_PWM_Start+0x9e>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d109      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x72>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	bf14      	ite	ne
 80041be:	2301      	movne	r3, #1
 80041c0:	2300      	moveq	r3, #0
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e015      	b.n	80041f2 <HAL_TIM_PWM_Start+0x9e>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d109      	bne.n	80041e0 <HAL_TIM_PWM_Start+0x8c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e008      	b.n	80041f2 <HAL_TIM_PWM_Start+0x9e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e09c      	b.n	8004334 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_TIM_PWM_Start+0xb6>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004208:	e023      	b.n	8004252 <HAL_TIM_PWM_Start+0xfe>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d104      	bne.n	800421a <HAL_TIM_PWM_Start+0xc6>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	e01b      	b.n	8004252 <HAL_TIM_PWM_Start+0xfe>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start+0xd6>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004228:	e013      	b.n	8004252 <HAL_TIM_PWM_Start+0xfe>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0xe6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004238:	e00b      	b.n	8004252 <HAL_TIM_PWM_Start+0xfe>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b10      	cmp	r3, #16
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Start+0xf6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004248:	e003      	b.n	8004252 <HAL_TIM_PWM_Start+0xfe>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	6839      	ldr	r1, [r7, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f001 f885 	bl	800536a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a35      	ldr	r2, [pc, #212]	; (800433c <HAL_TIM_PWM_Start+0x1e8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_TIM_PWM_Start+0x13e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a34      	ldr	r2, [pc, #208]	; (8004340 <HAL_TIM_PWM_Start+0x1ec>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_TIM_PWM_Start+0x13e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a32      	ldr	r2, [pc, #200]	; (8004344 <HAL_TIM_PWM_Start+0x1f0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_TIM_PWM_Start+0x13e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a31      	ldr	r2, [pc, #196]	; (8004348 <HAL_TIM_PWM_Start+0x1f4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIM_PWM_Start+0x13e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2f      	ldr	r2, [pc, #188]	; (800434c <HAL_TIM_PWM_Start+0x1f8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_TIM_PWM_Start+0x142>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_TIM_PWM_Start+0x144>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a22      	ldr	r2, [pc, #136]	; (800433c <HAL_TIM_PWM_Start+0x1e8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01d      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x19e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042be:	d018      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x19e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a22      	ldr	r2, [pc, #136]	; (8004350 <HAL_TIM_PWM_Start+0x1fc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x19e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a21      	ldr	r2, [pc, #132]	; (8004354 <HAL_TIM_PWM_Start+0x200>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x19e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <HAL_TIM_PWM_Start+0x204>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x19e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a17      	ldr	r2, [pc, #92]	; (8004340 <HAL_TIM_PWM_Start+0x1ec>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x19e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <HAL_TIM_PWM_Start+0x1f0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d115      	bne.n	800431e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_TIM_PWM_Start+0x208>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b06      	cmp	r3, #6
 8004302:	d015      	beq.n	8004330 <HAL_TIM_PWM_Start+0x1dc>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d011      	beq.n	8004330 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	e008      	b.n	8004330 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e000      	b.n	8004332 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40013400 	.word	0x40013400
 8004344:	40014000 	.word	0x40014000
 8004348:	40014400 	.word	0x40014400
 800434c:	40014800 	.word	0x40014800
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	00010007 	.word	0x00010007

08004360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b02      	cmp	r3, #2
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0202 	mvn.w	r2, #2
 800438c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fb25 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fb17 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fb28 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0204 	mvn.w	r2, #4
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fafb 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 faed 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fafe 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b08      	cmp	r3, #8
 800441c:	d122      	bne.n	8004464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b08      	cmp	r3, #8
 800442a:	d11b      	bne.n	8004464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0208 	mvn.w	r2, #8
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fad1 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fac3 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fad4 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b10      	cmp	r3, #16
 8004470:	d122      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b10      	cmp	r3, #16
 800447e:	d11b      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0210 	mvn.w	r2, #16
 8004488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2208      	movs	r2, #8
 800448e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 faa7 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80044a4:	e005      	b.n	80044b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fa99 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 faaa 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10e      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0201 	mvn.w	r2, #1
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f007 f8f2 	bl	800b6c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b80      	cmp	r3, #128	; 0x80
 80044f0:	d10e      	bne.n	8004510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 ffe4 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451e:	d10e      	bne.n	800453e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b80      	cmp	r3, #128	; 0x80
 800452c:	d107      	bne.n	800453e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 ffd7 	bl	80054ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d10e      	bne.n	800456a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d107      	bne.n	800456a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa58 	bl	8004a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b20      	cmp	r3, #32
 8004576:	d10e      	bne.n	8004596 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b20      	cmp	r3, #32
 8004584:	d107      	bne.n	8004596 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f06f 0220 	mvn.w	r2, #32
 800458e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 ff97 	bl	80054c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e0ff      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b14      	cmp	r3, #20
 80045ca:	f200 80f0 	bhi.w	80047ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	08004629 	.word	0x08004629
 80045d8:	080047af 	.word	0x080047af
 80045dc:	080047af 	.word	0x080047af
 80045e0:	080047af 	.word	0x080047af
 80045e4:	08004669 	.word	0x08004669
 80045e8:	080047af 	.word	0x080047af
 80045ec:	080047af 	.word	0x080047af
 80045f0:	080047af 	.word	0x080047af
 80045f4:	080046ab 	.word	0x080046ab
 80045f8:	080047af 	.word	0x080047af
 80045fc:	080047af 	.word	0x080047af
 8004600:	080047af 	.word	0x080047af
 8004604:	080046eb 	.word	0x080046eb
 8004608:	080047af 	.word	0x080047af
 800460c:	080047af 	.word	0x080047af
 8004610:	080047af 	.word	0x080047af
 8004614:	0800472d 	.word	0x0800472d
 8004618:	080047af 	.word	0x080047af
 800461c:	080047af 	.word	0x080047af
 8004620:	080047af 	.word	0x080047af
 8004624:	0800476d 	.word	0x0800476d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fa98 	bl	8004b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0208 	orr.w	r2, r2, #8
 8004642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0204 	bic.w	r2, r2, #4
 8004652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6999      	ldr	r1, [r3, #24]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	619a      	str	r2, [r3, #24]
      break;
 8004666:	e0a5      	b.n	80047b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fb08 	bl	8004c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]
      break;
 80046a8:	e084      	b.n	80047b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fb71 	bl	8004d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0208 	orr.w	r2, r2, #8
 80046c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0204 	bic.w	r2, r2, #4
 80046d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69d9      	ldr	r1, [r3, #28]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	61da      	str	r2, [r3, #28]
      break;
 80046e8:	e064      	b.n	80047b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fbd9 	bl	8004ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69d9      	ldr	r1, [r3, #28]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	021a      	lsls	r2, r3, #8
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	61da      	str	r2, [r3, #28]
      break;
 800472a:	e043      	b.n	80047b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fc22 	bl	8004f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800476a:	e023      	b.n	80047b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fc66 	bl	8005044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	021a      	lsls	r2, r3, #8
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047ac:	e002      	b.n	80047b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
      break;
 80047b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop

080047c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e0b6      	b.n	8004952 <HAL_TIM_ConfigClockSource+0x18a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004820:	d03e      	beq.n	80048a0 <HAL_TIM_ConfigClockSource+0xd8>
 8004822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004826:	f200 8087 	bhi.w	8004938 <HAL_TIM_ConfigClockSource+0x170>
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482e:	f000 8086 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x176>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	d87f      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x170>
 8004838:	2b70      	cmp	r3, #112	; 0x70
 800483a:	d01a      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0xaa>
 800483c:	2b70      	cmp	r3, #112	; 0x70
 800483e:	d87b      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x170>
 8004840:	2b60      	cmp	r3, #96	; 0x60
 8004842:	d050      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x11e>
 8004844:	2b60      	cmp	r3, #96	; 0x60
 8004846:	d877      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x170>
 8004848:	2b50      	cmp	r3, #80	; 0x50
 800484a:	d03c      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0xfe>
 800484c:	2b50      	cmp	r3, #80	; 0x50
 800484e:	d873      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x170>
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	d058      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x13e>
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	d86f      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x170>
 8004858:	2b30      	cmp	r3, #48	; 0x30
 800485a:	d064      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15e>
 800485c:	2b30      	cmp	r3, #48	; 0x30
 800485e:	d86b      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x170>
 8004860:	2b20      	cmp	r3, #32
 8004862:	d060      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15e>
 8004864:	2b20      	cmp	r3, #32
 8004866:	d867      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x170>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05c      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15e>
 800486c:	2b10      	cmp	r3, #16
 800486e:	d05a      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15e>
 8004870:	e062      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6899      	ldr	r1, [r3, #8]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f000 fd52 	bl	800532a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	609a      	str	r2, [r3, #8]
      break;
 800489e:	e04f      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6899      	ldr	r1, [r3, #8]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f000 fd3b 	bl	800532a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c2:	609a      	str	r2, [r3, #8]
      break;
 80048c4:	e03c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 fcaf 	bl	8005236 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2150      	movs	r1, #80	; 0x50
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fd08 	bl	80052f4 <TIM_ITRx_SetConfig>
      break;
 80048e4:	e02c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6859      	ldr	r1, [r3, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f000 fcce 	bl	8005294 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2160      	movs	r1, #96	; 0x60
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fcf8 	bl	80052f4 <TIM_ITRx_SetConfig>
      break;
 8004904:	e01c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6859      	ldr	r1, [r3, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	461a      	mov	r2, r3
 8004914:	f000 fc8f 	bl	8005236 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2140      	movs	r1, #64	; 0x40
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fce8 	bl	80052f4 <TIM_ITRx_SetConfig>
      break;
 8004924:	e00c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f000 fcdf 	bl	80052f4 <TIM_ITRx_SetConfig>
      break;
 8004936:	e003      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      break;
 800493c:	e000      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800493e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_TIM_SlaveConfigSynchro+0x18>
 800496e:	2302      	movs	r3, #2
 8004970:	e031      	b.n	80049d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fbc3 	bl	8005110 <TIM_SlaveTimer_SetConfig>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e018      	b.n	80049d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049c2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a40      	ldr	r2, [pc, #256]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d00f      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3d      	ldr	r2, [pc, #244]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a3c      	ldr	r2, [pc, #240]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3b      	ldr	r2, [pc, #236]	; (8004b50 <TIM_Base_SetConfig+0x120>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3a      	ldr	r2, [pc, #232]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d01b      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d017      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2b      	ldr	r2, [pc, #172]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <TIM_Base_SetConfig+0x120>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00f      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a29      	ldr	r2, [pc, #164]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <TIM_Base_SetConfig+0x128>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <TIM_Base_SetConfig+0x12c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <TIM_Base_SetConfig+0x130>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d108      	bne.n	8004adc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <TIM_Base_SetConfig+0x128>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <TIM_Base_SetConfig+0x12c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <TIM_Base_SetConfig+0x130>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d103      	bne.n	8004b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	615a      	str	r2, [r3, #20]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40013400 	.word	0x40013400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800

08004b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 0302 	bic.w	r3, r3, #2
 8004bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <TIM_OC1_SetConfig+0x10c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00f      	beq.n	8004be4 <TIM_OC1_SetConfig+0x80>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <TIM_OC1_SetConfig+0x110>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00b      	beq.n	8004be4 <TIM_OC1_SetConfig+0x80>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <TIM_OC1_SetConfig+0x114>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_OC1_SetConfig+0x80>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <TIM_OC1_SetConfig+0x118>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC1_SetConfig+0x80>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <TIM_OC1_SetConfig+0x11c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10c      	bne.n	8004bfe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0308 	bic.w	r3, r3, #8
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <TIM_OC1_SetConfig+0x10c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_OC1_SetConfig+0xc2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <TIM_OC1_SetConfig+0x110>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_OC1_SetConfig+0xc2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <TIM_OC1_SetConfig+0x114>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_OC1_SetConfig+0xc2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <TIM_OC1_SetConfig+0x118>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC1_SetConfig+0xc2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <TIM_OC1_SetConfig+0x11c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d111      	bne.n	8004c4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40013400 	.word	0x40013400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800

08004c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f023 0210 	bic.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0320 	bic.w	r3, r3, #32
 8004cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <TIM_OC2_SetConfig+0x100>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC2_SetConfig+0x6c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <TIM_OC2_SetConfig+0x104>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10d      	bne.n	8004d0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <TIM_OC2_SetConfig+0x100>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_OC2_SetConfig+0xb0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <TIM_OC2_SetConfig+0x104>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_OC2_SetConfig+0xb0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <TIM_OC2_SetConfig+0x108>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_OC2_SetConfig+0xb0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <TIM_OC2_SetConfig+0x10c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC2_SetConfig+0xb0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <TIM_OC2_SetConfig+0x110>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d113      	bne.n	8004d5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40013400 	.word	0x40013400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800

08004d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a27      	ldr	r2, [pc, #156]	; (8004e94 <TIM_OC3_SetConfig+0xfc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_OC3_SetConfig+0x6a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <TIM_OC3_SetConfig+0x100>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10d      	bne.n	8004e1e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <TIM_OC3_SetConfig+0xfc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <TIM_OC3_SetConfig+0xae>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <TIM_OC3_SetConfig+0x100>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_OC3_SetConfig+0xae>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1a      	ldr	r2, [pc, #104]	; (8004e9c <TIM_OC3_SetConfig+0x104>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_OC3_SetConfig+0xae>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <TIM_OC3_SetConfig+0x108>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC3_SetConfig+0xae>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <TIM_OC3_SetConfig+0x10c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d113      	bne.n	8004e6e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40013400 	.word	0x40013400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	031b      	lsls	r3, r3, #12
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <TIM_OC4_SetConfig+0xc0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00f      	beq.n	8004f2c <TIM_OC4_SetConfig+0x84>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <TIM_OC4_SetConfig+0xc4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <TIM_OC4_SetConfig+0x84>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <TIM_OC4_SetConfig+0xc8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <TIM_OC4_SetConfig+0x84>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <TIM_OC4_SetConfig+0xcc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC4_SetConfig+0x84>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <TIM_OC4_SetConfig+0xd0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d109      	bne.n	8004f40 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40013400 	.word	0x40013400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800

08004f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <TIM_OC5_SetConfig+0xb4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_OC5_SetConfig+0x7a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	; (8005034 <TIM_OC5_SetConfig+0xb8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_OC5_SetConfig+0x7a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a15      	ldr	r2, [pc, #84]	; (8005038 <TIM_OC5_SetConfig+0xbc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_OC5_SetConfig+0x7a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <TIM_OC5_SetConfig+0xc0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC5_SetConfig+0x7a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <TIM_OC5_SetConfig+0xc4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d109      	bne.n	800500a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40013400 	.word	0x40013400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800

08005044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800508a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	051b      	lsls	r3, r3, #20
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <TIM_OC6_SetConfig+0xb8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00f      	beq.n	80050c0 <TIM_OC6_SetConfig+0x7c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <TIM_OC6_SetConfig+0xbc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_OC6_SetConfig+0x7c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <TIM_OC6_SetConfig+0xc0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_OC6_SetConfig+0x7c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a15      	ldr	r2, [pc, #84]	; (8005108 <TIM_OC6_SetConfig+0xc4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_OC6_SetConfig+0x7c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <TIM_OC6_SetConfig+0xc8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d109      	bne.n	80050d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800

08005110 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513e:	f023 0307 	bic.w	r3, r3, #7
 8005142:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b70      	cmp	r3, #112	; 0x70
 800515c:	d01a      	beq.n	8005194 <TIM_SlaveTimer_SetConfig+0x84>
 800515e:	2b70      	cmp	r3, #112	; 0x70
 8005160:	d860      	bhi.n	8005224 <TIM_SlaveTimer_SetConfig+0x114>
 8005162:	2b60      	cmp	r3, #96	; 0x60
 8005164:	d054      	beq.n	8005210 <TIM_SlaveTimer_SetConfig+0x100>
 8005166:	2b60      	cmp	r3, #96	; 0x60
 8005168:	d85c      	bhi.n	8005224 <TIM_SlaveTimer_SetConfig+0x114>
 800516a:	2b50      	cmp	r3, #80	; 0x50
 800516c:	d046      	beq.n	80051fc <TIM_SlaveTimer_SetConfig+0xec>
 800516e:	2b50      	cmp	r3, #80	; 0x50
 8005170:	d858      	bhi.n	8005224 <TIM_SlaveTimer_SetConfig+0x114>
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	d019      	beq.n	80051aa <TIM_SlaveTimer_SetConfig+0x9a>
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d854      	bhi.n	8005224 <TIM_SlaveTimer_SetConfig+0x114>
 800517a:	2b30      	cmp	r3, #48	; 0x30
 800517c:	d055      	beq.n	800522a <TIM_SlaveTimer_SetConfig+0x11a>
 800517e:	2b30      	cmp	r3, #48	; 0x30
 8005180:	d850      	bhi.n	8005224 <TIM_SlaveTimer_SetConfig+0x114>
 8005182:	2b20      	cmp	r3, #32
 8005184:	d051      	beq.n	800522a <TIM_SlaveTimer_SetConfig+0x11a>
 8005186:	2b20      	cmp	r3, #32
 8005188:	d84c      	bhi.n	8005224 <TIM_SlaveTimer_SetConfig+0x114>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d04d      	beq.n	800522a <TIM_SlaveTimer_SetConfig+0x11a>
 800518e:	2b10      	cmp	r3, #16
 8005190:	d04b      	beq.n	800522a <TIM_SlaveTimer_SetConfig+0x11a>
 8005192:	e047      	b.n	8005224 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68d9      	ldr	r1, [r3, #12]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f000 f8c1 	bl	800532a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80051a8:	e040      	b.n	800522c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d101      	bne.n	80051b6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e03b      	b.n	800522e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
      break;
 80051fa:	e017      	b.n	800522c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	6899      	ldr	r1, [r3, #8]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	461a      	mov	r2, r3
 800520a:	f000 f814 	bl	8005236 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800520e:	e00d      	b.n	800522c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6899      	ldr	r1, [r3, #8]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	461a      	mov	r2, r3
 800521e:	f000 f839 	bl	8005294 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005222:	e003      	b.n	800522c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
      break;
 8005228:	e000      	b.n	800522c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800522a:	bf00      	nop
  }

  return status;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005236:	b480      	push	{r7}
 8005238:	b087      	sub	sp, #28
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f023 0201 	bic.w	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 030a 	bic.w	r3, r3, #10
 8005272:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f023 0210 	bic.w	r2, r3, #16
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	031b      	lsls	r3, r3, #12
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	621a      	str	r2, [r3, #32]
}
 80052e8:	bf00      	nop
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	f043 0307 	orr.w	r3, r3, #7
 8005316:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	609a      	str	r2, [r3, #8]
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800532a:	b480      	push	{r7}
 800532c:	b087      	sub	sp, #28
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005344:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	021a      	lsls	r2, r3, #8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	431a      	orrs	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4313      	orrs	r3, r2
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	609a      	str	r2, [r3, #8]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800536a:	b480      	push	{r7}
 800536c:	b087      	sub	sp, #28
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2201      	movs	r2, #1
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	43db      	mvns	r3, r3
 800538c:	401a      	ands	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	fa01 f303 	lsl.w	r3, r1, r3
 80053a2:	431a      	orrs	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	621a      	str	r2, [r3, #32]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e068      	b.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2e      	ldr	r2, [pc, #184]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2d      	ldr	r2, [pc, #180]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005406:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005418:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01d      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543e:	d018      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a14      	ldr	r2, [pc, #80]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10c      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4313      	orrs	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40014000 	.word	0x40014000

080054c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e042      	b.n	8005598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f006 faef 	bl	800bb08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2224      	movs	r2, #36	; 0x24
 800552e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fbba 	bl	8005cbc <UART_SetConfig>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e022      	b.n	8005598 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fe76 	bl	800624c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800556e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800557e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fefd 	bl	8006390 <UART_CheckIdleState>
 8005596:	4603      	mov	r3, r0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d142      	bne.n	800563e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Receive_IT+0x24>
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e03b      	b.n	8005640 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Receive_IT+0x36>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e034      	b.n	8005640 <HAL_UART_Receive_IT+0xa0>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a17      	ldr	r2, [pc, #92]	; (8005648 <HAL_UART_Receive_IT+0xa8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d018      	beq.n	800562e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	613b      	str	r3, [r7, #16]
   return(result);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	623b      	str	r3, [r7, #32]
 800561c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	69f9      	ldr	r1, [r7, #28]
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	61bb      	str	r3, [r7, #24]
   return(result);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e6      	bne.n	80055fc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	461a      	mov	r2, r3
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 ffbf 	bl	80065b8 <UART_Start_Receive_IT>
 800563a:	4603      	mov	r3, r0
 800563c:	e000      	b.n	8005640 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3728      	adds	r7, #40	; 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40008000 	.word	0x40008000

0800564c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b0ba      	sub	sp, #232	; 0xe8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005672:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005676:	f640 030f 	movw	r3, #2063	; 0x80f
 800567a:	4013      	ands	r3, r2
 800567c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11b      	bne.n	80056c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 82d6 	beq.w	8005c62 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
      }
      return;
 80056be:	e2d0      	b.n	8005c62 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80056c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 811f 	beq.w	8005908 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056ce:	4b8b      	ldr	r3, [pc, #556]	; (80058fc <HAL_UART_IRQHandler+0x2b0>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056da:	4b89      	ldr	r3, [pc, #548]	; (8005900 <HAL_UART_IRQHandler+0x2b4>)
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8112 	beq.w	8005908 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d011      	beq.n	8005714 <HAL_UART_IRQHandler+0xc8>
 80056f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d011      	beq.n	8005744 <HAL_UART_IRQHandler+0xf8>
 8005720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2202      	movs	r2, #2
 8005732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573a:	f043 0204 	orr.w	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d011      	beq.n	8005774 <HAL_UART_IRQHandler+0x128>
 8005750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2204      	movs	r2, #4
 8005762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800576a:	f043 0202 	orr.w	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d017      	beq.n	80057b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800578c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005790:	4b5a      	ldr	r3, [pc, #360]	; (80058fc <HAL_UART_IRQHandler+0x2b0>)
 8005792:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2208      	movs	r2, #8
 800579e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a6:	f043 0208 	orr.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d012      	beq.n	80057e2 <HAL_UART_IRQHandler+0x196>
 80057bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00c      	beq.n	80057e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 823c 	beq.w	8005c66 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d013      	beq.n	8005822 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d105      	bne.n	8005812 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005828:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d005      	beq.n	8005846 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800583a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800583e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005842:	2b00      	cmp	r3, #0
 8005844:	d04f      	beq.n	80058e6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 ffe0 	bl	800680c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d141      	bne.n	80058de <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800588a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800589e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1d9      	bne.n	800585a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d013      	beq.n	80058d6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b2:	4a14      	ldr	r2, [pc, #80]	; (8005904 <HAL_UART_IRQHandler+0x2b8>)
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fc f9c9 	bl	8001c52 <HAL_DMA_Abort_IT>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d017      	beq.n	80058f6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	e00f      	b.n	80058f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f9da 	bl	8005c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058dc:	e00b      	b.n	80058f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9d6 	bl	8005c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	e007      	b.n	80058f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9d2 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80058f4:	e1b7      	b.n	8005c66 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	bf00      	nop
    return;
 80058f8:	e1b5      	b.n	8005c66 <HAL_UART_IRQHandler+0x61a>
 80058fa:	bf00      	nop
 80058fc:	10000001 	.word	0x10000001
 8005900:	04000120 	.word	0x04000120
 8005904:	080068d9 	.word	0x080068d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590c:	2b01      	cmp	r3, #1
 800590e:	f040 814a 	bne.w	8005ba6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8143 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 813c 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2210      	movs	r2, #16
 8005934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	f040 80b5 	bne.w	8005ab0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005952:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8187 	beq.w	8005c6a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005966:	429a      	cmp	r2, r3
 8005968:	f080 817f 	bcs.w	8005c6a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 8086 	bne.w	8005a94 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800599c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1da      	bne.n	8005988 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e1      	bne.n	80059d2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3308      	adds	r3, #8
 8005a14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e3      	bne.n	8005a0e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a64:	f023 0310 	bic.w	r3, r3, #16
 8005a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a76:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e4      	bne.n	8005a54 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fc f883 	bl	8001b9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8fb 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aae:	e0dc      	b.n	8005c6a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80ce 	beq.w	8005c6e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80c9 	beq.w	8005c6e <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005af0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005afe:	647b      	str	r3, [r7, #68]	; 0x44
 8005b00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e4      	bne.n	8005adc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	623b      	str	r3, [r7, #32]
   return(result);
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b3a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e1      	bne.n	8005b12 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	617b      	str	r3, [r7, #20]
   return(result);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e4      	bne.n	8005b62 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f880 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ba4:	e063      	b.n	8005c6e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x584>
 8005bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 fb2b 	bl	8007224 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bce:	e051      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d014      	beq.n	8005c06 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d03a      	beq.n	8005c72 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
    }
    return;
 8005c04:	e035      	b.n	8005c72 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <HAL_UART_IRQHandler+0x5da>
 8005c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fe70 	bl	8006904 <UART_EndTransmit_IT>
    return;
 8005c24:	e026      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_UART_IRQHandler+0x5fa>
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 fb04 	bl	800724c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c44:	e016      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d010      	beq.n	8005c74 <HAL_UART_IRQHandler+0x628>
 8005c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da0c      	bge.n	8005c74 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 faec 	bl	8007238 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c60:	e008      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
      return;
 8005c62:	bf00      	nop
 8005c64:	e006      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
    return;
 8005c66:	bf00      	nop
 8005c68:	e004      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
      return;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
      return;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
    return;
 8005c72:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c74:	37e8      	adds	r7, #232	; 0xe8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop

08005c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cbc:	b5b0      	push	{r4, r5, r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4bb1      	ldr	r3, [pc, #708]	; (8005fac <UART_SetConfig+0x2f0>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	69f9      	ldr	r1, [r7, #28]
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4aa6      	ldr	r2, [pc, #664]	; (8005fb0 <UART_SetConfig+0x2f4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d004      	beq.n	8005d24 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	69f9      	ldr	r1, [r7, #28]
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	f023 010f 	bic.w	r1, r3, #15
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a97      	ldr	r2, [pc, #604]	; (8005fb4 <UART_SetConfig+0x2f8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d120      	bne.n	8005d9e <UART_SetConfig+0xe2>
 8005d5c:	4b96      	ldr	r3, [pc, #600]	; (8005fb8 <UART_SetConfig+0x2fc>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d816      	bhi.n	8005d98 <UART_SetConfig+0xdc>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0xb4>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d81 	.word	0x08005d81
 8005d74:	08005d8d 	.word	0x08005d8d
 8005d78:	08005d87 	.word	0x08005d87
 8005d7c:	08005d93 	.word	0x08005d93
 8005d80:	2301      	movs	r3, #1
 8005d82:	76fb      	strb	r3, [r7, #27]
 8005d84:	e0e7      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005d86:	2302      	movs	r3, #2
 8005d88:	76fb      	strb	r3, [r7, #27]
 8005d8a:	e0e4      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	76fb      	strb	r3, [r7, #27]
 8005d90:	e0e1      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005d92:	2308      	movs	r3, #8
 8005d94:	76fb      	strb	r3, [r7, #27]
 8005d96:	e0de      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005d98:	2310      	movs	r3, #16
 8005d9a:	76fb      	strb	r3, [r7, #27]
 8005d9c:	e0db      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a86      	ldr	r2, [pc, #536]	; (8005fbc <UART_SetConfig+0x300>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d132      	bne.n	8005e0e <UART_SetConfig+0x152>
 8005da8:	4b83      	ldr	r3, [pc, #524]	; (8005fb8 <UART_SetConfig+0x2fc>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b0c      	cmp	r3, #12
 8005db4:	d828      	bhi.n	8005e08 <UART_SetConfig+0x14c>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x100>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005df1 	.word	0x08005df1
 8005dc0:	08005e09 	.word	0x08005e09
 8005dc4:	08005e09 	.word	0x08005e09
 8005dc8:	08005e09 	.word	0x08005e09
 8005dcc:	08005dfd 	.word	0x08005dfd
 8005dd0:	08005e09 	.word	0x08005e09
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e09 	.word	0x08005e09
 8005ddc:	08005df7 	.word	0x08005df7
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e09 	.word	0x08005e09
 8005dec:	08005e03 	.word	0x08005e03
 8005df0:	2300      	movs	r3, #0
 8005df2:	76fb      	strb	r3, [r7, #27]
 8005df4:	e0af      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005df6:	2302      	movs	r3, #2
 8005df8:	76fb      	strb	r3, [r7, #27]
 8005dfa:	e0ac      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	76fb      	strb	r3, [r7, #27]
 8005e00:	e0a9      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e02:	2308      	movs	r3, #8
 8005e04:	76fb      	strb	r3, [r7, #27]
 8005e06:	e0a6      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e08:	2310      	movs	r3, #16
 8005e0a:	76fb      	strb	r3, [r7, #27]
 8005e0c:	e0a3      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6b      	ldr	r2, [pc, #428]	; (8005fc0 <UART_SetConfig+0x304>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d120      	bne.n	8005e5a <UART_SetConfig+0x19e>
 8005e18:	4b67      	ldr	r3, [pc, #412]	; (8005fb8 <UART_SetConfig+0x2fc>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e22:	2b30      	cmp	r3, #48	; 0x30
 8005e24:	d013      	beq.n	8005e4e <UART_SetConfig+0x192>
 8005e26:	2b30      	cmp	r3, #48	; 0x30
 8005e28:	d814      	bhi.n	8005e54 <UART_SetConfig+0x198>
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d009      	beq.n	8005e42 <UART_SetConfig+0x186>
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d810      	bhi.n	8005e54 <UART_SetConfig+0x198>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <UART_SetConfig+0x180>
 8005e36:	2b10      	cmp	r3, #16
 8005e38:	d006      	beq.n	8005e48 <UART_SetConfig+0x18c>
 8005e3a:	e00b      	b.n	8005e54 <UART_SetConfig+0x198>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	76fb      	strb	r3, [r7, #27]
 8005e40:	e089      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e42:	2302      	movs	r3, #2
 8005e44:	76fb      	strb	r3, [r7, #27]
 8005e46:	e086      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	76fb      	strb	r3, [r7, #27]
 8005e4c:	e083      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e4e:	2308      	movs	r3, #8
 8005e50:	76fb      	strb	r3, [r7, #27]
 8005e52:	e080      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e54:	2310      	movs	r3, #16
 8005e56:	76fb      	strb	r3, [r7, #27]
 8005e58:	e07d      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a59      	ldr	r2, [pc, #356]	; (8005fc4 <UART_SetConfig+0x308>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d120      	bne.n	8005ea6 <UART_SetConfig+0x1ea>
 8005e64:	4b54      	ldr	r3, [pc, #336]	; (8005fb8 <UART_SetConfig+0x2fc>)
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e70:	d013      	beq.n	8005e9a <UART_SetConfig+0x1de>
 8005e72:	2bc0      	cmp	r3, #192	; 0xc0
 8005e74:	d814      	bhi.n	8005ea0 <UART_SetConfig+0x1e4>
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d009      	beq.n	8005e8e <UART_SetConfig+0x1d2>
 8005e7a:	2b80      	cmp	r3, #128	; 0x80
 8005e7c:	d810      	bhi.n	8005ea0 <UART_SetConfig+0x1e4>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <UART_SetConfig+0x1cc>
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d006      	beq.n	8005e94 <UART_SetConfig+0x1d8>
 8005e86:	e00b      	b.n	8005ea0 <UART_SetConfig+0x1e4>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	76fb      	strb	r3, [r7, #27]
 8005e8c:	e063      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	76fb      	strb	r3, [r7, #27]
 8005e92:	e060      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e94:	2304      	movs	r3, #4
 8005e96:	76fb      	strb	r3, [r7, #27]
 8005e98:	e05d      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005e9a:	2308      	movs	r3, #8
 8005e9c:	76fb      	strb	r3, [r7, #27]
 8005e9e:	e05a      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	76fb      	strb	r3, [r7, #27]
 8005ea4:	e057      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a47      	ldr	r2, [pc, #284]	; (8005fc8 <UART_SetConfig+0x30c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d125      	bne.n	8005efc <UART_SetConfig+0x240>
 8005eb0:	4b41      	ldr	r3, [pc, #260]	; (8005fb8 <UART_SetConfig+0x2fc>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebe:	d017      	beq.n	8005ef0 <UART_SetConfig+0x234>
 8005ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec4:	d817      	bhi.n	8005ef6 <UART_SetConfig+0x23a>
 8005ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eca:	d00b      	beq.n	8005ee4 <UART_SetConfig+0x228>
 8005ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed0:	d811      	bhi.n	8005ef6 <UART_SetConfig+0x23a>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <UART_SetConfig+0x222>
 8005ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eda:	d006      	beq.n	8005eea <UART_SetConfig+0x22e>
 8005edc:	e00b      	b.n	8005ef6 <UART_SetConfig+0x23a>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	76fb      	strb	r3, [r7, #27]
 8005ee2:	e038      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	76fb      	strb	r3, [r7, #27]
 8005ee8:	e035      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005eea:	2304      	movs	r3, #4
 8005eec:	76fb      	strb	r3, [r7, #27]
 8005eee:	e032      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	76fb      	strb	r3, [r7, #27]
 8005ef4:	e02f      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	76fb      	strb	r3, [r7, #27]
 8005efa:	e02c      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2b      	ldr	r2, [pc, #172]	; (8005fb0 <UART_SetConfig+0x2f4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d125      	bne.n	8005f52 <UART_SetConfig+0x296>
 8005f06:	4b2c      	ldr	r3, [pc, #176]	; (8005fb8 <UART_SetConfig+0x2fc>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f14:	d017      	beq.n	8005f46 <UART_SetConfig+0x28a>
 8005f16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f1a:	d817      	bhi.n	8005f4c <UART_SetConfig+0x290>
 8005f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f20:	d00b      	beq.n	8005f3a <UART_SetConfig+0x27e>
 8005f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f26:	d811      	bhi.n	8005f4c <UART_SetConfig+0x290>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <UART_SetConfig+0x278>
 8005f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f30:	d006      	beq.n	8005f40 <UART_SetConfig+0x284>
 8005f32:	e00b      	b.n	8005f4c <UART_SetConfig+0x290>
 8005f34:	2300      	movs	r3, #0
 8005f36:	76fb      	strb	r3, [r7, #27]
 8005f38:	e00d      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	76fb      	strb	r3, [r7, #27]
 8005f3e:	e00a      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005f40:	2304      	movs	r3, #4
 8005f42:	76fb      	strb	r3, [r7, #27]
 8005f44:	e007      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005f46:	2308      	movs	r3, #8
 8005f48:	76fb      	strb	r3, [r7, #27]
 8005f4a:	e004      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	76fb      	strb	r3, [r7, #27]
 8005f50:	e001      	b.n	8005f56 <UART_SetConfig+0x29a>
 8005f52:	2310      	movs	r3, #16
 8005f54:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <UART_SetConfig+0x2f4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	f040 809f 	bne.w	80060a0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f62:	7efb      	ldrb	r3, [r7, #27]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d837      	bhi.n	8005fd8 <UART_SetConfig+0x31c>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x2b4>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005fd9 	.word	0x08005fd9
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005fd9 	.word	0x08005fd9
 8005f80:	08005fa3 	.word	0x08005fa3
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005fd9 	.word	0x08005fd9
 8005f8c:	08005fd9 	.word	0x08005fd9
 8005f90:	08005fd1 	.word	0x08005fd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f94:	f7fd f864 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8005f98:	6178      	str	r0, [r7, #20]
        break;
 8005f9a:	e022      	b.n	8005fe2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <UART_SetConfig+0x310>)
 8005f9e:	617b      	str	r3, [r7, #20]
        break;
 8005fa0:	e01f      	b.n	8005fe2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa2:	f7fc ffc5 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8005fa6:	6178      	str	r0, [r7, #20]
        break;
 8005fa8:	e01b      	b.n	8005fe2 <UART_SetConfig+0x326>
 8005faa:	bf00      	nop
 8005fac:	cfff69f3 	.word	0xcfff69f3
 8005fb0:	40008000 	.word	0x40008000
 8005fb4:	40013800 	.word	0x40013800
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	40004400 	.word	0x40004400
 8005fc0:	40004800 	.word	0x40004800
 8005fc4:	40004c00 	.word	0x40004c00
 8005fc8:	40005000 	.word	0x40005000
 8005fcc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd4:	617b      	str	r3, [r7, #20]
        break;
 8005fd6:	e004      	b.n	8005fe2 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	76bb      	strb	r3, [r7, #26]
        break;
 8005fe0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8119 	beq.w	800621c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	4a95      	ldr	r2, [pc, #596]	; (8006244 <UART_SetConfig+0x588>)
 8005ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ffc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	4413      	add	r3, r2
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	429a      	cmp	r2, r3
 800600c:	d305      	bcc.n	800601a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	d902      	bls.n	8006020 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	76bb      	strb	r3, [r7, #26]
 800601e:	e0fd      	b.n	800621c <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	4618      	mov	r0, r3
 8006024:	f04f 0100 	mov.w	r1, #0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	4a85      	ldr	r2, [pc, #532]	; (8006244 <UART_SetConfig+0x588>)
 800602e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006032:	b29a      	uxth	r2, r3
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	f7fa fe16 	bl	8000c68 <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4610      	mov	r0, r2
 8006042:	4619      	mov	r1, r3
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	020b      	lsls	r3, r1, #8
 800604e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006052:	0202      	lsls	r2, r0, #8
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	6849      	ldr	r1, [r1, #4]
 8006058:	0849      	lsrs	r1, r1, #1
 800605a:	4608      	mov	r0, r1
 800605c:	f04f 0100 	mov.w	r1, #0
 8006060:	1814      	adds	r4, r2, r0
 8006062:	eb43 0501 	adc.w	r5, r3, r1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	461a      	mov	r2, r3
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	4620      	mov	r0, r4
 8006072:	4629      	mov	r1, r5
 8006074:	f7fa fdf8 	bl	8000c68 <__aeabi_uldivmod>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4613      	mov	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006086:	d308      	bcc.n	800609a <UART_SetConfig+0x3de>
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608e:	d204      	bcs.n	800609a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	60da      	str	r2, [r3, #12]
 8006098:	e0c0      	b.n	800621c <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	76bb      	strb	r3, [r7, #26]
 800609e:	e0bd      	b.n	800621c <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a8:	d164      	bne.n	8006174 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80060aa:	7efb      	ldrb	r3, [r7, #27]
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d828      	bhi.n	8006102 <UART_SetConfig+0x446>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0x3fc>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	08006103 	.word	0x08006103
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	08006103 	.word	0x08006103
 80060d0:	08006103 	.word	0x08006103
 80060d4:	08006103 	.word	0x08006103
 80060d8:	080060fb 	.word	0x080060fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060dc:	f7fc ffc0 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80060e0:	6178      	str	r0, [r7, #20]
        break;
 80060e2:	e013      	b.n	800610c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7fc ffd2 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 80060e8:	6178      	str	r0, [r7, #20]
        break;
 80060ea:	e00f      	b.n	800610c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b56      	ldr	r3, [pc, #344]	; (8006248 <UART_SetConfig+0x58c>)
 80060ee:	617b      	str	r3, [r7, #20]
        break;
 80060f0:	e00c      	b.n	800610c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7fc ff1d 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80060f6:	6178      	str	r0, [r7, #20]
        break;
 80060f8:	e008      	b.n	800610c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fe:	617b      	str	r3, [r7, #20]
        break;
 8006100:	e004      	b.n	800610c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	76bb      	strb	r3, [r7, #26]
        break;
 800610a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8084 	beq.w	800621c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	4a4a      	ldr	r2, [pc, #296]	; (8006244 <UART_SetConfig+0x588>)
 800611a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800611e:	461a      	mov	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	fbb3 f3f2 	udiv	r3, r3, r2
 8006126:	005a      	lsls	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	441a      	add	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b0f      	cmp	r3, #15
 800613e:	d916      	bls.n	800616e <UART_SetConfig+0x4b2>
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006146:	d212      	bcs.n	800616e <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f023 030f 	bic.w	r3, r3, #15
 8006150:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	b29b      	uxth	r3, r3
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	b29a      	uxth	r2, r3
 800615e:	89fb      	ldrh	r3, [r7, #14]
 8006160:	4313      	orrs	r3, r2
 8006162:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	89fa      	ldrh	r2, [r7, #14]
 800616a:	60da      	str	r2, [r3, #12]
 800616c:	e056      	b.n	800621c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	76bb      	strb	r3, [r7, #26]
 8006172:	e053      	b.n	800621c <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006174:	7efb      	ldrb	r3, [r7, #27]
 8006176:	2b08      	cmp	r3, #8
 8006178:	d827      	bhi.n	80061ca <UART_SetConfig+0x50e>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <UART_SetConfig+0x4c4>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	080061a5 	.word	0x080061a5
 8006184:	080061ad 	.word	0x080061ad
 8006188:	080061b5 	.word	0x080061b5
 800618c:	080061cb 	.word	0x080061cb
 8006190:	080061bb 	.word	0x080061bb
 8006194:	080061cb 	.word	0x080061cb
 8006198:	080061cb 	.word	0x080061cb
 800619c:	080061cb 	.word	0x080061cb
 80061a0:	080061c3 	.word	0x080061c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a4:	f7fc ff5c 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80061a8:	6178      	str	r0, [r7, #20]
        break;
 80061aa:	e013      	b.n	80061d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ac:	f7fc ff6e 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 80061b0:	6178      	str	r0, [r7, #20]
        break;
 80061b2:	e00f      	b.n	80061d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b4:	4b24      	ldr	r3, [pc, #144]	; (8006248 <UART_SetConfig+0x58c>)
 80061b6:	617b      	str	r3, [r7, #20]
        break;
 80061b8:	e00c      	b.n	80061d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ba:	f7fc feb9 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80061be:	6178      	str	r0, [r7, #20]
        break;
 80061c0:	e008      	b.n	80061d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c6:	617b      	str	r3, [r7, #20]
        break;
 80061c8:	e004      	b.n	80061d4 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	76bb      	strb	r3, [r7, #26]
        break;
 80061d2:	bf00      	nop
    }

    if (pclk != 0U)
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d020      	beq.n	800621c <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <UART_SetConfig+0x588>)
 80061e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e4:	461a      	mov	r2, r3
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	441a      	add	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fc:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b0f      	cmp	r3, #15
 8006202:	d909      	bls.n	8006218 <UART_SetConfig+0x55c>
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620a:	d205      	bcs.n	8006218 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	b29a      	uxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	e001      	b.n	800621c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006238:	7ebb      	ldrb	r3, [r7, #26]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bdb0      	pop	{r4, r5, r7, pc}
 8006242:	bf00      	nop
 8006244:	0800d4f0 	.word	0x0800d4f0
 8006248:	00f42400 	.word	0x00f42400

0800624c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01a      	beq.n	8006362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634a:	d10a      	bne.n	8006362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	605a      	str	r2, [r3, #4]
  }
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af02      	add	r7, sp, #8
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063a0:	f7fa fe0a 	bl	8000fb8 <HAL_GetTick>
 80063a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d10e      	bne.n	80063d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f82f 	bl	8006426 <UART_WaitOnFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e025      	b.n	800641e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d10e      	bne.n	80063fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f819 	bl	8006426 <UART_WaitOnFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e00f      	b.n	800641e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b09c      	sub	sp, #112	; 0x70
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	4613      	mov	r3, r2
 8006434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006436:	e0a9      	b.n	800658c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	f000 80a5 	beq.w	800658c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006442:	f7fa fdb9 	bl	8000fb8 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <UART_WaitOnFlagUntilTimeout+0x32>
 8006452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006454:	2b00      	cmp	r3, #0
 8006456:	d140      	bne.n	80064da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800646c:	667b      	str	r3, [r7, #100]	; 0x64
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006478:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800647c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e6      	bne.n	8006458 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3308      	adds	r3, #8
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	663b      	str	r3, [r7, #96]	; 0x60
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3308      	adds	r3, #8
 80064a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e5      	bne.n	800648a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e069      	b.n	80065ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d051      	beq.n	800658c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f6:	d149      	bne.n	800658c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006500:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e6      	bne.n	8006502 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3308      	adds	r3, #8
 800653a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	613b      	str	r3, [r7, #16]
   return(result);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	66bb      	str	r3, [r7, #104]	; 0x68
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006554:	623a      	str	r2, [r7, #32]
 8006556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	69f9      	ldr	r1, [r7, #28]
 800655a:	6a3a      	ldr	r2, [r7, #32]
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	61bb      	str	r3, [r7, #24]
   return(result);
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e5      	bne.n	8006534 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e010      	b.n	80065ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69da      	ldr	r2, [r3, #28]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4013      	ands	r3, r2
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	429a      	cmp	r2, r3
 800659a:	bf0c      	ite	eq
 800659c:	2301      	moveq	r3, #1
 800659e:	2300      	movne	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f43f af46 	beq.w	8006438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3770      	adds	r7, #112	; 0x70
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b0a3      	sub	sp, #140	; 0x8c
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ea:	d10e      	bne.n	800660a <UART_Start_Receive_IT+0x52>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <UART_Start_Receive_IT+0x48>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065fe:	e02d      	b.n	800665c <UART_Start_Receive_IT+0xa4>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	22ff      	movs	r2, #255	; 0xff
 8006604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006608:	e028      	b.n	800665c <UART_Start_Receive_IT+0xa4>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10d      	bne.n	800662e <UART_Start_Receive_IT+0x76>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <UART_Start_Receive_IT+0x6c>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	22ff      	movs	r2, #255	; 0xff
 800661e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006622:	e01b      	b.n	800665c <UART_Start_Receive_IT+0xa4>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	227f      	movs	r2, #127	; 0x7f
 8006628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800662c:	e016      	b.n	800665c <UART_Start_Receive_IT+0xa4>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006636:	d10d      	bne.n	8006654 <UART_Start_Receive_IT+0x9c>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <UART_Start_Receive_IT+0x92>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	227f      	movs	r2, #127	; 0x7f
 8006644:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006648:	e008      	b.n	800665c <UART_Start_Receive_IT+0xa4>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	223f      	movs	r2, #63	; 0x3f
 800664e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006652:	e003      	b.n	800665c <UART_Start_Receive_IT+0xa4>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2222      	movs	r2, #34	; 0x22
 8006668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800667c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006690:	673a      	str	r2, [r7, #112]	; 0x70
 8006692:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006696:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800669e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e3      	bne.n	800666c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ac:	d153      	bne.n	8006756 <UART_Start_Receive_IT+0x19e>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d34d      	bcc.n	8006756 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	d107      	bne.n	80066d4 <UART_Start_Receive_IT+0x11c>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a4b      	ldr	r2, [pc, #300]	; (80067fc <UART_Start_Receive_IT+0x244>)
 80066d0:	671a      	str	r2, [r3, #112]	; 0x70
 80066d2:	e002      	b.n	80066da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a4a      	ldr	r2, [pc, #296]	; (8006800 <UART_Start_Receive_IT+0x248>)
 80066d8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01a      	beq.n	8006720 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800670c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800670e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006712:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800671a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e4      	bne.n	80066ea <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3308      	adds	r3, #8
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006736:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006740:	64ba      	str	r2, [r7, #72]	; 0x48
 8006742:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800674e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e5      	bne.n	8006720 <UART_Start_Receive_IT+0x168>
 8006754:	e04a      	b.n	80067ec <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675e:	d107      	bne.n	8006770 <UART_Start_Receive_IT+0x1b8>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a26      	ldr	r2, [pc, #152]	; (8006804 <UART_Start_Receive_IT+0x24c>)
 800676c:	671a      	str	r2, [r3, #112]	; 0x70
 800676e:	e002      	b.n	8006776 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a25      	ldr	r2, [pc, #148]	; (8006808 <UART_Start_Receive_IT+0x250>)
 8006774:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d019      	beq.n	80067ba <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800679a:	677b      	str	r3, [r7, #116]	; 0x74
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	461a      	mov	r2, r3
 80067a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067a4:	637b      	str	r3, [r7, #52]	; 0x34
 80067a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e6      	bne.n	8006786 <UART_Start_Receive_IT+0x1ce>
 80067b8:	e018      	b.n	80067ec <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	613b      	str	r3, [r7, #16]
   return(result);
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f043 0320 	orr.w	r3, r3, #32
 80067ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d8:	623b      	str	r3, [r7, #32]
 80067da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	6a3a      	ldr	r2, [r7, #32]
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e6      	bne.n	80067ba <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	378c      	adds	r7, #140	; 0x8c
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	08006f21 	.word	0x08006f21
 8006800:	08006c25 	.word	0x08006c25
 8006804:	08006abf 	.word	0x08006abf
 8006808:	0800695b 	.word	0x0800695b

0800680c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b095      	sub	sp, #84	; 0x54
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006832:	643b      	str	r3, [r7, #64]	; 0x40
 8006834:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e6      	bne.n	8006814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	61fb      	str	r3, [r7, #28]
   return(result);
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	64bb      	str	r3, [r7, #72]	; 0x48
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e3      	bne.n	8006846 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006882:	2b01      	cmp	r3, #1
 8006884:	d118      	bne.n	80068b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	60bb      	str	r3, [r7, #8]
   return(result);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f023 0310 	bic.w	r3, r3, #16
 800689a:	647b      	str	r3, [r7, #68]	; 0x44
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6979      	ldr	r1, [r7, #20]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	613b      	str	r3, [r7, #16]
   return(result);
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e6      	bne.n	8006886 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 80068cc:	bf00      	nop
 80068ce:	3754      	adds	r7, #84	; 0x54
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff f9ca 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	60bb      	str	r3, [r7, #8]
   return(result);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006920:	61fb      	str	r3, [r7, #28]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	613b      	str	r3, [r7, #16]
   return(result);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e6      	bne.n	800690c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff f995 	bl	8005c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006952:	bf00      	nop
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b096      	sub	sp, #88	; 0x58
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006968:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006972:	2b22      	cmp	r3, #34	; 0x22
 8006974:	f040 8095 	bne.w	8006aa2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800697e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006982:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006986:	b2d9      	uxtb	r1, r3
 8006988:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800698c:	b2da      	uxtb	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006992:	400a      	ands	r2, r1
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d17a      	bne.n	8006ab6 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d4:	653b      	str	r3, [r7, #80]	; 0x50
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069de:	647b      	str	r3, [r7, #68]	; 0x44
 80069e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e6      	bne.n	80069c0 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	623b      	str	r3, [r7, #32]
   return(result);
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a12:	633a      	str	r2, [r7, #48]	; 0x30
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d12e      	bne.n	8006a9a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0310 	bic.w	r3, r3, #16
 8006a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	69b9      	ldr	r1, [r7, #24]
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e6      	bne.n	8006a42 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d103      	bne.n	8006a8a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2210      	movs	r2, #16
 8006a88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff f906 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a98:	e00d      	b.n	8006ab6 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f004 fd0a 	bl	800b4b4 <HAL_UART_RxCpltCallback>
}
 8006aa0:	e009      	b.n	8006ab6 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	8b1b      	ldrh	r3, [r3, #24]
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0208 	orr.w	r2, r2, #8
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	831a      	strh	r2, [r3, #24]
}
 8006ab6:	bf00      	nop
 8006ab8:	3758      	adds	r7, #88	; 0x58
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b096      	sub	sp, #88	; 0x58
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006acc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad6:	2b22      	cmp	r3, #34	; 0x22
 8006ad8:	f040 8095 	bne.w	8006c06 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ae2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006aec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006af0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006af4:	4013      	ands	r3, r2
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006afa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b00:	1c9a      	adds	r2, r3, #2
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d17a      	bne.n	8006c1a <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b42:	643b      	str	r3, [r7, #64]	; 0x40
 8006b44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e6      	bne.n	8006b24 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d12e      	bne.n	8006bfe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	647b      	str	r3, [r7, #68]	; 0x44
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6979      	ldr	r1, [r7, #20]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d103      	bne.n	8006bee <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2210      	movs	r2, #16
 8006bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff f854 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bfc:	e00d      	b.n	8006c1a <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f004 fc58 	bl	800b4b4 <HAL_UART_RxCpltCallback>
}
 8006c04:	e009      	b.n	8006c1a <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	8b1b      	ldrh	r3, [r3, #24]
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0208 	orr.w	r2, r2, #8
 8006c16:	b292      	uxth	r2, r2
 8006c18:	831a      	strh	r2, [r3, #24]
}
 8006c1a:	bf00      	nop
 8006c1c:	3758      	adds	r7, #88	; 0x58
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b0a6      	sub	sp, #152	; 0x98
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c32:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5a:	2b22      	cmp	r3, #34	; 0x22
 8006c5c:	f040 814f 	bne.w	8006efe <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c66:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c6a:	e0f6      	b.n	8006e5a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c72:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c76:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006c7a:	b2d9      	uxtb	r1, r3
 8006c7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c86:	400a      	ands	r2, r1
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d053      	beq.n	8006d66 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d011      	beq.n	8006cee <UART_RxISR_8BIT_FIFOEN+0xca>
 8006cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00b      	beq.n	8006cee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce4:	f043 0201 	orr.w	r2, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d011      	beq.n	8006d1e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d14:	f043 0204 	orr.w	r2, r3, #4
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d44:	f043 0202 	orr.w	r2, r3, #2
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d006      	beq.n	8006d66 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7fe ff99 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d173      	bne.n	8006e5a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d96:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006d9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e4      	bne.n	8006d72 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006dcc:	657a      	str	r2, [r7, #84]	; 0x54
 8006dce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e3      	bne.n	8006da8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d12e      	bne.n	8006e54 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	f023 0310 	bic.w	r3, r3, #16
 8006e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e6      	bne.n	8006dfc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d103      	bne.n	8006e44 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2210      	movs	r2, #16
 8006e42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fe ff29 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
 8006e52:	e002      	b.n	8006e5a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f004 fb2d 	bl	800b4b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d006      	beq.n	8006e70 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f47f aefe 	bne.w	8006c6c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e7a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d047      	beq.n	8006f12 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d240      	bcs.n	8006f12 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e5      	bne.n	8006e90 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8006ec8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f043 0320 	orr.w	r3, r3, #32
 8006ede:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee8:	61bb      	str	r3, [r7, #24]
 8006eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6979      	ldr	r1, [r7, #20]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e6      	bne.n	8006eca <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006efc:	e009      	b.n	8006f12 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	8b1b      	ldrh	r3, [r3, #24]
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0208 	orr.w	r2, r2, #8
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	831a      	strh	r2, [r3, #24]
}
 8006f12:	bf00      	nop
 8006f14:	3798      	adds	r7, #152	; 0x98
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	0800695b 	.word	0x0800695b

08006f20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b0a8      	sub	sp, #160	; 0xa0
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f2e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f56:	2b22      	cmp	r3, #34	; 0x22
 8006f58:	f040 8153 	bne.w	8007202 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f62:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f66:	e0fa      	b.n	800715e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f6e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f7a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006f7e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f82:	4013      	ands	r3, r2
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	1c9a      	adds	r2, r3, #2
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d053      	beq.n	8007066 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d011      	beq.n	8006fee <UART_RxISR_16BIT_FIFOEN+0xce>
 8006fca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00b      	beq.n	8006fee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe4:	f043 0201 	orr.w	r2, r3, #1
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d011      	beq.n	800701e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2202      	movs	r2, #2
 800700c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007014:	f043 0204 	orr.w	r2, r3, #4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800701e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d011      	beq.n	800704e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800702a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00b      	beq.n	800704e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2204      	movs	r2, #4
 800703c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007044:	f043 0202 	orr.w	r2, r3, #2
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d006      	beq.n	8007066 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7fe fe19 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d175      	bne.n	800715e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007096:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800709a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e4      	bne.n	8007072 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070be:	f023 0301 	bic.w	r3, r3, #1
 80070c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80070d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e1      	bne.n	80070a8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d12e      	bne.n	8007158 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800710e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007110:	f023 0310 	bic.w	r3, r3, #16
 8007114:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800711e:	647b      	str	r3, [r7, #68]	; 0x44
 8007120:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800712c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f003 0310 	and.w	r3, r3, #16
 800713c:	2b10      	cmp	r3, #16
 800713e:	d103      	bne.n	8007148 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2210      	movs	r2, #16
 8007146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7fe fda7 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
 8007156:	e002      	b.n	800715e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f004 f9ab 	bl	800b4b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800715e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007162:	2b00      	cmp	r3, #0
 8007164:	d006      	beq.n	8007174 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007166:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	f47f aefa 	bne.w	8006f68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800717a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800717e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007182:	2b00      	cmp	r3, #0
 8007184:	d047      	beq.n	8007216 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800718c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007190:	429a      	cmp	r2, r3
 8007192:	d240      	bcs.n	8007216 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3308      	adds	r3, #8
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	623b      	str	r3, [r7, #32]
   return(result);
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071aa:	677b      	str	r3, [r7, #116]	; 0x74
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3308      	adds	r3, #8
 80071b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80071b4:	633a      	str	r2, [r7, #48]	; 0x30
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e5      	bne.n	8007194 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a15      	ldr	r2, [pc, #84]	; (8007220 <UART_RxISR_16BIT_FIFOEN+0x300>)
 80071cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	60fb      	str	r3, [r7, #12]
   return(result);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f043 0320 	orr.w	r3, r3, #32
 80071e2:	673b      	str	r3, [r7, #112]	; 0x70
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	69b9      	ldr	r1, [r7, #24]
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	617b      	str	r3, [r7, #20]
   return(result);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e6      	bne.n	80071ce <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007200:	e009      	b.n	8007216 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	8b1b      	ldrh	r3, [r3, #24]
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	b292      	uxth	r2, r2
 8007214:	831a      	strh	r2, [r3, #24]
}
 8007216:	bf00      	nop
 8007218:	37a0      	adds	r7, #160	; 0xa0
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	08006abf 	.word	0x08006abf

08007224 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <HAL_UARTEx_DisableFifoMode+0x16>
 8007272:	2302      	movs	r3, #2
 8007274:	e027      	b.n	80072c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2224      	movs	r2, #36	; 0x24
 8007282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0201 	bic.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e02d      	b.n	8007346 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2224      	movs	r2, #36	; 0x24
 80072f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0201 	bic.w	r2, r2, #1
 8007310:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f850 	bl	80073cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007362:	2302      	movs	r3, #2
 8007364:	e02d      	b.n	80073c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2224      	movs	r2, #36	; 0x24
 8007372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f812 	bl	80073cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d108      	bne.n	80073ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073ec:	e031      	b.n	8007452 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073ee:	2308      	movs	r3, #8
 80073f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073f2:	2308      	movs	r3, #8
 80073f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	0e5b      	lsrs	r3, r3, #25
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	0f5b      	lsrs	r3, r3, #29
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	7b3a      	ldrb	r2, [r7, #12]
 800741a:	4911      	ldr	r1, [pc, #68]	; (8007460 <UARTEx_SetNbDataToProcess+0x94>)
 800741c:	5c8a      	ldrb	r2, [r1, r2]
 800741e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007422:	7b3a      	ldrb	r2, [r7, #12]
 8007424:	490f      	ldr	r1, [pc, #60]	; (8007464 <UARTEx_SetNbDataToProcess+0x98>)
 8007426:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007428:	fb93 f3f2 	sdiv	r3, r3, r2
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	7b7a      	ldrb	r2, [r7, #13]
 8007438:	4909      	ldr	r1, [pc, #36]	; (8007460 <UARTEx_SetNbDataToProcess+0x94>)
 800743a:	5c8a      	ldrb	r2, [r1, r2]
 800743c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007440:	7b7a      	ldrb	r2, [r7, #13]
 8007442:	4908      	ldr	r1, [pc, #32]	; (8007464 <UARTEx_SetNbDataToProcess+0x98>)
 8007444:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007446:	fb93 f3f2 	sdiv	r3, r3, r2
 800744a:	b29a      	uxth	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	0800d508 	.word	0x0800d508
 8007464:	0800d510 	.word	0x0800d510

08007468 <__NVIC_SetPriority>:
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007478:	2b00      	cmp	r3, #0
 800747a:	db0a      	blt.n	8007492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	490c      	ldr	r1, [pc, #48]	; (80074b4 <__NVIC_SetPriority+0x4c>)
 8007482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007486:	0112      	lsls	r2, r2, #4
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	440b      	add	r3, r1
 800748c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007490:	e00a      	b.n	80074a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	4908      	ldr	r1, [pc, #32]	; (80074b8 <__NVIC_SetPriority+0x50>)
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	3b04      	subs	r3, #4
 80074a0:	0112      	lsls	r2, r2, #4
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	440b      	add	r3, r1
 80074a6:	761a      	strb	r2, [r3, #24]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	e000e100 	.word	0xe000e100
 80074b8:	e000ed00 	.word	0xe000ed00

080074bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <SysTick_Handler+0x1c>)
 80074c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074c4:	f001 fd28 	bl	8008f18 <xTaskGetSchedulerState>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d001      	beq.n	80074d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80074ce:	f002 fb13 	bl	8009af8 <xPortSysTickHandler>
  }
}
 80074d2:	bf00      	nop
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	e000e010 	.word	0xe000e010

080074dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074e0:	2100      	movs	r1, #0
 80074e2:	f06f 0004 	mvn.w	r0, #4
 80074e6:	f7ff ffbf 	bl	8007468 <__NVIC_SetPriority>
#endif
}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f6:	f3ef 8305 	mrs	r3, IPSR
 80074fa:	603b      	str	r3, [r7, #0]
  return(result);
 80074fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007502:	f06f 0305 	mvn.w	r3, #5
 8007506:	607b      	str	r3, [r7, #4]
 8007508:	e00c      	b.n	8007524 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <osKernelInitialize+0x44>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007512:	4b08      	ldr	r3, [pc, #32]	; (8007534 <osKernelInitialize+0x44>)
 8007514:	2201      	movs	r2, #1
 8007516:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007518:	2300      	movs	r3, #0
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	e002      	b.n	8007524 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800751e:	f04f 33ff 	mov.w	r3, #4294967295
 8007522:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007524:	687b      	ldr	r3, [r7, #4]
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	2000067c 	.word	0x2000067c

08007538 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800753e:	f3ef 8305 	mrs	r3, IPSR
 8007542:	603b      	str	r3, [r7, #0]
  return(result);
 8007544:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <osKernelStart+0x1a>
    stat = osErrorISR;
 800754a:	f06f 0305 	mvn.w	r3, #5
 800754e:	607b      	str	r3, [r7, #4]
 8007550:	e010      	b.n	8007574 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007552:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <osKernelStart+0x48>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d109      	bne.n	800756e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800755a:	f7ff ffbf 	bl	80074dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800755e:	4b08      	ldr	r3, [pc, #32]	; (8007580 <osKernelStart+0x48>)
 8007560:	2202      	movs	r2, #2
 8007562:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007564:	f001 f87c 	bl	8008660 <vTaskStartScheduler>
      stat = osOK;
 8007568:	2300      	movs	r3, #0
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	e002      	b.n	8007574 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800756e:	f04f 33ff 	mov.w	r3, #4294967295
 8007572:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007574:	687b      	ldr	r3, [r7, #4]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	2000067c 	.word	0x2000067c

08007584 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007584:	b580      	push	{r7, lr}
 8007586:	b08e      	sub	sp, #56	; 0x38
 8007588:	af04      	add	r7, sp, #16
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007594:	f3ef 8305 	mrs	r3, IPSR
 8007598:	617b      	str	r3, [r7, #20]
  return(result);
 800759a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800759c:	2b00      	cmp	r3, #0
 800759e:	d17e      	bne.n	800769e <osThreadNew+0x11a>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d07b      	beq.n	800769e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075aa:	2318      	movs	r3, #24
 80075ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80075b2:	f04f 33ff 	mov.w	r3, #4294967295
 80075b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d045      	beq.n	800764a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <osThreadNew+0x48>
        name = attr->name;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d008      	beq.n	80075f2 <osThreadNew+0x6e>
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	2b38      	cmp	r3, #56	; 0x38
 80075e4:	d805      	bhi.n	80075f2 <osThreadNew+0x6e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <osThreadNew+0x72>
        return (NULL);
 80075f2:	2300      	movs	r3, #0
 80075f4:	e054      	b.n	80076a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	089b      	lsrs	r3, r3, #2
 8007604:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00e      	beq.n	800762c <osThreadNew+0xa8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	2bbb      	cmp	r3, #187	; 0xbb
 8007614:	d90a      	bls.n	800762c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800761a:	2b00      	cmp	r3, #0
 800761c:	d006      	beq.n	800762c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <osThreadNew+0xa8>
        mem = 1;
 8007626:	2301      	movs	r3, #1
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	e010      	b.n	800764e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10c      	bne.n	800764e <osThreadNew+0xca>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d108      	bne.n	800764e <osThreadNew+0xca>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <osThreadNew+0xca>
          mem = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	e001      	b.n	800764e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d110      	bne.n	8007676 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800765c:	9202      	str	r2, [sp, #8]
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6a3a      	ldr	r2, [r7, #32]
 8007668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fe0c 	bl	8008288 <xTaskCreateStatic>
 8007670:	4603      	mov	r3, r0
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	e013      	b.n	800769e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d110      	bne.n	800769e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	b29a      	uxth	r2, r3
 8007680:	f107 0310 	add.w	r3, r7, #16
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fe57 	bl	8008342 <xTaskCreate>
 8007694:	4603      	mov	r3, r0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d001      	beq.n	800769e <osThreadNew+0x11a>
            hTask = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800769e:	693b      	ldr	r3, [r7, #16]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3728      	adds	r7, #40	; 0x28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b0:	f3ef 8305 	mrs	r3, IPSR
 80076b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80076b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <osDelay+0x1c>
    stat = osErrorISR;
 80076bc:	f06f 0305 	mvn.w	r3, #5
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e007      	b.n	80076d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 ff92 	bl	80085f8 <vTaskDelay>
    }
  }

  return (stat);
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4a07      	ldr	r2, [pc, #28]	; (800770c <vApplicationGetIdleTaskMemory+0x2c>)
 80076f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	4a06      	ldr	r2, [pc, #24]	; (8007710 <vApplicationGetIdleTaskMemory+0x30>)
 80076f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2280      	movs	r2, #128	; 0x80
 80076fc:	601a      	str	r2, [r3, #0]
}
 80076fe:	bf00      	nop
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20000680 	.word	0x20000680
 8007710:	2000073c 	.word	0x2000073c

08007714 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4a07      	ldr	r2, [pc, #28]	; (8007740 <vApplicationGetTimerTaskMemory+0x2c>)
 8007724:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	4a06      	ldr	r2, [pc, #24]	; (8007744 <vApplicationGetTimerTaskMemory+0x30>)
 800772a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007732:	601a      	str	r2, [r3, #0]
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	2000093c 	.word	0x2000093c
 8007744:	200009f8 	.word	0x200009f8

08007748 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f103 0208 	add.w	r2, r3, #8
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f04f 32ff 	mov.w	r2, #4294967295
 8007760:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f103 0208 	add.w	r2, r3, #8
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f103 0208 	add.w	r2, r3, #8
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	601a      	str	r2, [r3, #0]
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d103      	bne.n	800780a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e00c      	b.n	8007824 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3308      	adds	r3, #8
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	e002      	b.n	8007818 <vListInsert+0x2e>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	d2f6      	bcs.n	8007812 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	601a      	str	r2, [r3, #0]
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6892      	ldr	r2, [r2, #8]
 8007872:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6852      	ldr	r2, [r2, #4]
 800787c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	d103      	bne.n	8007890 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	1e5a      	subs	r2, r3, #1
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10a      	bne.n	80078da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078da:	f002 f87b 	bl	80099d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e6:	68f9      	ldr	r1, [r7, #12]
 80078e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078ea:	fb01 f303 	mul.w	r3, r1, r3
 80078ee:	441a      	add	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790a:	3b01      	subs	r3, #1
 800790c:	68f9      	ldr	r1, [r7, #12]
 800790e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007910:	fb01 f303 	mul.w	r3, r1, r3
 8007914:	441a      	add	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	22ff      	movs	r2, #255	; 0xff
 800791e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	22ff      	movs	r2, #255	; 0xff
 8007926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d114      	bne.n	800795a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01a      	beq.n	800796e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3310      	adds	r3, #16
 800793c:	4618      	mov	r0, r3
 800793e:	f001 f929 	bl	8008b94 <xTaskRemoveFromEventList>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d012      	beq.n	800796e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <xQueueGenericReset+0xcc>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	e009      	b.n	800796e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3310      	adds	r3, #16
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fef2 	bl	8007748 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3324      	adds	r3, #36	; 0x24
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff feed 	bl	8007748 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800796e:	f002 f861 	bl	8009a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007972:	2301      	movs	r3, #1
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	e000ed04 	.word	0xe000ed04

08007980 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08e      	sub	sp, #56	; 0x38
 8007984:	af02      	add	r7, sp, #8
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <xQueueGenericCreateStatic+0x52>
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <xQueueGenericCreateStatic+0x56>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <xQueueGenericCreateStatic+0x58>
 80079d6:	2300      	movs	r3, #0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	623b      	str	r3, [r7, #32]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d102      	bne.n	80079fe <xQueueGenericCreateStatic+0x7e>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <xQueueGenericCreateStatic+0x82>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <xQueueGenericCreateStatic+0x84>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	61fb      	str	r3, [r7, #28]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a1e:	2350      	movs	r3, #80	; 0x50
 8007a20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b50      	cmp	r3, #80	; 0x50
 8007a26:	d00a      	beq.n	8007a3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	61bb      	str	r3, [r7, #24]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00d      	beq.n	8007a66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f805 	bl	8007a70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3730      	adds	r7, #48	; 0x30
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e002      	b.n	8007a92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	69b8      	ldr	r0, [r7, #24]
 8007aa2:	f7ff ff05 	bl	80078b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	78fa      	ldrb	r2, [r7, #3]
 8007aaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08e      	sub	sp, #56	; 0x38
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <xQueueGenericSend+0x32>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <xQueueGenericSend+0x40>
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <xQueueGenericSend+0x44>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <xQueueGenericSend+0x46>
 8007afc:	2300      	movs	r3, #0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10a      	bne.n	8007b18 <xQueueGenericSend+0x60>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d103      	bne.n	8007b26 <xQueueGenericSend+0x6e>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <xQueueGenericSend+0x72>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <xQueueGenericSend+0x74>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10a      	bne.n	8007b46 <xQueueGenericSend+0x8e>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	623b      	str	r3, [r7, #32]
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b46:	f001 f9e7 	bl	8008f18 <xTaskGetSchedulerState>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <xQueueGenericSend+0x9e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <xQueueGenericSend+0xa2>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <xQueueGenericSend+0xa4>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <xQueueGenericSend+0xbe>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	61fb      	str	r3, [r7, #28]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b76:	f001 ff2d 	bl	80099d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d302      	bcc.n	8007b8c <xQueueGenericSend+0xd4>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d129      	bne.n	8007be0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b92:	f000 fa0b 	bl	8007fac <prvCopyDataToQueue>
 8007b96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d010      	beq.n	8007bc2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	3324      	adds	r3, #36	; 0x24
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fff5 	bl	8008b94 <xTaskRemoveFromEventList>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d013      	beq.n	8007bd8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bb0:	4b3f      	ldr	r3, [pc, #252]	; (8007cb0 <xQueueGenericSend+0x1f8>)
 8007bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	e00a      	b.n	8007bd8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007bc8:	4b39      	ldr	r3, [pc, #228]	; (8007cb0 <xQueueGenericSend+0x1f8>)
 8007bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bd8:	f001 ff2c 	bl	8009a34 <vPortExitCritical>
				return pdPASS;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e063      	b.n	8007ca8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007be6:	f001 ff25 	bl	8009a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e05c      	b.n	8007ca8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bf4:	f107 0314 	add.w	r3, r7, #20
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f82f 	bl	8008c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c02:	f001 ff17 	bl	8009a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c06:	f000 fd9b 	bl	8008740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c0a:	f001 fee3 	bl	80099d4 <vPortEnterCritical>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c14:	b25b      	sxtb	r3, r3
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1a:	d103      	bne.n	8007c24 <xQueueGenericSend+0x16c>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d103      	bne.n	8007c3a <xQueueGenericSend+0x182>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c3a:	f001 fefb 	bl	8009a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c3e:	1d3a      	adds	r2, r7, #4
 8007c40:	f107 0314 	add.w	r3, r7, #20
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 f81e 	bl	8008c88 <xTaskCheckForTimeOut>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d124      	bne.n	8007c9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c54:	f000 faa2 	bl	800819c <prvIsQueueFull>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d018      	beq.n	8007c90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	3310      	adds	r3, #16
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 ff44 	bl	8008af4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c6e:	f000 fa2d 	bl	80080cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c72:	f000 fd73 	bl	800875c <xTaskResumeAll>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f47f af7c 	bne.w	8007b76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <xQueueGenericSend+0x1f8>)
 8007c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	e772      	b.n	8007b76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c92:	f000 fa1b 	bl	80080cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c96:	f000 fd61 	bl	800875c <xTaskResumeAll>
 8007c9a:	e76c      	b.n	8007b76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c9e:	f000 fa15 	bl	80080cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ca2:	f000 fd5b 	bl	800875c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ca6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3738      	adds	r7, #56	; 0x38
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	e000ed04 	.word	0xe000ed04

08007cb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b090      	sub	sp, #64	; 0x40
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <xQueueGenericSendFromISR+0x3c>
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <xQueueGenericSendFromISR+0x40>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e000      	b.n	8007cf6 <xQueueGenericSendFromISR+0x42>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d103      	bne.n	8007d1e <xQueueGenericSendFromISR+0x6a>
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <xQueueGenericSendFromISR+0x6e>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <xQueueGenericSendFromISR+0x70>
 8007d22:	2300      	movs	r3, #0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10a      	bne.n	8007d3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	623b      	str	r3, [r7, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	e7fe      	b.n	8007d3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d3e:	f001 ff2b 	bl	8009b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d42:	f3ef 8211 	mrs	r2, BASEPRI
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	61fa      	str	r2, [r7, #28]
 8007d58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d302      	bcc.n	8007d70 <xQueueGenericSendFromISR+0xbc>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d12f      	bne.n	8007dd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d86:	f000 f911 	bl	8007fac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d112      	bne.n	8007dba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d016      	beq.n	8007dca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	3324      	adds	r3, #36	; 0x24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fef7 	bl	8008b94 <xTaskRemoveFromEventList>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00e      	beq.n	8007dca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00b      	beq.n	8007dca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e007      	b.n	8007dca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	b25a      	sxtb	r2, r3
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007dce:	e001      	b.n	8007dd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3740      	adds	r7, #64	; 0x40
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08c      	sub	sp, #48	; 0x30
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <xQueueReceive+0x30>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	623b      	str	r3, [r7, #32]
}
 8007e18:	bf00      	nop
 8007e1a:	e7fe      	b.n	8007e1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <xQueueReceive+0x3e>
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <xQueueReceive+0x42>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <xQueueReceive+0x44>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <xQueueReceive+0x5e>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	61fb      	str	r3, [r7, #28]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e4a:	f001 f865 	bl	8008f18 <xTaskGetSchedulerState>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <xQueueReceive+0x6e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <xQueueReceive+0x72>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <xQueueReceive+0x74>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <xQueueReceive+0x8e>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	61bb      	str	r3, [r7, #24]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e7a:	f001 fdab 	bl	80099d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01f      	beq.n	8007eca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8e:	f000 f8f7 	bl	8008080 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	1e5a      	subs	r2, r3, #1
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00f      	beq.n	8007ec2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	3310      	adds	r3, #16
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fe74 	bl	8008b94 <xTaskRemoveFromEventList>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007eb2:	4b3d      	ldr	r3, [pc, #244]	; (8007fa8 <xQueueReceive+0x1bc>)
 8007eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ec2:	f001 fdb7 	bl	8009a34 <vPortExitCritical>
				return pdPASS;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e069      	b.n	8007f9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d103      	bne.n	8007ed8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ed0:	f001 fdb0 	bl	8009a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e062      	b.n	8007f9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ede:	f107 0310 	add.w	r3, r7, #16
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 feba 	bl	8008c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eec:	f001 fda2 	bl	8009a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ef0:	f000 fc26 	bl	8008740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ef4:	f001 fd6e 	bl	80099d4 <vPortEnterCritical>
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007efe:	b25b      	sxtb	r3, r3
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f04:	d103      	bne.n	8007f0e <xQueueReceive+0x122>
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f14:	b25b      	sxtb	r3, r3
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d103      	bne.n	8007f24 <xQueueReceive+0x138>
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f24:	f001 fd86 	bl	8009a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f28:	1d3a      	adds	r2, r7, #4
 8007f2a:	f107 0310 	add.w	r3, r7, #16
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fea9 	bl	8008c88 <xTaskCheckForTimeOut>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d123      	bne.n	8007f84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3e:	f000 f917 	bl	8008170 <prvIsQueueEmpty>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d017      	beq.n	8007f78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	3324      	adds	r3, #36	; 0x24
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4611      	mov	r1, r2
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fdcf 	bl	8008af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f58:	f000 f8b8 	bl	80080cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f5c:	f000 fbfe 	bl	800875c <xTaskResumeAll>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d189      	bne.n	8007e7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f66:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <xQueueReceive+0x1bc>)
 8007f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	e780      	b.n	8007e7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7a:	f000 f8a7 	bl	80080cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f7e:	f000 fbed 	bl	800875c <xTaskResumeAll>
 8007f82:	e77a      	b.n	8007e7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f86:	f000 f8a1 	bl	80080cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f8a:	f000 fbe7 	bl	800875c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f90:	f000 f8ee 	bl	8008170 <prvIsQueueEmpty>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f43f af6f 	beq.w	8007e7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3730      	adds	r7, #48	; 0x30
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	e000ed04 	.word	0xe000ed04

08007fac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10d      	bne.n	8007fe6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d14d      	bne.n	800806e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 ffbc 	bl	8008f54 <xTaskPriorityDisinherit>
 8007fdc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	609a      	str	r2, [r3, #8]
 8007fe4:	e043      	b.n	800806e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d119      	bne.n	8008020 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6858      	ldr	r0, [r3, #4]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	f004 fb60 	bl	800c6bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	441a      	add	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	429a      	cmp	r2, r3
 8008014:	d32b      	bcc.n	800806e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	605a      	str	r2, [r3, #4]
 800801e:	e026      	b.n	800806e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	68d8      	ldr	r0, [r3, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008028:	461a      	mov	r2, r3
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	f004 fb46 	bl	800c6bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	425b      	negs	r3, r3
 800803a:	441a      	add	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d207      	bcs.n	800805c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	425b      	negs	r3, r3
 8008056:	441a      	add	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d105      	bne.n	800806e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	3b01      	subs	r3, #1
 800806c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008076:	697b      	ldr	r3, [r7, #20]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d018      	beq.n	80080c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	441a      	add	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d303      	bcc.n	80080b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68d9      	ldr	r1, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080bc:	461a      	mov	r2, r3
 80080be:	6838      	ldr	r0, [r7, #0]
 80080c0:	f004 fafc 	bl	800c6bc <memcpy>
	}
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080d4:	f001 fc7e 	bl	80099d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080e0:	e011      	b.n	8008106 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d012      	beq.n	8008110 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3324      	adds	r3, #36	; 0x24
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fd50 	bl	8008b94 <xTaskRemoveFromEventList>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080fa:	f000 fe27 	bl	8008d4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	3b01      	subs	r3, #1
 8008102:	b2db      	uxtb	r3, r3
 8008104:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	dce9      	bgt.n	80080e2 <prvUnlockQueue+0x16>
 800810e:	e000      	b.n	8008112 <prvUnlockQueue+0x46>
					break;
 8008110:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	22ff      	movs	r2, #255	; 0xff
 8008116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800811a:	f001 fc8b 	bl	8009a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800811e:	f001 fc59 	bl	80099d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008128:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800812a:	e011      	b.n	8008150 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d012      	beq.n	800815a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3310      	adds	r3, #16
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fd2b 	bl	8008b94 <xTaskRemoveFromEventList>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008144:	f000 fe02 	bl	8008d4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	3b01      	subs	r3, #1
 800814c:	b2db      	uxtb	r3, r3
 800814e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008154:	2b00      	cmp	r3, #0
 8008156:	dce9      	bgt.n	800812c <prvUnlockQueue+0x60>
 8008158:	e000      	b.n	800815c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800815a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	22ff      	movs	r2, #255	; 0xff
 8008160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008164:	f001 fc66 	bl	8009a34 <vPortExitCritical>
}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008178:	f001 fc2c 	bl	80099d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	2b00      	cmp	r3, #0
 8008182:	d102      	bne.n	800818a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	e001      	b.n	800818e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800818e:	f001 fc51 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 8008192:	68fb      	ldr	r3, [r7, #12]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081a4:	f001 fc16 	bl	80099d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d102      	bne.n	80081ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081b4:	2301      	movs	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e001      	b.n	80081be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081be:	f001 fc39 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 80081c2:	68fb      	ldr	r3, [r7, #12]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	e014      	b.n	8008206 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081dc:	4a0f      	ldr	r2, [pc, #60]	; (800821c <vQueueAddToRegistry+0x50>)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081e8:	490c      	ldr	r1, [pc, #48]	; (800821c <vQueueAddToRegistry+0x50>)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081f2:	4a0a      	ldr	r2, [pc, #40]	; (800821c <vQueueAddToRegistry+0x50>)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081fe:	e006      	b.n	800820e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b07      	cmp	r3, #7
 800820a:	d9e7      	bls.n	80081dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	20002024 	.word	0x20002024

08008220 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008230:	f001 fbd0 	bl	80099d4 <vPortEnterCritical>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800823a:	b25b      	sxtb	r3, r3
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d103      	bne.n	800824a <vQueueWaitForMessageRestricted+0x2a>
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008250:	b25b      	sxtb	r3, r3
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d103      	bne.n	8008260 <vQueueWaitForMessageRestricted+0x40>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008260:	f001 fbe8 	bl	8009a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	2b00      	cmp	r3, #0
 800826a:	d106      	bne.n	800827a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	3324      	adds	r3, #36	; 0x24
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fc61 	bl	8008b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800827a:	6978      	ldr	r0, [r7, #20]
 800827c:	f7ff ff26 	bl	80080cc <prvUnlockQueue>
	}
 8008280:	bf00      	nop
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08e      	sub	sp, #56	; 0x38
 800828c:	af04      	add	r7, sp, #16
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	623b      	str	r3, [r7, #32]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xTaskCreateStatic+0x46>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	61fb      	str	r3, [r7, #28]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082ce:	23bc      	movs	r3, #188	; 0xbc
 80082d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	2bbc      	cmp	r3, #188	; 0xbc
 80082d6:	d00a      	beq.n	80082ee <xTaskCreateStatic+0x66>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	61bb      	str	r3, [r7, #24]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d01e      	beq.n	8008334 <xTaskCreateStatic+0xac>
 80082f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01b      	beq.n	8008334 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008304:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008308:	2202      	movs	r2, #2
 800830a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800830e:	2300      	movs	r3, #0
 8008310:	9303      	str	r3, [sp, #12]
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	9302      	str	r3, [sp, #8]
 8008316:	f107 0314 	add.w	r3, r7, #20
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f850 	bl	80083cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800832c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800832e:	f000 f8f3 	bl	8008518 <prvAddNewTaskToReadyList>
 8008332:	e001      	b.n	8008338 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008334:	2300      	movs	r3, #0
 8008336:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008338:	697b      	ldr	r3, [r7, #20]
	}
 800833a:	4618      	mov	r0, r3
 800833c:	3728      	adds	r7, #40	; 0x28
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008342:	b580      	push	{r7, lr}
 8008344:	b08c      	sub	sp, #48	; 0x30
 8008346:	af04      	add	r7, sp, #16
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	603b      	str	r3, [r7, #0]
 800834e:	4613      	mov	r3, r2
 8008350:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008352:	88fb      	ldrh	r3, [r7, #6]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4618      	mov	r0, r3
 8008358:	f001 fc5e 	bl	8009c18 <pvPortMalloc>
 800835c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008364:	20bc      	movs	r0, #188	; 0xbc
 8008366:	f001 fc57 	bl	8009c18 <pvPortMalloc>
 800836a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	631a      	str	r2, [r3, #48]	; 0x30
 8008378:	e005      	b.n	8008386 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800837a:	6978      	ldr	r0, [r7, #20]
 800837c:	f001 fd18 	bl	8009db0 <vPortFree>
 8008380:	e001      	b.n	8008386 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d017      	beq.n	80083bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008394:	88fa      	ldrh	r2, [r7, #6]
 8008396:	2300      	movs	r3, #0
 8008398:	9303      	str	r3, [sp, #12]
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	9302      	str	r3, [sp, #8]
 800839e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f80e 	bl	80083cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083b0:	69f8      	ldr	r0, [r7, #28]
 80083b2:	f000 f8b1 	bl	8008518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083b6:	2301      	movs	r3, #1
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	e002      	b.n	80083c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295
 80083c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083c2:	69bb      	ldr	r3, [r7, #24]
	}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3720      	adds	r7, #32
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	461a      	mov	r2, r3
 80083e4:	21a5      	movs	r1, #165	; 0xa5
 80083e6:	f004 f977 	bl	800c6d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083f4:	3b01      	subs	r3, #1
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	f023 0307 	bic.w	r3, r3, #7
 8008402:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <prvInitialiseNewTask+0x58>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	617b      	str	r3, [r7, #20]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01f      	beq.n	800846a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	e012      	b.n	8008456 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	4413      	add	r3, r2
 8008436:	7819      	ldrb	r1, [r3, #0]
 8008438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	3334      	adds	r3, #52	; 0x34
 8008440:	460a      	mov	r2, r1
 8008442:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d006      	beq.n	800845e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	3301      	adds	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	2b0f      	cmp	r3, #15
 800845a:	d9e9      	bls.n	8008430 <prvInitialiseNewTask+0x64>
 800845c:	e000      	b.n	8008460 <prvInitialiseNewTask+0x94>
			{
				break;
 800845e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008468:	e003      	b.n	8008472 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	2b37      	cmp	r3, #55	; 0x37
 8008476:	d901      	bls.n	800847c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008478:	2337      	movs	r3, #55	; 0x37
 800847a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008480:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008486:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	2200      	movs	r2, #0
 800848c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	3304      	adds	r3, #4
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff f978 	bl	8007788 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	3318      	adds	r3, #24
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff f973 	bl	8007788 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	3354      	adds	r3, #84	; 0x54
 80084cc:	2260      	movs	r2, #96	; 0x60
 80084ce:	2100      	movs	r1, #0
 80084d0:	4618      	mov	r0, r3
 80084d2:	f004 f901 	bl	800c6d8 <memset>
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	4a0c      	ldr	r2, [pc, #48]	; (800850c <prvInitialiseNewTask+0x140>)
 80084da:	659a      	str	r2, [r3, #88]	; 0x58
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	4a0c      	ldr	r2, [pc, #48]	; (8008510 <prvInitialiseNewTask+0x144>)
 80084e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	4a0b      	ldr	r2, [pc, #44]	; (8008514 <prvInitialiseNewTask+0x148>)
 80084e6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	69b8      	ldr	r0, [r7, #24]
 80084ee:	f001 f941 	bl	8009774 <pxPortInitialiseStack>
 80084f2:	4602      	mov	r2, r0
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008502:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008504:	bf00      	nop
 8008506:	3720      	adds	r7, #32
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	0803f800 	.word	0x0803f800
 8008510:	0803f820 	.word	0x0803f820
 8008514:	0803f7e0 	.word	0x0803f7e0

08008518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008520:	f001 fa58 	bl	80099d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008524:	4b2d      	ldr	r3, [pc, #180]	; (80085dc <prvAddNewTaskToReadyList+0xc4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3301      	adds	r3, #1
 800852a:	4a2c      	ldr	r2, [pc, #176]	; (80085dc <prvAddNewTaskToReadyList+0xc4>)
 800852c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800852e:	4b2c      	ldr	r3, [pc, #176]	; (80085e0 <prvAddNewTaskToReadyList+0xc8>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008536:	4a2a      	ldr	r2, [pc, #168]	; (80085e0 <prvAddNewTaskToReadyList+0xc8>)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800853c:	4b27      	ldr	r3, [pc, #156]	; (80085dc <prvAddNewTaskToReadyList+0xc4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d110      	bne.n	8008566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008544:	f000 fc26 	bl	8008d94 <prvInitialiseTaskLists>
 8008548:	e00d      	b.n	8008566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800854a:	4b26      	ldr	r3, [pc, #152]	; (80085e4 <prvAddNewTaskToReadyList+0xcc>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008552:	4b23      	ldr	r3, [pc, #140]	; (80085e0 <prvAddNewTaskToReadyList+0xc8>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	429a      	cmp	r2, r3
 800855e:	d802      	bhi.n	8008566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008560:	4a1f      	ldr	r2, [pc, #124]	; (80085e0 <prvAddNewTaskToReadyList+0xc8>)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008566:	4b20      	ldr	r3, [pc, #128]	; (80085e8 <prvAddNewTaskToReadyList+0xd0>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	4a1e      	ldr	r2, [pc, #120]	; (80085e8 <prvAddNewTaskToReadyList+0xd0>)
 800856e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008570:	4b1d      	ldr	r3, [pc, #116]	; (80085e8 <prvAddNewTaskToReadyList+0xd0>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857c:	4b1b      	ldr	r3, [pc, #108]	; (80085ec <prvAddNewTaskToReadyList+0xd4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d903      	bls.n	800858c <prvAddNewTaskToReadyList+0x74>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008588:	4a18      	ldr	r2, [pc, #96]	; (80085ec <prvAddNewTaskToReadyList+0xd4>)
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <prvAddNewTaskToReadyList+0xd8>)
 800859a:	441a      	add	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3304      	adds	r3, #4
 80085a0:	4619      	mov	r1, r3
 80085a2:	4610      	mov	r0, r2
 80085a4:	f7ff f8fd 	bl	80077a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085a8:	f001 fa44 	bl	8009a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <prvAddNewTaskToReadyList+0xcc>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00e      	beq.n	80085d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085b4:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <prvAddNewTaskToReadyList+0xc8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	429a      	cmp	r2, r3
 80085c0:	d207      	bcs.n	80085d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085c2:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <prvAddNewTaskToReadyList+0xdc>)
 80085c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	200012cc 	.word	0x200012cc
 80085e0:	20000df8 	.word	0x20000df8
 80085e4:	200012d8 	.word	0x200012d8
 80085e8:	200012e8 	.word	0x200012e8
 80085ec:	200012d4 	.word	0x200012d4
 80085f0:	20000dfc 	.word	0x20000dfc
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d017      	beq.n	800863a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800860a:	4b13      	ldr	r3, [pc, #76]	; (8008658 <vTaskDelay+0x60>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <vTaskDelay+0x30>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	60bb      	str	r3, [r7, #8]
}
 8008624:	bf00      	nop
 8008626:	e7fe      	b.n	8008626 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008628:	f000 f88a 	bl	8008740 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800862c:	2100      	movs	r1, #0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fcfe 	bl	8009030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008634:	f000 f892 	bl	800875c <xTaskResumeAll>
 8008638:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d107      	bne.n	8008650 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008640:	4b06      	ldr	r3, [pc, #24]	; (800865c <vTaskDelay+0x64>)
 8008642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	200012f4 	.word	0x200012f4
 800865c:	e000ed04 	.word	0xe000ed04

08008660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08a      	sub	sp, #40	; 0x28
 8008664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800866e:	463a      	mov	r2, r7
 8008670:	1d39      	adds	r1, r7, #4
 8008672:	f107 0308 	add.w	r3, r7, #8
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff f832 	bl	80076e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	9202      	str	r2, [sp, #8]
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	2300      	movs	r3, #0
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	2300      	movs	r3, #0
 800868c:	460a      	mov	r2, r1
 800868e:	4924      	ldr	r1, [pc, #144]	; (8008720 <vTaskStartScheduler+0xc0>)
 8008690:	4824      	ldr	r0, [pc, #144]	; (8008724 <vTaskStartScheduler+0xc4>)
 8008692:	f7ff fdf9 	bl	8008288 <xTaskCreateStatic>
 8008696:	4603      	mov	r3, r0
 8008698:	4a23      	ldr	r2, [pc, #140]	; (8008728 <vTaskStartScheduler+0xc8>)
 800869a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800869c:	4b22      	ldr	r3, [pc, #136]	; (8008728 <vTaskStartScheduler+0xc8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086a4:	2301      	movs	r3, #1
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	e001      	b.n	80086ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d102      	bne.n	80086ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086b4:	f000 fd10 	bl	80090d8 <xTimerCreateTimerTask>
 80086b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d11b      	bne.n	80086f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	613b      	str	r3, [r7, #16]
}
 80086d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086d4:	4b15      	ldr	r3, [pc, #84]	; (800872c <vTaskStartScheduler+0xcc>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3354      	adds	r3, #84	; 0x54
 80086da:	4a15      	ldr	r2, [pc, #84]	; (8008730 <vTaskStartScheduler+0xd0>)
 80086dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086de:	4b15      	ldr	r3, [pc, #84]	; (8008734 <vTaskStartScheduler+0xd4>)
 80086e0:	f04f 32ff 	mov.w	r2, #4294967295
 80086e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <vTaskStartScheduler+0xd8>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086ec:	4b13      	ldr	r3, [pc, #76]	; (800873c <vTaskStartScheduler+0xdc>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086f2:	f001 f8cd 	bl	8009890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086f6:	e00e      	b.n	8008716 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fe:	d10a      	bne.n	8008716 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60fb      	str	r3, [r7, #12]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <vTaskStartScheduler+0xb4>
}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	0800d480 	.word	0x0800d480
 8008724:	08008d65 	.word	0x08008d65
 8008728:	200012f0 	.word	0x200012f0
 800872c:	20000df8 	.word	0x20000df8
 8008730:	200005f8 	.word	0x200005f8
 8008734:	200012ec 	.word	0x200012ec
 8008738:	200012d8 	.word	0x200012d8
 800873c:	200012d0 	.word	0x200012d0

08008740 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <vTaskSuspendAll+0x18>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a03      	ldr	r2, [pc, #12]	; (8008758 <vTaskSuspendAll+0x18>)
 800874c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800874e:	bf00      	nop
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	200012f4 	.word	0x200012f4

0800875c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800876a:	4b42      	ldr	r3, [pc, #264]	; (8008874 <xTaskResumeAll+0x118>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <xTaskResumeAll+0x2c>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	603b      	str	r3, [r7, #0]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008788:	f001 f924 	bl	80099d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800878c:	4b39      	ldr	r3, [pc, #228]	; (8008874 <xTaskResumeAll+0x118>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3b01      	subs	r3, #1
 8008792:	4a38      	ldr	r2, [pc, #224]	; (8008874 <xTaskResumeAll+0x118>)
 8008794:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008796:	4b37      	ldr	r3, [pc, #220]	; (8008874 <xTaskResumeAll+0x118>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d162      	bne.n	8008864 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800879e:	4b36      	ldr	r3, [pc, #216]	; (8008878 <xTaskResumeAll+0x11c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d05e      	beq.n	8008864 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087a6:	e02f      	b.n	8008808 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a8:	4b34      	ldr	r3, [pc, #208]	; (800887c <xTaskResumeAll+0x120>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3318      	adds	r3, #24
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff f851 	bl	800785c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3304      	adds	r3, #4
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff f84c 	bl	800785c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c8:	4b2d      	ldr	r3, [pc, #180]	; (8008880 <xTaskResumeAll+0x124>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d903      	bls.n	80087d8 <xTaskResumeAll+0x7c>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <xTaskResumeAll+0x124>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4a27      	ldr	r2, [pc, #156]	; (8008884 <xTaskResumeAll+0x128>)
 80087e6:	441a      	add	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fe ffd7 	bl	80077a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	4b23      	ldr	r3, [pc, #140]	; (8008888 <xTaskResumeAll+0x12c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	429a      	cmp	r2, r3
 8008800:	d302      	bcc.n	8008808 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008802:	4b22      	ldr	r3, [pc, #136]	; (800888c <xTaskResumeAll+0x130>)
 8008804:	2201      	movs	r2, #1
 8008806:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <xTaskResumeAll+0x120>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1cb      	bne.n	80087a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008816:	f000 fb5f 	bl	8008ed8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800881a:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <xTaskResumeAll+0x134>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d010      	beq.n	8008848 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008826:	f000 f847 	bl	80088b8 <xTaskIncrementTick>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008830:	4b16      	ldr	r3, [pc, #88]	; (800888c <xTaskResumeAll+0x130>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3b01      	subs	r3, #1
 800883a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f1      	bne.n	8008826 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008842:	4b13      	ldr	r3, [pc, #76]	; (8008890 <xTaskResumeAll+0x134>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008848:	4b10      	ldr	r3, [pc, #64]	; (800888c <xTaskResumeAll+0x130>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d009      	beq.n	8008864 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008854:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <xTaskResumeAll+0x138>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008864:	f001 f8e6 	bl	8009a34 <vPortExitCritical>

	return xAlreadyYielded;
 8008868:	68bb      	ldr	r3, [r7, #8]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	200012f4 	.word	0x200012f4
 8008878:	200012cc 	.word	0x200012cc
 800887c:	2000128c 	.word	0x2000128c
 8008880:	200012d4 	.word	0x200012d4
 8008884:	20000dfc 	.word	0x20000dfc
 8008888:	20000df8 	.word	0x20000df8
 800888c:	200012e0 	.word	0x200012e0
 8008890:	200012dc 	.word	0x200012dc
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <xTaskGetTickCount+0x1c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088a4:	687b      	ldr	r3, [r7, #4]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	200012d0 	.word	0x200012d0

080088b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088c2:	4b4f      	ldr	r3, [pc, #316]	; (8008a00 <xTaskIncrementTick+0x148>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f040 808f 	bne.w	80089ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088cc:	4b4d      	ldr	r3, [pc, #308]	; (8008a04 <xTaskIncrementTick+0x14c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3301      	adds	r3, #1
 80088d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088d4:	4a4b      	ldr	r2, [pc, #300]	; (8008a04 <xTaskIncrementTick+0x14c>)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d120      	bne.n	8008922 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088e0:	4b49      	ldr	r3, [pc, #292]	; (8008a08 <xTaskIncrementTick+0x150>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <xTaskIncrementTick+0x48>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	603b      	str	r3, [r7, #0]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <xTaskIncrementTick+0x46>
 8008900:	4b41      	ldr	r3, [pc, #260]	; (8008a08 <xTaskIncrementTick+0x150>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	4b41      	ldr	r3, [pc, #260]	; (8008a0c <xTaskIncrementTick+0x154>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a3f      	ldr	r2, [pc, #252]	; (8008a08 <xTaskIncrementTick+0x150>)
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	4a3f      	ldr	r2, [pc, #252]	; (8008a0c <xTaskIncrementTick+0x154>)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	4b3e      	ldr	r3, [pc, #248]	; (8008a10 <xTaskIncrementTick+0x158>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	4a3d      	ldr	r2, [pc, #244]	; (8008a10 <xTaskIncrementTick+0x158>)
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	f000 fadb 	bl	8008ed8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008922:	4b3c      	ldr	r3, [pc, #240]	; (8008a14 <xTaskIncrementTick+0x15c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	429a      	cmp	r2, r3
 800892a:	d349      	bcc.n	80089c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800892c:	4b36      	ldr	r3, [pc, #216]	; (8008a08 <xTaskIncrementTick+0x150>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d104      	bne.n	8008940 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008936:	4b37      	ldr	r3, [pc, #220]	; (8008a14 <xTaskIncrementTick+0x15c>)
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	601a      	str	r2, [r3, #0]
					break;
 800893e:	e03f      	b.n	80089c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008940:	4b31      	ldr	r3, [pc, #196]	; (8008a08 <xTaskIncrementTick+0x150>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d203      	bcs.n	8008960 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008958:	4a2e      	ldr	r2, [pc, #184]	; (8008a14 <xTaskIncrementTick+0x15c>)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800895e:	e02f      	b.n	80089c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe ff79 	bl	800785c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d004      	beq.n	800897c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	3318      	adds	r3, #24
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe ff70 	bl	800785c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008980:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <xTaskIncrementTick+0x160>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d903      	bls.n	8008990 <xTaskIncrementTick+0xd8>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	4a22      	ldr	r2, [pc, #136]	; (8008a18 <xTaskIncrementTick+0x160>)
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4a1f      	ldr	r2, [pc, #124]	; (8008a1c <xTaskIncrementTick+0x164>)
 800899e:	441a      	add	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f7fe fefb 	bl	80077a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	4b1b      	ldr	r3, [pc, #108]	; (8008a20 <xTaskIncrementTick+0x168>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d3b8      	bcc.n	800892c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089be:	e7b5      	b.n	800892c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089c0:	4b17      	ldr	r3, [pc, #92]	; (8008a20 <xTaskIncrementTick+0x168>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c6:	4915      	ldr	r1, [pc, #84]	; (8008a1c <xTaskIncrementTick+0x164>)
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d901      	bls.n	80089dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80089d8:	2301      	movs	r3, #1
 80089da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <xTaskIncrementTick+0x16c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	e004      	b.n	80089f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089ea:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <xTaskIncrementTick+0x170>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3301      	adds	r3, #1
 80089f0:	4a0d      	ldr	r2, [pc, #52]	; (8008a28 <xTaskIncrementTick+0x170>)
 80089f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089f4:	697b      	ldr	r3, [r7, #20]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	200012f4 	.word	0x200012f4
 8008a04:	200012d0 	.word	0x200012d0
 8008a08:	20001284 	.word	0x20001284
 8008a0c:	20001288 	.word	0x20001288
 8008a10:	200012e4 	.word	0x200012e4
 8008a14:	200012ec 	.word	0x200012ec
 8008a18:	200012d4 	.word	0x200012d4
 8008a1c:	20000dfc 	.word	0x20000dfc
 8008a20:	20000df8 	.word	0x20000df8
 8008a24:	200012e0 	.word	0x200012e0
 8008a28:	200012dc 	.word	0x200012dc

08008a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a32:	4b2a      	ldr	r3, [pc, #168]	; (8008adc <vTaskSwitchContext+0xb0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a3a:	4b29      	ldr	r3, [pc, #164]	; (8008ae0 <vTaskSwitchContext+0xb4>)
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a40:	e046      	b.n	8008ad0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a42:	4b27      	ldr	r3, [pc, #156]	; (8008ae0 <vTaskSwitchContext+0xb4>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a48:	4b26      	ldr	r3, [pc, #152]	; (8008ae4 <vTaskSwitchContext+0xb8>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	e010      	b.n	8008a72 <vTaskSwitchContext+0x46>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <vTaskSwitchContext+0x40>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	607b      	str	r3, [r7, #4]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <vTaskSwitchContext+0x3e>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	491d      	ldr	r1, [pc, #116]	; (8008ae8 <vTaskSwitchContext+0xbc>)
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	440b      	add	r3, r1
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0e4      	beq.n	8008a50 <vTaskSwitchContext+0x24>
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a15      	ldr	r2, [pc, #84]	; (8008ae8 <vTaskSwitchContext+0xbc>)
 8008a92:	4413      	add	r3, r2
 8008a94:	60bb      	str	r3, [r7, #8]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	605a      	str	r2, [r3, #4]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d104      	bne.n	8008ab6 <vTaskSwitchContext+0x8a>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	605a      	str	r2, [r3, #4]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	4a0b      	ldr	r2, [pc, #44]	; (8008aec <vTaskSwitchContext+0xc0>)
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	4a08      	ldr	r2, [pc, #32]	; (8008ae4 <vTaskSwitchContext+0xb8>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <vTaskSwitchContext+0xc0>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3354      	adds	r3, #84	; 0x54
 8008acc:	4a08      	ldr	r2, [pc, #32]	; (8008af0 <vTaskSwitchContext+0xc4>)
 8008ace:	6013      	str	r3, [r2, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	200012f4 	.word	0x200012f4
 8008ae0:	200012e0 	.word	0x200012e0
 8008ae4:	200012d4 	.word	0x200012d4
 8008ae8:	20000dfc 	.word	0x20000dfc
 8008aec:	20000df8 	.word	0x20000df8
 8008af0:	200005f8 	.word	0x200005f8

08008af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <vTaskPlaceOnEventList+0x44>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3318      	adds	r3, #24
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fe fe61 	bl	80077ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b28:	2101      	movs	r1, #1
 8008b2a:	6838      	ldr	r0, [r7, #0]
 8008b2c:	f000 fa80 	bl	8009030 <prvAddCurrentTaskToDelayedList>
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	20000df8 	.word	0x20000df8

08008b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	617b      	str	r3, [r7, #20]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b64:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3318      	adds	r3, #24
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7fe fe18 	bl	80077a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b78:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	68b8      	ldr	r0, [r7, #8]
 8008b82:	f000 fa55 	bl	8009030 <prvAddCurrentTaskToDelayedList>
	}
 8008b86:	bf00      	nop
 8008b88:	3718      	adds	r7, #24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000df8 	.word	0x20000df8

08008b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	60fb      	str	r3, [r7, #12]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	3318      	adds	r3, #24
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fe49 	bl	800785c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bca:	4b1e      	ldr	r3, [pc, #120]	; (8008c44 <xTaskRemoveFromEventList+0xb0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d11d      	bne.n	8008c0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fe40 	bl	800785c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be0:	4b19      	ldr	r3, [pc, #100]	; (8008c48 <xTaskRemoveFromEventList+0xb4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d903      	bls.n	8008bf0 <xTaskRemoveFromEventList+0x5c>
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	4a16      	ldr	r2, [pc, #88]	; (8008c48 <xTaskRemoveFromEventList+0xb4>)
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4a13      	ldr	r2, [pc, #76]	; (8008c4c <xTaskRemoveFromEventList+0xb8>)
 8008bfe:	441a      	add	r2, r3
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f7fe fdcb 	bl	80077a2 <vListInsertEnd>
 8008c0c:	e005      	b.n	8008c1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	3318      	adds	r3, #24
 8008c12:	4619      	mov	r1, r3
 8008c14:	480e      	ldr	r0, [pc, #56]	; (8008c50 <xTaskRemoveFromEventList+0xbc>)
 8008c16:	f7fe fdc4 	bl	80077a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <xTaskRemoveFromEventList+0xc0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d905      	bls.n	8008c34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <xTaskRemoveFromEventList+0xc4>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	e001      	b.n	8008c38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	200012f4 	.word	0x200012f4
 8008c48:	200012d4 	.word	0x200012d4
 8008c4c:	20000dfc 	.word	0x20000dfc
 8008c50:	2000128c 	.word	0x2000128c
 8008c54:	20000df8 	.word	0x20000df8
 8008c58:	200012e0 	.word	0x200012e0

08008c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <vTaskInternalSetTimeOutState+0x24>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <vTaskInternalSetTimeOutState+0x28>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	605a      	str	r2, [r3, #4]
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	200012e4 	.word	0x200012e4
 8008c84:	200012d0 	.word	0x200012d0

08008c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	613b      	str	r3, [r7, #16]
}
 8008caa:	bf00      	nop
 8008cac:	e7fe      	b.n	8008cac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	60fb      	str	r3, [r7, #12]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008cca:	f000 fe83 	bl	80099d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cce:	4b1d      	ldr	r3, [pc, #116]	; (8008d44 <xTaskCheckForTimeOut+0xbc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d102      	bne.n	8008cee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61fb      	str	r3, [r7, #28]
 8008cec:	e023      	b.n	8008d36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <xTaskCheckForTimeOut+0xc0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d007      	beq.n	8008d0a <xTaskCheckForTimeOut+0x82>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d302      	bcc.n	8008d0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e015      	b.n	8008d36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d20b      	bcs.n	8008d2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	1ad2      	subs	r2, r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ff9b 	bl	8008c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	61fb      	str	r3, [r7, #28]
 8008d2a:	e004      	b.n	8008d36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d32:	2301      	movs	r3, #1
 8008d34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d36:	f000 fe7d 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	200012d0 	.word	0x200012d0
 8008d48:	200012e4 	.word	0x200012e4

08008d4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d50:	4b03      	ldr	r3, [pc, #12]	; (8008d60 <vTaskMissedYield+0x14>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
}
 8008d56:	bf00      	nop
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	200012e0 	.word	0x200012e0

08008d64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d6c:	f000 f852 	bl	8008e14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d70:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <prvIdleTask+0x28>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d9f9      	bls.n	8008d6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <prvIdleTask+0x2c>)
 8008d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d88:	e7f0      	b.n	8008d6c <prvIdleTask+0x8>
 8008d8a:	bf00      	nop
 8008d8c:	20000dfc 	.word	0x20000dfc
 8008d90:	e000ed04 	.word	0xe000ed04

08008d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	e00c      	b.n	8008dba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4a12      	ldr	r2, [pc, #72]	; (8008df4 <prvInitialiseTaskLists+0x60>)
 8008dac:	4413      	add	r3, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fcca 	bl	8007748 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3301      	adds	r3, #1
 8008db8:	607b      	str	r3, [r7, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b37      	cmp	r3, #55	; 0x37
 8008dbe:	d9ef      	bls.n	8008da0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008dc0:	480d      	ldr	r0, [pc, #52]	; (8008df8 <prvInitialiseTaskLists+0x64>)
 8008dc2:	f7fe fcc1 	bl	8007748 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dc6:	480d      	ldr	r0, [pc, #52]	; (8008dfc <prvInitialiseTaskLists+0x68>)
 8008dc8:	f7fe fcbe 	bl	8007748 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dcc:	480c      	ldr	r0, [pc, #48]	; (8008e00 <prvInitialiseTaskLists+0x6c>)
 8008dce:	f7fe fcbb 	bl	8007748 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dd2:	480c      	ldr	r0, [pc, #48]	; (8008e04 <prvInitialiseTaskLists+0x70>)
 8008dd4:	f7fe fcb8 	bl	8007748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dd8:	480b      	ldr	r0, [pc, #44]	; (8008e08 <prvInitialiseTaskLists+0x74>)
 8008dda:	f7fe fcb5 	bl	8007748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dde:	4b0b      	ldr	r3, [pc, #44]	; (8008e0c <prvInitialiseTaskLists+0x78>)
 8008de0:	4a05      	ldr	r2, [pc, #20]	; (8008df8 <prvInitialiseTaskLists+0x64>)
 8008de2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <prvInitialiseTaskLists+0x7c>)
 8008de6:	4a05      	ldr	r2, [pc, #20]	; (8008dfc <prvInitialiseTaskLists+0x68>)
 8008de8:	601a      	str	r2, [r3, #0]
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000dfc 	.word	0x20000dfc
 8008df8:	2000125c 	.word	0x2000125c
 8008dfc:	20001270 	.word	0x20001270
 8008e00:	2000128c 	.word	0x2000128c
 8008e04:	200012a0 	.word	0x200012a0
 8008e08:	200012b8 	.word	0x200012b8
 8008e0c:	20001284 	.word	0x20001284
 8008e10:	20001288 	.word	0x20001288

08008e14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e1a:	e019      	b.n	8008e50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e1c:	f000 fdda 	bl	80099d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e20:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <prvCheckTasksWaitingTermination+0x50>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe fd15 	bl	800785c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e32:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <prvCheckTasksWaitingTermination+0x54>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	4a0b      	ldr	r2, [pc, #44]	; (8008e68 <prvCheckTasksWaitingTermination+0x54>)
 8008e3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e3c:	4b0b      	ldr	r3, [pc, #44]	; (8008e6c <prvCheckTasksWaitingTermination+0x58>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	4a0a      	ldr	r2, [pc, #40]	; (8008e6c <prvCheckTasksWaitingTermination+0x58>)
 8008e44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e46:	f000 fdf5 	bl	8009a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f810 	bl	8008e70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e50:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <prvCheckTasksWaitingTermination+0x58>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e1      	bne.n	8008e1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200012a0 	.word	0x200012a0
 8008e68:	200012cc 	.word	0x200012cc
 8008e6c:	200012b4 	.word	0x200012b4

08008e70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3354      	adds	r3, #84	; 0x54
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f003 fceb 	bl	800c858 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d108      	bne.n	8008e9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 ff8d 	bl	8009db0 <vPortFree>
				vPortFree( pxTCB );
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 ff8a 	bl	8009db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e9c:	e018      	b.n	8008ed0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d103      	bne.n	8008eb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 ff81 	bl	8009db0 <vPortFree>
	}
 8008eae:	e00f      	b.n	8008ed0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d00a      	beq.n	8008ed0 <prvDeleteTCB+0x60>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60fb      	str	r3, [r7, #12]
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <prvDeleteTCB+0x5e>
	}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ede:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <prvResetNextTaskUnblockTime+0x38>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d104      	bne.n	8008ef2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <prvResetNextTaskUnblockTime+0x3c>)
 8008eea:	f04f 32ff 	mov.w	r2, #4294967295
 8008eee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ef0:	e008      	b.n	8008f04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ef2:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <prvResetNextTaskUnblockTime+0x38>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <prvResetNextTaskUnblockTime+0x3c>)
 8008f02:	6013      	str	r3, [r2, #0]
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	20001284 	.word	0x20001284
 8008f14:	200012ec 	.word	0x200012ec

08008f18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f1e:	4b0b      	ldr	r3, [pc, #44]	; (8008f4c <xTaskGetSchedulerState+0x34>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f26:	2301      	movs	r3, #1
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	e008      	b.n	8008f3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f2c:	4b08      	ldr	r3, [pc, #32]	; (8008f50 <xTaskGetSchedulerState+0x38>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f34:	2302      	movs	r3, #2
 8008f36:	607b      	str	r3, [r7, #4]
 8008f38:	e001      	b.n	8008f3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f3e:	687b      	ldr	r3, [r7, #4]
	}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	200012d8 	.word	0x200012d8
 8008f50:	200012f4 	.word	0x200012f4

08008f54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d056      	beq.n	8009018 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <xTaskPriorityDisinherit+0xd0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d00a      	beq.n	8008f8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	60fb      	str	r3, [r7, #12]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	60bb      	str	r3, [r7, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d02c      	beq.n	8009018 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d128      	bne.n	8009018 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fc46 	bl	800785c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <xTaskPriorityDisinherit+0xd4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d903      	bls.n	8008ff8 <xTaskPriorityDisinherit+0xa4>
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a0c      	ldr	r2, [pc, #48]	; (8009028 <xTaskPriorityDisinherit+0xd4>)
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4a09      	ldr	r2, [pc, #36]	; (800902c <xTaskPriorityDisinherit+0xd8>)
 8009006:	441a      	add	r2, r3
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3304      	adds	r3, #4
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fe fbc7 	bl	80077a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009018:	697b      	ldr	r3, [r7, #20]
	}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000df8 	.word	0x20000df8
 8009028:	200012d4 	.word	0x200012d4
 800902c:	20000dfc 	.word	0x20000dfc

08009030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800903a:	4b21      	ldr	r3, [pc, #132]	; (80090c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009040:	4b20      	ldr	r3, [pc, #128]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3304      	adds	r3, #4
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fc08 	bl	800785c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d10a      	bne.n	800906a <prvAddCurrentTaskToDelayedList+0x3a>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905a:	4b1a      	ldr	r3, [pc, #104]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3304      	adds	r3, #4
 8009060:	4619      	mov	r1, r3
 8009062:	4819      	ldr	r0, [pc, #100]	; (80090c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009064:	f7fe fb9d 	bl	80077a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009068:	e026      	b.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	429a      	cmp	r2, r3
 8009080:	d209      	bcs.n	8009096 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f7fe fbab 	bl	80077ea <vListInsert>
}
 8009094:	e010      	b.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009096:	4b0e      	ldr	r3, [pc, #56]	; (80090d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3304      	adds	r3, #4
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f7fe fba1 	bl	80077ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d202      	bcs.n	80090b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090b2:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	6013      	str	r3, [r2, #0]
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	200012d0 	.word	0x200012d0
 80090c4:	20000df8 	.word	0x20000df8
 80090c8:	200012b8 	.word	0x200012b8
 80090cc:	20001288 	.word	0x20001288
 80090d0:	20001284 	.word	0x20001284
 80090d4:	200012ec 	.word	0x200012ec

080090d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090e2:	f000 fb07 	bl	80096f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090e6:	4b1c      	ldr	r3, [pc, #112]	; (8009158 <xTimerCreateTimerTask+0x80>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d021      	beq.n	8009132 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090f6:	1d3a      	adds	r2, r7, #4
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fb07 	bl	8007714 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	2302      	movs	r3, #2
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	460a      	mov	r2, r1
 8009118:	4910      	ldr	r1, [pc, #64]	; (800915c <xTimerCreateTimerTask+0x84>)
 800911a:	4811      	ldr	r0, [pc, #68]	; (8009160 <xTimerCreateTimerTask+0x88>)
 800911c:	f7ff f8b4 	bl	8008288 <xTaskCreateStatic>
 8009120:	4603      	mov	r3, r0
 8009122:	4a10      	ldr	r2, [pc, #64]	; (8009164 <xTimerCreateTimerTask+0x8c>)
 8009124:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009126:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <xTimerCreateTimerTask+0x8c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800912e:	2301      	movs	r3, #1
 8009130:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	613b      	str	r3, [r7, #16]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800914e:	697b      	ldr	r3, [r7, #20]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20001328 	.word	0x20001328
 800915c:	0800d488 	.word	0x0800d488
 8009160:	0800929d 	.word	0x0800929d
 8009164:	2000132c 	.word	0x2000132c

08009168 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	; 0x28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009176:	2300      	movs	r3, #0
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	623b      	str	r3, [r7, #32]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009196:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <xTimerGenericCommand+0x98>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d02a      	beq.n	80091f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b05      	cmp	r3, #5
 80091ae:	dc18      	bgt.n	80091e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091b0:	f7ff feb2 	bl	8008f18 <xTaskGetSchedulerState>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d109      	bne.n	80091ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091ba:	4b11      	ldr	r3, [pc, #68]	; (8009200 <xTimerGenericCommand+0x98>)
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f107 0110 	add.w	r1, r7, #16
 80091c2:	2300      	movs	r3, #0
 80091c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c6:	f7fe fc77 	bl	8007ab8 <xQueueGenericSend>
 80091ca:	6278      	str	r0, [r7, #36]	; 0x24
 80091cc:	e012      	b.n	80091f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <xTimerGenericCommand+0x98>)
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	f107 0110 	add.w	r1, r7, #16
 80091d6:	2300      	movs	r3, #0
 80091d8:	2200      	movs	r2, #0
 80091da:	f7fe fc6d 	bl	8007ab8 <xQueueGenericSend>
 80091de:	6278      	str	r0, [r7, #36]	; 0x24
 80091e0:	e008      	b.n	80091f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091e2:	4b07      	ldr	r3, [pc, #28]	; (8009200 <xTimerGenericCommand+0x98>)
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	f107 0110 	add.w	r1, r7, #16
 80091ea:	2300      	movs	r3, #0
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	f7fe fd61 	bl	8007cb4 <xQueueGenericSendFromISR>
 80091f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3728      	adds	r7, #40	; 0x28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20001328 	.word	0x20001328

08009204 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af02      	add	r7, sp, #8
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920e:	4b22      	ldr	r3, [pc, #136]	; (8009298 <prvProcessExpiredTimer+0x94>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe fb1d 	bl	800785c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d022      	beq.n	8009276 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	18d1      	adds	r1, r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	6978      	ldr	r0, [r7, #20]
 800923e:	f000 f8d1 	bl	80093e4 <prvInsertTimerInActiveList>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01f      	beq.n	8009288 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009248:	2300      	movs	r3, #0
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	2300      	movs	r3, #0
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	2100      	movs	r1, #0
 8009252:	6978      	ldr	r0, [r7, #20]
 8009254:	f7ff ff88 	bl	8009168 <xTimerGenericCommand>
 8009258:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d113      	bne.n	8009288 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800927c:	f023 0301 	bic.w	r3, r3, #1
 8009280:	b2da      	uxtb	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	6978      	ldr	r0, [r7, #20]
 800928e:	4798      	blx	r3
}
 8009290:	bf00      	nop
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20001320 	.word	0x20001320

0800929c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092a4:	f107 0308 	add.w	r3, r7, #8
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f857 	bl	800935c <prvGetNextExpireTime>
 80092ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4619      	mov	r1, r3
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f803 	bl	80092c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092ba:	f000 f8d5 	bl	8009468 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092be:	e7f1      	b.n	80092a4 <prvTimerTask+0x8>

080092c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092ca:	f7ff fa39 	bl	8008740 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f866 	bl	80093a4 <prvSampleTimeNow>
 80092d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d130      	bne.n	8009342 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <prvProcessTimerOrBlockTask+0x3c>
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d806      	bhi.n	80092fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092ee:	f7ff fa35 	bl	800875c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff ff85 	bl	8009204 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092fa:	e024      	b.n	8009346 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d008      	beq.n	8009314 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <prvProcessTimerOrBlockTask+0x90>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <prvProcessTimerOrBlockTask+0x50>
 800930c:	2301      	movs	r3, #1
 800930e:	e000      	b.n	8009312 <prvProcessTimerOrBlockTask+0x52>
 8009310:	2300      	movs	r3, #0
 8009312:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <prvProcessTimerOrBlockTask+0x94>)
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4619      	mov	r1, r3
 8009322:	f7fe ff7d 	bl	8008220 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009326:	f7ff fa19 	bl	800875c <xTaskResumeAll>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009330:	4b09      	ldr	r3, [pc, #36]	; (8009358 <prvProcessTimerOrBlockTask+0x98>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
}
 8009340:	e001      	b.n	8009346 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009342:	f7ff fa0b 	bl	800875c <xTaskResumeAll>
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20001324 	.word	0x20001324
 8009354:	20001328 	.word	0x20001328
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009364:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <prvGetNextExpireTime+0x44>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <prvGetNextExpireTime+0x16>
 800936e:	2201      	movs	r2, #1
 8009370:	e000      	b.n	8009374 <prvGetNextExpireTime+0x18>
 8009372:	2200      	movs	r2, #0
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d105      	bne.n	800938c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <prvGetNextExpireTime+0x44>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	e001      	b.n	8009390 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009390:	68fb      	ldr	r3, [r7, #12]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20001320 	.word	0x20001320

080093a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093ac:	f7ff fa74 	bl	8008898 <xTaskGetTickCount>
 80093b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093b2:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <prvSampleTimeNow+0x3c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d205      	bcs.n	80093c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093bc:	f000 f936 	bl	800962c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	e002      	b.n	80093ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093ce:	4a04      	ldr	r2, [pc, #16]	; (80093e0 <prvSampleTimeNow+0x3c>)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093d4:	68fb      	ldr	r3, [r7, #12]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20001330 	.word	0x20001330

080093e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	429a      	cmp	r2, r3
 8009408:	d812      	bhi.n	8009430 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	429a      	cmp	r2, r3
 8009416:	d302      	bcc.n	800941e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009418:	2301      	movs	r3, #1
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	e01b      	b.n	8009456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800941e:	4b10      	ldr	r3, [pc, #64]	; (8009460 <prvInsertTimerInActiveList+0x7c>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fe f9de 	bl	80077ea <vListInsert>
 800942e:	e012      	b.n	8009456 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d206      	bcs.n	8009446 <prvInsertTimerInActiveList+0x62>
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d302      	bcc.n	8009446 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009440:	2301      	movs	r3, #1
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	e007      	b.n	8009456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009446:	4b07      	ldr	r3, [pc, #28]	; (8009464 <prvInsertTimerInActiveList+0x80>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3304      	adds	r3, #4
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f7fe f9ca 	bl	80077ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009456:	697b      	ldr	r3, [r7, #20]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20001324 	.word	0x20001324
 8009464:	20001320 	.word	0x20001320

08009468 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08e      	sub	sp, #56	; 0x38
 800946c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800946e:	e0ca      	b.n	8009606 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	da18      	bge.n	80094a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009476:	1d3b      	adds	r3, r7, #4
 8009478:	3304      	adds	r3, #4
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10a      	bne.n	8009498 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	61fb      	str	r3, [r7, #28]
}
 8009494:	bf00      	nop
 8009496:	e7fe      	b.n	8009496 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800949e:	6850      	ldr	r0, [r2, #4]
 80094a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a2:	6892      	ldr	r2, [r2, #8]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f2c0 80aa 	blt.w	8009604 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	3304      	adds	r3, #4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe f9cb 	bl	800785c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094c6:	463b      	mov	r3, r7
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff ff6b 	bl	80093a4 <prvSampleTimeNow>
 80094ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b09      	cmp	r3, #9
 80094d4:	f200 8097 	bhi.w	8009606 <prvProcessReceivedCommands+0x19e>
 80094d8:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <prvProcessReceivedCommands+0x78>)
 80094da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094de:	bf00      	nop
 80094e0:	08009509 	.word	0x08009509
 80094e4:	08009509 	.word	0x08009509
 80094e8:	08009509 	.word	0x08009509
 80094ec:	0800957d 	.word	0x0800957d
 80094f0:	08009591 	.word	0x08009591
 80094f4:	080095db 	.word	0x080095db
 80094f8:	08009509 	.word	0x08009509
 80094fc:	08009509 	.word	0x08009509
 8009500:	0800957d 	.word	0x0800957d
 8009504:	08009591 	.word	0x08009591
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800950e:	f043 0301 	orr.w	r3, r3, #1
 8009512:	b2da      	uxtb	r2, r3
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	18d1      	adds	r1, r2, r3
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009528:	f7ff ff5c 	bl	80093e4 <prvInsertTimerInActiveList>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d069      	beq.n	8009606 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009538:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d05e      	beq.n	8009606 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	441a      	add	r2, r3
 8009550:	2300      	movs	r3, #0
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	2300      	movs	r3, #0
 8009556:	2100      	movs	r1, #0
 8009558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800955a:	f7ff fe05 	bl	8009168 <xTimerGenericCommand>
 800955e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d14f      	bne.n	8009606 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	61bb      	str	r3, [r7, #24]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800958e:	e03a      	b.n	8009606 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009596:	f043 0301 	orr.w	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10a      	bne.n	80095c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	617b      	str	r3, [r7, #20]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c8:	699a      	ldr	r2, [r3, #24]
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	18d1      	adds	r1, r2, r3
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095d4:	f7ff ff06 	bl	80093e4 <prvInsertTimerInActiveList>
					break;
 80095d8:	e015      	b.n	8009606 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d103      	bne.n	80095f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ea:	f000 fbe1 	bl	8009db0 <vPortFree>
 80095ee:	e00a      	b.n	8009606 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f6:	f023 0301 	bic.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009602:	e000      	b.n	8009606 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009606:	4b08      	ldr	r3, [pc, #32]	; (8009628 <prvProcessReceivedCommands+0x1c0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	1d39      	adds	r1, r7, #4
 800960c:	2200      	movs	r2, #0
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fbec 	bl	8007dec <xQueueReceive>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	f47f af2a 	bne.w	8009470 <prvProcessReceivedCommands+0x8>
	}
}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	3730      	adds	r7, #48	; 0x30
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20001328 	.word	0x20001328

0800962c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009632:	e048      	b.n	80096c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009634:	4b2d      	ldr	r3, [pc, #180]	; (80096ec <prvSwitchTimerLists+0xc0>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963e:	4b2b      	ldr	r3, [pc, #172]	; (80096ec <prvSwitchTimerLists+0xc0>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3304      	adds	r3, #4
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe f905 	bl	800785c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d02e      	beq.n	80096c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4413      	add	r3, r2
 8009670:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	d90e      	bls.n	8009698 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009686:	4b19      	ldr	r3, [pc, #100]	; (80096ec <prvSwitchTimerLists+0xc0>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3304      	adds	r3, #4
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f7fe f8aa 	bl	80077ea <vListInsert>
 8009696:	e016      	b.n	80096c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009698:	2300      	movs	r3, #0
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	2300      	movs	r3, #0
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	2100      	movs	r1, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f7ff fd60 	bl	8009168 <xTimerGenericCommand>
 80096a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10a      	bne.n	80096c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	603b      	str	r3, [r7, #0]
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096c6:	4b09      	ldr	r3, [pc, #36]	; (80096ec <prvSwitchTimerLists+0xc0>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1b1      	bne.n	8009634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096d0:	4b06      	ldr	r3, [pc, #24]	; (80096ec <prvSwitchTimerLists+0xc0>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096d6:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <prvSwitchTimerLists+0xc4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a04      	ldr	r2, [pc, #16]	; (80096ec <prvSwitchTimerLists+0xc0>)
 80096dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096de:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <prvSwitchTimerLists+0xc4>)
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6013      	str	r3, [r2, #0]
}
 80096e4:	bf00      	nop
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	20001320 	.word	0x20001320
 80096f0:	20001324 	.word	0x20001324

080096f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096fa:	f000 f96b 	bl	80099d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096fe:	4b15      	ldr	r3, [pc, #84]	; (8009754 <prvCheckForValidListAndQueue+0x60>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d120      	bne.n	8009748 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009706:	4814      	ldr	r0, [pc, #80]	; (8009758 <prvCheckForValidListAndQueue+0x64>)
 8009708:	f7fe f81e 	bl	8007748 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800970c:	4813      	ldr	r0, [pc, #76]	; (800975c <prvCheckForValidListAndQueue+0x68>)
 800970e:	f7fe f81b 	bl	8007748 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009712:	4b13      	ldr	r3, [pc, #76]	; (8009760 <prvCheckForValidListAndQueue+0x6c>)
 8009714:	4a10      	ldr	r2, [pc, #64]	; (8009758 <prvCheckForValidListAndQueue+0x64>)
 8009716:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009718:	4b12      	ldr	r3, [pc, #72]	; (8009764 <prvCheckForValidListAndQueue+0x70>)
 800971a:	4a10      	ldr	r2, [pc, #64]	; (800975c <prvCheckForValidListAndQueue+0x68>)
 800971c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800971e:	2300      	movs	r3, #0
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4b11      	ldr	r3, [pc, #68]	; (8009768 <prvCheckForValidListAndQueue+0x74>)
 8009724:	4a11      	ldr	r2, [pc, #68]	; (800976c <prvCheckForValidListAndQueue+0x78>)
 8009726:	2110      	movs	r1, #16
 8009728:	200a      	movs	r0, #10
 800972a:	f7fe f929 	bl	8007980 <xQueueGenericCreateStatic>
 800972e:	4603      	mov	r3, r0
 8009730:	4a08      	ldr	r2, [pc, #32]	; (8009754 <prvCheckForValidListAndQueue+0x60>)
 8009732:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009734:	4b07      	ldr	r3, [pc, #28]	; (8009754 <prvCheckForValidListAndQueue+0x60>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <prvCheckForValidListAndQueue+0x60>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	490b      	ldr	r1, [pc, #44]	; (8009770 <prvCheckForValidListAndQueue+0x7c>)
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fd42 	bl	80081cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009748:	f000 f974 	bl	8009a34 <vPortExitCritical>
}
 800974c:	bf00      	nop
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20001328 	.word	0x20001328
 8009758:	200012f8 	.word	0x200012f8
 800975c:	2000130c 	.word	0x2000130c
 8009760:	20001320 	.word	0x20001320
 8009764:	20001324 	.word	0x20001324
 8009768:	200013d4 	.word	0x200013d4
 800976c:	20001334 	.word	0x20001334
 8009770:	0800d490 	.word	0x0800d490

08009774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3b04      	subs	r3, #4
 8009784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800978c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3b04      	subs	r3, #4
 8009792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f023 0201 	bic.w	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3b04      	subs	r3, #4
 80097a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097a4:	4a0c      	ldr	r2, [pc, #48]	; (80097d8 <pxPortInitialiseStack+0x64>)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3b14      	subs	r3, #20
 80097ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3b04      	subs	r3, #4
 80097ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f06f 0202 	mvn.w	r2, #2
 80097c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	3b20      	subs	r3, #32
 80097c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097ca:	68fb      	ldr	r3, [r7, #12]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	080097dd 	.word	0x080097dd

080097dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097e6:	4b12      	ldr	r3, [pc, #72]	; (8009830 <prvTaskExitError+0x54>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ee:	d00a      	beq.n	8009806 <prvTaskExitError+0x2a>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	60fb      	str	r3, [r7, #12]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <prvTaskExitError+0x28>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	60bb      	str	r3, [r7, #8]
}
 8009818:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800981a:	bf00      	nop
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0fc      	beq.n	800981c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	20000008 	.word	0x20000008
	...

08009840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <pxCurrentTCBConst2>)
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	6808      	ldr	r0, [r1, #0]
 8009846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984a:	f380 8809 	msr	PSP, r0
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f04f 0000 	mov.w	r0, #0
 8009856:	f380 8811 	msr	BASEPRI, r0
 800985a:	4770      	bx	lr
 800985c:	f3af 8000 	nop.w

08009860 <pxCurrentTCBConst2>:
 8009860:	20000df8 	.word	0x20000df8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop

08009868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009868:	4808      	ldr	r0, [pc, #32]	; (800988c <prvPortStartFirstTask+0x24>)
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	6800      	ldr	r0, [r0, #0]
 800986e:	f380 8808 	msr	MSP, r0
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f380 8814 	msr	CONTROL, r0
 800987a:	b662      	cpsie	i
 800987c:	b661      	cpsie	f
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	df00      	svc	0
 8009888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800988a:	bf00      	nop
 800988c:	e000ed08 	.word	0xe000ed08

08009890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009896:	4b46      	ldr	r3, [pc, #280]	; (80099b0 <xPortStartScheduler+0x120>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a46      	ldr	r2, [pc, #280]	; (80099b4 <xPortStartScheduler+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10a      	bne.n	80098b6 <xPortStartScheduler+0x26>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	613b      	str	r3, [r7, #16]
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098b6:	4b3e      	ldr	r3, [pc, #248]	; (80099b0 <xPortStartScheduler+0x120>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a3f      	ldr	r2, [pc, #252]	; (80099b8 <xPortStartScheduler+0x128>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d10a      	bne.n	80098d6 <xPortStartScheduler+0x46>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	60fb      	str	r3, [r7, #12]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098d6:	4b39      	ldr	r3, [pc, #228]	; (80099bc <xPortStartScheduler+0x12c>)
 80098d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	4b31      	ldr	r3, [pc, #196]	; (80099c0 <xPortStartScheduler+0x130>)
 80098fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098fe:	4b31      	ldr	r3, [pc, #196]	; (80099c4 <xPortStartScheduler+0x134>)
 8009900:	2207      	movs	r2, #7
 8009902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009904:	e009      	b.n	800991a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009906:	4b2f      	ldr	r3, [pc, #188]	; (80099c4 <xPortStartScheduler+0x134>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3b01      	subs	r3, #1
 800990c:	4a2d      	ldr	r2, [pc, #180]	; (80099c4 <xPortStartScheduler+0x134>)
 800990e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	b2db      	uxtb	r3, r3
 8009918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	2b80      	cmp	r3, #128	; 0x80
 8009924:	d0ef      	beq.n	8009906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009926:	4b27      	ldr	r3, [pc, #156]	; (80099c4 <xPortStartScheduler+0x134>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f1c3 0307 	rsb	r3, r3, #7
 800992e:	2b04      	cmp	r3, #4
 8009930:	d00a      	beq.n	8009948 <xPortStartScheduler+0xb8>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	60bb      	str	r3, [r7, #8]
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009948:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <xPortStartScheduler+0x134>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <xPortStartScheduler+0x134>)
 8009950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <xPortStartScheduler+0x134>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800995a:	4a1a      	ldr	r2, [pc, #104]	; (80099c4 <xPortStartScheduler+0x134>)
 800995c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	b2da      	uxtb	r2, r3
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009966:	4b18      	ldr	r3, [pc, #96]	; (80099c8 <xPortStartScheduler+0x138>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a17      	ldr	r2, [pc, #92]	; (80099c8 <xPortStartScheduler+0x138>)
 800996c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009972:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <xPortStartScheduler+0x138>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a14      	ldr	r2, [pc, #80]	; (80099c8 <xPortStartScheduler+0x138>)
 8009978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800997c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800997e:	f000 f8dd 	bl	8009b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <xPortStartScheduler+0x13c>)
 8009984:	2200      	movs	r2, #0
 8009986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009988:	f000 f8fc 	bl	8009b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800998c:	4b10      	ldr	r3, [pc, #64]	; (80099d0 <xPortStartScheduler+0x140>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a0f      	ldr	r2, [pc, #60]	; (80099d0 <xPortStartScheduler+0x140>)
 8009992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009998:	f7ff ff66 	bl	8009868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800999c:	f7ff f846 	bl	8008a2c <vTaskSwitchContext>
	prvTaskExitError();
 80099a0:	f7ff ff1c 	bl	80097dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	e000ed00 	.word	0xe000ed00
 80099b4:	410fc271 	.word	0x410fc271
 80099b8:	410fc270 	.word	0x410fc270
 80099bc:	e000e400 	.word	0xe000e400
 80099c0:	20001424 	.word	0x20001424
 80099c4:	20001428 	.word	0x20001428
 80099c8:	e000ed20 	.word	0xe000ed20
 80099cc:	20000008 	.word	0x20000008
 80099d0:	e000ef34 	.word	0xe000ef34

080099d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	607b      	str	r3, [r7, #4]
}
 80099ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <vPortEnterCritical+0x58>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	4a0d      	ldr	r2, [pc, #52]	; (8009a2c <vPortEnterCritical+0x58>)
 80099f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099f8:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <vPortEnterCritical+0x58>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10f      	bne.n	8009a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a00:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <vPortEnterCritical+0x5c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	603b      	str	r3, [r7, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <vPortEnterCritical+0x4a>
	}
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	20000008 	.word	0x20000008
 8009a30:	e000ed04 	.word	0xe000ed04

08009a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a3a:	4b12      	ldr	r3, [pc, #72]	; (8009a84 <vPortExitCritical+0x50>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <vPortExitCritical+0x24>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	607b      	str	r3, [r7, #4]
}
 8009a54:	bf00      	nop
 8009a56:	e7fe      	b.n	8009a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <vPortExitCritical+0x50>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <vPortExitCritical+0x50>)
 8009a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a62:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <vPortExitCritical+0x50>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <vPortExitCritical+0x42>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	f383 8811 	msr	BASEPRI, r3
}
 8009a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	20000008 	.word	0x20000008
	...

08009a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a90:	f3ef 8009 	mrs	r0, PSP
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <pxCurrentTCBConst>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f01e 0f10 	tst.w	lr, #16
 8009aa0:	bf08      	it	eq
 8009aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aaa:	6010      	str	r0, [r2, #0]
 8009aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ab4:	f380 8811 	msr	BASEPRI, r0
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f7fe ffb4 	bl	8008a2c <vTaskSwitchContext>
 8009ac4:	f04f 0000 	mov.w	r0, #0
 8009ac8:	f380 8811 	msr	BASEPRI, r0
 8009acc:	bc09      	pop	{r0, r3}
 8009ace:	6819      	ldr	r1, [r3, #0]
 8009ad0:	6808      	ldr	r0, [r1, #0]
 8009ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad6:	f01e 0f10 	tst.w	lr, #16
 8009ada:	bf08      	it	eq
 8009adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ae0:	f380 8809 	msr	PSP, r0
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	f3af 8000 	nop.w

08009af0 <pxCurrentTCBConst>:
 8009af0:	20000df8 	.word	0x20000df8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop

08009af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	607b      	str	r3, [r7, #4]
}
 8009b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b12:	f7fe fed1 	bl	80088b8 <xTaskIncrementTick>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b1c:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <xPortSysTickHandler+0x40>)
 8009b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	2300      	movs	r3, #0
 8009b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	f383 8811 	msr	BASEPRI, r3
}
 8009b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b40:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <vPortSetupTimerInterrupt+0x34>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <vPortSetupTimerInterrupt+0x38>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b4c:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <vPortSetupTimerInterrupt+0x3c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a0a      	ldr	r2, [pc, #40]	; (8009b7c <vPortSetupTimerInterrupt+0x40>)
 8009b52:	fba2 2303 	umull	r2, r3, r2, r3
 8009b56:	099b      	lsrs	r3, r3, #6
 8009b58:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <vPortSetupTimerInterrupt+0x44>)
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <vPortSetupTimerInterrupt+0x34>)
 8009b60:	2207      	movs	r2, #7
 8009b62:	601a      	str	r2, [r3, #0]
}
 8009b64:	bf00      	nop
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	e000e010 	.word	0xe000e010
 8009b74:	e000e018 	.word	0xe000e018
 8009b78:	20000030 	.word	0x20000030
 8009b7c:	10624dd3 	.word	0x10624dd3
 8009b80:	e000e014 	.word	0xe000e014

08009b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b94 <vPortEnableVFP+0x10>
 8009b88:	6801      	ldr	r1, [r0, #0]
 8009b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b8e:	6001      	str	r1, [r0, #0]
 8009b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b92:	bf00      	nop
 8009b94:	e000ed88 	.word	0xe000ed88

08009b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b9e:	f3ef 8305 	mrs	r3, IPSR
 8009ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b0f      	cmp	r3, #15
 8009ba8:	d914      	bls.n	8009bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009baa:	4a17      	ldr	r2, [pc, #92]	; (8009c08 <vPortValidateInterruptPriority+0x70>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bb4:	4b15      	ldr	r3, [pc, #84]	; (8009c0c <vPortValidateInterruptPriority+0x74>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	7afa      	ldrb	r2, [r7, #11]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d20a      	bcs.n	8009bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	607b      	str	r3, [r7, #4]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bd4:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <vPortValidateInterruptPriority+0x78>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bdc:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <vPortValidateInterruptPriority+0x7c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d90a      	bls.n	8009bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	603b      	str	r3, [r7, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <vPortValidateInterruptPriority+0x60>
	}
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	e000e3f0 	.word	0xe000e3f0
 8009c0c:	20001424 	.word	0x20001424
 8009c10:	e000ed0c 	.word	0xe000ed0c
 8009c14:	20001428 	.word	0x20001428

08009c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c24:	f7fe fd8c 	bl	8008740 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c28:	4b5b      	ldr	r3, [pc, #364]	; (8009d98 <pvPortMalloc+0x180>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c30:	f000 f920 	bl	8009e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c34:	4b59      	ldr	r3, [pc, #356]	; (8009d9c <pvPortMalloc+0x184>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f040 8093 	bne.w	8009d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d01d      	beq.n	8009c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c48:	2208      	movs	r2, #8
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d014      	beq.n	8009c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f023 0307 	bic.w	r3, r3, #7
 8009c60:	3308      	adds	r3, #8
 8009c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <pvPortMalloc+0x6c>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	617b      	str	r3, [r7, #20]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d06e      	beq.n	8009d68 <pvPortMalloc+0x150>
 8009c8a:	4b45      	ldr	r3, [pc, #276]	; (8009da0 <pvPortMalloc+0x188>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d869      	bhi.n	8009d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c94:	4b43      	ldr	r3, [pc, #268]	; (8009da4 <pvPortMalloc+0x18c>)
 8009c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c98:	4b42      	ldr	r3, [pc, #264]	; (8009da4 <pvPortMalloc+0x18c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c9e:	e004      	b.n	8009caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d903      	bls.n	8009cbc <pvPortMalloc+0xa4>
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f1      	bne.n	8009ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cbc:	4b36      	ldr	r3, [pc, #216]	; (8009d98 <pvPortMalloc+0x180>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d050      	beq.n	8009d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2208      	movs	r2, #8
 8009ccc:	4413      	add	r3, r2
 8009cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d91f      	bls.n	8009d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <pvPortMalloc+0xf8>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	613b      	str	r3, [r7, #16]
}
 8009d0c:	bf00      	nop
 8009d0e:	e7fe      	b.n	8009d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	1ad2      	subs	r2, r2, r3
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d22:	69b8      	ldr	r0, [r7, #24]
 8009d24:	f000 f908 	bl	8009f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d28:	4b1d      	ldr	r3, [pc, #116]	; (8009da0 <pvPortMalloc+0x188>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	4a1b      	ldr	r2, [pc, #108]	; (8009da0 <pvPortMalloc+0x188>)
 8009d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d36:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <pvPortMalloc+0x188>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	4b1b      	ldr	r3, [pc, #108]	; (8009da8 <pvPortMalloc+0x190>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d203      	bcs.n	8009d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d42:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <pvPortMalloc+0x188>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a18      	ldr	r2, [pc, #96]	; (8009da8 <pvPortMalloc+0x190>)
 8009d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <pvPortMalloc+0x184>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	431a      	orrs	r2, r3
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <pvPortMalloc+0x194>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3301      	adds	r3, #1
 8009d64:	4a11      	ldr	r2, [pc, #68]	; (8009dac <pvPortMalloc+0x194>)
 8009d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d68:	f7fe fcf8 	bl	800875c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00a      	beq.n	8009d8c <pvPortMalloc+0x174>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60fb      	str	r3, [r7, #12]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <pvPortMalloc+0x172>
	return pvReturn;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3728      	adds	r7, #40	; 0x28
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20001fec 	.word	0x20001fec
 8009d9c:	20002000 	.word	0x20002000
 8009da0:	20001ff0 	.word	0x20001ff0
 8009da4:	20001fe4 	.word	0x20001fe4
 8009da8:	20001ff4 	.word	0x20001ff4
 8009dac:	20001ff8 	.word	0x20001ff8

08009db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d04d      	beq.n	8009e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	425b      	negs	r3, r3
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4413      	add	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	4b24      	ldr	r3, [pc, #144]	; (8009e68 <vPortFree+0xb8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4013      	ands	r3, r2
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <vPortFree+0x44>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	60fb      	str	r3, [r7, #12]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <vPortFree+0x62>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60bb      	str	r3, [r7, #8]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <vPortFree+0xb8>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01e      	beq.n	8009e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d11a      	bne.n	8009e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <vPortFree+0xb8>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	43db      	mvns	r3, r3
 8009e32:	401a      	ands	r2, r3
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e38:	f7fe fc82 	bl	8008740 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <vPortFree+0xbc>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4413      	add	r3, r2
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <vPortFree+0xbc>)
 8009e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e4a:	6938      	ldr	r0, [r7, #16]
 8009e4c:	f000 f874 	bl	8009f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <vPortFree+0xc0>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	4a06      	ldr	r2, [pc, #24]	; (8009e70 <vPortFree+0xc0>)
 8009e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e5a:	f7fe fc7f 	bl	800875c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e5e:	bf00      	nop
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20002000 	.word	0x20002000
 8009e6c:	20001ff0 	.word	0x20001ff0
 8009e70:	20001ffc 	.word	0x20001ffc

08009e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e80:	4b27      	ldr	r3, [pc, #156]	; (8009f20 <prvHeapInit+0xac>)
 8009e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00c      	beq.n	8009ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3307      	adds	r3, #7
 8009e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0307 	bic.w	r3, r3, #7
 8009e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <prvHeapInit+0xac>)
 8009ea4:	4413      	add	r3, r2
 8009ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009eac:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <prvHeapInit+0xb0>)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009eb2:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <prvHeapInit+0xb0>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0307 	bic.w	r3, r3, #7
 8009ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a15      	ldr	r2, [pc, #84]	; (8009f28 <prvHeapInit+0xb4>)
 8009ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ed6:	4b14      	ldr	r3, [pc, #80]	; (8009f28 <prvHeapInit+0xb4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2200      	movs	r2, #0
 8009edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ede:	4b12      	ldr	r3, [pc, #72]	; (8009f28 <prvHeapInit+0xb4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ef4:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <prvHeapInit+0xb4>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	4a0a      	ldr	r2, [pc, #40]	; (8009f2c <prvHeapInit+0xb8>)
 8009f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4a09      	ldr	r2, [pc, #36]	; (8009f30 <prvHeapInit+0xbc>)
 8009f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f0c:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <prvHeapInit+0xc0>)
 8009f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f12:	601a      	str	r2, [r3, #0]
}
 8009f14:	bf00      	nop
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	2000142c 	.word	0x2000142c
 8009f24:	20001fe4 	.word	0x20001fe4
 8009f28:	20001fec 	.word	0x20001fec
 8009f2c:	20001ff4 	.word	0x20001ff4
 8009f30:	20001ff0 	.word	0x20001ff0
 8009f34:	20002000 	.word	0x20002000

08009f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f40:	4b28      	ldr	r3, [pc, #160]	; (8009fe4 <prvInsertBlockIntoFreeList+0xac>)
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	e002      	b.n	8009f4c <prvInsertBlockIntoFreeList+0x14>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d8f7      	bhi.n	8009f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	4413      	add	r3, r2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d108      	bne.n	8009f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	441a      	add	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	441a      	add	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d118      	bne.n	8009fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d00d      	beq.n	8009fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	441a      	add	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	e008      	b.n	8009fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	e003      	b.n	8009fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d002      	beq.n	8009fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	20001fe4 	.word	0x20001fe4
 8009fe8:	20001fec 	.word	0x20001fec

08009fec <tetris_initialize_game>:
/**
 * @brief populate window game variable with a reset tetris game.
 *
 * @param window window
 */
void tetris_initialize_game(Window * window) {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
    // fill game board with empty data
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e00a      	b.n	800a010 <tetris_initialize_game+0x24>
        window->game.board[i] = EMPTY_BOARD_CHAR;
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a004:	33f8      	adds	r3, #248	; 0xf8
 800a006:	2264      	movs	r2, #100	; 0x64
 800a008:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	60fb      	str	r3, [r7, #12]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2bc7      	cmp	r3, #199	; 0xc7
 800a014:	ddf1      	ble.n	8009ffa <tetris_initialize_game+0xe>
    }

    // initialize game state (tetromino, rotation, next tetromino, x, y, game state)
    window->game.rotation = 0;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a01c:	33ec      	adds	r3, #236	; 0xec
 800a01e:	2200      	movs	r2, #0
 800a020:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = tetris_get_next_tetromino();
 800a022:	f000 f841 	bl	800a0a8 <tetris_get_next_tetromino>
 800a026:	4602      	mov	r2, r0
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a02e:	33d8      	adds	r3, #216	; 0xd8
 800a030:	601a      	str	r2, [r3, #0]
    const uint8_t* next = tetris_get_next_tetromino();
 800a032:	f000 f839 	bl	800a0a8 <tetris_get_next_tetromino>
 800a036:	60b8      	str	r0, [r7, #8]
	#ifdef TETRIS_LESS_RANDOM_FLAG
	if (next == window->game.tetromino) next = tetris_get_next_tetromino();
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a03e:	33d8      	adds	r3, #216	; 0xd8
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	429a      	cmp	r2, r3
 800a046:	d102      	bne.n	800a04e <tetris_initialize_game+0x62>
 800a048:	f000 f82e 	bl	800a0a8 <tetris_get_next_tetromino>
 800a04c:	60b8      	str	r0, [r7, #8]
	#endif
    window->game.nextTetromino = next;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a054:	33e0      	adds	r3, #224	; 0xe0
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a060:	33f0      	adds	r3, #240	; 0xf0
 800a062:	2203      	movs	r2, #3
 800a064:	601a      	str	r2, [r3, #0]
    window->game.y = 0;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a06c:	33f4      	adds	r3, #244	; 0xf4
 800a06e:	2200      	movs	r2, #0
 800a070:	601a      	str	r2, [r3, #0]
    window->game.state = Start;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a078:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
    window->game.points = 0;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a086:	33e4      	adds	r3, #228	; 0xe4
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]
    window->game.rows_cleared = 0;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a092:	33e8      	adds	r3, #232	; 0xe8
 800a094:	2200      	movs	r2, #0
 800a096:	601a      	str	r2, [r3, #0]

    // initialize the current tetromino
    tetris_update_current_tetromino(window);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 f851 	bl	800a140 <tetris_update_current_tetromino>
}
 800a09e:	bf00      	nop
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <tetris_get_next_tetromino>:
/**
 * @brief generate random tetromino piece (select random number between 0 and 7)
 *
 * @return const char* pointer to random tetromino piece
 */
const uint8_t * tetris_get_next_tetromino() {
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
	HAL_RNG_GenerateRandomNumber(&hrng, &rand_block);
 800a0ac:	491a      	ldr	r1, [pc, #104]	; (800a118 <tetris_get_next_tetromino+0x70>)
 800a0ae:	481b      	ldr	r0, [pc, #108]	; (800a11c <tetris_get_next_tetromino+0x74>)
 800a0b0:	f7f9 fe70 	bl	8003d94 <HAL_RNG_GenerateRandomNumber>
    switch (rand_block % 7) {
 800a0b4:	4b18      	ldr	r3, [pc, #96]	; (800a118 <tetris_get_next_tetromino+0x70>)
 800a0b6:	6819      	ldr	r1, [r3, #0]
 800a0b8:	4b19      	ldr	r3, [pc, #100]	; (800a120 <tetris_get_next_tetromino+0x78>)
 800a0ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a0be:	1aca      	subs	r2, r1, r3
 800a0c0:	0852      	lsrs	r2, r2, #1
 800a0c2:	4413      	add	r3, r2
 800a0c4:	089a      	lsrs	r2, r3, #2
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	00db      	lsls	r3, r3, #3
 800a0ca:	1a9b      	subs	r3, r3, r2
 800a0cc:	1aca      	subs	r2, r1, r3
 800a0ce:	2a06      	cmp	r2, #6
 800a0d0:	d81e      	bhi.n	800a110 <tetris_get_next_tetromino+0x68>
 800a0d2:	a301      	add	r3, pc, #4	; (adr r3, 800a0d8 <tetris_get_next_tetromino+0x30>)
 800a0d4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800a0d8:	0800a0f5 	.word	0x0800a0f5
 800a0dc:	0800a0f9 	.word	0x0800a0f9
 800a0e0:	0800a0fd 	.word	0x0800a0fd
 800a0e4:	0800a101 	.word	0x0800a101
 800a0e8:	0800a105 	.word	0x0800a105
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a10d 	.word	0x0800a10d
        case 0:
            return tetromino_I;
 800a0f4:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <tetris_get_next_tetromino+0x7c>)
 800a0f6:	e00c      	b.n	800a112 <tetris_get_next_tetromino+0x6a>
        break;
        case 1:
            return tetromino_J;
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <tetris_get_next_tetromino+0x80>)
 800a0fa:	e00a      	b.n	800a112 <tetris_get_next_tetromino+0x6a>
        break;
        case 2:
            return tetromino_L;
 800a0fc:	4b0b      	ldr	r3, [pc, #44]	; (800a12c <tetris_get_next_tetromino+0x84>)
 800a0fe:	e008      	b.n	800a112 <tetris_get_next_tetromino+0x6a>
        break;
        case 3:
            return tetromino_O;
 800a100:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <tetris_get_next_tetromino+0x88>)
 800a102:	e006      	b.n	800a112 <tetris_get_next_tetromino+0x6a>
        break;
        case 4:
            return tetromino_S;
 800a104:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <tetris_get_next_tetromino+0x8c>)
 800a106:	e004      	b.n	800a112 <tetris_get_next_tetromino+0x6a>
        break;
        case 5:
            return tetromino_T;
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <tetris_get_next_tetromino+0x90>)
 800a10a:	e002      	b.n	800a112 <tetris_get_next_tetromino+0x6a>
        break;
        case 6:
            return tetromino_Z;
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <tetris_get_next_tetromino+0x94>)
 800a10e:	e000      	b.n	800a112 <tetris_get_next_tetromino+0x6a>
        break;
        default:
            return tetromino_I; // TODO: this is never supposed to happen.
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <tetris_get_next_tetromino+0x7c>)
        break;
    }

}
 800a112:	4618      	mov	r0, r3
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20002064 	.word	0x20002064
 800a11c:	20002274 	.word	0x20002274
 800a120:	24924925 	.word	0x24924925
 800a124:	0800d518 	.word	0x0800d518
 800a128:	0800d528 	.word	0x0800d528
 800a12c:	0800d538 	.word	0x0800d538
 800a130:	0800d548 	.word	0x0800d548
 800a134:	0800d558 	.word	0x0800d558
 800a138:	0800d568 	.word	0x0800d568
 800a13c:	0800d578 	.word	0x0800d578

0800a140 <tetris_update_current_tetromino>:
/**
 * @brief Updates the tetromino piece used for collision/drawing purposes
 *
 * @param window window
 */
void tetris_update_current_tetromino(Window * window) {
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
    // update piece based on rotation state
    int index = 0, row, col;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]
    switch (window->game.rotation) {
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a152:	33ec      	adds	r3, #236	; 0xec
 800a154:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a158:	2b03      	cmp	r3, #3
 800a15a:	f200 809b 	bhi.w	800a294 <tetris_update_current_tetromino+0x154>
 800a15e:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <tetris_update_current_tetromino+0x24>)
 800a160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a1bd 	.word	0x0800a1bd
 800a16c:	0800a205 	.word	0x0800a205
 800a170:	0800a24d 	.word	0x0800a24d
        case 0:
            // no rotation
            for (row = 0; row < 4; row++) {
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	e01c      	b.n	800a1b4 <tetris_update_current_tetromino+0x74>
                for (col = 0; col < 4; col++) {
 800a17a:	2300      	movs	r3, #0
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	e013      	b.n	800a1a8 <tetris_update_current_tetromino+0x68>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a186:	33d8      	adds	r3, #216	; 0xd8
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	441a      	add	r2, r3
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	0099      	lsls	r1, r3, #2
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	440b      	add	r3, r1
 800a196:	7811      	ldrb	r1, [r2, #0]
 800a198:	4a41      	ldr	r2, [pc, #260]	; (800a2a0 <tetris_update_current_tetromino+0x160>)
 800a19a:	54d1      	strb	r1, [r2, r3]
                    index++;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	617b      	str	r3, [r7, #20]
                for (col = 0; col < 4; col++) {
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	dde8      	ble.n	800a180 <tetris_update_current_tetromino+0x40>
            for (row = 0; row < 4; row++) {
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	dddf      	ble.n	800a17a <tetris_update_current_tetromino+0x3a>
                }
            }
        break;
 800a1ba:	e06b      	b.n	800a294 <tetris_update_current_tetromino+0x154>
        case 1:
            // C 1; CC 3;
            for (col = 3; col >= 0; col--) {
 800a1bc:	2303      	movs	r3, #3
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	e01c      	b.n	800a1fc <tetris_update_current_tetromino+0xbc>
                for (row = 0; row < 4; row++) {
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	613b      	str	r3, [r7, #16]
 800a1c6:	e013      	b.n	800a1f0 <tetris_update_current_tetromino+0xb0>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a1ce:	33d8      	adds	r3, #216	; 0xd8
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	441a      	add	r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	0099      	lsls	r1, r3, #2
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	440b      	add	r3, r1
 800a1de:	7811      	ldrb	r1, [r2, #0]
 800a1e0:	4a2f      	ldr	r2, [pc, #188]	; (800a2a0 <tetris_update_current_tetromino+0x160>)
 800a1e2:	54d1      	strb	r1, [r2, r3]
                    index++;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	617b      	str	r3, [r7, #20]
                for (row = 0; row < 4; row++) {
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	613b      	str	r3, [r7, #16]
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	dde8      	ble.n	800a1c8 <tetris_update_current_tetromino+0x88>
            for (col = 3; col >= 0; col--) {
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	60fb      	str	r3, [r7, #12]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	dadf      	bge.n	800a1c2 <tetris_update_current_tetromino+0x82>
                }
            }
        break;
 800a202:	e047      	b.n	800a294 <tetris_update_current_tetromino+0x154>
        case 2:
            // C 2; CC 2;
            for (row = 3; row >= 0; row--) {
 800a204:	2303      	movs	r3, #3
 800a206:	613b      	str	r3, [r7, #16]
 800a208:	e01c      	b.n	800a244 <tetris_update_current_tetromino+0x104>
                for (col = 3; col >= 0; col--) {
 800a20a:	2303      	movs	r3, #3
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	e013      	b.n	800a238 <tetris_update_current_tetromino+0xf8>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a216:	33d8      	adds	r3, #216	; 0xd8
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	441a      	add	r2, r3
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	0099      	lsls	r1, r3, #2
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	440b      	add	r3, r1
 800a226:	7811      	ldrb	r1, [r2, #0]
 800a228:	4a1d      	ldr	r2, [pc, #116]	; (800a2a0 <tetris_update_current_tetromino+0x160>)
 800a22a:	54d1      	strb	r1, [r2, r3]
                    index++;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	3301      	adds	r3, #1
 800a230:	617b      	str	r3, [r7, #20]
                for (col = 3; col >= 0; col--) {
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3b01      	subs	r3, #1
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	dae8      	bge.n	800a210 <tetris_update_current_tetromino+0xd0>
            for (row = 3; row >= 0; row--) {
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	3b01      	subs	r3, #1
 800a242:	613b      	str	r3, [r7, #16]
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	2b00      	cmp	r3, #0
 800a248:	dadf      	bge.n	800a20a <tetris_update_current_tetromino+0xca>
                }
            }
        break;
 800a24a:	e023      	b.n	800a294 <tetris_update_current_tetromino+0x154>
        case 3:
            // C 3; CC 1;
            for (col = 0; col < 4; col++) {
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e01c      	b.n	800a28c <tetris_update_current_tetromino+0x14c>
                for (row = 3; row >= 0; row--) {
 800a252:	2303      	movs	r3, #3
 800a254:	613b      	str	r3, [r7, #16]
 800a256:	e013      	b.n	800a280 <tetris_update_current_tetromino+0x140>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a25e:	33d8      	adds	r3, #216	; 0xd8
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	441a      	add	r2, r3
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	0099      	lsls	r1, r3, #2
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	440b      	add	r3, r1
 800a26e:	7811      	ldrb	r1, [r2, #0]
 800a270:	4a0b      	ldr	r2, [pc, #44]	; (800a2a0 <tetris_update_current_tetromino+0x160>)
 800a272:	54d1      	strb	r1, [r2, r3]
                    index++;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	3301      	adds	r3, #1
 800a278:	617b      	str	r3, [r7, #20]
                for (row = 3; row >= 0; row--) {
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	dae8      	bge.n	800a258 <tetris_update_current_tetromino+0x118>
            for (col = 0; col < 4; col++) {
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3301      	adds	r3, #1
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2b03      	cmp	r3, #3
 800a290:	dddf      	ble.n	800a252 <tetris_update_current_tetromino+0x112>
                }
            }
        break;
 800a292:	bf00      	nop
    }
}
 800a294:	bf00      	nop
 800a296:	371c      	adds	r7, #28
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	2000000c 	.word	0x2000000c

0800a2a4 <tetris_rotate_C_tetromino>:
/**
 * @brief Rotate the tetromino piece clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_C_tetromino(Window * window) {
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 1) % 4;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a2b2:	33ec      	adds	r3, #236	; 0xec
 800a2b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	425a      	negs	r2, r3
 800a2bc:	f003 0303 	and.w	r3, r3, #3
 800a2c0:	f002 0203 	and.w	r2, r2, #3
 800a2c4:	bf58      	it	pl
 800a2c6:	4253      	negpl	r3, r2
 800a2c8:	b21a      	sxth	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a2d0:	33ec      	adds	r3, #236	; 0xec
 800a2d2:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7ff ff33 	bl	800a140 <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f8be 	bl	800a460 <tetris_validate_position>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d016      	beq.n	800a318 <tetris_rotate_C_tetromino+0x74>
        window->game.rotation = (window->game.rotation + 3) % 4;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a2f0:	33ec      	adds	r3, #236	; 0xec
 800a2f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2f6:	3303      	adds	r3, #3
 800a2f8:	425a      	negs	r2, r3
 800a2fa:	f003 0303 	and.w	r3, r3, #3
 800a2fe:	f002 0203 	and.w	r2, r2, #3
 800a302:	bf58      	it	pl
 800a304:	4253      	negpl	r3, r2
 800a306:	b21a      	sxth	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a30e:	33ec      	adds	r3, #236	; 0xec
 800a310:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff ff14 	bl	800a140 <tetris_update_current_tetromino>
    }
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <tetris_rotate_CC_tetromino>:
/**
 * @brief Rotate the tetromino piece conter clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_CC_tetromino(Window * window) {
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 3) % 4;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a32e:	33ec      	adds	r3, #236	; 0xec
 800a330:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a334:	3303      	adds	r3, #3
 800a336:	425a      	negs	r2, r3
 800a338:	f003 0303 	and.w	r3, r3, #3
 800a33c:	f002 0203 	and.w	r2, r2, #3
 800a340:	bf58      	it	pl
 800a342:	4253      	negpl	r3, r2
 800a344:	b21a      	sxth	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a34c:	33ec      	adds	r3, #236	; 0xec
 800a34e:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff fef5 	bl	800a140 <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800a356:	2200      	movs	r2, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f880 	bl	800a460 <tetris_validate_position>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d016      	beq.n	800a394 <tetris_rotate_CC_tetromino+0x74>
        window->game.rotation = (window->game.rotation + 1) % 4;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a36c:	33ec      	adds	r3, #236	; 0xec
 800a36e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a372:	3301      	adds	r3, #1
 800a374:	425a      	negs	r2, r3
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	f002 0203 	and.w	r2, r2, #3
 800a37e:	bf58      	it	pl
 800a380:	4253      	negpl	r3, r2
 800a382:	b21a      	sxth	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a38a:	33ec      	adds	r3, #236	; 0xec
 800a38c:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff fed6 	bl	800a140 <tetris_update_current_tetromino>
    }
}
 800a394:	bf00      	nop
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <tetris_move_left>:
 * @brief Move the piece to the left. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_left(Window * window) {
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, -1, 0)) {
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f04f 31ff 	mov.w	r1, #4294967295
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f858 	bl	800a460 <tetris_validate_position>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <tetris_move_left+0x34>
        window->game.x--;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a3bc:	33f0      	adds	r3, #240	; 0xf0
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	1e5a      	subs	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a3c8:	33f0      	adds	r3, #240	; 0xf0
 800a3ca:	601a      	str	r2, [r3, #0]
        return 1;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e000      	b.n	800a3d2 <tetris_move_left+0x36>
    }
    return 0;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <tetris_move_right>:
 * @brief Move the piece to the right. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_right(Window * window) {
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 1, 0)) {
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f83a 	bl	800a460 <tetris_validate_position>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10c      	bne.n	800a40c <tetris_move_right+0x32>
        window->game.x++;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a3f8:	33f0      	adds	r3, #240	; 0xf0
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	1c5a      	adds	r2, r3, #1
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a404:	33f0      	adds	r3, #240	; 0xf0
 800a406:	601a      	str	r2, [r3, #0]
        return 1;
 800a408:	2301      	movs	r3, #1
 800a40a:	e000      	b.n	800a40e <tetris_move_right+0x34>
    }
    return 0;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <tetris_move_down>:
 * @brief Move the piece down. Tetromino piece position is finalized if collision occurs. Get next tetromino & update board accordingly.
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_down(Window * window) {
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 0, 1)) {
 800a41e:	2201      	movs	r2, #1
 800a420:	2100      	movs	r1, #0
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f81c 	bl	800a460 <tetris_validate_position>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10c      	bne.n	800a448 <tetris_move_down+0x32>
        window->game.y++;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a434:	33f4      	adds	r3, #244	; 0xf4
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a440:	33f4      	adds	r3, #244	; 0xf4
 800a442:	601a      	str	r2, [r3, #0]
        return 1;
 800a444:	2301      	movs	r3, #1
 800a446:	e006      	b.n	800a456 <tetris_move_down+0x40>
    }

    tetris_finished_tetromino(window);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f885 	bl	800a558 <tetris_finished_tetromino>
    tetris_detect_rowCompletion(window);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f920 	bl	800a694 <tetris_detect_rowCompletion>
    return 1;
 800a454:	2301      	movs	r3, #1
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <tetris_validate_position>:
 * @param window tetris game window w/ tetromino data we want to validate
 * @param x_offset added to tetromino current x. X position to validate
 * @param y_offset added to tetromino current y. Y position to validate
 * @return int error code. 0 = no collision. 1 = collision w/ left wall. 2 = collision w/ right wall. 3 = collision with bottom floor. 4 = collision w/another block
 */
int tetris_validate_position(Window * window, int x_offset, int y_offset) {
 800a460:	b480      	push	{r7}
 800a462:	b089      	sub	sp, #36	; 0x24
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
    int index = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a476:	33f4      	adds	r3, #244	; 0xf4
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	4413      	add	r3, r2
 800a47e:	61bb      	str	r3, [r7, #24]
 800a480:	e055      	b.n	800a52e <tetris_validate_position+0xce>
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a488:	33f0      	adds	r3, #240	; 0xf0
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	4413      	add	r3, r2
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	e03e      	b.n	800a512 <tetris_validate_position+0xb2>
            // check for collision w/ bottom floor
            if (row >= BOARD_HEIGHT && tetromino_current[index] != 10) {
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	2b13      	cmp	r3, #19
 800a498:	dd07      	ble.n	800a4aa <tetris_validate_position+0x4a>
 800a49a:	4a2e      	ldr	r2, [pc, #184]	; (800a554 <tetris_validate_position+0xf4>)
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	4413      	add	r3, r2
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	2b0a      	cmp	r3, #10
 800a4a4:	d001      	beq.n	800a4aa <tetris_validate_position+0x4a>
                return 3;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e04d      	b.n	800a546 <tetris_validate_position+0xe6>
            }
            // collision w/ left wall
            if (col < 0 && tetromino_current[index] != 10) {
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	da07      	bge.n	800a4c0 <tetris_validate_position+0x60>
 800a4b0:	4a28      	ldr	r2, [pc, #160]	; (800a554 <tetris_validate_position+0xf4>)
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b0a      	cmp	r3, #10
 800a4ba:	d001      	beq.n	800a4c0 <tetris_validate_position+0x60>
                return 1;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e042      	b.n	800a546 <tetris_validate_position+0xe6>
            }
            if (col >= BOARD_WIDTH && tetromino_current[index] != 10) {
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b09      	cmp	r3, #9
 800a4c4:	dd07      	ble.n	800a4d6 <tetris_validate_position+0x76>
 800a4c6:	4a23      	ldr	r2, [pc, #140]	; (800a554 <tetris_validate_position+0xf4>)
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	2b0a      	cmp	r3, #10
 800a4d0:	d001      	beq.n	800a4d6 <tetris_validate_position+0x76>
                return 2;
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	e037      	b.n	800a546 <tetris_validate_position+0xe6>
            }
            if (tetromino_current[index] != 10 && window->game.board[BOARD_WIDTH * row + col] != EMPTY_BOARD_CHAR) {
 800a4d6:	4a1f      	ldr	r2, [pc, #124]	; (800a554 <tetris_validate_position+0xf4>)
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	4413      	add	r3, r2
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b0a      	cmp	r3, #10
 800a4e0:	d011      	beq.n	800a506 <tetris_validate_position+0xa6>
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a4fa:	33f8      	adds	r3, #248	; 0xf8
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b64      	cmp	r3, #100	; 0x64
 800a500:	d001      	beq.n	800a506 <tetris_validate_position+0xa6>
                return 4;
 800a502:	2304      	movs	r3, #4
 800a504:	e01f      	b.n	800a546 <tetris_validate_position+0xe6>
            }
            index++;
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	3301      	adds	r3, #1
 800a50a:	61fb      	str	r3, [r7, #28]
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	3301      	adds	r3, #1
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a518:	33f0      	adds	r3, #240	; 0xf0
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	1d1a      	adds	r2, r3, #4
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	4413      	add	r3, r2
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	429a      	cmp	r2, r3
 800a526:	dbb5      	blt.n	800a494 <tetris_validate_position+0x34>
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	3301      	adds	r3, #1
 800a52c:	61bb      	str	r3, [r7, #24]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a534:	33f4      	adds	r3, #244	; 0xf4
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	1d1a      	adds	r2, r3, #4
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	429a      	cmp	r2, r3
 800a542:	db9e      	blt.n	800a482 <tetris_validate_position+0x22>
        }
    }
    return 0;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3724      	adds	r7, #36	; 0x24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	2000000c 	.word	0x2000000c

0800a558 <tetris_finished_tetromino>:
 * @brief Finalizes the tetromino position and generates a new tetromino.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_finished_tetromino(Window * window) {
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
    int index = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	617b      	str	r3, [r7, #20]
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a56a:	33f4      	adds	r3, #244	; 0xf4
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	613b      	str	r3, [r7, #16]
 800a570:	e04d      	b.n	800a60e <tetris_finished_tetromino+0xb6>
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a578:	33f0      	adds	r3, #240	; 0xf0
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	e03a      	b.n	800a5f6 <tetris_finished_tetromino+0x9e>
            if (row >= 0 && row < BOARD_HEIGHT && col >= 0 && col < BOARD_WIDTH && tetromino_current[index] != 10) {
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	2b00      	cmp	r3, #0
 800a584:	db31      	blt.n	800a5ea <tetris_finished_tetromino+0x92>
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	2b13      	cmp	r3, #19
 800a58a:	dc2e      	bgt.n	800a5ea <tetris_finished_tetromino+0x92>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	db2b      	blt.n	800a5ea <tetris_finished_tetromino+0x92>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b09      	cmp	r3, #9
 800a596:	dc28      	bgt.n	800a5ea <tetris_finished_tetromino+0x92>
 800a598:	4a3d      	ldr	r2, [pc, #244]	; (800a690 <tetris_finished_tetromino+0x138>)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	4413      	add	r3, r2
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	2b0a      	cmp	r3, #10
 800a5a2:	d022      	beq.n	800a5ea <tetris_finished_tetromino+0x92>
                window->game.board[BOARD_WIDTH * row + col] = tetromino_current[index];
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	4936      	ldr	r1, [pc, #216]	; (800a690 <tetris_finished_tetromino+0x138>)
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	440a      	add	r2, r1
 800a5ba:	7811      	ldrb	r1, [r2, #0]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a5c4:	33f8      	adds	r3, #248	; 0xf8
 800a5c6:	460a      	mov	r2, r1
 800a5c8:	701a      	strb	r2, [r3, #0]

                // check to see if game over!
                if (row < 4) {
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2b03      	cmp	r3, #3
 800a5ce:	dc0c      	bgt.n	800a5ea <tetris_finished_tetromino+0x92>
                    tetris_initialize_game(window);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff fd0b 	bl	8009fec <tetris_initialize_game>
                    tetris_drawEndScreen(window);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 fe76 	bl	800c2c8 <tetris_drawEndScreen>
                    window->game.state = Ended;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a5e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	701a      	strb	r2, [r3, #0]
                }
            }
            index++;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	617b      	str	r3, [r7, #20]
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a5fc:	33f0      	adds	r3, #240	; 0xf0
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3303      	adds	r3, #3
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	429a      	cmp	r2, r3
 800a606:	ddbb      	ble.n	800a580 <tetris_finished_tetromino+0x28>
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	3301      	adds	r3, #1
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a614:	33f4      	adds	r3, #244	; 0xf4
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3303      	adds	r3, #3
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	dda8      	ble.n	800a572 <tetris_finished_tetromino+0x1a>
        }
    }

    // reset tetromino position & spawn next tetromino
    window->game.y = 0;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a626:	33f4      	adds	r3, #244	; 0xf4
 800a628:	2200      	movs	r2, #0
 800a62a:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a632:	33f0      	adds	r3, #240	; 0xf0
 800a634:	2203      	movs	r2, #3
 800a636:	601a      	str	r2, [r3, #0]
    window->game.rotation = 0;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a63e:	33ec      	adds	r3, #236	; 0xec
 800a640:	2200      	movs	r2, #0
 800a642:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = window->game.nextTetromino;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a64a:	33e0      	adds	r3, #224	; 0xe0
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a654:	33d8      	adds	r3, #216	; 0xd8
 800a656:	601a      	str	r2, [r3, #0]
    const uint8_t* next = tetris_get_next_tetromino();
 800a658:	f7ff fd26 	bl	800a0a8 <tetris_get_next_tetromino>
 800a65c:	60b8      	str	r0, [r7, #8]
    #ifdef TETRIS_LESS_RANDOM_FLAG
    if (next == window->game.tetromino) next = tetris_get_next_tetromino();
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a664:	33d8      	adds	r3, #216	; 0xd8
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d102      	bne.n	800a674 <tetris_finished_tetromino+0x11c>
 800a66e:	f7ff fd1b 	bl	800a0a8 <tetris_get_next_tetromino>
 800a672:	60b8      	str	r0, [r7, #8]
	#endif
    window->game.nextTetromino = next;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a67a:	33e0      	adds	r3, #224	; 0xe0
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	601a      	str	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff fd5d 	bl	800a140 <tetris_update_current_tetromino>
    // Write next tetromino and points to the screen in both buffers

}
 800a686:	bf00      	nop
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	2000000c 	.word	0x2000000c

0800a694 <tetris_detect_rowCompletion>:
/**
 * @brief Detect full rows, and clears them out of the board
 *
 * @param window window w/ game
 */
void tetris_detect_rowCompletion(Window * window) {
 800a694:	b480      	push	{r7}
 800a696:	b09f      	sub	sp, #124	; 0x7c
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
    // go over board & detect all lines that need to be cleared.
    int rowCompleted[BOARD_HEIGHT];
    int numRowsCompleted = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	677b      	str	r3, [r7, #116]	; 0x74
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	673b      	str	r3, [r7, #112]	; 0x70
 800a6a4:	e037      	b.n	800a716 <tetris_detect_rowCompletion+0x82>
        rowCompleted[row] = 1;
 800a6a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a6ae:	4413      	add	r3, r2
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f843 2c70 	str.w	r2, [r3, #-112]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6ba:	e01a      	b.n	800a6f2 <tetris_detect_rowCompletion+0x5e>
            if (window->game.board[BOARD_WIDTH * row + col] == EMPTY_BOARD_CHAR) {
 800a6bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ca:	4413      	add	r3, r2
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a6d4:	33f8      	adds	r3, #248	; 0xf8
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	2b64      	cmp	r3, #100	; 0x64
 800a6da:	d107      	bne.n	800a6ec <tetris_detect_rowCompletion+0x58>
                rowCompleted[row] = 0;
 800a6dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a6e4:	4413      	add	r3, r2
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f843 2c70 	str.w	r2, [r3, #-112]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800a6ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f4:	2b09      	cmp	r3, #9
 800a6f6:	dde1      	ble.n	800a6bc <tetris_detect_rowCompletion+0x28>
            }
        }
        if(rowCompleted[row]) numRowsCompleted++;
 800a6f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a700:	4413      	add	r3, r2
 800a702:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <tetris_detect_rowCompletion+0x7c>
 800a70a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a70c:	3301      	adds	r3, #1
 800a70e:	677b      	str	r3, [r7, #116]	; 0x74
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800a710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a712:	3301      	adds	r3, #1
 800a714:	673b      	str	r3, [r7, #112]	; 0x70
 800a716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a718:	2b13      	cmp	r3, #19
 800a71a:	ddc4      	ble.n	800a6a6 <tetris_detect_rowCompletion+0x12>
    }

    // go over board from bottom to top & delete the lines that need to be cleared
    int row_currently_drawn = BOARD_HEIGHT - 1;
 800a71c:	2313      	movs	r3, #19
 800a71e:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800a720:	2313      	movs	r3, #19
 800a722:	667b      	str	r3, [r7, #100]	; 0x64
 800a724:	e034      	b.n	800a790 <tetris_detect_rowCompletion+0xfc>
        if (!rowCompleted[row]) {
 800a726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a72e:	4413      	add	r3, r2
 800a730:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d128      	bne.n	800a78a <tetris_detect_rowCompletion+0xf6>
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800a738:	2300      	movs	r3, #0
 800a73a:	663b      	str	r3, [r7, #96]	; 0x60
 800a73c:	e01f      	b.n	800a77e <tetris_detect_rowCompletion+0xea>
                window->game.board[BOARD_WIDTH * row_currently_drawn + col] = window->game.board[BOARD_WIDTH * row + col];
 800a73e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	005b      	lsls	r3, r3, #1
 800a748:	461a      	mov	r2, r3
 800a74a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a74c:	18d1      	adds	r1, r2, r3
 800a74e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	461a      	mov	r2, r3
 800a75a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a75c:	441a      	add	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	440b      	add	r3, r1
 800a762:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a766:	33f8      	adds	r3, #248	; 0xf8
 800a768:	7819      	ldrb	r1, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a772:	33f8      	adds	r3, #248	; 0xf8
 800a774:	460a      	mov	r2, r1
 800a776:	701a      	strb	r2, [r3, #0]
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800a778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a77a:	3301      	adds	r3, #1
 800a77c:	663b      	str	r3, [r7, #96]	; 0x60
 800a77e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a780:	2b09      	cmp	r3, #9
 800a782:	dddc      	ble.n	800a73e <tetris_detect_rowCompletion+0xaa>
            }
            row_currently_drawn--;
 800a784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a786:	3b01      	subs	r3, #1
 800a788:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800a78a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a78c:	3b01      	subs	r3, #1
 800a78e:	667b      	str	r3, [r7, #100]	; 0x64
 800a790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a792:	2b00      	cmp	r3, #0
 800a794:	dac7      	bge.n	800a726 <tetris_detect_rowCompletion+0x92>
        }
    }

    for (int row = row_currently_drawn; row >= 0; row--) {
 800a796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a79a:	e01d      	b.n	800a7d8 <tetris_detect_rowCompletion+0x144>
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800a79c:	2300      	movs	r3, #0
 800a79e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7a0:	e011      	b.n	800a7c6 <tetris_detect_rowCompletion+0x132>
            window->game.board[BOARD_WIDTH * row_currently_drawn + col] = EMPTY_BOARD_CHAR;
 800a7a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7b0:	4413      	add	r3, r2
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a7ba:	33f8      	adds	r3, #248	; 0xf8
 800a7bc:	2264      	movs	r2, #100	; 0x64
 800a7be:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800a7c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7c8:	2b09      	cmp	r3, #9
 800a7ca:	ddea      	ble.n	800a7a2 <tetris_detect_rowCompletion+0x10e>
        }
        row_currently_drawn--;
 800a7cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = row_currently_drawn; row >= 0; row--) {
 800a7d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dade      	bge.n	800a79c <tetris_detect_rowCompletion+0x108>
    }

    window->game.rows_cleared += numRowsCompleted;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a7e4:	33e8      	adds	r3, #232	; 0xe8
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7ea:	441a      	add	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a7f2:	33e8      	adds	r3, #232	; 0xe8
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d83e      	bhi.n	800a87c <tetris_detect_rowCompletion+0x1e8>
 800a7fe:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <tetris_detect_rowCompletion+0x170>)
 800a800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a804:	0800a815 	.word	0x0800a815
 800a808:	0800a82f 	.word	0x0800a82f
 800a80c:	0800a849 	.word	0x0800a849
 800a810:	0800a863 	.word	0x0800a863
    switch(numRowsCompleted) {
    case 1:
    	window->game.points += 40;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a81a:	33e4      	adds	r3, #228	; 0xe4
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a828:	33e4      	adds	r3, #228	; 0xe4
 800a82a:	601a      	str	r2, [r3, #0]
    	break;
 800a82c:	e027      	b.n	800a87e <tetris_detect_rowCompletion+0x1ea>
    case 2:
    	window->game.points += 100;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a834:	33e4      	adds	r3, #228	; 0xe4
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a842:	33e4      	adds	r3, #228	; 0xe4
 800a844:	601a      	str	r2, [r3, #0]
    	break;
 800a846:	e01a      	b.n	800a87e <tetris_detect_rowCompletion+0x1ea>
    case 3:
    	window->game.points += 300;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a84e:	33e4      	adds	r3, #228	; 0xe4
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a85c:	33e4      	adds	r3, #228	; 0xe4
 800a85e:	601a      	str	r2, [r3, #0]
    	break;
 800a860:	e00d      	b.n	800a87e <tetris_detect_rowCompletion+0x1ea>
    case 4:
    	window->game.points += 1200;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a868:	33e4      	adds	r3, #228	; 0xe4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a876:	33e4      	adds	r3, #228	; 0xe4
 800a878:	601a      	str	r2, [r3, #0]
    	break;
 800a87a:	e000      	b.n	800a87e <tetris_detect_rowCompletion+0x1ea>
    default:
    	break;
 800a87c:	bf00      	nop
    }
}
 800a87e:	bf00      	nop
 800a880:	377c      	adds	r7, #124	; 0x7c
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop

0800a88c <create_window>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// create window, as well as initializes tetris game
void create_window(Window * window) {
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
    // initialize window
    window->width = IMAGE_WIDTH;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2250      	movs	r2, #80	; 0x50
 800a898:	601a      	str	r2, [r3, #0]
    window->height = IMAGE_HEIGHT;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a8a0:	605a      	str	r2, [r3, #4]

    window->frame = (uint8_t**) malloc(sizeof(uint8_t*) * FRAME_HEIGHT);
 800a8a2:	f240 7004 	movw	r0, #1796	; 0x704
 800a8a6:	f001 ff01 	bl	800c6ac <malloc>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	609a      	str	r2, [r3, #8]
    window->true  = (uint8_t**) malloc(sizeof(uint8_t*) * FRAME_HEIGHT);
 800a8b2:	f240 7004 	movw	r0, #1796	; 0x704
 800a8b6:	f001 fef9 	bl	800c6ac <malloc>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	461a      	mov	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	60da      	str	r2, [r3, #12]

    // Fill image buffers with default value
    for(int i = 0; i < FRAME_HEIGHT; i++) {
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	e03e      	b.n	800a946 <create_window+0xba>
		// Point to place in continuous mem location
    	window->frame[i] = window->frameBuff + i*FRAME_WIDTH;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f103 0210 	add.w	r2, r3, #16
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2164      	movs	r1, #100	; 0x64
 800a8d2:	fb01 f303 	mul.w	r3, r1, r3
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6899      	ldr	r1, [r3, #8]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	440b      	add	r3, r1
 800a8e2:	4402      	add	r2, r0
 800a8e4:	601a      	str	r2, [r3, #0]
    	window->true[i]  = window->trueBuff  + i*FRAME_WIDTH;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f503 432f 	add.w	r3, r3, #44800	; 0xaf00
 800a8ec:	3374      	adds	r3, #116	; 0x74
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	2164      	movs	r1, #100	; 0x64
 800a8f2:	fb01 f202 	mul.w	r2, r1, r2
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	68d1      	ldr	r1, [r2, #12]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	0092      	lsls	r2, r2, #2
 800a900:	440a      	add	r2, r1
 800a902:	4403      	add	r3, r0
 800a904:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < FRAME_WIDTH; j++) {
 800a906:	2300      	movs	r3, #0
 800a908:	60bb      	str	r3, [r7, #8]
 800a90a:	e016      	b.n	800a93a <create_window+0xae>
			window->frame[i][j] = 0;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689a      	ldr	r2, [r3, #8]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	4413      	add	r3, r2
 800a91c:	2200      	movs	r2, #0
 800a91e:	701a      	strb	r2, [r3, #0]
			window->true[i][j] = 0;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68da      	ldr	r2, [r3, #12]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	4413      	add	r3, r2
 800a930:	2200      	movs	r2, #0
 800a932:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < FRAME_WIDTH; j++) {
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	3301      	adds	r3, #1
 800a938:	60bb      	str	r3, [r7, #8]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b63      	cmp	r3, #99	; 0x63
 800a93e:	dde5      	ble.n	800a90c <create_window+0x80>
    for(int i = 0; i < FRAME_HEIGHT; i++) {
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	3301      	adds	r3, #1
 800a944:	60fb      	str	r3, [r7, #12]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800a94c:	ddbc      	ble.n	800a8c8 <create_window+0x3c>
		}
    }

    // initialize tetris game board
    tetris_initialize_game(window);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fb4c 	bl	8009fec <tetris_initialize_game>
}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <triggerSoundEffect>:

/**
 * Stops currently playing track to play a sound effect. Plays sound effect and returns to previous music
 * Size of sfx currently 0 because we have no sfxs
 */
void triggerSoundEffect(uint16_t* effect_data, unsigned long int effect_size) {
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
	// Stop DAC, change music source, start again
	playing_snd = 0;
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <triggerSoundEffect+0x3c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
	snd_wave_data = effect_data;
 800a96c:	4a0b      	ldr	r2, [pc, #44]	; (800a99c <triggerSoundEffect+0x40>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6013      	str	r3, [r2, #0]
	full_snd_data_offset = snd_data_offset; // Record where we were
 800a972:	4b0b      	ldr	r3, [pc, #44]	; (800a9a0 <triggerSoundEffect+0x44>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a0b      	ldr	r2, [pc, #44]	; (800a9a4 <triggerSoundEffect+0x48>)
 800a978:	6013      	str	r3, [r2, #0]
	snd_data_offset = 0;
 800a97a:	4b09      	ldr	r3, [pc, #36]	; (800a9a0 <triggerSoundEffect+0x44>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
	snd_data_size = effect_size;
 800a980:	4a09      	ldr	r2, [pc, #36]	; (800a9a8 <triggerSoundEffect+0x4c>)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	6013      	str	r3, [r2, #0]
	playing_snd = 1;
 800a986:	4b04      	ldr	r3, [pc, #16]	; (800a998 <triggerSoundEffect+0x3c>)
 800a988:	2201      	movs	r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	20002010 	.word	0x20002010
 800a99c:	2000217c 	.word	0x2000217c
 800a9a0:	20002118 	.word	0x20002118
 800a9a4:	20002180 	.word	0x20002180
 800a9a8:	20002068 	.word	0x20002068

0800a9ac <game_playing>:
 * @brief Use when the tetris game is playing. (state machine -> game)
 *
 * @param window window that is being used
 * @param event user input
 */
void game_playing(Window* window, game_input_t event) {
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af04      	add	r7, sp, #16
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a9b8:	78fb      	ldrb	r3, [r7, #3]
 800a9ba:	2b05      	cmp	r3, #5
 800a9bc:	d10b      	bne.n	800a9d6 <game_playing+0x2a>
    	window->game.state = Paused;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800a9c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	701a      	strb	r2, [r3, #0]
    	game_paused(window, INPUT_ERROR);
 800a9cc:	2106      	movs	r1, #6
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f8ae 	bl	800ab30 <game_paused>
            fall_rate = (int) FALL_INIT - sqrt(1000 * window->game.rows_cleared);
            fall_rate = (fall_rate < 1) ? 1 : fall_rate;
        }
    }

}
 800a9d4:	e09e      	b.n	800ab14 <game_playing+0x168>
        switch (event) {
 800a9d6:	78fb      	ldrb	r3, [r7, #3]
 800a9d8:	2b06      	cmp	r3, #6
 800a9da:	d83d      	bhi.n	800aa58 <game_playing+0xac>
 800a9dc:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <game_playing+0x38>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800aa51 	.word	0x0800aa51
 800a9e8:	0800aa29 	.word	0x0800aa29
 800a9ec:	0800aa3d 	.word	0x0800aa3d
 800a9f0:	0800aa01 	.word	0x0800aa01
 800a9f4:	0800aa15 	.word	0x0800aa15
 800a9f8:	0800aa59 	.word	0x0800aa59
 800a9fc:	0800aa59 	.word	0x0800aa59
            	triggerSoundEffect(shift_sound, SHIFT_SOUND_SIZE);
 800aa00:	4b46      	ldr	r3, [pc, #280]	; (800ab1c <game_playing+0x170>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2100      	movs	r1, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7ff ffa8 	bl	800a95c <triggerSoundEffect>
                tetris_move_left(window);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff fcc5 	bl	800a39c <tetris_move_left>
            break;
 800aa12:	e022      	b.n	800aa5a <game_playing+0xae>
            	triggerSoundEffect(shift_sound, SHIFT_SOUND_SIZE);
 800aa14:	4b41      	ldr	r3, [pc, #260]	; (800ab1c <game_playing+0x170>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff ff9e 	bl	800a95c <triggerSoundEffect>
                tetris_move_right(window);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7ff fcda 	bl	800a3da <tetris_move_right>
            break;
 800aa26:	e018      	b.n	800aa5a <game_playing+0xae>
            	triggerSoundEffect(rotate_sound, ROT_SOUND_SIZE);
 800aa28:	4b3d      	ldr	r3, [pc, #244]	; (800ab20 <game_playing+0x174>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff ff94 	bl	800a95c <triggerSoundEffect>
                tetris_rotate_C_tetromino(window);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fc35 	bl	800a2a4 <tetris_rotate_C_tetromino>
            break;
 800aa3a:	e00e      	b.n	800aa5a <game_playing+0xae>
            	triggerSoundEffect(rotate_sound, ROT_SOUND_SIZE);
 800aa3c:	4b38      	ldr	r3, [pc, #224]	; (800ab20 <game_playing+0x174>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2100      	movs	r1, #0
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff ff8a 	bl	800a95c <triggerSoundEffect>
                tetris_rotate_CC_tetromino(window);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff fc69 	bl	800a320 <tetris_rotate_CC_tetromino>
            break;
 800aa4e:	e004      	b.n	800aa5a <game_playing+0xae>
                tetris_move_down(window);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7ff fce0 	bl	800a416 <tetris_move_down>
            break;
 800aa56:	e000      	b.n	800aa5a <game_playing+0xae>
            break;
 800aa58:	bf00      	nop
        if (window->game.state == Playing ) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800aa60:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d154      	bne.n	800ab14 <game_playing+0x168>
            drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800aa70:	33f8      	adds	r3, #248	; 0xf8
 800aa72:	9303      	str	r3, [sp, #12]
 800aa74:	230d      	movs	r3, #13
 800aa76:	9302      	str	r3, [sp, #8]
 800aa78:	2302      	movs	r3, #2
 800aa7a:	9301      	str	r3, [sp, #4]
 800aa7c:	2314      	movs	r3, #20
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	230a      	movs	r3, #10
 800aa82:	2202      	movs	r2, #2
 800aa84:	2102      	movs	r1, #2
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 f994 	bl	800bdb4 <drawRect>
            drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800aa92:	33f0      	adds	r3, #240	; 0xf0
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	1c99      	adds	r1, r3, #2
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800aa9e:	33f4      	adds	r3, #244	; 0xf4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	1c9a      	adds	r2, r3, #2
 800aaa4:	4b1f      	ldr	r3, [pc, #124]	; (800ab24 <game_playing+0x178>)
 800aaa6:	9303      	str	r3, [sp, #12]
 800aaa8:	230d      	movs	r3, #13
 800aaaa:	9302      	str	r3, [sp, #8]
 800aaac:	2302      	movs	r3, #2
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	2304      	movs	r3, #4
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	2304      	movs	r3, #4
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f001 f97c 	bl	800bdb4 <drawRect>
            tetris_draw_scoreboard(window);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 fbc5 	bl	800c24c <tetris_draw_scoreboard>
            fall_rate = (int) FALL_INIT - sqrt(1000 * window->game.rows_cleared);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800aac8:	33e8      	adds	r3, #232	; 0xe8
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aad0:	fb02 f303 	mul.w	r3, r2, r3
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7f5 fd25 	bl	8000524 <__aeabi_ui2d>
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	ec43 2b10 	vmov	d0, r2, r3
 800aae2:	f002 fac5 	bl	800d070 <sqrt>
 800aae6:	ec53 2b10 	vmov	r2, r3, d0
 800aaea:	f04f 0000 	mov.w	r0, #0
 800aaee:	490e      	ldr	r1, [pc, #56]	; (800ab28 <game_playing+0x17c>)
 800aaf0:	f7f5 fbda 	bl	80002a8 <__aeabi_dsub>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4619      	mov	r1, r3
 800aafc:	f7f6 f83c 	bl	8000b78 <__aeabi_d2iz>
 800ab00:	4603      	mov	r3, r0
 800ab02:	4a0a      	ldr	r2, [pc, #40]	; (800ab2c <game_playing+0x180>)
 800ab04:	6013      	str	r3, [r2, #0]
            fall_rate = (fall_rate < 1) ? 1 : fall_rate;
 800ab06:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <game_playing+0x180>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	bfb8      	it	lt
 800ab0e:	2301      	movlt	r3, #1
 800ab10:	4a06      	ldr	r2, [pc, #24]	; (800ab2c <game_playing+0x180>)
 800ab12:	6013      	str	r3, [r2, #0]
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	2000002c 	.word	0x2000002c
 800ab20:	20000028 	.word	0x20000028
 800ab24:	2000000c 	.word	0x2000000c
 800ab28:	40890000 	.word	0x40890000
 800ab2c:	2000001c 	.word	0x2000001c

0800ab30 <game_paused>:
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 * @param event user input
 */
void game_paused(Window* window, game_input_t event) {
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af04      	add	r7, sp, #16
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800ab3c:	78fb      	ldrb	r3, [r7, #3]
 800ab3e:	2b05      	cmp	r3, #5
 800ab40:	d114      	bne.n	800ab6c <game_paused+0x3c>
    	window->game.state = Playing;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800ab48:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	701a      	strb	r2, [r3, #0]
    	// Draw background before anything (in both frames)
    	tetris_drawBackground(window);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f001 fab1 	bl	800c0b8 <tetris_drawBackground>
    	swap_buffer(window);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f8a8 	bl	800acac <swap_buffer>
    	tetris_drawBackground(window);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 faab 	bl	800c0b8 <tetris_drawBackground>
    	game_playing(window, INPUT_ERROR);
 800ab62:	2106      	movs	r1, #6
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ff21 	bl	800a9ac <game_playing>
        // draw game board
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
        draw_str(window, "Press Space", 2, 10);
        draw_str(window, "To Continue", 2, 70);
    }
}
 800ab6a:	e01c      	b.n	800aba6 <game_paused+0x76>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	2164      	movs	r1, #100	; 0x64
 800ab76:	9103      	str	r1, [sp, #12]
 800ab78:	210a      	movs	r1, #10
 800ab7a:	9102      	str	r1, [sp, #8]
 800ab7c:	2104      	movs	r1, #4
 800ab7e:	9101      	str	r1, [sp, #4]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	4613      	mov	r3, r2
 800ab84:	2200      	movs	r2, #0
 800ab86:	2100      	movs	r1, #0
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f001 f9a3 	bl	800bed4 <drawRect_color>
        draw_str(window, "Press Space", 2, 10);
 800ab8e:	230a      	movs	r3, #10
 800ab90:	2202      	movs	r2, #2
 800ab92:	4907      	ldr	r1, [pc, #28]	; (800abb0 <game_paused+0x80>)
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 f9ed 	bl	800bf74 <draw_str>
        draw_str(window, "To Continue", 2, 70);
 800ab9a:	2346      	movs	r3, #70	; 0x46
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	4905      	ldr	r1, [pc, #20]	; (800abb4 <game_paused+0x84>)
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 f9e7 	bl	800bf74 <draw_str>
}
 800aba6:	bf00      	nop
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	0800d4b0 	.word	0x0800d4b0
 800abb4:	0800d4bc 	.word	0x0800d4bc

0800abb8 <game_start>:
 * @brief Moves from the starting screen to the playing state
 *
 * @param window window that is being used
 * @param event user input
 */
void game_start(Window* window, game_input_t event) {
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af04      	add	r7, sp, #16
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	d117      	bne.n	800abfa <game_start+0x42>
    	window->game.state = Playing;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800abd0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800abd4:	2201      	movs	r2, #1
 800abd6:	701a      	strb	r2, [r3, #0]
    	// Draw background before anything (in both frames)
    	tetris_drawBackground(window);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f001 fa6d 	bl	800c0b8 <tetris_drawBackground>
    	swap_buffer(window);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f864 	bl	800acac <swap_buffer>
    	tetris_drawBackground(window);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f001 fa67 	bl	800c0b8 <tetris_drawBackground>
    	swap_buffer(window);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f85e 	bl	800acac <swap_buffer>
    	game_playing(window, INPUT_ERROR);
 800abf0:	2106      	movs	r1, #6
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff feda 	bl	800a9ac <game_playing>
        draw_str(window, "Welcome To", 2, 10);
        draw_str(window, "Tetris!", 20, 110);
        draw_str(window, "Press Space", 2, 210);
        draw_str(window, "To Continue", 2, 270);
    }
}
 800abf8:	e029      	b.n	800ac4e <game_start+0x96>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	2164      	movs	r1, #100	; 0x64
 800ac04:	9103      	str	r1, [sp, #12]
 800ac06:	210a      	movs	r1, #10
 800ac08:	9102      	str	r1, [sp, #8]
 800ac0a:	2104      	movs	r1, #4
 800ac0c:	9101      	str	r1, [sp, #4]
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4613      	mov	r3, r2
 800ac12:	2200      	movs	r2, #0
 800ac14:	2100      	movs	r1, #0
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f001 f95c 	bl	800bed4 <drawRect_color>
        draw_str(window, "Welcome To", 2, 10);
 800ac1c:	230a      	movs	r3, #10
 800ac1e:	2202      	movs	r2, #2
 800ac20:	490d      	ldr	r1, [pc, #52]	; (800ac58 <game_start+0xa0>)
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f001 f9a6 	bl	800bf74 <draw_str>
        draw_str(window, "Tetris!", 20, 110);
 800ac28:	236e      	movs	r3, #110	; 0x6e
 800ac2a:	2214      	movs	r2, #20
 800ac2c:	490b      	ldr	r1, [pc, #44]	; (800ac5c <game_start+0xa4>)
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f001 f9a0 	bl	800bf74 <draw_str>
        draw_str(window, "Press Space", 2, 210);
 800ac34:	23d2      	movs	r3, #210	; 0xd2
 800ac36:	2202      	movs	r2, #2
 800ac38:	4909      	ldr	r1, [pc, #36]	; (800ac60 <game_start+0xa8>)
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f001 f99a 	bl	800bf74 <draw_str>
        draw_str(window, "To Continue", 2, 270);
 800ac40:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ac44:	2202      	movs	r2, #2
 800ac46:	4907      	ldr	r1, [pc, #28]	; (800ac64 <game_start+0xac>)
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f001 f993 	bl	800bf74 <draw_str>
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	0800d4c8 	.word	0x0800d4c8
 800ac5c:	0800d4d4 	.word	0x0800d4d4
 800ac60:	0800d4b0 	.word	0x0800d4b0
 800ac64:	0800d4bc 	.word	0x0800d4bc

0800ac68 <game_ended>:
 * @brief Use when the tetris game is lost.
 *
 * @param window window that is being used
 * @param event user input
 */
void game_ended(Window* window, game_input_t event) {
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
	if (event == TOGGLEPAUSE) {
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	2b05      	cmp	r3, #5
 800ac78:	d10f      	bne.n	800ac9a <game_ended+0x32>
		fall_rate = FALL_INIT;
 800ac7a:	4b0b      	ldr	r3, [pc, #44]	; (800aca8 <game_ended+0x40>)
 800ac7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ac80:	601a      	str	r2, [r3, #0]
		window->game.state = Start;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800ac88:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	701a      	strb	r2, [r3, #0]
		game_start(window, INPUT_ERROR);
 800ac90:	2106      	movs	r1, #6
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff ff90 	bl	800abb8 <game_start>
	} else {
		tetris_drawEndScreen(window);
	}
}
 800ac98:	e002      	b.n	800aca0 <game_ended+0x38>
		tetris_drawEndScreen(window);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f001 fb14 	bl	800c2c8 <tetris_drawEndScreen>
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	2000001c 	.word	0x2000001c

0800acac <swap_buffer>:
/**
 * @brief Swap the image buffers.
 *
 * @param window window with the image buffers.
 */
void swap_buffer(Window * window) {
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
	// Swap pointers
	uint8_t** tmp = window->true;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	60fb      	str	r3, [r7, #12]
	window->true = window->frame;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	60da      	str	r2, [r3, #12]
	window->frame = tmp;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	609a      	str	r2, [r3, #8]

	// Change DMA memory address
	hdac1.DMA_Handle1->Instance->CMAR = (uint32_t) window->true[0];
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <swap_buffer+0x38>)
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	60da      	str	r2, [r3, #12]
}
 800acd6:	bf00      	nop
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	200020b8 	.word	0x200020b8

0800ace8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 800acee:	2300      	movs	r3, #0
 800acf0:	607b      	str	r3, [r7, #4]
 800acf2:	e007      	b.n	800ad04 <main+0x1c>
	    input_buffer[i] = INPUT_ERROR;
 800acf4:	4a35      	ldr	r2, [pc, #212]	; (800adcc <main+0xe4>)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4413      	add	r3, r2
 800acfa:	2206      	movs	r2, #6
 800acfc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3301      	adds	r3, #1
 800ad02:	607b      	str	r3, [r7, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	ddf4      	ble.n	800acf4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ad0a:	f7f6 f929 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ad0e:	f000 f87b 	bl	800ae08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ad12:	f000 fb0b 	bl	800b32c <MX_GPIO_Init>
  MX_DMA_Init();
 800ad16:	f000 fadf 	bl	800b2d8 <MX_DMA_Init>
  MX_DAC1_Init();
 800ad1a:	f000 f8c7 	bl	800aeac <MX_DAC1_Init>

  MX_TIM4_Init();
 800ad1e:	f000 f9ef 	bl	800b100 <MX_TIM4_Init>
  MX_TIM2_Init();
 800ad22:	f000 f971 	bl	800b008 <MX_TIM2_Init>
  MX_TIM1_Init();
 800ad26:	f000 f917 	bl	800af58 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800ad2a:	f000 fa89 	bl	800b240 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 800ad2e:	f000 fa35 	bl	800b19c <MX_TIM15_Init>
  MX_RNG_Init();
 800ad32:	f000 f8fb 	bl	800af2c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  create_window(&window);
 800ad36:	4826      	ldr	r0, [pc, #152]	; (800add0 <main+0xe8>)
 800ad38:	f7ff fda8 	bl	800a88c <create_window>

  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 800ad3c:	4825      	ldr	r0, [pc, #148]	; (800add4 <main+0xec>)
 800ad3e:	f7f9 f937 	bl	8003fb0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800ad42:	2064      	movs	r0, #100	; 0x64
 800ad44:	f7f6 f944 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 800ad48:	210c      	movs	r1, #12
 800ad4a:	4823      	ldr	r0, [pc, #140]	; (800add8 <main+0xf0>)
 800ad4c:	f7f9 fa02 	bl	8004154 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 800ad50:	2064      	movs	r0, #100	; 0x64
 800ad52:	f7f6 f93d 	bl	8000fd0 <HAL_Delay>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) window.true[0], FRAME_WIDTH*FRAME_HEIGHT, DAC_ALIGN_8B_R);
 800ad56:	4b1e      	ldr	r3, [pc, #120]	; (800add0 <main+0xe8>)
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	2308      	movs	r3, #8
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	f64a 7364 	movw	r3, #44900	; 0xaf64
 800ad64:	2100      	movs	r1, #0
 800ad66:	481d      	ldr	r0, [pc, #116]	; (800addc <main+0xf4>)
 800ad68:	f7f6 faac 	bl	80012c4 <HAL_DAC_Start_DMA>
  HAL_Delay(100);
 800ad6c:	2064      	movs	r0, #100	; 0x64
 800ad6e:	f7f6 f92f 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 800ad72:	481b      	ldr	r0, [pc, #108]	; (800ade0 <main+0xf8>)
 800ad74:	f7f9 f8b4 	bl	8003ee0 <HAL_TIM_Base_Start>
  HAL_Delay(100);
 800ad78:	2064      	movs	r0, #100	; 0x64
 800ad7a:	f7f6 f929 	bl	8000fd0 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800ad7e:	2201      	movs	r2, #1
 800ad80:	4918      	ldr	r1, [pc, #96]	; (800ade4 <main+0xfc>)
 800ad82:	4819      	ldr	r0, [pc, #100]	; (800ade8 <main+0x100>)
 800ad84:	f7fa fc0c 	bl	80055a0 <HAL_UART_Receive_IT>
  HAL_Delay(100);
 800ad88:	2064      	movs	r0, #100	; 0x64
 800ad8a:	f7f6 f921 	bl	8000fd0 <HAL_Delay>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800ad8e:	2110      	movs	r1, #16
 800ad90:	4812      	ldr	r0, [pc, #72]	; (800addc <main+0xf4>)
 800ad92:	f7f6 fa45 	bl	8001220 <HAL_DAC_Start>
  HAL_Delay(100);
 800ad96:	2064      	movs	r0, #100	; 0x64
 800ad98:	f7f6 f91a 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim15);	// start slave first.
 800ad9c:	4813      	ldr	r0, [pc, #76]	; (800adec <main+0x104>)
 800ad9e:	f7f9 f907 	bl	8003fb0 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800ada2:	f7fc fba5 	bl	80074f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of frameTask */
  frameTaskHandle = osThreadNew(updateGameLogic, NULL, &frameTask_attributes);
 800ada6:	4a12      	ldr	r2, [pc, #72]	; (800adf0 <main+0x108>)
 800ada8:	2100      	movs	r1, #0
 800adaa:	4812      	ldr	r0, [pc, #72]	; (800adf4 <main+0x10c>)
 800adac:	f7fc fbea 	bl	8007584 <osThreadNew>
 800adb0:	4603      	mov	r3, r0
 800adb2:	4a11      	ldr	r2, [pc, #68]	; (800adf8 <main+0x110>)
 800adb4:	6013      	str	r3, [r2, #0]

  /* creation of soundTask */
  soundTaskHandle = osThreadNew(soundController, NULL, &soundTask_attributes);
 800adb6:	4a11      	ldr	r2, [pc, #68]	; (800adfc <main+0x114>)
 800adb8:	2100      	movs	r1, #0
 800adba:	4811      	ldr	r0, [pc, #68]	; (800ae00 <main+0x118>)
 800adbc:	f7fc fbe2 	bl	8007584 <osThreadNew>
 800adc0:	4603      	mov	r3, r0
 800adc2:	4a10      	ldr	r2, [pc, #64]	; (800ae04 <main+0x11c>)
 800adc4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800adc6:	f7fc fbb7 	bl	8007538 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800adca:	e7fe      	b.n	800adca <main+0xe2>
 800adcc:	2000218c 	.word	0x2000218c
 800add0:	200022d4 	.word	0x200022d4
 800add4:	20002228 	.word	0x20002228
 800add8:	20002288 	.word	0x20002288
 800addc:	200020b8 	.word	0x200020b8
 800ade0:	2000206c 	.word	0x2000206c
 800ade4:	20000020 	.word	0x20000020
 800ade8:	20002194 	.word	0x20002194
 800adec:	200020cc 	.word	0x200020cc
 800adf0:	0803ef4c 	.word	0x0803ef4c
 800adf4:	0800b57d 	.word	0x0800b57d
 800adf8:	20018298 	.word	0x20018298
 800adfc:	0803ef70 	.word	0x0803ef70
 800ae00:	0800b601 	.word	0x0800b601
 800ae04:	20002224 	.word	0x20002224

0800ae08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b096      	sub	sp, #88	; 0x58
 800ae0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ae0e:	f107 0314 	add.w	r3, r7, #20
 800ae12:	2244      	movs	r2, #68	; 0x44
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f001 fc5e 	bl	800c6d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	605a      	str	r2, [r3, #4]
 800ae24:	609a      	str	r2, [r3, #8]
 800ae26:	60da      	str	r2, [r3, #12]
 800ae28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	f7f7 fa8a 	bl	8002344 <HAL_PWREx_ControlVoltageScaling>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <SystemClock_Config+0x32>
  {
    Error_Handler();
 800ae36:	f000 fcdd 	bl	800b7f4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800ae3a:	2310      	movs	r3, #16
 800ae3c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800ae46:	2360      	movs	r3, #96	; 0x60
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800ae52:	2301      	movs	r3, #1
 800ae54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800ae56:	233c      	movs	r3, #60	; 0x3c
 800ae58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800ae5e:	2302      	movs	r3, #2
 800ae60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800ae62:	2302      	movs	r3, #2
 800ae64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ae66:	f107 0314 	add.w	r3, r7, #20
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7f7 fb0e 	bl	800248c <HAL_RCC_OscConfig>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <SystemClock_Config+0x72>
  {
    Error_Handler();
 800ae76:	f000 fcbd 	bl	800b7f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ae7a:	230f      	movs	r3, #15
 800ae7c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ae86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ae90:	463b      	mov	r3, r7
 800ae92:	2105      	movs	r1, #5
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7f7 ff1f 	bl	8002cd8 <HAL_RCC_ClockConfig>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800aea0:	f000 fca8 	bl	800b7f4 <Error_Handler>
  }
}
 800aea4:	bf00      	nop
 800aea6:	3758      	adds	r7, #88	; 0x58
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08a      	sub	sp, #40	; 0x28
 800aeb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	2228      	movs	r2, #40	; 0x28
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f001 fc0d 	bl	800c6d8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800aebe:	4b19      	ldr	r3, [pc, #100]	; (800af24 <MX_DAC1_Init+0x78>)
 800aec0:	4a19      	ldr	r2, [pc, #100]	; (800af28 <MX_DAC1_Init+0x7c>)
 800aec2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800aec4:	4817      	ldr	r0, [pc, #92]	; (800af24 <MX_DAC1_Init+0x78>)
 800aec6:	f7f6 f989 	bl	80011dc <HAL_DAC_Init>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800aed0:	f000 fc90 	bl	800b7f4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800aed4:	2300      	movs	r3, #0
 800aed6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800aed8:	230e      	movs	r3, #14
 800aeda:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800aedc:	2300      	movs	r3, #0
 800aede:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800aee0:	2300      	movs	r3, #0
 800aee2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800aee8:	2300      	movs	r3, #0
 800aeea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800aeec:	463b      	mov	r3, r7
 800aeee:	2200      	movs	r2, #0
 800aef0:	4619      	mov	r1, r3
 800aef2:	480c      	ldr	r0, [pc, #48]	; (800af24 <MX_DAC1_Init+0x78>)
 800aef4:	f7f6 fb5a 	bl	80015ac <HAL_DAC_ConfigChannel>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800aefe:	f000 fc79 	bl	800b7f4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800af02:	2300      	movs	r3, #0
 800af04:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800af06:	463b      	mov	r3, r7
 800af08:	2210      	movs	r2, #16
 800af0a:	4619      	mov	r1, r3
 800af0c:	4805      	ldr	r0, [pc, #20]	; (800af24 <MX_DAC1_Init+0x78>)
 800af0e:	f7f6 fb4d 	bl	80015ac <HAL_DAC_ConfigChannel>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 800af18:	f000 fc6c 	bl	800b7f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 800af1c:	bf00      	nop
 800af1e:	3728      	adds	r7, #40	; 0x28
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	200020b8 	.word	0x200020b8
 800af28:	40007400 	.word	0x40007400

0800af2c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800af30:	4b07      	ldr	r3, [pc, #28]	; (800af50 <MX_RNG_Init+0x24>)
 800af32:	4a08      	ldr	r2, [pc, #32]	; (800af54 <MX_RNG_Init+0x28>)
 800af34:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800af36:	4b06      	ldr	r3, [pc, #24]	; (800af50 <MX_RNG_Init+0x24>)
 800af38:	2200      	movs	r2, #0
 800af3a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800af3c:	4804      	ldr	r0, [pc, #16]	; (800af50 <MX_RNG_Init+0x24>)
 800af3e:	f7f8 fec7 	bl	8003cd0 <HAL_RNG_Init>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800af48:	f000 fc54 	bl	800b7f4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  /* USER CODE END RNG_Init 2 */

}
 800af4c:	bf00      	nop
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	20002274 	.word	0x20002274
 800af54:	50060800 	.word	0x50060800

0800af58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800af5e:	f107 030c 	add.w	r3, r7, #12
 800af62:	2200      	movs	r2, #0
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	605a      	str	r2, [r3, #4]
 800af68:	609a      	str	r2, [r3, #8]
 800af6a:	60da      	str	r2, [r3, #12]
 800af6c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af6e:	463b      	mov	r3, r7
 800af70:	2200      	movs	r2, #0
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	605a      	str	r2, [r3, #4]
 800af76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800af78:	4b21      	ldr	r3, [pc, #132]	; (800b000 <MX_TIM1_Init+0xa8>)
 800af7a:	4a22      	ldr	r2, [pc, #136]	; (800b004 <MX_TIM1_Init+0xac>)
 800af7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800af7e:	4b20      	ldr	r3, [pc, #128]	; (800b000 <MX_TIM1_Init+0xa8>)
 800af80:	2200      	movs	r2, #0
 800af82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af84:	4b1e      	ldr	r3, [pc, #120]	; (800b000 <MX_TIM1_Init+0xa8>)
 800af86:	2200      	movs	r2, #0
 800af88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800af8a:	4b1d      	ldr	r3, [pc, #116]	; (800b000 <MX_TIM1_Init+0xa8>)
 800af8c:	2263      	movs	r2, #99	; 0x63
 800af8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af90:	4b1b      	ldr	r3, [pc, #108]	; (800b000 <MX_TIM1_Init+0xa8>)
 800af92:	2200      	movs	r2, #0
 800af94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800af96:	4b1a      	ldr	r3, [pc, #104]	; (800b000 <MX_TIM1_Init+0xa8>)
 800af98:	2200      	movs	r2, #0
 800af9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af9c:	4b18      	ldr	r3, [pc, #96]	; (800b000 <MX_TIM1_Init+0xa8>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800afa2:	4817      	ldr	r0, [pc, #92]	; (800b000 <MX_TIM1_Init+0xa8>)
 800afa4:	f7f8 ff45 	bl	8003e32 <HAL_TIM_Base_Init>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800afae:	f000 fc21 	bl	800b7f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800afb2:	2306      	movs	r3, #6
 800afb4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800afb6:	2330      	movs	r3, #48	; 0x30
 800afb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800afba:	f107 030c 	add.w	r3, r7, #12
 800afbe:	4619      	mov	r1, r3
 800afc0:	480f      	ldr	r0, [pc, #60]	; (800b000 <MX_TIM1_Init+0xa8>)
 800afc2:	f7f9 fcca 	bl	800495a <HAL_TIM_SlaveConfigSynchro>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800afcc:	f000 fc12 	bl	800b7f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800afd0:	2320      	movs	r3, #32
 800afd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800afd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800afd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afda:	2300      	movs	r3, #0
 800afdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800afde:	463b      	mov	r3, r7
 800afe0:	4619      	mov	r1, r3
 800afe2:	4807      	ldr	r0, [pc, #28]	; (800b000 <MX_TIM1_Init+0xa8>)
 800afe4:	f7fa f9e6 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800afee:	f000 fc01 	bl	800b7f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800aff2:	4b04      	ldr	r3, [pc, #16]	; (800b004 <MX_TIM1_Init+0xac>)
 800aff4:	2237      	movs	r2, #55	; 0x37
 800aff6:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM1_Init 2 */

}
 800aff8:	bf00      	nop
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20002228 	.word	0x20002228
 800b004:	40012c00 	.word	0x40012c00

0800b008 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b090      	sub	sp, #64	; 0x40
 800b00c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800b00e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	605a      	str	r2, [r3, #4]
 800b018:	609a      	str	r2, [r3, #8]
 800b01a:	60da      	str	r2, [r3, #12]
 800b01c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b01e:	f107 0320 	add.w	r3, r7, #32
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	605a      	str	r2, [r3, #4]
 800b028:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b02a:	1d3b      	adds	r3, r7, #4
 800b02c:	2200      	movs	r2, #0
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	605a      	str	r2, [r3, #4]
 800b032:	609a      	str	r2, [r3, #8]
 800b034:	60da      	str	r2, [r3, #12]
 800b036:	611a      	str	r2, [r3, #16]
 800b038:	615a      	str	r2, [r3, #20]
 800b03a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b03c:	4b2f      	ldr	r3, [pc, #188]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b03e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b044:	4b2d      	ldr	r3, [pc, #180]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b046:	2200      	movs	r2, #0
 800b048:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b04a:	4b2c      	ldr	r3, [pc, #176]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800b050:	4b2a      	ldr	r3, [pc, #168]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b052:	2263      	movs	r2, #99	; 0x63
 800b054:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b056:	4b29      	ldr	r3, [pc, #164]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b058:	2200      	movs	r2, #0
 800b05a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b05c:	4b27      	ldr	r3, [pc, #156]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b05e:	2200      	movs	r2, #0
 800b060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b062:	4826      	ldr	r0, [pc, #152]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b064:	f7f8 fee5 	bl	8003e32 <HAL_TIM_Base_Init>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800b06e:	f000 fbc1 	bl	800b7f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b072:	4822      	ldr	r0, [pc, #136]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b074:	f7f9 f80c 	bl	8004090 <HAL_TIM_PWM_Init>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800b07e:	f000 fbb9 	bl	800b7f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800b082:	2306      	movs	r3, #6
 800b084:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800b086:	2330      	movs	r3, #48	; 0x30
 800b088:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800b08a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b08e:	4619      	mov	r1, r3
 800b090:	481a      	ldr	r0, [pc, #104]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b092:	f7f9 fc62 	bl	800495a <HAL_TIM_SlaveConfigSynchro>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800b09c:	f000 fbaa 	bl	800b7f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b0a0:	2320      	movs	r3, #32
 800b0a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b0a8:	f107 0320 	add.w	r3, r7, #32
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4813      	ldr	r0, [pc, #76]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b0b0:	f7fa f980 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800b0ba:	f000 fb9b 	bl	800b7f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b0be:	2360      	movs	r3, #96	; 0x60
 800b0c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 800b0c2:	235a      	movs	r3, #90	; 0x5a
 800b0c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b0ce:	1d3b      	adds	r3, r7, #4
 800b0d0:	220c      	movs	r2, #12
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4809      	ldr	r0, [pc, #36]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b0d6:	f7f9 fa63 	bl	80045a0 <HAL_TIM_PWM_ConfigChannel>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800b0e0:	f000 fb88 	bl	800b7f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800b0e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0e8:	2237      	movs	r2, #55	; 0x37
 800b0ea:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b0ec:	4803      	ldr	r0, [pc, #12]	; (800b0fc <MX_TIM2_Init+0xf4>)
 800b0ee:	f000 fcd7 	bl	800baa0 <HAL_TIM_MspPostInit>

}
 800b0f2:	bf00      	nop
 800b0f4:	3740      	adds	r7, #64	; 0x40
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20002288 	.word	0x20002288

0800b100 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b106:	f107 0310 	add.w	r3, r7, #16
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	605a      	str	r2, [r3, #4]
 800b110:	609a      	str	r2, [r3, #8]
 800b112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b114:	1d3b      	adds	r3, r7, #4
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	605a      	str	r2, [r3, #4]
 800b11c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b11e:	4b1d      	ldr	r3, [pc, #116]	; (800b194 <MX_TIM4_Init+0x94>)
 800b120:	4a1d      	ldr	r2, [pc, #116]	; (800b198 <MX_TIM4_Init+0x98>)
 800b122:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 800b124:	4b1b      	ldr	r3, [pc, #108]	; (800b194 <MX_TIM4_Init+0x94>)
 800b126:	220c      	movs	r2, #12
 800b128:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b12a:	4b1a      	ldr	r3, [pc, #104]	; (800b194 <MX_TIM4_Init+0x94>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 800b130:	4b18      	ldr	r3, [pc, #96]	; (800b194 <MX_TIM4_Init+0x94>)
 800b132:	2202      	movs	r2, #2
 800b134:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b136:	4b17      	ldr	r3, [pc, #92]	; (800b194 <MX_TIM4_Init+0x94>)
 800b138:	2200      	movs	r2, #0
 800b13a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b13c:	4b15      	ldr	r3, [pc, #84]	; (800b194 <MX_TIM4_Init+0x94>)
 800b13e:	2200      	movs	r2, #0
 800b140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b142:	4814      	ldr	r0, [pc, #80]	; (800b194 <MX_TIM4_Init+0x94>)
 800b144:	f7f8 fe75 	bl	8003e32 <HAL_TIM_Base_Init>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800b14e:	f000 fb51 	bl	800b7f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b158:	f107 0310 	add.w	r3, r7, #16
 800b15c:	4619      	mov	r1, r3
 800b15e:	480d      	ldr	r0, [pc, #52]	; (800b194 <MX_TIM4_Init+0x94>)
 800b160:	f7f9 fb32 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d001      	beq.n	800b16e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800b16a:	f000 fb43 	bl	800b7f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b16e:	2320      	movs	r3, #32
 800b170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b176:	1d3b      	adds	r3, r7, #4
 800b178:	4619      	mov	r1, r3
 800b17a:	4806      	ldr	r0, [pc, #24]	; (800b194 <MX_TIM4_Init+0x94>)
 800b17c:	f7fa f91a 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800b186:	f000 fb35 	bl	800b7f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b18a:	bf00      	nop
 800b18c:	3720      	adds	r7, #32
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	2000206c 	.word	0x2000206c
 800b198:	40000800 	.word	0x40000800

0800b19c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b1a2:	f107 0310 	add.w	r3, r7, #16
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	609a      	str	r2, [r3, #8]
 800b1ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b1b0:	1d3b      	adds	r3, r7, #4
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	605a      	str	r2, [r3, #4]
 800b1b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800b1ba:	4b1f      	ldr	r3, [pc, #124]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b1bc:	4a1f      	ldr	r2, [pc, #124]	; (800b23c <MX_TIM15_Init+0xa0>)
 800b1be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800b1c0:	4b1d      	ldr	r3, [pc, #116]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1c6:	4b1c      	ldr	r3, [pc, #112]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 14999;
 800b1cc:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b1ce:	f643 2297 	movw	r2, #14999	; 0x3a97
 800b1d2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b1d4:	4b18      	ldr	r3, [pc, #96]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800b1da:	4b17      	ldr	r3, [pc, #92]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1e0:	4b15      	ldr	r3, [pc, #84]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800b1e6:	4814      	ldr	r0, [pc, #80]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b1e8:	f7f8 fe23 	bl	8003e32 <HAL_TIM_Base_Init>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800b1f2:	f000 faff 	bl	800b7f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b1f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800b1fc:	f107 0310 	add.w	r3, r7, #16
 800b200:	4619      	mov	r1, r3
 800b202:	480d      	ldr	r0, [pc, #52]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b204:	f7f9 fae0 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800b20e:	f000 faf1 	bl	800b7f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b212:	2300      	movs	r3, #0
 800b214:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800b21a:	1d3b      	adds	r3, r7, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	4806      	ldr	r0, [pc, #24]	; (800b238 <MX_TIM15_Init+0x9c>)
 800b220:	f7fa f8c8 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800b22a:	f000 fae3 	bl	800b7f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800b22e:	bf00      	nop
 800b230:	3720      	adds	r7, #32
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200020cc 	.word	0x200020cc
 800b23c:	40014000 	.word	0x40014000

0800b240 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b244:	4b22      	ldr	r3, [pc, #136]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b246:	4a23      	ldr	r2, [pc, #140]	; (800b2d4 <MX_USART1_UART_Init+0x94>)
 800b248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b24a:	4b21      	ldr	r3, [pc, #132]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b24c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b252:	4b1f      	ldr	r3, [pc, #124]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b254:	2200      	movs	r2, #0
 800b256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b258:	4b1d      	ldr	r3, [pc, #116]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b25e:	4b1c      	ldr	r3, [pc, #112]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b260:	2200      	movs	r2, #0
 800b262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b264:	4b1a      	ldr	r3, [pc, #104]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b266:	220c      	movs	r2, #12
 800b268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b26a:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b270:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b272:	2200      	movs	r2, #0
 800b274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b276:	4b16      	ldr	r3, [pc, #88]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b278:	2200      	movs	r2, #0
 800b27a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800b27c:	4b14      	ldr	r3, [pc, #80]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b27e:	2200      	movs	r2, #0
 800b280:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b282:	4b13      	ldr	r3, [pc, #76]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b284:	2200      	movs	r2, #0
 800b286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b288:	4811      	ldr	r0, [pc, #68]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b28a:	f7fa f939 	bl	8005500 <HAL_UART_Init>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800b294:	f000 faae 	bl	800b7f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b298:	2100      	movs	r1, #0
 800b29a:	480d      	ldr	r0, [pc, #52]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b29c:	f7fc f819 	bl	80072d2 <HAL_UARTEx_SetTxFifoThreshold>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800b2a6:	f000 faa5 	bl	800b7f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	4808      	ldr	r0, [pc, #32]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b2ae:	f7fc f84e 	bl	800734e <HAL_UARTEx_SetRxFifoThreshold>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800b2b8:	f000 fa9c 	bl	800b7f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800b2bc:	4804      	ldr	r0, [pc, #16]	; (800b2d0 <MX_USART1_UART_Init+0x90>)
 800b2be:	f7fb ffcf 	bl	8007260 <HAL_UARTEx_DisableFifoMode>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800b2c8:	f000 fa94 	bl	800b7f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b2cc:	bf00      	nop
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20002194 	.word	0x20002194
 800b2d4:	40013800 	.word	0x40013800

0800b2d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800b2de:	4b12      	ldr	r3, [pc, #72]	; (800b328 <MX_DMA_Init+0x50>)
 800b2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2e2:	4a11      	ldr	r2, [pc, #68]	; (800b328 <MX_DMA_Init+0x50>)
 800b2e4:	f043 0304 	orr.w	r3, r3, #4
 800b2e8:	6493      	str	r3, [r2, #72]	; 0x48
 800b2ea:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <MX_DMA_Init+0x50>)
 800b2ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ee:	f003 0304 	and.w	r3, r3, #4
 800b2f2:	607b      	str	r3, [r7, #4]
 800b2f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b2f6:	4b0c      	ldr	r3, [pc, #48]	; (800b328 <MX_DMA_Init+0x50>)
 800b2f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2fa:	4a0b      	ldr	r2, [pc, #44]	; (800b328 <MX_DMA_Init+0x50>)
 800b2fc:	f043 0301 	orr.w	r3, r3, #1
 800b300:	6493      	str	r3, [r2, #72]	; 0x48
 800b302:	4b09      	ldr	r3, [pc, #36]	; (800b328 <MX_DMA_Init+0x50>)
 800b304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	603b      	str	r3, [r7, #0]
 800b30c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800b30e:	2200      	movs	r2, #0
 800b310:	2105      	movs	r1, #5
 800b312:	200b      	movs	r0, #11
 800b314:	f7f5 ff38 	bl	8001188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800b318:	200b      	movs	r0, #11
 800b31a:	f7f5 ff51 	bl	80011c0 <HAL_NVIC_EnableIRQ>

}
 800b31e:	bf00      	nop
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	40021000 	.word	0x40021000

0800b32c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b332:	f107 030c 	add.w	r3, r7, #12
 800b336:	2200      	movs	r2, #0
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	605a      	str	r2, [r3, #4]
 800b33c:	609a      	str	r2, [r3, #8]
 800b33e:	60da      	str	r2, [r3, #12]
 800b340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b342:	4b24      	ldr	r3, [pc, #144]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b346:	4a23      	ldr	r2, [pc, #140]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b348:	f043 0304 	orr.w	r3, r3, #4
 800b34c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b34e:	4b21      	ldr	r3, [pc, #132]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b352:	f003 0304 	and.w	r3, r3, #4
 800b356:	60bb      	str	r3, [r7, #8]
 800b358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b35a:	4b1e      	ldr	r3, [pc, #120]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35e:	4a1d      	ldr	r2, [pc, #116]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b360:	f043 0301 	orr.w	r3, r3, #1
 800b364:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b366:	4b1b      	ldr	r3, [pc, #108]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	607b      	str	r3, [r7, #4]
 800b370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b372:	4b18      	ldr	r3, [pc, #96]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b376:	4a17      	ldr	r2, [pc, #92]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b378:	f043 0302 	orr.w	r3, r3, #2
 800b37c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b37e:	4b15      	ldr	r3, [pc, #84]	; (800b3d4 <MX_GPIO_Init+0xa8>)
 800b380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b382:	f003 0302 	and.w	r3, r3, #2
 800b386:	603b      	str	r3, [r7, #0]
 800b388:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800b38a:	2200      	movs	r2, #0
 800b38c:	2104      	movs	r1, #4
 800b38e:	4812      	ldr	r0, [pc, #72]	; (800b3d8 <MX_GPIO_Init+0xac>)
 800b390:	f7f6 ffa0 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800b394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b39a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800b39e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800b3a4:	f107 030c 	add.w	r3, r7, #12
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	480c      	ldr	r0, [pc, #48]	; (800b3dc <MX_GPIO_Init+0xb0>)
 800b3ac:	f7f6 fe00 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 800b3b0:	2304      	movs	r3, #4
 800b3b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 800b3c0:	f107 030c 	add.w	r3, r7, #12
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4804      	ldr	r0, [pc, #16]	; (800b3d8 <MX_GPIO_Init+0xac>)
 800b3c8:	f7f6 fdf2 	bl	8001fb0 <HAL_GPIO_Init>

}
 800b3cc:	bf00      	nop
 800b3ce:	3720      	adds	r7, #32
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	40021000 	.word	0x40021000
 800b3d8:	48000400 	.word	0x48000400
 800b3dc:	48000800 	.word	0x48000800

0800b3e0 <push_input_buffer>:

/* USER CODE BEGIN 4 */
/**
 * Push user input into the input queue
 */
void push_input_buffer(game_input_t input) {
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	71fb      	strb	r3, [r7, #7]
	// Can't lock the queue, don't need one since this is called by an interrupt
	input_buffer[buffer_push] = input;
 800b3ea:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <push_input_buffer+0x40>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	490d      	ldr	r1, [pc, #52]	; (800b424 <push_input_buffer+0x44>)
 800b3f0:	79fa      	ldrb	r2, [r7, #7]
 800b3f2:	54ca      	strb	r2, [r1, r3]
	buffer_push = (buffer_push + 1) % INPUT_BUFFER_SIZE;
 800b3f4:	4b0a      	ldr	r3, [pc, #40]	; (800b420 <push_input_buffer+0x40>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	1c59      	adds	r1, r3, #1
 800b3fa:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <push_input_buffer+0x48>)
 800b3fc:	fb83 2301 	smull	r2, r3, r3, r1
 800b400:	105a      	asrs	r2, r3, #1
 800b402:	17cb      	asrs	r3, r1, #31
 800b404:	1ad2      	subs	r2, r2, r3
 800b406:	4613      	mov	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	1aca      	subs	r2, r1, r3
 800b40e:	4b04      	ldr	r3, [pc, #16]	; (800b420 <push_input_buffer+0x40>)
 800b410:	601a      	str	r2, [r3, #0]
}
 800b412:	bf00      	nop
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	20002008 	.word	0x20002008
 800b424:	2000218c 	.word	0x2000218c
 800b428:	66666667 	.word	0x66666667

0800b42c <pop_input_buffer>:

/**
 * Read from the input queue (private function)
 */
game_input_t pop_input_buffer() {
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
	if(buffer_pop == buffer_push) {
 800b432:	4b11      	ldr	r3, [pc, #68]	; (800b478 <pop_input_buffer+0x4c>)
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	4b11      	ldr	r3, [pc, #68]	; (800b47c <pop_input_buffer+0x50>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d101      	bne.n	800b442 <pop_input_buffer+0x16>
		return INPUT_ERROR;
 800b43e:	2306      	movs	r3, #6
 800b440:	e014      	b.n	800b46c <pop_input_buffer+0x40>
	}
	game_input_t ret = input_buffer[buffer_pop];
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <pop_input_buffer+0x4c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a0e      	ldr	r2, [pc, #56]	; (800b480 <pop_input_buffer+0x54>)
 800b448:	5cd3      	ldrb	r3, [r2, r3]
 800b44a:	71fb      	strb	r3, [r7, #7]
	buffer_pop = (buffer_pop + 1) % INPUT_BUFFER_SIZE;
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <pop_input_buffer+0x4c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	1c59      	adds	r1, r3, #1
 800b452:	4b0c      	ldr	r3, [pc, #48]	; (800b484 <pop_input_buffer+0x58>)
 800b454:	fb83 2301 	smull	r2, r3, r3, r1
 800b458:	105a      	asrs	r2, r3, #1
 800b45a:	17cb      	asrs	r3, r1, #31
 800b45c:	1ad2      	subs	r2, r2, r3
 800b45e:	4613      	mov	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	1aca      	subs	r2, r1, r3
 800b466:	4b04      	ldr	r3, [pc, #16]	; (800b478 <pop_input_buffer+0x4c>)
 800b468:	601a      	str	r2, [r3, #0]
	return ret;
 800b46a:	79fb      	ldrb	r3, [r7, #7]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	20002004 	.word	0x20002004
 800b47c:	20002008 	.word	0x20002008
 800b480:	2000218c 	.word	0x2000218c
 800b484:	66666667 	.word	0x66666667

0800b488 <process_user_input>:


/**
 * Fetch an instruction from input queue (used for game logic)
 */
game_input_t process_user_input(Window * window) {
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
    game_input_t c = pop_input_buffer();
 800b490:	f7ff ffcc 	bl	800b42c <pop_input_buffer>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]
    while(c == INPUT_ERROR) c = pop_input_buffer();
 800b498:	e003      	b.n	800b4a2 <process_user_input+0x1a>
 800b49a:	f7ff ffc7 	bl	800b42c <pop_input_buffer>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b06      	cmp	r3, #6
 800b4a6:	d0f8      	beq.n	800b49a <process_user_input+0x12>
    return c;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
	switch (((huart)->Instance)->RDR) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	2b73      	cmp	r3, #115	; 0x73
 800b4c6:	dc4a      	bgt.n	800b55e <HAL_UART_RxCpltCallback+0xaa>
 800b4c8:	2b61      	cmp	r3, #97	; 0x61
 800b4ca:	da04      	bge.n	800b4d6 <HAL_UART_RxCpltCallback+0x22>
 800b4cc:	2b20      	cmp	r3, #32
 800b4ce:	d043      	beq.n	800b558 <HAL_UART_RxCpltCallback+0xa4>
 800b4d0:	2b3b      	cmp	r3, #59	; 0x3b
 800b4d2:	d039      	beq.n	800b548 <HAL_UART_RxCpltCallback+0x94>
		push_input_buffer(DOWN);
		break;
	case 32: // space
		push_input_buffer(TOGGLEPAUSE);
	default:
		break;
 800b4d4:	e043      	b.n	800b55e <HAL_UART_RxCpltCallback+0xaa>
 800b4d6:	3b61      	subs	r3, #97	; 0x61
 800b4d8:	2b12      	cmp	r3, #18
 800b4da:	d840      	bhi.n	800b55e <HAL_UART_RxCpltCallback+0xaa>
 800b4dc:	a201      	add	r2, pc, #4	; (adr r2, 800b4e4 <HAL_UART_RxCpltCallback+0x30>)
 800b4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e2:	bf00      	nop
 800b4e4:	0800b531 	.word	0x0800b531
 800b4e8:	0800b55f 	.word	0x0800b55f
 800b4ec:	0800b55f 	.word	0x0800b55f
 800b4f0:	0800b539 	.word	0x0800b539
 800b4f4:	0800b55f 	.word	0x0800b55f
 800b4f8:	0800b55f 	.word	0x0800b55f
 800b4fc:	0800b55f 	.word	0x0800b55f
 800b500:	0800b55f 	.word	0x0800b55f
 800b504:	0800b55f 	.word	0x0800b55f
 800b508:	0800b55f 	.word	0x0800b55f
 800b50c:	0800b541 	.word	0x0800b541
 800b510:	0800b55f 	.word	0x0800b55f
 800b514:	0800b55f 	.word	0x0800b55f
 800b518:	0800b55f 	.word	0x0800b55f
 800b51c:	0800b55f 	.word	0x0800b55f
 800b520:	0800b55f 	.word	0x0800b55f
 800b524:	0800b55f 	.word	0x0800b55f
 800b528:	0800b55f 	.word	0x0800b55f
 800b52c:	0800b551 	.word	0x0800b551
		push_input_buffer(LEFT);
 800b530:	2003      	movs	r0, #3
 800b532:	f7ff ff55 	bl	800b3e0 <push_input_buffer>
		break;
 800b536:	e013      	b.n	800b560 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(RIGHT);
 800b538:	2004      	movs	r0, #4
 800b53a:	f7ff ff51 	bl	800b3e0 <push_input_buffer>
		break;
 800b53e:	e00f      	b.n	800b560 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(CCW);
 800b540:	2002      	movs	r0, #2
 800b542:	f7ff ff4d 	bl	800b3e0 <push_input_buffer>
		break;
 800b546:	e00b      	b.n	800b560 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(CW);
 800b548:	2001      	movs	r0, #1
 800b54a:	f7ff ff49 	bl	800b3e0 <push_input_buffer>
		break;
 800b54e:	e007      	b.n	800b560 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(DOWN);
 800b550:	2000      	movs	r0, #0
 800b552:	f7ff ff45 	bl	800b3e0 <push_input_buffer>
		break;
 800b556:	e003      	b.n	800b560 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(TOGGLEPAUSE);
 800b558:	2005      	movs	r0, #5
 800b55a:	f7ff ff41 	bl	800b3e0 <push_input_buffer>
		break;
 800b55e:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800b560:	2201      	movs	r2, #1
 800b562:	4904      	ldr	r1, [pc, #16]	; (800b574 <HAL_UART_RxCpltCallback+0xc0>)
 800b564:	4804      	ldr	r0, [pc, #16]	; (800b578 <HAL_UART_RxCpltCallback+0xc4>)
 800b566:	f7fa f81b 	bl	80055a0 <HAL_UART_Receive_IT>
}
 800b56a:	bf00      	nop
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	20000020 	.word	0x20000020
 800b578:	20002194 	.word	0x20002194

0800b57c <updateGameLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_updateGameLogic */
void updateGameLogic(void *argument)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Start the Game
	game_start(&window, INPUT_ERROR);
 800b584:	2106      	movs	r1, #6
 800b586:	481d      	ldr	r0, [pc, #116]	; (800b5fc <updateGameLogic+0x80>)
 800b588:	f7ff fb16 	bl	800abb8 <game_start>
	swap_buffer(&window);
 800b58c:	481b      	ldr	r0, [pc, #108]	; (800b5fc <updateGameLogic+0x80>)
 800b58e:	f7ff fb8d 	bl	800acac <swap_buffer>

	/* Infinite loop */
	for(;;) {
		//osDelay(1);
	    // process button presses (update game state)
		game_input_t event = process_user_input(&window);
 800b592:	481a      	ldr	r0, [pc, #104]	; (800b5fc <updateGameLogic+0x80>)
 800b594:	f7ff ff78 	bl	800b488 <process_user_input>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]

		switch (window.game.state) {
 800b59c:	4b17      	ldr	r3, [pc, #92]	; (800b5fc <updateGameLogic+0x80>)
 800b59e:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800b5a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d823      	bhi.n	800b5f4 <updateGameLogic+0x78>
 800b5ac:	a201      	add	r2, pc, #4	; (adr r2, 800b5b4 <updateGameLogic+0x38>)
 800b5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b2:	bf00      	nop
 800b5b4:	0800b5c5 	.word	0x0800b5c5
 800b5b8:	0800b5d1 	.word	0x0800b5d1
 800b5bc:	0800b5dd 	.word	0x0800b5dd
 800b5c0:	0800b5e9 	.word	0x0800b5e9
		  case Start:
			  // reset the Game
			  game_start(&window, event);
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	480c      	ldr	r0, [pc, #48]	; (800b5fc <updateGameLogic+0x80>)
 800b5ca:	f7ff faf5 	bl	800abb8 <game_start>
		  break;
 800b5ce:	e011      	b.n	800b5f4 <updateGameLogic+0x78>
		  case Playing:
			  // update the game state, and draw to frame buffer
			  game_playing(&window, event);
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4809      	ldr	r0, [pc, #36]	; (800b5fc <updateGameLogic+0x80>)
 800b5d6:	f7ff f9e9 	bl	800a9ac <game_playing>

		  break;
 800b5da:	e00b      	b.n	800b5f4 <updateGameLogic+0x78>
		  case Paused:
			  // pause the game
			  game_paused(&window, event);
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	4806      	ldr	r0, [pc, #24]	; (800b5fc <updateGameLogic+0x80>)
 800b5e2:	f7ff faa5 	bl	800ab30 <game_paused>
		  break;
 800b5e6:	e005      	b.n	800b5f4 <updateGameLogic+0x78>
		  case Ended:
			  // go to smile/frown face
			  game_ended(&window, event);
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4803      	ldr	r0, [pc, #12]	; (800b5fc <updateGameLogic+0x80>)
 800b5ee:	f7ff fb3b 	bl	800ac68 <game_ended>
		  break;
 800b5f2:	bf00      	nop
		}
		swap_buffer(&window);
 800b5f4:	4801      	ldr	r0, [pc, #4]	; (800b5fc <updateGameLogic+0x80>)
 800b5f6:	f7ff fb59 	bl	800acac <swap_buffer>
	for(;;) {
 800b5fa:	e7ca      	b.n	800b592 <updateGameLogic+0x16>
 800b5fc:	200022d4 	.word	0x200022d4

0800b600 <soundController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_soundController */
void soundController(void *argument)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN soundController */
	enum consoleState last_state = Start;
 800b608:	2300      	movs	r3, #0
 800b60a:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;) {
	osDelay(200);
 800b60c:	20c8      	movs	r0, #200	; 0xc8
 800b60e:	f7fc f84b 	bl	80076a8 <osDelay>
	switch (window.game.state) {
 800b612:	4b23      	ldr	r3, [pc, #140]	; (800b6a0 <soundController+0xa0>)
 800b614:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800b618:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d8f4      	bhi.n	800b60c <soundController+0xc>
 800b622:	a201      	add	r2, pc, #4	; (adr r2, 800b628 <soundController+0x28>)
 800b624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b628:	0800b639 	.word	0x0800b639
 800b62c:	0800b645 	.word	0x0800b645
 800b630:	0800b687 	.word	0x0800b687
 800b634:	0800b693 	.word	0x0800b693
	    // Update sound playing based on State
		case Start:
			playing_snd = 0;
 800b638:	4b1a      	ldr	r3, [pc, #104]	; (800b6a4 <soundController+0xa4>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]
			last_state = Start;
 800b63e:	2300      	movs	r3, #0
 800b640:	73fb      	strb	r3, [r7, #15]
		break;
 800b642:	e02c      	b.n	800b69e <soundController+0x9e>
		case Playing:
			if (!playing_snd && last_state == Start) {
 800b644:	4b17      	ldr	r3, [pc, #92]	; (800b6a4 <soundController+0xa4>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d116      	bne.n	800b67a <soundController+0x7a>
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d113      	bne.n	800b67a <soundController+0x7a>
				// For when special effects happen
				full_snd_data = (uint16_t*) tetris_theme;
 800b652:	4b15      	ldr	r3, [pc, #84]	; (800b6a8 <soundController+0xa8>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a15      	ldr	r2, [pc, #84]	; (800b6ac <soundController+0xac>)
 800b658:	6013      	str	r3, [r2, #0]
				full_snd_data_size = THEME_SOUND_SIZE;
 800b65a:	4b15      	ldr	r3, [pc, #84]	; (800b6b0 <soundController+0xb0>)
 800b65c:	4a15      	ldr	r2, [pc, #84]	; (800b6b4 <soundController+0xb4>)
 800b65e:	601a      	str	r2, [r3, #0]
				full_snd_data_offset = 0;
 800b660:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <soundController+0xb8>)
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]

				snd_data_offset = 0;
 800b666:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <soundController+0xbc>)
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]
				snd_data_size = THEME_SOUND_SIZE;
 800b66c:	4b14      	ldr	r3, [pc, #80]	; (800b6c0 <soundController+0xc0>)
 800b66e:	4a11      	ldr	r2, [pc, #68]	; (800b6b4 <soundController+0xb4>)
 800b670:	601a      	str	r2, [r3, #0]
				snd_wave_data = (uint16_t*) tetris_theme;
 800b672:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <soundController+0xa8>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a13      	ldr	r2, [pc, #76]	; (800b6c4 <soundController+0xc4>)
 800b678:	6013      	str	r3, [r2, #0]
			}
			playing_snd = 1;
 800b67a:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <soundController+0xa4>)
 800b67c:	2201      	movs	r2, #1
 800b67e:	601a      	str	r2, [r3, #0]
			last_state = Playing;
 800b680:	2301      	movs	r3, #1
 800b682:	73fb      	strb	r3, [r7, #15]
		break;
 800b684:	e00b      	b.n	800b69e <soundController+0x9e>
		case Paused:
			playing_snd = 0;
 800b686:	4b07      	ldr	r3, [pc, #28]	; (800b6a4 <soundController+0xa4>)
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]
			last_state = Paused;
 800b68c:	2302      	movs	r3, #2
 800b68e:	73fb      	strb	r3, [r7, #15]
		break;
 800b690:	e005      	b.n	800b69e <soundController+0x9e>
		case Ended:
			playing_snd = 0;
 800b692:	4b04      	ldr	r3, [pc, #16]	; (800b6a4 <soundController+0xa4>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]
			last_state = Ended;
 800b698:	2303      	movs	r3, #3
 800b69a:	73fb      	strb	r3, [r7, #15]
		break;
 800b69c:	bf00      	nop
	osDelay(200);
 800b69e:	e7b5      	b.n	800b60c <soundController+0xc>
 800b6a0:	200022d4 	.word	0x200022d4
 800b6a4:	20002010 	.word	0x20002010
 800b6a8:	20000024 	.word	0x20000024
 800b6ac:	20002184 	.word	0x20002184
 800b6b0:	20002188 	.word	0x20002188
 800b6b4:	00018ce0 	.word	0x00018ce0
 800b6b8:	20002180 	.word	0x20002180
 800b6bc:	20002118 	.word	0x20002118
 800b6c0:	20002068 	.word	0x20002068
 800b6c4:	2000217c 	.word	0x2000217c

0800b6c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a38      	ldr	r2, [pc, #224]	; (800b7b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d101      	bne.n	800b6de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b6da:	f7f5 fc59 	bl	8000f90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a35      	ldr	r2, [pc, #212]	; (800b7b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d10f      	bne.n	800b708 <HAL_TIM_PeriodElapsedCallback+0x40>
    if (HAL_GetTick() % fall_rate == 0) {
 800b6e8:	f7f5 fc66 	bl	8000fb8 <HAL_GetTick>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	4a33      	ldr	r2, [pc, #204]	; (800b7bc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800b6f0:	6812      	ldr	r2, [r2, #0]
 800b6f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6f6:	fb02 f201 	mul.w	r2, r2, r1
 800b6fa:	1a9b      	subs	r3, r3, r2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d156      	bne.n	800b7ae <HAL_TIM_PeriodElapsedCallback+0xe6>
    	push_input_buffer(DOWN);
 800b700:	2000      	movs	r0, #0
 800b702:	f7ff fe6d 	bl	800b3e0 <push_input_buffer>
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, snd_wave_data[snd_data_offset] );
	  }

  }
  /* USER CODE END Callback 1 */
}
 800b706:	e052      	b.n	800b7ae <HAL_TIM_PeriodElapsedCallback+0xe6>
  } else if (htim->Instance == TIM1) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a2c      	ldr	r2, [pc, #176]	; (800b7c0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d11e      	bne.n	800b750 <HAL_TIM_PeriodElapsedCallback+0x88>
	vert_count = (vert_count + 1) % 449;
 800b712:	4b2c      	ldr	r3, [pc, #176]	; (800b7c4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	1c59      	adds	r1, r3, #1
 800b718:	4b2b      	ldr	r3, [pc, #172]	; (800b7c8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800b71a:	fb83 2301 	smull	r2, r3, r3, r1
 800b71e:	440b      	add	r3, r1
 800b720:	121a      	asrs	r2, r3, #8
 800b722:	17cb      	asrs	r3, r1, #31
 800b724:	1ad2      	subs	r2, r2, r3
 800b726:	4613      	mov	r3, r2
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	1a9b      	subs	r3, r3, r2
 800b72c:	019b      	lsls	r3, r3, #6
 800b72e:	4413      	add	r3, r2
 800b730:	1aca      	subs	r2, r1, r3
 800b732:	4b24      	ldr	r3, [pc, #144]	; (800b7c4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800b734:	601a      	str	r2, [r3, #0]
	if(vert_count >= 447) {
 800b736:	4b23      	ldr	r3, [pc, #140]	; (800b7c4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 800b73e:	dd03      	ble.n	800b748 <HAL_TIM_PeriodElapsedCallback+0x80>
		Vert_Synch_GPIO_Port->BRR = (uint32_t)Vert_Synch_Pin;
 800b740:	4b22      	ldr	r3, [pc, #136]	; (800b7cc <HAL_TIM_PeriodElapsedCallback+0x104>)
 800b742:	2204      	movs	r2, #4
 800b744:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b746:	e032      	b.n	800b7ae <HAL_TIM_PeriodElapsedCallback+0xe6>
		Vert_Synch_GPIO_Port->BSRR = (uint32_t)Vert_Synch_Pin;
 800b748:	4b20      	ldr	r3, [pc, #128]	; (800b7cc <HAL_TIM_PeriodElapsedCallback+0x104>)
 800b74a:	2204      	movs	r2, #4
 800b74c:	619a      	str	r2, [r3, #24]
}
 800b74e:	e02e      	b.n	800b7ae <HAL_TIM_PeriodElapsedCallback+0xe6>
  } else if (htim->Instance == TIM15) {
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a1e      	ldr	r2, [pc, #120]	; (800b7d0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d129      	bne.n	800b7ae <HAL_TIM_PeriodElapsedCallback+0xe6>
	  if(playing_snd) {
 800b75a:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d025      	beq.n	800b7ae <HAL_TIM_PeriodElapsedCallback+0xe6>
		snd_data_offset++;
 800b762:	4b1d      	ldr	r3, [pc, #116]	; (800b7d8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3301      	adds	r3, #1
 800b768:	4a1b      	ldr	r2, [pc, #108]	; (800b7d8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800b76a:	6013      	str	r3, [r2, #0]
		if (snd_data_offset >= snd_data_size ) {
 800b76c:	4b1a      	ldr	r3, [pc, #104]	; (800b7d8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	4b1a      	ldr	r3, [pc, #104]	; (800b7dc <HAL_TIM_PeriodElapsedCallback+0x114>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d30e      	bcc.n	800b796 <HAL_TIM_PeriodElapsedCallback+0xce>
			snd_data_offset = full_snd_data_offset;
 800b778:	4b19      	ldr	r3, [pc, #100]	; (800b7e0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a16      	ldr	r2, [pc, #88]	; (800b7d8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800b77e:	6013      	str	r3, [r2, #0]
			full_snd_data_offset = 0;
 800b780:	4b17      	ldr	r3, [pc, #92]	; (800b7e0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]
			snd_wave_data = full_snd_data;
 800b786:	4b17      	ldr	r3, [pc, #92]	; (800b7e4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a17      	ldr	r2, [pc, #92]	; (800b7e8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800b78c:	6013      	str	r3, [r2, #0]
			snd_data_size = full_snd_data_size;
 800b78e:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <HAL_TIM_PeriodElapsedCallback+0x124>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a12      	ldr	r2, [pc, #72]	; (800b7dc <HAL_TIM_PeriodElapsedCallback+0x114>)
 800b794:	6013      	str	r3, [r2, #0]
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, snd_wave_data[snd_data_offset] );
 800b796:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	4b0f      	ldr	r3, [pc, #60]	; (800b7d8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	005b      	lsls	r3, r3, #1
 800b7a0:	4413      	add	r3, r2
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2110      	movs	r1, #16
 800b7a8:	4811      	ldr	r0, [pc, #68]	; (800b7f0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800b7aa:	f7f5 feb1 	bl	8001510 <HAL_DAC_SetValue>
}
 800b7ae:	bf00      	nop
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	40001000 	.word	0x40001000
 800b7bc:	2000001c 	.word	0x2000001c
 800b7c0:	40012c00 	.word	0x40012c00
 800b7c4:	2000200c 	.word	0x2000200c
 800b7c8:	91f5bcb9 	.word	0x91f5bcb9
 800b7cc:	48000400 	.word	0x48000400
 800b7d0:	40014000 	.word	0x40014000
 800b7d4:	20002010 	.word	0x20002010
 800b7d8:	20002118 	.word	0x20002118
 800b7dc:	20002068 	.word	0x20002068
 800b7e0:	20002180 	.word	0x20002180
 800b7e4:	20002184 	.word	0x20002184
 800b7e8:	2000217c 	.word	0x2000217c
 800b7ec:	20002188 	.word	0x20002188
 800b7f0:	200020b8 	.word	0x200020b8

0800b7f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b7f8:	b672      	cpsid	i
}
 800b7fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b7fc:	e7fe      	b.n	800b7fc <Error_Handler+0x8>
	...

0800b800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b806:	4b11      	ldr	r3, [pc, #68]	; (800b84c <HAL_MspInit+0x4c>)
 800b808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b80a:	4a10      	ldr	r2, [pc, #64]	; (800b84c <HAL_MspInit+0x4c>)
 800b80c:	f043 0301 	orr.w	r3, r3, #1
 800b810:	6613      	str	r3, [r2, #96]	; 0x60
 800b812:	4b0e      	ldr	r3, [pc, #56]	; (800b84c <HAL_MspInit+0x4c>)
 800b814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b81e:	4b0b      	ldr	r3, [pc, #44]	; (800b84c <HAL_MspInit+0x4c>)
 800b820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b822:	4a0a      	ldr	r2, [pc, #40]	; (800b84c <HAL_MspInit+0x4c>)
 800b824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b828:	6593      	str	r3, [r2, #88]	; 0x58
 800b82a:	4b08      	ldr	r3, [pc, #32]	; (800b84c <HAL_MspInit+0x4c>)
 800b82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b82e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b836:	2200      	movs	r2, #0
 800b838:	210f      	movs	r1, #15
 800b83a:	f06f 0001 	mvn.w	r0, #1
 800b83e:	f7f5 fca3 	bl	8001188 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b842:	bf00      	nop
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	40021000 	.word	0x40021000

0800b850 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08a      	sub	sp, #40	; 0x28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b858:	f107 0314 	add.w	r3, r7, #20
 800b85c:	2200      	movs	r2, #0
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	605a      	str	r2, [r3, #4]
 800b862:	609a      	str	r2, [r3, #8]
 800b864:	60da      	str	r2, [r3, #12]
 800b866:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a2e      	ldr	r2, [pc, #184]	; (800b928 <HAL_DAC_MspInit+0xd8>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d156      	bne.n	800b920 <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800b872:	4b2e      	ldr	r3, [pc, #184]	; (800b92c <HAL_DAC_MspInit+0xdc>)
 800b874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b876:	4a2d      	ldr	r2, [pc, #180]	; (800b92c <HAL_DAC_MspInit+0xdc>)
 800b878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b87c:	6593      	str	r3, [r2, #88]	; 0x58
 800b87e:	4b2b      	ldr	r3, [pc, #172]	; (800b92c <HAL_DAC_MspInit+0xdc>)
 800b880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b886:	613b      	str	r3, [r7, #16]
 800b888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b88a:	4b28      	ldr	r3, [pc, #160]	; (800b92c <HAL_DAC_MspInit+0xdc>)
 800b88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b88e:	4a27      	ldr	r2, [pc, #156]	; (800b92c <HAL_DAC_MspInit+0xdc>)
 800b890:	f043 0301 	orr.w	r3, r3, #1
 800b894:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b896:	4b25      	ldr	r3, [pc, #148]	; (800b92c <HAL_DAC_MspInit+0xdc>)
 800b898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	60fb      	str	r3, [r7, #12]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b8a2:	2330      	movs	r3, #48	; 0x30
 800b8a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ae:	f107 0314 	add.w	r3, r7, #20
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b8b8:	f7f6 fb7a 	bl	8001fb0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800b8bc:	4b1c      	ldr	r3, [pc, #112]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8be:	4a1d      	ldr	r2, [pc, #116]	; (800b934 <HAL_DAC_MspInit+0xe4>)
 800b8c0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800b8c2:	4b1b      	ldr	r3, [pc, #108]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8c4:	2206      	movs	r2, #6
 800b8c6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8c8:	4b19      	ldr	r3, [pc, #100]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8ca:	2210      	movs	r2, #16
 800b8cc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b8ce:	4b18      	ldr	r3, [pc, #96]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800b8d4:	4b16      	ldr	r3, [pc, #88]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8d6:	2280      	movs	r2, #128	; 0x80
 800b8d8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8da:	4b15      	ldr	r3, [pc, #84]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8e0:	4b13      	ldr	r3, [pc, #76]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800b8e6:	4b12      	ldr	r3, [pc, #72]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8e8:	2220      	movs	r2, #32
 800b8ea:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b8ec:	4b10      	ldr	r3, [pc, #64]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b8f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800b8f4:	480e      	ldr	r0, [pc, #56]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b8f6:	f7f6 f82d 	bl	8001954 <HAL_DMA_Init>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 800b900:	f7ff ff78 	bl	800b7f4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a0a      	ldr	r2, [pc, #40]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b908:	609a      	str	r2, [r3, #8]
 800b90a:	4a09      	ldr	r2, [pc, #36]	; (800b930 <HAL_DAC_MspInit+0xe0>)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800b910:	2200      	movs	r2, #0
 800b912:	2106      	movs	r1, #6
 800b914:	2036      	movs	r0, #54	; 0x36
 800b916:	f7f5 fc37 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b91a:	2036      	movs	r0, #54	; 0x36
 800b91c:	f7f5 fc50 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800b920:	bf00      	nop
 800b922:	3728      	adds	r7, #40	; 0x28
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	40007400 	.word	0x40007400
 800b92c:	40021000 	.word	0x40021000
 800b930:	2000211c 	.word	0x2000211c
 800b934:	40020008 	.word	0x40020008

0800b938 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b0a8      	sub	sp, #160	; 0xa0
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b940:	f107 030c 	add.w	r3, r7, #12
 800b944:	2294      	movs	r2, #148	; 0x94
 800b946:	2100      	movs	r1, #0
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fec5 	bl	800c6d8 <memset>
  if(hrng->Instance==RNG)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a19      	ldr	r2, [pc, #100]	; (800b9b8 <HAL_RNG_MspInit+0x80>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d12b      	bne.n	800b9b0 <HAL_RNG_MspInit+0x78>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800b958:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b95c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800b95e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b966:	2301      	movs	r3, #1
 800b968:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b96a:	2301      	movs	r3, #1
 800b96c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800b96e:	2310      	movs	r3, #16
 800b970:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800b972:	2302      	movs	r3, #2
 800b974:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b976:	2302      	movs	r3, #2
 800b978:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b97a:	2302      	movs	r3, #2
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b97e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b984:	f107 030c 	add.w	r3, r7, #12
 800b988:	4618      	mov	r0, r3
 800b98a:	f7f7 fc89 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 800b994:	f7ff ff2e 	bl	800b7f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b998:	4b08      	ldr	r3, [pc, #32]	; (800b9bc <HAL_RNG_MspInit+0x84>)
 800b99a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b99c:	4a07      	ldr	r2, [pc, #28]	; (800b9bc <HAL_RNG_MspInit+0x84>)
 800b99e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <HAL_RNG_MspInit+0x84>)
 800b9a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9ac:	60bb      	str	r3, [r7, #8]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b9b0:	bf00      	nop
 800b9b2:	37a0      	adds	r7, #160	; 0xa0
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	50060800 	.word	0x50060800
 800b9bc:	40021000 	.word	0x40021000

0800b9c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a30      	ldr	r2, [pc, #192]	; (800ba90 <HAL_TIM_Base_MspInit+0xd0>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d11c      	bne.n	800ba0c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b9d2:	4b30      	ldr	r3, [pc, #192]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800b9d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9d6:	4a2f      	ldr	r2, [pc, #188]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800b9d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b9dc:	6613      	str	r3, [r2, #96]	; 0x60
 800b9de:	4b2d      	ldr	r3, [pc, #180]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800b9e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 7, 0);
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2107      	movs	r1, #7
 800b9ee:	2018      	movs	r0, #24
 800b9f0:	f7f5 fbca 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800b9f4:	2018      	movs	r0, #24
 800b9f6:	f7f5 fbe3 	bl	80011c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	2105      	movs	r1, #5
 800b9fe:	2019      	movs	r0, #25
 800ba00:	f7f5 fbc2 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800ba04:	2019      	movs	r0, #25
 800ba06:	f7f5 fbdb 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800ba0a:	e03c      	b.n	800ba86 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba14:	d10c      	bne.n	800ba30 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ba16:	4b1f      	ldr	r3, [pc, #124]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba1a:	4a1e      	ldr	r2, [pc, #120]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba1c:	f043 0301 	orr.w	r3, r3, #1
 800ba20:	6593      	str	r3, [r2, #88]	; 0x58
 800ba22:	4b1c      	ldr	r3, [pc, #112]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	613b      	str	r3, [r7, #16]
 800ba2c:	693b      	ldr	r3, [r7, #16]
}
 800ba2e:	e02a      	b.n	800ba86 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a18      	ldr	r2, [pc, #96]	; (800ba98 <HAL_TIM_Base_MspInit+0xd8>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d10c      	bne.n	800ba54 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ba3a:	4b16      	ldr	r3, [pc, #88]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba3e:	4a15      	ldr	r2, [pc, #84]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba40:	f043 0304 	orr.w	r3, r3, #4
 800ba44:	6593      	str	r3, [r2, #88]	; 0x58
 800ba46:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4a:	f003 0304 	and.w	r3, r3, #4
 800ba4e:	60fb      	str	r3, [r7, #12]
 800ba50:	68fb      	ldr	r3, [r7, #12]
}
 800ba52:	e018      	b.n	800ba86 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a10      	ldr	r2, [pc, #64]	; (800ba9c <HAL_TIM_Base_MspInit+0xdc>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d113      	bne.n	800ba86 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800ba5e:	4b0d      	ldr	r3, [pc, #52]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba62:	4a0c      	ldr	r2, [pc, #48]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba68:	6613      	str	r3, [r2, #96]	; 0x60
 800ba6a:	4b0a      	ldr	r3, [pc, #40]	; (800ba94 <HAL_TIM_Base_MspInit+0xd4>)
 800ba6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba72:	60bb      	str	r3, [r7, #8]
 800ba74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 7, 0);
 800ba76:	2200      	movs	r2, #0
 800ba78:	2107      	movs	r1, #7
 800ba7a:	2018      	movs	r0, #24
 800ba7c:	f7f5 fb84 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800ba80:	2018      	movs	r0, #24
 800ba82:	f7f5 fb9d 	bl	80011c0 <HAL_NVIC_EnableIRQ>
}
 800ba86:	bf00      	nop
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	40012c00 	.word	0x40012c00
 800ba94:	40021000 	.word	0x40021000
 800ba98:	40000800 	.word	0x40000800
 800ba9c:	40014000 	.word	0x40014000

0800baa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baa8:	f107 030c 	add.w	r3, r7, #12
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	605a      	str	r2, [r3, #4]
 800bab2:	609a      	str	r2, [r3, #8]
 800bab4:	60da      	str	r2, [r3, #12]
 800bab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bac0:	d11c      	bne.n	800bafc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bac2:	4b10      	ldr	r3, [pc, #64]	; (800bb04 <HAL_TIM_MspPostInit+0x64>)
 800bac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac6:	4a0f      	ldr	r2, [pc, #60]	; (800bb04 <HAL_TIM_MspPostInit+0x64>)
 800bac8:	f043 0301 	orr.w	r3, r3, #1
 800bacc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bace:	4b0d      	ldr	r3, [pc, #52]	; (800bb04 <HAL_TIM_MspPostInit+0x64>)
 800bad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	60bb      	str	r3, [r7, #8]
 800bad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 800bada:	2308      	movs	r3, #8
 800badc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bade:	2302      	movs	r3, #2
 800bae0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bae6:	2300      	movs	r3, #0
 800bae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800baea:	2301      	movs	r3, #1
 800baec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 800baee:	f107 030c 	add.w	r3, r7, #12
 800baf2:	4619      	mov	r1, r3
 800baf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800baf8:	f7f6 fa5a 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800bafc:	bf00      	nop
 800bafe:	3720      	adds	r7, #32
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	40021000 	.word	0x40021000

0800bb08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b0ae      	sub	sp, #184	; 0xb8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bb14:	2200      	movs	r2, #0
 800bb16:	601a      	str	r2, [r3, #0]
 800bb18:	605a      	str	r2, [r3, #4]
 800bb1a:	609a      	str	r2, [r3, #8]
 800bb1c:	60da      	str	r2, [r3, #12]
 800bb1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bb20:	f107 0310 	add.w	r3, r7, #16
 800bb24:	2294      	movs	r2, #148	; 0x94
 800bb26:	2100      	movs	r1, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 fdd5 	bl	800c6d8 <memset>
  if(huart->Instance==USART1)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a25      	ldr	r2, [pc, #148]	; (800bbc8 <HAL_UART_MspInit+0xc0>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d142      	bne.n	800bbbe <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb40:	f107 0310 	add.w	r3, r7, #16
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7f7 fbab 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800bb50:	f7ff fe50 	bl	800b7f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bb54:	4b1d      	ldr	r3, [pc, #116]	; (800bbcc <HAL_UART_MspInit+0xc4>)
 800bb56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb58:	4a1c      	ldr	r2, [pc, #112]	; (800bbcc <HAL_UART_MspInit+0xc4>)
 800bb5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb5e:	6613      	str	r3, [r2, #96]	; 0x60
 800bb60:	4b1a      	ldr	r3, [pc, #104]	; (800bbcc <HAL_UART_MspInit+0xc4>)
 800bb62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb6c:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <HAL_UART_MspInit+0xc4>)
 800bb6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb70:	4a16      	ldr	r2, [pc, #88]	; (800bbcc <HAL_UART_MspInit+0xc4>)
 800bb72:	f043 0302 	orr.w	r3, r3, #2
 800bb76:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb78:	4b14      	ldr	r3, [pc, #80]	; (800bbcc <HAL_UART_MspInit+0xc4>)
 800bb7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb7c:	f003 0302 	and.w	r3, r3, #2
 800bb80:	60bb      	str	r3, [r7, #8]
 800bb82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bb84:	23c0      	movs	r3, #192	; 0xc0
 800bb86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb96:	2303      	movs	r3, #3
 800bb98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bb9c:	2307      	movs	r3, #7
 800bb9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bba2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bba6:	4619      	mov	r1, r3
 800bba8:	4809      	ldr	r0, [pc, #36]	; (800bbd0 <HAL_UART_MspInit+0xc8>)
 800bbaa:	f7f6 fa01 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2108      	movs	r1, #8
 800bbb2:	2025      	movs	r0, #37	; 0x25
 800bbb4:	f7f5 fae8 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800bbb8:	2025      	movs	r0, #37	; 0x25
 800bbba:	f7f5 fb01 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800bbbe:	bf00      	nop
 800bbc0:	37b8      	adds	r7, #184	; 0xb8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	40013800 	.word	0x40013800
 800bbcc:	40021000 	.word	0x40021000
 800bbd0:	48000400 	.word	0x48000400

0800bbd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08c      	sub	sp, #48	; 0x30
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	2036      	movs	r0, #54	; 0x36
 800bbea:	f7f5 facd 	bl	8001188 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800bbee:	2036      	movs	r0, #54	; 0x36
 800bbf0:	f7f5 fae6 	bl	80011c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800bbf4:	4b1f      	ldr	r3, [pc, #124]	; (800bc74 <HAL_InitTick+0xa0>)
 800bbf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf8:	4a1e      	ldr	r2, [pc, #120]	; (800bc74 <HAL_InitTick+0xa0>)
 800bbfa:	f043 0310 	orr.w	r3, r3, #16
 800bbfe:	6593      	str	r3, [r2, #88]	; 0x58
 800bc00:	4b1c      	ldr	r3, [pc, #112]	; (800bc74 <HAL_InitTick+0xa0>)
 800bc02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc04:	f003 0310 	and.w	r3, r3, #16
 800bc08:	60fb      	str	r3, [r7, #12]
 800bc0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bc0c:	f107 0210 	add.w	r2, r7, #16
 800bc10:	f107 0314 	add.w	r3, r7, #20
 800bc14:	4611      	mov	r1, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7f7 fa4e 	bl	80030b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800bc1c:	f7f7 fa20 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 800bc20:	4603      	mov	r3, r0
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800bc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc28:	4a13      	ldr	r2, [pc, #76]	; (800bc78 <HAL_InitTick+0xa4>)
 800bc2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc2e:	0c9b      	lsrs	r3, r3, #18
 800bc30:	3b01      	subs	r3, #1
 800bc32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800bc34:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <HAL_InitTick+0xa8>)
 800bc36:	4a12      	ldr	r2, [pc, #72]	; (800bc80 <HAL_InitTick+0xac>)
 800bc38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800bc3a:	4b10      	ldr	r3, [pc, #64]	; (800bc7c <HAL_InitTick+0xa8>)
 800bc3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bc40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800bc42:	4a0e      	ldr	r2, [pc, #56]	; (800bc7c <HAL_InitTick+0xa8>)
 800bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800bc48:	4b0c      	ldr	r3, [pc, #48]	; (800bc7c <HAL_InitTick+0xa8>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc4e:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <HAL_InitTick+0xa8>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800bc54:	4809      	ldr	r0, [pc, #36]	; (800bc7c <HAL_InitTick+0xa8>)
 800bc56:	f7f8 f8ec 	bl	8003e32 <HAL_TIM_Base_Init>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d104      	bne.n	800bc6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800bc60:	4806      	ldr	r0, [pc, #24]	; (800bc7c <HAL_InitTick+0xa8>)
 800bc62:	f7f8 f9a5 	bl	8003fb0 <HAL_TIM_Base_Start_IT>
 800bc66:	4603      	mov	r3, r0
 800bc68:	e000      	b.n	800bc6c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3730      	adds	r7, #48	; 0x30
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	40021000 	.word	0x40021000
 800bc78:	431bde83 	.word	0x431bde83
 800bc7c:	2001829c 	.word	0x2001829c
 800bc80:	40001000 	.word	0x40001000

0800bc84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bc84:	b480      	push	{r7}
 800bc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800bc88:	e7fe      	b.n	800bc88 <NMI_Handler+0x4>

0800bc8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bc8e:	e7fe      	b.n	800bc8e <HardFault_Handler+0x4>

0800bc90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bc90:	b480      	push	{r7}
 800bc92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bc94:	e7fe      	b.n	800bc94 <MemManage_Handler+0x4>

0800bc96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bc96:	b480      	push	{r7}
 800bc98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bc9a:	e7fe      	b.n	800bc9a <BusFault_Handler+0x4>

0800bc9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bca0:	e7fe      	b.n	800bca0 <UsageFault_Handler+0x4>

0800bca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bca2:	b480      	push	{r7}
 800bca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bca6:	bf00      	nop
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800bcb4:	4802      	ldr	r0, [pc, #8]	; (800bcc0 <DMA1_Channel1_IRQHandler+0x10>)
 800bcb6:	f7f6 f82b 	bl	8001d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800bcba:	bf00      	nop
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	2000211c 	.word	0x2000211c

0800bcc4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bcc8:	4803      	ldr	r0, [pc, #12]	; (800bcd8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800bcca:	f7f8 fb49 	bl	8004360 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800bcce:	4803      	ldr	r0, [pc, #12]	; (800bcdc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800bcd0:	f7f8 fb46 	bl	8004360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800bcd4:	bf00      	nop
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20002228 	.word	0x20002228
 800bcdc:	200020cc 	.word	0x200020cc

0800bce0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bce4:	4802      	ldr	r0, [pc, #8]	; (800bcf0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800bce6:	f7f8 fb3b 	bl	8004360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800bcea:	bf00      	nop
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20002228 	.word	0x20002228

0800bcf4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bcf8:	4802      	ldr	r0, [pc, #8]	; (800bd04 <USART1_IRQHandler+0x10>)
 800bcfa:	f7f9 fca7 	bl	800564c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800bcfe:	bf00      	nop
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20002194 	.word	0x20002194

0800bd08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800bd0c:	4803      	ldr	r0, [pc, #12]	; (800bd1c <TIM6_DAC_IRQHandler+0x14>)
 800bd0e:	f7f8 fb27 	bl	8004360 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800bd12:	4803      	ldr	r0, [pc, #12]	; (800bd20 <TIM6_DAC_IRQHandler+0x18>)
 800bd14:	f7f5 fba2 	bl	800145c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800bd18:	bf00      	nop
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	2001829c 	.word	0x2001829c
 800bd20:	200020b8 	.word	0x200020b8

0800bd24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bd2c:	4a14      	ldr	r2, [pc, #80]	; (800bd80 <_sbrk+0x5c>)
 800bd2e:	4b15      	ldr	r3, [pc, #84]	; (800bd84 <_sbrk+0x60>)
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bd38:	4b13      	ldr	r3, [pc, #76]	; (800bd88 <_sbrk+0x64>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bd40:	4b11      	ldr	r3, [pc, #68]	; (800bd88 <_sbrk+0x64>)
 800bd42:	4a12      	ldr	r2, [pc, #72]	; (800bd8c <_sbrk+0x68>)
 800bd44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bd46:	4b10      	ldr	r3, [pc, #64]	; (800bd88 <_sbrk+0x64>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d207      	bcs.n	800bd64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bd54:	f000 fc7e 	bl	800c654 <__errno>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	220c      	movs	r2, #12
 800bd5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd62:	e009      	b.n	800bd78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bd64:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <_sbrk+0x64>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bd6a:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <_sbrk+0x64>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4413      	add	r3, r2
 800bd72:	4a05      	ldr	r2, [pc, #20]	; (800bd88 <_sbrk+0x64>)
 800bd74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bd76:	68fb      	ldr	r3, [r7, #12]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	200a0000 	.word	0x200a0000
 800bd84:	00000400 	.word	0x00000400
 800bd88:	20002014 	.word	0x20002014
 800bd8c:	200182f8 	.word	0x200182f8

0800bd90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800bd90:	b480      	push	{r7}
 800bd92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800bd94:	4b06      	ldr	r3, [pc, #24]	; (800bdb0 <SystemInit+0x20>)
 800bd96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd9a:	4a05      	ldr	r2, [pc, #20]	; (800bdb0 <SystemInit+0x20>)
 800bd9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bda0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800bda4:	bf00      	nop
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	e000ed00 	.word	0xe000ed00

0800bdb4 <drawRect>:
 * @param height height of 2D data rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param data data to write to screen
 */
void drawRect(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, const uint8_t* data) {
 800bdb4:	b480      	push	{r7}
 800bdb6:	b08b      	sub	sp, #44	; 0x2c
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	617b      	str	r3, [r7, #20]

    int indexRow = 0, indexCol;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdd0:	fb02 f303 	mul.w	r3, r2, r3
 800bdd4:	3346      	adds	r3, #70	; 0x46
 800bdd6:	61fb      	str	r3, [r7, #28]
 800bdd8:	e06b      	b.n	800beb2 <drawRect+0xfe>
        indexCol = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bde2:	fb02 f303 	mul.w	r3, r2, r3
 800bde6:	3302      	adds	r3, #2
 800bde8:	61bb      	str	r3, [r7, #24]
 800bdea:	e041      	b.n	800be70 <drawRect+0xbc>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X && data[indexRow * width + indexCol] != 10) {
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b45      	cmp	r3, #69	; 0x45
 800bdf0:	dd27      	ble.n	800be42 <drawRect+0x8e>
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800bdf8:	da23      	bge.n	800be42 <drawRect+0x8e>
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	dd20      	ble.n	800be42 <drawRect+0x8e>
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	2b51      	cmp	r3, #81	; 0x51
 800be04:	dc1d      	bgt.n	800be42 <drawRect+0x8e>
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	fb02 f203 	mul.w	r2, r2, r3
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	4413      	add	r3, r2
 800be12:	461a      	mov	r2, r3
 800be14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be16:	4413      	add	r3, r2
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	2b0a      	cmp	r3, #10
 800be1c:	d011      	beq.n	800be42 <drawRect+0x8e>
                buff[row][col] = data[indexRow * width + indexCol];
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	fb02 f203 	mul.w	r2, r2, r3
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	4413      	add	r3, r2
 800be2a:	461a      	mov	r2, r3
 800be2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be2e:	441a      	add	r2, r3
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	6979      	ldr	r1, [r7, #20]
 800be36:	440b      	add	r3, r1
 800be38:	6819      	ldr	r1, [r3, #0]
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	440b      	add	r3, r1
 800be3e:	7812      	ldrb	r2, [r2, #0]
 800be40:	701a      	strb	r2, [r3, #0]
            }
            if ((col - (x_start * scaling_h + IMAGE_X) + 1) % scaling_h == 0) {
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be46:	fb02 f303 	mul.w	r3, r2, r3
 800be4a:	3302      	adds	r3, #2
 800be4c:	69ba      	ldr	r2, [r7, #24]
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	3301      	adds	r3, #1
 800be52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be54:	fb93 f2f2 	sdiv	r2, r3, r2
 800be58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800be5a:	fb01 f202 	mul.w	r2, r1, r2
 800be5e:	1a9b      	subs	r3, r3, r2
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <drawRect+0xb6>
                indexCol++;
 800be64:	6a3b      	ldr	r3, [r7, #32]
 800be66:	3301      	adds	r3, #1
 800be68:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	3301      	adds	r3, #1
 800be6e:	61bb      	str	r3, [r7, #24]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	4413      	add	r3, r2
 800be76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be78:	fb02 f303 	mul.w	r3, r2, r3
 800be7c:	3301      	adds	r3, #1
 800be7e:	69ba      	ldr	r2, [r7, #24]
 800be80:	429a      	cmp	r2, r3
 800be82:	ddb3      	ble.n	800bdec <drawRect+0x38>
            }
        }
        if ((row - (y_start * scaling_v + IMAGE_Y) + 1) % scaling_v == 0) {
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be88:	fb02 f303 	mul.w	r3, r2, r3
 800be8c:	3346      	adds	r3, #70	; 0x46
 800be8e:	69fa      	ldr	r2, [r7, #28]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	3301      	adds	r3, #1
 800be94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be96:	fb93 f2f2 	sdiv	r2, r3, r2
 800be9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be9c:	fb01 f202 	mul.w	r2, r1, r2
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <drawRect+0xf8>
            indexRow++;
 800bea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea8:	3301      	adds	r3, #1
 800beaa:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	3301      	adds	r3, #1
 800beb0:	61fb      	str	r3, [r7, #28]
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	4413      	add	r3, r2
 800beb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beba:	fb02 f303 	mul.w	r3, r2, r3
 800bebe:	3345      	adds	r3, #69	; 0x45
 800bec0:	69fa      	ldr	r2, [r7, #28]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	dd89      	ble.n	800bdda <drawRect+0x26>
        }
    }
}
 800bec6:	bf00      	nop
 800bec8:	bf00      	nop
 800beca:	372c      	adds	r7, #44	; 0x2c
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <drawRect_color>:
 * @param height height of rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param color color to draw in rectangle
 */
void drawRect_color(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t color) {
 800bed4:	b480      	push	{r7}
 800bed6:	b089      	sub	sp, #36	; 0x24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
 800bee0:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	617b      	str	r3, [r7, #20]

    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beec:	fb02 f303 	mul.w	r3, r2, r3
 800bef0:	3346      	adds	r3, #70	; 0x46
 800bef2:	61fb      	str	r3, [r7, #28]
 800bef4:	e02d      	b.n	800bf52 <drawRect_color+0x7e>
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800befa:	fb02 f303 	mul.w	r3, r2, r3
 800befe:	3302      	adds	r3, #2
 800bf00:	61bb      	str	r3, [r7, #24]
 800bf02:	e019      	b.n	800bf38 <drawRect_color+0x64>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X) {
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	2b45      	cmp	r3, #69	; 0x45
 800bf08:	dd13      	ble.n	800bf32 <drawRect_color+0x5e>
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800bf10:	da0f      	bge.n	800bf32 <drawRect_color+0x5e>
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	dd0c      	ble.n	800bf32 <drawRect_color+0x5e>
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	2b51      	cmp	r3, #81	; 0x51
 800bf1c:	dc09      	bgt.n	800bf32 <drawRect_color+0x5e>
            	buff[row][col] = color;
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	4413      	add	r3, r2
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800bf30:	701a      	strb	r2, [r3, #0]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	3301      	adds	r3, #1
 800bf36:	61bb      	str	r3, [r7, #24]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf40:	fb02 f303 	mul.w	r3, r2, r3
 800bf44:	3301      	adds	r3, #1
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	dddb      	ble.n	800bf04 <drawRect_color+0x30>
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	61fb      	str	r3, [r7, #28]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	4413      	add	r3, r2
 800bf58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf5a:	fb02 f303 	mul.w	r3, r2, r3
 800bf5e:	3345      	adds	r3, #69	; 0x45
 800bf60:	69fa      	ldr	r2, [r7, #28]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	ddc7      	ble.n	800bef6 <drawRect_color+0x22>
            }
        }
    }
}
 800bf66:	bf00      	nop
 800bf68:	bf00      	nop
 800bf6a:	3724      	adds	r7, #36	; 0x24
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <draw_str>:
 *	@param window window with the image buffers.
 *	@param buffer string to write to screen
 *	@param x horizontal position
 *	@param y vertical position
 */
void draw_str(Window * window, char* buffer, int x, int y) {
 800bf74:	b480      	push	{r7}
 800bf76:	b08b      	sub	sp, #44	; 0x2c
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]

	x += 3; // Avoid back porch
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	3303      	adds	r3, #3
 800bf86:	607b      	str	r3, [r7, #4]
	y += 70;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	3346      	adds	r3, #70	; 0x46
 800bf8c:	603b      	str	r3, [r7, #0]

	char cur_char = buffer[0];
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(cur_char >= 97) cur_char -= 32;
 800bf96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf9a:	2b60      	cmp	r3, #96	; 0x60
 800bf9c:	d904      	bls.n	800bfa8 <draw_str+0x34>
 800bf9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfa2:	3b20      	subs	r3, #32
 800bfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	623b      	str	r3, [r7, #32]
	while(cur_char != '\0') {
 800bfac:	e073      	b.n	800c096 <draw_str+0x122>
		char* bitmap = font_map[cur_char - 32]; // 32 = ' '
 800bfae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb2:	f1a3 0220 	sub.w	r2, r3, #32
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	009a      	lsls	r2, r3, #2
 800bfbe:	4413      	add	r3, r2
 800bfc0:	4a3a      	ldr	r2, [pc, #232]	; (800c0ac <draw_str+0x138>)
 800bfc2:	4413      	add	r3, r2
 800bfc4:	617b      	str	r3, [r7, #20]
		// y-value precursor
		for(int h = 0; h < 70; h++) {
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	61fb      	str	r3, [r7, #28]
 800bfca:	e04c      	b.n	800c066 <draw_str+0xf2>
			for (int w = 0; w < 7; w++) {
 800bfcc:	2300      	movs	r3, #0
 800bfce:	61bb      	str	r3, [r7, #24]
 800bfd0:	e043      	b.n	800c05a <draw_str+0xe6>
				// Pre- and Post- empty space on x & y
				if (h < 10 || w == 0 || h >= 60 || w == 6) {
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	dd08      	ble.n	800bfea <draw_str+0x76>
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d005      	beq.n	800bfea <draw_str+0x76>
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	2b3b      	cmp	r3, #59	; 0x3b
 800bfe2:	dc02      	bgt.n	800bfea <draw_str+0x76>
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	2b06      	cmp	r3, #6
 800bfe8:	d10e      	bne.n	800c008 <draw_str+0x94>
					window->frame[y+h][x+w] = 100;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	440b      	add	r3, r1
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	6879      	ldr	r1, [r7, #4]
 800bffc:	69ba      	ldr	r2, [r7, #24]
 800bffe:	440a      	add	r2, r1
 800c000:	4413      	add	r3, r2
 800c002:	2264      	movs	r2, #100	; 0x64
 800c004:	701a      	strb	r2, [r3, #0]
					continue;
 800c006:	e025      	b.n	800c054 <draw_str+0xe0>
				}
				int array_index = ((h-10)/10) * 5 + (w-1); // h/10 = floor division, to stretch
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	3b0a      	subs	r3, #10
 800c00c:	4a28      	ldr	r2, [pc, #160]	; (800c0b0 <draw_str+0x13c>)
 800c00e:	fb82 1203 	smull	r1, r2, r2, r3
 800c012:	1092      	asrs	r2, r2, #2
 800c014:	17db      	asrs	r3, r3, #31
 800c016:	1ad2      	subs	r2, r2, r3
 800c018:	4613      	mov	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	441a      	add	r2, r3
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	3b01      	subs	r3, #1
 800c022:	4413      	add	r3, r2
 800c024:	613b      	str	r3, [r7, #16]
				window->frame[y+h][x+w] = bitmap[array_index] ? 170 : 100;
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4413      	add	r3, r2
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <draw_str+0xc2>
 800c032:	20aa      	movs	r0, #170	; 0xaa
 800c034:	e000      	b.n	800c038 <draw_str+0xc4>
 800c036:	2064      	movs	r0, #100	; 0x64
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	689a      	ldr	r2, [r3, #8]
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	440b      	add	r3, r1
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	440a      	add	r2, r1
 800c04e:	4413      	add	r3, r2
 800c050:	4602      	mov	r2, r0
 800c052:	701a      	strb	r2, [r3, #0]
			for (int w = 0; w < 7; w++) {
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	3301      	adds	r3, #1
 800c058:	61bb      	str	r3, [r7, #24]
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	2b06      	cmp	r3, #6
 800c05e:	ddb8      	ble.n	800bfd2 <draw_str+0x5e>
		for(int h = 0; h < 70; h++) {
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	3301      	adds	r3, #1
 800c064:	61fb      	str	r3, [r7, #28]
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	2b45      	cmp	r3, #69	; 0x45
 800c06a:	ddaf      	ble.n	800bfcc <draw_str+0x58>
			}
		}
		x += 7; // 1 pre, 5 char, 1 post
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3307      	adds	r3, #7
 800c070:	607b      	str	r3, [r7, #4]
		i++;
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	3301      	adds	r3, #1
 800c076:	623b      	str	r3, [r7, #32]
		cur_char = buffer[i];
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	4413      	add	r3, r2
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//'a' -> 'A' for example
		if(cur_char >= 97) cur_char -= 32;
 800c084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c088:	2b60      	cmp	r3, #96	; 0x60
 800c08a:	d904      	bls.n	800c096 <draw_str+0x122>
 800c08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c090:	3b20      	subs	r3, #32
 800c092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(cur_char != '\0') {
 800c096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d187      	bne.n	800bfae <draw_str+0x3a>
	}
}
 800c09e:	bf00      	nop
 800c0a0:	bf00      	nop
 800c0a2:	372c      	adds	r7, #44	; 0x2c
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	20000034 	.word	0x20000034
 800c0b0:	66666667 	.word	0x66666667
 800c0b4:	00000000 	.word	0x00000000

0800c0b8 <tetris_drawBackground>:
/**
 * @brief draw the background - a series of sine waves
 *
 * @param window window to draw to
 */
void tetris_drawBackground(Window* window) {
 800c0b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c0bc:	b086      	sub	sp, #24
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]


	float y_repeat = IMAGE_HEIGHT / 9.0;
 800c0c2:	4b5d      	ldr	r3, [pc, #372]	; (800c238 <tetris_drawBackground+0x180>)
 800c0c4:	60fb      	str	r3, [r7, #12]
	for (int row = IMAGE_Y; row < IMAGE_HEIGHT + IMAGE_Y; row++) {
 800c0c6:	2346      	movs	r3, #70	; 0x46
 800c0c8:	617b      	str	r3, [r7, #20]
 800c0ca:	e095      	b.n	800c1f8 <tetris_drawBackground+0x140>
		for (int col = IMAGE_X; col < IMAGE_WIDTH + IMAGE_X; col++) {
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	613b      	str	r3, [r7, #16]
 800c0d0:	e08b      	b.n	800c1ea <tetris_drawBackground+0x132>
			if (col < IMAGE_X + BOARD_X + BOARD_WIDTH * 2 + 5) {
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	2b1c      	cmp	r3, #28
 800c0d6:	dc0a      	bgt.n	800c0ee <tetris_drawBackground+0x36>
				window->frame[row][col] = 125;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	689a      	ldr	r2, [r3, #8]
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	227d      	movs	r2, #125	; 0x7d
 800c0ea:	701a      	strb	r2, [r3, #0]
 800c0ec:	e07a      	b.n	800c1e4 <tetris_drawBackground+0x12c>
			} else {

				float sin_diff = fabs(9.0 * arm_sin_f32(0.9 * col) + 9.0 - fmod(row, y_repeat) );
 800c0ee:	6938      	ldr	r0, [r7, #16]
 800c0f0:	f7f4 fa28 	bl	8000544 <__aeabi_i2d>
 800c0f4:	a34e      	add	r3, pc, #312	; (adr r3, 800c230 <tetris_drawBackground+0x178>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 fa8d 	bl	8000618 <__aeabi_dmul>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4610      	mov	r0, r2
 800c104:	4619      	mov	r1, r3
 800c106:	f7f4 fd5f 	bl	8000bc8 <__aeabi_d2f>
 800c10a:	4603      	mov	r3, r0
 800c10c:	ee00 3a10 	vmov	s0, r3
 800c110:	f000 fa5a 	bl	800c5c8 <arm_sin_f32>
 800c114:	ee10 3a10 	vmov	r3, s0
 800c118:	4618      	mov	r0, r3
 800c11a:	f7f4 fa25 	bl	8000568 <__aeabi_f2d>
 800c11e:	f04f 0200 	mov.w	r2, #0
 800c122:	4b46      	ldr	r3, [pc, #280]	; (800c23c <tetris_drawBackground+0x184>)
 800c124:	f7f4 fa78 	bl	8000618 <__aeabi_dmul>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	4610      	mov	r0, r2
 800c12e:	4619      	mov	r1, r3
 800c130:	f04f 0200 	mov.w	r2, #0
 800c134:	4b41      	ldr	r3, [pc, #260]	; (800c23c <tetris_drawBackground+0x184>)
 800c136:	f7f4 f8b9 	bl	80002ac <__adddf3>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	4614      	mov	r4, r2
 800c140:	461d      	mov	r5, r3
 800c142:	6978      	ldr	r0, [r7, #20]
 800c144:	f7f4 f9fe 	bl	8000544 <__aeabi_i2d>
 800c148:	4680      	mov	r8, r0
 800c14a:	4689      	mov	r9, r1
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7f4 fa0b 	bl	8000568 <__aeabi_f2d>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	ec43 2b11 	vmov	d1, r2, r3
 800c15a:	ec49 8b10 	vmov	d0, r8, r9
 800c15e:	f000 ff4b 	bl	800cff8 <fmod>
 800c162:	ec53 2b10 	vmov	r2, r3, d0
 800c166:	4620      	mov	r0, r4
 800c168:	4629      	mov	r1, r5
 800c16a:	f7f4 f89d 	bl	80002a8 <__aeabi_dsub>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	4610      	mov	r0, r2
 800c174:	4619      	mov	r1, r3
 800c176:	f7f4 fd27 	bl	8000bc8 <__aeabi_d2f>
 800c17a:	ee07 0a90 	vmov	s15, r0
 800c17e:	eef0 7ae7 	vabs.f32	s15, s15
 800c182:	edc7 7a02 	vstr	s15, [r7, #8]
				window->frame[row][col] = (sin_diff < 4.0) ? 20 : 70;
 800c186:	edd7 7a02 	vldr	s15, [r7, #8]
 800c18a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c18e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c196:	d501      	bpl.n	800c19c <tetris_drawBackground+0xe4>
 800c198:	2114      	movs	r1, #20
 800c19a:	e000      	b.n	800c19e <tetris_drawBackground+0xe6>
 800c19c:	2146      	movs	r1, #70	; 0x46
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689a      	ldr	r2, [r3, #8]
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	460a      	mov	r2, r1
 800c1b0:	701a      	strb	r2, [r3, #0]
				if( (col+2) % 7 == 0) window->frame[row][col] = 20;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	1c9a      	adds	r2, r3, #2
 800c1b6:	4b22      	ldr	r3, [pc, #136]	; (800c240 <tetris_drawBackground+0x188>)
 800c1b8:	fb83 1302 	smull	r1, r3, r3, r2
 800c1bc:	4413      	add	r3, r2
 800c1be:	1099      	asrs	r1, r3, #2
 800c1c0:	17d3      	asrs	r3, r2, #31
 800c1c2:	1ac9      	subs	r1, r1, r3
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	1a5b      	subs	r3, r3, r1
 800c1ca:	1ad1      	subs	r1, r2, r3
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	d109      	bne.n	800c1e4 <tetris_drawBackground+0x12c>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	4413      	add	r3, r2
 800c1e0:	2214      	movs	r2, #20
 800c1e2:	701a      	strb	r2, [r3, #0]
		for (int col = IMAGE_X; col < IMAGE_WIDTH + IMAGE_X; col++) {
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	613b      	str	r3, [r7, #16]
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	2b51      	cmp	r3, #81	; 0x51
 800c1ee:	f77f af70 	ble.w	800c0d2 <tetris_drawBackground+0x1a>
	for (int row = IMAGE_Y; row < IMAGE_HEIGHT + IMAGE_Y; row++) {
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	617b      	str	r3, [r7, #20]
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c1fe:	f6ff af65 	blt.w	800c0cc <tetris_drawBackground+0x14>
			}

		}
	 }
	draw_str(window, "Points:", 27, 8); // I make the points PART of the background
 800c202:	2308      	movs	r3, #8
 800c204:	221b      	movs	r2, #27
 800c206:	490f      	ldr	r1, [pc, #60]	; (800c244 <tetris_drawBackground+0x18c>)
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff feb3 	bl	800bf74 <draw_str>
	draw_str(window, "Next:", 27, 187); // I make the next tetromino PART of the background
 800c20e:	23bb      	movs	r3, #187	; 0xbb
 800c210:	221b      	movs	r2, #27
 800c212:	490d      	ldr	r1, [pc, #52]	; (800c248 <tetris_drawBackground+0x190>)
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7ff fead 	bl	800bf74 <draw_str>
	tetris_draw_scoreboard(window);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f816 	bl	800c24c <tetris_draw_scoreboard>
 }
 800c220:	bf00      	nop
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c22a:	bf00      	nop
 800c22c:	f3af 8000 	nop.w
 800c230:	cccccccd 	.word	0xcccccccd
 800c234:	3feccccc 	.word	0x3feccccc
 800c238:	421b8e39 	.word	0x421b8e39
 800c23c:	40220000 	.word	0x40220000
 800c240:	92492493 	.word	0x92492493
 800c244:	0800d4dc 	.word	0x0800d4dc
 800c248:	0800d4e4 	.word	0x0800d4e4

0800c24c <tetris_draw_scoreboard>:
/**
 * @brief Write points and next tetromino to the screen while playing.
 *
 * @param window window
 */
void tetris_draw_scoreboard(Window* window) {
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08a      	sub	sp, #40	; 0x28
 800c250:	af04      	add	r7, sp, #16
 800c252:	6078      	str	r0, [r7, #4]
    char point_str[10];
    sprintf(point_str, "%lu", window->game.points);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800c25a:	33e4      	adds	r3, #228	; 0xe4
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	f107 030c 	add.w	r3, r7, #12
 800c262:	4917      	ldr	r1, [pc, #92]	; (800c2c0 <tetris_draw_scoreboard+0x74>)
 800c264:	4618      	mov	r0, r3
 800c266:	f000 fb63 	bl	800c930 <siprintf>
    draw_str(window, point_str, 27, 97);
 800c26a:	f107 010c 	add.w	r1, r7, #12
 800c26e:	2361      	movs	r3, #97	; 0x61
 800c270:	221b      	movs	r2, #27
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7ff fe7e 	bl	800bf74 <draw_str>
    drawRect_color(window, 14, 21, 6, 5, HORIZ_SCALE, VERT_SCALE, (uint8_t) 100);
 800c278:	2364      	movs	r3, #100	; 0x64
 800c27a:	9303      	str	r3, [sp, #12]
 800c27c:	230d      	movs	r3, #13
 800c27e:	9302      	str	r3, [sp, #8]
 800c280:	2302      	movs	r3, #2
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	2305      	movs	r3, #5
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	2306      	movs	r3, #6
 800c28a:	2215      	movs	r2, #21
 800c28c:	210e      	movs	r1, #14
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7ff fe20 	bl	800bed4 <drawRect_color>
    drawRect(window, 15, 22, 4, 4, HORIZ_SCALE, VERT_SCALE, window->game.nextTetromino);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800c29a:	33e0      	adds	r3, #224	; 0xe0
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	9303      	str	r3, [sp, #12]
 800c2a0:	230d      	movs	r3, #13
 800c2a2:	9302      	str	r3, [sp, #8]
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	2304      	movs	r3, #4
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	2304      	movs	r3, #4
 800c2ae:	2216      	movs	r2, #22
 800c2b0:	210f      	movs	r1, #15
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff fd7e 	bl	800bdb4 <drawRect>
}
 800c2b8:	bf00      	nop
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	0800d4ec 	.word	0x0800d4ec
 800c2c4:	00000000 	.word	0x00000000

0800c2c8 <tetris_drawEndScreen>:
 * @brief Draws the final screen of Tetris.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_drawEndScreen(Window * window) {
 800c2c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c2cc:	b08a      	sub	sp, #40	; 0x28
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
	// Draw a smiley face
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800c2d2:	2346      	movs	r3, #70	; 0x46
 800c2d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2d6:	e12f      	b.n	800c538 <tetris_drawEndScreen+0x270>
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800c2d8:	2302      	movs	r3, #2
 800c2da:	623b      	str	r3, [r7, #32]
 800c2dc:	e125      	b.n	800c52a <tetris_drawEndScreen+0x262>
			float y = IMAGE_HEIGHT-(i-IMAGE_Y) - (((float)IMAGE_HEIGHT)/2);
 800c2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e0:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 800c2e4:	ee07 3a90 	vmov	s15, r3
 800c2e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ec:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800c558 <tetris_drawEndScreen+0x290>
 800c2f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2f4:	edc7 7a06 	vstr	s15, [r7, #24]
			float x = (((float)IMAGE_HEIGHT)/IMAGE_WIDTH)*(j-IMAGE_X) - (((float)IMAGE_HEIGHT)/2);
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	3b02      	subs	r3, #2
 800c2fc:	ee07 3a90 	vmov	s15, r3
 800c300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c304:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800c55c <tetris_drawEndScreen+0x294>
 800c308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c30c:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800c558 <tetris_drawEndScreen+0x290>
 800c310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c314:	edc7 7a05 	vstr	s15, [r7, #20]
			float rad_head = x*x + y*y;
 800c318:	edd7 7a05 	vldr	s15, [r7, #20]
 800c31c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c320:	edd7 7a06 	vldr	s15, [r7, #24]
 800c324:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c32c:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_eyes = (abs(x)-70)*(abs(x)-70) + (y-30)*(y-30);
 800c330:	edd7 7a05 	vldr	s15, [r7, #20]
 800c334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c338:	ee17 3a90 	vmov	r3, s15
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	bfb8      	it	lt
 800c340:	425b      	neglt	r3, r3
 800c342:	3b46      	subs	r3, #70	; 0x46
 800c344:	edd7 7a05 	vldr	s15, [r7, #20]
 800c348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c34c:	ee17 2a90 	vmov	r2, s15
 800c350:	2a00      	cmp	r2, #0
 800c352:	bfb8      	it	lt
 800c354:	4252      	neglt	r2, r2
 800c356:	3a46      	subs	r2, #70	; 0x46
 800c358:	fb02 f303 	mul.w	r3, r2, r3
 800c35c:	ee07 3a90 	vmov	s15, r3
 800c360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c364:	edd7 7a06 	vldr	s15, [r7, #24]
 800c368:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800c36c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800c370:	edd7 7a06 	vldr	s15, [r7, #24]
 800c374:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 800c378:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c37c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c380:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c384:	edc7 7a03 	vstr	s15, [r7, #12]
			float quad_rad;
			// Happy if we get over 80k :)
			// Even though that point count may overflow the screen-
			if (window->game.points < MAX_POINTS) {
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800c38e:	33e4      	adds	r3, #228	; 0xe4
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d137      	bne.n	800c406 <tetris_drawEndScreen+0x13e>
				quad_rad = abs((y+100)+0.01*x*x);
 800c396:	edd7 7a06 	vldr	s15, [r7, #24]
 800c39a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800c560 <tetris_drawEndScreen+0x298>
 800c39e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3a2:	ee17 0a90 	vmov	r0, s15
 800c3a6:	f7f4 f8df 	bl	8000568 <__aeabi_f2d>
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	6978      	ldr	r0, [r7, #20]
 800c3b0:	f7f4 f8da 	bl	8000568 <__aeabi_f2d>
 800c3b4:	a366      	add	r3, pc, #408	; (adr r3, 800c550 <tetris_drawEndScreen+0x288>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	f7f4 f92d 	bl	8000618 <__aeabi_dmul>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4690      	mov	r8, r2
 800c3c4:	4699      	mov	r9, r3
 800c3c6:	6978      	ldr	r0, [r7, #20]
 800c3c8:	f7f4 f8ce 	bl	8000568 <__aeabi_f2d>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	f7f4 f920 	bl	8000618 <__aeabi_dmul>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f3 ff64 	bl	80002ac <__adddf3>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	f7f4 fbc4 	bl	8000b78 <__aeabi_d2iz>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bfb8      	it	lt
 800c3f6:	425b      	neglt	r3, r3
 800c3f8:	ee07 3a90 	vmov	s15, r3
 800c3fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c400:	edc7 7a07 	vstr	s15, [r7, #28]
 800c404:	e036      	b.n	800c474 <tetris_drawEndScreen+0x1ac>
			} else {
				quad_rad = abs((y+100)-0.01*x*x);
 800c406:	edd7 7a06 	vldr	s15, [r7, #24]
 800c40a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800c560 <tetris_drawEndScreen+0x298>
 800c40e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c412:	ee17 0a90 	vmov	r0, s15
 800c416:	f7f4 f8a7 	bl	8000568 <__aeabi_f2d>
 800c41a:	4604      	mov	r4, r0
 800c41c:	460d      	mov	r5, r1
 800c41e:	6978      	ldr	r0, [r7, #20]
 800c420:	f7f4 f8a2 	bl	8000568 <__aeabi_f2d>
 800c424:	a34a      	add	r3, pc, #296	; (adr r3, 800c550 <tetris_drawEndScreen+0x288>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	f7f4 f8f5 	bl	8000618 <__aeabi_dmul>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4690      	mov	r8, r2
 800c434:	4699      	mov	r9, r3
 800c436:	6978      	ldr	r0, [r7, #20]
 800c438:	f7f4 f896 	bl	8000568 <__aeabi_f2d>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	4640      	mov	r0, r8
 800c442:	4649      	mov	r1, r9
 800c444:	f7f4 f8e8 	bl	8000618 <__aeabi_dmul>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	4620      	mov	r0, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	f7f3 ff2a 	bl	80002a8 <__aeabi_dsub>
 800c454:	4602      	mov	r2, r0
 800c456:	460b      	mov	r3, r1
 800c458:	4610      	mov	r0, r2
 800c45a:	4619      	mov	r1, r3
 800c45c:	f7f4 fb8c 	bl	8000b78 <__aeabi_d2iz>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	bfb8      	it	lt
 800c466:	425b      	neglt	r3, r3
 800c468:	ee07 3a90 	vmov	s15, r3
 800c46c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c470:	edc7 7a07 	vstr	s15, [r7, #28]
			}
			if(rad_head > 150*150 && rad_head < 170*170) {
 800c474:	edd7 7a04 	vldr	s15, [r7, #16]
 800c478:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800c564 <tetris_drawEndScreen+0x29c>
 800c47c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c484:	dd13      	ble.n	800c4ae <tetris_drawEndScreen+0x1e6>
 800c486:	edd7 7a04 	vldr	s15, [r7, #16]
 800c48a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800c568 <tetris_drawEndScreen+0x2a0>
 800c48e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c496:	d50a      	bpl.n	800c4ae <tetris_drawEndScreen+0x1e6>
				window->frame[i][j] = (uint8_t) 255;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	689a      	ldr	r2, [r3, #8]
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	22ff      	movs	r2, #255	; 0xff
 800c4aa:	701a      	strb	r2, [r3, #0]
 800c4ac:	e03a      	b.n	800c524 <tetris_drawEndScreen+0x25c>
			} else if (rad_eyes < 20*20) {
 800c4ae:	edd7 7a03 	vldr	s15, [r7, #12]
 800c4b2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c56c <tetris_drawEndScreen+0x2a4>
 800c4b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4be:	d50a      	bpl.n	800c4d6 <tetris_drawEndScreen+0x20e>
				window->frame[i][j] = (uint8_t) 255;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	689a      	ldr	r2, [r3, #8]
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	4413      	add	r3, r2
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	22ff      	movs	r2, #255	; 0xff
 800c4d2:	701a      	strb	r2, [r3, #0]
 800c4d4:	e026      	b.n	800c524 <tetris_drawEndScreen+0x25c>
			} else if (quad_rad < 10 && y < -55) {
 800c4d6:	edd7 7a07 	vldr	s15, [r7, #28]
 800c4da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c4de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4e6:	d513      	bpl.n	800c510 <tetris_drawEndScreen+0x248>
 800c4e8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4ec:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800c570 <tetris_drawEndScreen+0x2a8>
 800c4f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f8:	d50a      	bpl.n	800c510 <tetris_drawEndScreen+0x248>
				window->frame[i][j] = (uint8_t) 255;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	689a      	ldr	r2, [r3, #8]
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	6a3b      	ldr	r3, [r7, #32]
 800c508:	4413      	add	r3, r2
 800c50a:	22ff      	movs	r2, #255	; 0xff
 800c50c:	701a      	strb	r2, [r3, #0]
 800c50e:	e009      	b.n	800c524 <tetris_drawEndScreen+0x25c>
			} else {
				window->frame[i][j] = (uint8_t) 0;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	4413      	add	r3, r2
 800c520:	2200      	movs	r2, #0
 800c522:	701a      	strb	r2, [r3, #0]
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	3301      	adds	r3, #1
 800c528:	623b      	str	r3, [r7, #32]
 800c52a:	6a3b      	ldr	r3, [r7, #32]
 800c52c:	2b51      	cmp	r3, #81	; 0x51
 800c52e:	f77f aed6 	ble.w	800c2de <tetris_drawEndScreen+0x16>
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800c532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c534:	3301      	adds	r3, #1
 800c536:	627b      	str	r3, [r7, #36]	; 0x24
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c53e:	f6ff aecb 	blt.w	800c2d8 <tetris_drawEndScreen+0x10>
			}
		}
	}
}
 800c542:	bf00      	nop
 800c544:	bf00      	nop
 800c546:	3728      	adds	r7, #40	; 0x28
 800c548:	46bd      	mov	sp, r7
 800c54a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c54e:	bf00      	nop
 800c550:	47ae147b 	.word	0x47ae147b
 800c554:	3f847ae1 	.word	0x3f847ae1
 800c558:	432f0000 	.word	0x432f0000
 800c55c:	408c0000 	.word	0x408c0000
 800c560:	42c80000 	.word	0x42c80000
 800c564:	46afc800 	.word	0x46afc800
 800c568:	46e1c800 	.word	0x46e1c800
 800c56c:	43c80000 	.word	0x43c80000
 800c570:	c25c0000 	.word	0xc25c0000

0800c574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 800c574:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c5ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c578:	f7ff fc0a 	bl	800bd90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c57c:	480c      	ldr	r0, [pc, #48]	; (800c5b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800c57e:	490d      	ldr	r1, [pc, #52]	; (800c5b4 <LoopForever+0xa>)
 ldr r2, =_sidata
 800c580:	4a0d      	ldr	r2, [pc, #52]	; (800c5b8 <LoopForever+0xe>)
  movs r3, #0
 800c582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c584:	e002      	b.n	800c58c <LoopCopyDataInit>

0800c586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c58a:	3304      	adds	r3, #4

0800c58c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c58c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c58e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c590:	d3f9      	bcc.n	800c586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c592:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <LoopForever+0x12>)
  ldr r4, =_ebss
 800c594:	4c0a      	ldr	r4, [pc, #40]	; (800c5c0 <LoopForever+0x16>)
  movs r3, #0
 800c596:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c598:	e001      	b.n	800c59e <LoopFillZerobss>

0800c59a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c59a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c59c:	3204      	adds	r2, #4

0800c59e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c59e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c5a0:	d3fb      	bcc.n	800c59a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c5a2:	f000 f85d 	bl	800c660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c5a6:	f7fe fb9f 	bl	800ace8 <main>

0800c5aa <LoopForever>:

LoopForever:
    b LoopForever
 800c5aa:	e7fe      	b.n	800c5aa <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 800c5ac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800c5b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c5b4:	20000660 	.word	0x20000660
 ldr r2, =_sidata
 800c5b8:	0803f898 	.word	0x0803f898
  ldr r2, =_sbss
 800c5bc:	20000660 	.word	0x20000660
  ldr r4, =_ebss
 800c5c0:	200182f8 	.word	0x200182f8

0800c5c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c5c4:	e7fe      	b.n	800c5c4 <ADC1_IRQHandler>
	...

0800c5c8 <arm_sin_f32>:
 800c5c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c648 <arm_sin_f32+0x80>
 800c5cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c5d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c5dc:	d504      	bpl.n	800c5e8 <arm_sin_f32+0x20>
 800c5de:	ee17 3a90 	vmov	r3, s15
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	ee07 3a90 	vmov	s15, r3
 800c5e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5ec:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c64c <arm_sin_f32+0x84>
 800c5f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c5f4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c5f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c5fc:	ee17 3a90 	vmov	r3, s15
 800c600:	b29b      	uxth	r3, r3
 800c602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c606:	d21a      	bcs.n	800c63e <arm_sin_f32+0x76>
 800c608:	ee07 3a90 	vmov	s15, r3
 800c60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c610:	1c59      	adds	r1, r3, #1
 800c612:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c616:	4a0e      	ldr	r2, [pc, #56]	; (800c650 <arm_sin_f32+0x88>)
 800c618:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c61c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c620:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c624:	ed93 7a00 	vldr	s14, [r3]
 800c628:	edd2 6a00 	vldr	s13, [r2]
 800c62c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c630:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c634:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c638:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c63c:	4770      	bx	lr
 800c63e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c642:	2101      	movs	r1, #1
 800c644:	2300      	movs	r3, #0
 800c646:	e7e6      	b.n	800c616 <arm_sin_f32+0x4e>
 800c648:	3e22f983 	.word	0x3e22f983
 800c64c:	44000000 	.word	0x44000000
 800c650:	0803efdc 	.word	0x0803efdc

0800c654 <__errno>:
 800c654:	4b01      	ldr	r3, [pc, #4]	; (800c65c <__errno+0x8>)
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	200005f8 	.word	0x200005f8

0800c660 <__libc_init_array>:
 800c660:	b570      	push	{r4, r5, r6, lr}
 800c662:	4d0d      	ldr	r5, [pc, #52]	; (800c698 <__libc_init_array+0x38>)
 800c664:	4c0d      	ldr	r4, [pc, #52]	; (800c69c <__libc_init_array+0x3c>)
 800c666:	1b64      	subs	r4, r4, r5
 800c668:	10a4      	asrs	r4, r4, #2
 800c66a:	2600      	movs	r6, #0
 800c66c:	42a6      	cmp	r6, r4
 800c66e:	d109      	bne.n	800c684 <__libc_init_array+0x24>
 800c670:	4d0b      	ldr	r5, [pc, #44]	; (800c6a0 <__libc_init_array+0x40>)
 800c672:	4c0c      	ldr	r4, [pc, #48]	; (800c6a4 <__libc_init_array+0x44>)
 800c674:	f000 fef6 	bl	800d464 <_init>
 800c678:	1b64      	subs	r4, r4, r5
 800c67a:	10a4      	asrs	r4, r4, #2
 800c67c:	2600      	movs	r6, #0
 800c67e:	42a6      	cmp	r6, r4
 800c680:	d105      	bne.n	800c68e <__libc_init_array+0x2e>
 800c682:	bd70      	pop	{r4, r5, r6, pc}
 800c684:	f855 3b04 	ldr.w	r3, [r5], #4
 800c688:	4798      	blx	r3
 800c68a:	3601      	adds	r6, #1
 800c68c:	e7ee      	b.n	800c66c <__libc_init_array+0xc>
 800c68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c692:	4798      	blx	r3
 800c694:	3601      	adds	r6, #1
 800c696:	e7f2      	b.n	800c67e <__libc_init_array+0x1e>
 800c698:	0803f890 	.word	0x0803f890
 800c69c:	0803f890 	.word	0x0803f890
 800c6a0:	0803f890 	.word	0x0803f890
 800c6a4:	0803f894 	.word	0x0803f894

0800c6a8 <__retarget_lock_acquire_recursive>:
 800c6a8:	4770      	bx	lr

0800c6aa <__retarget_lock_release_recursive>:
 800c6aa:	4770      	bx	lr

0800c6ac <malloc>:
 800c6ac:	4b02      	ldr	r3, [pc, #8]	; (800c6b8 <malloc+0xc>)
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f000 b869 	b.w	800c788 <_malloc_r>
 800c6b6:	bf00      	nop
 800c6b8:	200005f8 	.word	0x200005f8

0800c6bc <memcpy>:
 800c6bc:	440a      	add	r2, r1
 800c6be:	4291      	cmp	r1, r2
 800c6c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6c4:	d100      	bne.n	800c6c8 <memcpy+0xc>
 800c6c6:	4770      	bx	lr
 800c6c8:	b510      	push	{r4, lr}
 800c6ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6d2:	4291      	cmp	r1, r2
 800c6d4:	d1f9      	bne.n	800c6ca <memcpy+0xe>
 800c6d6:	bd10      	pop	{r4, pc}

0800c6d8 <memset>:
 800c6d8:	4402      	add	r2, r0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d100      	bne.n	800c6e2 <memset+0xa>
 800c6e0:	4770      	bx	lr
 800c6e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6e6:	e7f9      	b.n	800c6dc <memset+0x4>

0800c6e8 <_free_r>:
 800c6e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	d048      	beq.n	800c780 <_free_r+0x98>
 800c6ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6f2:	9001      	str	r0, [sp, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f1a1 0404 	sub.w	r4, r1, #4
 800c6fa:	bfb8      	it	lt
 800c6fc:	18e4      	addlt	r4, r4, r3
 800c6fe:	f000 f937 	bl	800c970 <__malloc_lock>
 800c702:	4a20      	ldr	r2, [pc, #128]	; (800c784 <_free_r+0x9c>)
 800c704:	9801      	ldr	r0, [sp, #4]
 800c706:	6813      	ldr	r3, [r2, #0]
 800c708:	4615      	mov	r5, r2
 800c70a:	b933      	cbnz	r3, 800c71a <_free_r+0x32>
 800c70c:	6063      	str	r3, [r4, #4]
 800c70e:	6014      	str	r4, [r2, #0]
 800c710:	b003      	add	sp, #12
 800c712:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c716:	f000 b931 	b.w	800c97c <__malloc_unlock>
 800c71a:	42a3      	cmp	r3, r4
 800c71c:	d90b      	bls.n	800c736 <_free_r+0x4e>
 800c71e:	6821      	ldr	r1, [r4, #0]
 800c720:	1862      	adds	r2, r4, r1
 800c722:	4293      	cmp	r3, r2
 800c724:	bf04      	itt	eq
 800c726:	681a      	ldreq	r2, [r3, #0]
 800c728:	685b      	ldreq	r3, [r3, #4]
 800c72a:	6063      	str	r3, [r4, #4]
 800c72c:	bf04      	itt	eq
 800c72e:	1852      	addeq	r2, r2, r1
 800c730:	6022      	streq	r2, [r4, #0]
 800c732:	602c      	str	r4, [r5, #0]
 800c734:	e7ec      	b.n	800c710 <_free_r+0x28>
 800c736:	461a      	mov	r2, r3
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	b10b      	cbz	r3, 800c740 <_free_r+0x58>
 800c73c:	42a3      	cmp	r3, r4
 800c73e:	d9fa      	bls.n	800c736 <_free_r+0x4e>
 800c740:	6811      	ldr	r1, [r2, #0]
 800c742:	1855      	adds	r5, r2, r1
 800c744:	42a5      	cmp	r5, r4
 800c746:	d10b      	bne.n	800c760 <_free_r+0x78>
 800c748:	6824      	ldr	r4, [r4, #0]
 800c74a:	4421      	add	r1, r4
 800c74c:	1854      	adds	r4, r2, r1
 800c74e:	42a3      	cmp	r3, r4
 800c750:	6011      	str	r1, [r2, #0]
 800c752:	d1dd      	bne.n	800c710 <_free_r+0x28>
 800c754:	681c      	ldr	r4, [r3, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	6053      	str	r3, [r2, #4]
 800c75a:	4421      	add	r1, r4
 800c75c:	6011      	str	r1, [r2, #0]
 800c75e:	e7d7      	b.n	800c710 <_free_r+0x28>
 800c760:	d902      	bls.n	800c768 <_free_r+0x80>
 800c762:	230c      	movs	r3, #12
 800c764:	6003      	str	r3, [r0, #0]
 800c766:	e7d3      	b.n	800c710 <_free_r+0x28>
 800c768:	6825      	ldr	r5, [r4, #0]
 800c76a:	1961      	adds	r1, r4, r5
 800c76c:	428b      	cmp	r3, r1
 800c76e:	bf04      	itt	eq
 800c770:	6819      	ldreq	r1, [r3, #0]
 800c772:	685b      	ldreq	r3, [r3, #4]
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	bf04      	itt	eq
 800c778:	1949      	addeq	r1, r1, r5
 800c77a:	6021      	streq	r1, [r4, #0]
 800c77c:	6054      	str	r4, [r2, #4]
 800c77e:	e7c7      	b.n	800c710 <_free_r+0x28>
 800c780:	b003      	add	sp, #12
 800c782:	bd30      	pop	{r4, r5, pc}
 800c784:	20002018 	.word	0x20002018

0800c788 <_malloc_r>:
 800c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78a:	1ccd      	adds	r5, r1, #3
 800c78c:	f025 0503 	bic.w	r5, r5, #3
 800c790:	3508      	adds	r5, #8
 800c792:	2d0c      	cmp	r5, #12
 800c794:	bf38      	it	cc
 800c796:	250c      	movcc	r5, #12
 800c798:	2d00      	cmp	r5, #0
 800c79a:	4606      	mov	r6, r0
 800c79c:	db01      	blt.n	800c7a2 <_malloc_r+0x1a>
 800c79e:	42a9      	cmp	r1, r5
 800c7a0:	d903      	bls.n	800c7aa <_malloc_r+0x22>
 800c7a2:	230c      	movs	r3, #12
 800c7a4:	6033      	str	r3, [r6, #0]
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7aa:	f000 f8e1 	bl	800c970 <__malloc_lock>
 800c7ae:	4921      	ldr	r1, [pc, #132]	; (800c834 <_malloc_r+0xac>)
 800c7b0:	680a      	ldr	r2, [r1, #0]
 800c7b2:	4614      	mov	r4, r2
 800c7b4:	b99c      	cbnz	r4, 800c7de <_malloc_r+0x56>
 800c7b6:	4f20      	ldr	r7, [pc, #128]	; (800c838 <_malloc_r+0xb0>)
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	b923      	cbnz	r3, 800c7c6 <_malloc_r+0x3e>
 800c7bc:	4621      	mov	r1, r4
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f000 f8a6 	bl	800c910 <_sbrk_r>
 800c7c4:	6038      	str	r0, [r7, #0]
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f000 f8a1 	bl	800c910 <_sbrk_r>
 800c7ce:	1c43      	adds	r3, r0, #1
 800c7d0:	d123      	bne.n	800c81a <_malloc_r+0x92>
 800c7d2:	230c      	movs	r3, #12
 800c7d4:	6033      	str	r3, [r6, #0]
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f000 f8d0 	bl	800c97c <__malloc_unlock>
 800c7dc:	e7e3      	b.n	800c7a6 <_malloc_r+0x1e>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	1b5b      	subs	r3, r3, r5
 800c7e2:	d417      	bmi.n	800c814 <_malloc_r+0x8c>
 800c7e4:	2b0b      	cmp	r3, #11
 800c7e6:	d903      	bls.n	800c7f0 <_malloc_r+0x68>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	441c      	add	r4, r3
 800c7ec:	6025      	str	r5, [r4, #0]
 800c7ee:	e004      	b.n	800c7fa <_malloc_r+0x72>
 800c7f0:	6863      	ldr	r3, [r4, #4]
 800c7f2:	42a2      	cmp	r2, r4
 800c7f4:	bf0c      	ite	eq
 800c7f6:	600b      	streq	r3, [r1, #0]
 800c7f8:	6053      	strne	r3, [r2, #4]
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f000 f8be 	bl	800c97c <__malloc_unlock>
 800c800:	f104 000b 	add.w	r0, r4, #11
 800c804:	1d23      	adds	r3, r4, #4
 800c806:	f020 0007 	bic.w	r0, r0, #7
 800c80a:	1ac2      	subs	r2, r0, r3
 800c80c:	d0cc      	beq.n	800c7a8 <_malloc_r+0x20>
 800c80e:	1a1b      	subs	r3, r3, r0
 800c810:	50a3      	str	r3, [r4, r2]
 800c812:	e7c9      	b.n	800c7a8 <_malloc_r+0x20>
 800c814:	4622      	mov	r2, r4
 800c816:	6864      	ldr	r4, [r4, #4]
 800c818:	e7cc      	b.n	800c7b4 <_malloc_r+0x2c>
 800c81a:	1cc4      	adds	r4, r0, #3
 800c81c:	f024 0403 	bic.w	r4, r4, #3
 800c820:	42a0      	cmp	r0, r4
 800c822:	d0e3      	beq.n	800c7ec <_malloc_r+0x64>
 800c824:	1a21      	subs	r1, r4, r0
 800c826:	4630      	mov	r0, r6
 800c828:	f000 f872 	bl	800c910 <_sbrk_r>
 800c82c:	3001      	adds	r0, #1
 800c82e:	d1dd      	bne.n	800c7ec <_malloc_r+0x64>
 800c830:	e7cf      	b.n	800c7d2 <_malloc_r+0x4a>
 800c832:	bf00      	nop
 800c834:	20002018 	.word	0x20002018
 800c838:	2000201c 	.word	0x2000201c

0800c83c <cleanup_glue>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	460c      	mov	r4, r1
 800c840:	6809      	ldr	r1, [r1, #0]
 800c842:	4605      	mov	r5, r0
 800c844:	b109      	cbz	r1, 800c84a <cleanup_glue+0xe>
 800c846:	f7ff fff9 	bl	800c83c <cleanup_glue>
 800c84a:	4621      	mov	r1, r4
 800c84c:	4628      	mov	r0, r5
 800c84e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c852:	f7ff bf49 	b.w	800c6e8 <_free_r>
	...

0800c858 <_reclaim_reent>:
 800c858:	4b2c      	ldr	r3, [pc, #176]	; (800c90c <_reclaim_reent+0xb4>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4283      	cmp	r3, r0
 800c85e:	b570      	push	{r4, r5, r6, lr}
 800c860:	4604      	mov	r4, r0
 800c862:	d051      	beq.n	800c908 <_reclaim_reent+0xb0>
 800c864:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c866:	b143      	cbz	r3, 800c87a <_reclaim_reent+0x22>
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d14a      	bne.n	800c904 <_reclaim_reent+0xac>
 800c86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c870:	6819      	ldr	r1, [r3, #0]
 800c872:	b111      	cbz	r1, 800c87a <_reclaim_reent+0x22>
 800c874:	4620      	mov	r0, r4
 800c876:	f7ff ff37 	bl	800c6e8 <_free_r>
 800c87a:	6961      	ldr	r1, [r4, #20]
 800c87c:	b111      	cbz	r1, 800c884 <_reclaim_reent+0x2c>
 800c87e:	4620      	mov	r0, r4
 800c880:	f7ff ff32 	bl	800c6e8 <_free_r>
 800c884:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c886:	b111      	cbz	r1, 800c88e <_reclaim_reent+0x36>
 800c888:	4620      	mov	r0, r4
 800c88a:	f7ff ff2d 	bl	800c6e8 <_free_r>
 800c88e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c890:	b111      	cbz	r1, 800c898 <_reclaim_reent+0x40>
 800c892:	4620      	mov	r0, r4
 800c894:	f7ff ff28 	bl	800c6e8 <_free_r>
 800c898:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c89a:	b111      	cbz	r1, 800c8a2 <_reclaim_reent+0x4a>
 800c89c:	4620      	mov	r0, r4
 800c89e:	f7ff ff23 	bl	800c6e8 <_free_r>
 800c8a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c8a4:	b111      	cbz	r1, 800c8ac <_reclaim_reent+0x54>
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f7ff ff1e 	bl	800c6e8 <_free_r>
 800c8ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c8ae:	b111      	cbz	r1, 800c8b6 <_reclaim_reent+0x5e>
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f7ff ff19 	bl	800c6e8 <_free_r>
 800c8b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c8b8:	b111      	cbz	r1, 800c8c0 <_reclaim_reent+0x68>
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f7ff ff14 	bl	800c6e8 <_free_r>
 800c8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8c2:	b111      	cbz	r1, 800c8ca <_reclaim_reent+0x72>
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f7ff ff0f 	bl	800c6e8 <_free_r>
 800c8ca:	69a3      	ldr	r3, [r4, #24]
 800c8cc:	b1e3      	cbz	r3, 800c908 <_reclaim_reent+0xb0>
 800c8ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	4798      	blx	r3
 800c8d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c8d6:	b1b9      	cbz	r1, 800c908 <_reclaim_reent+0xb0>
 800c8d8:	4620      	mov	r0, r4
 800c8da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8de:	f7ff bfad 	b.w	800c83c <cleanup_glue>
 800c8e2:	5949      	ldr	r1, [r1, r5]
 800c8e4:	b941      	cbnz	r1, 800c8f8 <_reclaim_reent+0xa0>
 800c8e6:	3504      	adds	r5, #4
 800c8e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8ea:	2d80      	cmp	r5, #128	; 0x80
 800c8ec:	68d9      	ldr	r1, [r3, #12]
 800c8ee:	d1f8      	bne.n	800c8e2 <_reclaim_reent+0x8a>
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f7ff fef9 	bl	800c6e8 <_free_r>
 800c8f6:	e7ba      	b.n	800c86e <_reclaim_reent+0x16>
 800c8f8:	680e      	ldr	r6, [r1, #0]
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f7ff fef4 	bl	800c6e8 <_free_r>
 800c900:	4631      	mov	r1, r6
 800c902:	e7ef      	b.n	800c8e4 <_reclaim_reent+0x8c>
 800c904:	2500      	movs	r5, #0
 800c906:	e7ef      	b.n	800c8e8 <_reclaim_reent+0x90>
 800c908:	bd70      	pop	{r4, r5, r6, pc}
 800c90a:	bf00      	nop
 800c90c:	200005f8 	.word	0x200005f8

0800c910 <_sbrk_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4d06      	ldr	r5, [pc, #24]	; (800c92c <_sbrk_r+0x1c>)
 800c914:	2300      	movs	r3, #0
 800c916:	4604      	mov	r4, r0
 800c918:	4608      	mov	r0, r1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	f7ff fa02 	bl	800bd24 <_sbrk>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_sbrk_r+0x1a>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_sbrk_r+0x1a>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	200182f4 	.word	0x200182f4

0800c930 <siprintf>:
 800c930:	b40e      	push	{r1, r2, r3}
 800c932:	b500      	push	{lr}
 800c934:	b09c      	sub	sp, #112	; 0x70
 800c936:	ab1d      	add	r3, sp, #116	; 0x74
 800c938:	9002      	str	r0, [sp, #8]
 800c93a:	9006      	str	r0, [sp, #24]
 800c93c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c940:	4809      	ldr	r0, [pc, #36]	; (800c968 <siprintf+0x38>)
 800c942:	9107      	str	r1, [sp, #28]
 800c944:	9104      	str	r1, [sp, #16]
 800c946:	4909      	ldr	r1, [pc, #36]	; (800c96c <siprintf+0x3c>)
 800c948:	f853 2b04 	ldr.w	r2, [r3], #4
 800c94c:	9105      	str	r1, [sp, #20]
 800c94e:	6800      	ldr	r0, [r0, #0]
 800c950:	9301      	str	r3, [sp, #4]
 800c952:	a902      	add	r1, sp, #8
 800c954:	f000 f874 	bl	800ca40 <_svfiprintf_r>
 800c958:	9b02      	ldr	r3, [sp, #8]
 800c95a:	2200      	movs	r2, #0
 800c95c:	701a      	strb	r2, [r3, #0]
 800c95e:	b01c      	add	sp, #112	; 0x70
 800c960:	f85d eb04 	ldr.w	lr, [sp], #4
 800c964:	b003      	add	sp, #12
 800c966:	4770      	bx	lr
 800c968:	200005f8 	.word	0x200005f8
 800c96c:	ffff0208 	.word	0xffff0208

0800c970 <__malloc_lock>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__malloc_lock+0x8>)
 800c972:	f7ff be99 	b.w	800c6a8 <__retarget_lock_acquire_recursive>
 800c976:	bf00      	nop
 800c978:	200182ec 	.word	0x200182ec

0800c97c <__malloc_unlock>:
 800c97c:	4801      	ldr	r0, [pc, #4]	; (800c984 <__malloc_unlock+0x8>)
 800c97e:	f7ff be94 	b.w	800c6aa <__retarget_lock_release_recursive>
 800c982:	bf00      	nop
 800c984:	200182ec 	.word	0x200182ec

0800c988 <__ssputs_r>:
 800c988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98c:	688e      	ldr	r6, [r1, #8]
 800c98e:	429e      	cmp	r6, r3
 800c990:	4682      	mov	sl, r0
 800c992:	460c      	mov	r4, r1
 800c994:	4690      	mov	r8, r2
 800c996:	461f      	mov	r7, r3
 800c998:	d838      	bhi.n	800ca0c <__ssputs_r+0x84>
 800c99a:	898a      	ldrh	r2, [r1, #12]
 800c99c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9a0:	d032      	beq.n	800ca08 <__ssputs_r+0x80>
 800c9a2:	6825      	ldr	r5, [r4, #0]
 800c9a4:	6909      	ldr	r1, [r1, #16]
 800c9a6:	eba5 0901 	sub.w	r9, r5, r1
 800c9aa:	6965      	ldr	r5, [r4, #20]
 800c9ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	444b      	add	r3, r9
 800c9b8:	106d      	asrs	r5, r5, #1
 800c9ba:	429d      	cmp	r5, r3
 800c9bc:	bf38      	it	cc
 800c9be:	461d      	movcc	r5, r3
 800c9c0:	0553      	lsls	r3, r2, #21
 800c9c2:	d531      	bpl.n	800ca28 <__ssputs_r+0xa0>
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	f7ff fedf 	bl	800c788 <_malloc_r>
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	b950      	cbnz	r0, 800c9e4 <__ssputs_r+0x5c>
 800c9ce:	230c      	movs	r3, #12
 800c9d0:	f8ca 3000 	str.w	r3, [sl]
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9da:	81a3      	strh	r3, [r4, #12]
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e4:	6921      	ldr	r1, [r4, #16]
 800c9e6:	464a      	mov	r2, r9
 800c9e8:	f7ff fe68 	bl	800c6bc <memcpy>
 800c9ec:	89a3      	ldrh	r3, [r4, #12]
 800c9ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f6:	81a3      	strh	r3, [r4, #12]
 800c9f8:	6126      	str	r6, [r4, #16]
 800c9fa:	6165      	str	r5, [r4, #20]
 800c9fc:	444e      	add	r6, r9
 800c9fe:	eba5 0509 	sub.w	r5, r5, r9
 800ca02:	6026      	str	r6, [r4, #0]
 800ca04:	60a5      	str	r5, [r4, #8]
 800ca06:	463e      	mov	r6, r7
 800ca08:	42be      	cmp	r6, r7
 800ca0a:	d900      	bls.n	800ca0e <__ssputs_r+0x86>
 800ca0c:	463e      	mov	r6, r7
 800ca0e:	4632      	mov	r2, r6
 800ca10:	6820      	ldr	r0, [r4, #0]
 800ca12:	4641      	mov	r1, r8
 800ca14:	f000 faa8 	bl	800cf68 <memmove>
 800ca18:	68a3      	ldr	r3, [r4, #8]
 800ca1a:	6822      	ldr	r2, [r4, #0]
 800ca1c:	1b9b      	subs	r3, r3, r6
 800ca1e:	4432      	add	r2, r6
 800ca20:	60a3      	str	r3, [r4, #8]
 800ca22:	6022      	str	r2, [r4, #0]
 800ca24:	2000      	movs	r0, #0
 800ca26:	e7db      	b.n	800c9e0 <__ssputs_r+0x58>
 800ca28:	462a      	mov	r2, r5
 800ca2a:	f000 fab7 	bl	800cf9c <_realloc_r>
 800ca2e:	4606      	mov	r6, r0
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d1e1      	bne.n	800c9f8 <__ssputs_r+0x70>
 800ca34:	6921      	ldr	r1, [r4, #16]
 800ca36:	4650      	mov	r0, sl
 800ca38:	f7ff fe56 	bl	800c6e8 <_free_r>
 800ca3c:	e7c7      	b.n	800c9ce <__ssputs_r+0x46>
	...

0800ca40 <_svfiprintf_r>:
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	4698      	mov	r8, r3
 800ca46:	898b      	ldrh	r3, [r1, #12]
 800ca48:	061b      	lsls	r3, r3, #24
 800ca4a:	b09d      	sub	sp, #116	; 0x74
 800ca4c:	4607      	mov	r7, r0
 800ca4e:	460d      	mov	r5, r1
 800ca50:	4614      	mov	r4, r2
 800ca52:	d50e      	bpl.n	800ca72 <_svfiprintf_r+0x32>
 800ca54:	690b      	ldr	r3, [r1, #16]
 800ca56:	b963      	cbnz	r3, 800ca72 <_svfiprintf_r+0x32>
 800ca58:	2140      	movs	r1, #64	; 0x40
 800ca5a:	f7ff fe95 	bl	800c788 <_malloc_r>
 800ca5e:	6028      	str	r0, [r5, #0]
 800ca60:	6128      	str	r0, [r5, #16]
 800ca62:	b920      	cbnz	r0, 800ca6e <_svfiprintf_r+0x2e>
 800ca64:	230c      	movs	r3, #12
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6c:	e0d1      	b.n	800cc12 <_svfiprintf_r+0x1d2>
 800ca6e:	2340      	movs	r3, #64	; 0x40
 800ca70:	616b      	str	r3, [r5, #20]
 800ca72:	2300      	movs	r3, #0
 800ca74:	9309      	str	r3, [sp, #36]	; 0x24
 800ca76:	2320      	movs	r3, #32
 800ca78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca80:	2330      	movs	r3, #48	; 0x30
 800ca82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc2c <_svfiprintf_r+0x1ec>
 800ca86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca8a:	f04f 0901 	mov.w	r9, #1
 800ca8e:	4623      	mov	r3, r4
 800ca90:	469a      	mov	sl, r3
 800ca92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca96:	b10a      	cbz	r2, 800ca9c <_svfiprintf_r+0x5c>
 800ca98:	2a25      	cmp	r2, #37	; 0x25
 800ca9a:	d1f9      	bne.n	800ca90 <_svfiprintf_r+0x50>
 800ca9c:	ebba 0b04 	subs.w	fp, sl, r4
 800caa0:	d00b      	beq.n	800caba <_svfiprintf_r+0x7a>
 800caa2:	465b      	mov	r3, fp
 800caa4:	4622      	mov	r2, r4
 800caa6:	4629      	mov	r1, r5
 800caa8:	4638      	mov	r0, r7
 800caaa:	f7ff ff6d 	bl	800c988 <__ssputs_r>
 800caae:	3001      	adds	r0, #1
 800cab0:	f000 80aa 	beq.w	800cc08 <_svfiprintf_r+0x1c8>
 800cab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab6:	445a      	add	r2, fp
 800cab8:	9209      	str	r2, [sp, #36]	; 0x24
 800caba:	f89a 3000 	ldrb.w	r3, [sl]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f000 80a2 	beq.w	800cc08 <_svfiprintf_r+0x1c8>
 800cac4:	2300      	movs	r3, #0
 800cac6:	f04f 32ff 	mov.w	r2, #4294967295
 800caca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cace:	f10a 0a01 	add.w	sl, sl, #1
 800cad2:	9304      	str	r3, [sp, #16]
 800cad4:	9307      	str	r3, [sp, #28]
 800cad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cada:	931a      	str	r3, [sp, #104]	; 0x68
 800cadc:	4654      	mov	r4, sl
 800cade:	2205      	movs	r2, #5
 800cae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae4:	4851      	ldr	r0, [pc, #324]	; (800cc2c <_svfiprintf_r+0x1ec>)
 800cae6:	f7f3 fb8b 	bl	8000200 <memchr>
 800caea:	9a04      	ldr	r2, [sp, #16]
 800caec:	b9d8      	cbnz	r0, 800cb26 <_svfiprintf_r+0xe6>
 800caee:	06d0      	lsls	r0, r2, #27
 800caf0:	bf44      	itt	mi
 800caf2:	2320      	movmi	r3, #32
 800caf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caf8:	0711      	lsls	r1, r2, #28
 800cafa:	bf44      	itt	mi
 800cafc:	232b      	movmi	r3, #43	; 0x2b
 800cafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb02:	f89a 3000 	ldrb.w	r3, [sl]
 800cb06:	2b2a      	cmp	r3, #42	; 0x2a
 800cb08:	d015      	beq.n	800cb36 <_svfiprintf_r+0xf6>
 800cb0a:	9a07      	ldr	r2, [sp, #28]
 800cb0c:	4654      	mov	r4, sl
 800cb0e:	2000      	movs	r0, #0
 800cb10:	f04f 0c0a 	mov.w	ip, #10
 800cb14:	4621      	mov	r1, r4
 800cb16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb1a:	3b30      	subs	r3, #48	; 0x30
 800cb1c:	2b09      	cmp	r3, #9
 800cb1e:	d94e      	bls.n	800cbbe <_svfiprintf_r+0x17e>
 800cb20:	b1b0      	cbz	r0, 800cb50 <_svfiprintf_r+0x110>
 800cb22:	9207      	str	r2, [sp, #28]
 800cb24:	e014      	b.n	800cb50 <_svfiprintf_r+0x110>
 800cb26:	eba0 0308 	sub.w	r3, r0, r8
 800cb2a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	46a2      	mov	sl, r4
 800cb34:	e7d2      	b.n	800cadc <_svfiprintf_r+0x9c>
 800cb36:	9b03      	ldr	r3, [sp, #12]
 800cb38:	1d19      	adds	r1, r3, #4
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	9103      	str	r1, [sp, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	bfbb      	ittet	lt
 800cb42:	425b      	neglt	r3, r3
 800cb44:	f042 0202 	orrlt.w	r2, r2, #2
 800cb48:	9307      	strge	r3, [sp, #28]
 800cb4a:	9307      	strlt	r3, [sp, #28]
 800cb4c:	bfb8      	it	lt
 800cb4e:	9204      	strlt	r2, [sp, #16]
 800cb50:	7823      	ldrb	r3, [r4, #0]
 800cb52:	2b2e      	cmp	r3, #46	; 0x2e
 800cb54:	d10c      	bne.n	800cb70 <_svfiprintf_r+0x130>
 800cb56:	7863      	ldrb	r3, [r4, #1]
 800cb58:	2b2a      	cmp	r3, #42	; 0x2a
 800cb5a:	d135      	bne.n	800cbc8 <_svfiprintf_r+0x188>
 800cb5c:	9b03      	ldr	r3, [sp, #12]
 800cb5e:	1d1a      	adds	r2, r3, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	9203      	str	r2, [sp, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	bfb8      	it	lt
 800cb68:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb6c:	3402      	adds	r4, #2
 800cb6e:	9305      	str	r3, [sp, #20]
 800cb70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc3c <_svfiprintf_r+0x1fc>
 800cb74:	7821      	ldrb	r1, [r4, #0]
 800cb76:	2203      	movs	r2, #3
 800cb78:	4650      	mov	r0, sl
 800cb7a:	f7f3 fb41 	bl	8000200 <memchr>
 800cb7e:	b140      	cbz	r0, 800cb92 <_svfiprintf_r+0x152>
 800cb80:	2340      	movs	r3, #64	; 0x40
 800cb82:	eba0 000a 	sub.w	r0, r0, sl
 800cb86:	fa03 f000 	lsl.w	r0, r3, r0
 800cb8a:	9b04      	ldr	r3, [sp, #16]
 800cb8c:	4303      	orrs	r3, r0
 800cb8e:	3401      	adds	r4, #1
 800cb90:	9304      	str	r3, [sp, #16]
 800cb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb96:	4826      	ldr	r0, [pc, #152]	; (800cc30 <_svfiprintf_r+0x1f0>)
 800cb98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb9c:	2206      	movs	r2, #6
 800cb9e:	f7f3 fb2f 	bl	8000200 <memchr>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d038      	beq.n	800cc18 <_svfiprintf_r+0x1d8>
 800cba6:	4b23      	ldr	r3, [pc, #140]	; (800cc34 <_svfiprintf_r+0x1f4>)
 800cba8:	bb1b      	cbnz	r3, 800cbf2 <_svfiprintf_r+0x1b2>
 800cbaa:	9b03      	ldr	r3, [sp, #12]
 800cbac:	3307      	adds	r3, #7
 800cbae:	f023 0307 	bic.w	r3, r3, #7
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	9303      	str	r3, [sp, #12]
 800cbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb8:	4433      	add	r3, r6
 800cbba:	9309      	str	r3, [sp, #36]	; 0x24
 800cbbc:	e767      	b.n	800ca8e <_svfiprintf_r+0x4e>
 800cbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	e7a5      	b.n	800cb14 <_svfiprintf_r+0xd4>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	3401      	adds	r4, #1
 800cbcc:	9305      	str	r3, [sp, #20]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f04f 0c0a 	mov.w	ip, #10
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbda:	3a30      	subs	r2, #48	; 0x30
 800cbdc:	2a09      	cmp	r2, #9
 800cbde:	d903      	bls.n	800cbe8 <_svfiprintf_r+0x1a8>
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0c5      	beq.n	800cb70 <_svfiprintf_r+0x130>
 800cbe4:	9105      	str	r1, [sp, #20]
 800cbe6:	e7c3      	b.n	800cb70 <_svfiprintf_r+0x130>
 800cbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbec:	4604      	mov	r4, r0
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e7f0      	b.n	800cbd4 <_svfiprintf_r+0x194>
 800cbf2:	ab03      	add	r3, sp, #12
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	462a      	mov	r2, r5
 800cbf8:	4b0f      	ldr	r3, [pc, #60]	; (800cc38 <_svfiprintf_r+0x1f8>)
 800cbfa:	a904      	add	r1, sp, #16
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	f3af 8000 	nop.w
 800cc02:	1c42      	adds	r2, r0, #1
 800cc04:	4606      	mov	r6, r0
 800cc06:	d1d6      	bne.n	800cbb6 <_svfiprintf_r+0x176>
 800cc08:	89ab      	ldrh	r3, [r5, #12]
 800cc0a:	065b      	lsls	r3, r3, #25
 800cc0c:	f53f af2c 	bmi.w	800ca68 <_svfiprintf_r+0x28>
 800cc10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc12:	b01d      	add	sp, #116	; 0x74
 800cc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc18:	ab03      	add	r3, sp, #12
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	462a      	mov	r2, r5
 800cc1e:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <_svfiprintf_r+0x1f8>)
 800cc20:	a904      	add	r1, sp, #16
 800cc22:	4638      	mov	r0, r7
 800cc24:	f000 f87a 	bl	800cd1c <_printf_i>
 800cc28:	e7eb      	b.n	800cc02 <_svfiprintf_r+0x1c2>
 800cc2a:	bf00      	nop
 800cc2c:	0803f840 	.word	0x0803f840
 800cc30:	0803f84a 	.word	0x0803f84a
 800cc34:	00000000 	.word	0x00000000
 800cc38:	0800c989 	.word	0x0800c989
 800cc3c:	0803f846 	.word	0x0803f846

0800cc40 <_printf_common>:
 800cc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc44:	4616      	mov	r6, r2
 800cc46:	4699      	mov	r9, r3
 800cc48:	688a      	ldr	r2, [r1, #8]
 800cc4a:	690b      	ldr	r3, [r1, #16]
 800cc4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc50:	4293      	cmp	r3, r2
 800cc52:	bfb8      	it	lt
 800cc54:	4613      	movlt	r3, r2
 800cc56:	6033      	str	r3, [r6, #0]
 800cc58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc5c:	4607      	mov	r7, r0
 800cc5e:	460c      	mov	r4, r1
 800cc60:	b10a      	cbz	r2, 800cc66 <_printf_common+0x26>
 800cc62:	3301      	adds	r3, #1
 800cc64:	6033      	str	r3, [r6, #0]
 800cc66:	6823      	ldr	r3, [r4, #0]
 800cc68:	0699      	lsls	r1, r3, #26
 800cc6a:	bf42      	ittt	mi
 800cc6c:	6833      	ldrmi	r3, [r6, #0]
 800cc6e:	3302      	addmi	r3, #2
 800cc70:	6033      	strmi	r3, [r6, #0]
 800cc72:	6825      	ldr	r5, [r4, #0]
 800cc74:	f015 0506 	ands.w	r5, r5, #6
 800cc78:	d106      	bne.n	800cc88 <_printf_common+0x48>
 800cc7a:	f104 0a19 	add.w	sl, r4, #25
 800cc7e:	68e3      	ldr	r3, [r4, #12]
 800cc80:	6832      	ldr	r2, [r6, #0]
 800cc82:	1a9b      	subs	r3, r3, r2
 800cc84:	42ab      	cmp	r3, r5
 800cc86:	dc26      	bgt.n	800ccd6 <_printf_common+0x96>
 800cc88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc8c:	1e13      	subs	r3, r2, #0
 800cc8e:	6822      	ldr	r2, [r4, #0]
 800cc90:	bf18      	it	ne
 800cc92:	2301      	movne	r3, #1
 800cc94:	0692      	lsls	r2, r2, #26
 800cc96:	d42b      	bmi.n	800ccf0 <_printf_common+0xb0>
 800cc98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc9c:	4649      	mov	r1, r9
 800cc9e:	4638      	mov	r0, r7
 800cca0:	47c0      	blx	r8
 800cca2:	3001      	adds	r0, #1
 800cca4:	d01e      	beq.n	800cce4 <_printf_common+0xa4>
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	68e5      	ldr	r5, [r4, #12]
 800ccaa:	6832      	ldr	r2, [r6, #0]
 800ccac:	f003 0306 	and.w	r3, r3, #6
 800ccb0:	2b04      	cmp	r3, #4
 800ccb2:	bf08      	it	eq
 800ccb4:	1aad      	subeq	r5, r5, r2
 800ccb6:	68a3      	ldr	r3, [r4, #8]
 800ccb8:	6922      	ldr	r2, [r4, #16]
 800ccba:	bf0c      	ite	eq
 800ccbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccc0:	2500      	movne	r5, #0
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	bfc4      	itt	gt
 800ccc6:	1a9b      	subgt	r3, r3, r2
 800ccc8:	18ed      	addgt	r5, r5, r3
 800ccca:	2600      	movs	r6, #0
 800cccc:	341a      	adds	r4, #26
 800ccce:	42b5      	cmp	r5, r6
 800ccd0:	d11a      	bne.n	800cd08 <_printf_common+0xc8>
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	e008      	b.n	800cce8 <_printf_common+0xa8>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	4652      	mov	r2, sl
 800ccda:	4649      	mov	r1, r9
 800ccdc:	4638      	mov	r0, r7
 800ccde:	47c0      	blx	r8
 800cce0:	3001      	adds	r0, #1
 800cce2:	d103      	bne.n	800ccec <_printf_common+0xac>
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295
 800cce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccec:	3501      	adds	r5, #1
 800ccee:	e7c6      	b.n	800cc7e <_printf_common+0x3e>
 800ccf0:	18e1      	adds	r1, r4, r3
 800ccf2:	1c5a      	adds	r2, r3, #1
 800ccf4:	2030      	movs	r0, #48	; 0x30
 800ccf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccfa:	4422      	add	r2, r4
 800ccfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd04:	3302      	adds	r3, #2
 800cd06:	e7c7      	b.n	800cc98 <_printf_common+0x58>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	4638      	mov	r0, r7
 800cd10:	47c0      	blx	r8
 800cd12:	3001      	adds	r0, #1
 800cd14:	d0e6      	beq.n	800cce4 <_printf_common+0xa4>
 800cd16:	3601      	adds	r6, #1
 800cd18:	e7d9      	b.n	800ccce <_printf_common+0x8e>
	...

0800cd1c <_printf_i>:
 800cd1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd20:	460c      	mov	r4, r1
 800cd22:	4691      	mov	r9, r2
 800cd24:	7e27      	ldrb	r7, [r4, #24]
 800cd26:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd28:	2f78      	cmp	r7, #120	; 0x78
 800cd2a:	4680      	mov	r8, r0
 800cd2c:	469a      	mov	sl, r3
 800cd2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd32:	d807      	bhi.n	800cd44 <_printf_i+0x28>
 800cd34:	2f62      	cmp	r7, #98	; 0x62
 800cd36:	d80a      	bhi.n	800cd4e <_printf_i+0x32>
 800cd38:	2f00      	cmp	r7, #0
 800cd3a:	f000 80d8 	beq.w	800ceee <_printf_i+0x1d2>
 800cd3e:	2f58      	cmp	r7, #88	; 0x58
 800cd40:	f000 80a3 	beq.w	800ce8a <_printf_i+0x16e>
 800cd44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd4c:	e03a      	b.n	800cdc4 <_printf_i+0xa8>
 800cd4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd52:	2b15      	cmp	r3, #21
 800cd54:	d8f6      	bhi.n	800cd44 <_printf_i+0x28>
 800cd56:	a001      	add	r0, pc, #4	; (adr r0, 800cd5c <_printf_i+0x40>)
 800cd58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cd5c:	0800cdb5 	.word	0x0800cdb5
 800cd60:	0800cdc9 	.word	0x0800cdc9
 800cd64:	0800cd45 	.word	0x0800cd45
 800cd68:	0800cd45 	.word	0x0800cd45
 800cd6c:	0800cd45 	.word	0x0800cd45
 800cd70:	0800cd45 	.word	0x0800cd45
 800cd74:	0800cdc9 	.word	0x0800cdc9
 800cd78:	0800cd45 	.word	0x0800cd45
 800cd7c:	0800cd45 	.word	0x0800cd45
 800cd80:	0800cd45 	.word	0x0800cd45
 800cd84:	0800cd45 	.word	0x0800cd45
 800cd88:	0800ced5 	.word	0x0800ced5
 800cd8c:	0800cdf9 	.word	0x0800cdf9
 800cd90:	0800ceb7 	.word	0x0800ceb7
 800cd94:	0800cd45 	.word	0x0800cd45
 800cd98:	0800cd45 	.word	0x0800cd45
 800cd9c:	0800cef7 	.word	0x0800cef7
 800cda0:	0800cd45 	.word	0x0800cd45
 800cda4:	0800cdf9 	.word	0x0800cdf9
 800cda8:	0800cd45 	.word	0x0800cd45
 800cdac:	0800cd45 	.word	0x0800cd45
 800cdb0:	0800cebf 	.word	0x0800cebf
 800cdb4:	680b      	ldr	r3, [r1, #0]
 800cdb6:	1d1a      	adds	r2, r3, #4
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	600a      	str	r2, [r1, #0]
 800cdbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cdc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e0a3      	b.n	800cf10 <_printf_i+0x1f4>
 800cdc8:	6825      	ldr	r5, [r4, #0]
 800cdca:	6808      	ldr	r0, [r1, #0]
 800cdcc:	062e      	lsls	r6, r5, #24
 800cdce:	f100 0304 	add.w	r3, r0, #4
 800cdd2:	d50a      	bpl.n	800cdea <_printf_i+0xce>
 800cdd4:	6805      	ldr	r5, [r0, #0]
 800cdd6:	600b      	str	r3, [r1, #0]
 800cdd8:	2d00      	cmp	r5, #0
 800cdda:	da03      	bge.n	800cde4 <_printf_i+0xc8>
 800cddc:	232d      	movs	r3, #45	; 0x2d
 800cdde:	426d      	negs	r5, r5
 800cde0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cde4:	485e      	ldr	r0, [pc, #376]	; (800cf60 <_printf_i+0x244>)
 800cde6:	230a      	movs	r3, #10
 800cde8:	e019      	b.n	800ce1e <_printf_i+0x102>
 800cdea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cdee:	6805      	ldr	r5, [r0, #0]
 800cdf0:	600b      	str	r3, [r1, #0]
 800cdf2:	bf18      	it	ne
 800cdf4:	b22d      	sxthne	r5, r5
 800cdf6:	e7ef      	b.n	800cdd8 <_printf_i+0xbc>
 800cdf8:	680b      	ldr	r3, [r1, #0]
 800cdfa:	6825      	ldr	r5, [r4, #0]
 800cdfc:	1d18      	adds	r0, r3, #4
 800cdfe:	6008      	str	r0, [r1, #0]
 800ce00:	0628      	lsls	r0, r5, #24
 800ce02:	d501      	bpl.n	800ce08 <_printf_i+0xec>
 800ce04:	681d      	ldr	r5, [r3, #0]
 800ce06:	e002      	b.n	800ce0e <_printf_i+0xf2>
 800ce08:	0669      	lsls	r1, r5, #25
 800ce0a:	d5fb      	bpl.n	800ce04 <_printf_i+0xe8>
 800ce0c:	881d      	ldrh	r5, [r3, #0]
 800ce0e:	4854      	ldr	r0, [pc, #336]	; (800cf60 <_printf_i+0x244>)
 800ce10:	2f6f      	cmp	r7, #111	; 0x6f
 800ce12:	bf0c      	ite	eq
 800ce14:	2308      	moveq	r3, #8
 800ce16:	230a      	movne	r3, #10
 800ce18:	2100      	movs	r1, #0
 800ce1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce1e:	6866      	ldr	r6, [r4, #4]
 800ce20:	60a6      	str	r6, [r4, #8]
 800ce22:	2e00      	cmp	r6, #0
 800ce24:	bfa2      	ittt	ge
 800ce26:	6821      	ldrge	r1, [r4, #0]
 800ce28:	f021 0104 	bicge.w	r1, r1, #4
 800ce2c:	6021      	strge	r1, [r4, #0]
 800ce2e:	b90d      	cbnz	r5, 800ce34 <_printf_i+0x118>
 800ce30:	2e00      	cmp	r6, #0
 800ce32:	d04d      	beq.n	800ced0 <_printf_i+0x1b4>
 800ce34:	4616      	mov	r6, r2
 800ce36:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce3a:	fb03 5711 	mls	r7, r3, r1, r5
 800ce3e:	5dc7      	ldrb	r7, [r0, r7]
 800ce40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce44:	462f      	mov	r7, r5
 800ce46:	42bb      	cmp	r3, r7
 800ce48:	460d      	mov	r5, r1
 800ce4a:	d9f4      	bls.n	800ce36 <_printf_i+0x11a>
 800ce4c:	2b08      	cmp	r3, #8
 800ce4e:	d10b      	bne.n	800ce68 <_printf_i+0x14c>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	07df      	lsls	r7, r3, #31
 800ce54:	d508      	bpl.n	800ce68 <_printf_i+0x14c>
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	6861      	ldr	r1, [r4, #4]
 800ce5a:	4299      	cmp	r1, r3
 800ce5c:	bfde      	ittt	le
 800ce5e:	2330      	movle	r3, #48	; 0x30
 800ce60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce64:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ce68:	1b92      	subs	r2, r2, r6
 800ce6a:	6122      	str	r2, [r4, #16]
 800ce6c:	f8cd a000 	str.w	sl, [sp]
 800ce70:	464b      	mov	r3, r9
 800ce72:	aa03      	add	r2, sp, #12
 800ce74:	4621      	mov	r1, r4
 800ce76:	4640      	mov	r0, r8
 800ce78:	f7ff fee2 	bl	800cc40 <_printf_common>
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	d14c      	bne.n	800cf1a <_printf_i+0x1fe>
 800ce80:	f04f 30ff 	mov.w	r0, #4294967295
 800ce84:	b004      	add	sp, #16
 800ce86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8a:	4835      	ldr	r0, [pc, #212]	; (800cf60 <_printf_i+0x244>)
 800ce8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce90:	6823      	ldr	r3, [r4, #0]
 800ce92:	680e      	ldr	r6, [r1, #0]
 800ce94:	061f      	lsls	r7, r3, #24
 800ce96:	f856 5b04 	ldr.w	r5, [r6], #4
 800ce9a:	600e      	str	r6, [r1, #0]
 800ce9c:	d514      	bpl.n	800cec8 <_printf_i+0x1ac>
 800ce9e:	07d9      	lsls	r1, r3, #31
 800cea0:	bf44      	itt	mi
 800cea2:	f043 0320 	orrmi.w	r3, r3, #32
 800cea6:	6023      	strmi	r3, [r4, #0]
 800cea8:	b91d      	cbnz	r5, 800ceb2 <_printf_i+0x196>
 800ceaa:	6823      	ldr	r3, [r4, #0]
 800ceac:	f023 0320 	bic.w	r3, r3, #32
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	2310      	movs	r3, #16
 800ceb4:	e7b0      	b.n	800ce18 <_printf_i+0xfc>
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	f043 0320 	orr.w	r3, r3, #32
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	2378      	movs	r3, #120	; 0x78
 800cec0:	4828      	ldr	r0, [pc, #160]	; (800cf64 <_printf_i+0x248>)
 800cec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cec6:	e7e3      	b.n	800ce90 <_printf_i+0x174>
 800cec8:	065e      	lsls	r6, r3, #25
 800ceca:	bf48      	it	mi
 800cecc:	b2ad      	uxthmi	r5, r5
 800cece:	e7e6      	b.n	800ce9e <_printf_i+0x182>
 800ced0:	4616      	mov	r6, r2
 800ced2:	e7bb      	b.n	800ce4c <_printf_i+0x130>
 800ced4:	680b      	ldr	r3, [r1, #0]
 800ced6:	6826      	ldr	r6, [r4, #0]
 800ced8:	6960      	ldr	r0, [r4, #20]
 800ceda:	1d1d      	adds	r5, r3, #4
 800cedc:	600d      	str	r5, [r1, #0]
 800cede:	0635      	lsls	r5, r6, #24
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	d501      	bpl.n	800cee8 <_printf_i+0x1cc>
 800cee4:	6018      	str	r0, [r3, #0]
 800cee6:	e002      	b.n	800ceee <_printf_i+0x1d2>
 800cee8:	0671      	lsls	r1, r6, #25
 800ceea:	d5fb      	bpl.n	800cee4 <_printf_i+0x1c8>
 800ceec:	8018      	strh	r0, [r3, #0]
 800ceee:	2300      	movs	r3, #0
 800cef0:	6123      	str	r3, [r4, #16]
 800cef2:	4616      	mov	r6, r2
 800cef4:	e7ba      	b.n	800ce6c <_printf_i+0x150>
 800cef6:	680b      	ldr	r3, [r1, #0]
 800cef8:	1d1a      	adds	r2, r3, #4
 800cefa:	600a      	str	r2, [r1, #0]
 800cefc:	681e      	ldr	r6, [r3, #0]
 800cefe:	6862      	ldr	r2, [r4, #4]
 800cf00:	2100      	movs	r1, #0
 800cf02:	4630      	mov	r0, r6
 800cf04:	f7f3 f97c 	bl	8000200 <memchr>
 800cf08:	b108      	cbz	r0, 800cf0e <_printf_i+0x1f2>
 800cf0a:	1b80      	subs	r0, r0, r6
 800cf0c:	6060      	str	r0, [r4, #4]
 800cf0e:	6863      	ldr	r3, [r4, #4]
 800cf10:	6123      	str	r3, [r4, #16]
 800cf12:	2300      	movs	r3, #0
 800cf14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf18:	e7a8      	b.n	800ce6c <_printf_i+0x150>
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	4632      	mov	r2, r6
 800cf1e:	4649      	mov	r1, r9
 800cf20:	4640      	mov	r0, r8
 800cf22:	47d0      	blx	sl
 800cf24:	3001      	adds	r0, #1
 800cf26:	d0ab      	beq.n	800ce80 <_printf_i+0x164>
 800cf28:	6823      	ldr	r3, [r4, #0]
 800cf2a:	079b      	lsls	r3, r3, #30
 800cf2c:	d413      	bmi.n	800cf56 <_printf_i+0x23a>
 800cf2e:	68e0      	ldr	r0, [r4, #12]
 800cf30:	9b03      	ldr	r3, [sp, #12]
 800cf32:	4298      	cmp	r0, r3
 800cf34:	bfb8      	it	lt
 800cf36:	4618      	movlt	r0, r3
 800cf38:	e7a4      	b.n	800ce84 <_printf_i+0x168>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	4649      	mov	r1, r9
 800cf40:	4640      	mov	r0, r8
 800cf42:	47d0      	blx	sl
 800cf44:	3001      	adds	r0, #1
 800cf46:	d09b      	beq.n	800ce80 <_printf_i+0x164>
 800cf48:	3501      	adds	r5, #1
 800cf4a:	68e3      	ldr	r3, [r4, #12]
 800cf4c:	9903      	ldr	r1, [sp, #12]
 800cf4e:	1a5b      	subs	r3, r3, r1
 800cf50:	42ab      	cmp	r3, r5
 800cf52:	dcf2      	bgt.n	800cf3a <_printf_i+0x21e>
 800cf54:	e7eb      	b.n	800cf2e <_printf_i+0x212>
 800cf56:	2500      	movs	r5, #0
 800cf58:	f104 0619 	add.w	r6, r4, #25
 800cf5c:	e7f5      	b.n	800cf4a <_printf_i+0x22e>
 800cf5e:	bf00      	nop
 800cf60:	0803f851 	.word	0x0803f851
 800cf64:	0803f862 	.word	0x0803f862

0800cf68 <memmove>:
 800cf68:	4288      	cmp	r0, r1
 800cf6a:	b510      	push	{r4, lr}
 800cf6c:	eb01 0402 	add.w	r4, r1, r2
 800cf70:	d902      	bls.n	800cf78 <memmove+0x10>
 800cf72:	4284      	cmp	r4, r0
 800cf74:	4623      	mov	r3, r4
 800cf76:	d807      	bhi.n	800cf88 <memmove+0x20>
 800cf78:	1e43      	subs	r3, r0, #1
 800cf7a:	42a1      	cmp	r1, r4
 800cf7c:	d008      	beq.n	800cf90 <memmove+0x28>
 800cf7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf86:	e7f8      	b.n	800cf7a <memmove+0x12>
 800cf88:	4402      	add	r2, r0
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	428a      	cmp	r2, r1
 800cf8e:	d100      	bne.n	800cf92 <memmove+0x2a>
 800cf90:	bd10      	pop	{r4, pc}
 800cf92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf9a:	e7f7      	b.n	800cf8c <memmove+0x24>

0800cf9c <_realloc_r>:
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	4614      	mov	r4, r2
 800cfa2:	460e      	mov	r6, r1
 800cfa4:	b921      	cbnz	r1, 800cfb0 <_realloc_r+0x14>
 800cfa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cfaa:	4611      	mov	r1, r2
 800cfac:	f7ff bbec 	b.w	800c788 <_malloc_r>
 800cfb0:	b922      	cbnz	r2, 800cfbc <_realloc_r+0x20>
 800cfb2:	f7ff fb99 	bl	800c6e8 <_free_r>
 800cfb6:	4625      	mov	r5, r4
 800cfb8:	4628      	mov	r0, r5
 800cfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfbc:	f000 f814 	bl	800cfe8 <_malloc_usable_size_r>
 800cfc0:	42a0      	cmp	r0, r4
 800cfc2:	d20f      	bcs.n	800cfe4 <_realloc_r+0x48>
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f7ff fbde 	bl	800c788 <_malloc_r>
 800cfcc:	4605      	mov	r5, r0
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	d0f2      	beq.n	800cfb8 <_realloc_r+0x1c>
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	f7ff fb71 	bl	800c6bc <memcpy>
 800cfda:	4631      	mov	r1, r6
 800cfdc:	4638      	mov	r0, r7
 800cfde:	f7ff fb83 	bl	800c6e8 <_free_r>
 800cfe2:	e7e9      	b.n	800cfb8 <_realloc_r+0x1c>
 800cfe4:	4635      	mov	r5, r6
 800cfe6:	e7e7      	b.n	800cfb8 <_realloc_r+0x1c>

0800cfe8 <_malloc_usable_size_r>:
 800cfe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfec:	1f18      	subs	r0, r3, #4
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	bfbc      	itt	lt
 800cff2:	580b      	ldrlt	r3, [r1, r0]
 800cff4:	18c0      	addlt	r0, r0, r3
 800cff6:	4770      	bx	lr

0800cff8 <fmod>:
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	ed2d 8b02 	vpush	{d8}
 800cffe:	ec57 6b10 	vmov	r6, r7, d0
 800d002:	ec55 4b11 	vmov	r4, r5, d1
 800d006:	f000 f867 	bl	800d0d8 <__ieee754_fmod>
 800d00a:	4b18      	ldr	r3, [pc, #96]	; (800d06c <fmod+0x74>)
 800d00c:	eeb0 8a40 	vmov.f32	s16, s0
 800d010:	eef0 8a60 	vmov.f32	s17, s1
 800d014:	f993 3000 	ldrsb.w	r3, [r3]
 800d018:	3301      	adds	r3, #1
 800d01a:	d020      	beq.n	800d05e <fmod+0x66>
 800d01c:	4622      	mov	r2, r4
 800d01e:	462b      	mov	r3, r5
 800d020:	4620      	mov	r0, r4
 800d022:	4629      	mov	r1, r5
 800d024:	f7f3 fd92 	bl	8000b4c <__aeabi_dcmpun>
 800d028:	b9c8      	cbnz	r0, 800d05e <fmod+0x66>
 800d02a:	4632      	mov	r2, r6
 800d02c:	463b      	mov	r3, r7
 800d02e:	4630      	mov	r0, r6
 800d030:	4639      	mov	r1, r7
 800d032:	f7f3 fd8b 	bl	8000b4c <__aeabi_dcmpun>
 800d036:	b990      	cbnz	r0, 800d05e <fmod+0x66>
 800d038:	2200      	movs	r2, #0
 800d03a:	2300      	movs	r3, #0
 800d03c:	4620      	mov	r0, r4
 800d03e:	4629      	mov	r1, r5
 800d040:	f7f3 fd52 	bl	8000ae8 <__aeabi_dcmpeq>
 800d044:	b158      	cbz	r0, 800d05e <fmod+0x66>
 800d046:	f7ff fb05 	bl	800c654 <__errno>
 800d04a:	2321      	movs	r3, #33	; 0x21
 800d04c:	6003      	str	r3, [r0, #0]
 800d04e:	2200      	movs	r2, #0
 800d050:	2300      	movs	r3, #0
 800d052:	4610      	mov	r0, r2
 800d054:	4619      	mov	r1, r3
 800d056:	f7f3 fc09 	bl	800086c <__aeabi_ddiv>
 800d05a:	ec41 0b18 	vmov	d8, r0, r1
 800d05e:	eeb0 0a48 	vmov.f32	s0, s16
 800d062:	eef0 0a68 	vmov.f32	s1, s17
 800d066:	ecbd 8b02 	vpop	{d8}
 800d06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d06c:	2000065c 	.word	0x2000065c

0800d070 <sqrt>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	ed2d 8b02 	vpush	{d8}
 800d076:	ec55 4b10 	vmov	r4, r5, d0
 800d07a:	f000 f93f 	bl	800d2fc <__ieee754_sqrt>
 800d07e:	4b15      	ldr	r3, [pc, #84]	; (800d0d4 <sqrt+0x64>)
 800d080:	eeb0 8a40 	vmov.f32	s16, s0
 800d084:	eef0 8a60 	vmov.f32	s17, s1
 800d088:	f993 3000 	ldrsb.w	r3, [r3]
 800d08c:	3301      	adds	r3, #1
 800d08e:	d019      	beq.n	800d0c4 <sqrt+0x54>
 800d090:	4622      	mov	r2, r4
 800d092:	462b      	mov	r3, r5
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 fd58 	bl	8000b4c <__aeabi_dcmpun>
 800d09c:	b990      	cbnz	r0, 800d0c4 <sqrt+0x54>
 800d09e:	2200      	movs	r2, #0
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	4629      	mov	r1, r5
 800d0a6:	f7f3 fd29 	bl	8000afc <__aeabi_dcmplt>
 800d0aa:	b158      	cbz	r0, 800d0c4 <sqrt+0x54>
 800d0ac:	f7ff fad2 	bl	800c654 <__errno>
 800d0b0:	2321      	movs	r3, #33	; 0x21
 800d0b2:	6003      	str	r3, [r0, #0]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	f7f3 fbd6 	bl	800086c <__aeabi_ddiv>
 800d0c0:	ec41 0b18 	vmov	d8, r0, r1
 800d0c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d0c8:	eef0 0a68 	vmov.f32	s1, s17
 800d0cc:	ecbd 8b02 	vpop	{d8}
 800d0d0:	bd38      	pop	{r3, r4, r5, pc}
 800d0d2:	bf00      	nop
 800d0d4:	2000065c 	.word	0x2000065c

0800d0d8 <__ieee754_fmod>:
 800d0d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	ec53 2b11 	vmov	r2, r3, d1
 800d0e0:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800d0e4:	ea5e 0402 	orrs.w	r4, lr, r2
 800d0e8:	ec51 0b10 	vmov	r0, r1, d0
 800d0ec:	ee11 7a10 	vmov	r7, s2
 800d0f0:	ee11 ca10 	vmov	ip, s2
 800d0f4:	461e      	mov	r6, r3
 800d0f6:	d00d      	beq.n	800d114 <__ieee754_fmod+0x3c>
 800d0f8:	4c7a      	ldr	r4, [pc, #488]	; (800d2e4 <__ieee754_fmod+0x20c>)
 800d0fa:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d0fe:	45a0      	cmp	r8, r4
 800d100:	4689      	mov	r9, r1
 800d102:	dc07      	bgt.n	800d114 <__ieee754_fmod+0x3c>
 800d104:	4254      	negs	r4, r2
 800d106:	4d78      	ldr	r5, [pc, #480]	; (800d2e8 <__ieee754_fmod+0x210>)
 800d108:	4314      	orrs	r4, r2
 800d10a:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800d10e:	42ac      	cmp	r4, r5
 800d110:	46ab      	mov	fp, r5
 800d112:	d909      	bls.n	800d128 <__ieee754_fmod+0x50>
 800d114:	f7f3 fa80 	bl	8000618 <__aeabi_dmul>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	f7f3 fba6 	bl	800086c <__aeabi_ddiv>
 800d120:	ec41 0b10 	vmov	d0, r0, r1
 800d124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d128:	45f0      	cmp	r8, lr
 800d12a:	ee10 aa10 	vmov	sl, s0
 800d12e:	ee10 4a10 	vmov	r4, s0
 800d132:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d136:	dc0a      	bgt.n	800d14e <__ieee754_fmod+0x76>
 800d138:	dbf2      	blt.n	800d120 <__ieee754_fmod+0x48>
 800d13a:	4290      	cmp	r0, r2
 800d13c:	d3f0      	bcc.n	800d120 <__ieee754_fmod+0x48>
 800d13e:	d106      	bne.n	800d14e <__ieee754_fmod+0x76>
 800d140:	4a6a      	ldr	r2, [pc, #424]	; (800d2ec <__ieee754_fmod+0x214>)
 800d142:	0fed      	lsrs	r5, r5, #31
 800d144:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d148:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d14c:	e7e8      	b.n	800d120 <__ieee754_fmod+0x48>
 800d14e:	ea19 0f0b 	tst.w	r9, fp
 800d152:	d14a      	bne.n	800d1ea <__ieee754_fmod+0x112>
 800d154:	f1b8 0f00 	cmp.w	r8, #0
 800d158:	d13f      	bne.n	800d1da <__ieee754_fmod+0x102>
 800d15a:	4965      	ldr	r1, [pc, #404]	; (800d2f0 <__ieee754_fmod+0x218>)
 800d15c:	4653      	mov	r3, sl
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dc38      	bgt.n	800d1d4 <__ieee754_fmod+0xfc>
 800d162:	4b61      	ldr	r3, [pc, #388]	; (800d2e8 <__ieee754_fmod+0x210>)
 800d164:	4033      	ands	r3, r6
 800d166:	2b00      	cmp	r3, #0
 800d168:	d14f      	bne.n	800d20a <__ieee754_fmod+0x132>
 800d16a:	f1be 0f00 	cmp.w	lr, #0
 800d16e:	d144      	bne.n	800d1fa <__ieee754_fmod+0x122>
 800d170:	4a5f      	ldr	r2, [pc, #380]	; (800d2f0 <__ieee754_fmod+0x218>)
 800d172:	463b      	mov	r3, r7
 800d174:	2b00      	cmp	r3, #0
 800d176:	dc3d      	bgt.n	800d1f4 <__ieee754_fmod+0x11c>
 800d178:	4b5e      	ldr	r3, [pc, #376]	; (800d2f4 <__ieee754_fmod+0x21c>)
 800d17a:	4299      	cmp	r1, r3
 800d17c:	db4a      	blt.n	800d214 <__ieee754_fmod+0x13c>
 800d17e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d186:	485b      	ldr	r0, [pc, #364]	; (800d2f4 <__ieee754_fmod+0x21c>)
 800d188:	4282      	cmp	r2, r0
 800d18a:	db57      	blt.n	800d23c <__ieee754_fmod+0x164>
 800d18c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d190:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d194:	1a89      	subs	r1, r1, r2
 800d196:	1b98      	subs	r0, r3, r6
 800d198:	eba4 070c 	sub.w	r7, r4, ip
 800d19c:	2900      	cmp	r1, #0
 800d19e:	d164      	bne.n	800d26a <__ieee754_fmod+0x192>
 800d1a0:	4564      	cmp	r4, ip
 800d1a2:	bf38      	it	cc
 800d1a4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	bfa4      	itt	ge
 800d1ac:	463c      	movge	r4, r7
 800d1ae:	4603      	movge	r3, r0
 800d1b0:	ea53 0104 	orrs.w	r1, r3, r4
 800d1b4:	d0c4      	beq.n	800d140 <__ieee754_fmod+0x68>
 800d1b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1ba:	db6b      	blt.n	800d294 <__ieee754_fmod+0x1bc>
 800d1bc:	494d      	ldr	r1, [pc, #308]	; (800d2f4 <__ieee754_fmod+0x21c>)
 800d1be:	428a      	cmp	r2, r1
 800d1c0:	db6e      	blt.n	800d2a0 <__ieee754_fmod+0x1c8>
 800d1c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d1c6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d1ca:	431d      	orrs	r5, r3
 800d1cc:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	e7a5      	b.n	800d120 <__ieee754_fmod+0x48>
 800d1d4:	3901      	subs	r1, #1
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	e7c1      	b.n	800d15e <__ieee754_fmod+0x86>
 800d1da:	4946      	ldr	r1, [pc, #280]	; (800d2f4 <__ieee754_fmod+0x21c>)
 800d1dc:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	ddbe      	ble.n	800d162 <__ieee754_fmod+0x8a>
 800d1e4:	3901      	subs	r1, #1
 800d1e6:	005b      	lsls	r3, r3, #1
 800d1e8:	e7fa      	b.n	800d1e0 <__ieee754_fmod+0x108>
 800d1ea:	ea4f 5128 	mov.w	r1, r8, asr #20
 800d1ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d1f2:	e7b6      	b.n	800d162 <__ieee754_fmod+0x8a>
 800d1f4:	3a01      	subs	r2, #1
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	e7bc      	b.n	800d174 <__ieee754_fmod+0x9c>
 800d1fa:	4a3e      	ldr	r2, [pc, #248]	; (800d2f4 <__ieee754_fmod+0x21c>)
 800d1fc:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800d200:	2b00      	cmp	r3, #0
 800d202:	ddb9      	ble.n	800d178 <__ieee754_fmod+0xa0>
 800d204:	3a01      	subs	r2, #1
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	e7fa      	b.n	800d200 <__ieee754_fmod+0x128>
 800d20a:	ea4f 522e 	mov.w	r2, lr, asr #20
 800d20e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d212:	e7b1      	b.n	800d178 <__ieee754_fmod+0xa0>
 800d214:	1a5c      	subs	r4, r3, r1
 800d216:	2c1f      	cmp	r4, #31
 800d218:	dc0a      	bgt.n	800d230 <__ieee754_fmod+0x158>
 800d21a:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d21e:	fa08 f804 	lsl.w	r8, r8, r4
 800d222:	fa2a f303 	lsr.w	r3, sl, r3
 800d226:	ea43 0308 	orr.w	r3, r3, r8
 800d22a:	fa0a f404 	lsl.w	r4, sl, r4
 800d22e:	e7aa      	b.n	800d186 <__ieee754_fmod+0xae>
 800d230:	4b31      	ldr	r3, [pc, #196]	; (800d2f8 <__ieee754_fmod+0x220>)
 800d232:	1a5b      	subs	r3, r3, r1
 800d234:	fa0a f303 	lsl.w	r3, sl, r3
 800d238:	2400      	movs	r4, #0
 800d23a:	e7a4      	b.n	800d186 <__ieee754_fmod+0xae>
 800d23c:	eba0 0c02 	sub.w	ip, r0, r2
 800d240:	f1bc 0f1f 	cmp.w	ip, #31
 800d244:	dc0a      	bgt.n	800d25c <__ieee754_fmod+0x184>
 800d246:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d24a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d24e:	fa27 f606 	lsr.w	r6, r7, r6
 800d252:	ea46 060e 	orr.w	r6, r6, lr
 800d256:	fa07 fc0c 	lsl.w	ip, r7, ip
 800d25a:	e79b      	b.n	800d194 <__ieee754_fmod+0xbc>
 800d25c:	4e26      	ldr	r6, [pc, #152]	; (800d2f8 <__ieee754_fmod+0x220>)
 800d25e:	1ab6      	subs	r6, r6, r2
 800d260:	fa07 f606 	lsl.w	r6, r7, r6
 800d264:	f04f 0c00 	mov.w	ip, #0
 800d268:	e794      	b.n	800d194 <__ieee754_fmod+0xbc>
 800d26a:	4564      	cmp	r4, ip
 800d26c:	bf38      	it	cc
 800d26e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800d272:	2800      	cmp	r0, #0
 800d274:	da05      	bge.n	800d282 <__ieee754_fmod+0x1aa>
 800d276:	0fe0      	lsrs	r0, r4, #31
 800d278:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d27c:	0064      	lsls	r4, r4, #1
 800d27e:	3901      	subs	r1, #1
 800d280:	e789      	b.n	800d196 <__ieee754_fmod+0xbe>
 800d282:	ea50 0307 	orrs.w	r3, r0, r7
 800d286:	f43f af5b 	beq.w	800d140 <__ieee754_fmod+0x68>
 800d28a:	0ffb      	lsrs	r3, r7, #31
 800d28c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d290:	007c      	lsls	r4, r7, #1
 800d292:	e7f4      	b.n	800d27e <__ieee754_fmod+0x1a6>
 800d294:	0fe1      	lsrs	r1, r4, #31
 800d296:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d29a:	0064      	lsls	r4, r4, #1
 800d29c:	3a01      	subs	r2, #1
 800d29e:	e78a      	b.n	800d1b6 <__ieee754_fmod+0xde>
 800d2a0:	1a89      	subs	r1, r1, r2
 800d2a2:	2914      	cmp	r1, #20
 800d2a4:	dc0a      	bgt.n	800d2bc <__ieee754_fmod+0x1e4>
 800d2a6:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d2aa:	fa03 f202 	lsl.w	r2, r3, r2
 800d2ae:	40cc      	lsrs	r4, r1
 800d2b0:	4322      	orrs	r2, r4
 800d2b2:	410b      	asrs	r3, r1
 800d2b4:	ea43 0105 	orr.w	r1, r3, r5
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	e731      	b.n	800d120 <__ieee754_fmod+0x48>
 800d2bc:	291f      	cmp	r1, #31
 800d2be:	dc07      	bgt.n	800d2d0 <__ieee754_fmod+0x1f8>
 800d2c0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d2c4:	40cc      	lsrs	r4, r1
 800d2c6:	fa03 f202 	lsl.w	r2, r3, r2
 800d2ca:	4322      	orrs	r2, r4
 800d2cc:	462b      	mov	r3, r5
 800d2ce:	e7f1      	b.n	800d2b4 <__ieee754_fmod+0x1dc>
 800d2d0:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d2d4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d2d8:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d2dc:	32e2      	adds	r2, #226	; 0xe2
 800d2de:	fa43 f202 	asr.w	r2, r3, r2
 800d2e2:	e7f3      	b.n	800d2cc <__ieee754_fmod+0x1f4>
 800d2e4:	7fefffff 	.word	0x7fefffff
 800d2e8:	7ff00000 	.word	0x7ff00000
 800d2ec:	0803f878 	.word	0x0803f878
 800d2f0:	fffffbed 	.word	0xfffffbed
 800d2f4:	fffffc02 	.word	0xfffffc02
 800d2f8:	fffffbe2 	.word	0xfffffbe2

0800d2fc <__ieee754_sqrt>:
 800d2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d300:	ec55 4b10 	vmov	r4, r5, d0
 800d304:	4e56      	ldr	r6, [pc, #344]	; (800d460 <__ieee754_sqrt+0x164>)
 800d306:	43ae      	bics	r6, r5
 800d308:	ee10 0a10 	vmov	r0, s0
 800d30c:	ee10 3a10 	vmov	r3, s0
 800d310:	4629      	mov	r1, r5
 800d312:	462a      	mov	r2, r5
 800d314:	d110      	bne.n	800d338 <__ieee754_sqrt+0x3c>
 800d316:	ee10 2a10 	vmov	r2, s0
 800d31a:	462b      	mov	r3, r5
 800d31c:	f7f3 f97c 	bl	8000618 <__aeabi_dmul>
 800d320:	4602      	mov	r2, r0
 800d322:	460b      	mov	r3, r1
 800d324:	4620      	mov	r0, r4
 800d326:	4629      	mov	r1, r5
 800d328:	f7f2 ffc0 	bl	80002ac <__adddf3>
 800d32c:	4604      	mov	r4, r0
 800d32e:	460d      	mov	r5, r1
 800d330:	ec45 4b10 	vmov	d0, r4, r5
 800d334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d338:	2d00      	cmp	r5, #0
 800d33a:	dc10      	bgt.n	800d35e <__ieee754_sqrt+0x62>
 800d33c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d340:	4330      	orrs	r0, r6
 800d342:	d0f5      	beq.n	800d330 <__ieee754_sqrt+0x34>
 800d344:	b15d      	cbz	r5, 800d35e <__ieee754_sqrt+0x62>
 800d346:	ee10 2a10 	vmov	r2, s0
 800d34a:	462b      	mov	r3, r5
 800d34c:	ee10 0a10 	vmov	r0, s0
 800d350:	f7f2 ffaa 	bl	80002a8 <__aeabi_dsub>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	f7f3 fa88 	bl	800086c <__aeabi_ddiv>
 800d35c:	e7e6      	b.n	800d32c <__ieee754_sqrt+0x30>
 800d35e:	1509      	asrs	r1, r1, #20
 800d360:	d076      	beq.n	800d450 <__ieee754_sqrt+0x154>
 800d362:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d366:	07ce      	lsls	r6, r1, #31
 800d368:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d36c:	bf5e      	ittt	pl
 800d36e:	0fda      	lsrpl	r2, r3, #31
 800d370:	005b      	lslpl	r3, r3, #1
 800d372:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d376:	0fda      	lsrs	r2, r3, #31
 800d378:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d37c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d380:	2000      	movs	r0, #0
 800d382:	106d      	asrs	r5, r5, #1
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	f04f 0e16 	mov.w	lr, #22
 800d38a:	4684      	mov	ip, r0
 800d38c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d390:	eb0c 0401 	add.w	r4, ip, r1
 800d394:	4294      	cmp	r4, r2
 800d396:	bfde      	ittt	le
 800d398:	1b12      	suble	r2, r2, r4
 800d39a:	eb04 0c01 	addle.w	ip, r4, r1
 800d39e:	1840      	addle	r0, r0, r1
 800d3a0:	0052      	lsls	r2, r2, #1
 800d3a2:	f1be 0e01 	subs.w	lr, lr, #1
 800d3a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d3aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d3ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3b2:	d1ed      	bne.n	800d390 <__ieee754_sqrt+0x94>
 800d3b4:	4671      	mov	r1, lr
 800d3b6:	2720      	movs	r7, #32
 800d3b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d3bc:	4562      	cmp	r2, ip
 800d3be:	eb04 060e 	add.w	r6, r4, lr
 800d3c2:	dc02      	bgt.n	800d3ca <__ieee754_sqrt+0xce>
 800d3c4:	d113      	bne.n	800d3ee <__ieee754_sqrt+0xf2>
 800d3c6:	429e      	cmp	r6, r3
 800d3c8:	d811      	bhi.n	800d3ee <__ieee754_sqrt+0xf2>
 800d3ca:	2e00      	cmp	r6, #0
 800d3cc:	eb06 0e04 	add.w	lr, r6, r4
 800d3d0:	da43      	bge.n	800d45a <__ieee754_sqrt+0x15e>
 800d3d2:	f1be 0f00 	cmp.w	lr, #0
 800d3d6:	db40      	blt.n	800d45a <__ieee754_sqrt+0x15e>
 800d3d8:	f10c 0801 	add.w	r8, ip, #1
 800d3dc:	eba2 020c 	sub.w	r2, r2, ip
 800d3e0:	429e      	cmp	r6, r3
 800d3e2:	bf88      	it	hi
 800d3e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d3e8:	1b9b      	subs	r3, r3, r6
 800d3ea:	4421      	add	r1, r4
 800d3ec:	46c4      	mov	ip, r8
 800d3ee:	0052      	lsls	r2, r2, #1
 800d3f0:	3f01      	subs	r7, #1
 800d3f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d3f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d3fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3fe:	d1dd      	bne.n	800d3bc <__ieee754_sqrt+0xc0>
 800d400:	4313      	orrs	r3, r2
 800d402:	d006      	beq.n	800d412 <__ieee754_sqrt+0x116>
 800d404:	1c4c      	adds	r4, r1, #1
 800d406:	bf13      	iteet	ne
 800d408:	3101      	addne	r1, #1
 800d40a:	3001      	addeq	r0, #1
 800d40c:	4639      	moveq	r1, r7
 800d40e:	f021 0101 	bicne.w	r1, r1, #1
 800d412:	1043      	asrs	r3, r0, #1
 800d414:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d418:	0849      	lsrs	r1, r1, #1
 800d41a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d41e:	07c2      	lsls	r2, r0, #31
 800d420:	bf48      	it	mi
 800d422:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d426:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d42a:	460c      	mov	r4, r1
 800d42c:	463d      	mov	r5, r7
 800d42e:	e77f      	b.n	800d330 <__ieee754_sqrt+0x34>
 800d430:	0ada      	lsrs	r2, r3, #11
 800d432:	3815      	subs	r0, #21
 800d434:	055b      	lsls	r3, r3, #21
 800d436:	2a00      	cmp	r2, #0
 800d438:	d0fa      	beq.n	800d430 <__ieee754_sqrt+0x134>
 800d43a:	02d7      	lsls	r7, r2, #11
 800d43c:	d50a      	bpl.n	800d454 <__ieee754_sqrt+0x158>
 800d43e:	f1c1 0420 	rsb	r4, r1, #32
 800d442:	fa23 f404 	lsr.w	r4, r3, r4
 800d446:	1e4d      	subs	r5, r1, #1
 800d448:	408b      	lsls	r3, r1
 800d44a:	4322      	orrs	r2, r4
 800d44c:	1b41      	subs	r1, r0, r5
 800d44e:	e788      	b.n	800d362 <__ieee754_sqrt+0x66>
 800d450:	4608      	mov	r0, r1
 800d452:	e7f0      	b.n	800d436 <__ieee754_sqrt+0x13a>
 800d454:	0052      	lsls	r2, r2, #1
 800d456:	3101      	adds	r1, #1
 800d458:	e7ef      	b.n	800d43a <__ieee754_sqrt+0x13e>
 800d45a:	46e0      	mov	r8, ip
 800d45c:	e7be      	b.n	800d3dc <__ieee754_sqrt+0xe0>
 800d45e:	bf00      	nop
 800d460:	7ff00000 	.word	0x7ff00000

0800d464 <_init>:
 800d464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d466:	bf00      	nop
 800d468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d46a:	bc08      	pop	{r3}
 800d46c:	469e      	mov	lr, r3
 800d46e:	4770      	bx	lr

0800d470 <_fini>:
 800d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d472:	bf00      	nop
 800d474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d476:	bc08      	pop	{r3}
 800d478:	469e      	mov	lr, r3
 800d47a:	4770      	bx	lr
