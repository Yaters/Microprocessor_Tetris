
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00032570  0800e390  0800e390  0001e390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040900  08040900  000606ac  2**0
                  CONTENTS
  4 .ARM          00000008  08040900  08040900  00050900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040908  08040908  000606ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040908  08040908  00050908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804090c  0804090c  0005090c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006ac  20000000  08040910  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a420  200006ac  08040fbc  000606ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001aacc  08040fbc  0006aacc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000606ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c431  00000000  00000000  000606dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c1a  00000000  00000000  0008cb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00091728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a60  00000000  00000000  00093330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f50c  00000000  00000000  00094d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f960  00000000  00000000  000c429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c40f  00000000  00000000  000e3bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0020000b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083c8  00000000  00000000  002000d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0020849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200006ac 	.word	0x200006ac
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e378 	.word	0x0800e378

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200006b0 	.word	0x200006b0
 80001fc:	0800e378 	.word	0x0800e378

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f901 	bl	8001172 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f70:	200f      	movs	r0, #15
 8000f72:	f00a fa89 	bl	800b488 <HAL_InitTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e001      	b.n	8000f86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f82:	f00a f89f 	bl	800b0c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	2000206c 	.word	0x2000206c

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000206c 	.word	0x2000206c

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000004 	.word	0x20000004

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff4c 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119a:	f7ff ff61 	bl	8001060 <__NVIC_GetPriorityGrouping>
 800119e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff ffb1 	bl	800110c <NVIC_EncodePriority>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff80 	bl	80010b8 <__NVIC_SetPriority>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff54 	bl	800107c <__NVIC_EnableIRQ>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e014      	b.n	8001218 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f009 ff88 	bl	800b114 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	795b      	ldrb	r3, [r3, #5]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_DAC_Start_DMA+0x1e>
 800123a:	2302      	movs	r3, #2
 800123c:	e0ab      	b.n	8001396 <HAL_DAC_Start_DMA+0x176>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2202      	movs	r2, #2
 8001248:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d12f      	bne.n	80012b0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_DAC_Start_DMA+0x180>)
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a51      	ldr	r2, [pc, #324]	; (80013a4 <HAL_DAC_Start_DMA+0x184>)
 800125e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	4a50      	ldr	r2, [pc, #320]	; (80013a8 <HAL_DAC_Start_DMA+0x188>)
 8001266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001276:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2b08      	cmp	r3, #8
 800127c:	d013      	beq.n	80012a6 <HAL_DAC_Start_DMA+0x86>
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	2b08      	cmp	r3, #8
 8001282:	d845      	bhi.n	8001310 <HAL_DAC_Start_DMA+0xf0>
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_DAC_Start_DMA+0x72>
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	2b04      	cmp	r3, #4
 800128e:	d005      	beq.n	800129c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001290:	e03e      	b.n	8001310 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3308      	adds	r3, #8
 8001298:	613b      	str	r3, [r7, #16]
        break;
 800129a:	e03c      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	330c      	adds	r3, #12
 80012a2:	613b      	str	r3, [r7, #16]
        break;
 80012a4:	e037      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3310      	adds	r3, #16
 80012ac:	613b      	str	r3, [r7, #16]
        break;
 80012ae:	e032      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4a3d      	ldr	r2, [pc, #244]	; (80013ac <HAL_DAC_Start_DMA+0x18c>)
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <HAL_DAC_Start_DMA+0x190>)
 80012be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	4a3b      	ldr	r2, [pc, #236]	; (80013b4 <HAL_DAC_Start_DMA+0x194>)
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d013      	beq.n	8001306 <HAL_DAC_Start_DMA+0xe6>
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d817      	bhi.n	8001314 <HAL_DAC_Start_DMA+0xf4>
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_DAC_Start_DMA+0xd2>
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d005      	beq.n	80012fc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80012f0:	e010      	b.n	8001314 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3314      	adds	r3, #20
 80012f8:	613b      	str	r3, [r7, #16]
        break;
 80012fa:	e00c      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3318      	adds	r3, #24
 8001302:	613b      	str	r3, [r7, #16]
        break;
 8001304:	e007      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	331c      	adds	r3, #28
 800130c:	613b      	str	r3, [r7, #16]
        break;
 800130e:	e002      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001310:	bf00      	nop
 8001312:	e000      	b.n	8001316 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001314:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d111      	bne.n	8001340 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800132a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6898      	ldr	r0, [r3, #8]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	f000 fb83 	bl	8001a40 <HAL_DMA_Start_IT>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]
 800133e:	e010      	b.n	8001362 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800134e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68d8      	ldr	r0, [r3, #12]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	f000 fb71 	bl	8001a40 <HAL_DMA_Start_IT>
 800135e:	4603      	mov	r3, r0
 8001360:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10c      	bne.n	8001388 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2201      	movs	r2, #1
 800137c:	409a      	lsls	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e005      	b.n	8001394 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f043 0204 	orr.w	r2, r3, #4
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001394:	7dfb      	ldrb	r3, [r7, #23]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	080017c9 	.word	0x080017c9
 80013a4:	080017eb 	.word	0x080017eb
 80013a8:	08001807 	.word	0x08001807
 80013ac:	08001885 	.word	0x08001885
 80013b0:	080018a7 	.word	0x080018a7
 80013b4:	080018c3 	.word	0x080018c3

080013b8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6819      	ldr	r1, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6819      	ldr	r1, [r3, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2201      	movs	r2, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	400a      	ands	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fb95 	bl	8001b36 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e00c      	b.n	8001438 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fb87 	bl	8001b36 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001436:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001458:	d120      	bne.n	800149c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001468:	d118      	bne.n	800149c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2204      	movs	r2, #4
 800146e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001484:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001494:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f84b 	bl	8001532 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014aa:	d120      	bne.n	80014ee <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014ba:	d118      	bne.n	80014ee <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2204      	movs	r2, #4
 80014c0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f043 0202 	orr.w	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80014e6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f9c1 	bl	8001870 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	795b      	ldrb	r3, [r3, #5]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_DAC_ConfigChannel+0x1c>
 8001560:	2302      	movs	r3, #2
 8001562:	e12a      	b.n	80017ba <HAL_DAC_ConfigChannel+0x272>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2202      	movs	r2, #2
 800156e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d174      	bne.n	8001662 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001578:	f7ff fd1e 	bl	8000fb8 <HAL_GetTick>
 800157c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d134      	bne.n	80015ee <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001584:	e011      	b.n	80015aa <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001586:	f7ff fd17 	bl	8000fb8 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d90a      	bls.n	80015aa <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f043 0208 	orr.w	r2, r3, #8
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2203      	movs	r2, #3
 80015a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e107      	b.n	80017ba <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e6      	bne.n	8001586 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff fd09 	bl	8000fd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	69d2      	ldr	r2, [r2, #28]
 80015c6:	641a      	str	r2, [r3, #64]	; 0x40
 80015c8:	e01e      	b.n	8001608 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015ca:	f7ff fcf5 	bl	8000fb8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d90a      	bls.n	80015ee <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f043 0208 	orr.w	r2, r3, #8
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2203      	movs	r2, #3
 80015e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0e5      	b.n	80017ba <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	dbe8      	blt.n	80015ca <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fce9 	bl	8000fd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	69d2      	ldr	r2, [r2, #28]
 8001606:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	ea02 0103 	and.w	r1, r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	6a1a      	ldr	r2, [r3, #32]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	409a      	lsls	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	21ff      	movs	r1, #255	; 0xff
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	ea02 0103 	and.w	r1, r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d11d      	bne.n	80016a6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001670:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	4013      	ands	r3, r2
 8001684:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	4313      	orrs	r3, r2
 800169c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ac:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2207      	movs	r2, #7
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	4013      	ands	r3, r2
 80016c0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	400a      	ands	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	4013      	ands	r3, r2
 8001728:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	4313      	orrs	r3, r2
 8001740:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800174a:	d104      	bne.n	8001756 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	e018      	b.n	8001788 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d104      	bne.n	8001768 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	e00f      	b.n	8001788 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001768:	f001 fc3c 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 800176c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_DAC_ConfigChannel+0x27c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d904      	bls.n	8001780 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e003      	b.n	8001788 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001786:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	22c0      	movs	r2, #192	; 0xc0
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	04c4b400 	.word	0x04c4b400

080017c8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff fe8d 	bl	80014f6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	711a      	strb	r2, [r3, #4]
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff fe86 	bl	800150a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff fe7c 	bl	800151e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	711a      	strb	r2, [r3, #4]
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff ffce 	bl	8001834 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	711a      	strb	r2, [r3, #4]
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f7ff ffc7 	bl	8001848 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f043 0204 	orr.w	r2, r3, #4
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7ff ffbd 	bl	800185c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	711a      	strb	r2, [r3, #4]
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e08d      	b.n	8001a1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_DMA_Init+0x138>)
 800190a:	429a      	cmp	r2, r3
 800190c:	d80f      	bhi.n	800192e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <HAL_DMA_Init+0x13c>)
 8001916:	4413      	add	r3, r2
 8001918:	4a45      	ldr	r2, [pc, #276]	; (8001a30 <HAL_DMA_Init+0x140>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	009a      	lsls	r2, r3, #2
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a42      	ldr	r2, [pc, #264]	; (8001a34 <HAL_DMA_Init+0x144>)
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
 800192c:	e00e      	b.n	800194c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <HAL_DMA_Init+0x148>)
 8001936:	4413      	add	r3, r2
 8001938:	4a3d      	ldr	r2, [pc, #244]	; (8001a30 <HAL_DMA_Init+0x140>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	009a      	lsls	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a3c      	ldr	r2, [pc, #240]	; (8001a3c <HAL_DMA_Init+0x14c>)
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001966:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fa72 	bl	8001e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ac:	d102      	bne.n	80019b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019c8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d010      	beq.n	80019f4 <HAL_DMA_Init+0x104>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d80c      	bhi.n	80019f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fa92 	bl	8001f04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e008      	b.n	8001a06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40020407 	.word	0x40020407
 8001a2c:	bffdfff8 	.word	0xbffdfff8
 8001a30:	cccccccd 	.word	0xcccccccd
 8001a34:	40020000 	.word	0x40020000
 8001a38:	bffdfbf8 	.word	0xbffdfbf8
 8001a3c:	40020400 	.word	0x40020400

08001a40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_DMA_Start_IT+0x20>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e066      	b.n	8001b2e <HAL_DMA_Start_IT+0xee>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d155      	bne.n	8001b20 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f9b6 	bl	8001e0a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 020e 	orr.w	r2, r2, #14
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e00f      	b.n	8001ad8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0204 	bic.w	r2, r2, #4
 8001ac6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 020a 	orr.w	r2, r2, #10
 8001ad6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e005      	b.n	8001b2c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d008      	beq.n	8001b60 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2204      	movs	r2, #4
 8001b52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e040      	b.n	8001be2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020e 	bic.w	r2, r2, #14
 8001b6e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b7e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f003 021c 	and.w	r2, r3, #28
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d005      	beq.n	8001c12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e047      	b.n	8001ca2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 020e 	bic.w	r2, r2, #14
 8001c20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f003 021c 	and.w	r2, r3, #28
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c5e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00c      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c80:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
    }
  }
  return status;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	f003 031c 	and.w	r3, r3, #28
 8001ccc:	2204      	movs	r2, #4
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d026      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x7a>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d021      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d107      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0204 	bic.w	r2, r2, #4
 8001cfe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	f003 021c 	and.w	r2, r3, #28
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d071      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001d24:	e06c      	b.n	8001e00 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f003 031c 	and.w	r3, r3, #28
 8001d2e:	2202      	movs	r2, #2
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02e      	beq.n	8001d98 <HAL_DMA_IRQHandler+0xec>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d029      	beq.n	8001d98 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10b      	bne.n	8001d6a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 020a 	bic.w	r2, r2, #10
 8001d60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f003 021c 	and.w	r2, r3, #28
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2102      	movs	r1, #2
 8001d78:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d038      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d96:	e033      	b.n	8001e00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f003 031c 	and.w	r3, r3, #28
 8001da0:	2208      	movs	r2, #8
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02a      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x156>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d025      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 020e 	bic.w	r2, r2, #14
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f003 021c 	and.w	r2, r3, #28
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
}
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e20:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e32:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	f003 021c 	and.w	r2, r3, #28
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d108      	bne.n	8001e6a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e68:	e007      	b.n	8001e7a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	60da      	str	r2, [r3, #12]
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d80a      	bhi.n	8001eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ea8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6493      	str	r3, [r2, #72]	; 0x48
 8001eb0:	e007      	b.n	8001ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	009a      	lsls	r2, r3, #2
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ebc:	4413      	add	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40020407 	.word	0x40020407
 8001ef8:	4002081c 	.word	0x4002081c
 8001efc:	cccccccd 	.word	0xcccccccd
 8001f00:	40020880 	.word	0x40020880

08001f04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f26:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2201      	movs	r2, #1
 8001f32:	409a      	lsls	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	1000823f 	.word	0x1000823f
 8001f48:	40020940 	.word	0x40020940

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	e166      	b.n	800222a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2101      	movs	r1, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8158 	beq.w	8002224 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d005      	beq.n	8001f8c <HAL_GPIO_Init+0x40>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d130      	bne.n	8001fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f003 0201 	and.w	r2, r3, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d017      	beq.n	800202a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d123      	bne.n	800207e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0203 	and.w	r2, r3, #3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80b2 	beq.w	8002224 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c0:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_GPIO_Init+0x2fc>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	4a60      	ldr	r2, [pc, #384]	; (8002248 <HAL_GPIO_Init+0x2fc>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6613      	str	r3, [r2, #96]	; 0x60
 80020cc:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_GPIO_Init+0x2fc>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d8:	4a5c      	ldr	r2, [pc, #368]	; (800224c <HAL_GPIO_Init+0x300>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002102:	d02b      	beq.n	800215c <HAL_GPIO_Init+0x210>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_GPIO_Init+0x304>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d025      	beq.n	8002158 <HAL_GPIO_Init+0x20c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a51      	ldr	r2, [pc, #324]	; (8002254 <HAL_GPIO_Init+0x308>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d01f      	beq.n	8002154 <HAL_GPIO_Init+0x208>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a50      	ldr	r2, [pc, #320]	; (8002258 <HAL_GPIO_Init+0x30c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d019      	beq.n	8002150 <HAL_GPIO_Init+0x204>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a4f      	ldr	r2, [pc, #316]	; (800225c <HAL_GPIO_Init+0x310>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <HAL_GPIO_Init+0x200>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a4e      	ldr	r2, [pc, #312]	; (8002260 <HAL_GPIO_Init+0x314>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00d      	beq.n	8002148 <HAL_GPIO_Init+0x1fc>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a4d      	ldr	r2, [pc, #308]	; (8002264 <HAL_GPIO_Init+0x318>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <HAL_GPIO_Init+0x1f8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a4c      	ldr	r2, [pc, #304]	; (8002268 <HAL_GPIO_Init+0x31c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_GPIO_Init+0x1f4>
 800213c:	2307      	movs	r3, #7
 800213e:	e00e      	b.n	800215e <HAL_GPIO_Init+0x212>
 8002140:	2308      	movs	r3, #8
 8002142:	e00c      	b.n	800215e <HAL_GPIO_Init+0x212>
 8002144:	2306      	movs	r3, #6
 8002146:	e00a      	b.n	800215e <HAL_GPIO_Init+0x212>
 8002148:	2305      	movs	r3, #5
 800214a:	e008      	b.n	800215e <HAL_GPIO_Init+0x212>
 800214c:	2304      	movs	r3, #4
 800214e:	e006      	b.n	800215e <HAL_GPIO_Init+0x212>
 8002150:	2303      	movs	r3, #3
 8002152:	e004      	b.n	800215e <HAL_GPIO_Init+0x212>
 8002154:	2302      	movs	r3, #2
 8002156:	e002      	b.n	800215e <HAL_GPIO_Init+0x212>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_Init+0x212>
 800215c:	2300      	movs	r3, #0
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	4093      	lsls	r3, r2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216e:	4937      	ldr	r1, [pc, #220]	; (800224c <HAL_GPIO_Init+0x300>)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800217c:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_GPIO_Init+0x320>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a0:	4a32      	ldr	r2, [pc, #200]	; (800226c <HAL_GPIO_Init+0x320>)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021a6:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_GPIO_Init+0x320>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ca:	4a28      	ldr	r2, [pc, #160]	; (800226c <HAL_GPIO_Init+0x320>)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_GPIO_Init+0x320>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_GPIO_Init+0x320>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_GPIO_Init+0x320>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_GPIO_Init+0x320>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f47f ae91 	bne.w	8001f5c <HAL_GPIO_Init+0x10>
  }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40021000 	.word	0x40021000
 800224c:	40010000 	.word	0x40010000
 8002250:	48000400 	.word	0x48000400
 8002254:	48000800 	.word	0x48000800
 8002258:	48000c00 	.word	0x48000c00
 800225c:	48001000 	.word	0x48001000
 8002260:	48001400 	.word	0x48001400
 8002264:	48001800 	.word	0x48001800
 8002268:	48001c00 	.word	0x48001c00
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800228c:	e002      	b.n	8002294 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d102      	bne.n	80022b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80022b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b6:	e00b      	b.n	80022d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80022ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c6:	d102      	bne.n	80022ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80022c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022cc:	e000      	b.n	80022d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80022ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40007000 	.word	0x40007000

080022e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d141      	bne.n	8002372 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ee:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fa:	d131      	bne.n	8002360 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022fc:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002302:	4a46      	ldr	r2, [pc, #280]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002314:	4a41      	ldr	r2, [pc, #260]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800231c:	4b40      	ldr	r3, [pc, #256]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2232      	movs	r2, #50	; 0x32
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	4a3f      	ldr	r2, [pc, #252]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	3301      	adds	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002332:	e002      	b.n	800233a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3b01      	subs	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002346:	d102      	bne.n	800234e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f2      	bne.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800234e:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d158      	bne.n	800240e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e057      	b.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002366:	4a2d      	ldr	r2, [pc, #180]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800236c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002370:	e04d      	b.n	800240e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002378:	d141      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002386:	d131      	bne.n	80023ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002388:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800238e:	4a23      	ldr	r2, [pc, #140]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002398:	4b20      	ldr	r3, [pc, #128]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a0:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2232      	movs	r2, #50	; 0x32
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023be:	e002      	b.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d2:	d102      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f2      	bne.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e6:	d112      	bne.n	800240e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e011      	b.n	8002410 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023fc:	e007      	b.n	800240e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800240c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40007000 	.word	0x40007000
 8002420:	20000630 	.word	0x20000630
 8002424:	431bde83 	.word	0x431bde83

08002428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f000 bc16 	b.w	8002c68 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243c:	4ba0      	ldr	r3, [pc, #640]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002446:	4b9e      	ldr	r3, [pc, #632]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80e4 	beq.w	8002626 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_RCC_OscConfig+0x4c>
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	f040 808b 	bne.w	8002582 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b01      	cmp	r3, #1
 8002470:	f040 8087 	bne.w	8002582 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002474:	4b92      	ldr	r3, [pc, #584]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x64>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e3ed      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_RCC_OscConfig+0x7e>
 800249c:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a4:	e005      	b.n	80024b2 <HAL_RCC_OscConfig+0x8a>
 80024a6:	4b86      	ldr	r3, [pc, #536]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80024a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d223      	bcs.n	80024fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fdfc 	bl	80030b8 <RCC_SetFlashLatencyFromMSIRange>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e3ce      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ca:	4b7d      	ldr	r3, [pc, #500]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7c      	ldr	r2, [pc, #496]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b7a      	ldr	r3, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4977      	ldr	r1, [pc, #476]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e8:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	4972      	ldr	r1, [pc, #456]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
 80024fc:	e025      	b.n	800254a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fe:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6f      	ldr	r2, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002504:	f043 0308 	orr.w	r3, r3, #8
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	496a      	ldr	r1, [pc, #424]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	4965      	ldr	r1, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fdbc 	bl	80030b8 <RCC_SetFlashLatencyFromMSIRange>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e38e      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800254a:	f000 fcbf 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 800254e:	4602      	mov	r2, r0
 8002550:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	495a      	ldr	r1, [pc, #360]	; (80026c4 <HAL_RCC_OscConfig+0x29c>)
 800255c:	5ccb      	ldrb	r3, [r1, r3]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x2a0>)
 8002568:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800256a:	4b58      	ldr	r3, [pc, #352]	; (80026cc <HAL_RCC_OscConfig+0x2a4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f008 ff8a 	bl	800b488 <HAL_InitTick>
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d052      	beq.n	8002624 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	e372      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d032      	beq.n	80025f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800258a:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002596:	f7fe fd0f 	bl	8000fb8 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259e:	f7fe fd0b 	bl	8000fb8 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e35b      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025bc:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a3f      	ldr	r2, [pc, #252]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025c2:	f043 0308 	orr.w	r3, r3, #8
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	493a      	ldr	r1, [pc, #232]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	4935      	ldr	r1, [pc, #212]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
 80025ee:	e01a      	b.n	8002626 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025f0:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a32      	ldr	r2, [pc, #200]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fcdc 	bl	8000fb8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002604:	f7fe fcd8 	bl	8000fb8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e328      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x1dc>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002624:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d073      	beq.n	800271a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d005      	beq.n	8002644 <HAL_RCC_OscConfig+0x21c>
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d10e      	bne.n	800265c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d063      	beq.n	8002718 <HAL_RCC_OscConfig+0x2f0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d15f      	bne.n	8002718 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e305      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x24c>
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e01d      	b.n	80026b0 <HAL_RCC_OscConfig+0x288>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x270>
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x288>
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a08      	ldr	r2, [pc, #32]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <HAL_RCC_OscConfig+0x298>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fc7e 	bl	8000fb8 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026be:	e010      	b.n	80026e2 <HAL_RCC_OscConfig+0x2ba>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	0803feb8 	.word	0x0803feb8
 80026c8:	20000630 	.word	0x20000630
 80026cc:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fc72 	bl	8000fb8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e2c2      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	4baf      	ldr	r3, [pc, #700]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x2a8>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fc62 	bl	8000fb8 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fc5e 	bl	8000fb8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e2ae      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270a:	4ba5      	ldr	r3, [pc, #660]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2d0>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d060      	beq.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x310>
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d119      	bne.n	8002766 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d116      	bne.n	8002766 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002738:	4b99      	ldr	r3, [pc, #612]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_OscConfig+0x328>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e28b      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b93      	ldr	r3, [pc, #588]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	4990      	ldr	r1, [pc, #576]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002764:	e040      	b.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d023      	beq.n	80027b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276e:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a8b      	ldr	r2, [pc, #556]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe fc1d 	bl	8000fb8 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe fc19 	bl	8000fb8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e269      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	4b82      	ldr	r3, [pc, #520]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b7f      	ldr	r3, [pc, #508]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	497c      	ldr	r1, [pc, #496]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e018      	b.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b7a      	ldr	r3, [pc, #488]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a79      	ldr	r2, [pc, #484]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80027bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fbf9 	bl	8000fb8 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fbf5 	bl	8000fb8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e245      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027dc:	4b70      	ldr	r3, [pc, #448]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d03c      	beq.n	800286e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01c      	beq.n	8002836 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002802:	4a67      	ldr	r2, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280c:	f7fe fbd4 	bl	8000fb8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002814:	f7fe fbd0 	bl	8000fb8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e220      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002826:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ef      	beq.n	8002814 <HAL_RCC_OscConfig+0x3ec>
 8002834:	e01b      	b.n	800286e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002836:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283c:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7fe fbb7 	bl	8000fb8 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284e:	f7fe fbb3 	bl	8000fb8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e203      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ef      	bne.n	800284e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80a6 	beq.w	80029c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002880:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10d      	bne.n	80028a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	4a43      	ldr	r2, [pc, #268]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	; 0x58
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a8:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <HAL_RCC_OscConfig+0x57c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d118      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_OscConfig+0x57c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3a      	ldr	r2, [pc, #232]	; (80029a4 <HAL_RCC_OscConfig+0x57c>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c0:	f7fe fb7a 	bl	8000fb8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7fe fb76 	bl	8000fb8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1c6      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028da:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <HAL_RCC_OscConfig+0x57c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_OscConfig+0x4d8>
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028fe:	e024      	b.n	800294a <HAL_RCC_OscConfig+0x522>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d110      	bne.n	800292a <HAL_RCC_OscConfig+0x502>
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002928:	e00f      	b.n	800294a <HAL_RCC_OscConfig+0x522>
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002942:	f023 0304 	bic.w	r3, r3, #4
 8002946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fe fb31 	bl	8000fb8 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe fb2d 	bl	8000fb8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e17b      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_OscConfig+0x578>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ed      	beq.n	800295a <HAL_RCC_OscConfig+0x532>
 800297e:	e01a      	b.n	80029b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe fb1a 	bl	8000fb8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002986:	e00f      	b.n	80029a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe fb16 	bl	8000fb8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d906      	bls.n	80029a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e164      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a8:	4ba8      	ldr	r3, [pc, #672]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e8      	bne.n	8002988 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b6:	7ffb      	ldrb	r3, [r7, #31]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4ba3      	ldr	r3, [pc, #652]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4aa2      	ldr	r2, [pc, #648]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d03c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01c      	beq.n	8002a16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029dc:	4b9b      	ldr	r3, [pc, #620]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 80029de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029e2:	4a9a      	ldr	r2, [pc, #616]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fe fae4 	bl	8000fb8 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029f4:	f7fe fae0 	bl	8000fb8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e130      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a06:	4b91      	ldr	r3, [pc, #580]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ef      	beq.n	80029f4 <HAL_RCC_OscConfig+0x5cc>
 8002a14:	e01b      	b.n	8002a4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a16:	4b8d      	ldr	r3, [pc, #564]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002a18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a1c:	4a8b      	ldr	r2, [pc, #556]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe fac7 	bl	8000fb8 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a2e:	f7fe fac3 	bl	8000fb8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e113      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a40:	4b82      	ldr	r3, [pc, #520]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ef      	bne.n	8002a2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8107 	beq.w	8002c66 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	f040 80cb 	bne.w	8002bf8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a62:	4b7a      	ldr	r3, [pc, #488]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0203 	and.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d12c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	3b01      	subs	r3, #1
 8002a82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d123      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d11b      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d113      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d109      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d06d      	beq.n	8002bac <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d068      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ad6:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ae2:	4b5a      	ldr	r3, [pc, #360]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0ba      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002af2:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a55      	ldr	r2, [pc, #340]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002afc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002afe:	f7fe fa5b 	bl	8000fb8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe fa57 	bl	8000fb8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0a7      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	4b4c      	ldr	r3, [pc, #304]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b49      	ldr	r3, [pc, #292]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <HAL_RCC_OscConfig+0x828>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b34:	3a01      	subs	r2, #1
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b3e:	0212      	lsls	r2, r2, #8
 8002b40:	4311      	orrs	r1, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b46:	0852      	lsrs	r2, r2, #1
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	0552      	lsls	r2, r2, #21
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b52:	0852      	lsrs	r2, r2, #1
 8002b54:	3a01      	subs	r2, #1
 8002b56:	0652      	lsls	r2, r2, #25
 8002b58:	4311      	orrs	r1, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b5e:	06d2      	lsls	r2, r2, #27
 8002b60:	430a      	orrs	r2, r1
 8002b62:	493a      	ldr	r1, [pc, #232]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b68:	4b38      	ldr	r3, [pc, #224]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a37      	ldr	r2, [pc, #220]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b74:	4b35      	ldr	r3, [pc, #212]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b80:	f7fe fa1a 	bl	8000fb8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fa16 	bl	8000fb8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e066      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9a:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba6:	e05e      	b.n	8002c66 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e05d      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bac:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d156      	bne.n	8002c66 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc4:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bd0:	f7fe f9f2 	bl	8000fb8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe f9ee 	bl	8000fb8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e03e      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x7b0>
 8002bf6:	e036      	b.n	8002c66 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d031      	beq.n	8002c62 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c08:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002c1c:	f023 0303 	bic.w	r3, r3, #3
 8002c20:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_RCC_OscConfig+0x824>)
 8002c28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe f9c1 	bl	8000fb8 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	e00c      	b.n	8002c54 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe f9bd 	bl	8000fb8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d905      	bls.n	8002c54 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e00d      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x848>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ec      	bne.n	8002c3a <HAL_RCC_OscConfig+0x812>
 8002c60:	e001      	b.n	8002c66 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e10f      	b.n	8002eac <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <HAL_RCC_ClockConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d910      	bls.n	8002cbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b86      	ldr	r3, [pc, #536]	; (8002eb4 <HAL_RCC_ClockConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 020f 	bic.w	r2, r3, #15
 8002ca2:	4984      	ldr	r1, [pc, #528]	; (8002eb4 <HAL_RCC_ClockConfig+0x240>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_ClockConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0f7      	b.n	8002eac <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8089 	beq.w	8002ddc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d133      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	4b79      	ldr	r3, [pc, #484]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0e4      	b.n	8002eac <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ce2:	f000 fa43 	bl	800316c <RCC_GetSysClockFreqFromPLLSource>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a74      	ldr	r2, [pc, #464]	; (8002ebc <HAL_RCC_ClockConfig+0x248>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d955      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cee:	4b72      	ldr	r3, [pc, #456]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfa:	4b6f      	ldr	r3, [pc, #444]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d02:	4a6d      	ldr	r2, [pc, #436]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e044      	b.n	8002d9a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d03e      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x126>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d13a      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d24:	4b64      	ldr	r3, [pc, #400]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2c:	4a62      	ldr	r2, [pc, #392]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d32:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e02f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d42:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d115      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0ac      	b.n	8002eac <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5a:	4b57      	ldr	r3, [pc, #348]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0a0      	b.n	8002eac <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6a:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e098      	b.n	8002eac <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d7a:	f000 f8a7 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4a4e      	ldr	r2, [pc, #312]	; (8002ebc <HAL_RCC_ClockConfig+0x248>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d909      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d86:	4b4c      	ldr	r3, [pc, #304]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d8e:	4a4a      	ldr	r2, [pc, #296]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 0203 	bic.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4944      	ldr	r1, [pc, #272]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dac:	f7fe f904 	bl	8000fb8 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db4:	f7fe f900 	bl	8000fb8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e070      	b.n	8002eac <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 020c 	and.w	r2, r3, #12
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d1eb      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b33      	ldr	r3, [pc, #204]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4930      	ldr	r1, [pc, #192]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b80      	cmp	r3, #128	; 0x80
 8002e00:	d105      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e02:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d210      	bcs.n	8002e3e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_RCC_ClockConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 020f 	bic.w	r2, r3, #15
 8002e24:	4923      	ldr	r1, [pc, #140]	; (8002eb4 <HAL_RCC_ClockConfig+0x240>)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCC_ClockConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e036      	b.n	8002eac <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4918      	ldr	r1, [pc, #96]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4910      	ldr	r1, [pc, #64]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e7c:	f000 f826 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <HAL_RCC_ClockConfig+0x24c>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
 8002e98:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x250>)
 8002e9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x254>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f008 faf1 	bl	800b488 <HAL_InitTick>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	04c4b400 	.word	0x04c4b400
 8002ec0:	0803feb8 	.word	0x0803feb8
 8002ec4:	20000630 	.word	0x20000630
 8002ec8:	20000000 	.word	0x20000000

08002ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee4:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x34>
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d121      	bne.n	8002f3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d11e      	bne.n	8002f3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f00:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e005      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f28:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d102      	bne.n	8002f4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	e004      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f50:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d134      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d003      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0xac>
 8002f70:	e005      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f74:	617b      	str	r3, [r7, #20]
      break;
 8002f76:	e005      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f7a:	617b      	str	r3, [r7, #20]
      break;
 8002f7c:	e002      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	617b      	str	r3, [r7, #20]
      break;
 8002f82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	fb02 f203 	mul.w	r2, r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	0e5b      	lsrs	r3, r3, #25
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	0803fed0 	.word	0x0803fed0
 8002fdc:	00f42400 	.word	0x00f42400
 8002fe0:	007a1200 	.word	0x007a1200

08002fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000630 	.word	0x20000630

08002ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003000:	f7ff fff0 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8003004:	4602      	mov	r2, r0
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	0803fec8 	.word	0x0803fec8

08003028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800302c:	f7ff ffda 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	0adb      	lsrs	r3, r3, #11
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4904      	ldr	r1, [pc, #16]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	0803fec8 	.word	0x0803fec8

08003054 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	220f      	movs	r2, #15
 8003062:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCC_GetClockConfig+0x60>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40022000 	.word	0x40022000

080030b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d0:	f7ff f8e6 	bl	80022a0 <HAL_PWREx_GetVoltageRange>
 80030d4:	6178      	str	r0, [r7, #20]
 80030d6:	e014      	b.n	8003102 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	4a21      	ldr	r2, [pc, #132]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e2:	6593      	str	r3, [r2, #88]	; 0x58
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030f0:	f7ff f8d6 	bl	80022a0 <HAL_PWREx_GetVoltageRange>
 80030f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003100:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003108:	d10b      	bne.n	8003122 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d913      	bls.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2ba0      	cmp	r3, #160	; 0xa0
 8003114:	d902      	bls.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003116:	2302      	movs	r3, #2
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e00d      	b.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800311c:	2301      	movs	r3, #1
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	e00a      	b.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b7f      	cmp	r3, #127	; 0x7f
 8003126:	d902      	bls.n	800312e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003128:	2302      	movs	r3, #2
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	e004      	b.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b70      	cmp	r3, #112	; 0x70
 8003132:	d101      	bne.n	8003138 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003134:	2301      	movs	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 020f 	bic.w	r2, r3, #15
 8003140:	4909      	ldr	r1, [pc, #36]	; (8003168 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	429a      	cmp	r2, r3
 8003154:	d001      	beq.n	800315a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	40022000 	.word	0x40022000

0800316c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d118      	bne.n	80031b4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003182:	4b2a      	ldr	r3, [pc, #168]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d107      	bne.n	800319e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800318e:	4b27      	ldr	r3, [pc, #156]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e005      	b.n	80031aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031aa:	4a21      	ldr	r2, [pc, #132]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031b4:	4b1d      	ldr	r3, [pc, #116]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d003      	beq.n	80031cc <RCC_GetSysClockFreqFromPLLSource+0x60>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d003      	beq.n	80031d2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80031ca:	e005      	b.n	80031d8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80031ce:	613b      	str	r3, [r7, #16]
    break;
 80031d0:	e005      	b.n	80031de <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80031d4:	613b      	str	r3, [r7, #16]
    break;
 80031d6:	e002      	b.n	80031de <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	613b      	str	r3, [r7, #16]
    break;
 80031dc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	3301      	adds	r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	fb02 f203 	mul.w	r2, r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0e5b      	lsrs	r3, r3, #25
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800321e:	683b      	ldr	r3, [r7, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40021000 	.word	0x40021000
 8003230:	0803fed0 	.word	0x0803fed0
 8003234:	00f42400 	.word	0x00f42400
 8003238:	007a1200 	.word	0x007a1200

0800323c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003244:	2300      	movs	r3, #0
 8003246:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003248:	2300      	movs	r3, #0
 800324a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003254:	2b00      	cmp	r3, #0
 8003256:	d040      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	d02a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d825      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d026      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d821      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d006      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d81d      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d009      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003278:	2b20      	cmp	r3, #32
 800327a:	d010      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800327c:	e018      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800327e:	4b89      	ldr	r3, [pc, #548]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	4a88      	ldr	r2, [pc, #544]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800328a:	e015      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fb02 	bl	800389c <RCCEx_PLLSAI1_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800329c:	e00c      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3320      	adds	r3, #32
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fbed 	bl	8003a84 <RCCEx_PLLSAI2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ae:	e003      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	74fb      	strb	r3, [r7, #19]
      break;
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80032b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032be:	4b79      	ldr	r3, [pc, #484]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032c4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032cc:	4975      	ldr	r1, [pc, #468]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032d4:	e001      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d047      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ee:	d030      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d82a      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032fa:	d02a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003300:	d824      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003306:	d008      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330c:	d81e      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003316:	d010      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003318:	e018      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800331a:	4b62      	ldr	r3, [pc, #392]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a61      	ldr	r2, [pc, #388]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003326:	e015      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fab4 	bl	800389c <RCCEx_PLLSAI1_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003338:	e00c      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3320      	adds	r3, #32
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fb9f 	bl	8003a84 <RCCEx_PLLSAI2_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800334a:	e003      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	74fb      	strb	r3, [r7, #19]
      break;
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800335a:	4b52      	ldr	r3, [pc, #328]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	494e      	ldr	r1, [pc, #312]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003370:	e001      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 809f 	beq.w	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003388:	4b46      	ldr	r3, [pc, #280]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	4a40      	ldr	r2, [pc, #256]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6593      	str	r3, [r2, #88]	; 0x58
 80033aa:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ba:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3a      	ldr	r2, [pc, #232]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c6:	f7fd fdf7 	bl	8000fb8 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033cc:	e009      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ce:	f7fd fdf3 	bl	8000fb8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d902      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	74fb      	strb	r3, [r7, #19]
        break;
 80033e0:	e005      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033e2:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ef      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d15b      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033f4:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01f      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	429a      	cmp	r2, r3
 8003410:	d019      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800341e:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800343e:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d016      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fdb2 	bl	8000fb8 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003456:	e00b      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fd fdae 	bl	8000fb8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d902      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	74fb      	strb	r3, [r7, #19]
            break;
 800346e:	e006      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ec      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10c      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800349c:	e008      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	74bb      	strb	r3, [r7, #18]
 80034a2:	e005      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b0:	7c7b      	ldrb	r3, [r7, #17]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4ba0      	ldr	r3, [pc, #640]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	4a9f      	ldr	r2, [pc, #636]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ce:	4b9a      	ldr	r3, [pc, #616]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f023 0203 	bic.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	4996      	ldr	r1, [pc, #600]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f0:	4b91      	ldr	r3, [pc, #580]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f023 020c 	bic.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	498e      	ldr	r1, [pc, #568]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003512:	4b89      	ldr	r3, [pc, #548]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	4985      	ldr	r1, [pc, #532]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003534:	4b80      	ldr	r3, [pc, #512]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	497d      	ldr	r1, [pc, #500]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003556:	4b78      	ldr	r3, [pc, #480]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003564:	4974      	ldr	r1, [pc, #464]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003578:	4b6f      	ldr	r3, [pc, #444]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	496c      	ldr	r1, [pc, #432]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800359a:	4b67      	ldr	r3, [pc, #412]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a8:	4963      	ldr	r1, [pc, #396]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035bc:	4b5e      	ldr	r3, [pc, #376]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ca:	495b      	ldr	r1, [pc, #364]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035de:	4b56      	ldr	r3, [pc, #344]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	4952      	ldr	r1, [pc, #328]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003600:	4b4d      	ldr	r3, [pc, #308]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360e:	494a      	ldr	r1, [pc, #296]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003622:	4b45      	ldr	r3, [pc, #276]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	4941      	ldr	r1, [pc, #260]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003644:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003652:	4939      	ldr	r1, [pc, #228]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d028      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003666:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	4930      	ldr	r1, [pc, #192]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003684:	d106      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003690:	60d3      	str	r3, [r2, #12]
 8003692:	e011      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f8f9 	bl	800389c <RCCEx_PLLSAI1_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d04d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036cc:	d108      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036d4:	4a18      	ldr	r2, [pc, #96]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80036de:	e012      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80036e0:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fe:	490e      	ldr	r1, [pc, #56]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800370e:	d106      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371a:	60d3      	str	r3, [r2, #12]
 800371c:	e020      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003726:	d109      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a02      	ldr	r2, [pc, #8]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003732:	60d3      	str	r3, [r2, #12]
 8003734:	e014      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f8a5 	bl	800389c <RCCEx_PLLSAI1_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d028      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800376c:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377a:	4947      	ldr	r1, [pc, #284]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378a:	d106      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378c:	4b42      	ldr	r3, [pc, #264]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a41      	ldr	r2, [pc, #260]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e011      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f876 	bl	800389c <RCCEx_PLLSAI1_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01e      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ca:	4b33      	ldr	r3, [pc, #204]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037da:	492f      	ldr	r1, [pc, #188]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ec:	d10c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2102      	movs	r1, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f851 	bl	800389c <RCCEx_PLLSAI1_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003814:	4b20      	ldr	r3, [pc, #128]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003816:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800381a:	f023 0204 	bic.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003824:	491c      	ldr	r1, [pc, #112]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800383e:	f023 0218 	bic.w	r2, r3, #24
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	4913      	ldr	r1, [pc, #76]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003862:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386c:	490a      	ldr	r1, [pc, #40]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800387a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800387e:	d105      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800388c:	7cbb      	ldrb	r3, [r7, #18]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000

0800389c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038aa:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00e      	beq.n	80038d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038b6:	4b6f      	ldr	r3, [pc, #444]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f003 0203 	and.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d103      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
       ||
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d142      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
 80038d2:	e03f      	b.n	8003954 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d018      	beq.n	800390e <RCCEx_PLLSAI1_Config+0x72>
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d825      	bhi.n	800392c <RCCEx_PLLSAI1_Config+0x90>
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d002      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x4e>
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d009      	beq.n	80038fc <RCCEx_PLLSAI1_Config+0x60>
 80038e8:	e020      	b.n	800392c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ea:	4b62      	ldr	r3, [pc, #392]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d11d      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fa:	e01a      	b.n	8003932 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038fc:	4b5d      	ldr	r3, [pc, #372]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d116      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390c:	e013      	b.n	8003936 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800390e:	4b59      	ldr	r3, [pc, #356]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800391a:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800392a:	e006      	b.n	800393a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e004      	b.n	800393c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800393a:	bf00      	nop
    }

    if(status == HAL_OK)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d108      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003942:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4949      	ldr	r1, [pc, #292]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 8086 	bne.w	8003a68 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a44      	ldr	r2, [pc, #272]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003962:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003968:	f7fd fb26 	bl	8000fb8 <HAL_GetTick>
 800396c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800396e:	e009      	b.n	8003984 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003970:	f7fd fb22 	bl	8000fb8 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	73fb      	strb	r3, [r7, #15]
        break;
 8003982:	e005      	b.n	8003990 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003984:	4b3b      	ldr	r3, [pc, #236]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ef      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d168      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d113      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399c:	4b35      	ldr	r3, [pc, #212]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	0211      	lsls	r1, r2, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	06d2      	lsls	r2, r2, #27
 80039b0:	4311      	orrs	r1, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6852      	ldr	r2, [r2, #4]
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	430a      	orrs	r2, r1
 80039bc:	492d      	ldr	r1, [pc, #180]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	610b      	str	r3, [r1, #16]
 80039c2:	e02d      	b.n	8003a20 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d115      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	0211      	lsls	r1, r2, #8
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6912      	ldr	r2, [r2, #16]
 80039dc:	0852      	lsrs	r2, r2, #1
 80039de:	3a01      	subs	r2, #1
 80039e0:	0552      	lsls	r2, r2, #21
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6852      	ldr	r2, [r2, #4]
 80039e8:	3a01      	subs	r2, #1
 80039ea:	0112      	lsls	r2, r2, #4
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4921      	ldr	r1, [pc, #132]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	610b      	str	r3, [r1, #16]
 80039f4:	e014      	b.n	8003a20 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f6:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6892      	ldr	r2, [r2, #8]
 8003a02:	0211      	lsls	r1, r2, #8
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6952      	ldr	r2, [r2, #20]
 8003a08:	0852      	lsrs	r2, r2, #1
 8003a0a:	3a01      	subs	r2, #1
 8003a0c:	0652      	lsls	r2, r2, #25
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6852      	ldr	r2, [r2, #4]
 8003a14:	3a01      	subs	r2, #1
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	4916      	ldr	r1, [pc, #88]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a20:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a13      	ldr	r2, [pc, #76]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fd fac4 	bl	8000fb8 <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a32:	e009      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a34:	f7fd fac0 	bl	8000fb8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d902      	bls.n	8003a48 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	73fb      	strb	r3, [r7, #15]
          break;
 8003a46:	e005      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ef      	beq.n	8003a34 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	4904      	ldr	r1, [pc, #16]	; (8003a74 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	07ff800f 	.word	0x07ff800f
 8003a7c:	ff9f800f 	.word	0xff9f800f
 8003a80:	f9ff800f 	.word	0xf9ff800f

08003a84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a92:	4b72      	ldr	r3, [pc, #456]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00e      	beq.n	8003abc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a9e:	4b6f      	ldr	r3, [pc, #444]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0203 	and.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d103      	bne.n	8003ab6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d142      	bne.n	8003b3c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	e03f      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d018      	beq.n	8003af6 <RCCEx_PLLSAI2_Config+0x72>
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d825      	bhi.n	8003b14 <RCCEx_PLLSAI2_Config+0x90>
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d002      	beq.n	8003ad2 <RCCEx_PLLSAI2_Config+0x4e>
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d009      	beq.n	8003ae4 <RCCEx_PLLSAI2_Config+0x60>
 8003ad0:	e020      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ad2:	4b62      	ldr	r3, [pc, #392]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d11d      	bne.n	8003b1a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae2:	e01a      	b.n	8003b1a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae4:	4b5d      	ldr	r3, [pc, #372]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d116      	bne.n	8003b1e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af4:	e013      	b.n	8003b1e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003af6:	4b59      	ldr	r3, [pc, #356]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b02:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b12:	e006      	b.n	8003b22 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      break;
 8003b18:	e004      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d108      	bne.n	8003b3c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b2a:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4949      	ldr	r1, [pc, #292]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 8086 	bne.w	8003c50 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b44:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a44      	ldr	r2, [pc, #272]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fd fa32 	bl	8000fb8 <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b56:	e009      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b58:	f7fd fa2e 	bl	8000fb8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d902      	bls.n	8003b6c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6a:	e005      	b.n	8003b78 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b6c:	4b3b      	ldr	r3, [pc, #236]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ef      	bne.n	8003b58 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d168      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d113      	bne.n	8003bac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b84:	4b35      	ldr	r3, [pc, #212]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	0211      	lsls	r1, r2, #8
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	06d2      	lsls	r2, r2, #27
 8003b98:	4311      	orrs	r1, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6852      	ldr	r2, [r2, #4]
 8003b9e:	3a01      	subs	r2, #1
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	492d      	ldr	r1, [pc, #180]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	614b      	str	r3, [r1, #20]
 8003baa:	e02d      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d115      	bne.n	8003bde <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	0211      	lsls	r1, r2, #8
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6912      	ldr	r2, [r2, #16]
 8003bc4:	0852      	lsrs	r2, r2, #1
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0552      	lsls	r2, r2, #21
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6852      	ldr	r2, [r2, #4]
 8003bd0:	3a01      	subs	r2, #1
 8003bd2:	0112      	lsls	r2, r2, #4
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	4921      	ldr	r1, [pc, #132]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	614b      	str	r3, [r1, #20]
 8003bdc:	e014      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6892      	ldr	r2, [r2, #8]
 8003bea:	0211      	lsls	r1, r2, #8
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6952      	ldr	r2, [r2, #20]
 8003bf0:	0852      	lsrs	r2, r2, #1
 8003bf2:	3a01      	subs	r2, #1
 8003bf4:	0652      	lsls	r2, r2, #25
 8003bf6:	4311      	orrs	r1, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6852      	ldr	r2, [r2, #4]
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0112      	lsls	r2, r2, #4
 8003c00:	430a      	orrs	r2, r1
 8003c02:	4916      	ldr	r1, [pc, #88]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fd f9d0 	bl	8000fb8 <HAL_GetTick>
 8003c18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c1a:	e009      	b.n	8003c30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c1c:	f7fd f9cc 	bl	8000fb8 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d902      	bls.n	8003c30 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c2e:	e005      	b.n	8003c3c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ef      	beq.n	8003c1c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	4904      	ldr	r1, [pc, #16]	; (8003c5c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	07ff800f 	.word	0x07ff800f
 8003c64:	ff9f800f 	.word	0xff9f800f
 8003c68:	f9ff800f 	.word	0xf9ff800f

08003c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e049      	b.n	8003d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f007 fae2 	bl	800b25c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f000 fe34 	bl	8004918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d001      	beq.n	8003d34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e047      	b.n	8003dc4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <HAL_TIM_Base_Start+0xb4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01d      	beq.n	8003d82 <HAL_TIM_Base_Start+0x66>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4e:	d018      	beq.n	8003d82 <HAL_TIM_Base_Start+0x66>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <HAL_TIM_Base_Start+0xb8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <HAL_TIM_Base_Start+0x66>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <HAL_TIM_Base_Start+0xbc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_TIM_Base_Start+0x66>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_TIM_Base_Start+0xc0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_TIM_Base_Start+0x66>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <HAL_TIM_Base_Start+0xc4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_TIM_Base_Start+0x66>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_TIM_Base_Start+0xc8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d115      	bne.n	8003dae <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <HAL_TIM_Base_Start+0xcc>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d015      	beq.n	8003dc0 <HAL_TIM_Base_Start+0xa4>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9a:	d011      	beq.n	8003dc0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dac:	e008      	b.n	8003dc0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e000      	b.n	8003dc2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40000800 	.word	0x40000800
 8003ddc:	40000c00 	.word	0x40000c00
 8003de0:	40013400 	.word	0x40013400
 8003de4:	40014000 	.word	0x40014000
 8003de8:	00010007 	.word	0x00010007

08003dec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a1a      	ldr	r2, [r3, #32]
 8003dfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10f      	bne.n	8003e24 <HAL_TIM_Base_Stop+0x38>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	f240 4344 	movw	r3, #1092	; 0x444
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_TIM_Base_Stop+0x38>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d001      	beq.n	8003e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e04f      	b.n	8003ef4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01d      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d018      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00e      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d009      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1b      	ldr	r2, [pc, #108]	; (8003f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_TIM_Base_Start_IT+0x76>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d115      	bne.n	8003ede <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d015      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0xb4>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d011      	beq.n	8003ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003edc:	e008      	b.n	8003ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e000      	b.n	8003ef2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	40014000 	.word	0x40014000
 8003f18:	00010007 	.word	0x00010007

08003f1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_TIM_Base_Stop_IT+0x48>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_TIM_Base_Stop_IT+0x48>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e049      	b.n	8004020 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f841 	bl	8004028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f000 fcad 	bl	8004918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HAL_TIM_PWM_Start+0x24>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	e03c      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d109      	bne.n	800407a <HAL_TIM_PWM_Start+0x3e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	e02f      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d109      	bne.n	8004094 <HAL_TIM_PWM_Start+0x58>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e022      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d109      	bne.n	80040ae <HAL_TIM_PWM_Start+0x72>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e015      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x8c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e008      	b.n	80040da <HAL_TIM_PWM_Start+0x9e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e09c      	b.n	800421c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0xb6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f0:	e023      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start+0xc6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004100:	e01b      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xd6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	e013      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	d104      	bne.n	8004122 <HAL_TIM_PWM_Start+0xe6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004120:	e00b      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d104      	bne.n	8004132 <HAL_TIM_PWM_Start+0xf6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004130:	e003      	b.n	800413a <HAL_TIM_PWM_Start+0xfe>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2201      	movs	r2, #1
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f001 f885 	bl	8005252 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a35      	ldr	r2, [pc, #212]	; (8004224 <HAL_TIM_PWM_Start+0x1e8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_TIM_PWM_Start+0x13e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_TIM_PWM_Start+0x1ec>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIM_PWM_Start+0x13e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a32      	ldr	r2, [pc, #200]	; (800422c <HAL_TIM_PWM_Start+0x1f0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_TIM_PWM_Start+0x13e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a31      	ldr	r2, [pc, #196]	; (8004230 <HAL_TIM_PWM_Start+0x1f4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIM_PWM_Start+0x13e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <HAL_TIM_PWM_Start+0x1f8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d101      	bne.n	800417e <HAL_TIM_PWM_Start+0x142>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_TIM_PWM_Start+0x144>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a22      	ldr	r2, [pc, #136]	; (8004224 <HAL_TIM_PWM_Start+0x1e8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01d      	beq.n	80041da <HAL_TIM_PWM_Start+0x19e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a6:	d018      	beq.n	80041da <HAL_TIM_PWM_Start+0x19e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <HAL_TIM_PWM_Start+0x1fc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_TIM_PWM_Start+0x19e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <HAL_TIM_PWM_Start+0x200>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <HAL_TIM_PWM_Start+0x19e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1f      	ldr	r2, [pc, #124]	; (8004240 <HAL_TIM_PWM_Start+0x204>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_TIM_PWM_Start+0x19e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_TIM_PWM_Start+0x1ec>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_TIM_PWM_Start+0x19e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_TIM_PWM_Start+0x1f0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d115      	bne.n	8004206 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_TIM_PWM_Start+0x208>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b06      	cmp	r3, #6
 80041ea:	d015      	beq.n	8004218 <HAL_TIM_PWM_Start+0x1dc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d011      	beq.n	8004218 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	e008      	b.n	8004218 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e000      	b.n	800421a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004218:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40013400 	.word	0x40013400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	00010007 	.word	0x00010007

08004248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d122      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b02      	cmp	r3, #2
 800426a:	d11b      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0202 	mvn.w	r2, #2
 8004274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb25 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fb17 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fb28 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d122      	bne.n	80042f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0204 	mvn.w	r2, #4
 80042c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fafb 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 faed 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fafe 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b08      	cmp	r3, #8
 8004304:	d122      	bne.n	800434c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b08      	cmp	r3, #8
 8004312:	d11b      	bne.n	800434c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0208 	mvn.w	r2, #8
 800431c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2204      	movs	r2, #4
 8004322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fad1 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fac3 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fad4 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b10      	cmp	r3, #16
 8004358:	d122      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0210 	mvn.w	r2, #16
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2208      	movs	r2, #8
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 faa7 	bl	80048da <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa99 	bl	80048c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 faaa 	bl	80048ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10e      	bne.n	80043cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d107      	bne.n	80043cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0201 	mvn.w	r2, #1
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f006 fdee 	bl	800afa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	2b80      	cmp	r3, #128	; 0x80
 80043d8:	d10e      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	d107      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 ffe4 	bl	80053c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004406:	d10e      	bne.n	8004426 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d107      	bne.n	8004426 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800441e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 ffd7 	bl	80053d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d10e      	bne.n	8004452 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d107      	bne.n	8004452 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800444a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fa58 	bl	8004902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b20      	cmp	r3, #32
 800445e:	d10e      	bne.n	800447e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b20      	cmp	r3, #32
 800446c:	d107      	bne.n	800447e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f06f 0220 	mvn.w	r2, #32
 8004476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 ff97 	bl	80053ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e0ff      	b.n	80046a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b14      	cmp	r3, #20
 80044b2:	f200 80f0 	bhi.w	8004696 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044b6:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	08004511 	.word	0x08004511
 80044c0:	08004697 	.word	0x08004697
 80044c4:	08004697 	.word	0x08004697
 80044c8:	08004697 	.word	0x08004697
 80044cc:	08004551 	.word	0x08004551
 80044d0:	08004697 	.word	0x08004697
 80044d4:	08004697 	.word	0x08004697
 80044d8:	08004697 	.word	0x08004697
 80044dc:	08004593 	.word	0x08004593
 80044e0:	08004697 	.word	0x08004697
 80044e4:	08004697 	.word	0x08004697
 80044e8:	08004697 	.word	0x08004697
 80044ec:	080045d3 	.word	0x080045d3
 80044f0:	08004697 	.word	0x08004697
 80044f4:	08004697 	.word	0x08004697
 80044f8:	08004697 	.word	0x08004697
 80044fc:	08004615 	.word	0x08004615
 8004500:	08004697 	.word	0x08004697
 8004504:	08004697 	.word	0x08004697
 8004508:	08004697 	.word	0x08004697
 800450c:	08004655 	.word	0x08004655
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fa98 	bl	8004a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0208 	orr.w	r2, r2, #8
 800452a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0204 	bic.w	r2, r2, #4
 800453a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6999      	ldr	r1, [r3, #24]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	619a      	str	r2, [r3, #24]
      break;
 800454e:	e0a5      	b.n	800469c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fb08 	bl	8004b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699a      	ldr	r2, [r3, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6999      	ldr	r1, [r3, #24]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	021a      	lsls	r2, r3, #8
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	619a      	str	r2, [r3, #24]
      break;
 8004590:	e084      	b.n	800469c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fb71 	bl	8004c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0208 	orr.w	r2, r2, #8
 80045ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0204 	bic.w	r2, r2, #4
 80045bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69d9      	ldr	r1, [r3, #28]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	61da      	str	r2, [r3, #28]
      break;
 80045d0:	e064      	b.n	800469c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fbd9 	bl	8004d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69d9      	ldr	r1, [r3, #28]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	021a      	lsls	r2, r3, #8
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	61da      	str	r2, [r3, #28]
      break;
 8004612:	e043      	b.n	800469c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fc22 	bl	8004e64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0204 	bic.w	r2, r2, #4
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004652:	e023      	b.n	800469c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fc66 	bl	8004f2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800466e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	021a      	lsls	r2, r3, #8
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004694:	e002      	b.n	800469c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
      break;
 800469a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop

080046b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIM_ConfigClockSource+0x1c>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0b6      	b.n	800483a <HAL_TIM_ConfigClockSource+0x18a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004708:	d03e      	beq.n	8004788 <HAL_TIM_ConfigClockSource+0xd8>
 800470a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470e:	f200 8087 	bhi.w	8004820 <HAL_TIM_ConfigClockSource+0x170>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004716:	f000 8086 	beq.w	8004826 <HAL_TIM_ConfigClockSource+0x176>
 800471a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471e:	d87f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x170>
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d01a      	beq.n	800475a <HAL_TIM_ConfigClockSource+0xaa>
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d87b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x170>
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d050      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x11e>
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d877      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x170>
 8004730:	2b50      	cmp	r3, #80	; 0x50
 8004732:	d03c      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xfe>
 8004734:	2b50      	cmp	r3, #80	; 0x50
 8004736:	d873      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x170>
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d058      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x13e>
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d86f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x170>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d064      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15e>
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	d86b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x170>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d060      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15e>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d867      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x170>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05c      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15e>
 8004754:	2b10      	cmp	r3, #16
 8004756:	d05a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15e>
 8004758:	e062      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f000 fd52 	bl	8005212 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800477c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	609a      	str	r2, [r3, #8]
      break;
 8004786:	e04f      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f000 fd3b 	bl	8005212 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047aa:	609a      	str	r2, [r3, #8]
      break;
 80047ac:	e03c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 fcaf 	bl	800511e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2150      	movs	r1, #80	; 0x50
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fd08 	bl	80051dc <TIM_ITRx_SetConfig>
      break;
 80047cc:	e02c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 fcce 	bl	800517c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2160      	movs	r1, #96	; 0x60
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fcf8 	bl	80051dc <TIM_ITRx_SetConfig>
      break;
 80047ec:	e01c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fc8f 	bl	800511e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2140      	movs	r1, #64	; 0x40
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fce8 	bl	80051dc <TIM_ITRx_SetConfig>
      break;
 800480c:	e00c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f000 fcdf 	bl	80051dc <TIM_ITRx_SetConfig>
      break;
 800481e:	e003      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
      break;
 8004824:	e000      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004856:	2302      	movs	r3, #2
 8004858:	e031      	b.n	80048be <HAL_TIM_SlaveConfigSynchro+0x7c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fbc3 	bl	8004ff8 <TIM_SlaveTimer_SetConfig>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e018      	b.n	80048be <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a40      	ldr	r2, [pc, #256]	; (8004a2c <TIM_Base_SetConfig+0x114>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004936:	d00f      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a3d      	ldr	r2, [pc, #244]	; (8004a30 <TIM_Base_SetConfig+0x118>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3c      	ldr	r2, [pc, #240]	; (8004a34 <TIM_Base_SetConfig+0x11c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a3b      	ldr	r2, [pc, #236]	; (8004a38 <TIM_Base_SetConfig+0x120>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3a      	ldr	r2, [pc, #232]	; (8004a3c <TIM_Base_SetConfig+0x124>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d108      	bne.n	800496a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2f      	ldr	r2, [pc, #188]	; (8004a2c <TIM_Base_SetConfig+0x114>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01f      	beq.n	80049b2 <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d01b      	beq.n	80049b2 <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <TIM_Base_SetConfig+0x118>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d017      	beq.n	80049b2 <TIM_Base_SetConfig+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2b      	ldr	r2, [pc, #172]	; (8004a34 <TIM_Base_SetConfig+0x11c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d013      	beq.n	80049b2 <TIM_Base_SetConfig+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2a      	ldr	r2, [pc, #168]	; (8004a38 <TIM_Base_SetConfig+0x120>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00f      	beq.n	80049b2 <TIM_Base_SetConfig+0x9a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a29      	ldr	r2, [pc, #164]	; (8004a3c <TIM_Base_SetConfig+0x124>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00b      	beq.n	80049b2 <TIM_Base_SetConfig+0x9a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <TIM_Base_SetConfig+0x128>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <TIM_Base_SetConfig+0x9a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <TIM_Base_SetConfig+0x12c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d003      	beq.n	80049b2 <TIM_Base_SetConfig+0x9a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a26      	ldr	r2, [pc, #152]	; (8004a48 <TIM_Base_SetConfig+0x130>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d108      	bne.n	80049c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <TIM_Base_SetConfig+0x114>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00f      	beq.n	8004a10 <TIM_Base_SetConfig+0xf8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a12      	ldr	r2, [pc, #72]	; (8004a3c <TIM_Base_SetConfig+0x124>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_Base_SetConfig+0xf8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <TIM_Base_SetConfig+0x128>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_Base_SetConfig+0xf8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a10      	ldr	r2, [pc, #64]	; (8004a44 <TIM_Base_SetConfig+0x12c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_Base_SetConfig+0xf8>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <TIM_Base_SetConfig+0x130>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d103      	bne.n	8004a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40013400 	.word	0x40013400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800

08004a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f023 0302 	bic.w	r3, r3, #2
 8004a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a2c      	ldr	r2, [pc, #176]	; (8004b58 <TIM_OC1_SetConfig+0x10c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00f      	beq.n	8004acc <TIM_OC1_SetConfig+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <TIM_OC1_SetConfig+0x110>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_OC1_SetConfig+0x80>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <TIM_OC1_SetConfig+0x114>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_OC1_SetConfig+0x80>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <TIM_OC1_SetConfig+0x118>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC1_SetConfig+0x80>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a28      	ldr	r2, [pc, #160]	; (8004b68 <TIM_OC1_SetConfig+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10c      	bne.n	8004ae6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0308 	bic.w	r3, r3, #8
 8004ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 0304 	bic.w	r3, r3, #4
 8004ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <TIM_OC1_SetConfig+0x10c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00f      	beq.n	8004b0e <TIM_OC1_SetConfig+0xc2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <TIM_OC1_SetConfig+0x110>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <TIM_OC1_SetConfig+0xc2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <TIM_OC1_SetConfig+0x114>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_OC1_SetConfig+0xc2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a18      	ldr	r2, [pc, #96]	; (8004b64 <TIM_OC1_SetConfig+0x118>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_OC1_SetConfig+0xc2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <TIM_OC1_SetConfig+0x11c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d111      	bne.n	8004b32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40013400 	.word	0x40013400
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0210 	bic.w	r2, r3, #16
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0320 	bic.w	r3, r3, #32
 8004bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a28      	ldr	r2, [pc, #160]	; (8004c6c <TIM_OC2_SetConfig+0x100>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_OC2_SetConfig+0x6c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <TIM_OC2_SetConfig+0x104>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d10d      	bne.n	8004bf4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <TIM_OC2_SetConfig+0x100>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00f      	beq.n	8004c1c <TIM_OC2_SetConfig+0xb0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <TIM_OC2_SetConfig+0x104>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <TIM_OC2_SetConfig+0xb0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <TIM_OC2_SetConfig+0x108>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d007      	beq.n	8004c1c <TIM_OC2_SetConfig+0xb0>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <TIM_OC2_SetConfig+0x10c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_OC2_SetConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <TIM_OC2_SetConfig+0x110>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d113      	bne.n	8004c44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40013400 	.word	0x40013400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800

08004c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a27      	ldr	r2, [pc, #156]	; (8004d7c <TIM_OC3_SetConfig+0xfc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_OC3_SetConfig+0x6a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <TIM_OC3_SetConfig+0x100>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10d      	bne.n	8004d06 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <TIM_OC3_SetConfig+0xfc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00f      	beq.n	8004d2e <TIM_OC3_SetConfig+0xae>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <TIM_OC3_SetConfig+0x100>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_OC3_SetConfig+0xae>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <TIM_OC3_SetConfig+0x104>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_OC3_SetConfig+0xae>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <TIM_OC3_SetConfig+0x108>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC3_SetConfig+0xae>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <TIM_OC3_SetConfig+0x10c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d113      	bne.n	8004d56 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40013400 	.word	0x40013400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800

08004d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	031b      	lsls	r3, r3, #12
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <TIM_OC4_SetConfig+0xc0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00f      	beq.n	8004e14 <TIM_OC4_SetConfig+0x84>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <TIM_OC4_SetConfig+0xc4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_OC4_SetConfig+0x84>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <TIM_OC4_SetConfig+0xc8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <TIM_OC4_SetConfig+0x84>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <TIM_OC4_SetConfig+0xcc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_OC4_SetConfig+0x84>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a14      	ldr	r2, [pc, #80]	; (8004e60 <TIM_OC4_SetConfig+0xd0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d109      	bne.n	8004e28 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40013400 	.word	0x40013400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40014400 	.word	0x40014400
 8004e60:	40014800 	.word	0x40014800

08004e64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <TIM_OC5_SetConfig+0xb4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00f      	beq.n	8004ede <TIM_OC5_SetConfig+0x7a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <TIM_OC5_SetConfig+0xb8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <TIM_OC5_SetConfig+0x7a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <TIM_OC5_SetConfig+0xbc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_OC5_SetConfig+0x7a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <TIM_OC5_SetConfig+0xc0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_OC5_SetConfig+0x7a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <TIM_OC5_SetConfig+0xc4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d109      	bne.n	8004ef2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	621a      	str	r2, [r3, #32]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800

08004f2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	051b      	lsls	r3, r3, #20
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <TIM_OC6_SetConfig+0xb8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00f      	beq.n	8004fa8 <TIM_OC6_SetConfig+0x7c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <TIM_OC6_SetConfig+0xbc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_OC6_SetConfig+0x7c>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a16      	ldr	r2, [pc, #88]	; (8004fec <TIM_OC6_SetConfig+0xc0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_OC6_SetConfig+0x7c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <TIM_OC6_SetConfig+0xc4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC6_SetConfig+0x7c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <TIM_OC6_SetConfig+0xc8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d109      	bne.n	8004fbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	029b      	lsls	r3, r3, #10
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40013400 	.word	0x40013400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800

08004ff8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005014:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005026:	f023 0307 	bic.w	r3, r3, #7
 800502a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b70      	cmp	r3, #112	; 0x70
 8005044:	d01a      	beq.n	800507c <TIM_SlaveTimer_SetConfig+0x84>
 8005046:	2b70      	cmp	r3, #112	; 0x70
 8005048:	d860      	bhi.n	800510c <TIM_SlaveTimer_SetConfig+0x114>
 800504a:	2b60      	cmp	r3, #96	; 0x60
 800504c:	d054      	beq.n	80050f8 <TIM_SlaveTimer_SetConfig+0x100>
 800504e:	2b60      	cmp	r3, #96	; 0x60
 8005050:	d85c      	bhi.n	800510c <TIM_SlaveTimer_SetConfig+0x114>
 8005052:	2b50      	cmp	r3, #80	; 0x50
 8005054:	d046      	beq.n	80050e4 <TIM_SlaveTimer_SetConfig+0xec>
 8005056:	2b50      	cmp	r3, #80	; 0x50
 8005058:	d858      	bhi.n	800510c <TIM_SlaveTimer_SetConfig+0x114>
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d019      	beq.n	8005092 <TIM_SlaveTimer_SetConfig+0x9a>
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d854      	bhi.n	800510c <TIM_SlaveTimer_SetConfig+0x114>
 8005062:	2b30      	cmp	r3, #48	; 0x30
 8005064:	d055      	beq.n	8005112 <TIM_SlaveTimer_SetConfig+0x11a>
 8005066:	2b30      	cmp	r3, #48	; 0x30
 8005068:	d850      	bhi.n	800510c <TIM_SlaveTimer_SetConfig+0x114>
 800506a:	2b20      	cmp	r3, #32
 800506c:	d051      	beq.n	8005112 <TIM_SlaveTimer_SetConfig+0x11a>
 800506e:	2b20      	cmp	r3, #32
 8005070:	d84c      	bhi.n	800510c <TIM_SlaveTimer_SetConfig+0x114>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d04d      	beq.n	8005112 <TIM_SlaveTimer_SetConfig+0x11a>
 8005076:	2b10      	cmp	r3, #16
 8005078:	d04b      	beq.n	8005112 <TIM_SlaveTimer_SetConfig+0x11a>
 800507a:	e047      	b.n	800510c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68d9      	ldr	r1, [r3, #12]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f000 f8c1 	bl	8005212 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005090:	e040      	b.n	8005114 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b05      	cmp	r3, #5
 8005098:	d101      	bne.n	800509e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e03b      	b.n	8005116 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a1a      	ldr	r2, [r3, #32]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	621a      	str	r2, [r3, #32]
      break;
 80050e2:	e017      	b.n	8005114 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6899      	ldr	r1, [r3, #8]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	461a      	mov	r2, r3
 80050f2:	f000 f814 	bl	800511e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80050f6:	e00d      	b.n	8005114 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6899      	ldr	r1, [r3, #8]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	461a      	mov	r2, r3
 8005106:	f000 f839 	bl	800517c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800510a:	e003      	b.n	8005114 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
      break;
 8005110:	e000      	b.n	8005114 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005112:	bf00      	nop
  }

  return status;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f023 0201 	bic.w	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 030a 	bic.w	r3, r3, #10
 800515a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	621a      	str	r2, [r3, #32]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f023 0210 	bic.w	r2, r3, #16
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	031b      	lsls	r3, r3, #12
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f043 0307 	orr.w	r3, r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	609a      	str	r2, [r3, #8]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005212:	b480      	push	{r7}
 8005214:	b087      	sub	sp, #28
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	021a      	lsls	r2, r3, #8
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	431a      	orrs	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4313      	orrs	r3, r2
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	609a      	str	r2, [r3, #8]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005252:	b480      	push	{r7}
 8005254:	b087      	sub	sp, #28
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2201      	movs	r2, #1
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	43db      	mvns	r3, r3
 8005274:	401a      	ands	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	431a      	orrs	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	621a      	str	r2, [r3, #32]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e068      	b.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2e      	ldr	r2, [pc, #184]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a2d      	ldr	r2, [pc, #180]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01d      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005326:	d018      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1b      	ldr	r2, [pc, #108]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1a      	ldr	r2, [pc, #104]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00e      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a13      	ldr	r2, [pc, #76]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d10c      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40013400 	.word	0x40013400
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40014000 	.word	0x40014000

080053ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e042      	b.n	8005480 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f005 ffd5 	bl	800b3bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2224      	movs	r2, #36	; 0x24
 8005416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fc52 	bl	8005cd4 <UART_SetConfig>
 8005430:	4603      	mov	r3, r0
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e022      	b.n	8005480 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 ff0e 	bl	8006264 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 ff95 	bl	80063a8 <UART_CheckIdleState>
 800547e:	4603      	mov	r3, r0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549e:	2b20      	cmp	r3, #32
 80054a0:	f040 8084 	bne.w	80055ac <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_UART_Transmit+0x28>
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e07c      	b.n	80055ae <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Transmit+0x3a>
 80054be:	2302      	movs	r3, #2
 80054c0:	e075      	b.n	80055ae <HAL_UART_Transmit+0x126>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2221      	movs	r2, #33	; 0x21
 80054d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054da:	f7fb fd6d 	bl	8000fb8 <HAL_GetTick>
 80054de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f8:	d108      	bne.n	800550c <HAL_UART_Transmit+0x84>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	e003      	b.n	8005514 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800551c:	e02d      	b.n	800557a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2200      	movs	r2, #0
 8005526:	2180      	movs	r1, #128	; 0x80
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 ff88 	bl	800643e <UART_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e03a      	b.n	80055ae <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554a:	b292      	uxth	r2, r2
 800554c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	3302      	adds	r3, #2
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	e008      	b.n	8005568 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	b292      	uxth	r2, r2
 8005560:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3301      	adds	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1cb      	bne.n	800551e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2200      	movs	r2, #0
 800558e:	2140      	movs	r1, #64	; 0x40
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 ff54 	bl	800643e <UART_WaitOnFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e006      	b.n	80055ae <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d142      	bne.n	8005656 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_UART_Receive_IT+0x24>
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e03b      	b.n	8005658 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Receive_IT+0x36>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e034      	b.n	8005658 <HAL_UART_Receive_IT+0xa0>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a17      	ldr	r2, [pc, #92]	; (8005660 <HAL_UART_Receive_IT+0xa8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01f      	beq.n	8005646 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d018      	beq.n	8005646 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	613b      	str	r3, [r7, #16]
   return(result);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	623b      	str	r3, [r7, #32]
 8005634:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	69f9      	ldr	r1, [r7, #28]
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e6      	bne.n	8005614 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	461a      	mov	r2, r3
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 ffbf 	bl	80065d0 <UART_Start_Receive_IT>
 8005652:	4603      	mov	r3, r0
 8005654:	e000      	b.n	8005658 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	4618      	mov	r0, r3
 800565a:	3728      	adds	r7, #40	; 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40008000 	.word	0x40008000

08005664 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b0ba      	sub	sp, #232	; 0xe8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800568a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800568e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005692:	4013      	ands	r3, r2
 8005694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d11b      	bne.n	80056d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 82d6 	beq.w	8005c7a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
      }
      return;
 80056d6:	e2d0      	b.n	8005c7a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80056d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 811f 	beq.w	8005920 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056e6:	4b8b      	ldr	r3, [pc, #556]	; (8005914 <HAL_UART_IRQHandler+0x2b0>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056f2:	4b89      	ldr	r3, [pc, #548]	; (8005918 <HAL_UART_IRQHandler+0x2b4>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8112 	beq.w	8005920 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d011      	beq.n	800572c <HAL_UART_IRQHandler+0xc8>
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d011      	beq.n	800575c <HAL_UART_IRQHandler+0xf8>
 8005738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2202      	movs	r2, #2
 800574a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005752:	f043 0204 	orr.w	r2, r3, #4
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <HAL_UART_IRQHandler+0x128>
 8005768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2204      	movs	r2, #4
 800577a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005782:	f043 0202 	orr.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d017      	beq.n	80057c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80057a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80057a8:	4b5a      	ldr	r3, [pc, #360]	; (8005914 <HAL_UART_IRQHandler+0x2b0>)
 80057aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2208      	movs	r2, #8
 80057b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057be:	f043 0208 	orr.w	r2, r3, #8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d012      	beq.n	80057fa <HAL_UART_IRQHandler+0x196>
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00c      	beq.n	80057fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 823c 	beq.w	8005c7e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d013      	beq.n	800583a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d105      	bne.n	800582a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800581e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d005      	beq.n	800585e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005856:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800585a:	2b00      	cmp	r3, #0
 800585c:	d04f      	beq.n	80058fe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 ffe0 	bl	8006824 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d141      	bne.n	80058f6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3308      	adds	r3, #8
 8005878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800588c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800589e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1d9      	bne.n	8005872 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d013      	beq.n	80058ee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ca:	4a14      	ldr	r2, [pc, #80]	; (800591c <HAL_UART_IRQHandler+0x2b8>)
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fc f98b 	bl	8001bee <HAL_DMA_Abort_IT>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d017      	beq.n	800590e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ec:	e00f      	b.n	800590e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9da 	bl	8005ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	e00b      	b.n	800590e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9d6 	bl	8005ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	e007      	b.n	800590e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9d2 	bl	8005ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800590c:	e1b7      	b.n	8005c7e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590e:	bf00      	nop
    return;
 8005910:	e1b5      	b.n	8005c7e <HAL_UART_IRQHandler+0x61a>
 8005912:	bf00      	nop
 8005914:	10000001 	.word	0x10000001
 8005918:	04000120 	.word	0x04000120
 800591c:	080068f1 	.word	0x080068f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005924:	2b01      	cmp	r3, #1
 8005926:	f040 814a 	bne.w	8005bbe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8143 	beq.w	8005bbe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 813c 	beq.w	8005bbe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2210      	movs	r2, #16
 800594c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	f040 80b5 	bne.w	8005ac8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800596a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8187 	beq.w	8005c82 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800597a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800597e:	429a      	cmp	r2, r3
 8005980:	f080 817f 	bcs.w	8005c82 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800598a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 8086 	bne.w	8005aac <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1da      	bne.n	80059a0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e1      	bne.n	80059ea <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e3      	bne.n	8005a26 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7c:	f023 0310 	bic.w	r3, r3, #16
 8005a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e4      	bne.n	8005a6c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fc f845 	bl	8001b36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8fb 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ac6:	e0dc      	b.n	8005c82 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80ce 	beq.w	8005c86 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80c9 	beq.w	8005c86 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b16:	647b      	str	r3, [r7, #68]	; 0x44
 8005b18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e4      	bne.n	8005af4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	623b      	str	r3, [r7, #32]
   return(result);
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b52:	633a      	str	r2, [r7, #48]	; 0x30
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e1      	bne.n	8005b2a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	69b9      	ldr	r1, [r7, #24]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e4      	bne.n	8005b7a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f880 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bbc:	e063      	b.n	8005c86 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00e      	beq.n	8005be8 <HAL_UART_IRQHandler+0x584>
 8005bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 fb2b 	bl	800723c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005be6:	e051      	b.n	8005c8c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d014      	beq.n	8005c1e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d03a      	beq.n	8005c8a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
    }
    return;
 8005c1c:	e035      	b.n	8005c8a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_UART_IRQHandler+0x5da>
 8005c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fe70 	bl	800691c <UART_EndTransmit_IT>
    return;
 8005c3c:	e026      	b.n	8005c8c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_UART_IRQHandler+0x5fa>
 8005c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 fb04 	bl	8007264 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c5c:	e016      	b.n	8005c8c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d010      	beq.n	8005c8c <HAL_UART_IRQHandler+0x628>
 8005c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da0c      	bge.n	8005c8c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 faec 	bl	8007250 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c78:	e008      	b.n	8005c8c <HAL_UART_IRQHandler+0x628>
      return;
 8005c7a:	bf00      	nop
 8005c7c:	e006      	b.n	8005c8c <HAL_UART_IRQHandler+0x628>
    return;
 8005c7e:	bf00      	nop
 8005c80:	e004      	b.n	8005c8c <HAL_UART_IRQHandler+0x628>
      return;
 8005c82:	bf00      	nop
 8005c84:	e002      	b.n	8005c8c <HAL_UART_IRQHandler+0x628>
      return;
 8005c86:	bf00      	nop
 8005c88:	e000      	b.n	8005c8c <HAL_UART_IRQHandler+0x628>
    return;
 8005c8a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c8c:	37e8      	adds	r7, #232	; 0xe8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop

08005c94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd4:	b5b0      	push	{r4, r5, r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4bb1      	ldr	r3, [pc, #708]	; (8005fc4 <UART_SetConfig+0x2f0>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	69f9      	ldr	r1, [r7, #28]
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4aa6      	ldr	r2, [pc, #664]	; (8005fc8 <UART_SetConfig+0x2f4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d46:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	69f9      	ldr	r1, [r7, #28]
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	f023 010f 	bic.w	r1, r3, #15
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a97      	ldr	r2, [pc, #604]	; (8005fcc <UART_SetConfig+0x2f8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d120      	bne.n	8005db6 <UART_SetConfig+0xe2>
 8005d74:	4b96      	ldr	r3, [pc, #600]	; (8005fd0 <UART_SetConfig+0x2fc>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d816      	bhi.n	8005db0 <UART_SetConfig+0xdc>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <UART_SetConfig+0xb4>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005d99 	.word	0x08005d99
 8005d8c:	08005da5 	.word	0x08005da5
 8005d90:	08005d9f 	.word	0x08005d9f
 8005d94:	08005dab 	.word	0x08005dab
 8005d98:	2301      	movs	r3, #1
 8005d9a:	76fb      	strb	r3, [r7, #27]
 8005d9c:	e0e7      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	76fb      	strb	r3, [r7, #27]
 8005da2:	e0e4      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005da4:	2304      	movs	r3, #4
 8005da6:	76fb      	strb	r3, [r7, #27]
 8005da8:	e0e1      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005daa:	2308      	movs	r3, #8
 8005dac:	76fb      	strb	r3, [r7, #27]
 8005dae:	e0de      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005db0:	2310      	movs	r3, #16
 8005db2:	76fb      	strb	r3, [r7, #27]
 8005db4:	e0db      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a86      	ldr	r2, [pc, #536]	; (8005fd4 <UART_SetConfig+0x300>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d132      	bne.n	8005e26 <UART_SetConfig+0x152>
 8005dc0:	4b83      	ldr	r3, [pc, #524]	; (8005fd0 <UART_SetConfig+0x2fc>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	f003 030c 	and.w	r3, r3, #12
 8005dca:	2b0c      	cmp	r3, #12
 8005dcc:	d828      	bhi.n	8005e20 <UART_SetConfig+0x14c>
 8005dce:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <UART_SetConfig+0x100>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e21 	.word	0x08005e21
 8005de0:	08005e21 	.word	0x08005e21
 8005de4:	08005e15 	.word	0x08005e15
 8005de8:	08005e21 	.word	0x08005e21
 8005dec:	08005e21 	.word	0x08005e21
 8005df0:	08005e21 	.word	0x08005e21
 8005df4:	08005e0f 	.word	0x08005e0f
 8005df8:	08005e21 	.word	0x08005e21
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e21 	.word	0x08005e21
 8005e04:	08005e1b 	.word	0x08005e1b
 8005e08:	2300      	movs	r3, #0
 8005e0a:	76fb      	strb	r3, [r7, #27]
 8005e0c:	e0af      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	76fb      	strb	r3, [r7, #27]
 8005e12:	e0ac      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e14:	2304      	movs	r3, #4
 8005e16:	76fb      	strb	r3, [r7, #27]
 8005e18:	e0a9      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	76fb      	strb	r3, [r7, #27]
 8005e1e:	e0a6      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e20:	2310      	movs	r3, #16
 8005e22:	76fb      	strb	r3, [r7, #27]
 8005e24:	e0a3      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a6b      	ldr	r2, [pc, #428]	; (8005fd8 <UART_SetConfig+0x304>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d120      	bne.n	8005e72 <UART_SetConfig+0x19e>
 8005e30:	4b67      	ldr	r3, [pc, #412]	; (8005fd0 <UART_SetConfig+0x2fc>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e3a:	2b30      	cmp	r3, #48	; 0x30
 8005e3c:	d013      	beq.n	8005e66 <UART_SetConfig+0x192>
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d814      	bhi.n	8005e6c <UART_SetConfig+0x198>
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d009      	beq.n	8005e5a <UART_SetConfig+0x186>
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d810      	bhi.n	8005e6c <UART_SetConfig+0x198>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <UART_SetConfig+0x180>
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d006      	beq.n	8005e60 <UART_SetConfig+0x18c>
 8005e52:	e00b      	b.n	8005e6c <UART_SetConfig+0x198>
 8005e54:	2300      	movs	r3, #0
 8005e56:	76fb      	strb	r3, [r7, #27]
 8005e58:	e089      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	76fb      	strb	r3, [r7, #27]
 8005e5e:	e086      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e60:	2304      	movs	r3, #4
 8005e62:	76fb      	strb	r3, [r7, #27]
 8005e64:	e083      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e66:	2308      	movs	r3, #8
 8005e68:	76fb      	strb	r3, [r7, #27]
 8005e6a:	e080      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	76fb      	strb	r3, [r7, #27]
 8005e70:	e07d      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a59      	ldr	r2, [pc, #356]	; (8005fdc <UART_SetConfig+0x308>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d120      	bne.n	8005ebe <UART_SetConfig+0x1ea>
 8005e7c:	4b54      	ldr	r3, [pc, #336]	; (8005fd0 <UART_SetConfig+0x2fc>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e86:	2bc0      	cmp	r3, #192	; 0xc0
 8005e88:	d013      	beq.n	8005eb2 <UART_SetConfig+0x1de>
 8005e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e8c:	d814      	bhi.n	8005eb8 <UART_SetConfig+0x1e4>
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	d009      	beq.n	8005ea6 <UART_SetConfig+0x1d2>
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d810      	bhi.n	8005eb8 <UART_SetConfig+0x1e4>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <UART_SetConfig+0x1cc>
 8005e9a:	2b40      	cmp	r3, #64	; 0x40
 8005e9c:	d006      	beq.n	8005eac <UART_SetConfig+0x1d8>
 8005e9e:	e00b      	b.n	8005eb8 <UART_SetConfig+0x1e4>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	76fb      	strb	r3, [r7, #27]
 8005ea4:	e063      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	76fb      	strb	r3, [r7, #27]
 8005eaa:	e060      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005eac:	2304      	movs	r3, #4
 8005eae:	76fb      	strb	r3, [r7, #27]
 8005eb0:	e05d      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	76fb      	strb	r3, [r7, #27]
 8005eb6:	e05a      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	76fb      	strb	r3, [r7, #27]
 8005ebc:	e057      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a47      	ldr	r2, [pc, #284]	; (8005fe0 <UART_SetConfig+0x30c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d125      	bne.n	8005f14 <UART_SetConfig+0x240>
 8005ec8:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <UART_SetConfig+0x2fc>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ed6:	d017      	beq.n	8005f08 <UART_SetConfig+0x234>
 8005ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005edc:	d817      	bhi.n	8005f0e <UART_SetConfig+0x23a>
 8005ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee2:	d00b      	beq.n	8005efc <UART_SetConfig+0x228>
 8005ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee8:	d811      	bhi.n	8005f0e <UART_SetConfig+0x23a>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <UART_SetConfig+0x222>
 8005eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef2:	d006      	beq.n	8005f02 <UART_SetConfig+0x22e>
 8005ef4:	e00b      	b.n	8005f0e <UART_SetConfig+0x23a>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	76fb      	strb	r3, [r7, #27]
 8005efa:	e038      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005efc:	2302      	movs	r3, #2
 8005efe:	76fb      	strb	r3, [r7, #27]
 8005f00:	e035      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f02:	2304      	movs	r3, #4
 8005f04:	76fb      	strb	r3, [r7, #27]
 8005f06:	e032      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	76fb      	strb	r3, [r7, #27]
 8005f0c:	e02f      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f0e:	2310      	movs	r3, #16
 8005f10:	76fb      	strb	r3, [r7, #27]
 8005f12:	e02c      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a2b      	ldr	r2, [pc, #172]	; (8005fc8 <UART_SetConfig+0x2f4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d125      	bne.n	8005f6a <UART_SetConfig+0x296>
 8005f1e:	4b2c      	ldr	r3, [pc, #176]	; (8005fd0 <UART_SetConfig+0x2fc>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f2c:	d017      	beq.n	8005f5e <UART_SetConfig+0x28a>
 8005f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f32:	d817      	bhi.n	8005f64 <UART_SetConfig+0x290>
 8005f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f38:	d00b      	beq.n	8005f52 <UART_SetConfig+0x27e>
 8005f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3e:	d811      	bhi.n	8005f64 <UART_SetConfig+0x290>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <UART_SetConfig+0x278>
 8005f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f48:	d006      	beq.n	8005f58 <UART_SetConfig+0x284>
 8005f4a:	e00b      	b.n	8005f64 <UART_SetConfig+0x290>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	76fb      	strb	r3, [r7, #27]
 8005f50:	e00d      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	76fb      	strb	r3, [r7, #27]
 8005f56:	e00a      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	76fb      	strb	r3, [r7, #27]
 8005f5c:	e007      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	76fb      	strb	r3, [r7, #27]
 8005f62:	e004      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f64:	2310      	movs	r3, #16
 8005f66:	76fb      	strb	r3, [r7, #27]
 8005f68:	e001      	b.n	8005f6e <UART_SetConfig+0x29a>
 8005f6a:	2310      	movs	r3, #16
 8005f6c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <UART_SetConfig+0x2f4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	f040 809f 	bne.w	80060b8 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f7a:	7efb      	ldrb	r3, [r7, #27]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d837      	bhi.n	8005ff0 <UART_SetConfig+0x31c>
 8005f80:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0x2b4>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005ff1 	.word	0x08005ff1
 8005f90:	08005fb5 	.word	0x08005fb5
 8005f94:	08005ff1 	.word	0x08005ff1
 8005f98:	08005fbb 	.word	0x08005fbb
 8005f9c:	08005ff1 	.word	0x08005ff1
 8005fa0:	08005ff1 	.word	0x08005ff1
 8005fa4:	08005ff1 	.word	0x08005ff1
 8005fa8:	08005fe9 	.word	0x08005fe9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fac:	f7fd f826 	bl	8002ffc <HAL_RCC_GetPCLK1Freq>
 8005fb0:	6178      	str	r0, [r7, #20]
        break;
 8005fb2:	e022      	b.n	8005ffa <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <UART_SetConfig+0x310>)
 8005fb6:	617b      	str	r3, [r7, #20]
        break;
 8005fb8:	e01f      	b.n	8005ffa <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fba:	f7fc ff87 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8005fbe:	6178      	str	r0, [r7, #20]
        break;
 8005fc0:	e01b      	b.n	8005ffa <UART_SetConfig+0x326>
 8005fc2:	bf00      	nop
 8005fc4:	cfff69f3 	.word	0xcfff69f3
 8005fc8:	40008000 	.word	0x40008000
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40004400 	.word	0x40004400
 8005fd8:	40004800 	.word	0x40004800
 8005fdc:	40004c00 	.word	0x40004c00
 8005fe0:	40005000 	.word	0x40005000
 8005fe4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fec:	617b      	str	r3, [r7, #20]
        break;
 8005fee:	e004      	b.n	8005ffa <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	76bb      	strb	r3, [r7, #26]
        break;
 8005ff8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8119 	beq.w	8006234 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	4a95      	ldr	r2, [pc, #596]	; (800625c <UART_SetConfig+0x588>)
 8006008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800600c:	461a      	mov	r2, r3
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	fbb3 f3f2 	udiv	r3, r3, r2
 8006014:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	429a      	cmp	r2, r3
 8006024:	d305      	bcc.n	8006032 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	429a      	cmp	r2, r3
 8006030:	d902      	bls.n	8006038 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	76bb      	strb	r3, [r7, #26]
 8006036:	e0fd      	b.n	8006234 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4618      	mov	r0, r3
 800603c:	f04f 0100 	mov.w	r1, #0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	4a85      	ldr	r2, [pc, #532]	; (800625c <UART_SetConfig+0x588>)
 8006046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800604a:	b29a      	uxth	r2, r3
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	f7fa fe0a 	bl	8000c68 <__aeabi_uldivmod>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	020b      	lsls	r3, r1, #8
 8006066:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800606a:	0202      	lsls	r2, r0, #8
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	6849      	ldr	r1, [r1, #4]
 8006070:	0849      	lsrs	r1, r1, #1
 8006072:	4608      	mov	r0, r1
 8006074:	f04f 0100 	mov.w	r1, #0
 8006078:	1814      	adds	r4, r2, r0
 800607a:	eb43 0501 	adc.w	r5, r3, r1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	461a      	mov	r2, r3
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	4620      	mov	r0, r4
 800608a:	4629      	mov	r1, r5
 800608c:	f7fa fdec 	bl	8000c68 <__aeabi_uldivmod>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4613      	mov	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800609e:	d308      	bcc.n	80060b2 <UART_SetConfig+0x3de>
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a6:	d204      	bcs.n	80060b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	60da      	str	r2, [r3, #12]
 80060b0:	e0c0      	b.n	8006234 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	76bb      	strb	r3, [r7, #26]
 80060b6:	e0bd      	b.n	8006234 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c0:	d164      	bne.n	800618c <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80060c2:	7efb      	ldrb	r3, [r7, #27]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d828      	bhi.n	800611a <UART_SetConfig+0x446>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x3fc>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	0800611b 	.word	0x0800611b
 80060e0:	0800610b 	.word	0x0800610b
 80060e4:	0800611b 	.word	0x0800611b
 80060e8:	0800611b 	.word	0x0800611b
 80060ec:	0800611b 	.word	0x0800611b
 80060f0:	08006113 	.word	0x08006113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f4:	f7fc ff82 	bl	8002ffc <HAL_RCC_GetPCLK1Freq>
 80060f8:	6178      	str	r0, [r7, #20]
        break;
 80060fa:	e013      	b.n	8006124 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fc ff94 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 8006100:	6178      	str	r0, [r7, #20]
        break;
 8006102:	e00f      	b.n	8006124 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b56      	ldr	r3, [pc, #344]	; (8006260 <UART_SetConfig+0x58c>)
 8006106:	617b      	str	r3, [r7, #20]
        break;
 8006108:	e00c      	b.n	8006124 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7fc fedf 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 800610e:	6178      	str	r0, [r7, #20]
        break;
 8006110:	e008      	b.n	8006124 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006116:	617b      	str	r3, [r7, #20]
        break;
 8006118:	e004      	b.n	8006124 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	76bb      	strb	r3, [r7, #26]
        break;
 8006122:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8084 	beq.w	8006234 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	4a4a      	ldr	r2, [pc, #296]	; (800625c <UART_SetConfig+0x588>)
 8006132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006136:	461a      	mov	r2, r3
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	fbb3 f3f2 	udiv	r3, r3, r2
 800613e:	005a      	lsls	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	441a      	add	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b0f      	cmp	r3, #15
 8006156:	d916      	bls.n	8006186 <UART_SetConfig+0x4b2>
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615e:	d212      	bcs.n	8006186 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f023 030f 	bic.w	r3, r3, #15
 8006168:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	b29b      	uxth	r3, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	b29a      	uxth	r2, r3
 8006176:	89fb      	ldrh	r3, [r7, #14]
 8006178:	4313      	orrs	r3, r2
 800617a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	89fa      	ldrh	r2, [r7, #14]
 8006182:	60da      	str	r2, [r3, #12]
 8006184:	e056      	b.n	8006234 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	76bb      	strb	r3, [r7, #26]
 800618a:	e053      	b.n	8006234 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 800618c:	7efb      	ldrb	r3, [r7, #27]
 800618e:	2b08      	cmp	r3, #8
 8006190:	d827      	bhi.n	80061e2 <UART_SetConfig+0x50e>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <UART_SetConfig+0x4c4>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061c5 	.word	0x080061c5
 80061a0:	080061cd 	.word	0x080061cd
 80061a4:	080061e3 	.word	0x080061e3
 80061a8:	080061d3 	.word	0x080061d3
 80061ac:	080061e3 	.word	0x080061e3
 80061b0:	080061e3 	.word	0x080061e3
 80061b4:	080061e3 	.word	0x080061e3
 80061b8:	080061db 	.word	0x080061db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061bc:	f7fc ff1e 	bl	8002ffc <HAL_RCC_GetPCLK1Freq>
 80061c0:	6178      	str	r0, [r7, #20]
        break;
 80061c2:	e013      	b.n	80061ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c4:	f7fc ff30 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 80061c8:	6178      	str	r0, [r7, #20]
        break;
 80061ca:	e00f      	b.n	80061ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061cc:	4b24      	ldr	r3, [pc, #144]	; (8006260 <UART_SetConfig+0x58c>)
 80061ce:	617b      	str	r3, [r7, #20]
        break;
 80061d0:	e00c      	b.n	80061ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061d2:	f7fc fe7b 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 80061d6:	6178      	str	r0, [r7, #20]
        break;
 80061d8:	e008      	b.n	80061ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061de:	617b      	str	r3, [r7, #20]
        break;
 80061e0:	e004      	b.n	80061ec <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	76bb      	strb	r3, [r7, #26]
        break;
 80061ea:	bf00      	nop
    }

    if (pclk != 0U)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d020      	beq.n	8006234 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	4a19      	ldr	r2, [pc, #100]	; (800625c <UART_SetConfig+0x588>)
 80061f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fc:	461a      	mov	r2, r3
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	fbb3 f2f2 	udiv	r2, r3, r2
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	441a      	add	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b0f      	cmp	r3, #15
 800621a:	d909      	bls.n	8006230 <UART_SetConfig+0x55c>
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006222:	d205      	bcs.n	8006230 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	b29a      	uxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60da      	str	r2, [r3, #12]
 800622e:	e001      	b.n	8006234 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006250:	7ebb      	ldrb	r3, [r7, #26]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bdb0      	pop	{r4, r5, r7, pc}
 800625a:	bf00      	nop
 800625c:	0800e484 	.word	0x0800e484
 8006260:	00f42400 	.word	0x00f42400

08006264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01a      	beq.n	800637a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006362:	d10a      	bne.n	800637a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	605a      	str	r2, [r3, #4]
  }
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063b8:	f7fa fdfe 	bl	8000fb8 <HAL_GetTick>
 80063bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d10e      	bne.n	80063ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f82f 	bl	800643e <UART_WaitOnFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e025      	b.n	8006436 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d10e      	bne.n	8006416 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f819 	bl	800643e <UART_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e00f      	b.n	8006436 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b09c      	sub	sp, #112	; 0x70
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	603b      	str	r3, [r7, #0]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644e:	e0a9      	b.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	f000 80a5 	beq.w	80065a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645a:	f7fa fdad 	bl	8000fb8 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <UART_WaitOnFlagUntilTimeout+0x32>
 800646a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646c:	2b00      	cmp	r3, #0
 800646e:	d140      	bne.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800647e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006484:	667b      	str	r3, [r7, #100]	; 0x64
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800648e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006490:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006494:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800649c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e6      	bne.n	8006470 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3308      	adds	r3, #8
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	663b      	str	r3, [r7, #96]	; 0x60
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3308      	adds	r3, #8
 80064c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80064c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e5      	bne.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e069      	b.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d051      	beq.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650e:	d149      	bne.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006518:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800652e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
 800653a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800653e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e6      	bne.n	800651a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	613b      	str	r3, [r7, #16]
   return(result);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f023 0301 	bic.w	r3, r3, #1
 8006562:	66bb      	str	r3, [r7, #104]	; 0x68
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3308      	adds	r3, #8
 800656a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800656c:	623a      	str	r2, [r7, #32]
 800656e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69f9      	ldr	r1, [r7, #28]
 8006572:	6a3a      	ldr	r2, [r7, #32]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	61bb      	str	r3, [r7, #24]
   return(result);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e5      	bne.n	800654c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e010      	b.n	80065c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69da      	ldr	r2, [r3, #28]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4013      	ands	r3, r2
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	bf0c      	ite	eq
 80065b4:	2301      	moveq	r3, #1
 80065b6:	2300      	movne	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	429a      	cmp	r2, r3
 80065c0:	f43f af46 	beq.w	8006450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3770      	adds	r7, #112	; 0x70
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b0a3      	sub	sp, #140	; 0x8c
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006602:	d10e      	bne.n	8006622 <UART_Start_Receive_IT+0x52>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d105      	bne.n	8006618 <UART_Start_Receive_IT+0x48>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006612:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006616:	e02d      	b.n	8006674 <UART_Start_Receive_IT+0xa4>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	22ff      	movs	r2, #255	; 0xff
 800661c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006620:	e028      	b.n	8006674 <UART_Start_Receive_IT+0xa4>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10d      	bne.n	8006646 <UART_Start_Receive_IT+0x76>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <UART_Start_Receive_IT+0x6c>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	22ff      	movs	r2, #255	; 0xff
 8006636:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800663a:	e01b      	b.n	8006674 <UART_Start_Receive_IT+0xa4>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	227f      	movs	r2, #127	; 0x7f
 8006640:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006644:	e016      	b.n	8006674 <UART_Start_Receive_IT+0xa4>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800664e:	d10d      	bne.n	800666c <UART_Start_Receive_IT+0x9c>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <UART_Start_Receive_IT+0x92>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	227f      	movs	r2, #127	; 0x7f
 800665c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006660:	e008      	b.n	8006674 <UART_Start_Receive_IT+0xa4>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	223f      	movs	r2, #63	; 0x3f
 8006666:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800666a:	e003      	b.n	8006674 <UART_Start_Receive_IT+0xa4>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2222      	movs	r2, #34	; 0x22
 8006680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80066a8:	673a      	str	r2, [r7, #112]	; 0x70
 80066aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80066ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80066b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e3      	bne.n	8006684 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c4:	d153      	bne.n	800676e <UART_Start_Receive_IT+0x19e>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d34d      	bcc.n	800676e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066da:	d107      	bne.n	80066ec <UART_Start_Receive_IT+0x11c>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a4b      	ldr	r2, [pc, #300]	; (8006814 <UART_Start_Receive_IT+0x244>)
 80066e8:	671a      	str	r2, [r3, #112]	; 0x70
 80066ea:	e002      	b.n	80066f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a4a      	ldr	r2, [pc, #296]	; (8006818 <UART_Start_Receive_IT+0x248>)
 80066f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01a      	beq.n	8006738 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006726:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800672a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e4      	bne.n	8006702 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800674e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006758:	64ba      	str	r2, [r7, #72]	; 0x48
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800675e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e5      	bne.n	8006738 <UART_Start_Receive_IT+0x168>
 800676c:	e04a      	b.n	8006804 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	d107      	bne.n	8006788 <UART_Start_Receive_IT+0x1b8>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a26      	ldr	r2, [pc, #152]	; (800681c <UART_Start_Receive_IT+0x24c>)
 8006784:	671a      	str	r2, [r3, #112]	; 0x70
 8006786:	e002      	b.n	800678e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a25      	ldr	r2, [pc, #148]	; (8006820 <UART_Start_Receive_IT+0x250>)
 800678c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d019      	beq.n	80067d2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067b2:	677b      	str	r3, [r7, #116]	; 0x74
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34
 80067be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e6      	bne.n	800679e <UART_Start_Receive_IT+0x1ce>
 80067d0:	e018      	b.n	8006804 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	613b      	str	r3, [r7, #16]
   return(result);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f043 0320 	orr.w	r3, r3, #32
 80067e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f0:	623b      	str	r3, [r7, #32]
 80067f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	69f9      	ldr	r1, [r7, #28]
 80067f6:	6a3a      	ldr	r2, [r7, #32]
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e6      	bne.n	80067d2 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	378c      	adds	r7, #140	; 0x8c
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	08006f39 	.word	0x08006f39
 8006818:	08006c3d 	.word	0x08006c3d
 800681c:	08006ad7 	.word	0x08006ad7
 8006820:	08006973 	.word	0x08006973

08006824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b095      	sub	sp, #84	; 0x54
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684a:	643b      	str	r3, [r7, #64]	; 0x40
 800684c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3308      	adds	r3, #8
 8006864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	61fb      	str	r3, [r7, #28]
   return(result);
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006874:	f023 0301 	bic.w	r3, r3, #1
 8006878:	64bb      	str	r3, [r7, #72]	; 0x48
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e3      	bne.n	800685e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689a:	2b01      	cmp	r3, #1
 800689c:	d118      	bne.n	80068d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f023 0310 	bic.w	r3, r3, #16
 80068b2:	647b      	str	r3, [r7, #68]	; 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6979      	ldr	r1, [r7, #20]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e6      	bne.n	800689e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80068e4:	bf00      	nop
 80068e6:	3754      	adds	r7, #84	; 0x54
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff f9ca 	bl	8005ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	60bb      	str	r3, [r7, #8]
   return(result);
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6979      	ldr	r1, [r7, #20]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	613b      	str	r3, [r7, #16]
   return(result);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff f995 	bl	8005c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800696a:	bf00      	nop
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b096      	sub	sp, #88	; 0x58
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006980:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698a:	2b22      	cmp	r3, #34	; 0x22
 800698c:	f040 8095 	bne.w	8006aba <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006996:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800699a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800699e:	b2d9      	uxtb	r1, r3
 80069a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069aa:	400a      	ands	r2, r1
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d17a      	bne.n	8006ace <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ec:	653b      	str	r3, [r7, #80]	; 0x50
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f6:	647b      	str	r3, [r7, #68]	; 0x44
 80069f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e6      	bne.n	80069d8 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a2a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d12e      	bne.n	8006ab2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0310 	bic.w	r3, r3, #16
 8006a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	617b      	str	r3, [r7, #20]
   return(result);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e6      	bne.n	8006a5a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	2b10      	cmp	r3, #16
 8006a98:	d103      	bne.n	8006aa2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff f906 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ab0:	e00d      	b.n	8006ace <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f004 f9c4 	bl	800ae40 <HAL_UART_RxCpltCallback>
}
 8006ab8:	e009      	b.n	8006ace <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	8b1b      	ldrh	r3, [r3, #24]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0208 	orr.w	r2, r2, #8
 8006aca:	b292      	uxth	r2, r2
 8006acc:	831a      	strh	r2, [r3, #24]
}
 8006ace:	bf00      	nop
 8006ad0:	3758      	adds	r7, #88	; 0x58
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b096      	sub	sp, #88	; 0x58
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ae4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	2b22      	cmp	r3, #34	; 0x22
 8006af0:	f040 8095 	bne.w	8006c1e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006afa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b02:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b04:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b12:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b18:	1c9a      	adds	r2, r3, #2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d17a      	bne.n	8006c32 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e6      	bne.n	8006b3c <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e5      	bne.n	8006b6e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d12e      	bne.n	8006c16 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f023 0310 	bic.w	r3, r3, #16
 8006bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6979      	ldr	r1, [r7, #20]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e6      	bne.n	8006bbe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b10      	cmp	r3, #16
 8006bfc:	d103      	bne.n	8006c06 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2210      	movs	r2, #16
 8006c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff f854 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c14:	e00d      	b.n	8006c32 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f004 f912 	bl	800ae40 <HAL_UART_RxCpltCallback>
}
 8006c1c:	e009      	b.n	8006c32 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	8b1b      	ldrh	r3, [r3, #24]
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0208 	orr.w	r2, r2, #8
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	831a      	strh	r2, [r3, #24]
}
 8006c32:	bf00      	nop
 8006c34:	3758      	adds	r7, #88	; 0x58
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b0a6      	sub	sp, #152	; 0x98
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c4a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	2b22      	cmp	r3, #34	; 0x22
 8006c74:	f040 814f 	bne.w	8006f16 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c7e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c82:	e0f6      	b.n	8006e72 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c8a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c8e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006c92:	b2d9      	uxtb	r1, r3
 8006c94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	400a      	ands	r2, r1
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d053      	beq.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d011      	beq.n	8006d06 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfc:	f043 0201 	orr.w	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d011      	beq.n	8006d36 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2202      	movs	r2, #2
 8006d24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d2c:	f043 0204 	orr.w	r2, r3, #4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d011      	beq.n	8006d66 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00b      	beq.n	8006d66 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2204      	movs	r2, #4
 8006d54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5c:	f043 0202 	orr.w	r2, r3, #2
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7fe ff99 	bl	8005ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d173      	bne.n	8006e72 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dae:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e4      	bne.n	8006d8a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006de4:	657a      	str	r2, [r7, #84]	; 0x54
 8006de6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e3      	bne.n	8006dc0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d12e      	bne.n	8006e6c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	f023 0310 	bic.w	r3, r3, #16
 8006e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e32:	643b      	str	r3, [r7, #64]	; 0x40
 8006e34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e6      	bne.n	8006e14 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d103      	bne.n	8006e5c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2210      	movs	r2, #16
 8006e5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fe ff29 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
 8006e6a:	e002      	b.n	8006e72 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f003 ffe7 	bl	800ae40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d006      	beq.n	8006e88 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f47f aefe 	bne.w	8006c84 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e92:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d047      	beq.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ea0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d240      	bcs.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e5      	bne.n	8006ea8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a15      	ldr	r2, [pc, #84]	; (8006f34 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8006ee0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f043 0320 	orr.w	r3, r3, #32
 8006ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6979      	ldr	r1, [r7, #20]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e6      	bne.n	8006ee2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f14:	e009      	b.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	8b1b      	ldrh	r3, [r3, #24]
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0208 	orr.w	r2, r2, #8
 8006f26:	b292      	uxth	r2, r2
 8006f28:	831a      	strh	r2, [r3, #24]
}
 8006f2a:	bf00      	nop
 8006f2c:	3798      	adds	r7, #152	; 0x98
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	08006973 	.word	0x08006973

08006f38 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b0a8      	sub	sp, #160	; 0xa0
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f46:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6e:	2b22      	cmp	r3, #34	; 0x22
 8006f70:	f040 8153 	bne.w	800721a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f7a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f7e:	e0fa      	b.n	8007176 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f86:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f92:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006f96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fa2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa8:	1c9a      	adds	r2, r3, #2
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d053      	beq.n	800707e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d011      	beq.n	8007006 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006fe2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ffc:	f043 0201 	orr.w	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d011      	beq.n	8007036 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007012:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00b      	beq.n	8007036 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2202      	movs	r2, #2
 8007024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800702c:	f043 0204 	orr.w	r2, r3, #4
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007036:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d011      	beq.n	8007066 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007042:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2204      	movs	r2, #4
 8007054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705c:	f043 0202 	orr.w	r2, r3, #2
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d006      	beq.n	800707e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fe fe19 	bl	8005ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d175      	bne.n	8007176 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800709a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070ae:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e4      	bne.n	800708a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3308      	adds	r3, #8
 80070c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d6:	f023 0301 	bic.w	r3, r3, #1
 80070da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3308      	adds	r3, #8
 80070e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80070ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e1      	bne.n	80070c0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800710e:	2b01      	cmp	r3, #1
 8007110:	d12e      	bne.n	8007170 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007128:	f023 0310 	bic.w	r3, r3, #16
 800712c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007136:	647b      	str	r3, [r7, #68]	; 0x44
 8007138:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800713c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e6      	bne.n	8007118 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b10      	cmp	r3, #16
 8007156:	d103      	bne.n	8007160 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2210      	movs	r2, #16
 800715e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fe fda7 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
 800716e:	e002      	b.n	8007176 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f003 fe65 	bl	800ae40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007176:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800717a:	2b00      	cmp	r3, #0
 800717c:	d006      	beq.n	800718c <UART_RxISR_16BIT_FIFOEN+0x254>
 800717e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	f47f aefa 	bne.w	8006f80 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007192:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007196:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800719a:	2b00      	cmp	r3, #0
 800719c:	d047      	beq.n	800722e <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071a4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d240      	bcs.n	800722e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	3308      	adds	r3, #8
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	623b      	str	r3, [r7, #32]
   return(result);
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071c2:	677b      	str	r3, [r7, #116]	; 0x74
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80071cc:	633a      	str	r2, [r7, #48]	; 0x30
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a15      	ldr	r2, [pc, #84]	; (8007238 <UART_RxISR_16BIT_FIFOEN+0x300>)
 80071e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	e853 3f00 	ldrex	r3, [r3]
 80071f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f043 0320 	orr.w	r3, r3, #32
 80071fa:	673b      	str	r3, [r7, #112]	; 0x70
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	69b9      	ldr	r1, [r7, #24]
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	e841 2300 	strex	r3, r2, [r1]
 8007210:	617b      	str	r3, [r7, #20]
   return(result);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e6      	bne.n	80071e6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007218:	e009      	b.n	800722e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	8b1b      	ldrh	r3, [r3, #24]
 8007220:	b29a      	uxth	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0208 	orr.w	r2, r2, #8
 800722a:	b292      	uxth	r2, r2
 800722c:	831a      	strh	r2, [r3, #24]
}
 800722e:	bf00      	nop
 8007230:	37a0      	adds	r7, #160	; 0xa0
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	08006ad7 	.word	0x08006ad7

0800723c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_UARTEx_DisableFifoMode+0x16>
 800728a:	2302      	movs	r3, #2
 800728c:	e027      	b.n	80072de <HAL_UARTEx_DisableFifoMode+0x66>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2224      	movs	r2, #36	; 0x24
 800729a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d101      	bne.n	8007302 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072fe:	2302      	movs	r3, #2
 8007300:	e02d      	b.n	800735e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2224      	movs	r2, #36	; 0x24
 800730e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0201 	bic.w	r2, r2, #1
 8007328:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f850 	bl	80073e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800737a:	2302      	movs	r3, #2
 800737c:	e02d      	b.n	80073da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2224      	movs	r2, #36	; 0x24
 800738a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0201 	bic.w	r2, r2, #1
 80073a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f812 	bl	80073e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d108      	bne.n	8007406 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007404:	e031      	b.n	800746a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007406:	2308      	movs	r3, #8
 8007408:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800740a:	2308      	movs	r3, #8
 800740c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	0e5b      	lsrs	r3, r3, #25
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	0f5b      	lsrs	r3, r3, #29
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	7b3a      	ldrb	r2, [r7, #12]
 8007432:	4911      	ldr	r1, [pc, #68]	; (8007478 <UARTEx_SetNbDataToProcess+0x94>)
 8007434:	5c8a      	ldrb	r2, [r1, r2]
 8007436:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800743a:	7b3a      	ldrb	r2, [r7, #12]
 800743c:	490f      	ldr	r1, [pc, #60]	; (800747c <UARTEx_SetNbDataToProcess+0x98>)
 800743e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007440:	fb93 f3f2 	sdiv	r3, r3, r2
 8007444:	b29a      	uxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	7b7a      	ldrb	r2, [r7, #13]
 8007450:	4909      	ldr	r1, [pc, #36]	; (8007478 <UARTEx_SetNbDataToProcess+0x94>)
 8007452:	5c8a      	ldrb	r2, [r1, r2]
 8007454:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007458:	7b7a      	ldrb	r2, [r7, #13]
 800745a:	4908      	ldr	r1, [pc, #32]	; (800747c <UARTEx_SetNbDataToProcess+0x98>)
 800745c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800745e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007462:	b29a      	uxth	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	0800e49c 	.word	0x0800e49c
 800747c:	0800e4a4 	.word	0x0800e4a4

08007480 <__NVIC_SetPriority>:
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800748c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007490:	2b00      	cmp	r3, #0
 8007492:	db0a      	blt.n	80074aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	b2da      	uxtb	r2, r3
 8007498:	490c      	ldr	r1, [pc, #48]	; (80074cc <__NVIC_SetPriority+0x4c>)
 800749a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800749e:	0112      	lsls	r2, r2, #4
 80074a0:	b2d2      	uxtb	r2, r2
 80074a2:	440b      	add	r3, r1
 80074a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80074a8:	e00a      	b.n	80074c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	4908      	ldr	r1, [pc, #32]	; (80074d0 <__NVIC_SetPriority+0x50>)
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	3b04      	subs	r3, #4
 80074b8:	0112      	lsls	r2, r2, #4
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	440b      	add	r3, r1
 80074be:	761a      	strb	r2, [r3, #24]
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	e000e100 	.word	0xe000e100
 80074d0:	e000ed00 	.word	0xe000ed00

080074d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <SysTick_Handler+0x1c>)
 80074da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074dc:	f001 fd28 	bl	8008f30 <xTaskGetSchedulerState>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d001      	beq.n	80074ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80074e6:	f002 fb0f 	bl	8009b08 <xPortSysTickHandler>
  }
}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	e000e010 	.word	0xe000e010

080074f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074f8:	2100      	movs	r1, #0
 80074fa:	f06f 0004 	mvn.w	r0, #4
 80074fe:	f7ff ffbf 	bl	8007480 <__NVIC_SetPriority>
#endif
}
 8007502:	bf00      	nop
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800750e:	f3ef 8305 	mrs	r3, IPSR
 8007512:	603b      	str	r3, [r7, #0]
  return(result);
 8007514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800751a:	f06f 0305 	mvn.w	r3, #5
 800751e:	607b      	str	r3, [r7, #4]
 8007520:	e00c      	b.n	800753c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007522:	4b0a      	ldr	r3, [pc, #40]	; (800754c <osKernelInitialize+0x44>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d105      	bne.n	8007536 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800752a:	4b08      	ldr	r3, [pc, #32]	; (800754c <osKernelInitialize+0x44>)
 800752c:	2201      	movs	r2, #1
 800752e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007530:	2300      	movs	r3, #0
 8007532:	607b      	str	r3, [r7, #4]
 8007534:	e002      	b.n	800753c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007536:	f04f 33ff 	mov.w	r3, #4294967295
 800753a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800753c:	687b      	ldr	r3, [r7, #4]
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	200006c8 	.word	0x200006c8

08007550 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007556:	f3ef 8305 	mrs	r3, IPSR
 800755a:	603b      	str	r3, [r7, #0]
  return(result);
 800755c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007562:	f06f 0305 	mvn.w	r3, #5
 8007566:	607b      	str	r3, [r7, #4]
 8007568:	e010      	b.n	800758c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800756a:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <osKernelStart+0x48>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d109      	bne.n	8007586 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007572:	f7ff ffbf 	bl	80074f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <osKernelStart+0x48>)
 8007578:	2202      	movs	r2, #2
 800757a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800757c:	f001 f87c 	bl	8008678 <vTaskStartScheduler>
      stat = osOK;
 8007580:	2300      	movs	r3, #0
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	e002      	b.n	800758c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007586:	f04f 33ff 	mov.w	r3, #4294967295
 800758a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800758c:	687b      	ldr	r3, [r7, #4]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	200006c8 	.word	0x200006c8

0800759c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800759c:	b580      	push	{r7, lr}
 800759e:	b08e      	sub	sp, #56	; 0x38
 80075a0:	af04      	add	r7, sp, #16
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ac:	f3ef 8305 	mrs	r3, IPSR
 80075b0:	617b      	str	r3, [r7, #20]
  return(result);
 80075b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d17e      	bne.n	80076b6 <osThreadNew+0x11a>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d07b      	beq.n	80076b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075be:	2380      	movs	r3, #128	; 0x80
 80075c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075c2:	2318      	movs	r3, #24
 80075c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d045      	beq.n	8007662 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <osThreadNew+0x48>
        name = attr->name;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d008      	beq.n	800760a <osThreadNew+0x6e>
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b38      	cmp	r3, #56	; 0x38
 80075fc:	d805      	bhi.n	800760a <osThreadNew+0x6e>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <osThreadNew+0x72>
        return (NULL);
 800760a:	2300      	movs	r3, #0
 800760c:	e054      	b.n	80076b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	089b      	lsrs	r3, r3, #2
 800761c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00e      	beq.n	8007644 <osThreadNew+0xa8>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2bbb      	cmp	r3, #187	; 0xbb
 800762c:	d90a      	bls.n	8007644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007632:	2b00      	cmp	r3, #0
 8007634:	d006      	beq.n	8007644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <osThreadNew+0xa8>
        mem = 1;
 800763e:	2301      	movs	r3, #1
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	e010      	b.n	8007666 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10c      	bne.n	8007666 <osThreadNew+0xca>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d108      	bne.n	8007666 <osThreadNew+0xca>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <osThreadNew+0xca>
          mem = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	61bb      	str	r3, [r7, #24]
 8007660:	e001      	b.n	8007666 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d110      	bne.n	800768e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007674:	9202      	str	r2, [sp, #8]
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6a3a      	ldr	r2, [r7, #32]
 8007680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fe0c 	bl	80082a0 <xTaskCreateStatic>
 8007688:	4603      	mov	r3, r0
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	e013      	b.n	80076b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d110      	bne.n	80076b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	b29a      	uxth	r2, r3
 8007698:	f107 0310 	add.w	r3, r7, #16
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fe57 	bl	800835a <xTaskCreate>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d001      	beq.n	80076b6 <osThreadNew+0x11a>
            hTask = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076b6:	693b      	ldr	r3, [r7, #16]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3728      	adds	r7, #40	; 0x28
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c8:	f3ef 8305 	mrs	r3, IPSR
 80076cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80076ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <osDelay+0x1c>
    stat = osErrorISR;
 80076d4:	f06f 0305 	mvn.w	r3, #5
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	e007      	b.n	80076ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 ff92 	bl	8008610 <vTaskDelay>
    }
  }

  return (stat);
 80076ec:	68fb      	ldr	r3, [r7, #12]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a07      	ldr	r2, [pc, #28]	; (8007724 <vApplicationGetIdleTaskMemory+0x2c>)
 8007708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4a06      	ldr	r2, [pc, #24]	; (8007728 <vApplicationGetIdleTaskMemory+0x30>)
 800770e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2280      	movs	r2, #128	; 0x80
 8007714:	601a      	str	r2, [r3, #0]
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	200006cc 	.word	0x200006cc
 8007728:	20000788 	.word	0x20000788

0800772c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a07      	ldr	r2, [pc, #28]	; (8007758 <vApplicationGetTimerTaskMemory+0x2c>)
 800773c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4a06      	ldr	r2, [pc, #24]	; (800775c <vApplicationGetTimerTaskMemory+0x30>)
 8007742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800774a:	601a      	str	r2, [r3, #0]
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	20000988 	.word	0x20000988
 800775c:	20000a44 	.word	0x20000a44

08007760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f103 0208 	add.w	r2, r3, #8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f04f 32ff 	mov.w	r2, #4294967295
 8007778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f103 0208 	add.w	r2, r3, #8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f103 0208 	add.w	r2, r3, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d103      	bne.n	8007822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	e00c      	b.n	800783c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3308      	adds	r3, #8
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e002      	b.n	8007830 <vListInsert+0x2e>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	429a      	cmp	r2, r3
 800783a:	d2f6      	bcs.n	800782a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]
}
 8007868:	bf00      	nop
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6892      	ldr	r2, [r2, #8]
 800788a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6852      	ldr	r2, [r2, #4]
 8007894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	429a      	cmp	r2, r3
 800789e:	d103      	bne.n	80078a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	1e5a      	subs	r2, r3, #1
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078f2:	f002 f877 	bl	80099e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007902:	fb01 f303 	mul.w	r3, r1, r3
 8007906:	441a      	add	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007922:	3b01      	subs	r3, #1
 8007924:	68f9      	ldr	r1, [r7, #12]
 8007926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007928:	fb01 f303 	mul.w	r3, r1, r3
 800792c:	441a      	add	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	22ff      	movs	r2, #255	; 0xff
 800793e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d114      	bne.n	8007972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01a      	beq.n	8007986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3310      	adds	r3, #16
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f929 	bl	8008bac <xTaskRemoveFromEventList>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d012      	beq.n	8007986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007960:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <xQueueGenericReset+0xcc>)
 8007962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	e009      	b.n	8007986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3310      	adds	r3, #16
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff fef2 	bl	8007760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3324      	adds	r3, #36	; 0x24
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff feed 	bl	8007760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007986:	f002 f85d 	bl	8009a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800798a:	2301      	movs	r3, #1
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	e000ed04 	.word	0xe000ed04

08007998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08e      	sub	sp, #56	; 0x38
 800799c:	af02      	add	r7, sp, #8
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <xQueueGenericCreateStatic+0x52>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <xQueueGenericCreateStatic+0x56>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <xQueueGenericCreateStatic+0x58>
 80079ee:	2300      	movs	r3, #0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	623b      	str	r3, [r7, #32]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d102      	bne.n	8007a16 <xQueueGenericCreateStatic+0x7e>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <xQueueGenericCreateStatic+0x82>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <xQueueGenericCreateStatic+0x84>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	61fb      	str	r3, [r7, #28]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a36:	2350      	movs	r3, #80	; 0x50
 8007a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b50      	cmp	r3, #80	; 0x50
 8007a3e:	d00a      	beq.n	8007a56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	61bb      	str	r3, [r7, #24]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00d      	beq.n	8007a7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	4613      	mov	r3, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f805 	bl	8007a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3730      	adds	r7, #48	; 0x30
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d103      	bne.n	8007aa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e002      	b.n	8007aaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	69b8      	ldr	r0, [r7, #24]
 8007aba:	f7ff ff05 	bl	80078c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	78fa      	ldrb	r2, [r7, #3]
 8007ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08e      	sub	sp, #56	; 0x38
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <xQueueGenericSend+0x32>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d103      	bne.n	8007b10 <xQueueGenericSend+0x40>
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <xQueueGenericSend+0x44>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <xQueueGenericSend+0x46>
 8007b14:	2300      	movs	r3, #0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <xQueueGenericSend+0x60>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d103      	bne.n	8007b3e <xQueueGenericSend+0x6e>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <xQueueGenericSend+0x72>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <xQueueGenericSend+0x74>
 8007b42:	2300      	movs	r3, #0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10a      	bne.n	8007b5e <xQueueGenericSend+0x8e>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	623b      	str	r3, [r7, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b5e:	f001 f9e7 	bl	8008f30 <xTaskGetSchedulerState>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d102      	bne.n	8007b6e <xQueueGenericSend+0x9e>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <xQueueGenericSend+0xa2>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <xQueueGenericSend+0xa4>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xQueueGenericSend+0xbe>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	61fb      	str	r3, [r7, #28]
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b8e:	f001 ff29 	bl	80099e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d302      	bcc.n	8007ba4 <xQueueGenericSend+0xd4>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d129      	bne.n	8007bf8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007baa:	f000 fa0b 	bl	8007fc4 <prvCopyDataToQueue>
 8007bae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d010      	beq.n	8007bda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	3324      	adds	r3, #36	; 0x24
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fff5 	bl	8008bac <xTaskRemoveFromEventList>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d013      	beq.n	8007bf0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bc8:	4b3f      	ldr	r3, [pc, #252]	; (8007cc8 <xQueueGenericSend+0x1f8>)
 8007bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	e00a      	b.n	8007bf0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007be0:	4b39      	ldr	r3, [pc, #228]	; (8007cc8 <xQueueGenericSend+0x1f8>)
 8007be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bf0:	f001 ff28 	bl	8009a44 <vPortExitCritical>
				return pdPASS;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e063      	b.n	8007cc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d103      	bne.n	8007c06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bfe:	f001 ff21 	bl	8009a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	e05c      	b.n	8007cc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 f82f 	bl	8008c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c16:	2301      	movs	r3, #1
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c1a:	f001 ff13 	bl	8009a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c1e:	f000 fd9b 	bl	8008758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c22:	f001 fedf 	bl	80099e4 <vPortEnterCritical>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d103      	bne.n	8007c3c <xQueueGenericSend+0x16c>
 8007c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c42:	b25b      	sxtb	r3, r3
 8007c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c48:	d103      	bne.n	8007c52 <xQueueGenericSend+0x182>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c52:	f001 fef7 	bl	8009a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c56:	1d3a      	adds	r2, r7, #4
 8007c58:	f107 0314 	add.w	r3, r7, #20
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f001 f81e 	bl	8008ca0 <xTaskCheckForTimeOut>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d124      	bne.n	8007cb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c6c:	f000 faa2 	bl	80081b4 <prvIsQueueFull>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d018      	beq.n	8007ca8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	3310      	adds	r3, #16
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 ff44 	bl	8008b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c86:	f000 fa2d 	bl	80080e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c8a:	f000 fd73 	bl	8008774 <xTaskResumeAll>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f47f af7c 	bne.w	8007b8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <xQueueGenericSend+0x1f8>)
 8007c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	e772      	b.n	8007b8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007caa:	f000 fa1b 	bl	80080e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cae:	f000 fd61 	bl	8008774 <xTaskResumeAll>
 8007cb2:	e76c      	b.n	8007b8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb6:	f000 fa15 	bl	80080e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cba:	f000 fd5b 	bl	8008774 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3738      	adds	r7, #56	; 0x38
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b090      	sub	sp, #64	; 0x40
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <xQueueGenericSendFromISR+0x3c>
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <xQueueGenericSendFromISR+0x40>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <xQueueGenericSendFromISR+0x42>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d103      	bne.n	8007d36 <xQueueGenericSendFromISR+0x6a>
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <xQueueGenericSendFromISR+0x6e>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <xQueueGenericSendFromISR+0x70>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	623b      	str	r3, [r7, #32]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d56:	f001 ff27 	bl	8009ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	61fa      	str	r2, [r7, #28]
 8007d70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d302      	bcc.n	8007d88 <xQueueGenericSendFromISR+0xbc>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d12f      	bne.n	8007de8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	68b9      	ldr	r1, [r7, #8]
 8007d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d9e:	f000 f911 	bl	8007fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007da2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	d112      	bne.n	8007dd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d016      	beq.n	8007de2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	3324      	adds	r3, #36	; 0x24
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 fef7 	bl	8008bac <xTaskRemoveFromEventList>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00e      	beq.n	8007de2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	e007      	b.n	8007de2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	b25a      	sxtb	r2, r3
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007de2:	2301      	movs	r3, #1
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007de6:	e001      	b.n	8007dec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007df6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3740      	adds	r7, #64	; 0x40
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08c      	sub	sp, #48	; 0x30
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <xQueueReceive+0x30>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	623b      	str	r3, [r7, #32]
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <xQueueReceive+0x3e>
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <xQueueReceive+0x42>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <xQueueReceive+0x44>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <xQueueReceive+0x5e>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	61fb      	str	r3, [r7, #28]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e62:	f001 f865 	bl	8008f30 <xTaskGetSchedulerState>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <xQueueReceive+0x6e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <xQueueReceive+0x72>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <xQueueReceive+0x74>
 8007e76:	2300      	movs	r3, #0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xQueueReceive+0x8e>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	61bb      	str	r3, [r7, #24]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e92:	f001 fda7 	bl	80099e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d01f      	beq.n	8007ee2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea6:	f000 f8f7 	bl	8008098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	1e5a      	subs	r2, r3, #1
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00f      	beq.n	8007eda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	3310      	adds	r3, #16
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fe74 	bl	8008bac <xTaskRemoveFromEventList>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d007      	beq.n	8007eda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007eca:	4b3d      	ldr	r3, [pc, #244]	; (8007fc0 <xQueueReceive+0x1bc>)
 8007ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007eda:	f001 fdb3 	bl	8009a44 <vPortExitCritical>
				return pdPASS;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e069      	b.n	8007fb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ee8:	f001 fdac 	bl	8009a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007eec:	2300      	movs	r3, #0
 8007eee:	e062      	b.n	8007fb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 feba 	bl	8008c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f00:	2301      	movs	r3, #1
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f04:	f001 fd9e 	bl	8009a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f08:	f000 fc26 	bl	8008758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f0c:	f001 fd6a 	bl	80099e4 <vPortEnterCritical>
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f16:	b25b      	sxtb	r3, r3
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d103      	bne.n	8007f26 <xQueueReceive+0x122>
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f2c:	b25b      	sxtb	r3, r3
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d103      	bne.n	8007f3c <xQueueReceive+0x138>
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f3c:	f001 fd82 	bl	8009a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f40:	1d3a      	adds	r2, r7, #4
 8007f42:	f107 0310 	add.w	r3, r7, #16
 8007f46:	4611      	mov	r1, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fea9 	bl	8008ca0 <xTaskCheckForTimeOut>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d123      	bne.n	8007f9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f56:	f000 f917 	bl	8008188 <prvIsQueueEmpty>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d017      	beq.n	8007f90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	3324      	adds	r3, #36	; 0x24
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fdcf 	bl	8008b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f70:	f000 f8b8 	bl	80080e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f74:	f000 fbfe 	bl	8008774 <xTaskResumeAll>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d189      	bne.n	8007e92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f7e:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <xQueueReceive+0x1bc>)
 8007f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	e780      	b.n	8007e92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f92:	f000 f8a7 	bl	80080e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f96:	f000 fbed 	bl	8008774 <xTaskResumeAll>
 8007f9a:	e77a      	b.n	8007e92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9e:	f000 f8a1 	bl	80080e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fa2:	f000 fbe7 	bl	8008774 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa8:	f000 f8ee 	bl	8008188 <prvIsQueueEmpty>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f43f af6f 	beq.w	8007e92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3730      	adds	r7, #48	; 0x30
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	e000ed04 	.word	0xe000ed04

08007fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10d      	bne.n	8007ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d14d      	bne.n	8008086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 ffbc 	bl	8008f6c <xTaskPriorityDisinherit>
 8007ff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	e043      	b.n	8008086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d119      	bne.n	8008038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6858      	ldr	r0, [r3, #4]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	461a      	mov	r2, r3
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	f004 fd18 	bl	800ca44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	441a      	add	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	429a      	cmp	r2, r3
 800802c:	d32b      	bcc.n	8008086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	e026      	b.n	8008086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68d8      	ldr	r0, [r3, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	461a      	mov	r2, r3
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	f004 fcfe 	bl	800ca44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	425b      	negs	r3, r3
 8008052:	441a      	add	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	429a      	cmp	r2, r3
 8008062:	d207      	bcs.n	8008074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806c:	425b      	negs	r3, r3
 800806e:	441a      	add	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d105      	bne.n	8008086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	3b01      	subs	r3, #1
 8008084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800808e:	697b      	ldr	r3, [r7, #20]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d018      	beq.n	80080dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	441a      	add	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d303      	bcc.n	80080cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68d9      	ldr	r1, [r3, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	461a      	mov	r2, r3
 80080d6:	6838      	ldr	r0, [r7, #0]
 80080d8:	f004 fcb4 	bl	800ca44 <memcpy>
	}
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080ec:	f001 fc7a 	bl	80099e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080f8:	e011      	b.n	800811e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d012      	beq.n	8008128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3324      	adds	r3, #36	; 0x24
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fd50 	bl	8008bac <xTaskRemoveFromEventList>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008112:	f000 fe27 	bl	8008d64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	3b01      	subs	r3, #1
 800811a:	b2db      	uxtb	r3, r3
 800811c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800811e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dce9      	bgt.n	80080fa <prvUnlockQueue+0x16>
 8008126:	e000      	b.n	800812a <prvUnlockQueue+0x46>
					break;
 8008128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	22ff      	movs	r2, #255	; 0xff
 800812e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008132:	f001 fc87 	bl	8009a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008136:	f001 fc55 	bl	80099e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008142:	e011      	b.n	8008168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d012      	beq.n	8008172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3310      	adds	r3, #16
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fd2b 	bl	8008bac <xTaskRemoveFromEventList>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800815c:	f000 fe02 	bl	8008d64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	3b01      	subs	r3, #1
 8008164:	b2db      	uxtb	r3, r3
 8008166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dce9      	bgt.n	8008144 <prvUnlockQueue+0x60>
 8008170:	e000      	b.n	8008174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	22ff      	movs	r2, #255	; 0xff
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800817c:	f001 fc62 	bl	8009a44 <vPortExitCritical>
}
 8008180:	bf00      	nop
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008190:	f001 fc28 	bl	80099e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	2b00      	cmp	r3, #0
 800819a:	d102      	bne.n	80081a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e001      	b.n	80081a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081a6:	f001 fc4d 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 80081aa:	68fb      	ldr	r3, [r7, #12]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081bc:	f001 fc12 	bl	80099e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d102      	bne.n	80081d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	e001      	b.n	80081d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081d2:	2300      	movs	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081d6:	f001 fc35 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 80081da:	68fb      	ldr	r3, [r7, #12]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e014      	b.n	800821e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081f4:	4a0f      	ldr	r2, [pc, #60]	; (8008234 <vQueueAddToRegistry+0x50>)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10b      	bne.n	8008218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008200:	490c      	ldr	r1, [pc, #48]	; (8008234 <vQueueAddToRegistry+0x50>)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800820a:	4a0a      	ldr	r2, [pc, #40]	; (8008234 <vQueueAddToRegistry+0x50>)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	4413      	add	r3, r2
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008216:	e006      	b.n	8008226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3301      	adds	r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b07      	cmp	r3, #7
 8008222:	d9e7      	bls.n	80081f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20002070 	.word	0x20002070

08008238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008248:	f001 fbcc 	bl	80099e4 <vPortEnterCritical>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008252:	b25b      	sxtb	r3, r3
 8008254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008258:	d103      	bne.n	8008262 <vQueueWaitForMessageRestricted+0x2a>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008268:	b25b      	sxtb	r3, r3
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d103      	bne.n	8008278 <vQueueWaitForMessageRestricted+0x40>
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008278:	f001 fbe4 	bl	8009a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	d106      	bne.n	8008292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	3324      	adds	r3, #36	; 0x24
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68b9      	ldr	r1, [r7, #8]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fc61 	bl	8008b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008292:	6978      	ldr	r0, [r7, #20]
 8008294:	f7ff ff26 	bl	80080e4 <prvUnlockQueue>
	}
 8008298:	bf00      	nop
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08e      	sub	sp, #56	; 0x38
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	623b      	str	r3, [r7, #32]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	61fb      	str	r3, [r7, #28]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082e6:	23bc      	movs	r3, #188	; 0xbc
 80082e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2bbc      	cmp	r3, #188	; 0xbc
 80082ee:	d00a      	beq.n	8008306 <xTaskCreateStatic+0x66>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	61bb      	str	r3, [r7, #24]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008306:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	2b00      	cmp	r3, #0
 800830c:	d01e      	beq.n	800834c <xTaskCreateStatic+0xac>
 800830e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01b      	beq.n	800834c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800831c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	2202      	movs	r2, #2
 8008322:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008326:	2300      	movs	r3, #0
 8008328:	9303      	str	r3, [sp, #12]
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	9302      	str	r3, [sp, #8]
 800832e:	f107 0314 	add.w	r3, r7, #20
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 f850 	bl	80083e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008346:	f000 f8f3 	bl	8008530 <prvAddNewTaskToReadyList>
 800834a:	e001      	b.n	8008350 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008350:	697b      	ldr	r3, [r7, #20]
	}
 8008352:	4618      	mov	r0, r3
 8008354:	3728      	adds	r7, #40	; 0x28
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800835a:	b580      	push	{r7, lr}
 800835c:	b08c      	sub	sp, #48	; 0x30
 800835e:	af04      	add	r7, sp, #16
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	4613      	mov	r3, r2
 8008368:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4618      	mov	r0, r3
 8008370:	f001 fc5a 	bl	8009c28 <pvPortMalloc>
 8008374:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00e      	beq.n	800839a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800837c:	20bc      	movs	r0, #188	; 0xbc
 800837e:	f001 fc53 	bl	8009c28 <pvPortMalloc>
 8008382:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
 8008390:	e005      	b.n	800839e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008392:	6978      	ldr	r0, [r7, #20]
 8008394:	f001 fd14 	bl	8009dc0 <vPortFree>
 8008398:	e001      	b.n	800839e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d017      	beq.n	80083d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083ac:	88fa      	ldrh	r2, [r7, #6]
 80083ae:	2300      	movs	r3, #0
 80083b0:	9303      	str	r3, [sp, #12]
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	9302      	str	r3, [sp, #8]
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 f80e 	bl	80083e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083c8:	69f8      	ldr	r0, [r7, #28]
 80083ca:	f000 f8b1 	bl	8008530 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083ce:	2301      	movs	r3, #1
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	e002      	b.n	80083da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083d4:	f04f 33ff 	mov.w	r3, #4294967295
 80083d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083da:	69bb      	ldr	r3, [r7, #24]
	}
 80083dc:	4618      	mov	r0, r3
 80083de:	3720      	adds	r7, #32
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	461a      	mov	r2, r3
 80083fc:	21a5      	movs	r1, #165	; 0xa5
 80083fe:	f004 fb2f 	bl	800ca60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800840c:	3b01      	subs	r3, #1
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	f023 0307 	bic.w	r3, r3, #7
 800841a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	617b      	str	r3, [r7, #20]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d01f      	beq.n	8008482 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	e012      	b.n	800846e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	7819      	ldrb	r1, [r3, #0]
 8008450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	4413      	add	r3, r2
 8008456:	3334      	adds	r3, #52	; 0x34
 8008458:	460a      	mov	r2, r1
 800845a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d006      	beq.n	8008476 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	3301      	adds	r3, #1
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	2b0f      	cmp	r3, #15
 8008472:	d9e9      	bls.n	8008448 <prvInitialiseNewTask+0x64>
 8008474:	e000      	b.n	8008478 <prvInitialiseNewTask+0x94>
			{
				break;
 8008476:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008480:	e003      	b.n	800848a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	2b37      	cmp	r3, #55	; 0x37
 800848e:	d901      	bls.n	8008494 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008490:	2337      	movs	r3, #55	; 0x37
 8008492:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008498:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800849e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	2200      	movs	r2, #0
 80084a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	3304      	adds	r3, #4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff f978 	bl	80077a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	3318      	adds	r3, #24
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7ff f973 	bl	80077a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	3354      	adds	r3, #84	; 0x54
 80084e4:	2260      	movs	r2, #96	; 0x60
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f004 fab9 	bl	800ca60 <memset>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	4a0c      	ldr	r2, [pc, #48]	; (8008524 <prvInitialiseNewTask+0x140>)
 80084f2:	659a      	str	r2, [r3, #88]	; 0x58
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	4a0c      	ldr	r2, [pc, #48]	; (8008528 <prvInitialiseNewTask+0x144>)
 80084f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	4a0b      	ldr	r2, [pc, #44]	; (800852c <prvInitialiseNewTask+0x148>)
 80084fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	68f9      	ldr	r1, [r7, #12]
 8008504:	69b8      	ldr	r0, [r7, #24]
 8008506:	f001 f941 	bl	800978c <pxPortInitialiseStack>
 800850a:	4602      	mov	r2, r0
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800851a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800851c:	bf00      	nop
 800851e:	3720      	adds	r7, #32
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	08040794 	.word	0x08040794
 8008528:	080407b4 	.word	0x080407b4
 800852c:	08040774 	.word	0x08040774

08008530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008538:	f001 fa54 	bl	80099e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800853c:	4b2d      	ldr	r3, [pc, #180]	; (80085f4 <prvAddNewTaskToReadyList+0xc4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3301      	adds	r3, #1
 8008542:	4a2c      	ldr	r2, [pc, #176]	; (80085f4 <prvAddNewTaskToReadyList+0xc4>)
 8008544:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008546:	4b2c      	ldr	r3, [pc, #176]	; (80085f8 <prvAddNewTaskToReadyList+0xc8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800854e:	4a2a      	ldr	r2, [pc, #168]	; (80085f8 <prvAddNewTaskToReadyList+0xc8>)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008554:	4b27      	ldr	r3, [pc, #156]	; (80085f4 <prvAddNewTaskToReadyList+0xc4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d110      	bne.n	800857e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800855c:	f000 fc26 	bl	8008dac <prvInitialiseTaskLists>
 8008560:	e00d      	b.n	800857e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008562:	4b26      	ldr	r3, [pc, #152]	; (80085fc <prvAddNewTaskToReadyList+0xcc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d109      	bne.n	800857e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800856a:	4b23      	ldr	r3, [pc, #140]	; (80085f8 <prvAddNewTaskToReadyList+0xc8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	429a      	cmp	r2, r3
 8008576:	d802      	bhi.n	800857e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008578:	4a1f      	ldr	r2, [pc, #124]	; (80085f8 <prvAddNewTaskToReadyList+0xc8>)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800857e:	4b20      	ldr	r3, [pc, #128]	; (8008600 <prvAddNewTaskToReadyList+0xd0>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	4a1e      	ldr	r2, [pc, #120]	; (8008600 <prvAddNewTaskToReadyList+0xd0>)
 8008586:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <prvAddNewTaskToReadyList+0xd0>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	4b1b      	ldr	r3, [pc, #108]	; (8008604 <prvAddNewTaskToReadyList+0xd4>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d903      	bls.n	80085a4 <prvAddNewTaskToReadyList+0x74>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	4a18      	ldr	r2, [pc, #96]	; (8008604 <prvAddNewTaskToReadyList+0xd4>)
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4a15      	ldr	r2, [pc, #84]	; (8008608 <prvAddNewTaskToReadyList+0xd8>)
 80085b2:	441a      	add	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f7ff f8fd 	bl	80077ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085c0:	f001 fa40 	bl	8009a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085c4:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <prvAddNewTaskToReadyList+0xcc>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00e      	beq.n	80085ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085cc:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <prvAddNewTaskToReadyList+0xc8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d207      	bcs.n	80085ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <prvAddNewTaskToReadyList+0xdc>)
 80085dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20001318 	.word	0x20001318
 80085f8:	20000e44 	.word	0x20000e44
 80085fc:	20001324 	.word	0x20001324
 8008600:	20001334 	.word	0x20001334
 8008604:	20001320 	.word	0x20001320
 8008608:	20000e48 	.word	0x20000e48
 800860c:	e000ed04 	.word	0xe000ed04

08008610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008618:	2300      	movs	r3, #0
 800861a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d017      	beq.n	8008652 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008622:	4b13      	ldr	r3, [pc, #76]	; (8008670 <vTaskDelay+0x60>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <vTaskDelay+0x30>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	60bb      	str	r3, [r7, #8]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008640:	f000 f88a 	bl	8008758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008644:	2100      	movs	r1, #0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fcfe 	bl	8009048 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800864c:	f000 f892 	bl	8008774 <xTaskResumeAll>
 8008650:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d107      	bne.n	8008668 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008658:	4b06      	ldr	r3, [pc, #24]	; (8008674 <vTaskDelay+0x64>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20001340 	.word	0x20001340
 8008674:	e000ed04 	.word	0xe000ed04

08008678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800867e:	2300      	movs	r3, #0
 8008680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008686:	463a      	mov	r2, r7
 8008688:	1d39      	adds	r1, r7, #4
 800868a:	f107 0308 	add.w	r3, r7, #8
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff f832 	bl	80076f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	9202      	str	r2, [sp, #8]
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	2300      	movs	r3, #0
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	460a      	mov	r2, r1
 80086a6:	4924      	ldr	r1, [pc, #144]	; (8008738 <vTaskStartScheduler+0xc0>)
 80086a8:	4824      	ldr	r0, [pc, #144]	; (800873c <vTaskStartScheduler+0xc4>)
 80086aa:	f7ff fdf9 	bl	80082a0 <xTaskCreateStatic>
 80086ae:	4603      	mov	r3, r0
 80086b0:	4a23      	ldr	r2, [pc, #140]	; (8008740 <vTaskStartScheduler+0xc8>)
 80086b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086b4:	4b22      	ldr	r3, [pc, #136]	; (8008740 <vTaskStartScheduler+0xc8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	e001      	b.n	80086c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d102      	bne.n	80086d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086cc:	f000 fd10 	bl	80090f0 <xTimerCreateTimerTask>
 80086d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d11b      	bne.n	8008710 <vTaskStartScheduler+0x98>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	613b      	str	r3, [r7, #16]
}
 80086ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086ec:	4b15      	ldr	r3, [pc, #84]	; (8008744 <vTaskStartScheduler+0xcc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3354      	adds	r3, #84	; 0x54
 80086f2:	4a15      	ldr	r2, [pc, #84]	; (8008748 <vTaskStartScheduler+0xd0>)
 80086f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086f6:	4b15      	ldr	r3, [pc, #84]	; (800874c <vTaskStartScheduler+0xd4>)
 80086f8:	f04f 32ff 	mov.w	r2, #4294967295
 80086fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086fe:	4b14      	ldr	r3, [pc, #80]	; (8008750 <vTaskStartScheduler+0xd8>)
 8008700:	2201      	movs	r2, #1
 8008702:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008704:	4b13      	ldr	r3, [pc, #76]	; (8008754 <vTaskStartScheduler+0xdc>)
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800870a:	f001 f8c9 	bl	80098a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800870e:	e00e      	b.n	800872e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d10a      	bne.n	800872e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	60fb      	str	r3, [r7, #12]
}
 800872a:	bf00      	nop
 800872c:	e7fe      	b.n	800872c <vTaskStartScheduler+0xb4>
}
 800872e:	bf00      	nop
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	0800e390 	.word	0x0800e390
 800873c:	08008d7d 	.word	0x08008d7d
 8008740:	2000133c 	.word	0x2000133c
 8008744:	20000e44 	.word	0x20000e44
 8008748:	20000644 	.word	0x20000644
 800874c:	20001338 	.word	0x20001338
 8008750:	20001324 	.word	0x20001324
 8008754:	2000131c 	.word	0x2000131c

08008758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800875c:	4b04      	ldr	r3, [pc, #16]	; (8008770 <vTaskSuspendAll+0x18>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	4a03      	ldr	r2, [pc, #12]	; (8008770 <vTaskSuspendAll+0x18>)
 8008764:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008766:	bf00      	nop
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	20001340 	.word	0x20001340

08008774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800877e:	2300      	movs	r3, #0
 8008780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008782:	4b42      	ldr	r3, [pc, #264]	; (800888c <xTaskResumeAll+0x118>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	603b      	str	r3, [r7, #0]
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087a0:	f001 f920 	bl	80099e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087a4:	4b39      	ldr	r3, [pc, #228]	; (800888c <xTaskResumeAll+0x118>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	4a38      	ldr	r2, [pc, #224]	; (800888c <xTaskResumeAll+0x118>)
 80087ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ae:	4b37      	ldr	r3, [pc, #220]	; (800888c <xTaskResumeAll+0x118>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d162      	bne.n	800887c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087b6:	4b36      	ldr	r3, [pc, #216]	; (8008890 <xTaskResumeAll+0x11c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d05e      	beq.n	800887c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087be:	e02f      	b.n	8008820 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087c0:	4b34      	ldr	r3, [pc, #208]	; (8008894 <xTaskResumeAll+0x120>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3318      	adds	r3, #24
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff f851 	bl	8007874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff f84c 	bl	8007874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e0:	4b2d      	ldr	r3, [pc, #180]	; (8008898 <xTaskResumeAll+0x124>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d903      	bls.n	80087f0 <xTaskResumeAll+0x7c>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a2a      	ldr	r2, [pc, #168]	; (8008898 <xTaskResumeAll+0x124>)
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f4:	4613      	mov	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4a27      	ldr	r2, [pc, #156]	; (800889c <xTaskResumeAll+0x128>)
 80087fe:	441a      	add	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3304      	adds	r3, #4
 8008804:	4619      	mov	r1, r3
 8008806:	4610      	mov	r0, r2
 8008808:	f7fe ffd7 	bl	80077ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008810:	4b23      	ldr	r3, [pc, #140]	; (80088a0 <xTaskResumeAll+0x12c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	429a      	cmp	r2, r3
 8008818:	d302      	bcc.n	8008820 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800881a:	4b22      	ldr	r3, [pc, #136]	; (80088a4 <xTaskResumeAll+0x130>)
 800881c:	2201      	movs	r2, #1
 800881e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008820:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <xTaskResumeAll+0x120>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1cb      	bne.n	80087c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800882e:	f000 fb5f 	bl	8008ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008832:	4b1d      	ldr	r3, [pc, #116]	; (80088a8 <xTaskResumeAll+0x134>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d010      	beq.n	8008860 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800883e:	f000 f847 	bl	80088d0 <xTaskIncrementTick>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008848:	4b16      	ldr	r3, [pc, #88]	; (80088a4 <xTaskResumeAll+0x130>)
 800884a:	2201      	movs	r2, #1
 800884c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3b01      	subs	r3, #1
 8008852:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f1      	bne.n	800883e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800885a:	4b13      	ldr	r3, [pc, #76]	; (80088a8 <xTaskResumeAll+0x134>)
 800885c:	2200      	movs	r2, #0
 800885e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008860:	4b10      	ldr	r3, [pc, #64]	; (80088a4 <xTaskResumeAll+0x130>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d009      	beq.n	800887c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008868:	2301      	movs	r3, #1
 800886a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800886c:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <xTaskResumeAll+0x138>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800887c:	f001 f8e2 	bl	8009a44 <vPortExitCritical>

	return xAlreadyYielded;
 8008880:	68bb      	ldr	r3, [r7, #8]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20001340 	.word	0x20001340
 8008890:	20001318 	.word	0x20001318
 8008894:	200012d8 	.word	0x200012d8
 8008898:	20001320 	.word	0x20001320
 800889c:	20000e48 	.word	0x20000e48
 80088a0:	20000e44 	.word	0x20000e44
 80088a4:	2000132c 	.word	0x2000132c
 80088a8:	20001328 	.word	0x20001328
 80088ac:	e000ed04 	.word	0xe000ed04

080088b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088b6:	4b05      	ldr	r3, [pc, #20]	; (80088cc <xTaskGetTickCount+0x1c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088bc:	687b      	ldr	r3, [r7, #4]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	2000131c 	.word	0x2000131c

080088d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088da:	4b4f      	ldr	r3, [pc, #316]	; (8008a18 <xTaskIncrementTick+0x148>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f040 808f 	bne.w	8008a02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088e4:	4b4d      	ldr	r3, [pc, #308]	; (8008a1c <xTaskIncrementTick+0x14c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3301      	adds	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088ec:	4a4b      	ldr	r2, [pc, #300]	; (8008a1c <xTaskIncrementTick+0x14c>)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d120      	bne.n	800893a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088f8:	4b49      	ldr	r3, [pc, #292]	; (8008a20 <xTaskIncrementTick+0x150>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <xTaskIncrementTick+0x48>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	603b      	str	r3, [r7, #0]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <xTaskIncrementTick+0x46>
 8008918:	4b41      	ldr	r3, [pc, #260]	; (8008a20 <xTaskIncrementTick+0x150>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	4b41      	ldr	r3, [pc, #260]	; (8008a24 <xTaskIncrementTick+0x154>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a3f      	ldr	r2, [pc, #252]	; (8008a20 <xTaskIncrementTick+0x150>)
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	4a3f      	ldr	r2, [pc, #252]	; (8008a24 <xTaskIncrementTick+0x154>)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	4b3e      	ldr	r3, [pc, #248]	; (8008a28 <xTaskIncrementTick+0x158>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a3d      	ldr	r2, [pc, #244]	; (8008a28 <xTaskIncrementTick+0x158>)
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	f000 fadb 	bl	8008ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800893a:	4b3c      	ldr	r3, [pc, #240]	; (8008a2c <xTaskIncrementTick+0x15c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	429a      	cmp	r2, r3
 8008942:	d349      	bcc.n	80089d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008944:	4b36      	ldr	r3, [pc, #216]	; (8008a20 <xTaskIncrementTick+0x150>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d104      	bne.n	8008958 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800894e:	4b37      	ldr	r3, [pc, #220]	; (8008a2c <xTaskIncrementTick+0x15c>)
 8008950:	f04f 32ff 	mov.w	r2, #4294967295
 8008954:	601a      	str	r2, [r3, #0]
					break;
 8008956:	e03f      	b.n	80089d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008958:	4b31      	ldr	r3, [pc, #196]	; (8008a20 <xTaskIncrementTick+0x150>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	429a      	cmp	r2, r3
 800896e:	d203      	bcs.n	8008978 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008970:	4a2e      	ldr	r2, [pc, #184]	; (8008a2c <xTaskIncrementTick+0x15c>)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008976:	e02f      	b.n	80089d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	3304      	adds	r3, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe ff79 	bl	8007874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	2b00      	cmp	r3, #0
 8008988:	d004      	beq.n	8008994 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	3318      	adds	r3, #24
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe ff70 	bl	8007874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4b25      	ldr	r3, [pc, #148]	; (8008a30 <xTaskIncrementTick+0x160>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d903      	bls.n	80089a8 <xTaskIncrementTick+0xd8>
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4a22      	ldr	r2, [pc, #136]	; (8008a30 <xTaskIncrementTick+0x160>)
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4a1f      	ldr	r2, [pc, #124]	; (8008a34 <xTaskIncrementTick+0x164>)
 80089b6:	441a      	add	r2, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f7fe fefb 	bl	80077ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c8:	4b1b      	ldr	r3, [pc, #108]	; (8008a38 <xTaskIncrementTick+0x168>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d3b8      	bcc.n	8008944 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089d2:	2301      	movs	r3, #1
 80089d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089d6:	e7b5      	b.n	8008944 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089d8:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <xTaskIncrementTick+0x168>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089de:	4915      	ldr	r1, [pc, #84]	; (8008a34 <xTaskIncrementTick+0x164>)
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d901      	bls.n	80089f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089f4:	4b11      	ldr	r3, [pc, #68]	; (8008a3c <xTaskIncrementTick+0x16c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d007      	beq.n	8008a0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e004      	b.n	8008a0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a02:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <xTaskIncrementTick+0x170>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3301      	adds	r3, #1
 8008a08:	4a0d      	ldr	r2, [pc, #52]	; (8008a40 <xTaskIncrementTick+0x170>)
 8008a0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a0c:	697b      	ldr	r3, [r7, #20]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20001340 	.word	0x20001340
 8008a1c:	2000131c 	.word	0x2000131c
 8008a20:	200012d0 	.word	0x200012d0
 8008a24:	200012d4 	.word	0x200012d4
 8008a28:	20001330 	.word	0x20001330
 8008a2c:	20001338 	.word	0x20001338
 8008a30:	20001320 	.word	0x20001320
 8008a34:	20000e48 	.word	0x20000e48
 8008a38:	20000e44 	.word	0x20000e44
 8008a3c:	2000132c 	.word	0x2000132c
 8008a40:	20001328 	.word	0x20001328

08008a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a4a:	4b2a      	ldr	r3, [pc, #168]	; (8008af4 <vTaskSwitchContext+0xb0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a52:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <vTaskSwitchContext+0xb4>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a58:	e046      	b.n	8008ae8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a5a:	4b27      	ldr	r3, [pc, #156]	; (8008af8 <vTaskSwitchContext+0xb4>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a60:	4b26      	ldr	r3, [pc, #152]	; (8008afc <vTaskSwitchContext+0xb8>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	e010      	b.n	8008a8a <vTaskSwitchContext+0x46>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <vTaskSwitchContext+0x40>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	607b      	str	r3, [r7, #4]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <vTaskSwitchContext+0x3e>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	491d      	ldr	r1, [pc, #116]	; (8008b00 <vTaskSwitchContext+0xbc>)
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0e4      	beq.n	8008a68 <vTaskSwitchContext+0x24>
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4a15      	ldr	r2, [pc, #84]	; (8008b00 <vTaskSwitchContext+0xbc>)
 8008aaa:	4413      	add	r3, r2
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	605a      	str	r2, [r3, #4]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d104      	bne.n	8008ace <vTaskSwitchContext+0x8a>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	605a      	str	r2, [r3, #4]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	4a0b      	ldr	r2, [pc, #44]	; (8008b04 <vTaskSwitchContext+0xc0>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	4a08      	ldr	r2, [pc, #32]	; (8008afc <vTaskSwitchContext+0xb8>)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ade:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <vTaskSwitchContext+0xc0>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3354      	adds	r3, #84	; 0x54
 8008ae4:	4a08      	ldr	r2, [pc, #32]	; (8008b08 <vTaskSwitchContext+0xc4>)
 8008ae6:	6013      	str	r3, [r2, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	20001340 	.word	0x20001340
 8008af8:	2000132c 	.word	0x2000132c
 8008afc:	20001320 	.word	0x20001320
 8008b00:	20000e48 	.word	0x20000e48
 8008b04:	20000e44 	.word	0x20000e44
 8008b08:	20000644 	.word	0x20000644

08008b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	60fb      	str	r3, [r7, #12]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <vTaskPlaceOnEventList+0x44>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3318      	adds	r3, #24
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7fe fe61 	bl	8007802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b40:	2101      	movs	r1, #1
 8008b42:	6838      	ldr	r0, [r7, #0]
 8008b44:	f000 fa80 	bl	8009048 <prvAddCurrentTaskToDelayedList>
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20000e44 	.word	0x20000e44

08008b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10a      	bne.n	8008b7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	617b      	str	r3, [r7, #20]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3318      	adds	r3, #24
 8008b82:	4619      	mov	r1, r3
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7fe fe18 	bl	80077ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b90:	f04f 33ff 	mov.w	r3, #4294967295
 8008b94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	68b8      	ldr	r0, [r7, #8]
 8008b9a:	f000 fa55 	bl	8009048 <prvAddCurrentTaskToDelayedList>
	}
 8008b9e:	bf00      	nop
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000e44 	.word	0x20000e44

08008bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10a      	bne.n	8008bd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	60fb      	str	r3, [r7, #12]
}
 8008bd4:	bf00      	nop
 8008bd6:	e7fe      	b.n	8008bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3318      	adds	r3, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe fe49 	bl	8007874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be2:	4b1e      	ldr	r3, [pc, #120]	; (8008c5c <xTaskRemoveFromEventList+0xb0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d11d      	bne.n	8008c26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	3304      	adds	r3, #4
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fe40 	bl	8007874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf8:	4b19      	ldr	r3, [pc, #100]	; (8008c60 <xTaskRemoveFromEventList+0xb4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d903      	bls.n	8008c08 <xTaskRemoveFromEventList+0x5c>
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	4a16      	ldr	r2, [pc, #88]	; (8008c60 <xTaskRemoveFromEventList+0xb4>)
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4a13      	ldr	r2, [pc, #76]	; (8008c64 <xTaskRemoveFromEventList+0xb8>)
 8008c16:	441a      	add	r2, r3
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7fe fdcb 	bl	80077ba <vListInsertEnd>
 8008c24:	e005      	b.n	8008c32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	3318      	adds	r3, #24
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	480e      	ldr	r0, [pc, #56]	; (8008c68 <xTaskRemoveFromEventList+0xbc>)
 8008c2e:	f7fe fdc4 	bl	80077ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c36:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <xTaskRemoveFromEventList+0xc0>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d905      	bls.n	8008c4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c44:	4b0a      	ldr	r3, [pc, #40]	; (8008c70 <xTaskRemoveFromEventList+0xc4>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	e001      	b.n	8008c50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c50:	697b      	ldr	r3, [r7, #20]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20001340 	.word	0x20001340
 8008c60:	20001320 	.word	0x20001320
 8008c64:	20000e48 	.word	0x20000e48
 8008c68:	200012d8 	.word	0x200012d8
 8008c6c:	20000e44 	.word	0x20000e44
 8008c70:	2000132c 	.word	0x2000132c

08008c74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c7c:	4b06      	ldr	r3, [pc, #24]	; (8008c98 <vTaskInternalSetTimeOutState+0x24>)
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c84:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <vTaskInternalSetTimeOutState+0x28>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	605a      	str	r2, [r3, #4]
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	20001330 	.word	0x20001330
 8008c9c:	2000131c 	.word	0x2000131c

08008ca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	613b      	str	r3, [r7, #16]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	60fb      	str	r3, [r7, #12]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ce2:	f000 fe7f 	bl	80099e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ce6:	4b1d      	ldr	r3, [pc, #116]	; (8008d5c <xTaskCheckForTimeOut+0xbc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfe:	d102      	bne.n	8008d06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61fb      	str	r3, [r7, #28]
 8008d04:	e023      	b.n	8008d4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <xTaskCheckForTimeOut+0xc0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d007      	beq.n	8008d22 <xTaskCheckForTimeOut+0x82>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d302      	bcc.n	8008d22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	e015      	b.n	8008d4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d20b      	bcs.n	8008d44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	1ad2      	subs	r2, r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff ff9b 	bl	8008c74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	e004      	b.n	8008d4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d4e:	f000 fe79 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 8008d52:	69fb      	ldr	r3, [r7, #28]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3720      	adds	r7, #32
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	2000131c 	.word	0x2000131c
 8008d60:	20001330 	.word	0x20001330

08008d64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d68:	4b03      	ldr	r3, [pc, #12]	; (8008d78 <vTaskMissedYield+0x14>)
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]
}
 8008d6e:	bf00      	nop
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	2000132c 	.word	0x2000132c

08008d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d84:	f000 f852 	bl	8008e2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <prvIdleTask+0x28>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d9f9      	bls.n	8008d84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <prvIdleTask+0x2c>)
 8008d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008da0:	e7f0      	b.n	8008d84 <prvIdleTask+0x8>
 8008da2:	bf00      	nop
 8008da4:	20000e48 	.word	0x20000e48
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008db2:	2300      	movs	r3, #0
 8008db4:	607b      	str	r3, [r7, #4]
 8008db6:	e00c      	b.n	8008dd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4a12      	ldr	r2, [pc, #72]	; (8008e0c <prvInitialiseTaskLists+0x60>)
 8008dc4:	4413      	add	r3, r2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fcca 	bl	8007760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	607b      	str	r3, [r7, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b37      	cmp	r3, #55	; 0x37
 8008dd6:	d9ef      	bls.n	8008db8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008dd8:	480d      	ldr	r0, [pc, #52]	; (8008e10 <prvInitialiseTaskLists+0x64>)
 8008dda:	f7fe fcc1 	bl	8007760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dde:	480d      	ldr	r0, [pc, #52]	; (8008e14 <prvInitialiseTaskLists+0x68>)
 8008de0:	f7fe fcbe 	bl	8007760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008de4:	480c      	ldr	r0, [pc, #48]	; (8008e18 <prvInitialiseTaskLists+0x6c>)
 8008de6:	f7fe fcbb 	bl	8007760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dea:	480c      	ldr	r0, [pc, #48]	; (8008e1c <prvInitialiseTaskLists+0x70>)
 8008dec:	f7fe fcb8 	bl	8007760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008df0:	480b      	ldr	r0, [pc, #44]	; (8008e20 <prvInitialiseTaskLists+0x74>)
 8008df2:	f7fe fcb5 	bl	8007760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008df6:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <prvInitialiseTaskLists+0x78>)
 8008df8:	4a05      	ldr	r2, [pc, #20]	; (8008e10 <prvInitialiseTaskLists+0x64>)
 8008dfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <prvInitialiseTaskLists+0x7c>)
 8008dfe:	4a05      	ldr	r2, [pc, #20]	; (8008e14 <prvInitialiseTaskLists+0x68>)
 8008e00:	601a      	str	r2, [r3, #0]
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000e48 	.word	0x20000e48
 8008e10:	200012a8 	.word	0x200012a8
 8008e14:	200012bc 	.word	0x200012bc
 8008e18:	200012d8 	.word	0x200012d8
 8008e1c:	200012ec 	.word	0x200012ec
 8008e20:	20001304 	.word	0x20001304
 8008e24:	200012d0 	.word	0x200012d0
 8008e28:	200012d4 	.word	0x200012d4

08008e2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e32:	e019      	b.n	8008e68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e34:	f000 fdd6 	bl	80099e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e38:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <prvCheckTasksWaitingTermination+0x50>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fd15 	bl	8007874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	; (8008e80 <prvCheckTasksWaitingTermination+0x54>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	4a0b      	ldr	r2, [pc, #44]	; (8008e80 <prvCheckTasksWaitingTermination+0x54>)
 8008e52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e54:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <prvCheckTasksWaitingTermination+0x58>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	4a0a      	ldr	r2, [pc, #40]	; (8008e84 <prvCheckTasksWaitingTermination+0x58>)
 8008e5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e5e:	f000 fdf1 	bl	8009a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f810 	bl	8008e88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e68:	4b06      	ldr	r3, [pc, #24]	; (8008e84 <prvCheckTasksWaitingTermination+0x58>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e1      	bne.n	8008e34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e70:	bf00      	nop
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	200012ec 	.word	0x200012ec
 8008e80:	20001318 	.word	0x20001318
 8008e84:	20001300 	.word	0x20001300

08008e88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	3354      	adds	r3, #84	; 0x54
 8008e94:	4618      	mov	r0, r3
 8008e96:	f003 ff11 	bl	800ccbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d108      	bne.n	8008eb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 ff89 	bl	8009dc0 <vPortFree>
				vPortFree( pxTCB );
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 ff86 	bl	8009dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008eb4:	e018      	b.n	8008ee8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d103      	bne.n	8008ec8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 ff7d 	bl	8009dc0 <vPortFree>
	}
 8008ec6:	e00f      	b.n	8008ee8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d00a      	beq.n	8008ee8 <prvDeleteTCB+0x60>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60fb      	str	r3, [r7, #12]
}
 8008ee4:	bf00      	nop
 8008ee6:	e7fe      	b.n	8008ee6 <prvDeleteTCB+0x5e>
	}
 8008ee8:	bf00      	nop
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <prvResetNextTaskUnblockTime+0x38>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <prvResetNextTaskUnblockTime+0x3c>)
 8008f02:	f04f 32ff 	mov.w	r2, #4294967295
 8008f06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f08:	e008      	b.n	8008f1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f0a:	4b07      	ldr	r3, [pc, #28]	; (8008f28 <prvResetNextTaskUnblockTime+0x38>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4a04      	ldr	r2, [pc, #16]	; (8008f2c <prvResetNextTaskUnblockTime+0x3c>)
 8008f1a:	6013      	str	r3, [r2, #0]
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	200012d0 	.word	0x200012d0
 8008f2c:	20001338 	.word	0x20001338

08008f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f36:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <xTaskGetSchedulerState+0x34>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d102      	bne.n	8008f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	607b      	str	r3, [r7, #4]
 8008f42:	e008      	b.n	8008f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f44:	4b08      	ldr	r3, [pc, #32]	; (8008f68 <xTaskGetSchedulerState+0x38>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	607b      	str	r3, [r7, #4]
 8008f50:	e001      	b.n	8008f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f52:	2300      	movs	r3, #0
 8008f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f56:	687b      	ldr	r3, [r7, #4]
	}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	20001324 	.word	0x20001324
 8008f68:	20001340 	.word	0x20001340

08008f6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d056      	beq.n	8009030 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f82:	4b2e      	ldr	r3, [pc, #184]	; (800903c <xTaskPriorityDisinherit+0xd0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d00a      	beq.n	8008fa2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	60fb      	str	r3, [r7, #12]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10a      	bne.n	8008fc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	60bb      	str	r3, [r7, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	e7fe      	b.n	8008fbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc4:	1e5a      	subs	r2, r3, #1
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d02c      	beq.n	8009030 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d128      	bne.n	8009030 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fc46 	bl	8007874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009000:	4b0f      	ldr	r3, [pc, #60]	; (8009040 <xTaskPriorityDisinherit+0xd4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d903      	bls.n	8009010 <xTaskPriorityDisinherit+0xa4>
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	4a0c      	ldr	r2, [pc, #48]	; (8009040 <xTaskPriorityDisinherit+0xd4>)
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009014:	4613      	mov	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4a09      	ldr	r2, [pc, #36]	; (8009044 <xTaskPriorityDisinherit+0xd8>)
 800901e:	441a      	add	r2, r3
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7fe fbc7 	bl	80077ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009030:	697b      	ldr	r3, [r7, #20]
	}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000e44 	.word	0x20000e44
 8009040:	20001320 	.word	0x20001320
 8009044:	20000e48 	.word	0x20000e48

08009048 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009052:	4b21      	ldr	r3, [pc, #132]	; (80090d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009058:	4b20      	ldr	r3, [pc, #128]	; (80090dc <prvAddCurrentTaskToDelayedList+0x94>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3304      	adds	r3, #4
 800905e:	4618      	mov	r0, r3
 8009060:	f7fe fc08 	bl	8007874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906a:	d10a      	bne.n	8009082 <prvAddCurrentTaskToDelayedList+0x3a>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009072:	4b1a      	ldr	r3, [pc, #104]	; (80090dc <prvAddCurrentTaskToDelayedList+0x94>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3304      	adds	r3, #4
 8009078:	4619      	mov	r1, r3
 800907a:	4819      	ldr	r0, [pc, #100]	; (80090e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800907c:	f7fe fb9d 	bl	80077ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009080:	e026      	b.n	80090d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4413      	add	r3, r2
 8009088:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800908a:	4b14      	ldr	r3, [pc, #80]	; (80090dc <prvAddCurrentTaskToDelayedList+0x94>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	429a      	cmp	r2, r3
 8009098:	d209      	bcs.n	80090ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800909a:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b0f      	ldr	r3, [pc, #60]	; (80090dc <prvAddCurrentTaskToDelayedList+0x94>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f7fe fbab 	bl	8007802 <vListInsert>
}
 80090ac:	e010      	b.n	80090d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ae:	4b0e      	ldr	r3, [pc, #56]	; (80090e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <prvAddCurrentTaskToDelayedList+0x94>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3304      	adds	r3, #4
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f7fe fba1 	bl	8007802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090c0:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d202      	bcs.n	80090d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090ca:	4a08      	ldr	r2, [pc, #32]	; (80090ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	6013      	str	r3, [r2, #0]
}
 80090d0:	bf00      	nop
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	2000131c 	.word	0x2000131c
 80090dc:	20000e44 	.word	0x20000e44
 80090e0:	20001304 	.word	0x20001304
 80090e4:	200012d4 	.word	0x200012d4
 80090e8:	200012d0 	.word	0x200012d0
 80090ec:	20001338 	.word	0x20001338

080090f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08a      	sub	sp, #40	; 0x28
 80090f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090fa:	f000 fb07 	bl	800970c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090fe:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <xTimerCreateTimerTask+0x80>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d021      	beq.n	800914a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800910e:	1d3a      	adds	r2, r7, #4
 8009110:	f107 0108 	add.w	r1, r7, #8
 8009114:	f107 030c 	add.w	r3, r7, #12
 8009118:	4618      	mov	r0, r3
 800911a:	f7fe fb07 	bl	800772c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	9202      	str	r2, [sp, #8]
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	2302      	movs	r3, #2
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	2300      	movs	r3, #0
 800912e:	460a      	mov	r2, r1
 8009130:	4910      	ldr	r1, [pc, #64]	; (8009174 <xTimerCreateTimerTask+0x84>)
 8009132:	4811      	ldr	r0, [pc, #68]	; (8009178 <xTimerCreateTimerTask+0x88>)
 8009134:	f7ff f8b4 	bl	80082a0 <xTaskCreateStatic>
 8009138:	4603      	mov	r3, r0
 800913a:	4a10      	ldr	r2, [pc, #64]	; (800917c <xTimerCreateTimerTask+0x8c>)
 800913c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800913e:	4b0f      	ldr	r3, [pc, #60]	; (800917c <xTimerCreateTimerTask+0x8c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009146:	2301      	movs	r3, #1
 8009148:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	613b      	str	r3, [r7, #16]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009166:	697b      	ldr	r3, [r7, #20]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20001374 	.word	0x20001374
 8009174:	0800e398 	.word	0x0800e398
 8009178:	080092b5 	.word	0x080092b5
 800917c:	20001378 	.word	0x20001378

08009180 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800918e:	2300      	movs	r3, #0
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	623b      	str	r3, [r7, #32]
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091ae:	4b1a      	ldr	r3, [pc, #104]	; (8009218 <xTimerGenericCommand+0x98>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d02a      	beq.n	800920c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2b05      	cmp	r3, #5
 80091c6:	dc18      	bgt.n	80091fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091c8:	f7ff feb2 	bl	8008f30 <xTaskGetSchedulerState>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d109      	bne.n	80091e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091d2:	4b11      	ldr	r3, [pc, #68]	; (8009218 <xTimerGenericCommand+0x98>)
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	f107 0110 	add.w	r1, r7, #16
 80091da:	2300      	movs	r3, #0
 80091dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091de:	f7fe fc77 	bl	8007ad0 <xQueueGenericSend>
 80091e2:	6278      	str	r0, [r7, #36]	; 0x24
 80091e4:	e012      	b.n	800920c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091e6:	4b0c      	ldr	r3, [pc, #48]	; (8009218 <xTimerGenericCommand+0x98>)
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f107 0110 	add.w	r1, r7, #16
 80091ee:	2300      	movs	r3, #0
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7fe fc6d 	bl	8007ad0 <xQueueGenericSend>
 80091f6:	6278      	str	r0, [r7, #36]	; 0x24
 80091f8:	e008      	b.n	800920c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091fa:	4b07      	ldr	r3, [pc, #28]	; (8009218 <xTimerGenericCommand+0x98>)
 80091fc:	6818      	ldr	r0, [r3, #0]
 80091fe:	f107 0110 	add.w	r1, r7, #16
 8009202:	2300      	movs	r3, #0
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	f7fe fd61 	bl	8007ccc <xQueueGenericSendFromISR>
 800920a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800920e:	4618      	mov	r0, r3
 8009210:	3728      	adds	r7, #40	; 0x28
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20001374 	.word	0x20001374

0800921c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af02      	add	r7, sp, #8
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009226:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <prvProcessExpiredTimer+0x94>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	3304      	adds	r3, #4
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fb1d 	bl	8007874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d022      	beq.n	800928e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	699a      	ldr	r2, [r3, #24]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	18d1      	adds	r1, r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	6978      	ldr	r0, [r7, #20]
 8009256:	f000 f8d1 	bl	80093fc <prvInsertTimerInActiveList>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01f      	beq.n	80092a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009260:	2300      	movs	r3, #0
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	2300      	movs	r3, #0
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	2100      	movs	r1, #0
 800926a:	6978      	ldr	r0, [r7, #20]
 800926c:	f7ff ff88 	bl	8009180 <xTimerGenericCommand>
 8009270:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d113      	bne.n	80092a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	60fb      	str	r3, [r7, #12]
}
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	b2da      	uxtb	r2, r3
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	6978      	ldr	r0, [r7, #20]
 80092a6:	4798      	blx	r3
}
 80092a8:	bf00      	nop
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	2000136c 	.word	0x2000136c

080092b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092bc:	f107 0308 	add.w	r3, r7, #8
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 f857 	bl	8009374 <prvGetNextExpireTime>
 80092c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4619      	mov	r1, r3
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 f803 	bl	80092d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092d2:	f000 f8d5 	bl	8009480 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092d6:	e7f1      	b.n	80092bc <prvTimerTask+0x8>

080092d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092e2:	f7ff fa39 	bl	8008758 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092e6:	f107 0308 	add.w	r3, r7, #8
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f866 	bl	80093bc <prvSampleTimeNow>
 80092f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d130      	bne.n	800935a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10a      	bne.n	8009314 <prvProcessTimerOrBlockTask+0x3c>
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	429a      	cmp	r2, r3
 8009304:	d806      	bhi.n	8009314 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009306:	f7ff fa35 	bl	8008774 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800930a:	68f9      	ldr	r1, [r7, #12]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff ff85 	bl	800921c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009312:	e024      	b.n	800935e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d008      	beq.n	800932c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800931a:	4b13      	ldr	r3, [pc, #76]	; (8009368 <prvProcessTimerOrBlockTask+0x90>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <prvProcessTimerOrBlockTask+0x50>
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <prvProcessTimerOrBlockTask+0x52>
 8009328:	2300      	movs	r3, #0
 800932a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800932c:	4b0f      	ldr	r3, [pc, #60]	; (800936c <prvProcessTimerOrBlockTask+0x94>)
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4619      	mov	r1, r3
 800933a:	f7fe ff7d 	bl	8008238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800933e:	f7ff fa19 	bl	8008774 <xTaskResumeAll>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009348:	4b09      	ldr	r3, [pc, #36]	; (8009370 <prvProcessTimerOrBlockTask+0x98>)
 800934a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	f3bf 8f6f 	isb	sy
}
 8009358:	e001      	b.n	800935e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800935a:	f7ff fa0b 	bl	8008774 <xTaskResumeAll>
}
 800935e:	bf00      	nop
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20001370 	.word	0x20001370
 800936c:	20001374 	.word	0x20001374
 8009370:	e000ed04 	.word	0xe000ed04

08009374 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800937c:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <prvGetNextExpireTime+0x44>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <prvGetNextExpireTime+0x16>
 8009386:	2201      	movs	r2, #1
 8009388:	e000      	b.n	800938c <prvGetNextExpireTime+0x18>
 800938a:	2200      	movs	r2, #0
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d105      	bne.n	80093a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009398:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <prvGetNextExpireTime+0x44>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	e001      	b.n	80093a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093a8:	68fb      	ldr	r3, [r7, #12]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	2000136c 	.word	0x2000136c

080093bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093c4:	f7ff fa74 	bl	80088b0 <xTaskGetTickCount>
 80093c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093ca:	4b0b      	ldr	r3, [pc, #44]	; (80093f8 <prvSampleTimeNow+0x3c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d205      	bcs.n	80093e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093d4:	f000 f936 	bl	8009644 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	e002      	b.n	80093e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093e6:	4a04      	ldr	r2, [pc, #16]	; (80093f8 <prvSampleTimeNow+0x3c>)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093ec:	68fb      	ldr	r3, [r7, #12]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	2000137c 	.word	0x2000137c

080093fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800940a:	2300      	movs	r3, #0
 800940c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	429a      	cmp	r2, r3
 8009420:	d812      	bhi.n	8009448 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	429a      	cmp	r2, r3
 800942e:	d302      	bcc.n	8009436 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009430:	2301      	movs	r3, #1
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	e01b      	b.n	800946e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009436:	4b10      	ldr	r3, [pc, #64]	; (8009478 <prvInsertTimerInActiveList+0x7c>)
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3304      	adds	r3, #4
 800943e:	4619      	mov	r1, r3
 8009440:	4610      	mov	r0, r2
 8009442:	f7fe f9de 	bl	8007802 <vListInsert>
 8009446:	e012      	b.n	800946e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d206      	bcs.n	800945e <prvInsertTimerInActiveList+0x62>
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d302      	bcc.n	800945e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009458:	2301      	movs	r3, #1
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	e007      	b.n	800946e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800945e:	4b07      	ldr	r3, [pc, #28]	; (800947c <prvInsertTimerInActiveList+0x80>)
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3304      	adds	r3, #4
 8009466:	4619      	mov	r1, r3
 8009468:	4610      	mov	r0, r2
 800946a:	f7fe f9ca 	bl	8007802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800946e:	697b      	ldr	r3, [r7, #20]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20001370 	.word	0x20001370
 800947c:	2000136c 	.word	0x2000136c

08009480 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08e      	sub	sp, #56	; 0x38
 8009484:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009486:	e0ca      	b.n	800961e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	da18      	bge.n	80094c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800948e:	1d3b      	adds	r3, r7, #4
 8009490:	3304      	adds	r3, #4
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	61fb      	str	r3, [r7, #28]
}
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b6:	6850      	ldr	r0, [r2, #4]
 80094b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ba:	6892      	ldr	r2, [r2, #8]
 80094bc:	4611      	mov	r1, r2
 80094be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f2c0 80aa 	blt.w	800961c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	3304      	adds	r3, #4
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe f9cb 	bl	8007874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094de:	463b      	mov	r3, r7
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff ff6b 	bl	80093bc <prvSampleTimeNow>
 80094e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b09      	cmp	r3, #9
 80094ec:	f200 8097 	bhi.w	800961e <prvProcessReceivedCommands+0x19e>
 80094f0:	a201      	add	r2, pc, #4	; (adr r2, 80094f8 <prvProcessReceivedCommands+0x78>)
 80094f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f6:	bf00      	nop
 80094f8:	08009521 	.word	0x08009521
 80094fc:	08009521 	.word	0x08009521
 8009500:	08009521 	.word	0x08009521
 8009504:	08009595 	.word	0x08009595
 8009508:	080095a9 	.word	0x080095a9
 800950c:	080095f3 	.word	0x080095f3
 8009510:	08009521 	.word	0x08009521
 8009514:	08009521 	.word	0x08009521
 8009518:	08009595 	.word	0x08009595
 800951c:	080095a9 	.word	0x080095a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	b2da      	uxtb	r2, r3
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	18d1      	adds	r1, r2, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009540:	f7ff ff5c 	bl	80093fc <prvInsertTimerInActiveList>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d069      	beq.n	800961e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009550:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d05e      	beq.n	800961e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	441a      	add	r2, r3
 8009568:	2300      	movs	r3, #0
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	2100      	movs	r1, #0
 8009570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009572:	f7ff fe05 	bl	8009180 <xTimerGenericCommand>
 8009576:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d14f      	bne.n	800961e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	61bb      	str	r3, [r7, #24]
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800959a:	f023 0301 	bic.w	r3, r3, #1
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80095a6:	e03a      	b.n	800961e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ae:	f043 0301 	orr.w	r3, r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	617b      	str	r3, [r7, #20]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	699a      	ldr	r2, [r3, #24]
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	18d1      	adds	r1, r2, r3
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ec:	f7ff ff06 	bl	80093fc <prvInsertTimerInActiveList>
					break;
 80095f0:	e015      	b.n	800961e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d103      	bne.n	8009608 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009602:	f000 fbdd 	bl	8009dc0 <vPortFree>
 8009606:	e00a      	b.n	800961e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800961a:	e000      	b.n	800961e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800961c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800961e:	4b08      	ldr	r3, [pc, #32]	; (8009640 <prvProcessReceivedCommands+0x1c0>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	1d39      	adds	r1, r7, #4
 8009624:	2200      	movs	r2, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fbec 	bl	8007e04 <xQueueReceive>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	f47f af2a 	bne.w	8009488 <prvProcessReceivedCommands+0x8>
	}
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop
 8009638:	3730      	adds	r7, #48	; 0x30
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20001374 	.word	0x20001374

08009644 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800964a:	e048      	b.n	80096de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800964c:	4b2d      	ldr	r3, [pc, #180]	; (8009704 <prvSwitchTimerLists+0xc0>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009656:	4b2b      	ldr	r3, [pc, #172]	; (8009704 <prvSwitchTimerLists+0xc0>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3304      	adds	r3, #4
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe f905 	bl	8007874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b00      	cmp	r3, #0
 800967e:	d02e      	beq.n	80096de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	4413      	add	r3, r2
 8009688:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	429a      	cmp	r2, r3
 8009690:	d90e      	bls.n	80096b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800969e:	4b19      	ldr	r3, [pc, #100]	; (8009704 <prvSwitchTimerLists+0xc0>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3304      	adds	r3, #4
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f7fe f8aa 	bl	8007802 <vListInsert>
 80096ae:	e016      	b.n	80096de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096b0:	2300      	movs	r3, #0
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	2300      	movs	r3, #0
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	2100      	movs	r1, #0
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f7ff fd60 	bl	8009180 <xTimerGenericCommand>
 80096c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	603b      	str	r3, [r7, #0]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096de:	4b09      	ldr	r3, [pc, #36]	; (8009704 <prvSwitchTimerLists+0xc0>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1b1      	bne.n	800964c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096e8:	4b06      	ldr	r3, [pc, #24]	; (8009704 <prvSwitchTimerLists+0xc0>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096ee:	4b06      	ldr	r3, [pc, #24]	; (8009708 <prvSwitchTimerLists+0xc4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a04      	ldr	r2, [pc, #16]	; (8009704 <prvSwitchTimerLists+0xc0>)
 80096f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096f6:	4a04      	ldr	r2, [pc, #16]	; (8009708 <prvSwitchTimerLists+0xc4>)
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	6013      	str	r3, [r2, #0]
}
 80096fc:	bf00      	nop
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	2000136c 	.word	0x2000136c
 8009708:	20001370 	.word	0x20001370

0800970c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009712:	f000 f967 	bl	80099e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009716:	4b15      	ldr	r3, [pc, #84]	; (800976c <prvCheckForValidListAndQueue+0x60>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d120      	bne.n	8009760 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800971e:	4814      	ldr	r0, [pc, #80]	; (8009770 <prvCheckForValidListAndQueue+0x64>)
 8009720:	f7fe f81e 	bl	8007760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009724:	4813      	ldr	r0, [pc, #76]	; (8009774 <prvCheckForValidListAndQueue+0x68>)
 8009726:	f7fe f81b 	bl	8007760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800972a:	4b13      	ldr	r3, [pc, #76]	; (8009778 <prvCheckForValidListAndQueue+0x6c>)
 800972c:	4a10      	ldr	r2, [pc, #64]	; (8009770 <prvCheckForValidListAndQueue+0x64>)
 800972e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009730:	4b12      	ldr	r3, [pc, #72]	; (800977c <prvCheckForValidListAndQueue+0x70>)
 8009732:	4a10      	ldr	r2, [pc, #64]	; (8009774 <prvCheckForValidListAndQueue+0x68>)
 8009734:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009736:	2300      	movs	r3, #0
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	4b11      	ldr	r3, [pc, #68]	; (8009780 <prvCheckForValidListAndQueue+0x74>)
 800973c:	4a11      	ldr	r2, [pc, #68]	; (8009784 <prvCheckForValidListAndQueue+0x78>)
 800973e:	2110      	movs	r1, #16
 8009740:	200a      	movs	r0, #10
 8009742:	f7fe f929 	bl	8007998 <xQueueGenericCreateStatic>
 8009746:	4603      	mov	r3, r0
 8009748:	4a08      	ldr	r2, [pc, #32]	; (800976c <prvCheckForValidListAndQueue+0x60>)
 800974a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800974c:	4b07      	ldr	r3, [pc, #28]	; (800976c <prvCheckForValidListAndQueue+0x60>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009754:	4b05      	ldr	r3, [pc, #20]	; (800976c <prvCheckForValidListAndQueue+0x60>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	490b      	ldr	r1, [pc, #44]	; (8009788 <prvCheckForValidListAndQueue+0x7c>)
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fd42 	bl	80081e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009760:	f000 f970 	bl	8009a44 <vPortExitCritical>
}
 8009764:	bf00      	nop
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20001374 	.word	0x20001374
 8009770:	20001344 	.word	0x20001344
 8009774:	20001358 	.word	0x20001358
 8009778:	2000136c 	.word	0x2000136c
 800977c:	20001370 	.word	0x20001370
 8009780:	20001420 	.word	0x20001420
 8009784:	20001380 	.word	0x20001380
 8009788:	0800e3a0 	.word	0x0800e3a0

0800978c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3b04      	subs	r3, #4
 800979c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f023 0201 	bic.w	r2, r3, #1
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3b04      	subs	r3, #4
 80097ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097bc:	4a0c      	ldr	r2, [pc, #48]	; (80097f0 <pxPortInitialiseStack+0x64>)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3b14      	subs	r3, #20
 80097c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3b04      	subs	r3, #4
 80097d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f06f 0202 	mvn.w	r2, #2
 80097da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3b20      	subs	r3, #32
 80097e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097e2:	68fb      	ldr	r3, [r7, #12]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	080097f5 	.word	0x080097f5

080097f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097fe:	4b12      	ldr	r3, [pc, #72]	; (8009848 <prvTaskExitError+0x54>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009806:	d00a      	beq.n	800981e <prvTaskExitError+0x2a>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	60fb      	str	r3, [r7, #12]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <prvTaskExitError+0x28>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	60bb      	str	r3, [r7, #8]
}
 8009830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009832:	bf00      	nop
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0fc      	beq.n	8009834 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800983a:	bf00      	nop
 800983c:	bf00      	nop
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	20000008 	.word	0x20000008
 800984c:	00000000 	.word	0x00000000

08009850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <pxCurrentTCBConst2>)
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	6808      	ldr	r0, [r1, #0]
 8009856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	f380 8809 	msr	PSP, r0
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f04f 0000 	mov.w	r0, #0
 8009866:	f380 8811 	msr	BASEPRI, r0
 800986a:	4770      	bx	lr
 800986c:	f3af 8000 	nop.w

08009870 <pxCurrentTCBConst2>:
 8009870:	20000e44 	.word	0x20000e44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009878:	4808      	ldr	r0, [pc, #32]	; (800989c <prvPortStartFirstTask+0x24>)
 800987a:	6800      	ldr	r0, [r0, #0]
 800987c:	6800      	ldr	r0, [r0, #0]
 800987e:	f380 8808 	msr	MSP, r0
 8009882:	f04f 0000 	mov.w	r0, #0
 8009886:	f380 8814 	msr	CONTROL, r0
 800988a:	b662      	cpsie	i
 800988c:	b661      	cpsie	f
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	df00      	svc	0
 8009898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800989a:	bf00      	nop
 800989c:	e000ed08 	.word	0xe000ed08

080098a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098a6:	4b46      	ldr	r3, [pc, #280]	; (80099c0 <xPortStartScheduler+0x120>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a46      	ldr	r2, [pc, #280]	; (80099c4 <xPortStartScheduler+0x124>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10a      	bne.n	80098c6 <xPortStartScheduler+0x26>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	613b      	str	r3, [r7, #16]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098c6:	4b3e      	ldr	r3, [pc, #248]	; (80099c0 <xPortStartScheduler+0x120>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a3f      	ldr	r2, [pc, #252]	; (80099c8 <xPortStartScheduler+0x128>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d10a      	bne.n	80098e6 <xPortStartScheduler+0x46>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	60fb      	str	r3, [r7, #12]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098e6:	4b39      	ldr	r3, [pc, #228]	; (80099cc <xPortStartScheduler+0x12c>)
 80098e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	22ff      	movs	r2, #255	; 0xff
 80098f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009908:	b2da      	uxtb	r2, r3
 800990a:	4b31      	ldr	r3, [pc, #196]	; (80099d0 <xPortStartScheduler+0x130>)
 800990c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800990e:	4b31      	ldr	r3, [pc, #196]	; (80099d4 <xPortStartScheduler+0x134>)
 8009910:	2207      	movs	r2, #7
 8009912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009914:	e009      	b.n	800992a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009916:	4b2f      	ldr	r3, [pc, #188]	; (80099d4 <xPortStartScheduler+0x134>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3b01      	subs	r3, #1
 800991c:	4a2d      	ldr	r2, [pc, #180]	; (80099d4 <xPortStartScheduler+0x134>)
 800991e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	b2db      	uxtb	r3, r3
 8009928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009932:	2b80      	cmp	r3, #128	; 0x80
 8009934:	d0ef      	beq.n	8009916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009936:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <xPortStartScheduler+0x134>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1c3 0307 	rsb	r3, r3, #7
 800993e:	2b04      	cmp	r3, #4
 8009940:	d00a      	beq.n	8009958 <xPortStartScheduler+0xb8>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	60bb      	str	r3, [r7, #8]
}
 8009954:	bf00      	nop
 8009956:	e7fe      	b.n	8009956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009958:	4b1e      	ldr	r3, [pc, #120]	; (80099d4 <xPortStartScheduler+0x134>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	4a1d      	ldr	r2, [pc, #116]	; (80099d4 <xPortStartScheduler+0x134>)
 8009960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009962:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <xPortStartScheduler+0x134>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800996a:	4a1a      	ldr	r2, [pc, #104]	; (80099d4 <xPortStartScheduler+0x134>)
 800996c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	b2da      	uxtb	r2, r3
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009976:	4b18      	ldr	r3, [pc, #96]	; (80099d8 <xPortStartScheduler+0x138>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a17      	ldr	r2, [pc, #92]	; (80099d8 <xPortStartScheduler+0x138>)
 800997c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009982:	4b15      	ldr	r3, [pc, #84]	; (80099d8 <xPortStartScheduler+0x138>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a14      	ldr	r2, [pc, #80]	; (80099d8 <xPortStartScheduler+0x138>)
 8009988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800998c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800998e:	f000 f8dd 	bl	8009b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009992:	4b12      	ldr	r3, [pc, #72]	; (80099dc <xPortStartScheduler+0x13c>)
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009998:	f000 f8fc 	bl	8009b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800999c:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <xPortStartScheduler+0x140>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a0f      	ldr	r2, [pc, #60]	; (80099e0 <xPortStartScheduler+0x140>)
 80099a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099a8:	f7ff ff66 	bl	8009878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099ac:	f7ff f84a 	bl	8008a44 <vTaskSwitchContext>
	prvTaskExitError();
 80099b0:	f7ff ff20 	bl	80097f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	e000ed00 	.word	0xe000ed00
 80099c4:	410fc271 	.word	0x410fc271
 80099c8:	410fc270 	.word	0x410fc270
 80099cc:	e000e400 	.word	0xe000e400
 80099d0:	20001470 	.word	0x20001470
 80099d4:	20001474 	.word	0x20001474
 80099d8:	e000ed20 	.word	0xe000ed20
 80099dc:	20000008 	.word	0x20000008
 80099e0:	e000ef34 	.word	0xe000ef34

080099e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	607b      	str	r3, [r7, #4]
}
 80099fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <vPortEnterCritical+0x58>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3301      	adds	r3, #1
 8009a04:	4a0d      	ldr	r2, [pc, #52]	; (8009a3c <vPortEnterCritical+0x58>)
 8009a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a08:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <vPortEnterCritical+0x58>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d10f      	bne.n	8009a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a10:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <vPortEnterCritical+0x5c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	603b      	str	r3, [r7, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <vPortEnterCritical+0x4a>
	}
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000008 	.word	0x20000008
 8009a40:	e000ed04 	.word	0xe000ed04

08009a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a4a:	4b12      	ldr	r3, [pc, #72]	; (8009a94 <vPortExitCritical+0x50>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <vPortExitCritical+0x24>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	607b      	str	r3, [r7, #4]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a68:	4b0a      	ldr	r3, [pc, #40]	; (8009a94 <vPortExitCritical+0x50>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	4a09      	ldr	r2, [pc, #36]	; (8009a94 <vPortExitCritical+0x50>)
 8009a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a72:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <vPortExitCritical+0x50>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d105      	bne.n	8009a86 <vPortExitCritical+0x42>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	f383 8811 	msr	BASEPRI, r3
}
 8009a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000008 	.word	0x20000008
	...

08009aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009aa0:	f3ef 8009 	mrs	r0, PSP
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <pxCurrentTCBConst>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f01e 0f10 	tst.w	lr, #16
 8009ab0:	bf08      	it	eq
 8009ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ac4:	f380 8811 	msr	BASEPRI, r0
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f7fe ffb8 	bl	8008a44 <vTaskSwitchContext>
 8009ad4:	f04f 0000 	mov.w	r0, #0
 8009ad8:	f380 8811 	msr	BASEPRI, r0
 8009adc:	bc09      	pop	{r0, r3}
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	6808      	ldr	r0, [r1, #0]
 8009ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae6:	f01e 0f10 	tst.w	lr, #16
 8009aea:	bf08      	it	eq
 8009aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009af0:	f380 8809 	msr	PSP, r0
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w

08009b00 <pxCurrentTCBConst>:
 8009b00:	20000e44 	.word	0x20000e44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
}
 8009b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b22:	f7fe fed5 	bl	80088d0 <xTaskIncrementTick>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <xPortSysTickHandler+0x40>)
 8009b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f383 8811 	msr	BASEPRI, r3
}
 8009b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b50:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b56:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <vPortSetupTimerInterrupt+0x38>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <vPortSetupTimerInterrupt+0x3c>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <vPortSetupTimerInterrupt+0x40>)
 8009b62:	fba2 2303 	umull	r2, r3, r2, r3
 8009b66:	099b      	lsrs	r3, r3, #6
 8009b68:	4a09      	ldr	r2, [pc, #36]	; (8009b90 <vPortSetupTimerInterrupt+0x44>)
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b6e:	4b04      	ldr	r3, [pc, #16]	; (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b70:	2207      	movs	r2, #7
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	e000e010 	.word	0xe000e010
 8009b84:	e000e018 	.word	0xe000e018
 8009b88:	20000630 	.word	0x20000630
 8009b8c:	10624dd3 	.word	0x10624dd3
 8009b90:	e000e014 	.word	0xe000e014

08009b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ba4 <vPortEnableVFP+0x10>
 8009b98:	6801      	ldr	r1, [r0, #0]
 8009b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b9e:	6001      	str	r1, [r0, #0]
 8009ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ba2:	bf00      	nop
 8009ba4:	e000ed88 	.word	0xe000ed88

08009ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bae:	f3ef 8305 	mrs	r3, IPSR
 8009bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d914      	bls.n	8009be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bba:	4a17      	ldr	r2, [pc, #92]	; (8009c18 <vPortValidateInterruptPriority+0x70>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bc4:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <vPortValidateInterruptPriority+0x74>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	7afa      	ldrb	r2, [r7, #11]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d20a      	bcs.n	8009be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	607b      	str	r3, [r7, #4]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009be4:	4b0e      	ldr	r3, [pc, #56]	; (8009c20 <vPortValidateInterruptPriority+0x78>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bec:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <vPortValidateInterruptPriority+0x7c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d90a      	bls.n	8009c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	603b      	str	r3, [r7, #0]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <vPortValidateInterruptPriority+0x60>
	}
 8009c0a:	bf00      	nop
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	e000e3f0 	.word	0xe000e3f0
 8009c1c:	20001470 	.word	0x20001470
 8009c20:	e000ed0c 	.word	0xe000ed0c
 8009c24:	20001474 	.word	0x20001474

08009c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	; 0x28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c34:	f7fe fd90 	bl	8008758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c38:	4b5b      	ldr	r3, [pc, #364]	; (8009da8 <pvPortMalloc+0x180>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c40:	f000 f920 	bl	8009e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c44:	4b59      	ldr	r3, [pc, #356]	; (8009dac <pvPortMalloc+0x184>)
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f040 8093 	bne.w	8009d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d01d      	beq.n	8009c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c58:	2208      	movs	r2, #8
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d014      	beq.n	8009c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f023 0307 	bic.w	r3, r3, #7
 8009c70:	3308      	adds	r3, #8
 8009c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <pvPortMalloc+0x6c>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	617b      	str	r3, [r7, #20]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d06e      	beq.n	8009d78 <pvPortMalloc+0x150>
 8009c9a:	4b45      	ldr	r3, [pc, #276]	; (8009db0 <pvPortMalloc+0x188>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d869      	bhi.n	8009d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ca4:	4b43      	ldr	r3, [pc, #268]	; (8009db4 <pvPortMalloc+0x18c>)
 8009ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ca8:	4b42      	ldr	r3, [pc, #264]	; (8009db4 <pvPortMalloc+0x18c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cae:	e004      	b.n	8009cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d903      	bls.n	8009ccc <pvPortMalloc+0xa4>
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f1      	bne.n	8009cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ccc:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <pvPortMalloc+0x180>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d050      	beq.n	8009d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2208      	movs	r2, #8
 8009cdc:	4413      	add	r3, r2
 8009cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d91f      	bls.n	8009d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <pvPortMalloc+0xf8>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	613b      	str	r3, [r7, #16]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	1ad2      	subs	r2, r2, r3
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d32:	69b8      	ldr	r0, [r7, #24]
 8009d34:	f000 f908 	bl	8009f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d38:	4b1d      	ldr	r3, [pc, #116]	; (8009db0 <pvPortMalloc+0x188>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	4a1b      	ldr	r2, [pc, #108]	; (8009db0 <pvPortMalloc+0x188>)
 8009d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d46:	4b1a      	ldr	r3, [pc, #104]	; (8009db0 <pvPortMalloc+0x188>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <pvPortMalloc+0x190>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d203      	bcs.n	8009d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d52:	4b17      	ldr	r3, [pc, #92]	; (8009db0 <pvPortMalloc+0x188>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a18      	ldr	r2, [pc, #96]	; (8009db8 <pvPortMalloc+0x190>)
 8009d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <pvPortMalloc+0x184>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d6e:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <pvPortMalloc+0x194>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3301      	adds	r3, #1
 8009d74:	4a11      	ldr	r2, [pc, #68]	; (8009dbc <pvPortMalloc+0x194>)
 8009d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d78:	f7fe fcfc 	bl	8008774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <pvPortMalloc+0x174>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60fb      	str	r3, [r7, #12]
}
 8009d98:	bf00      	nop
 8009d9a:	e7fe      	b.n	8009d9a <pvPortMalloc+0x172>
	return pvReturn;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3728      	adds	r7, #40	; 0x28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	20002038 	.word	0x20002038
 8009dac:	2000204c 	.word	0x2000204c
 8009db0:	2000203c 	.word	0x2000203c
 8009db4:	20002030 	.word	0x20002030
 8009db8:	20002040 	.word	0x20002040
 8009dbc:	20002044 	.word	0x20002044

08009dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d04d      	beq.n	8009e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dd2:	2308      	movs	r3, #8
 8009dd4:	425b      	negs	r3, r3
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	4413      	add	r3, r2
 8009dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	4b24      	ldr	r3, [pc, #144]	; (8009e78 <vPortFree+0xb8>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4013      	ands	r3, r2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10a      	bne.n	8009e04 <vPortFree+0x44>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	60fb      	str	r3, [r7, #12]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <vPortFree+0x62>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	60bb      	str	r3, [r7, #8]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	4b14      	ldr	r3, [pc, #80]	; (8009e78 <vPortFree+0xb8>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01e      	beq.n	8009e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d11a      	bne.n	8009e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	4b0e      	ldr	r3, [pc, #56]	; (8009e78 <vPortFree+0xb8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	43db      	mvns	r3, r3
 8009e42:	401a      	ands	r2, r3
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e48:	f7fe fc86 	bl	8008758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <vPortFree+0xbc>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4413      	add	r3, r2
 8009e56:	4a09      	ldr	r2, [pc, #36]	; (8009e7c <vPortFree+0xbc>)
 8009e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e5a:	6938      	ldr	r0, [r7, #16]
 8009e5c:	f000 f874 	bl	8009f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <vPortFree+0xc0>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3301      	adds	r3, #1
 8009e66:	4a06      	ldr	r2, [pc, #24]	; (8009e80 <vPortFree+0xc0>)
 8009e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e6a:	f7fe fc83 	bl	8008774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e6e:	bf00      	nop
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	2000204c 	.word	0x2000204c
 8009e7c:	2000203c 	.word	0x2000203c
 8009e80:	20002048 	.word	0x20002048

08009e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e90:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <prvHeapInit+0xac>)
 8009e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00c      	beq.n	8009eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3307      	adds	r3, #7
 8009ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0307 	bic.w	r3, r3, #7
 8009eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <prvHeapInit+0xac>)
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <prvHeapInit+0xb0>)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ec2:	4b1c      	ldr	r3, [pc, #112]	; (8009f34 <prvHeapInit+0xb0>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	4413      	add	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ed0:	2208      	movs	r2, #8
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 0307 	bic.w	r3, r3, #7
 8009ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <prvHeapInit+0xb4>)
 8009ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <prvHeapInit+0xb4>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eee:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <prvHeapInit+0xb4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f04:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <prvHeapInit+0xb4>)
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a0a      	ldr	r2, [pc, #40]	; (8009f3c <prvHeapInit+0xb8>)
 8009f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <prvHeapInit+0xbc>)
 8009f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f1c:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <prvHeapInit+0xc0>)
 8009f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	20001478 	.word	0x20001478
 8009f34:	20002030 	.word	0x20002030
 8009f38:	20002038 	.word	0x20002038
 8009f3c:	20002040 	.word	0x20002040
 8009f40:	2000203c 	.word	0x2000203c
 8009f44:	2000204c 	.word	0x2000204c

08009f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f50:	4b28      	ldr	r3, [pc, #160]	; (8009ff4 <prvInsertBlockIntoFreeList+0xac>)
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	e002      	b.n	8009f5c <prvInsertBlockIntoFreeList+0x14>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d8f7      	bhi.n	8009f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	4413      	add	r3, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d108      	bne.n	8009f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	441a      	add	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d118      	bne.n	8009fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	4b15      	ldr	r3, [pc, #84]	; (8009ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d00d      	beq.n	8009fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	e008      	b.n	8009fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	e003      	b.n	8009fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d002      	beq.n	8009fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20002030 	.word	0x20002030
 8009ff8:	20002038 	.word	0x20002038

08009ffc <_print>:
extern uint8_t tetromino_current[];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void _print() {
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, buf, 80, 0xFFFF);
 800a000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a004:	2250      	movs	r2, #80	; 0x50
 800a006:	4903      	ldr	r1, [pc, #12]	; (800a014 <_print+0x18>)
 800a008:	4803      	ldr	r0, [pc, #12]	; (800a018 <_print+0x1c>)
 800a00a:	f7fb fa3d 	bl	8005488 <HAL_UART_Transmit>
}
 800a00e:	bf00      	nop
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	200005d4 	.word	0x200005d4
 800a018:	20002270 	.word	0x20002270

0800a01c <hello_world>:
void clear() {
	sprintf(buf, empty);
//	_print();
}

void hello_world() {
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
	sprintf(buf, "Hello, World!");
 800a020:	4903      	ldr	r1, [pc, #12]	; (800a030 <hello_world+0x14>)
 800a022:	4804      	ldr	r0, [pc, #16]	; (800a034 <hello_world+0x18>)
 800a024:	f002 feb6 	bl	800cd94 <siprintf>
	_print();
 800a028:	f7ff ffe8 	bl	8009ffc <_print>
}
 800a02c:	bf00      	nop
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	0800e3c0 	.word	0x0800e3c0
 800a034:	200005d4 	.word	0x200005d4

0800a038 <create_window>:
	_print();
}


// create window, as well as initializes tetris game
void create_window(Window * window) {
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
    // initialize window
    window->width = IMAGE_WIDTH;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2250      	movs	r2, #80	; 0x50
 800a044:	601a      	str	r2, [r3, #0]
    window->height = IMAGE_HEIGHT;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a04c:	605a      	str	r2, [r3, #4]

    window->frame = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 800a04e:	f240 7004 	movw	r0, #1796	; 0x704
 800a052:	f002 fcef 	bl	800ca34 <malloc>
 800a056:	4603      	mov	r3, r0
 800a058:	461a      	mov	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	609a      	str	r2, [r3, #8]
    window->true  = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 800a05e:	f240 7004 	movw	r0, #1796	; 0x704
 800a062:	f002 fce7 	bl	800ca34 <malloc>
 800a066:	4603      	mov	r3, r0
 800a068:	461a      	mov	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60da      	str	r2, [r3, #12]

    // Fill image buffers with default value
    for(int i = 0; i < vert_size; i++) {
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e03e      	b.n	800a0f2 <create_window+0xba>
		// Point to place in continuous mem location
    	window->frame[i] = window->frameBuff + i*horiz_size;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f103 0210 	add.w	r2, r3, #16
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2164      	movs	r1, #100	; 0x64
 800a07e:	fb01 f303 	mul.w	r3, r1, r3
 800a082:	4618      	mov	r0, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6899      	ldr	r1, [r3, #8]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	440b      	add	r3, r1
 800a08e:	4402      	add	r2, r0
 800a090:	601a      	str	r2, [r3, #0]
    	window->true[i]  = window->trueBuff  + i*horiz_size;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 800a098:	33fc      	adds	r3, #252	; 0xfc
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	2164      	movs	r1, #100	; 0x64
 800a09e:	fb01 f202 	mul.w	r2, r1, r2
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	68d1      	ldr	r1, [r2, #12]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	440a      	add	r2, r1
 800a0ae:	4403      	add	r3, r0
 800a0b0:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < horiz_size; j++) {
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60bb      	str	r3, [r7, #8]
 800a0b6:	e016      	b.n	800a0e6 <create_window+0xae>
			window->frame[i][j] = 0;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
			window->true[i][j] = 0;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68da      	ldr	r2, [r3, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	4413      	add	r3, r2
 800a0dc:	2200      	movs	r2, #0
 800a0de:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < horiz_size; j++) {
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60bb      	str	r3, [r7, #8]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b63      	cmp	r3, #99	; 0x63
 800a0ea:	dde5      	ble.n	800a0b8 <create_window+0x80>
    for(int i = 0; i < vert_size; i++) {
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800a0f8:	ddbc      	ble.n	800a074 <create_window+0x3c>
		}
    }

    // initialize tetris game board
    tetris_initialize_game(window);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f001 fb6e 	bl	800b7dc <tetris_initialize_game>
}
 800a100:	bf00      	nop
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <game_playing>:
 * @brief Use when the tetris game is playing. (state machine -> game)
 *
 * @param window window that is being used
 * @param event user input
 */
void game_playing(Window* window, game_input_t event) {
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af04      	add	r7, sp, #16
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	2b05      	cmp	r3, #5
 800a118:	d10c      	bne.n	800a134 <game_playing+0x2c>
    	// End music
		pauseMusic();
 800a11a:	f000 fa5d 	bl	800a5d8 <pauseMusic>

    	window->game.state = Paused;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a124:	33cc      	adds	r3, #204	; 0xcc
 800a126:	2202      	movs	r2, #2
 800a128:	701a      	strb	r2, [r3, #0]
    	game_paused(window, INPUT_ERROR);
 800a12a:	2106      	movs	r1, #6
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f8a3 	bl	800a278 <game_paused>
            fall_rate = (int) (900 * exp(-0.0002 * window->game.points) + 100);
        }

    }

}
 800a132:	e090      	b.n	800a256 <game_playing+0x14e>
    	tetris_drawBackground(window);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f002 fa33 	bl	800c5a0 <tetris_drawBackground>
        switch (event) {
 800a13a:	78fb      	ldrb	r3, [r7, #3]
 800a13c:	2b06      	cmp	r3, #6
 800a13e:	d825      	bhi.n	800a18c <game_playing+0x84>
 800a140:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <game_playing+0x40>)
 800a142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a146:	bf00      	nop
 800a148:	0800a185 	.word	0x0800a185
 800a14c:	0800a175 	.word	0x0800a175
 800a150:	0800a17d 	.word	0x0800a17d
 800a154:	0800a165 	.word	0x0800a165
 800a158:	0800a16d 	.word	0x0800a16d
 800a15c:	0800a18d 	.word	0x0800a18d
 800a160:	0800a18d 	.word	0x0800a18d
                tetris_move_left(window);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 fd0f 	bl	800bb88 <tetris_move_left>
            break;
 800a16a:	e010      	b.n	800a18e <game_playing+0x86>
                tetris_move_right(window);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 fd2c 	bl	800bbca <tetris_move_right>
            break;
 800a172:	e00c      	b.n	800a18e <game_playing+0x86>
                tetris_rotate_C_tetromino(window);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 fc83 	bl	800ba80 <tetris_rotate_C_tetromino>
            break;
 800a17a:	e008      	b.n	800a18e <game_playing+0x86>
                tetris_rotate_CC_tetromino(window);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 fcc1 	bl	800bb04 <tetris_rotate_CC_tetromino>
            break;
 800a182:	e004      	b.n	800a18e <game_playing+0x86>
                tetris_move_down(window);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f001 fd40 	bl	800bc0a <tetris_move_down>
            break;
 800a18a:	e000      	b.n	800a18e <game_playing+0x86>
            break;
 800a18c:	bf00      	nop
        if (window->game.state == Playing ) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a194:	33cc      	adds	r3, #204	; 0xcc
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d15c      	bne.n	800a256 <game_playing+0x14e>
            drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	9303      	str	r3, [sp, #12]
 800a1a6:	230d      	movs	r3, #13
 800a1a8:	9302      	str	r3, [sp, #8]
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	2314      	movs	r3, #20
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	230a      	movs	r3, #10
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	2102      	movs	r1, #2
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f002 f90f 	bl	800c3dc <drawRect>
            drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800a1c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	1c99      	adds	r1, r3, #2
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	1c9a      	adds	r2, r3, #2
 800a1d6:	4b24      	ldr	r3, [pc, #144]	; (800a268 <game_playing+0x160>)
 800a1d8:	9303      	str	r3, [sp, #12]
 800a1da:	230d      	movs	r3, #13
 800a1dc:	9302      	str	r3, [sp, #8]
 800a1de:	2302      	movs	r3, #2
 800a1e0:	9301      	str	r3, [sp, #4]
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	2304      	movs	r3, #4
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f002 f8f7 	bl	800c3dc <drawRect>
            tetris_write_points(window);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f001 face 	bl	800b790 <tetris_write_points>
            fall_rate = (int) (900 * exp(-0.0002 * window->game.points) + 100);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800a1fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f7f6 f98f 	bl	8000524 <__aeabi_ui2d>
 800a206:	a316      	add	r3, pc, #88	; (adr r3, 800a260 <game_playing+0x158>)
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f7f6 fa04 	bl	8000618 <__aeabi_dmul>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	ec43 2b17 	vmov	d7, r2, r3
 800a218:	eeb0 0a47 	vmov.f32	s0, s14
 800a21c:	eef0 0a67 	vmov.f32	s1, s15
 800a220:	f003 fd86 	bl	800dd30 <exp>
 800a224:	ec51 0b10 	vmov	r0, r1, d0
 800a228:	f04f 0200 	mov.w	r2, #0
 800a22c:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <game_playing+0x164>)
 800a22e:	f7f6 f9f3 	bl	8000618 <__aeabi_dmul>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4610      	mov	r0, r2
 800a238:	4619      	mov	r1, r3
 800a23a:	f04f 0200 	mov.w	r2, #0
 800a23e:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <game_playing+0x168>)
 800a240:	f7f6 f834 	bl	80002ac <__adddf3>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4610      	mov	r0, r2
 800a24a:	4619      	mov	r1, r3
 800a24c:	f7f6 fc94 	bl	8000b78 <__aeabi_d2iz>
 800a250:	4603      	mov	r3, r0
 800a252:	4a08      	ldr	r2, [pc, #32]	; (800a274 <game_playing+0x16c>)
 800a254:	6013      	str	r3, [r2, #0]
}
 800a256:	bf00      	nop
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	eb1c432d 	.word	0xeb1c432d
 800a264:	bf2a36e2 	.word	0xbf2a36e2
 800a268:	20000634 	.word	0x20000634
 800a26c:	408c2000 	.word	0x408c2000
 800a270:	40590000 	.word	0x40590000
 800a274:	200005d0 	.word	0x200005d0

0800a278 <game_paused>:
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 * @param event user input
 */
void game_paused(Window* window, game_input_t event) {
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af04      	add	r7, sp, #16
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	2b05      	cmp	r3, #5
 800a288:	d10c      	bne.n	800a2a4 <game_paused+0x2c>
    	// Start Music
    	resumeMusic();
 800a28a:	f000 f9af 	bl	800a5ec <resumeMusic>
    	window->game.state = Playing;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a294:	33cc      	adds	r3, #204	; 0xcc
 800a296:	2201      	movs	r2, #1
 800a298:	701a      	strb	r2, [r3, #0]
    	game_playing(window, INPUT_ERROR);
 800a29a:	2106      	movs	r1, #6
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff ff33 	bl	800a108 <game_playing>
        // draw game board
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
        print_str(window, "Press Space", 2, 10);
        print_str(window, "To Continue", 2, 70);
    }
}
 800a2a2:	e01c      	b.n	800a2de <game_paused+0x66>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	2164      	movs	r1, #100	; 0x64
 800a2ae:	9103      	str	r1, [sp, #12]
 800a2b0:	210a      	movs	r1, #10
 800a2b2:	9102      	str	r1, [sp, #8]
 800a2b4:	2104      	movs	r1, #4
 800a2b6:	9101      	str	r1, [sp, #4]
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2100      	movs	r1, #0
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f002 f91b 	bl	800c4fc <drawRect_color>
        print_str(window, "Press Space", 2, 10);
 800a2c6:	230a      	movs	r3, #10
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	4907      	ldr	r1, [pc, #28]	; (800a2e8 <game_paused+0x70>)
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f89d 	bl	800a40c <print_str>
        print_str(window, "To Continue", 2, 70);
 800a2d2:	2346      	movs	r3, #70	; 0x46
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	4905      	ldr	r1, [pc, #20]	; (800a2ec <game_paused+0x74>)
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f897 	bl	800a40c <print_str>
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0800e44c 	.word	0x0800e44c
 800a2ec:	0800e458 	.word	0x0800e458

0800a2f0 <game_start>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_start(Window* window, game_input_t event) {
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af04      	add	r7, sp, #16
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	2b05      	cmp	r3, #5
 800a300:	d10c      	bne.n	800a31c <game_start+0x2c>
    	startMusic();
 800a302:	f000 f93b 	bl	800a57c <startMusic>

    	window->game.state = Playing;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a30c:	33cc      	adds	r3, #204	; 0xcc
 800a30e:	2201      	movs	r2, #1
 800a310:	701a      	strb	r2, [r3, #0]
    	game_playing(window, INPUT_ERROR);
 800a312:	2106      	movs	r1, #6
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff fef7 	bl	800a108 <game_playing>
        print_str(window, "Welcome To", 2, 10);
        print_str(window, "Tetris!", 20, 110);
        print_str(window, "Press Space", 2, 210);
        print_str(window, "To Continue", 2, 270);
    }
}
 800a31a:	e029      	b.n	800a370 <game_start+0x80>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	2164      	movs	r1, #100	; 0x64
 800a326:	9103      	str	r1, [sp, #12]
 800a328:	210a      	movs	r1, #10
 800a32a:	9102      	str	r1, [sp, #8]
 800a32c:	2104      	movs	r1, #4
 800a32e:	9101      	str	r1, [sp, #4]
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	4613      	mov	r3, r2
 800a334:	2200      	movs	r2, #0
 800a336:	2100      	movs	r1, #0
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f002 f8df 	bl	800c4fc <drawRect_color>
        print_str(window, "Welcome To", 2, 10);
 800a33e:	230a      	movs	r3, #10
 800a340:	2202      	movs	r2, #2
 800a342:	490d      	ldr	r1, [pc, #52]	; (800a378 <game_start+0x88>)
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f861 	bl	800a40c <print_str>
        print_str(window, "Tetris!", 20, 110);
 800a34a:	236e      	movs	r3, #110	; 0x6e
 800a34c:	2214      	movs	r2, #20
 800a34e:	490b      	ldr	r1, [pc, #44]	; (800a37c <game_start+0x8c>)
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f85b 	bl	800a40c <print_str>
        print_str(window, "Press Space", 2, 210);
 800a356:	23d2      	movs	r3, #210	; 0xd2
 800a358:	2202      	movs	r2, #2
 800a35a:	4909      	ldr	r1, [pc, #36]	; (800a380 <game_start+0x90>)
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f855 	bl	800a40c <print_str>
        print_str(window, "To Continue", 2, 270);
 800a362:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800a366:	2202      	movs	r2, #2
 800a368:	4906      	ldr	r1, [pc, #24]	; (800a384 <game_start+0x94>)
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f84e 	bl	800a40c <print_str>
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	0800e464 	.word	0x0800e464
 800a37c:	0800e470 	.word	0x0800e470
 800a380:	0800e44c 	.word	0x0800e44c
 800a384:	0800e458 	.word	0x0800e458

0800a388 <game_ended>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_ended(Window* window, game_input_t event) {
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
	if (event == TOGGLEPAUSE) {
 800a394:	78fb      	ldrb	r3, [r7, #3]
 800a396:	2b05      	cmp	r3, #5
 800a398:	d10e      	bne.n	800a3b8 <game_ended+0x30>
		fall_rate = 1000;
 800a39a:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <game_ended+0x44>)
 800a39c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3a0:	601a      	str	r2, [r3, #0]
		window->game.state = Start;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a3a8:	33cc      	adds	r3, #204	; 0xcc
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
		game_start(window, INPUT_ERROR);
 800a3ae:	2106      	movs	r1, #6
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ff9d 	bl	800a2f0 <game_start>
		tetris_drawEndScreen(window);
	}



}
 800a3b6:	e004      	b.n	800a3c2 <game_ended+0x3a>
		stopMusic();
 800a3b8:	f000 f8c8 	bl	800a54c <stopMusic>
		tetris_drawEndScreen(window);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 fcc3 	bl	800bd48 <tetris_drawEndScreen>
}
 800a3c2:	bf00      	nop
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	200005d0 	.word	0x200005d0

0800a3d0 <swap_buffer>:
/**
 * @brief Swap the image buffers.
 *
 * @param window window with the image buffers.
 */
void swap_buffer(Window * window) {
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
	// Swap pointers
	uint8_t** tmp = window->true;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	60fb      	str	r3, [r7, #12]
	window->true = window->frame;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689a      	ldr	r2, [r3, #8]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	60da      	str	r2, [r3, #12]
	window->frame = tmp;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	609a      	str	r2, [r3, #8]
//	clear_buffer();
	// Change DMA memory address
	hdac1.DMA_Handle1->Instance->CMAR = (uint32_t) window->true[0];
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4b05      	ldr	r3, [pc, #20]	; (800a408 <swap_buffer+0x38>)
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	60da      	str	r2, [r3, #12]
}
 800a3fa:	bf00      	nop
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	2000215c 	.word	0x2000215c

0800a40c <print_str>:

void print_str(Window * window, char* buffer, int x, int y) {
 800a40c:	b480      	push	{r7}
 800a40e:	b08b      	sub	sp, #44	; 0x2c
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]

	x += 3; // Avoid back porch
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3303      	adds	r3, #3
 800a41e:	607b      	str	r3, [r7, #4]
	y += 70;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	3346      	adds	r3, #70	; 0x46
 800a424:	603b      	str	r3, [r7, #0]

	char cur_char = buffer[0];
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(cur_char >= 97) cur_char -= 32;
 800a42e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a432:	2b60      	cmp	r3, #96	; 0x60
 800a434:	d904      	bls.n	800a440 <print_str+0x34>
 800a436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43a:	3b20      	subs	r3, #32
 800a43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	623b      	str	r3, [r7, #32]
	while(cur_char != '\0') {
 800a444:	e073      	b.n	800a52e <print_str+0x122>
		char* bitmap = font_map[cur_char - 32]; // 32 = ' '
 800a446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a44a:	f1a3 0220 	sub.w	r2, r3, #32
 800a44e:	4613      	mov	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4413      	add	r3, r2
 800a454:	009a      	lsls	r2, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	4a3a      	ldr	r2, [pc, #232]	; (800a544 <print_str+0x138>)
 800a45a:	4413      	add	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]
		// y-value precursor
		for(int h = 0; h < 70; h++) {
 800a45e:	2300      	movs	r3, #0
 800a460:	61fb      	str	r3, [r7, #28]
 800a462:	e04c      	b.n	800a4fe <print_str+0xf2>
			for (int w = 0; w < 7; w++) {
 800a464:	2300      	movs	r3, #0
 800a466:	61bb      	str	r3, [r7, #24]
 800a468:	e043      	b.n	800a4f2 <print_str+0xe6>
				// Pre- and Post- empty space on x & y
				if (h < 10 || w == 0 || h >= 60 || w == 6) {
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	2b09      	cmp	r3, #9
 800a46e:	dd08      	ble.n	800a482 <print_str+0x76>
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d005      	beq.n	800a482 <print_str+0x76>
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	2b3b      	cmp	r3, #59	; 0x3b
 800a47a:	dc02      	bgt.n	800a482 <print_str+0x76>
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	2b06      	cmp	r3, #6
 800a480:	d10e      	bne.n	800a4a0 <print_str+0x94>
					window->frame[y+h][x+w] = 100;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	440b      	add	r3, r1
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6879      	ldr	r1, [r7, #4]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	440a      	add	r2, r1
 800a498:	4413      	add	r3, r2
 800a49a:	2264      	movs	r2, #100	; 0x64
 800a49c:	701a      	strb	r2, [r3, #0]
					continue;
 800a49e:	e025      	b.n	800a4ec <print_str+0xe0>
				}
				int array_index = ((h-10)/10) * 5 + (w-1); // h/10 = floor division, to stretch
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	3b0a      	subs	r3, #10
 800a4a4:	4a28      	ldr	r2, [pc, #160]	; (800a548 <print_str+0x13c>)
 800a4a6:	fb82 1203 	smull	r1, r2, r2, r3
 800a4aa:	1092      	asrs	r2, r2, #2
 800a4ac:	17db      	asrs	r3, r3, #31
 800a4ae:	1ad2      	subs	r2, r2, r3
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	441a      	add	r2, r3
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	4413      	add	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]
				window->frame[y+h][x+w] = bitmap[array_index] ? 170 : 100;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <print_str+0xc2>
 800a4ca:	20aa      	movs	r0, #170	; 0xaa
 800a4cc:	e000      	b.n	800a4d0 <print_str+0xc4>
 800a4ce:	2064      	movs	r0, #100	; 0x64
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	689a      	ldr	r2, [r3, #8]
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	440b      	add	r3, r1
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	440a      	add	r2, r1
 800a4e6:	4413      	add	r3, r2
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	701a      	strb	r2, [r3, #0]
			for (int w = 0; w < 7; w++) {
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	61bb      	str	r3, [r7, #24]
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	2b06      	cmp	r3, #6
 800a4f6:	ddb8      	ble.n	800a46a <print_str+0x5e>
		for(int h = 0; h < 70; h++) {
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	61fb      	str	r3, [r7, #28]
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	2b45      	cmp	r3, #69	; 0x45
 800a502:	ddaf      	ble.n	800a464 <print_str+0x58>
			}
		}
		x += 7; // 1 pre, 5 char, 1 post
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3307      	adds	r3, #7
 800a508:	607b      	str	r3, [r7, #4]
		i++;
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	3301      	adds	r3, #1
 800a50e:	623b      	str	r3, [r7, #32]
		cur_char = buffer[i];
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	4413      	add	r3, r2
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//'a' -> 'A' for example
		if(cur_char >= 97) cur_char -= 32;
 800a51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a520:	2b60      	cmp	r3, #96	; 0x60
 800a522:	d904      	bls.n	800a52e <print_str+0x122>
 800a524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a528:	3b20      	subs	r3, #32
 800a52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(cur_char != '\0') {
 800a52e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a532:	2b00      	cmp	r3, #0
 800a534:	d187      	bne.n	800a446 <print_str+0x3a>
	}
}
 800a536:	bf00      	nop
 800a538:	bf00      	nop
 800a53a:	372c      	adds	r7, #44	; 0x2c
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	2000000c 	.word	0x2000000c
 800a548:	66666667 	.word	0x66666667

0800a54c <stopMusic>:

void stopMusic() {
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
	// End Music
	HAL_TIM_Base_Stop(&htim15);
 800a550:	4807      	ldr	r0, [pc, #28]	; (800a570 <stopMusic+0x24>)
 800a552:	f7f9 fc4b 	bl	8003dec <HAL_TIM_Base_Stop>
	HAL_Delay(50);
 800a556:	2032      	movs	r0, #50	; 0x32
 800a558:	f7f6 fd3a 	bl	8000fd0 <HAL_Delay>
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_2);
 800a55c:	2110      	movs	r1, #16
 800a55e:	4805      	ldr	r0, [pc, #20]	; (800a574 <stopMusic+0x28>)
 800a560:	f7f6 ff2a 	bl	80013b8 <HAL_DAC_Stop_DMA>
	HAL_TIM_Base_Stop_IT(&htim3);
 800a564:	4804      	ldr	r0, [pc, #16]	; (800a578 <stopMusic+0x2c>)
 800a566:	f7f9 fcd9 	bl	8003f1c <HAL_TIM_Base_Stop_IT>

	//htim3.Instance->APR = 0;
	//htim15.Instance->APR = 0;
}
 800a56a:	bf00      	nop
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20002170 	.word	0x20002170
 800a574:	2000215c 	.word	0x2000215c
 800a578:	2000221c 	.word	0x2000221c

0800a57c <startMusic>:

void startMusic() {
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af02      	add	r7, sp, #8
	// Start Music
	HAL_TIM_Base_Start_IT(&htim3);
 800a582:	480f      	ldr	r0, [pc, #60]	; (800a5c0 <startMusic+0x44>)
 800a584:	f7f9 fc5a 	bl	8003e3c <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 800a588:	2064      	movs	r0, #100	; 0x64
 800a58a:	f7f6 fd21 	bl	8000fd0 <HAL_Delay>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2,
 800a58e:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <startMusic+0x48>)
 800a590:	681a      	ldr	r2, [r3, #0]
			(uint16_t*) (wave_data + offset * data_size), data_size,
 800a592:	4b0d      	ldr	r3, [pc, #52]	; (800a5c8 <startMusic+0x4c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4619      	mov	r1, r3
 800a598:	4b0c      	ldr	r3, [pc, #48]	; (800a5cc <startMusic+0x50>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	fb03 f301 	mul.w	r3, r3, r1
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	441a      	add	r2, r3
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2,
 800a5a4:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <startMusic+0x50>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	9100      	str	r1, [sp, #0]
 800a5ac:	2110      	movs	r1, #16
 800a5ae:	4808      	ldr	r0, [pc, #32]	; (800a5d0 <startMusic+0x54>)
 800a5b0:	f7f6 fe36 	bl	8001220 <HAL_DAC_Start_DMA>
			DAC_ALIGN_12B_R);

	HAL_TIM_Base_Start(&htim15);
 800a5b4:	4807      	ldr	r0, [pc, #28]	; (800a5d4 <startMusic+0x58>)
 800a5b6:	f7f9 fbb1 	bl	8003d1c <HAL_TIM_Base_Start>
}
 800a5ba:	bf00      	nop
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	2000221c 	.word	0x2000221c
 800a5c4:	20000628 	.word	0x20000628
 800a5c8:	2000205c 	.word	0x2000205c
 800a5cc:	2000062c 	.word	0x2000062c
 800a5d0:	2000215c 	.word	0x2000215c
 800a5d4:	20002170 	.word	0x20002170

0800a5d8 <pauseMusic>:

void pauseMusic() {
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim15);
 800a5dc:	4802      	ldr	r0, [pc, #8]	; (800a5e8 <pauseMusic+0x10>)
 800a5de:	f7f9 fc05 	bl	8003dec <HAL_TIM_Base_Stop>
}
 800a5e2:	bf00      	nop
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20002170 	.word	0x20002170

0800a5ec <resumeMusic>:
void resumeMusic() {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim15);
 800a5f0:	4802      	ldr	r0, [pc, #8]	; (800a5fc <resumeMusic+0x10>)
 800a5f2:	f7f9 fb93 	bl	8003d1c <HAL_TIM_Base_Start>
}
 800a5f6:	bf00      	nop
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20002170 	.word	0x20002170

0800a600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 800a606:	2300      	movs	r3, #0
 800a608:	607b      	str	r3, [r7, #4]
 800a60a:	e007      	b.n	800a61c <main+0x1c>
	    input_buffer[i] = INPUT_ERROR;
 800a60c:	4a30      	ldr	r2, [pc, #192]	; (800a6d0 <main+0xd0>)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4413      	add	r3, r2
 800a612:	2206      	movs	r2, #6
 800a614:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3301      	adds	r3, #1
 800a61a:	607b      	str	r3, [r7, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b04      	cmp	r3, #4
 800a620:	ddf4      	ble.n	800a60c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a622:	f7f6 fc9d 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a626:	f000 f86f 	bl	800a708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a62a:	f000 fb45 	bl	800acb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800a62e:	f000 fb11 	bl	800ac54 <MX_DMA_Init>
  MX_DAC1_Init();
 800a632:	f000 f8bb 	bl	800a7ac <MX_DAC1_Init>

  MX_TIM4_Init();
 800a636:	f000 fa21 	bl	800aa7c <MX_TIM4_Init>
  MX_TIM2_Init();
 800a63a:	f000 f94f 	bl	800a8dc <MX_TIM2_Init>
  MX_TIM1_Init();
 800a63e:	f000 f8f5 	bl	800a82c <MX_TIM1_Init>
  MX_TIM3_Init();
 800a642:	f000 f9c7 	bl	800a9d4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800a646:	f000 fab9 	bl	800abbc <MX_USART1_UART_Init>
  MX_TIM15_Init();
 800a64a:	f000 fa65 	bl	800ab18 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  create_window(&window);
 800a64e:	4821      	ldr	r0, [pc, #132]	; (800a6d4 <main+0xd4>)
 800a650:	f7ff fcf2 	bl	800a038 <create_window>

  // Fill the frame buffer
  //init_buffer(window.imgBuff1, window.imgBuff2);
  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 800a654:	4820      	ldr	r0, [pc, #128]	; (800a6d8 <main+0xd8>)
 800a656:	f7f9 fbf1 	bl	8003e3c <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800a65a:	2064      	movs	r0, #100	; 0x64
 800a65c:	f7f6 fcb8 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 800a660:	210c      	movs	r1, #12
 800a662:	481e      	ldr	r0, [pc, #120]	; (800a6dc <main+0xdc>)
 800a664:	f7f9 fcea 	bl	800403c <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 800a668:	2064      	movs	r0, #100	; 0x64
 800a66a:	f7f6 fcb1 	bl	8000fd0 <HAL_Delay>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) window.true[0], horiz_size*vert_size, DAC_ALIGN_8B_R);
 800a66e:	4b19      	ldr	r3, [pc, #100]	; (800a6d4 <main+0xd4>)
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	2308      	movs	r3, #8
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	f64a 7364 	movw	r3, #44900	; 0xaf64
 800a67c:	2100      	movs	r1, #0
 800a67e:	4818      	ldr	r0, [pc, #96]	; (800a6e0 <main+0xe0>)
 800a680:	f7f6 fdce 	bl	8001220 <HAL_DAC_Start_DMA>
  HAL_Delay(100);
 800a684:	2064      	movs	r0, #100	; 0x64
 800a686:	f7f6 fca3 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 800a68a:	4816      	ldr	r0, [pc, #88]	; (800a6e4 <main+0xe4>)
 800a68c:	f7f9 fb46 	bl	8003d1c <HAL_TIM_Base_Start>
  HAL_Delay(100);
 800a690:	2064      	movs	r0, #100	; 0x64
 800a692:	f7f6 fc9d 	bl	8000fd0 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800a696:	2201      	movs	r2, #1
 800a698:	4913      	ldr	r1, [pc, #76]	; (800a6e8 <main+0xe8>)
 800a69a:	4814      	ldr	r0, [pc, #80]	; (800a6ec <main+0xec>)
 800a69c:	f7fa ff8c 	bl	80055b8 <HAL_UART_Receive_IT>
  HAL_Delay(100);
 800a6a0:	2064      	movs	r0, #100	; 0x64
 800a6a2:	f7f6 fc95 	bl	8000fd0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800a6a6:	f7fc ff2f 	bl	8007508 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of frameTask */
  frameTaskHandle = osThreadNew(updateGameLogic, NULL, &frameTask_attributes);
 800a6aa:	4a11      	ldr	r2, [pc, #68]	; (800a6f0 <main+0xf0>)
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4811      	ldr	r0, [pc, #68]	; (800a6f4 <main+0xf4>)
 800a6b0:	f7fc ff74 	bl	800759c <osThreadNew>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	4a10      	ldr	r2, [pc, #64]	; (800a6f8 <main+0xf8>)
 800a6b8:	6013      	str	r3, [r2, #0]

  /* creation of soundTask */
  soundTaskHandle = osThreadNew(soundController, NULL, &soundTask_attributes);
 800a6ba:	4a10      	ldr	r2, [pc, #64]	; (800a6fc <main+0xfc>)
 800a6bc:	2100      	movs	r1, #0
 800a6be:	4810      	ldr	r0, [pc, #64]	; (800a700 <main+0x100>)
 800a6c0:	f7fc ff6c 	bl	800759c <osThreadNew>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	4a0f      	ldr	r2, [pc, #60]	; (800a704 <main+0x104>)
 800a6c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800a6ca:	f7fc ff41 	bl	8007550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800a6ce:	e7fe      	b.n	800a6ce <main+0xce>
 800a6d0:	20002268 	.word	0x20002268
 800a6d4:	2000239c 	.word	0x2000239c
 800a6d8:	20002304 	.word	0x20002304
 800a6dc:	20002350 	.word	0x20002350
 800a6e0:	2000215c 	.word	0x2000215c
 800a6e4:	20002110 	.word	0x20002110
 800a6e8:	20000624 	.word	0x20000624
 800a6ec:	20002270 	.word	0x20002270
 800a6f0:	0803fe70 	.word	0x0803fe70
 800a6f4:	0800af19 	.word	0x0800af19
 800a6f8:	2001aa6c 	.word	0x2001aa6c
 800a6fc:	0803fe94 	.word	0x0803fe94
 800a700:	0800af99 	.word	0x0800af99
 800a704:	20002300 	.word	0x20002300

0800a708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b096      	sub	sp, #88	; 0x58
 800a70c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a70e:	f107 0314 	add.w	r3, r7, #20
 800a712:	2244      	movs	r2, #68	; 0x44
 800a714:	2100      	movs	r1, #0
 800a716:	4618      	mov	r0, r3
 800a718:	f002 f9a2 	bl	800ca60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a71c:	463b      	mov	r3, r7
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	605a      	str	r2, [r3, #4]
 800a724:	609a      	str	r2, [r3, #8]
 800a726:	60da      	str	r2, [r3, #12]
 800a728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a72a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a72e:	f7f7 fdd7 	bl	80022e0 <HAL_PWREx_ControlVoltageScaling>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <SystemClock_Config+0x34>
  {
    Error_Handler();
 800a738:	f000 fcbe 	bl	800b0b8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a73c:	2310      	movs	r3, #16
 800a73e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a740:	2301      	movs	r3, #1
 800a742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a748:	2360      	movs	r3, #96	; 0x60
 800a74a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a74c:	2302      	movs	r3, #2
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a750:	2301      	movs	r3, #1
 800a752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a754:	2301      	movs	r3, #1
 800a756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800a758:	2328      	movs	r3, #40	; 0x28
 800a75a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a75c:	2302      	movs	r3, #2
 800a75e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a760:	2302      	movs	r3, #2
 800a762:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a764:	2302      	movs	r3, #2
 800a766:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a768:	f107 0314 	add.w	r3, r7, #20
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7f7 fe5b 	bl	8002428 <HAL_RCC_OscConfig>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <SystemClock_Config+0x74>
  {
    Error_Handler();
 800a778:	f000 fc9e 	bl	800b0b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a77c:	230f      	movs	r3, #15
 800a77e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a780:	2303      	movs	r3, #3
 800a782:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a784:	2300      	movs	r3, #0
 800a786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a78c:	2300      	movs	r3, #0
 800a78e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800a790:	463b      	mov	r3, r7
 800a792:	2103      	movs	r1, #3
 800a794:	4618      	mov	r0, r3
 800a796:	f7f8 fa6d 	bl	8002c74 <HAL_RCC_ClockConfig>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800a7a0:	f000 fc8a 	bl	800b0b8 <Error_Handler>
  }
}
 800a7a4:	bf00      	nop
 800a7a6:	3758      	adds	r7, #88	; 0x58
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08a      	sub	sp, #40	; 0x28
 800a7b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	2228      	movs	r2, #40	; 0x28
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f002 f951 	bl	800ca60 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a7be:	4b19      	ldr	r3, [pc, #100]	; (800a824 <MX_DAC1_Init+0x78>)
 800a7c0:	4a19      	ldr	r2, [pc, #100]	; (800a828 <MX_DAC1_Init+0x7c>)
 800a7c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a7c4:	4817      	ldr	r0, [pc, #92]	; (800a824 <MX_DAC1_Init+0x78>)
 800a7c6:	f7f6 fd09 	bl	80011dc <HAL_DAC_Init>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a7d0:	f000 fc72 	bl	800b0b8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800a7d8:	230e      	movs	r3, #14
 800a7da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a7ec:	463b      	mov	r3, r7
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	480c      	ldr	r0, [pc, #48]	; (800a824 <MX_DAC1_Init+0x78>)
 800a7f4:	f7f6 fea8 	bl	8001548 <HAL_DAC_ConfigChannel>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800a7fe:	f000 fc5b 	bl	800b0b8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 800a802:	2322      	movs	r3, #34	; 0x22
 800a804:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800a806:	463b      	mov	r3, r7
 800a808:	2210      	movs	r2, #16
 800a80a:	4619      	mov	r1, r3
 800a80c:	4805      	ldr	r0, [pc, #20]	; (800a824 <MX_DAC1_Init+0x78>)
 800a80e:	f7f6 fe9b 	bl	8001548 <HAL_DAC_ConfigChannel>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 800a818:	f000 fc4e 	bl	800b0b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 800a81c:	bf00      	nop
 800a81e:	3728      	adds	r7, #40	; 0x28
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	2000215c 	.word	0x2000215c
 800a828:	40007400 	.word	0x40007400

0800a82c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a832:	f107 030c 	add.w	r3, r7, #12
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	605a      	str	r2, [r3, #4]
 800a83c:	609a      	str	r2, [r3, #8]
 800a83e:	60da      	str	r2, [r3, #12]
 800a840:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a842:	463b      	mov	r3, r7
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	605a      	str	r2, [r3, #4]
 800a84a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a84c:	4b21      	ldr	r3, [pc, #132]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a84e:	4a22      	ldr	r2, [pc, #136]	; (800a8d8 <MX_TIM1_Init+0xac>)
 800a850:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a852:	4b20      	ldr	r3, [pc, #128]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a854:	2200      	movs	r2, #0
 800a856:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a858:	4b1e      	ldr	r3, [pc, #120]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800a85e:	4b1d      	ldr	r3, [pc, #116]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a860:	2263      	movs	r2, #99	; 0x63
 800a862:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a864:	4b1b      	ldr	r3, [pc, #108]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a866:	2200      	movs	r2, #0
 800a868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a86a:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a870:	4b18      	ldr	r3, [pc, #96]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a872:	2200      	movs	r2, #0
 800a874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a876:	4817      	ldr	r0, [pc, #92]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a878:	f7f9 f9f8 	bl	8003c6c <HAL_TIM_Base_Init>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a882:	f000 fc19 	bl	800b0b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800a886:	2306      	movs	r3, #6
 800a888:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800a88a:	2330      	movs	r3, #48	; 0x30
 800a88c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800a88e:	f107 030c 	add.w	r3, r7, #12
 800a892:	4619      	mov	r1, r3
 800a894:	480f      	ldr	r0, [pc, #60]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a896:	f7f9 ffd4 	bl	8004842 <HAL_TIM_SlaveConfigSynchro>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800a8a0:	f000 fc0a 	bl	800b0b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a8a4:	2320      	movs	r3, #32
 800a8a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800a8a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a8b2:	463b      	mov	r3, r7
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4807      	ldr	r0, [pc, #28]	; (800a8d4 <MX_TIM1_Init+0xa8>)
 800a8b8:	f7fa fcf0 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800a8c2:	f000 fbf9 	bl	800b0b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800a8c6:	4b04      	ldr	r3, [pc, #16]	; (800a8d8 <MX_TIM1_Init+0xac>)
 800a8c8:	2237      	movs	r2, #55	; 0x37
 800a8ca:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM1_Init 2 */

}
 800a8cc:	bf00      	nop
 800a8ce:	3720      	adds	r7, #32
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20002304 	.word	0x20002304
 800a8d8:	40012c00 	.word	0x40012c00

0800a8dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b090      	sub	sp, #64	; 0x40
 800a8e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a8e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	605a      	str	r2, [r3, #4]
 800a8ec:	609a      	str	r2, [r3, #8]
 800a8ee:	60da      	str	r2, [r3, #12]
 800a8f0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a8f2:	f107 0320 	add.w	r3, r7, #32
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	605a      	str	r2, [r3, #4]
 800a8fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a8fe:	1d3b      	adds	r3, r7, #4
 800a900:	2200      	movs	r2, #0
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	605a      	str	r2, [r3, #4]
 800a906:	609a      	str	r2, [r3, #8]
 800a908:	60da      	str	r2, [r3, #12]
 800a90a:	611a      	str	r2, [r3, #16]
 800a90c:	615a      	str	r2, [r3, #20]
 800a90e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a910:	4b2f      	ldr	r3, [pc, #188]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a916:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a918:	4b2d      	ldr	r3, [pc, #180]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a91e:	4b2c      	ldr	r3, [pc, #176]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a920:	2200      	movs	r2, #0
 800a922:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800a924:	4b2a      	ldr	r3, [pc, #168]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a926:	2263      	movs	r2, #99	; 0x63
 800a928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a92a:	4b29      	ldr	r3, [pc, #164]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a930:	4b27      	ldr	r3, [pc, #156]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a932:	2200      	movs	r2, #0
 800a934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a936:	4826      	ldr	r0, [pc, #152]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a938:	f7f9 f998 	bl	8003c6c <HAL_TIM_Base_Init>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800a942:	f000 fbb9 	bl	800b0b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a946:	4822      	ldr	r0, [pc, #136]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a948:	f7f9 fb17 	bl	8003f7a <HAL_TIM_PWM_Init>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800a952:	f000 fbb1 	bl	800b0b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800a956:	2306      	movs	r3, #6
 800a958:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800a95a:	2330      	movs	r3, #48	; 0x30
 800a95c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800a95e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a962:	4619      	mov	r1, r3
 800a964:	481a      	ldr	r0, [pc, #104]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a966:	f7f9 ff6c 	bl	8004842 <HAL_TIM_SlaveConfigSynchro>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800a970:	f000 fba2 	bl	800b0b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a974:	2320      	movs	r3, #32
 800a976:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a978:	2300      	movs	r3, #0
 800a97a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a97c:	f107 0320 	add.w	r3, r7, #32
 800a980:	4619      	mov	r1, r3
 800a982:	4813      	ldr	r0, [pc, #76]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a984:	f7fa fc8a 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800a98e:	f000 fb93 	bl	800b0b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a992:	2360      	movs	r3, #96	; 0x60
 800a994:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 800a996:	235a      	movs	r3, #90	; 0x5a
 800a998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a9a2:	1d3b      	adds	r3, r7, #4
 800a9a4:	220c      	movs	r2, #12
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	4809      	ldr	r0, [pc, #36]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a9aa:	f7f9 fd6d 	bl	8004488 <HAL_TIM_PWM_ConfigChannel>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800a9b4:	f000 fb80 	bl	800b0b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800a9b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9bc:	2237      	movs	r2, #55	; 0x37
 800a9be:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a9c0:	4803      	ldr	r0, [pc, #12]	; (800a9d0 <MX_TIM2_Init+0xf4>)
 800a9c2:	f000 fcc7 	bl	800b354 <HAL_TIM_MspPostInit>

}
 800a9c6:	bf00      	nop
 800a9c8:	3740      	adds	r7, #64	; 0x40
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20002350 	.word	0x20002350

0800a9d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a9da:	f107 030c 	add.w	r3, r7, #12
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	605a      	str	r2, [r3, #4]
 800a9e4:	609a      	str	r2, [r3, #8]
 800a9e6:	60da      	str	r2, [r3, #12]
 800a9e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9ea:	463b      	mov	r3, r7
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	605a      	str	r2, [r3, #4]
 800a9f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a9f4:	4b1f      	ldr	r3, [pc, #124]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800a9f6:	4a20      	ldr	r2, [pc, #128]	; (800aa78 <MX_TIM3_Init+0xa4>)
 800a9f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a9fa:	4b1e      	ldr	r3, [pc, #120]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa00:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25399;
 800aa06:	4b1b      	ldr	r3, [pc, #108]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800aa08:	f246 3237 	movw	r2, #25399	; 0x6337
 800aa0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa0e:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa14:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800aa1a:	4816      	ldr	r0, [pc, #88]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800aa1c:	f7f9 f926 	bl	8003c6c <HAL_TIM_Base_Init>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800aa26:	f000 fb47 	bl	800b0b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800aa2a:	2306      	movs	r3, #6
 800aa2c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800aa2e:	2320      	movs	r3, #32
 800aa30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800aa32:	f107 030c 	add.w	r3, r7, #12
 800aa36:	4619      	mov	r1, r3
 800aa38:	480e      	ldr	r0, [pc, #56]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800aa3a:	f7f9 ff02 	bl	8004842 <HAL_TIM_SlaveConfigSynchro>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800aa44:	f000 fb38 	bl	800b0b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800aa50:	463b      	mov	r3, r7
 800aa52:	4619      	mov	r1, r3
 800aa54:	4807      	ldr	r0, [pc, #28]	; (800aa74 <MX_TIM3_Init+0xa0>)
 800aa56:	f7fa fc21 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800aa60:	f000 fb2a 	bl	800b0b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->SMCR = TIM_TS_ITR2 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800aa64:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <MX_TIM3_Init+0xa4>)
 800aa66:	2227      	movs	r2, #39	; 0x27
 800aa68:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM3_Init 2 */

}
 800aa6a:	bf00      	nop
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	2000221c 	.word	0x2000221c
 800aa78:	40000400 	.word	0x40000400

0800aa7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aa82:	f107 0310 	add.w	r3, r7, #16
 800aa86:	2200      	movs	r2, #0
 800aa88:	601a      	str	r2, [r3, #0]
 800aa8a:	605a      	str	r2, [r3, #4]
 800aa8c:	609a      	str	r2, [r3, #8]
 800aa8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa90:	1d3b      	adds	r3, r7, #4
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	605a      	str	r2, [r3, #4]
 800aa98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800aa9a:	4b1d      	ldr	r3, [pc, #116]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aa9c:	4a1d      	ldr	r2, [pc, #116]	; (800ab14 <MX_TIM4_Init+0x98>)
 800aa9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 800aaa0:	4b1b      	ldr	r3, [pc, #108]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aaa2:	2207      	movs	r2, #7
 800aaa4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aaa6:	4b1a      	ldr	r3, [pc, #104]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 800aaac:	4b18      	ldr	r3, [pc, #96]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aaae:	2202      	movs	r2, #2
 800aab0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aab2:	4b17      	ldr	r3, [pc, #92]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aab8:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800aabe:	4814      	ldr	r0, [pc, #80]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aac0:	f7f9 f8d4 	bl	8003c6c <HAL_TIM_Base_Init>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800aaca:	f000 faf5 	bl	800b0b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800aad4:	f107 0310 	add.w	r3, r7, #16
 800aad8:	4619      	mov	r1, r3
 800aada:	480d      	ldr	r0, [pc, #52]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aadc:	f7f9 fde8 	bl	80046b0 <HAL_TIM_ConfigClockSource>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800aae6:	f000 fae7 	bl	800b0b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800aaea:	2320      	movs	r3, #32
 800aaec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800aaf2:	1d3b      	adds	r3, r7, #4
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4806      	ldr	r0, [pc, #24]	; (800ab10 <MX_TIM4_Init+0x94>)
 800aaf8:	f7fa fbd0 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800ab02:	f000 fad9 	bl	800b0b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800ab06:	bf00      	nop
 800ab08:	3720      	adds	r7, #32
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20002110 	.word	0x20002110
 800ab14:	40000800 	.word	0x40000800

0800ab18 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b088      	sub	sp, #32
 800ab1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab1e:	f107 0310 	add.w	r3, r7, #16
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	605a      	str	r2, [r3, #4]
 800ab28:	609a      	str	r2, [r3, #8]
 800ab2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab2c:	1d3b      	adds	r3, r7, #4
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	605a      	str	r2, [r3, #4]
 800ab34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800ab36:	4b1f      	ldr	r3, [pc, #124]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab38:	4a1f      	ldr	r2, [pc, #124]	; (800abb8 <MX_TIM15_Init+0xa0>)
 800ab3a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800ab3c:	4b1d      	ldr	r3, [pc, #116]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab42:	4b1c      	ldr	r3, [pc, #112]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 800ab48:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab4a:	f242 720f 	movw	r2, #9999	; 0x270f
 800ab4e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab50:	4b18      	ldr	r3, [pc, #96]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800ab56:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab5c:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800ab62:	4814      	ldr	r0, [pc, #80]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab64:	f7f9 f882 	bl	8003c6c <HAL_TIM_Base_Init>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800ab6e:	f000 faa3 	bl	800b0b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800ab78:	f107 0310 	add.w	r3, r7, #16
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	480d      	ldr	r0, [pc, #52]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab80:	f7f9 fd96 	bl	80046b0 <HAL_TIM_ConfigClockSource>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800ab8a:	f000 fa95 	bl	800b0b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ab8e:	2320      	movs	r3, #32
 800ab90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab92:	2300      	movs	r3, #0
 800ab94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800ab96:	1d3b      	adds	r3, r7, #4
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4806      	ldr	r0, [pc, #24]	; (800abb4 <MX_TIM15_Init+0x9c>)
 800ab9c:	f7fa fb7e 	bl	800529c <HAL_TIMEx_MasterConfigSynchronization>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800aba6:	f000 fa87 	bl	800b0b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800abaa:	bf00      	nop
 800abac:	3720      	adds	r7, #32
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20002170 	.word	0x20002170
 800abb8:	40014000 	.word	0x40014000

0800abbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800abc0:	4b22      	ldr	r3, [pc, #136]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abc2:	4a23      	ldr	r2, [pc, #140]	; (800ac50 <MX_USART1_UART_Init+0x94>)
 800abc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800abc6:	4b21      	ldr	r3, [pc, #132]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800abcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800abce:	4b1f      	ldr	r3, [pc, #124]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800abd4:	4b1d      	ldr	r3, [pc, #116]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800abda:	4b1c      	ldr	r3, [pc, #112]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abdc:	2200      	movs	r2, #0
 800abde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800abe0:	4b1a      	ldr	r3, [pc, #104]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abe2:	220c      	movs	r2, #12
 800abe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800abe6:	4b19      	ldr	r3, [pc, #100]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abe8:	2200      	movs	r2, #0
 800abea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800abec:	4b17      	ldr	r3, [pc, #92]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abee:	2200      	movs	r2, #0
 800abf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800abf2:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800abf8:	4b14      	ldr	r3, [pc, #80]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800abfe:	4b13      	ldr	r3, [pc, #76]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ac04:	4811      	ldr	r0, [pc, #68]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800ac06:	f7fa fbef 	bl	80053e8 <HAL_UART_Init>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800ac10:	f000 fa52 	bl	800b0b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ac14:	2100      	movs	r1, #0
 800ac16:	480d      	ldr	r0, [pc, #52]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800ac18:	f7fc fb67 	bl	80072ea <HAL_UARTEx_SetTxFifoThreshold>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800ac22:	f000 fa49 	bl	800b0b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ac26:	2100      	movs	r1, #0
 800ac28:	4808      	ldr	r0, [pc, #32]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800ac2a:	f7fc fb9c 	bl	8007366 <HAL_UARTEx_SetRxFifoThreshold>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800ac34:	f000 fa40 	bl	800b0b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800ac38:	4804      	ldr	r0, [pc, #16]	; (800ac4c <MX_USART1_UART_Init+0x90>)
 800ac3a:	f7fc fb1d 	bl	8007278 <HAL_UARTEx_DisableFifoMode>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800ac44:	f000 fa38 	bl	800b0b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ac48:	bf00      	nop
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20002270 	.word	0x20002270
 800ac50:	40013800 	.word	0x40013800

0800ac54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800ac5a:	4b16      	ldr	r3, [pc, #88]	; (800acb4 <MX_DMA_Init+0x60>)
 800ac5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac5e:	4a15      	ldr	r2, [pc, #84]	; (800acb4 <MX_DMA_Init+0x60>)
 800ac60:	f043 0304 	orr.w	r3, r3, #4
 800ac64:	6493      	str	r3, [r2, #72]	; 0x48
 800ac66:	4b13      	ldr	r3, [pc, #76]	; (800acb4 <MX_DMA_Init+0x60>)
 800ac68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac6a:	f003 0304 	and.w	r3, r3, #4
 800ac6e:	607b      	str	r3, [r7, #4]
 800ac70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ac72:	4b10      	ldr	r3, [pc, #64]	; (800acb4 <MX_DMA_Init+0x60>)
 800ac74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac76:	4a0f      	ldr	r2, [pc, #60]	; (800acb4 <MX_DMA_Init+0x60>)
 800ac78:	f043 0301 	orr.w	r3, r3, #1
 800ac7c:	6493      	str	r3, [r2, #72]	; 0x48
 800ac7e:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <MX_DMA_Init+0x60>)
 800ac80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2105      	movs	r1, #5
 800ac8e:	200b      	movs	r0, #11
 800ac90:	f7f6 fa7a 	bl	8001188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800ac94:	200b      	movs	r0, #11
 800ac96:	f7f6 fa93 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2105      	movs	r1, #5
 800ac9e:	200c      	movs	r0, #12
 800aca0:	f7f6 fa72 	bl	8001188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800aca4:	200c      	movs	r0, #12
 800aca6:	f7f6 fa8b 	bl	80011c0 <HAL_NVIC_EnableIRQ>

}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	40021000 	.word	0x40021000

0800acb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acbe:	f107 030c 	add.w	r3, r7, #12
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	605a      	str	r2, [r3, #4]
 800acc8:	609a      	str	r2, [r3, #8]
 800acca:	60da      	str	r2, [r3, #12]
 800accc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800acce:	4b24      	ldr	r3, [pc, #144]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800acd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd2:	4a23      	ldr	r2, [pc, #140]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800acd4:	f043 0304 	orr.w	r3, r3, #4
 800acd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acda:	4b21      	ldr	r3, [pc, #132]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800acdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acde:	f003 0304 	and.w	r3, r3, #4
 800ace2:	60bb      	str	r3, [r7, #8]
 800ace4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ace6:	4b1e      	ldr	r3, [pc, #120]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800ace8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acea:	4a1d      	ldr	r2, [pc, #116]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800acec:	f043 0301 	orr.w	r3, r3, #1
 800acf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acf2:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800acf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	607b      	str	r3, [r7, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800acfe:	4b18      	ldr	r3, [pc, #96]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800ad00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad02:	4a17      	ldr	r2, [pc, #92]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800ad04:	f043 0302 	orr.w	r3, r3, #2
 800ad08:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad0a:	4b15      	ldr	r3, [pc, #84]	; (800ad60 <MX_GPIO_Init+0xa8>)
 800ad0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800ad16:	2200      	movs	r2, #0
 800ad18:	2104      	movs	r1, #4
 800ad1a:	4812      	ldr	r0, [pc, #72]	; (800ad64 <MX_GPIO_Init+0xac>)
 800ad1c:	f7f7 faa8 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800ad20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ad26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ad2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800ad30:	f107 030c 	add.w	r3, r7, #12
 800ad34:	4619      	mov	r1, r3
 800ad36:	480c      	ldr	r0, [pc, #48]	; (800ad68 <MX_GPIO_Init+0xb0>)
 800ad38:	f7f7 f908 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 800ad3c:	2304      	movs	r3, #4
 800ad3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad40:	2301      	movs	r3, #1
 800ad42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad44:	2300      	movs	r3, #0
 800ad46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 800ad4c:	f107 030c 	add.w	r3, r7, #12
 800ad50:	4619      	mov	r1, r3
 800ad52:	4804      	ldr	r0, [pc, #16]	; (800ad64 <MX_GPIO_Init+0xac>)
 800ad54:	f7f7 f8fa 	bl	8001f4c <HAL_GPIO_Init>

}
 800ad58:	bf00      	nop
 800ad5a:	3720      	adds	r7, #32
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	40021000 	.word	0x40021000
 800ad64:	48000400 	.word	0x48000400
 800ad68:	48000800 	.word	0x48000800

0800ad6c <push_input_buffer>:

/* USER CODE BEGIN 4 */
void push_input_buffer(game_input_t input) {
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	4603      	mov	r3, r0
 800ad74:	71fb      	strb	r3, [r7, #7]
	// Can't lock the queue, don't need one since this is called by an interrupt
	input_buffer[buffer_push] = input;
 800ad76:	4b0d      	ldr	r3, [pc, #52]	; (800adac <push_input_buffer+0x40>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	490d      	ldr	r1, [pc, #52]	; (800adb0 <push_input_buffer+0x44>)
 800ad7c:	79fa      	ldrb	r2, [r7, #7]
 800ad7e:	54ca      	strb	r2, [r1, r3]
	buffer_push = (buffer_push + 1) % INPUT_BUFFER_SIZE;
 800ad80:	4b0a      	ldr	r3, [pc, #40]	; (800adac <push_input_buffer+0x40>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	1c59      	adds	r1, r3, #1
 800ad86:	4b0b      	ldr	r3, [pc, #44]	; (800adb4 <push_input_buffer+0x48>)
 800ad88:	fb83 2301 	smull	r2, r3, r3, r1
 800ad8c:	105a      	asrs	r2, r3, #1
 800ad8e:	17cb      	asrs	r3, r1, #31
 800ad90:	1ad2      	subs	r2, r2, r3
 800ad92:	4613      	mov	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	1aca      	subs	r2, r1, r3
 800ad9a:	4b04      	ldr	r3, [pc, #16]	; (800adac <push_input_buffer+0x40>)
 800ad9c:	601a      	str	r2, [r3, #0]
}
 800ad9e:	bf00      	nop
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	20002054 	.word	0x20002054
 800adb0:	20002268 	.word	0x20002268
 800adb4:	66666667 	.word	0x66666667

0800adb8 <pop_input_buffer>:

game_input_t pop_input_buffer() {
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
	if(buffer_pop == buffer_push) {
 800adbe:	4b11      	ldr	r3, [pc, #68]	; (800ae04 <pop_input_buffer+0x4c>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b11      	ldr	r3, [pc, #68]	; (800ae08 <pop_input_buffer+0x50>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d101      	bne.n	800adce <pop_input_buffer+0x16>
		return INPUT_ERROR;
 800adca:	2306      	movs	r3, #6
 800adcc:	e014      	b.n	800adf8 <pop_input_buffer+0x40>
	}
	game_input_t ret = input_buffer[buffer_pop];
 800adce:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <pop_input_buffer+0x4c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a0e      	ldr	r2, [pc, #56]	; (800ae0c <pop_input_buffer+0x54>)
 800add4:	5cd3      	ldrb	r3, [r2, r3]
 800add6:	71fb      	strb	r3, [r7, #7]
	buffer_pop = (buffer_pop + 1) % INPUT_BUFFER_SIZE;
 800add8:	4b0a      	ldr	r3, [pc, #40]	; (800ae04 <pop_input_buffer+0x4c>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	1c59      	adds	r1, r3, #1
 800adde:	4b0c      	ldr	r3, [pc, #48]	; (800ae10 <pop_input_buffer+0x58>)
 800ade0:	fb83 2301 	smull	r2, r3, r3, r1
 800ade4:	105a      	asrs	r2, r3, #1
 800ade6:	17cb      	asrs	r3, r1, #31
 800ade8:	1ad2      	subs	r2, r2, r3
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	1aca      	subs	r2, r1, r3
 800adf2:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <pop_input_buffer+0x4c>)
 800adf4:	601a      	str	r2, [r3, #0]
	return ret;
 800adf6:	79fb      	ldrb	r3, [r7, #7]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	20002050 	.word	0x20002050
 800ae08:	20002054 	.word	0x20002054
 800ae0c:	20002268 	.word	0x20002268
 800ae10:	66666667 	.word	0x66666667

0800ae14 <process_user_input>:



game_input_t process_user_input(Window * window) {
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
    game_input_t c = pop_input_buffer();
 800ae1c:	f7ff ffcc 	bl	800adb8 <pop_input_buffer>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]
    while(c == INPUT_ERROR) c = pop_input_buffer();
 800ae24:	e003      	b.n	800ae2e <process_user_input+0x1a>
 800ae26:	f7ff ffc7 	bl	800adb8 <pop_input_buffer>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	2b06      	cmp	r3, #6
 800ae32:	d0f8      	beq.n	800ae26 <process_user_input+0x12>
    return c;
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
	char c = ((huart)->Instance)->RDR;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	73fb      	strb	r3, [r7, #15]
	switch (c) {
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	2b73      	cmp	r3, #115	; 0x73
 800ae56:	dc51      	bgt.n	800aefc <HAL_UART_RxCpltCallback+0xbc>
 800ae58:	2b61      	cmp	r3, #97	; 0x61
 800ae5a:	da08      	bge.n	800ae6e <HAL_UART_RxCpltCallback+0x2e>
 800ae5c:	2b3b      	cmp	r3, #59	; 0x3b
 800ae5e:	d042      	beq.n	800aee6 <HAL_UART_RxCpltCallback+0xa6>
 800ae60:	2b3b      	cmp	r3, #59	; 0x3b
 800ae62:	dc4b      	bgt.n	800aefc <HAL_UART_RxCpltCallback+0xbc>
 800ae64:	2b20      	cmp	r3, #32
 800ae66:	d046      	beq.n	800aef6 <HAL_UART_RxCpltCallback+0xb6>
 800ae68:	2b35      	cmp	r3, #53	; 0x35
 800ae6a:	d02d      	beq.n	800aec8 <HAL_UART_RxCpltCallback+0x88>
		push_input_buffer(DOWN);
		break;
	case 32: // space
		push_input_buffer(TOGGLEPAUSE);
	default:
		break;
 800ae6c:	e046      	b.n	800aefc <HAL_UART_RxCpltCallback+0xbc>
 800ae6e:	3b61      	subs	r3, #97	; 0x61
 800ae70:	2b12      	cmp	r3, #18
 800ae72:	d843      	bhi.n	800aefc <HAL_UART_RxCpltCallback+0xbc>
 800ae74:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <HAL_UART_RxCpltCallback+0x3c>)
 800ae76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7a:	bf00      	nop
 800ae7c:	0800aecf 	.word	0x0800aecf
 800ae80:	0800aefd 	.word	0x0800aefd
 800ae84:	0800aefd 	.word	0x0800aefd
 800ae88:	0800aed7 	.word	0x0800aed7
 800ae8c:	0800aefd 	.word	0x0800aefd
 800ae90:	0800aefd 	.word	0x0800aefd
 800ae94:	0800aefd 	.word	0x0800aefd
 800ae98:	0800aefd 	.word	0x0800aefd
 800ae9c:	0800aefd 	.word	0x0800aefd
 800aea0:	0800aefd 	.word	0x0800aefd
 800aea4:	0800aedf 	.word	0x0800aedf
 800aea8:	0800aefd 	.word	0x0800aefd
 800aeac:	0800aefd 	.word	0x0800aefd
 800aeb0:	0800aefd 	.word	0x0800aefd
 800aeb4:	0800aefd 	.word	0x0800aefd
 800aeb8:	0800aefd 	.word	0x0800aefd
 800aebc:	0800aefd 	.word	0x0800aefd
 800aec0:	0800aefd 	.word	0x0800aefd
 800aec4:	0800aeef 	.word	0x0800aeef
		hello_world();
 800aec8:	f7ff f8a8 	bl	800a01c <hello_world>
		break;
 800aecc:	e017      	b.n	800aefe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(LEFT);
 800aece:	2003      	movs	r0, #3
 800aed0:	f7ff ff4c 	bl	800ad6c <push_input_buffer>
		break;
 800aed4:	e013      	b.n	800aefe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(RIGHT);
 800aed6:	2004      	movs	r0, #4
 800aed8:	f7ff ff48 	bl	800ad6c <push_input_buffer>
		break;
 800aedc:	e00f      	b.n	800aefe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(CCW);
 800aede:	2002      	movs	r0, #2
 800aee0:	f7ff ff44 	bl	800ad6c <push_input_buffer>
		break;
 800aee4:	e00b      	b.n	800aefe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(CW);
 800aee6:	2001      	movs	r0, #1
 800aee8:	f7ff ff40 	bl	800ad6c <push_input_buffer>
		break;
 800aeec:	e007      	b.n	800aefe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(DOWN);
 800aeee:	2000      	movs	r0, #0
 800aef0:	f7ff ff3c 	bl	800ad6c <push_input_buffer>
		break;
 800aef4:	e003      	b.n	800aefe <HAL_UART_RxCpltCallback+0xbe>
		push_input_buffer(TOGGLEPAUSE);
 800aef6:	2005      	movs	r0, #5
 800aef8:	f7ff ff38 	bl	800ad6c <push_input_buffer>
		break;
 800aefc:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800aefe:	2201      	movs	r2, #1
 800af00:	4903      	ldr	r1, [pc, #12]	; (800af10 <HAL_UART_RxCpltCallback+0xd0>)
 800af02:	4804      	ldr	r0, [pc, #16]	; (800af14 <HAL_UART_RxCpltCallback+0xd4>)
 800af04:	f7fa fb58 	bl	80055b8 <HAL_UART_Receive_IT>
}
 800af08:	bf00      	nop
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	20000624 	.word	0x20000624
 800af14:	20002270 	.word	0x20002270

0800af18 <updateGameLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_updateGameLogic */
void updateGameLogic(void *argument)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Start the Game
	game_start(&window, INPUT_ERROR);
 800af20:	2106      	movs	r1, #6
 800af22:	481c      	ldr	r0, [pc, #112]	; (800af94 <updateGameLogic+0x7c>)
 800af24:	f7ff f9e4 	bl	800a2f0 <game_start>
	swap_buffer(&window);
 800af28:	481a      	ldr	r0, [pc, #104]	; (800af94 <updateGameLogic+0x7c>)
 800af2a:	f7ff fa51 	bl	800a3d0 <swap_buffer>

	/* Infinite loop */
	for(;;) {
		//osDelay(1);
	    // process button presses (update game state)
		game_input_t event = process_user_input(&window);
 800af2e:	4819      	ldr	r0, [pc, #100]	; (800af94 <updateGameLogic+0x7c>)
 800af30:	f7ff ff70 	bl	800ae14 <process_user_input>
 800af34:	4603      	mov	r3, r0
 800af36:	73fb      	strb	r3, [r7, #15]

		switch (window.game.state) {
 800af38:	4b16      	ldr	r3, [pc, #88]	; (800af94 <updateGameLogic+0x7c>)
 800af3a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800af3e:	33cc      	adds	r3, #204	; 0xcc
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b03      	cmp	r3, #3
 800af44:	d822      	bhi.n	800af8c <updateGameLogic+0x74>
 800af46:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <updateGameLogic+0x34>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800af5d 	.word	0x0800af5d
 800af50:	0800af69 	.word	0x0800af69
 800af54:	0800af75 	.word	0x0800af75
 800af58:	0800af81 	.word	0x0800af81
		  case Start:
			  game_start(&window, event);
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	4619      	mov	r1, r3
 800af60:	480c      	ldr	r0, [pc, #48]	; (800af94 <updateGameLogic+0x7c>)
 800af62:	f7ff f9c5 	bl	800a2f0 <game_start>
		  break;
 800af66:	e011      	b.n	800af8c <updateGameLogic+0x74>
		  case Playing:
			  // update the game state, and draw to frame buffer
			  game_playing(&window, event);
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	4619      	mov	r1, r3
 800af6c:	4809      	ldr	r0, [pc, #36]	; (800af94 <updateGameLogic+0x7c>)
 800af6e:	f7ff f8cb 	bl	800a108 <game_playing>
		  break;
 800af72:	e00b      	b.n	800af8c <updateGameLogic+0x74>
		  case Paused:
			  game_paused(&window, event);
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	4619      	mov	r1, r3
 800af78:	4806      	ldr	r0, [pc, #24]	; (800af94 <updateGameLogic+0x7c>)
 800af7a:	f7ff f97d 	bl	800a278 <game_paused>
		  break;
 800af7e:	e005      	b.n	800af8c <updateGameLogic+0x74>
		  case Ended:
			  game_ended(&window, event);
 800af80:	7bfb      	ldrb	r3, [r7, #15]
 800af82:	4619      	mov	r1, r3
 800af84:	4803      	ldr	r0, [pc, #12]	; (800af94 <updateGameLogic+0x7c>)
 800af86:	f7ff f9ff 	bl	800a388 <game_ended>
		  break;
 800af8a:	bf00      	nop
		}
		swap_buffer(&window);
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <updateGameLogic+0x7c>)
 800af8e:	f7ff fa1f 	bl	800a3d0 <swap_buffer>
	for(;;) {
 800af92:	e7cc      	b.n	800af2e <updateGameLogic+0x16>
 800af94:	2000239c 	.word	0x2000239c

0800af98 <soundController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_soundController */
void soundController(void *argument)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN soundController */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800afa0:	2001      	movs	r0, #1
 800afa2:	f7fc fb8d 	bl	80076c0 <osDelay>
 800afa6:	e7fb      	b.n	800afa0 <soundController+0x8>

0800afa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a34      	ldr	r2, [pc, #208]	; (800b088 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d101      	bne.n	800afbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800afba:	f7f5 ffe9 	bl	8000f90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a31      	ldr	r2, [pc, #196]	; (800b088 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d10f      	bne.n	800afe8 <HAL_TIM_PeriodElapsedCallback+0x40>
    if (HAL_GetTick() % fall_rate == 0) {
 800afc8:	f7f5 fff6 	bl	8000fb8 <HAL_GetTick>
 800afcc:	4603      	mov	r3, r0
 800afce:	4a2f      	ldr	r2, [pc, #188]	; (800b08c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800afd0:	6812      	ldr	r2, [r2, #0]
 800afd2:	fbb3 f1f2 	udiv	r1, r3, r2
 800afd6:	fb02 f201 	mul.w	r2, r2, r1
 800afda:	1a9b      	subs	r3, r3, r2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d14e      	bne.n	800b07e <HAL_TIM_PeriodElapsedCallback+0xd6>
    	push_input_buffer(DOWN);
 800afe0:	2000      	movs	r0, #0
 800afe2:	f7ff fec3 	bl	800ad6c <push_input_buffer>
	    HAL_TIM_Base_Start_IT(&htim3);
		offset = (offset + 1) % 4;
		hdac1.DMA_Handle2->Instance->CMAR = (uint32_t) (wave_data + offset * data_size);
	}
  /* USER CODE END Callback 1 */
}
 800afe6:	e04a      	b.n	800b07e <HAL_TIM_PeriodElapsedCallback+0xd6>
  } else if (htim->Instance == TIM1) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a28      	ldr	r2, [pc, #160]	; (800b090 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d122      	bne.n	800b038 <HAL_TIM_PeriodElapsedCallback+0x90>
	vert_count = (vert_count + 1) % 449;
 800aff2:	4b28      	ldr	r3, [pc, #160]	; (800b094 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	1c59      	adds	r1, r3, #1
 800aff8:	4b27      	ldr	r3, [pc, #156]	; (800b098 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800affa:	fb83 2301 	smull	r2, r3, r3, r1
 800affe:	440b      	add	r3, r1
 800b000:	121a      	asrs	r2, r3, #8
 800b002:	17cb      	asrs	r3, r1, #31
 800b004:	1ad2      	subs	r2, r2, r3
 800b006:	4613      	mov	r3, r2
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	1a9b      	subs	r3, r3, r2
 800b00c:	019b      	lsls	r3, r3, #6
 800b00e:	4413      	add	r3, r2
 800b010:	1aca      	subs	r2, r1, r3
 800b012:	4b20      	ldr	r3, [pc, #128]	; (800b094 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800b014:	601a      	str	r2, [r3, #0]
	if(vert_count >= 447) {
 800b016:	4b1f      	ldr	r3, [pc, #124]	; (800b094 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 800b01e:	dd05      	ble.n	800b02c <HAL_TIM_PeriodElapsedCallback+0x84>
		HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800b020:	2200      	movs	r2, #0
 800b022:	2104      	movs	r1, #4
 800b024:	481d      	ldr	r0, [pc, #116]	; (800b09c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800b026:	f7f7 f923 	bl	8002270 <HAL_GPIO_WritePin>
}
 800b02a:	e028      	b.n	800b07e <HAL_TIM_PeriodElapsedCallback+0xd6>
		HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
 800b02c:	2201      	movs	r2, #1
 800b02e:	2104      	movs	r1, #4
 800b030:	481a      	ldr	r0, [pc, #104]	; (800b09c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800b032:	f7f7 f91d 	bl	8002270 <HAL_GPIO_WritePin>
}
 800b036:	e022      	b.n	800b07e <HAL_TIM_PeriodElapsedCallback+0xd6>
  } else if (htim->Instance == TIM3) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a18      	ldr	r2, [pc, #96]	; (800b0a0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d11d      	bne.n	800b07e <HAL_TIM_PeriodElapsedCallback+0xd6>
	    HAL_TIM_Base_Start_IT(&htim3);
 800b042:	4818      	ldr	r0, [pc, #96]	; (800b0a4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800b044:	f7f8 fefa 	bl	8003e3c <HAL_TIM_Base_Start_IT>
		offset = (offset + 1) % 4;
 800b048:	4b17      	ldr	r3, [pc, #92]	; (800b0a8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3301      	adds	r3, #1
 800b04e:	425a      	negs	r2, r3
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	f002 0203 	and.w	r2, r2, #3
 800b058:	bf58      	it	pl
 800b05a:	4253      	negpl	r3, r2
 800b05c:	4a12      	ldr	r2, [pc, #72]	; (800b0a8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800b05e:	6013      	str	r3, [r2, #0]
		hdac1.DMA_Handle2->Instance->CMAR = (uint32_t) (wave_data + offset * data_size);
 800b060:	4b12      	ldr	r3, [pc, #72]	; (800b0ac <HAL_TIM_PeriodElapsedCallback+0x104>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	4b10      	ldr	r3, [pc, #64]	; (800b0a8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	4b11      	ldr	r3, [pc, #68]	; (800b0b0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	fb03 f301 	mul.w	r3, r3, r1
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	441a      	add	r2, r3
 800b076:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	60da      	str	r2, [r3, #12]
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	40001000 	.word	0x40001000
 800b08c:	200005d0 	.word	0x200005d0
 800b090:	40012c00 	.word	0x40012c00
 800b094:	20002058 	.word	0x20002058
 800b098:	91f5bcb9 	.word	0x91f5bcb9
 800b09c:	48000400 	.word	0x48000400
 800b0a0:	40000400 	.word	0x40000400
 800b0a4:	2000221c 	.word	0x2000221c
 800b0a8:	2000205c 	.word	0x2000205c
 800b0ac:	20000628 	.word	0x20000628
 800b0b0:	2000062c 	.word	0x2000062c
 800b0b4:	2000215c 	.word	0x2000215c

0800b0b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b0bc:	b672      	cpsid	i
}
 800b0be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b0c0:	e7fe      	b.n	800b0c0 <Error_Handler+0x8>
	...

0800b0c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0ca:	4b11      	ldr	r3, [pc, #68]	; (800b110 <HAL_MspInit+0x4c>)
 800b0cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0ce:	4a10      	ldr	r2, [pc, #64]	; (800b110 <HAL_MspInit+0x4c>)
 800b0d0:	f043 0301 	orr.w	r3, r3, #1
 800b0d4:	6613      	str	r3, [r2, #96]	; 0x60
 800b0d6:	4b0e      	ldr	r3, [pc, #56]	; (800b110 <HAL_MspInit+0x4c>)
 800b0d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	607b      	str	r3, [r7, #4]
 800b0e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b0e2:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <HAL_MspInit+0x4c>)
 800b0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e6:	4a0a      	ldr	r2, [pc, #40]	; (800b110 <HAL_MspInit+0x4c>)
 800b0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ec:	6593      	str	r3, [r2, #88]	; 0x58
 800b0ee:	4b08      	ldr	r3, [pc, #32]	; (800b110 <HAL_MspInit+0x4c>)
 800b0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	210f      	movs	r1, #15
 800b0fe:	f06f 0001 	mvn.w	r0, #1
 800b102:	f7f6 f841 	bl	8001188 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b106:	bf00      	nop
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	40021000 	.word	0x40021000

0800b114 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b08a      	sub	sp, #40	; 0x28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b11c:	f107 0314 	add.w	r3, r7, #20
 800b120:	2200      	movs	r2, #0
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	605a      	str	r2, [r3, #4]
 800b126:	609a      	str	r2, [r3, #8]
 800b128:	60da      	str	r2, [r3, #12]
 800b12a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a44      	ldr	r2, [pc, #272]	; (800b244 <HAL_DAC_MspInit+0x130>)
 800b132:	4293      	cmp	r3, r2
 800b134:	f040 8081 	bne.w	800b23a <HAL_DAC_MspInit+0x126>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800b138:	4b43      	ldr	r3, [pc, #268]	; (800b248 <HAL_DAC_MspInit+0x134>)
 800b13a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13c:	4a42      	ldr	r2, [pc, #264]	; (800b248 <HAL_DAC_MspInit+0x134>)
 800b13e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b142:	6593      	str	r3, [r2, #88]	; 0x58
 800b144:	4b40      	ldr	r3, [pc, #256]	; (800b248 <HAL_DAC_MspInit+0x134>)
 800b146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b150:	4b3d      	ldr	r3, [pc, #244]	; (800b248 <HAL_DAC_MspInit+0x134>)
 800b152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b154:	4a3c      	ldr	r2, [pc, #240]	; (800b248 <HAL_DAC_MspInit+0x134>)
 800b156:	f043 0301 	orr.w	r3, r3, #1
 800b15a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b15c:	4b3a      	ldr	r3, [pc, #232]	; (800b248 <HAL_DAC_MspInit+0x134>)
 800b15e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
 800b166:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b168:	2330      	movs	r3, #48	; 0x30
 800b16a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b16c:	2303      	movs	r3, #3
 800b16e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b170:	2300      	movs	r3, #0
 800b172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b174:	f107 0314 	add.w	r3, r7, #20
 800b178:	4619      	mov	r1, r3
 800b17a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b17e:	f7f6 fee5 	bl	8001f4c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800b182:	4b32      	ldr	r3, [pc, #200]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b184:	4a32      	ldr	r2, [pc, #200]	; (800b250 <HAL_DAC_MspInit+0x13c>)
 800b186:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800b188:	4b30      	ldr	r3, [pc, #192]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b18a:	2206      	movs	r2, #6
 800b18c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b18e:	4b2f      	ldr	r3, [pc, #188]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b190:	2210      	movs	r2, #16
 800b192:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b194:	4b2d      	ldr	r3, [pc, #180]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b196:	2200      	movs	r2, #0
 800b198:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800b19a:	4b2c      	ldr	r3, [pc, #176]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b19c:	2280      	movs	r2, #128	; 0x80
 800b19e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b1a0:	4b2a      	ldr	r3, [pc, #168]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b1a6:	4b29      	ldr	r3, [pc, #164]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800b1ac:	4b27      	ldr	r3, [pc, #156]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800b1b2:	4b26      	ldr	r3, [pc, #152]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800b1b8:	4824      	ldr	r0, [pc, #144]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b1ba:	f7f6 fb99 	bl	80018f0 <HAL_DMA_Init>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 800b1c4:	f7ff ff78 	bl	800b0b8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a20      	ldr	r2, [pc, #128]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b1cc:	609a      	str	r2, [r3, #8]
 800b1ce:	4a1f      	ldr	r2, [pc, #124]	; (800b24c <HAL_DAC_MspInit+0x138>)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 800b1d4:	4b1f      	ldr	r3, [pc, #124]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b1d6:	4a20      	ldr	r2, [pc, #128]	; (800b258 <HAL_DAC_MspInit+0x144>)
 800b1d8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CH2;
 800b1da:	4b1e      	ldr	r3, [pc, #120]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b1dc:	2207      	movs	r2, #7
 800b1de:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b1e0:	4b1c      	ldr	r3, [pc, #112]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b1e2:	2210      	movs	r2, #16
 800b1e4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1e6:	4b1b      	ldr	r3, [pc, #108]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800b1ec:	4b19      	ldr	r3, [pc, #100]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b1ee:	2280      	movs	r2, #128	; 0x80
 800b1f0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b1f2:	4b18      	ldr	r3, [pc, #96]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b1f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1f8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b1fa:	4b16      	ldr	r3, [pc, #88]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b1fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b200:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800b202:	4b14      	ldr	r3, [pc, #80]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b204:	2220      	movs	r2, #32
 800b206:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800b208:	4b12      	ldr	r3, [pc, #72]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800b20e:	4811      	ldr	r0, [pc, #68]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b210:	f7f6 fb6e 	bl	80018f0 <HAL_DMA_Init>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <HAL_DAC_MspInit+0x10a>
    {
      Error_Handler();
 800b21a:	f7ff ff4d 	bl	800b0b8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a0c      	ldr	r2, [pc, #48]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b222:	60da      	str	r2, [r3, #12]
 800b224:	4a0b      	ldr	r2, [pc, #44]	; (800b254 <HAL_DAC_MspInit+0x140>)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800b22a:	2200      	movs	r2, #0
 800b22c:	210f      	movs	r1, #15
 800b22e:	2036      	movs	r0, #54	; 0x36
 800b230:	f7f5 ffaa 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b234:	2036      	movs	r0, #54	; 0x36
 800b236:	f7f5 ffc3 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800b23a:	bf00      	nop
 800b23c:	3728      	adds	r7, #40	; 0x28
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	40007400 	.word	0x40007400
 800b248:	40021000 	.word	0x40021000
 800b24c:	200021bc 	.word	0x200021bc
 800b250:	40020008 	.word	0x40020008
 800b254:	200020b0 	.word	0x200020b0
 800b258:	4002001c 	.word	0x4002001c

0800b25c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a35      	ldr	r2, [pc, #212]	; (800b340 <HAL_TIM_Base_MspInit+0xe4>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d114      	bne.n	800b298 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b26e:	4b35      	ldr	r3, [pc, #212]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b272:	4a34      	ldr	r2, [pc, #208]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b278:	6613      	str	r3, [r2, #96]	; 0x60
 800b27a:	4b32      	ldr	r3, [pc, #200]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b27c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b27e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b282:	61fb      	str	r3, [r7, #28]
 800b284:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800b286:	2200      	movs	r2, #0
 800b288:	2105      	movs	r1, #5
 800b28a:	2019      	movs	r0, #25
 800b28c:	f7f5 ff7c 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b290:	2019      	movs	r0, #25
 800b292:	f7f5 ff95 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800b296:	e04e      	b.n	800b336 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM2)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a0:	d10c      	bne.n	800b2bc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b2a2:	4b28      	ldr	r3, [pc, #160]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a6:	4a27      	ldr	r2, [pc, #156]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b2a8:	f043 0301 	orr.w	r3, r3, #1
 800b2ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b2ae:	4b25      	ldr	r3, [pc, #148]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	61bb      	str	r3, [r7, #24]
 800b2b8:	69bb      	ldr	r3, [r7, #24]
}
 800b2ba:	e03c      	b.n	800b336 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a21      	ldr	r2, [pc, #132]	; (800b348 <HAL_TIM_Base_MspInit+0xec>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d114      	bne.n	800b2f0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b2c6:	4b1f      	ldr	r3, [pc, #124]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ca:	4a1e      	ldr	r2, [pc, #120]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b2cc:	f043 0302 	orr.w	r3, r3, #2
 800b2d0:	6593      	str	r3, [r2, #88]	; 0x58
 800b2d2:	4b1c      	ldr	r3, [pc, #112]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d6:	f003 0302 	and.w	r3, r3, #2
 800b2da:	617b      	str	r3, [r7, #20]
 800b2dc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2105      	movs	r1, #5
 800b2e2:	201d      	movs	r0, #29
 800b2e4:	f7f5 ff50 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800b2e8:	201d      	movs	r0, #29
 800b2ea:	f7f5 ff69 	bl	80011c0 <HAL_NVIC_EnableIRQ>
}
 800b2ee:	e022      	b.n	800b336 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a15      	ldr	r2, [pc, #84]	; (800b34c <HAL_TIM_Base_MspInit+0xf0>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d10c      	bne.n	800b314 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b2fa:	4b12      	ldr	r3, [pc, #72]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fe:	4a11      	ldr	r2, [pc, #68]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b300:	f043 0304 	orr.w	r3, r3, #4
 800b304:	6593      	str	r3, [r2, #88]	; 0x58
 800b306:	4b0f      	ldr	r3, [pc, #60]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b30a:	f003 0304 	and.w	r3, r3, #4
 800b30e:	613b      	str	r3, [r7, #16]
 800b310:	693b      	ldr	r3, [r7, #16]
}
 800b312:	e010      	b.n	800b336 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a0d      	ldr	r2, [pc, #52]	; (800b350 <HAL_TIM_Base_MspInit+0xf4>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d10b      	bne.n	800b336 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800b31e:	4b09      	ldr	r3, [pc, #36]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b322:	4a08      	ldr	r2, [pc, #32]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b328:	6613      	str	r3, [r2, #96]	; 0x60
 800b32a:	4b06      	ldr	r3, [pc, #24]	; (800b344 <HAL_TIM_Base_MspInit+0xe8>)
 800b32c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b32e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	68fb      	ldr	r3, [r7, #12]
}
 800b336:	bf00      	nop
 800b338:	3720      	adds	r7, #32
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	40012c00 	.word	0x40012c00
 800b344:	40021000 	.word	0x40021000
 800b348:	40000400 	.word	0x40000400
 800b34c:	40000800 	.word	0x40000800
 800b350:	40014000 	.word	0x40014000

0800b354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b35c:	f107 030c 	add.w	r3, r7, #12
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	605a      	str	r2, [r3, #4]
 800b366:	609a      	str	r2, [r3, #8]
 800b368:	60da      	str	r2, [r3, #12]
 800b36a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b374:	d11c      	bne.n	800b3b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b376:	4b10      	ldr	r3, [pc, #64]	; (800b3b8 <HAL_TIM_MspPostInit+0x64>)
 800b378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37a:	4a0f      	ldr	r2, [pc, #60]	; (800b3b8 <HAL_TIM_MspPostInit+0x64>)
 800b37c:	f043 0301 	orr.w	r3, r3, #1
 800b380:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b382:	4b0d      	ldr	r3, [pc, #52]	; (800b3b8 <HAL_TIM_MspPostInit+0x64>)
 800b384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	60bb      	str	r3, [r7, #8]
 800b38c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 800b38e:	2308      	movs	r3, #8
 800b390:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b392:	2302      	movs	r3, #2
 800b394:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b396:	2300      	movs	r3, #0
 800b398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 800b3a2:	f107 030c 	add.w	r3, r7, #12
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b3ac:	f7f6 fdce 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b3b0:	bf00      	nop
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	40021000 	.word	0x40021000

0800b3bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b0ae      	sub	sp, #184	; 0xb8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	605a      	str	r2, [r3, #4]
 800b3ce:	609a      	str	r2, [r3, #8]
 800b3d0:	60da      	str	r2, [r3, #12]
 800b3d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b3d4:	f107 0310 	add.w	r3, r7, #16
 800b3d8:	2294      	movs	r2, #148	; 0x94
 800b3da:	2100      	movs	r1, #0
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 fb3f 	bl	800ca60 <memset>
  if(huart->Instance==USART1)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a25      	ldr	r2, [pc, #148]	; (800b47c <HAL_UART_MspInit+0xc0>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d142      	bne.n	800b472 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b3f4:	f107 0310 	add.w	r3, r7, #16
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7f7 ff1f 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b404:	f7ff fe58 	bl	800b0b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b408:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <HAL_UART_MspInit+0xc4>)
 800b40a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b40c:	4a1c      	ldr	r2, [pc, #112]	; (800b480 <HAL_UART_MspInit+0xc4>)
 800b40e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b412:	6613      	str	r3, [r2, #96]	; 0x60
 800b414:	4b1a      	ldr	r3, [pc, #104]	; (800b480 <HAL_UART_MspInit+0xc4>)
 800b416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b41c:	60fb      	str	r3, [r7, #12]
 800b41e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b420:	4b17      	ldr	r3, [pc, #92]	; (800b480 <HAL_UART_MspInit+0xc4>)
 800b422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b424:	4a16      	ldr	r2, [pc, #88]	; (800b480 <HAL_UART_MspInit+0xc4>)
 800b426:	f043 0302 	orr.w	r3, r3, #2
 800b42a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b42c:	4b14      	ldr	r3, [pc, #80]	; (800b480 <HAL_UART_MspInit+0xc4>)
 800b42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b430:	f003 0302 	and.w	r3, r3, #2
 800b434:	60bb      	str	r3, [r7, #8]
 800b436:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b438:	23c0      	movs	r3, #192	; 0xc0
 800b43a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b43e:	2302      	movs	r3, #2
 800b440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b444:	2300      	movs	r3, #0
 800b446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b44a:	2303      	movs	r3, #3
 800b44c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b450:	2307      	movs	r3, #7
 800b452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b456:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b45a:	4619      	mov	r1, r3
 800b45c:	4809      	ldr	r0, [pc, #36]	; (800b484 <HAL_UART_MspInit+0xc8>)
 800b45e:	f7f6 fd75 	bl	8001f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 800b462:	2200      	movs	r2, #0
 800b464:	2106      	movs	r1, #6
 800b466:	2025      	movs	r0, #37	; 0x25
 800b468:	f7f5 fe8e 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b46c:	2025      	movs	r0, #37	; 0x25
 800b46e:	f7f5 fea7 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b472:	bf00      	nop
 800b474:	37b8      	adds	r7, #184	; 0xb8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	40013800 	.word	0x40013800
 800b480:	40021000 	.word	0x40021000
 800b484:	48000400 	.word	0x48000400

0800b488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08c      	sub	sp, #48	; 0x30
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b494:	2300      	movs	r3, #0
 800b496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b498:	2200      	movs	r2, #0
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	2036      	movs	r0, #54	; 0x36
 800b49e:	f7f5 fe73 	bl	8001188 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b4a2:	2036      	movs	r0, #54	; 0x36
 800b4a4:	f7f5 fe8c 	bl	80011c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b4a8:	4b1e      	ldr	r3, [pc, #120]	; (800b524 <HAL_InitTick+0x9c>)
 800b4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ac:	4a1d      	ldr	r2, [pc, #116]	; (800b524 <HAL_InitTick+0x9c>)
 800b4ae:	f043 0310 	orr.w	r3, r3, #16
 800b4b2:	6593      	str	r3, [r2, #88]	; 0x58
 800b4b4:	4b1b      	ldr	r3, [pc, #108]	; (800b524 <HAL_InitTick+0x9c>)
 800b4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b8:	f003 0310 	and.w	r3, r3, #16
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b4c0:	f107 0210 	add.w	r2, r7, #16
 800b4c4:	f107 0314 	add.w	r3, r7, #20
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7f7 fdc2 	bl	8003054 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b4d0:	f7f7 fd94 	bl	8002ffc <HAL_RCC_GetPCLK1Freq>
 800b4d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d8:	4a13      	ldr	r2, [pc, #76]	; (800b528 <HAL_InitTick+0xa0>)
 800b4da:	fba2 2303 	umull	r2, r3, r2, r3
 800b4de:	0c9b      	lsrs	r3, r3, #18
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b4e4:	4b11      	ldr	r3, [pc, #68]	; (800b52c <HAL_InitTick+0xa4>)
 800b4e6:	4a12      	ldr	r2, [pc, #72]	; (800b530 <HAL_InitTick+0xa8>)
 800b4e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b4ea:	4b10      	ldr	r3, [pc, #64]	; (800b52c <HAL_InitTick+0xa4>)
 800b4ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b4f2:	4a0e      	ldr	r2, [pc, #56]	; (800b52c <HAL_InitTick+0xa4>)
 800b4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b4f8:	4b0c      	ldr	r3, [pc, #48]	; (800b52c <HAL_InitTick+0xa4>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4fe:	4b0b      	ldr	r3, [pc, #44]	; (800b52c <HAL_InitTick+0xa4>)
 800b500:	2200      	movs	r2, #0
 800b502:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b504:	4809      	ldr	r0, [pc, #36]	; (800b52c <HAL_InitTick+0xa4>)
 800b506:	f7f8 fbb1 	bl	8003c6c <HAL_TIM_Base_Init>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d104      	bne.n	800b51a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b510:	4806      	ldr	r0, [pc, #24]	; (800b52c <HAL_InitTick+0xa4>)
 800b512:	f7f8 fc93 	bl	8003e3c <HAL_TIM_Base_Start_IT>
 800b516:	4603      	mov	r3, r0
 800b518:	e000      	b.n	800b51c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3730      	adds	r7, #48	; 0x30
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	40021000 	.word	0x40021000
 800b528:	431bde83 	.word	0x431bde83
 800b52c:	2001aa70 	.word	0x2001aa70
 800b530:	40001000 	.word	0x40001000

0800b534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b534:	b480      	push	{r7}
 800b536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b538:	e7fe      	b.n	800b538 <NMI_Handler+0x4>

0800b53a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b53a:	b480      	push	{r7}
 800b53c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b53e:	e7fe      	b.n	800b53e <HardFault_Handler+0x4>

0800b540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b540:	b480      	push	{r7}
 800b542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b544:	e7fe      	b.n	800b544 <MemManage_Handler+0x4>

0800b546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b546:	b480      	push	{r7}
 800b548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b54a:	e7fe      	b.n	800b54a <BusFault_Handler+0x4>

0800b54c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b54c:	b480      	push	{r7}
 800b54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b550:	e7fe      	b.n	800b550 <UsageFault_Handler+0x4>

0800b552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b552:	b480      	push	{r7}
 800b554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b556:	bf00      	nop
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800b564:	4802      	ldr	r0, [pc, #8]	; (800b570 <DMA1_Channel1_IRQHandler+0x10>)
 800b566:	f7f6 fba1 	bl	8001cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b56a:	bf00      	nop
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	200021bc 	.word	0x200021bc

0800b574 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800b578:	4802      	ldr	r0, [pc, #8]	; (800b584 <DMA1_Channel2_IRQHandler+0x10>)
 800b57a:	f7f6 fb97 	bl	8001cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800b57e:	bf00      	nop
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	200020b0 	.word	0x200020b0

0800b588 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b58c:	4802      	ldr	r0, [pc, #8]	; (800b598 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800b58e:	f7f8 fe5b 	bl	8004248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800b592:	bf00      	nop
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20002304 	.word	0x20002304

0800b59c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800b5a0:	4802      	ldr	r0, [pc, #8]	; (800b5ac <TIM3_IRQHandler+0x10>)
 800b5a2:	f7f8 fe51 	bl	8004248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800b5a6:	bf00      	nop
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	2000221c 	.word	0x2000221c

0800b5b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b5b4:	4802      	ldr	r0, [pc, #8]	; (800b5c0 <USART1_IRQHandler+0x10>)
 800b5b6:	f7fa f855 	bl	8005664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b5ba:	bf00      	nop
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20002270 	.word	0x20002270

0800b5c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b5c8:	4803      	ldr	r0, [pc, #12]	; (800b5d8 <TIM6_DAC_IRQHandler+0x14>)
 800b5ca:	f7f8 fe3d 	bl	8004248 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800b5ce:	4803      	ldr	r0, [pc, #12]	; (800b5dc <TIM6_DAC_IRQHandler+0x18>)
 800b5d0:	f7f5 ff37 	bl	8001442 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b5d4:	bf00      	nop
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	2001aa70 	.word	0x2001aa70
 800b5dc:	2000215c 	.word	0x2000215c

0800b5e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	af00      	add	r7, sp, #0
	return 1;
 800b5e4:	2301      	movs	r3, #1
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <_kill>:

int _kill(int pid, int sig)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b5fa:	f001 f8f7 	bl	800c7ec <__errno>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2216      	movs	r2, #22
 800b602:	601a      	str	r2, [r3, #0]
	return -1;
 800b604:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <_exit>:

void _exit (int status)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b618:	f04f 31ff 	mov.w	r1, #4294967295
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff ffe7 	bl	800b5f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b622:	e7fe      	b.n	800b622 <_exit+0x12>

0800b624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b630:	2300      	movs	r3, #0
 800b632:	617b      	str	r3, [r7, #20]
 800b634:	e00a      	b.n	800b64c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b636:	f3af 8000 	nop.w
 800b63a:	4601      	mov	r1, r0
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	60ba      	str	r2, [r7, #8]
 800b642:	b2ca      	uxtb	r2, r1
 800b644:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	3301      	adds	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	dbf0      	blt.n	800b636 <_read+0x12>
	}

return len;
 800b654:	687b      	ldr	r3, [r7, #4]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b086      	sub	sp, #24
 800b662:	af00      	add	r7, sp, #0
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]
 800b66e:	e009      	b.n	800b684 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	60ba      	str	r2, [r7, #8]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	4618      	mov	r0, r3
 800b67a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	3301      	adds	r3, #1
 800b682:	617b      	str	r3, [r7, #20]
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	429a      	cmp	r2, r3
 800b68a:	dbf1      	blt.n	800b670 <_write+0x12>
	}
	return len;
 800b68c:	687b      	ldr	r3, [r7, #4]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <_close>:

int _close(int file)
{
 800b696:	b480      	push	{r7}
 800b698:	b083      	sub	sp, #12
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
	return -1;
 800b69e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b6be:	605a      	str	r2, [r3, #4]
	return 0;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <_isatty>:

int _isatty(int file)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b083      	sub	sp, #12
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
	return 1;
 800b6d6:	2301      	movs	r3, #1
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
	return 0;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
	...

0800b700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b708:	4a14      	ldr	r2, [pc, #80]	; (800b75c <_sbrk+0x5c>)
 800b70a:	4b15      	ldr	r3, [pc, #84]	; (800b760 <_sbrk+0x60>)
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b714:	4b13      	ldr	r3, [pc, #76]	; (800b764 <_sbrk+0x64>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d102      	bne.n	800b722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b71c:	4b11      	ldr	r3, [pc, #68]	; (800b764 <_sbrk+0x64>)
 800b71e:	4a12      	ldr	r2, [pc, #72]	; (800b768 <_sbrk+0x68>)
 800b720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b722:	4b10      	ldr	r3, [pc, #64]	; (800b764 <_sbrk+0x64>)
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4413      	add	r3, r2
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d207      	bcs.n	800b740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b730:	f001 f85c 	bl	800c7ec <__errno>
 800b734:	4603      	mov	r3, r0
 800b736:	220c      	movs	r2, #12
 800b738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b73a:	f04f 33ff 	mov.w	r3, #4294967295
 800b73e:	e009      	b.n	800b754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <_sbrk+0x64>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b746:	4b07      	ldr	r3, [pc, #28]	; (800b764 <_sbrk+0x64>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	4a05      	ldr	r2, [pc, #20]	; (800b764 <_sbrk+0x64>)
 800b750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b752:	68fb      	ldr	r3, [r7, #12]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3718      	adds	r7, #24
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	200a0000 	.word	0x200a0000
 800b760:	00000400 	.word	0x00000400
 800b764:	20002060 	.word	0x20002060
 800b768:	2001aad0 	.word	0x2001aad0

0800b76c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b770:	4b06      	ldr	r3, [pc, #24]	; (800b78c <SystemInit+0x20>)
 800b772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b776:	4a05      	ldr	r2, [pc, #20]	; (800b78c <SystemInit+0x20>)
 800b778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b77c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b780:	bf00      	nop
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	e000ed00 	.word	0xe000ed00

0800b790 <tetris_write_points>:
/**
 * @brief Write points to the screen while playing.
 *
 * @param window window
 */
void tetris_write_points(Window* window) {
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
    char point_str[10];
    sprintf(point_str, "%lu", window->game.points);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b79e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	f107 030c 	add.w	r3, r7, #12
 800b7a8:	490a      	ldr	r1, [pc, #40]	; (800b7d4 <tetris_write_points+0x44>)
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f001 faf2 	bl	800cd94 <siprintf>
    print_str(window, "Points:", 27, 60);
 800b7b0:	233c      	movs	r3, #60	; 0x3c
 800b7b2:	221b      	movs	r2, #27
 800b7b4:	4908      	ldr	r1, [pc, #32]	; (800b7d8 <tetris_write_points+0x48>)
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7fe fe28 	bl	800a40c <print_str>
    print_str(window, point_str, 27, 150);
 800b7bc:	f107 010c 	add.w	r1, r7, #12
 800b7c0:	2396      	movs	r3, #150	; 0x96
 800b7c2:	221b      	movs	r2, #27
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7fe fe21 	bl	800a40c <print_str>
}
 800b7ca:	bf00      	nop
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	0800e478 	.word	0x0800e478
 800b7d8:	0800e47c 	.word	0x0800e47c

0800b7dc <tetris_initialize_game>:
/**
 * @brief populate window game variable with a reset tetris game.
 *
 * @param window window
 */
void tetris_initialize_game(Window * window) {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
    // fill game board with empty data
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	e00a      	b.n	800b800 <tetris_initialize_game+0x24>
        window->game.board[i] = EMPTY_BOARD_CHAR;
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	2264      	movs	r2, #100	; 0x64
 800b7f8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2bc7      	cmp	r3, #199	; 0xc7
 800b804:	ddf1      	ble.n	800b7ea <tetris_initialize_game+0xe>
    }

    // seed random val
    srand((unsigned) HAL_GetTick());
 800b806:	f7f5 fbd7 	bl	8000fb8 <HAL_GetTick>
 800b80a:	4603      	mov	r3, r0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f001 f9d9 	bl	800cbc4 <srand>

    // initialize game state (tetromino, rotation, next tetromino, x, y, game state)
    window->game.rotation = 0;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b818:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b81c:	2200      	movs	r2, #0
 800b81e:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = tetris_get_next_tetromino();
 800b820:	f000 f830 	bl	800b884 <tetris_get_next_tetromino>
 800b824:	4602      	mov	r2, r0
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b82c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b830:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino();
 800b832:	f000 f827 	bl	800b884 <tetris_get_next_tetromino>
 800b836:	4602      	mov	r2, r0
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b83e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b842:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b84a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b84e:	2203      	movs	r2, #3
 800b850:	601a      	str	r2, [r3, #0]
    window->game.y = 0;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]
    window->game.state = Start;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b862:	33cc      	adds	r3, #204	; 0xcc
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]
    window->game.points = 0;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b86e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]

    // initialize the current tetromino
    tetris_update_current_tetromino(window);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f84a 	bl	800b910 <tetris_update_current_tetromino>
}
 800b87c:	bf00      	nop
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <tetris_get_next_tetromino>:
/**
 * @brief generate random tetromino piece (select random number between 0 and 7)
 *
 * @return const char* pointer to random tetromino piece
 */
const uint8_t * tetris_get_next_tetromino() {
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
    switch (rand() % 7) {
 800b888:	f001 f9ca 	bl	800cc20 <rand>
 800b88c:	4602      	mov	r2, r0
 800b88e:	4b18      	ldr	r3, [pc, #96]	; (800b8f0 <tetris_get_next_tetromino+0x6c>)
 800b890:	fb83 1302 	smull	r1, r3, r3, r2
 800b894:	4413      	add	r3, r2
 800b896:	1099      	asrs	r1, r3, #2
 800b898:	17d3      	asrs	r3, r2, #31
 800b89a:	1ac9      	subs	r1, r1, r3
 800b89c:	460b      	mov	r3, r1
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	1a5b      	subs	r3, r3, r1
 800b8a2:	1ad1      	subs	r1, r2, r3
 800b8a4:	2906      	cmp	r1, #6
 800b8a6:	d81f      	bhi.n	800b8e8 <tetris_get_next_tetromino+0x64>
 800b8a8:	a301      	add	r3, pc, #4	; (adr r3, 800b8b0 <tetris_get_next_tetromino+0x2c>)
 800b8aa:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800b8ae:	bf00      	nop
 800b8b0:	0800b8cd 	.word	0x0800b8cd
 800b8b4:	0800b8d1 	.word	0x0800b8d1
 800b8b8:	0800b8d5 	.word	0x0800b8d5
 800b8bc:	0800b8d9 	.word	0x0800b8d9
 800b8c0:	0800b8dd 	.word	0x0800b8dd
 800b8c4:	0800b8e1 	.word	0x0800b8e1
 800b8c8:	0800b8e5 	.word	0x0800b8e5
        case 0:
            return tetromino_I;
 800b8cc:	4b09      	ldr	r3, [pc, #36]	; (800b8f4 <tetris_get_next_tetromino+0x70>)
 800b8ce:	e00c      	b.n	800b8ea <tetris_get_next_tetromino+0x66>
        break;
        case 1:
            return tetromino_J;
 800b8d0:	4b09      	ldr	r3, [pc, #36]	; (800b8f8 <tetris_get_next_tetromino+0x74>)
 800b8d2:	e00a      	b.n	800b8ea <tetris_get_next_tetromino+0x66>
        break;
        case 2:
            return tetromino_L;
 800b8d4:	4b09      	ldr	r3, [pc, #36]	; (800b8fc <tetris_get_next_tetromino+0x78>)
 800b8d6:	e008      	b.n	800b8ea <tetris_get_next_tetromino+0x66>
        break;
        case 3:
            return tetromino_O;
 800b8d8:	4b09      	ldr	r3, [pc, #36]	; (800b900 <tetris_get_next_tetromino+0x7c>)
 800b8da:	e006      	b.n	800b8ea <tetris_get_next_tetromino+0x66>
        break;
        case 4:
            return tetromino_S;
 800b8dc:	4b09      	ldr	r3, [pc, #36]	; (800b904 <tetris_get_next_tetromino+0x80>)
 800b8de:	e004      	b.n	800b8ea <tetris_get_next_tetromino+0x66>
        break;
        case 5:
            return tetromino_T;
 800b8e0:	4b09      	ldr	r3, [pc, #36]	; (800b908 <tetris_get_next_tetromino+0x84>)
 800b8e2:	e002      	b.n	800b8ea <tetris_get_next_tetromino+0x66>
        break;
        case 6:
            return tetromino_Z;
 800b8e4:	4b09      	ldr	r3, [pc, #36]	; (800b90c <tetris_get_next_tetromino+0x88>)
 800b8e6:	e000      	b.n	800b8ea <tetris_get_next_tetromino+0x66>
        break;
        default:
            return tetromino_I; // TODO: this is never supposed to happen.
 800b8e8:	4b02      	ldr	r3, [pc, #8]	; (800b8f4 <tetris_get_next_tetromino+0x70>)
        break;
    }

}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	92492493 	.word	0x92492493
 800b8f4:	0803ff00 	.word	0x0803ff00
 800b8f8:	0803ff10 	.word	0x0803ff10
 800b8fc:	0803ff20 	.word	0x0803ff20
 800b900:	0803ff30 	.word	0x0803ff30
 800b904:	0803ff40 	.word	0x0803ff40
 800b908:	0803ff50 	.word	0x0803ff50
 800b90c:	0803ff60 	.word	0x0803ff60

0800b910 <tetris_update_current_tetromino>:
/**
 * @brief Updates the tetromino piece used for collision/drawing purposes
 *
 * @param window window
 */
void tetris_update_current_tetromino(Window * window) {
 800b910:	b480      	push	{r7}
 800b912:	b087      	sub	sp, #28
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
    // update piece based on rotation state
    int index = 0, row, col;
 800b918:	2300      	movs	r3, #0
 800b91a:	617b      	str	r3, [r7, #20]
    switch (window->game.rotation) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b922:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	f200 80a0 	bhi.w	800ba70 <tetris_update_current_tetromino+0x160>
 800b930:	a201      	add	r2, pc, #4	; (adr r2, 800b938 <tetris_update_current_tetromino+0x28>)
 800b932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b936:	bf00      	nop
 800b938:	0800b949 	.word	0x0800b949
 800b93c:	0800b993 	.word	0x0800b993
 800b940:	0800b9dd 	.word	0x0800b9dd
 800b944:	0800ba27 	.word	0x0800ba27
        case 0:
            // no rotation
            for (row = 0; row < 4; row++) {
 800b948:	2300      	movs	r3, #0
 800b94a:	613b      	str	r3, [r7, #16]
 800b94c:	e01d      	b.n	800b98a <tetris_update_current_tetromino+0x7a>
                for (col = 0; col < 4; col++) {
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	e014      	b.n	800b97e <tetris_update_current_tetromino+0x6e>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b95a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	441a      	add	r2, r3
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	0099      	lsls	r1, r3, #2
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	440b      	add	r3, r1
 800b96c:	7811      	ldrb	r1, [r2, #0]
 800b96e:	4a43      	ldr	r2, [pc, #268]	; (800ba7c <tetris_update_current_tetromino+0x16c>)
 800b970:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	3301      	adds	r3, #1
 800b976:	617b      	str	r3, [r7, #20]
                for (col = 0; col < 4; col++) {
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3301      	adds	r3, #1
 800b97c:	60fb      	str	r3, [r7, #12]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2b03      	cmp	r3, #3
 800b982:	dde7      	ble.n	800b954 <tetris_update_current_tetromino+0x44>
            for (row = 0; row < 4; row++) {
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	3301      	adds	r3, #1
 800b988:	613b      	str	r3, [r7, #16]
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	ddde      	ble.n	800b94e <tetris_update_current_tetromino+0x3e>
                }
            }
        break;
 800b990:	e06e      	b.n	800ba70 <tetris_update_current_tetromino+0x160>
        case 1:
            // C 1; CC 3;
            for (col = 3; col >= 0; col--) {
 800b992:	2303      	movs	r3, #3
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	e01d      	b.n	800b9d4 <tetris_update_current_tetromino+0xc4>
                for (row = 0; row < 4; row++) {
 800b998:	2300      	movs	r3, #0
 800b99a:	613b      	str	r3, [r7, #16]
 800b99c:	e014      	b.n	800b9c8 <tetris_update_current_tetromino+0xb8>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b9a4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	441a      	add	r2, r3
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	0099      	lsls	r1, r3, #2
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	440b      	add	r3, r1
 800b9b6:	7811      	ldrb	r1, [r2, #0]
 800b9b8:	4a30      	ldr	r2, [pc, #192]	; (800ba7c <tetris_update_current_tetromino+0x16c>)
 800b9ba:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	617b      	str	r3, [r7, #20]
                for (row = 0; row < 4; row++) {
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	613b      	str	r3, [r7, #16]
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	2b03      	cmp	r3, #3
 800b9cc:	dde7      	ble.n	800b99e <tetris_update_current_tetromino+0x8e>
            for (col = 3; col >= 0; col--) {
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	60fb      	str	r3, [r7, #12]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	dade      	bge.n	800b998 <tetris_update_current_tetromino+0x88>
                }
            }
        break;
 800b9da:	e049      	b.n	800ba70 <tetris_update_current_tetromino+0x160>
        case 2:
            // C 2; CC 2;
            for (row = 3; row >= 0; row--) {
 800b9dc:	2303      	movs	r3, #3
 800b9de:	613b      	str	r3, [r7, #16]
 800b9e0:	e01d      	b.n	800ba1e <tetris_update_current_tetromino+0x10e>
                for (col = 3; col >= 0; col--) {
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	60fb      	str	r3, [r7, #12]
 800b9e6:	e014      	b.n	800ba12 <tetris_update_current_tetromino+0x102>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b9ee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	441a      	add	r2, r3
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	0099      	lsls	r1, r3, #2
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	440b      	add	r3, r1
 800ba00:	7811      	ldrb	r1, [r2, #0]
 800ba02:	4a1e      	ldr	r2, [pc, #120]	; (800ba7c <tetris_update_current_tetromino+0x16c>)
 800ba04:	54d1      	strb	r1, [r2, r3]
                    index++;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	617b      	str	r3, [r7, #20]
                for (col = 3; col >= 0; col--) {
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dae7      	bge.n	800b9e8 <tetris_update_current_tetromino+0xd8>
            for (row = 3; row >= 0; row--) {
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	613b      	str	r3, [r7, #16]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dade      	bge.n	800b9e2 <tetris_update_current_tetromino+0xd2>
                }
            }
        break;
 800ba24:	e024      	b.n	800ba70 <tetris_update_current_tetromino+0x160>
        case 3:
            // C 3; CC 1;
            for (col = 0; col < 4; col++) {
 800ba26:	2300      	movs	r3, #0
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	e01d      	b.n	800ba68 <tetris_update_current_tetromino+0x158>
                for (row = 3; row >= 0; row--) {
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	e014      	b.n	800ba5c <tetris_update_current_tetromino+0x14c>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800ba38:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	441a      	add	r2, r3
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	0099      	lsls	r1, r3, #2
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	440b      	add	r3, r1
 800ba4a:	7811      	ldrb	r1, [r2, #0]
 800ba4c:	4a0b      	ldr	r2, [pc, #44]	; (800ba7c <tetris_update_current_tetromino+0x16c>)
 800ba4e:	54d1      	strb	r1, [r2, r3]
                    index++;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	3301      	adds	r3, #1
 800ba54:	617b      	str	r3, [r7, #20]
                for (row = 3; row >= 0; row--) {
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	613b      	str	r3, [r7, #16]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dae7      	bge.n	800ba32 <tetris_update_current_tetromino+0x122>
            for (col = 0; col < 4; col++) {
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3301      	adds	r3, #1
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	ddde      	ble.n	800ba2c <tetris_update_current_tetromino+0x11c>
                }
            }
        break;
 800ba6e:	bf00      	nop
    }
}
 800ba70:	bf00      	nop
 800ba72:	371c      	adds	r7, #28
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	20000634 	.word	0x20000634

0800ba80 <tetris_rotate_C_tetromino>:
/**
 * @brief Rotate the tetromino piece clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_C_tetromino(Window * window) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 1) % 4;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800ba8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ba92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba96:	3301      	adds	r3, #1
 800ba98:	425a      	negs	r2, r3
 800ba9a:	f003 0303 	and.w	r3, r3, #3
 800ba9e:	f002 0203 	and.w	r2, r2, #3
 800baa2:	bf58      	it	pl
 800baa4:	4253      	negpl	r3, r2
 800baa6:	b21a      	sxth	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800baae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bab2:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff ff2b 	bl	800b910 <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800baba:	2200      	movs	r2, #0
 800babc:	2100      	movs	r1, #0
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f8c6 	bl	800bc50 <tetris_validate_position>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d018      	beq.n	800bafc <tetris_rotate_C_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 3) % 4;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bad0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bad8:	3303      	adds	r3, #3
 800bada:	425a      	negs	r2, r3
 800badc:	f003 0303 	and.w	r3, r3, #3
 800bae0:	f002 0203 	and.w	r2, r2, #3
 800bae4:	bf58      	it	pl
 800bae6:	4253      	negpl	r3, r2
 800bae8:	b21a      	sxth	r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800baf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800baf4:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff ff0a 	bl	800b910 <tetris_update_current_tetromino>
    }
}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <tetris_rotate_CC_tetromino>:
/**
 * @brief Rotate the tetromino piece conter clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_CC_tetromino(Window * window) {
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 3) % 4;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bb12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bb16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb1a:	3303      	adds	r3, #3
 800bb1c:	425a      	negs	r2, r3
 800bb1e:	f003 0303 	and.w	r3, r3, #3
 800bb22:	f002 0203 	and.w	r2, r2, #3
 800bb26:	bf58      	it	pl
 800bb28:	4253      	negpl	r3, r2
 800bb2a:	b21a      	sxth	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bb32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bb36:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7ff fee9 	bl	800b910 <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2100      	movs	r1, #0
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f884 	bl	800bc50 <tetris_validate_position>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d018      	beq.n	800bb80 <tetris_rotate_CC_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 1) % 4;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bb54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bb58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	425a      	negs	r2, r3
 800bb60:	f003 0303 	and.w	r3, r3, #3
 800bb64:	f002 0203 	and.w	r2, r2, #3
 800bb68:	bf58      	it	pl
 800bb6a:	4253      	negpl	r3, r2
 800bb6c:	b21a      	sxth	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bb74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bb78:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff fec8 	bl	800b910 <tetris_update_current_tetromino>
    }
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <tetris_move_left>:
 * @brief Move the piece to the left. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_left(Window * window) {
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, -1, 0)) {
 800bb90:	2200      	movs	r2, #0
 800bb92:	f04f 31ff 	mov.w	r1, #4294967295
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f85a 	bl	800bc50 <tetris_validate_position>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10e      	bne.n	800bbc0 <tetris_move_left+0x38>
        window->game.x--;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bba8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	1e5a      	subs	r2, r3, #1
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bbb6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bbba:	601a      	str	r2, [r3, #0]
        return 1;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e000      	b.n	800bbc2 <tetris_move_left+0x3a>
    }
    return 0;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <tetris_move_right>:
 * @brief Move the piece to the right. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_right(Window * window) {
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 1, 0)) {
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f83a 	bl	800bc50 <tetris_validate_position>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10e      	bne.n	800bc00 <tetris_move_right+0x36>
        window->game.x++;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bbe8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bbf6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bbfa:	601a      	str	r2, [r3, #0]
        return 1;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e000      	b.n	800bc02 <tetris_move_right+0x38>
    }
    return 0;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <tetris_move_down>:
 * @brief Move the piece down. Tetromino piece position is finalized if collision occurs. Get next tetromino & update board accordingly.
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_down(Window * window) {
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 0, 1)) {
 800bc12:	2201      	movs	r2, #1
 800bc14:	2100      	movs	r1, #0
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f81a 	bl	800bc50 <tetris_validate_position>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10a      	bne.n	800bc38 <tetris_move_down+0x2e>
        window->game.y++;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bc32:	601a      	str	r2, [r3, #0]
        return 1;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e006      	b.n	800bc46 <tetris_move_down+0x3c>
    }

    tetris_finished_tetromino(window);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f9e1 	bl	800c000 <tetris_finished_tetromino>
    tetris_detect_rowCompletion(window);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fa74 	bl	800c12c <tetris_detect_rowCompletion>
    return 1;
 800bc44:	2301      	movs	r3, #1
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
	...

0800bc50 <tetris_validate_position>:
 * @param window tetris game window w/ tetromino data we want to validate
 * @param x_offset added to tetromino current x. X position to validate
 * @param y_offset added to tetromino current y. Y position to validate
 * @return int error code. 0 = no collision. 1 = collision w/ left wall. 2 = collision w/ right wall. 3 = collision with bottom floor. 4 = collision w/another block
 */
int tetris_validate_position(Window * window, int x_offset, int y_offset) {
 800bc50:	b480      	push	{r7}
 800bc52:	b089      	sub	sp, #36	; 0x24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
    int index = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	61fb      	str	r3, [r7, #28]
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	61bb      	str	r3, [r7, #24]
 800bc6e:	e057      	b.n	800bd20 <tetris_validate_position+0xd0>
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bc76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	4413      	add	r3, r2
 800bc80:	617b      	str	r3, [r7, #20]
 800bc82:	e03e      	b.n	800bd02 <tetris_validate_position+0xb2>
            // check for collision w/ bottom floor
            if (row >= BOARD_HEIGHT && tetromino_current[index] != 10) {
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	2b13      	cmp	r3, #19
 800bc88:	dd07      	ble.n	800bc9a <tetris_validate_position+0x4a>
 800bc8a:	4a2e      	ldr	r2, [pc, #184]	; (800bd44 <tetris_validate_position+0xf4>)
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	4413      	add	r3, r2
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	2b0a      	cmp	r3, #10
 800bc94:	d001      	beq.n	800bc9a <tetris_validate_position+0x4a>
                return 3;
 800bc96:	2303      	movs	r3, #3
 800bc98:	e04d      	b.n	800bd36 <tetris_validate_position+0xe6>
            }
            // collision w/ left wall
            if (col < 0 && tetromino_current[index] != 10) {
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	da07      	bge.n	800bcb0 <tetris_validate_position+0x60>
 800bca0:	4a28      	ldr	r2, [pc, #160]	; (800bd44 <tetris_validate_position+0xf4>)
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	4413      	add	r3, r2
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b0a      	cmp	r3, #10
 800bcaa:	d001      	beq.n	800bcb0 <tetris_validate_position+0x60>
                return 1;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e042      	b.n	800bd36 <tetris_validate_position+0xe6>
            }
            if (col >= BOARD_WIDTH && tetromino_current[index] != 10) {
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2b09      	cmp	r3, #9
 800bcb4:	dd07      	ble.n	800bcc6 <tetris_validate_position+0x76>
 800bcb6:	4a23      	ldr	r2, [pc, #140]	; (800bd44 <tetris_validate_position+0xf4>)
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	4413      	add	r3, r2
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b0a      	cmp	r3, #10
 800bcc0:	d001      	beq.n	800bcc6 <tetris_validate_position+0x76>
                return 2;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	e037      	b.n	800bd36 <tetris_validate_position+0xe6>
            }
            if (tetromino_current[index] != 10 && window->game.board[BOARD_WIDTH * row + col] != EMPTY_BOARD_CHAR) {
 800bcc6:	4a1f      	ldr	r2, [pc, #124]	; (800bd44 <tetris_validate_position+0xf4>)
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	4413      	add	r3, r2
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b0a      	cmp	r3, #10
 800bcd0:	d011      	beq.n	800bcf6 <tetris_validate_position+0xa6>
 800bcd2:	69ba      	ldr	r2, [r7, #24]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4413      	add	r3, r2
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	461a      	mov	r2, r3
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	4413      	add	r3, r2
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4413      	add	r3, r2
 800bce6:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bcea:	3304      	adds	r3, #4
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b64      	cmp	r3, #100	; 0x64
 800bcf0:	d001      	beq.n	800bcf6 <tetris_validate_position+0xa6>
                return 4;
 800bcf2:	2304      	movs	r3, #4
 800bcf4:	e01f      	b.n	800bd36 <tetris_validate_position+0xe6>
            }
            index++;
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	61fb      	str	r3, [r7, #28]
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bd08:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	1d1a      	adds	r2, r3, #4
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	4413      	add	r3, r2
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	dbb4      	blt.n	800bc84 <tetris_validate_position+0x34>
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	61bb      	str	r3, [r7, #24]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	1d1a      	adds	r2, r3, #4
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	db9d      	blt.n	800bc70 <tetris_validate_position+0x20>
        }
    }
    return 0;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3724      	adds	r7, #36	; 0x24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	20000634 	.word	0x20000634

0800bd48 <tetris_drawEndScreen>:
 * @brief Draws the final screen of Tetris.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_drawEndScreen(Window * window) {
 800bd48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bd4c:	b08a      	sub	sp, #40	; 0x28
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
	// Draw a smiley face
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800bd52:	2346      	movs	r3, #70	; 0x46
 800bd54:	627b      	str	r3, [r7, #36]	; 0x24
 800bd56:	e131      	b.n	800bfbc <tetris_drawEndScreen+0x274>
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800bd58:	2302      	movs	r3, #2
 800bd5a:	623b      	str	r3, [r7, #32]
 800bd5c:	e127      	b.n	800bfae <tetris_drawEndScreen+0x266>
			float y = IMAGE_HEIGHT-(i-IMAGE_Y) - (((float)IMAGE_HEIGHT)/2);
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd60:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 800bd64:	ee07 3a90 	vmov	s15, r3
 800bd68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd6c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800bfe0 <tetris_drawEndScreen+0x298>
 800bd70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd74:	edc7 7a06 	vstr	s15, [r7, #24]
			float x = (((float)IMAGE_HEIGHT)/IMAGE_WIDTH)*(j-IMAGE_X) - (((float)IMAGE_HEIGHT)/2);
 800bd78:	6a3b      	ldr	r3, [r7, #32]
 800bd7a:	3b02      	subs	r3, #2
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd84:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800bfe4 <tetris_drawEndScreen+0x29c>
 800bd88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd8c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800bfe0 <tetris_drawEndScreen+0x298>
 800bd90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd94:	edc7 7a05 	vstr	s15, [r7, #20]
			float rad_head = x*x + y*y;
 800bd98:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd9c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bda0:	edd7 7a06 	vldr	s15, [r7, #24]
 800bda4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bda8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdac:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_eyes = (abs(x)-70)*(abs(x)-70) + (y-30)*(y-30);
 800bdb0:	edd7 7a05 	vldr	s15, [r7, #20]
 800bdb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdb8:	ee17 3a90 	vmov	r3, s15
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	bfb8      	it	lt
 800bdc0:	425b      	neglt	r3, r3
 800bdc2:	3b46      	subs	r3, #70	; 0x46
 800bdc4:	edd7 7a05 	vldr	s15, [r7, #20]
 800bdc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdcc:	ee17 2a90 	vmov	r2, s15
 800bdd0:	2a00      	cmp	r2, #0
 800bdd2:	bfb8      	it	lt
 800bdd4:	4252      	neglt	r2, r2
 800bdd6:	3a46      	subs	r2, #70	; 0x46
 800bdd8:	fb02 f303 	mul.w	r3, r2, r3
 800bddc:	ee07 3a90 	vmov	s15, r3
 800bde0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bde4:	edd7 7a06 	vldr	s15, [r7, #24]
 800bde8:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800bdec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800bdf0:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdf4:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 800bdf8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bdfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be04:	edc7 7a03 	vstr	s15, [r7, #12]
			float quad_rad;
			// Happy if we get over 80k :)
			// Even though that point count may overflow the screen-
			if (window->game.points < 80000) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800be0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a74      	ldr	r2, [pc, #464]	; (800bfe8 <tetris_drawEndScreen+0x2a0>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d837      	bhi.n	800be8a <tetris_drawEndScreen+0x142>
				quad_rad = abs((y+100)+0.01*x*x);
 800be1a:	edd7 7a06 	vldr	s15, [r7, #24]
 800be1e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bfec <tetris_drawEndScreen+0x2a4>
 800be22:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be26:	ee17 0a90 	vmov	r0, s15
 800be2a:	f7f4 fb9d 	bl	8000568 <__aeabi_f2d>
 800be2e:	4604      	mov	r4, r0
 800be30:	460d      	mov	r5, r1
 800be32:	6978      	ldr	r0, [r7, #20]
 800be34:	f7f4 fb98 	bl	8000568 <__aeabi_f2d>
 800be38:	a367      	add	r3, pc, #412	; (adr r3, 800bfd8 <tetris_drawEndScreen+0x290>)
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	f7f4 fbeb 	bl	8000618 <__aeabi_dmul>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4690      	mov	r8, r2
 800be48:	4699      	mov	r9, r3
 800be4a:	6978      	ldr	r0, [r7, #20]
 800be4c:	f7f4 fb8c 	bl	8000568 <__aeabi_f2d>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4640      	mov	r0, r8
 800be56:	4649      	mov	r1, r9
 800be58:	f7f4 fbde 	bl	8000618 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4620      	mov	r0, r4
 800be62:	4629      	mov	r1, r5
 800be64:	f7f4 fa22 	bl	80002ac <__adddf3>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4610      	mov	r0, r2
 800be6e:	4619      	mov	r1, r3
 800be70:	f7f4 fe82 	bl	8000b78 <__aeabi_d2iz>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	bfb8      	it	lt
 800be7a:	425b      	neglt	r3, r3
 800be7c:	ee07 3a90 	vmov	s15, r3
 800be80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be84:	edc7 7a07 	vstr	s15, [r7, #28]
 800be88:	e036      	b.n	800bef8 <tetris_drawEndScreen+0x1b0>
			} else {
				quad_rad = abs((y+100)-0.01*x*x);
 800be8a:	edd7 7a06 	vldr	s15, [r7, #24]
 800be8e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800bfec <tetris_drawEndScreen+0x2a4>
 800be92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be96:	ee17 0a90 	vmov	r0, s15
 800be9a:	f7f4 fb65 	bl	8000568 <__aeabi_f2d>
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	6978      	ldr	r0, [r7, #20]
 800bea4:	f7f4 fb60 	bl	8000568 <__aeabi_f2d>
 800bea8:	a34b      	add	r3, pc, #300	; (adr r3, 800bfd8 <tetris_drawEndScreen+0x290>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	f7f4 fbb3 	bl	8000618 <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4690      	mov	r8, r2
 800beb8:	4699      	mov	r9, r3
 800beba:	6978      	ldr	r0, [r7, #20]
 800bebc:	f7f4 fb54 	bl	8000568 <__aeabi_f2d>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	f7f4 fba6 	bl	8000618 <__aeabi_dmul>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 f9e8 	bl	80002a8 <__aeabi_dsub>
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	4610      	mov	r0, r2
 800bede:	4619      	mov	r1, r3
 800bee0:	f7f4 fe4a 	bl	8000b78 <__aeabi_d2iz>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfb8      	it	lt
 800beea:	425b      	neglt	r3, r3
 800beec:	ee07 3a90 	vmov	s15, r3
 800bef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bef4:	edc7 7a07 	vstr	s15, [r7, #28]
			}
			if(rad_head > 150*150 && rad_head < 170*170) {
 800bef8:	edd7 7a04 	vldr	s15, [r7, #16]
 800befc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800bff0 <tetris_drawEndScreen+0x2a8>
 800bf00:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf08:	dd13      	ble.n	800bf32 <tetris_drawEndScreen+0x1ea>
 800bf0a:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf0e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800bff4 <tetris_drawEndScreen+0x2ac>
 800bf12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1a:	d50a      	bpl.n	800bf32 <tetris_drawEndScreen+0x1ea>
				window->frame[i][j] = (uint8_t) 255;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	689a      	ldr	r2, [r3, #8]
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	22ff      	movs	r2, #255	; 0xff
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	e03a      	b.n	800bfa8 <tetris_drawEndScreen+0x260>
			} else if (rad_eyes < 20*20) {
 800bf32:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf36:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800bff8 <tetris_drawEndScreen+0x2b0>
 800bf3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf42:	d50a      	bpl.n	800bf5a <tetris_drawEndScreen+0x212>
				window->frame[i][j] = (uint8_t) 255;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4413      	add	r3, r2
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	6a3b      	ldr	r3, [r7, #32]
 800bf52:	4413      	add	r3, r2
 800bf54:	22ff      	movs	r2, #255	; 0xff
 800bf56:	701a      	strb	r2, [r3, #0]
 800bf58:	e026      	b.n	800bfa8 <tetris_drawEndScreen+0x260>
			} else if (quad_rad < 10 && y < -55) {
 800bf5a:	edd7 7a07 	vldr	s15, [r7, #28]
 800bf5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bf62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6a:	d513      	bpl.n	800bf94 <tetris_drawEndScreen+0x24c>
 800bf6c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf70:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800bffc <tetris_drawEndScreen+0x2b4>
 800bf74:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7c:	d50a      	bpl.n	800bf94 <tetris_drawEndScreen+0x24c>
				window->frame[i][j] = (uint8_t) 255;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689a      	ldr	r2, [r3, #8]
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	22ff      	movs	r2, #255	; 0xff
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	e009      	b.n	800bfa8 <tetris_drawEndScreen+0x260>
			} else {
				window->frame[i][j] = (uint8_t) 0;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	689a      	ldr	r2, [r3, #8]
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4413      	add	r3, r2
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	6a3b      	ldr	r3, [r7, #32]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	701a      	strb	r2, [r3, #0]
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	623b      	str	r3, [r7, #32]
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	2b51      	cmp	r3, #81	; 0x51
 800bfb2:	f77f aed4 	ble.w	800bd5e <tetris_drawEndScreen+0x16>
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb8:	3301      	adds	r3, #1
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800bfc2:	f6ff aec9 	blt.w	800bd58 <tetris_drawEndScreen+0x10>
			}
		}
	}
}
 800bfc6:	bf00      	nop
 800bfc8:	bf00      	nop
 800bfca:	3728      	adds	r7, #40	; 0x28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bfd2:	bf00      	nop
 800bfd4:	f3af 8000 	nop.w
 800bfd8:	47ae147b 	.word	0x47ae147b
 800bfdc:	3f847ae1 	.word	0x3f847ae1
 800bfe0:	432f0000 	.word	0x432f0000
 800bfe4:	408c0000 	.word	0x408c0000
 800bfe8:	0001387f 	.word	0x0001387f
 800bfec:	42c80000 	.word	0x42c80000
 800bff0:	46afc800 	.word	0x46afc800
 800bff4:	46e1c800 	.word	0x46e1c800
 800bff8:	43c80000 	.word	0x43c80000
 800bffc:	c25c0000 	.word	0xc25c0000

0800c000 <tetris_finished_tetromino>:
 * @brief Finalizes the tetromino position and generates a new tetromino.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_finished_tetromino(Window * window) {
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
    int index = 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	617b      	str	r3, [r7, #20]
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	613b      	str	r3, [r7, #16]
 800c016:	e04e      	b.n	800c0b6 <tetris_finished_tetromino+0xb6>
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c01e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	e039      	b.n	800c09c <tetris_finished_tetromino+0x9c>
            if (row >= 0 && row < BOARD_HEIGHT && col >= 0 && col < BOARD_WIDTH && tetromino_current[index] != 10) {
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	db30      	blt.n	800c090 <tetris_finished_tetromino+0x90>
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	2b13      	cmp	r3, #19
 800c032:	dc2d      	bgt.n	800c090 <tetris_finished_tetromino+0x90>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	db2a      	blt.n	800c090 <tetris_finished_tetromino+0x90>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2b09      	cmp	r3, #9
 800c03e:	dc27      	bgt.n	800c090 <tetris_finished_tetromino+0x90>
 800c040:	4a39      	ldr	r2, [pc, #228]	; (800c128 <tetris_finished_tetromino+0x128>)
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	4413      	add	r3, r2
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b0a      	cmp	r3, #10
 800c04a:	d021      	beq.n	800c090 <tetris_finished_tetromino+0x90>
                window->game.board[BOARD_WIDTH * row + col] = tetromino_current[index];
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	4613      	mov	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	461a      	mov	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4413      	add	r3, r2
 800c05c:	4932      	ldr	r1, [pc, #200]	; (800c128 <tetris_finished_tetromino+0x128>)
 800c05e:	697a      	ldr	r2, [r7, #20]
 800c060:	440a      	add	r2, r1
 800c062:	7811      	ldrb	r1, [r2, #0]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	4413      	add	r3, r2
 800c068:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c06c:	3304      	adds	r3, #4
 800c06e:	460a      	mov	r2, r1
 800c070:	701a      	strb	r2, [r3, #0]

                // check to see if game over!
                if (row < 4) {
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2b03      	cmp	r3, #3
 800c076:	dc0b      	bgt.n	800c090 <tetris_finished_tetromino+0x90>
                    tetris_initialize_game(window);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7ff fbaf 	bl	800b7dc <tetris_initialize_game>
                    tetris_drawEndScreen(window);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff fe62 	bl	800bd48 <tetris_drawEndScreen>
                    window->game.state = Ended;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c08a:	33cc      	adds	r3, #204	; 0xcc
 800c08c:	2203      	movs	r2, #3
 800c08e:	701a      	strb	r2, [r3, #0]
                }
            }
            index++;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	3301      	adds	r3, #1
 800c094:	617b      	str	r3, [r7, #20]
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3301      	adds	r3, #1
 800c09a:	60fb      	str	r3, [r7, #12]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3303      	adds	r3, #3
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	ddbb      	ble.n	800c028 <tetris_finished_tetromino+0x28>
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	613b      	str	r3, [r7, #16]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3303      	adds	r3, #3
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	dda8      	ble.n	800c018 <tetris_finished_tetromino+0x18>
        }
    }

    // reset tetromino position & spawn next tetromino
    window->game.y = 0;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c0da:	2203      	movs	r2, #3
 800c0dc:	601a      	str	r2, [r3, #0]
    window->game.rotation = 0;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = window->game.nextTetromino;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0f2:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c0fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c102:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino(window);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7ff fbbd 	bl	800b884 <tetris_get_next_tetromino>
 800c10a:	4602      	mov	r2, r0
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c112:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800c116:	601a      	str	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7ff fbf9 	bl	800b910 <tetris_update_current_tetromino>
}
 800c11e:	bf00      	nop
 800c120:	3718      	adds	r7, #24
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	20000634 	.word	0x20000634

0800c12c <tetris_detect_rowCompletion>:
/**
 * @brief Detect full rows, and clears them out of the board
 *
 * @param window window w/ game
 */
void tetris_detect_rowCompletion(Window * window) {
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b0a6      	sub	sp, #152	; 0x98
 800c130:	af04      	add	r7, sp, #16
 800c132:	6078      	str	r0, [r7, #4]
    // go over board & detect all lines that need to be cleared.
    int rowCompleted[BOARD_HEIGHT];
    int numRowsCompleted = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800c13a:	2300      	movs	r3, #0
 800c13c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c140:	e03f      	b.n	800c1c2 <tetris_detect_rowCompletion+0x96>
        rowCompleted[row] = 1;
 800c142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c14c:	4413      	add	r3, r2
 800c14e:	2201      	movs	r2, #1
 800c150:	f843 2c80 	str.w	r2, [r3, #-128]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c154:	2300      	movs	r3, #0
 800c156:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c158:	e01c      	b.n	800c194 <tetris_detect_rowCompletion+0x68>
            if (window->game.board[BOARD_WIDTH * row + col] == EMPTY_BOARD_CHAR) {
 800c15a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c15e:	4613      	mov	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	4413      	add	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	461a      	mov	r2, r3
 800c168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c16a:	4413      	add	r3, r2
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c174:	3304      	adds	r3, #4
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b64      	cmp	r3, #100	; 0x64
 800c17a:	d108      	bne.n	800c18e <tetris_detect_rowCompletion+0x62>
                rowCompleted[row] = 0;
 800c17c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c186:	4413      	add	r3, r2
 800c188:	2200      	movs	r2, #0
 800c18a:	f843 2c80 	str.w	r2, [r3, #-128]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c18e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c190:	3301      	adds	r3, #1
 800c192:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c196:	2b09      	cmp	r3, #9
 800c198:	dddf      	ble.n	800c15a <tetris_detect_rowCompletion+0x2e>
            }
        }
        if(rowCompleted[row]) numRowsCompleted++;
 800c19a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f853 3c80 	ldr.w	r3, [r3, #-128]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d004      	beq.n	800c1b8 <tetris_detect_rowCompletion+0x8c>
 800c1ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800c1b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1bc:	3301      	adds	r3, #1
 800c1be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c1c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1c6:	2b13      	cmp	r3, #19
 800c1c8:	ddbb      	ble.n	800c142 <tetris_detect_rowCompletion+0x16>
    }

    for (int i = 0; i < 4; i++) {
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c1ce:	e04c      	b.n	800c26a <tetris_detect_rowCompletion+0x13e>
        int anyRowFlag = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	677b      	str	r3, [r7, #116]	; 0x74
        // go over board from bottom to top & turn lines that need to be cleared on/off
        for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800c1d4:	2313      	movs	r3, #19
 800c1d6:	673b      	str	r3, [r7, #112]	; 0x70
 800c1d8:	e02d      	b.n	800c236 <tetris_detect_rowCompletion+0x10a>
            if (rowCompleted[row]) {
 800c1da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f853 3c80 	ldr.w	r3, [r3, #-128]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d021      	beq.n	800c230 <tetris_detect_rowCompletion+0x104>
                for (int col = 0; col < BOARD_WIDTH; col++) {
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1f0:	e019      	b.n	800c226 <tetris_detect_rowCompletion+0xfa>
                    window->game.board[BOARD_WIDTH * row + col] = (i%2) ? 150 : EMPTY_BOARD_CHAR;
 800c1f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <tetris_detect_rowCompletion+0xd4>
 800c1fc:	2196      	movs	r1, #150	; 0x96
 800c1fe:	e000      	b.n	800c202 <tetris_detect_rowCompletion+0xd6>
 800c200:	2164      	movs	r1, #100	; 0x64
 800c202:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	005b      	lsls	r3, r3, #1
 800c20c:	461a      	mov	r2, r3
 800c20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c210:	4413      	add	r3, r2
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	4413      	add	r3, r2
 800c216:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c21a:	3304      	adds	r3, #4
 800c21c:	460a      	mov	r2, r1
 800c21e:	701a      	strb	r2, [r3, #0]
                for (int col = 0; col < BOARD_WIDTH; col++) {
 800c220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c222:	3301      	adds	r3, #1
 800c224:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c228:	2b09      	cmp	r3, #9
 800c22a:	dde2      	ble.n	800c1f2 <tetris_detect_rowCompletion+0xc6>
                }
                anyRowFlag = 1;
 800c22c:	2301      	movs	r3, #1
 800c22e:	677b      	str	r3, [r7, #116]	; 0x74
        for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800c230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c232:	3b01      	subs	r3, #1
 800c234:	673b      	str	r3, [r7, #112]	; 0x70
 800c236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dace      	bge.n	800c1da <tetris_detect_rowCompletion+0xae>
            }
        }

        if (!anyRowFlag) {
 800c23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d017      	beq.n	800c272 <tetris_detect_rowCompletion+0x146>
            break;
        }

        drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, 1, 1, window->game.board);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c248:	3304      	adds	r3, #4
 800c24a:	9303      	str	r3, [sp, #12]
 800c24c:	2301      	movs	r3, #1
 800c24e:	9302      	str	r3, [sp, #8]
 800c250:	2301      	movs	r3, #1
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	2314      	movs	r3, #20
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	230a      	movs	r3, #10
 800c25a:	2202      	movs	r2, #2
 800c25c:	2102      	movs	r1, #2
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f8bc 	bl	800c3dc <drawRect>
    for (int i = 0; i < 4; i++) {
 800c264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c266:	3301      	adds	r3, #1
 800c268:	67bb      	str	r3, [r7, #120]	; 0x78
 800c26a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	ddaf      	ble.n	800c1d0 <tetris_detect_rowCompletion+0xa4>
 800c270:	e000      	b.n	800c274 <tetris_detect_rowCompletion+0x148>
            break;
 800c272:	bf00      	nop
    }

    // go over board from bottom to top & delete the lines that need to be cleared
    int row_currently_drawn = BOARD_HEIGHT - 1;
 800c274:	2313      	movs	r3, #19
 800c276:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800c278:	2313      	movs	r3, #19
 800c27a:	667b      	str	r3, [r7, #100]	; 0x64
 800c27c:	e034      	b.n	800c2e8 <tetris_detect_rowCompletion+0x1bc>
        if (!rowCompleted[row]) {
 800c27e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800c286:	4413      	add	r3, r2
 800c288:	f853 3c80 	ldr.w	r3, [r3, #-128]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d128      	bne.n	800c2e2 <tetris_detect_rowCompletion+0x1b6>
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800c290:	2300      	movs	r3, #0
 800c292:	663b      	str	r3, [r7, #96]	; 0x60
 800c294:	e01f      	b.n	800c2d6 <tetris_detect_rowCompletion+0x1aa>
                window->game.board[BOARD_WIDTH * row_currently_drawn + col] = window->game.board[BOARD_WIDTH * row + col];
 800c296:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c298:	4613      	mov	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2a4:	18d1      	adds	r1, r2, r3
 800c2a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	4413      	add	r3, r2
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2b4:	441a      	add	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	440b      	add	r3, r1
 800c2ba:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c2be:	3304      	adds	r3, #4
 800c2c0:	7819      	ldrb	r1, [r3, #0]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	460a      	mov	r2, r1
 800c2ce:	701a      	strb	r2, [r3, #0]
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800c2d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	663b      	str	r3, [r7, #96]	; 0x60
 800c2d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2d8:	2b09      	cmp	r3, #9
 800c2da:	dddc      	ble.n	800c296 <tetris_detect_rowCompletion+0x16a>
            }
            row_currently_drawn--;
 800c2dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800c2e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	667b      	str	r3, [r7, #100]	; 0x64
 800c2e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dac7      	bge.n	800c27e <tetris_detect_rowCompletion+0x152>
        }
    }

    for (int row = row_currently_drawn; row >= 0; row--) {
 800c2ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2f2:	e01d      	b.n	800c330 <tetris_detect_rowCompletion+0x204>
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2f8:	e011      	b.n	800c31e <tetris_detect_rowCompletion+0x1f2>
            window->game.board[BOARD_WIDTH * row_currently_drawn + col] = EMPTY_BOARD_CHAR;
 800c2fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	461a      	mov	r2, r3
 800c306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c308:	4413      	add	r3, r2
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c312:	3304      	adds	r3, #4
 800c314:	2264      	movs	r2, #100	; 0x64
 800c316:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c31a:	3301      	adds	r3, #1
 800c31c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c31e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c320:	2b09      	cmp	r3, #9
 800c322:	ddea      	ble.n	800c2fa <tetris_detect_rowCompletion+0x1ce>
        }
        row_currently_drawn--;
 800c324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c326:	3b01      	subs	r3, #1
 800c328:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = row_currently_drawn; row >= 0; row--) {
 800c32a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c32c:	3b01      	subs	r3, #1
 800c32e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c332:	2b00      	cmp	r3, #0
 800c334:	dade      	bge.n	800c2f4 <tetris_detect_rowCompletion+0x1c8>
 800c336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c33a:	3b01      	subs	r3, #1
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	d847      	bhi.n	800c3d0 <tetris_detect_rowCompletion+0x2a4>
 800c340:	a201      	add	r2, pc, #4	; (adr r2, 800c348 <tetris_detect_rowCompletion+0x21c>)
 800c342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c346:	bf00      	nop
 800c348:	0800c359 	.word	0x0800c359
 800c34c:	0800c377 	.word	0x0800c377
 800c350:	0800c395 	.word	0x0800c395
 800c354:	0800c3b3 	.word	0x0800c3b3
    }

    switch(numRowsCompleted) {
    case 1:
    	window->game.points += 40;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c35e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c36e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c372:	601a      	str	r2, [r3, #0]
    	break;
 800c374:	e02d      	b.n	800c3d2 <tetris_detect_rowCompletion+0x2a6>
    case 2:
    	window->game.points += 100;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c37c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c38c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c390:	601a      	str	r2, [r3, #0]
    	break;
 800c392:	e01e      	b.n	800c3d2 <tetris_detect_rowCompletion+0x2a6>
    case 3:
    	window->game.points += 300;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c39a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c3aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c3ae:	601a      	str	r2, [r3, #0]
    	break;
 800c3b0:	e00f      	b.n	800c3d2 <tetris_detect_rowCompletion+0x2a6>
    case 4:
    	window->game.points += 1200;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c3b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c3c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c3cc:	601a      	str	r2, [r3, #0]
    	break;
 800c3ce:	e000      	b.n	800c3d2 <tetris_detect_rowCompletion+0x2a6>
    default:
    	break;
 800c3d0:	bf00      	nop
    }
}
 800c3d2:	bf00      	nop
 800c3d4:	3788      	adds	r7, #136	; 0x88
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop

0800c3dc <drawRect>:
 * @param height height of 2D data rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param data data to write to screen
 */
void drawRect(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t* data) {
 800c3dc:	b480      	push	{r7}
 800c3de:	b08b      	sub	sp, #44	; 0x2c
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	617b      	str	r3, [r7, #20]

    int indexRow = 0, indexCol;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3f8:	fb02 f303 	mul.w	r3, r2, r3
 800c3fc:	3346      	adds	r3, #70	; 0x46
 800c3fe:	61fb      	str	r3, [r7, #28]
 800c400:	e06b      	b.n	800c4da <drawRect+0xfe>
        indexCol = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c40a:	fb02 f303 	mul.w	r3, r2, r3
 800c40e:	3302      	adds	r3, #2
 800c410:	61bb      	str	r3, [r7, #24]
 800c412:	e041      	b.n	800c498 <drawRect+0xbc>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X && data[indexRow * width + indexCol] != 10) {
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	2b45      	cmp	r3, #69	; 0x45
 800c418:	dd27      	ble.n	800c46a <drawRect+0x8e>
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c420:	da23      	bge.n	800c46a <drawRect+0x8e>
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	2b01      	cmp	r3, #1
 800c426:	dd20      	ble.n	800c46a <drawRect+0x8e>
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	2b51      	cmp	r3, #81	; 0x51
 800c42c:	dc1d      	bgt.n	800c46a <drawRect+0x8e>
 800c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	fb02 f203 	mul.w	r2, r2, r3
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	4413      	add	r3, r2
 800c43a:	461a      	mov	r2, r3
 800c43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c43e:	4413      	add	r3, r2
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	2b0a      	cmp	r3, #10
 800c444:	d011      	beq.n	800c46a <drawRect+0x8e>
                buff[row][col] = data[indexRow * width + indexCol];
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	fb02 f203 	mul.w	r2, r2, r3
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	4413      	add	r3, r2
 800c452:	461a      	mov	r2, r3
 800c454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c456:	441a      	add	r2, r3
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	6979      	ldr	r1, [r7, #20]
 800c45e:	440b      	add	r3, r1
 800c460:	6819      	ldr	r1, [r3, #0]
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	440b      	add	r3, r1
 800c466:	7812      	ldrb	r2, [r2, #0]
 800c468:	701a      	strb	r2, [r3, #0]
            }
            if ((col - (x_start * scaling_h + IMAGE_X) + 1) % scaling_h == 0) {
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c46e:	fb02 f303 	mul.w	r3, r2, r3
 800c472:	3302      	adds	r3, #2
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	3301      	adds	r3, #1
 800c47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c47c:	fb93 f2f2 	sdiv	r2, r3, r2
 800c480:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c482:	fb01 f202 	mul.w	r2, r1, r2
 800c486:	1a9b      	subs	r3, r3, r2
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d102      	bne.n	800c492 <drawRect+0xb6>
                indexCol++;
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	3301      	adds	r3, #1
 800c490:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	3301      	adds	r3, #1
 800c496:	61bb      	str	r3, [r7, #24]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	4413      	add	r3, r2
 800c49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4a0:	fb02 f303 	mul.w	r3, r2, r3
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	69ba      	ldr	r2, [r7, #24]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	ddb3      	ble.n	800c414 <drawRect+0x38>
            }
        }
        if ((row - (y_start * scaling_v + IMAGE_Y) + 1) % scaling_v == 0) {
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4b0:	fb02 f303 	mul.w	r3, r2, r3
 800c4b4:	3346      	adds	r3, #70	; 0x46
 800c4b6:	69fa      	ldr	r2, [r7, #28]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4be:	fb93 f2f2 	sdiv	r2, r3, r2
 800c4c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4c4:	fb01 f202 	mul.w	r2, r1, r2
 800c4c8:	1a9b      	subs	r3, r3, r2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d102      	bne.n	800c4d4 <drawRect+0xf8>
            indexRow++;
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	61fb      	str	r3, [r7, #28]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	4413      	add	r3, r2
 800c4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4e2:	fb02 f303 	mul.w	r3, r2, r3
 800c4e6:	3345      	adds	r3, #69	; 0x45
 800c4e8:	69fa      	ldr	r2, [r7, #28]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	dd89      	ble.n	800c402 <drawRect+0x26>
        }
    }
}
 800c4ee:	bf00      	nop
 800c4f0:	bf00      	nop
 800c4f2:	372c      	adds	r7, #44	; 0x2c
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <drawRect_color>:
 * @param height height of rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param color color to draw in rectangle
 */
void drawRect_color(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t color) {
 800c4fc:	b480      	push	{r7}
 800c4fe:	b089      	sub	sp, #36	; 0x24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	617b      	str	r3, [r7, #20]

    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c514:	fb02 f303 	mul.w	r3, r2, r3
 800c518:	3346      	adds	r3, #70	; 0x46
 800c51a:	61fb      	str	r3, [r7, #28]
 800c51c:	e02d      	b.n	800c57a <drawRect_color+0x7e>
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c522:	fb02 f303 	mul.w	r3, r2, r3
 800c526:	3302      	adds	r3, #2
 800c528:	61bb      	str	r3, [r7, #24]
 800c52a:	e019      	b.n	800c560 <drawRect_color+0x64>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X) {
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	2b45      	cmp	r3, #69	; 0x45
 800c530:	dd13      	ble.n	800c55a <drawRect_color+0x5e>
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c538:	da0f      	bge.n	800c55a <drawRect_color+0x5e>
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	dd0c      	ble.n	800c55a <drawRect_color+0x5e>
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	2b51      	cmp	r3, #81	; 0x51
 800c544:	dc09      	bgt.n	800c55a <drawRect_color+0x5e>
            	buff[row][col] = color;
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	4413      	add	r3, r2
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	4413      	add	r3, r2
 800c554:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800c558:	701a      	strb	r2, [r3, #0]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	3301      	adds	r3, #1
 800c55e:	61bb      	str	r3, [r7, #24]
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	4413      	add	r3, r2
 800c566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c568:	fb02 f303 	mul.w	r3, r2, r3
 800c56c:	3301      	adds	r3, #1
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	429a      	cmp	r2, r3
 800c572:	dddb      	ble.n	800c52c <drawRect_color+0x30>
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	3301      	adds	r3, #1
 800c578:	61fb      	str	r3, [r7, #28]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57e:	4413      	add	r3, r2
 800c580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c582:	fb02 f303 	mul.w	r3, r2, r3
 800c586:	3345      	adds	r3, #69	; 0x45
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	ddc7      	ble.n	800c51e <drawRect_color+0x22>
            }
        }
    }
}
 800c58e:	bf00      	nop
 800c590:	bf00      	nop
 800c592:	3724      	adds	r7, #36	; 0x24
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	0000      	movs	r0, r0
	...

0800c5a0 <tetris_drawBackground>:
/**
 * @brief draw the background - a series of sine waves
 *
 * @param window window to draw to
 */
void tetris_drawBackground(Window* window) {
 800c5a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c5a4:	b086      	sub	sp, #24
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
	float y_repeat = IMAGE_HEIGHT / 9.0;
 800c5aa:	4b55      	ldr	r3, [pc, #340]	; (800c700 <tetris_drawBackground+0x160>)
 800c5ac:	60fb      	str	r3, [r7, #12]
	for (int row = IMAGE_Y; row < IMAGE_HEIGHT + IMAGE_Y; row++) {
 800c5ae:	2346      	movs	r3, #70	; 0x46
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	e095      	b.n	800c6e0 <tetris_drawBackground+0x140>
	        for (int col = IMAGE_X; col < IMAGE_WIDTH + IMAGE_X; col++) {
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	613b      	str	r3, [r7, #16]
 800c5b8:	e08b      	b.n	800c6d2 <tetris_drawBackground+0x132>
	        	if (col < IMAGE_X + BOARD_X + BOARD_WIDTH * 2 + 5) {
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b1c      	cmp	r3, #28
 800c5be:	dc0a      	bgt.n	800c5d6 <tetris_drawBackground+0x36>
	        		window->frame[row][col] = 125;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	689a      	ldr	r2, [r3, #8]
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	227d      	movs	r2, #125	; 0x7d
 800c5d2:	701a      	strb	r2, [r3, #0]
 800c5d4:	e07a      	b.n	800c6cc <tetris_drawBackground+0x12c>
	        	} else {

		        	float sin_diff = fabs(9.0 * arm_sin_f32(0.9 * col) + 9.0 - fmod(row, y_repeat) );
 800c5d6:	6938      	ldr	r0, [r7, #16]
 800c5d8:	f7f3 ffb4 	bl	8000544 <__aeabi_i2d>
 800c5dc:	a346      	add	r3, pc, #280	; (adr r3, 800c6f8 <tetris_drawBackground+0x158>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	f7f4 f819 	bl	8000618 <__aeabi_dmul>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f7f4 faeb 	bl	8000bc8 <__aeabi_d2f>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	ee00 3a10 	vmov	s0, r3
 800c5f8:	f000 f8b2 	bl	800c760 <arm_sin_f32>
 800c5fc:	ee10 3a10 	vmov	r3, s0
 800c600:	4618      	mov	r0, r3
 800c602:	f7f3 ffb1 	bl	8000568 <__aeabi_f2d>
 800c606:	f04f 0200 	mov.w	r2, #0
 800c60a:	4b3e      	ldr	r3, [pc, #248]	; (800c704 <tetris_drawBackground+0x164>)
 800c60c:	f7f4 f804 	bl	8000618 <__aeabi_dmul>
 800c610:	4602      	mov	r2, r0
 800c612:	460b      	mov	r3, r1
 800c614:	4610      	mov	r0, r2
 800c616:	4619      	mov	r1, r3
 800c618:	f04f 0200 	mov.w	r2, #0
 800c61c:	4b39      	ldr	r3, [pc, #228]	; (800c704 <tetris_drawBackground+0x164>)
 800c61e:	f7f3 fe45 	bl	80002ac <__adddf3>
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	4614      	mov	r4, r2
 800c628:	461d      	mov	r5, r3
 800c62a:	6978      	ldr	r0, [r7, #20]
 800c62c:	f7f3 ff8a 	bl	8000544 <__aeabi_i2d>
 800c630:	4680      	mov	r8, r0
 800c632:	4689      	mov	r9, r1
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f7f3 ff97 	bl	8000568 <__aeabi_f2d>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	ec43 2b11 	vmov	d1, r2, r3
 800c642:	ec49 8b10 	vmov	d0, r8, r9
 800c646:	f001 fbc1 	bl	800ddcc <fmod>
 800c64a:	ec53 2b10 	vmov	r2, r3, d0
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f3 fe29 	bl	80002a8 <__aeabi_dsub>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4610      	mov	r0, r2
 800c65c:	4619      	mov	r1, r3
 800c65e:	f7f4 fab3 	bl	8000bc8 <__aeabi_d2f>
 800c662:	ee07 0a90 	vmov	s15, r0
 800c666:	eef0 7ae7 	vabs.f32	s15, s15
 800c66a:	edc7 7a02 	vstr	s15, [r7, #8]
		        	window->frame[row][col] = (sin_diff < 4.0) ? 20 : 70;
 800c66e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c672:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c67e:	d501      	bpl.n	800c684 <tetris_drawBackground+0xe4>
 800c680:	2114      	movs	r1, #20
 800c682:	e000      	b.n	800c686 <tetris_drawBackground+0xe6>
 800c684:	2146      	movs	r1, #70	; 0x46
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	689a      	ldr	r2, [r3, #8]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	4413      	add	r3, r2
 800c696:	460a      	mov	r2, r1
 800c698:	701a      	strb	r2, [r3, #0]
		        	if( (col+2) % 7 == 0) window->frame[row][col] = 20;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	1c9a      	adds	r2, r3, #2
 800c69e:	4b1a      	ldr	r3, [pc, #104]	; (800c708 <tetris_drawBackground+0x168>)
 800c6a0:	fb83 1302 	smull	r1, r3, r3, r2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	1099      	asrs	r1, r3, #2
 800c6a8:	17d3      	asrs	r3, r2, #31
 800c6aa:	1ac9      	subs	r1, r1, r3
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	1a5b      	subs	r3, r3, r1
 800c6b2:	1ad1      	subs	r1, r2, r3
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	d109      	bne.n	800c6cc <tetris_drawBackground+0x12c>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	689a      	ldr	r2, [r3, #8]
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	2214      	movs	r2, #20
 800c6ca:	701a      	strb	r2, [r3, #0]
	        for (int col = IMAGE_X; col < IMAGE_WIDTH + IMAGE_X; col++) {
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	613b      	str	r3, [r7, #16]
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	2b51      	cmp	r3, #81	; 0x51
 800c6d6:	f77f af70 	ble.w	800c5ba <tetris_drawBackground+0x1a>
	for (int row = IMAGE_Y; row < IMAGE_HEIGHT + IMAGE_Y; row++) {
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	617b      	str	r3, [r7, #20]
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c6e6:	f6ff af65 	blt.w	800c5b4 <tetris_drawBackground+0x14>
	        	}

	        }
	    }
 }
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	3718      	adds	r7, #24
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c6f6:	bf00      	nop
 800c6f8:	cccccccd 	.word	0xcccccccd
 800c6fc:	3feccccc 	.word	0x3feccccc
 800c700:	421b8e39 	.word	0x421b8e39
 800c704:	40220000 	.word	0x40220000
 800c708:	92492493 	.word	0x92492493

0800c70c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 800c70c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c710:	f7ff f82c 	bl	800b76c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c714:	480c      	ldr	r0, [pc, #48]	; (800c748 <LoopForever+0x6>)
  ldr r1, =_edata
 800c716:	490d      	ldr	r1, [pc, #52]	; (800c74c <LoopForever+0xa>)
 ldr r2, =_sidata
 800c718:	4a0d      	ldr	r2, [pc, #52]	; (800c750 <LoopForever+0xe>)
  movs r3, #0
 800c71a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c71c:	e002      	b.n	800c724 <LoopCopyDataInit>

0800c71e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c71e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c722:	3304      	adds	r3, #4

0800c724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c728:	d3f9      	bcc.n	800c71e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c72a:	4a0a      	ldr	r2, [pc, #40]	; (800c754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c72c:	4c0a      	ldr	r4, [pc, #40]	; (800c758 <LoopForever+0x16>)
  movs r3, #0
 800c72e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c730:	e001      	b.n	800c736 <LoopFillZerobss>

0800c732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c734:	3204      	adds	r2, #4

0800c736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c738:	d3fb      	bcc.n	800c732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c73a:	f000 f953 	bl	800c9e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c73e:	f7fd ff5f 	bl	800a600 <main>

0800c742 <LoopForever>:

LoopForever:
    b LoopForever
 800c742:	e7fe      	b.n	800c742 <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 800c744:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800c748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c74c:	200006ac 	.word	0x200006ac
 ldr r2, =_sidata
 800c750:	08040910 	.word	0x08040910
  ldr r2, =_sbss
 800c754:	200006ac 	.word	0x200006ac
  ldr r4, =_ebss
 800c758:	2001aacc 	.word	0x2001aacc

0800c75c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c75c:	e7fe      	b.n	800c75c <ADC1_IRQHandler>
	...

0800c760 <arm_sin_f32>:
 800c760:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c7e0 <arm_sin_f32+0x80>
 800c764:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c768:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c770:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c774:	d504      	bpl.n	800c780 <arm_sin_f32+0x20>
 800c776:	ee17 3a90 	vmov	r3, s15
 800c77a:	3b01      	subs	r3, #1
 800c77c:	ee07 3a90 	vmov	s15, r3
 800c780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c784:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c7e4 <arm_sin_f32+0x84>
 800c788:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c78c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c790:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c794:	ee17 3a90 	vmov	r3, s15
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c79e:	d21a      	bcs.n	800c7d6 <arm_sin_f32+0x76>
 800c7a0:	ee07 3a90 	vmov	s15, r3
 800c7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a8:	1c59      	adds	r1, r3, #1
 800c7aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c7ae:	4a0e      	ldr	r2, [pc, #56]	; (800c7e8 <arm_sin_f32+0x88>)
 800c7b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c7b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c7bc:	ed93 7a00 	vldr	s14, [r3]
 800c7c0:	edd2 6a00 	vldr	s13, [r2]
 800c7c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c7c8:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c7cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c7d4:	4770      	bx	lr
 800c7d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c7da:	2101      	movs	r1, #1
 800c7dc:	2300      	movs	r3, #0
 800c7de:	e7e6      	b.n	800c7ae <arm_sin_f32+0x4e>
 800c7e0:	3e22f983 	.word	0x3e22f983
 800c7e4:	44000000 	.word	0x44000000
 800c7e8:	0803ff70 	.word	0x0803ff70

0800c7ec <__errno>:
 800c7ec:	4b01      	ldr	r3, [pc, #4]	; (800c7f4 <__errno+0x8>)
 800c7ee:	6818      	ldr	r0, [r3, #0]
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	20000644 	.word	0x20000644

0800c7f8 <std>:
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	b510      	push	{r4, lr}
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	e9c0 3300 	strd	r3, r3, [r0]
 800c802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c806:	6083      	str	r3, [r0, #8]
 800c808:	8181      	strh	r1, [r0, #12]
 800c80a:	6643      	str	r3, [r0, #100]	; 0x64
 800c80c:	81c2      	strh	r2, [r0, #14]
 800c80e:	6183      	str	r3, [r0, #24]
 800c810:	4619      	mov	r1, r3
 800c812:	2208      	movs	r2, #8
 800c814:	305c      	adds	r0, #92	; 0x5c
 800c816:	f000 f923 	bl	800ca60 <memset>
 800c81a:	4b05      	ldr	r3, [pc, #20]	; (800c830 <std+0x38>)
 800c81c:	6263      	str	r3, [r4, #36]	; 0x24
 800c81e:	4b05      	ldr	r3, [pc, #20]	; (800c834 <std+0x3c>)
 800c820:	62a3      	str	r3, [r4, #40]	; 0x28
 800c822:	4b05      	ldr	r3, [pc, #20]	; (800c838 <std+0x40>)
 800c824:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c826:	4b05      	ldr	r3, [pc, #20]	; (800c83c <std+0x44>)
 800c828:	6224      	str	r4, [r4, #32]
 800c82a:	6323      	str	r3, [r4, #48]	; 0x30
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	bf00      	nop
 800c830:	0800cdd5 	.word	0x0800cdd5
 800c834:	0800cdf7 	.word	0x0800cdf7
 800c838:	0800ce2f 	.word	0x0800ce2f
 800c83c:	0800ce53 	.word	0x0800ce53

0800c840 <_cleanup_r>:
 800c840:	4901      	ldr	r1, [pc, #4]	; (800c848 <_cleanup_r+0x8>)
 800c842:	f000 b8af 	b.w	800c9a4 <_fwalk_reent>
 800c846:	bf00      	nop
 800c848:	0800cfe9 	.word	0x0800cfe9

0800c84c <__sfmoreglue>:
 800c84c:	b570      	push	{r4, r5, r6, lr}
 800c84e:	1e4a      	subs	r2, r1, #1
 800c850:	2568      	movs	r5, #104	; 0x68
 800c852:	4355      	muls	r5, r2
 800c854:	460e      	mov	r6, r1
 800c856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c85a:	f000 f959 	bl	800cb10 <_malloc_r>
 800c85e:	4604      	mov	r4, r0
 800c860:	b140      	cbz	r0, 800c874 <__sfmoreglue+0x28>
 800c862:	2100      	movs	r1, #0
 800c864:	e9c0 1600 	strd	r1, r6, [r0]
 800c868:	300c      	adds	r0, #12
 800c86a:	60a0      	str	r0, [r4, #8]
 800c86c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c870:	f000 f8f6 	bl	800ca60 <memset>
 800c874:	4620      	mov	r0, r4
 800c876:	bd70      	pop	{r4, r5, r6, pc}

0800c878 <__sfp_lock_acquire>:
 800c878:	4801      	ldr	r0, [pc, #4]	; (800c880 <__sfp_lock_acquire+0x8>)
 800c87a:	f000 b8d8 	b.w	800ca2e <__retarget_lock_acquire_recursive>
 800c87e:	bf00      	nop
 800c880:	2001aac4 	.word	0x2001aac4

0800c884 <__sfp_lock_release>:
 800c884:	4801      	ldr	r0, [pc, #4]	; (800c88c <__sfp_lock_release+0x8>)
 800c886:	f000 b8d3 	b.w	800ca30 <__retarget_lock_release_recursive>
 800c88a:	bf00      	nop
 800c88c:	2001aac4 	.word	0x2001aac4

0800c890 <__sinit_lock_acquire>:
 800c890:	4801      	ldr	r0, [pc, #4]	; (800c898 <__sinit_lock_acquire+0x8>)
 800c892:	f000 b8cc 	b.w	800ca2e <__retarget_lock_acquire_recursive>
 800c896:	bf00      	nop
 800c898:	2001aabf 	.word	0x2001aabf

0800c89c <__sinit_lock_release>:
 800c89c:	4801      	ldr	r0, [pc, #4]	; (800c8a4 <__sinit_lock_release+0x8>)
 800c89e:	f000 b8c7 	b.w	800ca30 <__retarget_lock_release_recursive>
 800c8a2:	bf00      	nop
 800c8a4:	2001aabf 	.word	0x2001aabf

0800c8a8 <__sinit>:
 800c8a8:	b510      	push	{r4, lr}
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	f7ff fff0 	bl	800c890 <__sinit_lock_acquire>
 800c8b0:	69a3      	ldr	r3, [r4, #24]
 800c8b2:	b11b      	cbz	r3, 800c8bc <__sinit+0x14>
 800c8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8b8:	f7ff bff0 	b.w	800c89c <__sinit_lock_release>
 800c8bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c8c0:	6523      	str	r3, [r4, #80]	; 0x50
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <__sinit+0x68>)
 800c8c4:	4a13      	ldr	r2, [pc, #76]	; (800c914 <__sinit+0x6c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8ca:	42a3      	cmp	r3, r4
 800c8cc:	bf04      	itt	eq
 800c8ce:	2301      	moveq	r3, #1
 800c8d0:	61a3      	streq	r3, [r4, #24]
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f000 f820 	bl	800c918 <__sfp>
 800c8d8:	6060      	str	r0, [r4, #4]
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f000 f81c 	bl	800c918 <__sfp>
 800c8e0:	60a0      	str	r0, [r4, #8]
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f000 f818 	bl	800c918 <__sfp>
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	60e0      	str	r0, [r4, #12]
 800c8ec:	2104      	movs	r1, #4
 800c8ee:	6860      	ldr	r0, [r4, #4]
 800c8f0:	f7ff ff82 	bl	800c7f8 <std>
 800c8f4:	68a0      	ldr	r0, [r4, #8]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	2109      	movs	r1, #9
 800c8fa:	f7ff ff7d 	bl	800c7f8 <std>
 800c8fe:	68e0      	ldr	r0, [r4, #12]
 800c900:	2202      	movs	r2, #2
 800c902:	2112      	movs	r1, #18
 800c904:	f7ff ff78 	bl	800c7f8 <std>
 800c908:	2301      	movs	r3, #1
 800c90a:	61a3      	str	r3, [r4, #24]
 800c90c:	e7d2      	b.n	800c8b4 <__sinit+0xc>
 800c90e:	bf00      	nop
 800c910:	080407d4 	.word	0x080407d4
 800c914:	0800c841 	.word	0x0800c841

0800c918 <__sfp>:
 800c918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91a:	4607      	mov	r7, r0
 800c91c:	f7ff ffac 	bl	800c878 <__sfp_lock_acquire>
 800c920:	4b1e      	ldr	r3, [pc, #120]	; (800c99c <__sfp+0x84>)
 800c922:	681e      	ldr	r6, [r3, #0]
 800c924:	69b3      	ldr	r3, [r6, #24]
 800c926:	b913      	cbnz	r3, 800c92e <__sfp+0x16>
 800c928:	4630      	mov	r0, r6
 800c92a:	f7ff ffbd 	bl	800c8a8 <__sinit>
 800c92e:	3648      	adds	r6, #72	; 0x48
 800c930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c934:	3b01      	subs	r3, #1
 800c936:	d503      	bpl.n	800c940 <__sfp+0x28>
 800c938:	6833      	ldr	r3, [r6, #0]
 800c93a:	b30b      	cbz	r3, 800c980 <__sfp+0x68>
 800c93c:	6836      	ldr	r6, [r6, #0]
 800c93e:	e7f7      	b.n	800c930 <__sfp+0x18>
 800c940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c944:	b9d5      	cbnz	r5, 800c97c <__sfp+0x64>
 800c946:	4b16      	ldr	r3, [pc, #88]	; (800c9a0 <__sfp+0x88>)
 800c948:	60e3      	str	r3, [r4, #12]
 800c94a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c94e:	6665      	str	r5, [r4, #100]	; 0x64
 800c950:	f000 f86c 	bl	800ca2c <__retarget_lock_init_recursive>
 800c954:	f7ff ff96 	bl	800c884 <__sfp_lock_release>
 800c958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c95c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c960:	6025      	str	r5, [r4, #0]
 800c962:	61a5      	str	r5, [r4, #24]
 800c964:	2208      	movs	r2, #8
 800c966:	4629      	mov	r1, r5
 800c968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c96c:	f000 f878 	bl	800ca60 <memset>
 800c970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c978:	4620      	mov	r0, r4
 800c97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c97c:	3468      	adds	r4, #104	; 0x68
 800c97e:	e7d9      	b.n	800c934 <__sfp+0x1c>
 800c980:	2104      	movs	r1, #4
 800c982:	4638      	mov	r0, r7
 800c984:	f7ff ff62 	bl	800c84c <__sfmoreglue>
 800c988:	4604      	mov	r4, r0
 800c98a:	6030      	str	r0, [r6, #0]
 800c98c:	2800      	cmp	r0, #0
 800c98e:	d1d5      	bne.n	800c93c <__sfp+0x24>
 800c990:	f7ff ff78 	bl	800c884 <__sfp_lock_release>
 800c994:	230c      	movs	r3, #12
 800c996:	603b      	str	r3, [r7, #0]
 800c998:	e7ee      	b.n	800c978 <__sfp+0x60>
 800c99a:	bf00      	nop
 800c99c:	080407d4 	.word	0x080407d4
 800c9a0:	ffff0001 	.word	0xffff0001

0800c9a4 <_fwalk_reent>:
 800c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	4688      	mov	r8, r1
 800c9ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9b0:	2700      	movs	r7, #0
 800c9b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9b6:	f1b9 0901 	subs.w	r9, r9, #1
 800c9ba:	d505      	bpl.n	800c9c8 <_fwalk_reent+0x24>
 800c9bc:	6824      	ldr	r4, [r4, #0]
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d1f7      	bne.n	800c9b2 <_fwalk_reent+0xe>
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c8:	89ab      	ldrh	r3, [r5, #12]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d907      	bls.n	800c9de <_fwalk_reent+0x3a>
 800c9ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	d003      	beq.n	800c9de <_fwalk_reent+0x3a>
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4630      	mov	r0, r6
 800c9da:	47c0      	blx	r8
 800c9dc:	4307      	orrs	r7, r0
 800c9de:	3568      	adds	r5, #104	; 0x68
 800c9e0:	e7e9      	b.n	800c9b6 <_fwalk_reent+0x12>
	...

0800c9e4 <__libc_init_array>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	4d0d      	ldr	r5, [pc, #52]	; (800ca1c <__libc_init_array+0x38>)
 800c9e8:	4c0d      	ldr	r4, [pc, #52]	; (800ca20 <__libc_init_array+0x3c>)
 800c9ea:	1b64      	subs	r4, r4, r5
 800c9ec:	10a4      	asrs	r4, r4, #2
 800c9ee:	2600      	movs	r6, #0
 800c9f0:	42a6      	cmp	r6, r4
 800c9f2:	d109      	bne.n	800ca08 <__libc_init_array+0x24>
 800c9f4:	4d0b      	ldr	r5, [pc, #44]	; (800ca24 <__libc_init_array+0x40>)
 800c9f6:	4c0c      	ldr	r4, [pc, #48]	; (800ca28 <__libc_init_array+0x44>)
 800c9f8:	f001 fcbe 	bl	800e378 <_init>
 800c9fc:	1b64      	subs	r4, r4, r5
 800c9fe:	10a4      	asrs	r4, r4, #2
 800ca00:	2600      	movs	r6, #0
 800ca02:	42a6      	cmp	r6, r4
 800ca04:	d105      	bne.n	800ca12 <__libc_init_array+0x2e>
 800ca06:	bd70      	pop	{r4, r5, r6, pc}
 800ca08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca0c:	4798      	blx	r3
 800ca0e:	3601      	adds	r6, #1
 800ca10:	e7ee      	b.n	800c9f0 <__libc_init_array+0xc>
 800ca12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca16:	4798      	blx	r3
 800ca18:	3601      	adds	r6, #1
 800ca1a:	e7f2      	b.n	800ca02 <__libc_init_array+0x1e>
 800ca1c:	08040908 	.word	0x08040908
 800ca20:	08040908 	.word	0x08040908
 800ca24:	08040908 	.word	0x08040908
 800ca28:	0804090c 	.word	0x0804090c

0800ca2c <__retarget_lock_init_recursive>:
 800ca2c:	4770      	bx	lr

0800ca2e <__retarget_lock_acquire_recursive>:
 800ca2e:	4770      	bx	lr

0800ca30 <__retarget_lock_release_recursive>:
 800ca30:	4770      	bx	lr
	...

0800ca34 <malloc>:
 800ca34:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <malloc+0xc>)
 800ca36:	4601      	mov	r1, r0
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	f000 b869 	b.w	800cb10 <_malloc_r>
 800ca3e:	bf00      	nop
 800ca40:	20000644 	.word	0x20000644

0800ca44 <memcpy>:
 800ca44:	440a      	add	r2, r1
 800ca46:	4291      	cmp	r1, r2
 800ca48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca4c:	d100      	bne.n	800ca50 <memcpy+0xc>
 800ca4e:	4770      	bx	lr
 800ca50:	b510      	push	{r4, lr}
 800ca52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca5a:	4291      	cmp	r1, r2
 800ca5c:	d1f9      	bne.n	800ca52 <memcpy+0xe>
 800ca5e:	bd10      	pop	{r4, pc}

0800ca60 <memset>:
 800ca60:	4402      	add	r2, r0
 800ca62:	4603      	mov	r3, r0
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d100      	bne.n	800ca6a <memset+0xa>
 800ca68:	4770      	bx	lr
 800ca6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca6e:	e7f9      	b.n	800ca64 <memset+0x4>

0800ca70 <_free_r>:
 800ca70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca72:	2900      	cmp	r1, #0
 800ca74:	d048      	beq.n	800cb08 <_free_r+0x98>
 800ca76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca7a:	9001      	str	r0, [sp, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ca82:	bfb8      	it	lt
 800ca84:	18e4      	addlt	r4, r4, r3
 800ca86:	f000 fb0f 	bl	800d0a8 <__malloc_lock>
 800ca8a:	4a20      	ldr	r2, [pc, #128]	; (800cb0c <_free_r+0x9c>)
 800ca8c:	9801      	ldr	r0, [sp, #4]
 800ca8e:	6813      	ldr	r3, [r2, #0]
 800ca90:	4615      	mov	r5, r2
 800ca92:	b933      	cbnz	r3, 800caa2 <_free_r+0x32>
 800ca94:	6063      	str	r3, [r4, #4]
 800ca96:	6014      	str	r4, [r2, #0]
 800ca98:	b003      	add	sp, #12
 800ca9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca9e:	f000 bb09 	b.w	800d0b4 <__malloc_unlock>
 800caa2:	42a3      	cmp	r3, r4
 800caa4:	d90b      	bls.n	800cabe <_free_r+0x4e>
 800caa6:	6821      	ldr	r1, [r4, #0]
 800caa8:	1862      	adds	r2, r4, r1
 800caaa:	4293      	cmp	r3, r2
 800caac:	bf04      	itt	eq
 800caae:	681a      	ldreq	r2, [r3, #0]
 800cab0:	685b      	ldreq	r3, [r3, #4]
 800cab2:	6063      	str	r3, [r4, #4]
 800cab4:	bf04      	itt	eq
 800cab6:	1852      	addeq	r2, r2, r1
 800cab8:	6022      	streq	r2, [r4, #0]
 800caba:	602c      	str	r4, [r5, #0]
 800cabc:	e7ec      	b.n	800ca98 <_free_r+0x28>
 800cabe:	461a      	mov	r2, r3
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	b10b      	cbz	r3, 800cac8 <_free_r+0x58>
 800cac4:	42a3      	cmp	r3, r4
 800cac6:	d9fa      	bls.n	800cabe <_free_r+0x4e>
 800cac8:	6811      	ldr	r1, [r2, #0]
 800caca:	1855      	adds	r5, r2, r1
 800cacc:	42a5      	cmp	r5, r4
 800cace:	d10b      	bne.n	800cae8 <_free_r+0x78>
 800cad0:	6824      	ldr	r4, [r4, #0]
 800cad2:	4421      	add	r1, r4
 800cad4:	1854      	adds	r4, r2, r1
 800cad6:	42a3      	cmp	r3, r4
 800cad8:	6011      	str	r1, [r2, #0]
 800cada:	d1dd      	bne.n	800ca98 <_free_r+0x28>
 800cadc:	681c      	ldr	r4, [r3, #0]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	6053      	str	r3, [r2, #4]
 800cae2:	4421      	add	r1, r4
 800cae4:	6011      	str	r1, [r2, #0]
 800cae6:	e7d7      	b.n	800ca98 <_free_r+0x28>
 800cae8:	d902      	bls.n	800caf0 <_free_r+0x80>
 800caea:	230c      	movs	r3, #12
 800caec:	6003      	str	r3, [r0, #0]
 800caee:	e7d3      	b.n	800ca98 <_free_r+0x28>
 800caf0:	6825      	ldr	r5, [r4, #0]
 800caf2:	1961      	adds	r1, r4, r5
 800caf4:	428b      	cmp	r3, r1
 800caf6:	bf04      	itt	eq
 800caf8:	6819      	ldreq	r1, [r3, #0]
 800cafa:	685b      	ldreq	r3, [r3, #4]
 800cafc:	6063      	str	r3, [r4, #4]
 800cafe:	bf04      	itt	eq
 800cb00:	1949      	addeq	r1, r1, r5
 800cb02:	6021      	streq	r1, [r4, #0]
 800cb04:	6054      	str	r4, [r2, #4]
 800cb06:	e7c7      	b.n	800ca98 <_free_r+0x28>
 800cb08:	b003      	add	sp, #12
 800cb0a:	bd30      	pop	{r4, r5, pc}
 800cb0c:	20002064 	.word	0x20002064

0800cb10 <_malloc_r>:
 800cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb12:	1ccd      	adds	r5, r1, #3
 800cb14:	f025 0503 	bic.w	r5, r5, #3
 800cb18:	3508      	adds	r5, #8
 800cb1a:	2d0c      	cmp	r5, #12
 800cb1c:	bf38      	it	cc
 800cb1e:	250c      	movcc	r5, #12
 800cb20:	2d00      	cmp	r5, #0
 800cb22:	4606      	mov	r6, r0
 800cb24:	db01      	blt.n	800cb2a <_malloc_r+0x1a>
 800cb26:	42a9      	cmp	r1, r5
 800cb28:	d903      	bls.n	800cb32 <_malloc_r+0x22>
 800cb2a:	230c      	movs	r3, #12
 800cb2c:	6033      	str	r3, [r6, #0]
 800cb2e:	2000      	movs	r0, #0
 800cb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb32:	f000 fab9 	bl	800d0a8 <__malloc_lock>
 800cb36:	4921      	ldr	r1, [pc, #132]	; (800cbbc <_malloc_r+0xac>)
 800cb38:	680a      	ldr	r2, [r1, #0]
 800cb3a:	4614      	mov	r4, r2
 800cb3c:	b99c      	cbnz	r4, 800cb66 <_malloc_r+0x56>
 800cb3e:	4f20      	ldr	r7, [pc, #128]	; (800cbc0 <_malloc_r+0xb0>)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	b923      	cbnz	r3, 800cb4e <_malloc_r+0x3e>
 800cb44:	4621      	mov	r1, r4
 800cb46:	4630      	mov	r0, r6
 800cb48:	f000 f914 	bl	800cd74 <_sbrk_r>
 800cb4c:	6038      	str	r0, [r7, #0]
 800cb4e:	4629      	mov	r1, r5
 800cb50:	4630      	mov	r0, r6
 800cb52:	f000 f90f 	bl	800cd74 <_sbrk_r>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	d123      	bne.n	800cba2 <_malloc_r+0x92>
 800cb5a:	230c      	movs	r3, #12
 800cb5c:	6033      	str	r3, [r6, #0]
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f000 faa8 	bl	800d0b4 <__malloc_unlock>
 800cb64:	e7e3      	b.n	800cb2e <_malloc_r+0x1e>
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	1b5b      	subs	r3, r3, r5
 800cb6a:	d417      	bmi.n	800cb9c <_malloc_r+0x8c>
 800cb6c:	2b0b      	cmp	r3, #11
 800cb6e:	d903      	bls.n	800cb78 <_malloc_r+0x68>
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	441c      	add	r4, r3
 800cb74:	6025      	str	r5, [r4, #0]
 800cb76:	e004      	b.n	800cb82 <_malloc_r+0x72>
 800cb78:	6863      	ldr	r3, [r4, #4]
 800cb7a:	42a2      	cmp	r2, r4
 800cb7c:	bf0c      	ite	eq
 800cb7e:	600b      	streq	r3, [r1, #0]
 800cb80:	6053      	strne	r3, [r2, #4]
 800cb82:	4630      	mov	r0, r6
 800cb84:	f000 fa96 	bl	800d0b4 <__malloc_unlock>
 800cb88:	f104 000b 	add.w	r0, r4, #11
 800cb8c:	1d23      	adds	r3, r4, #4
 800cb8e:	f020 0007 	bic.w	r0, r0, #7
 800cb92:	1ac2      	subs	r2, r0, r3
 800cb94:	d0cc      	beq.n	800cb30 <_malloc_r+0x20>
 800cb96:	1a1b      	subs	r3, r3, r0
 800cb98:	50a3      	str	r3, [r4, r2]
 800cb9a:	e7c9      	b.n	800cb30 <_malloc_r+0x20>
 800cb9c:	4622      	mov	r2, r4
 800cb9e:	6864      	ldr	r4, [r4, #4]
 800cba0:	e7cc      	b.n	800cb3c <_malloc_r+0x2c>
 800cba2:	1cc4      	adds	r4, r0, #3
 800cba4:	f024 0403 	bic.w	r4, r4, #3
 800cba8:	42a0      	cmp	r0, r4
 800cbaa:	d0e3      	beq.n	800cb74 <_malloc_r+0x64>
 800cbac:	1a21      	subs	r1, r4, r0
 800cbae:	4630      	mov	r0, r6
 800cbb0:	f000 f8e0 	bl	800cd74 <_sbrk_r>
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	d1dd      	bne.n	800cb74 <_malloc_r+0x64>
 800cbb8:	e7cf      	b.n	800cb5a <_malloc_r+0x4a>
 800cbba:	bf00      	nop
 800cbbc:	20002064 	.word	0x20002064
 800cbc0:	20002068 	.word	0x20002068

0800cbc4 <srand>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4b10      	ldr	r3, [pc, #64]	; (800cc08 <srand+0x44>)
 800cbc8:	681d      	ldr	r5, [r3, #0]
 800cbca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800cbcc:	4604      	mov	r4, r0
 800cbce:	b9b3      	cbnz	r3, 800cbfe <srand+0x3a>
 800cbd0:	2018      	movs	r0, #24
 800cbd2:	f7ff ff2f 	bl	800ca34 <malloc>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	63a8      	str	r0, [r5, #56]	; 0x38
 800cbda:	b920      	cbnz	r0, 800cbe6 <srand+0x22>
 800cbdc:	4b0b      	ldr	r3, [pc, #44]	; (800cc0c <srand+0x48>)
 800cbde:	480c      	ldr	r0, [pc, #48]	; (800cc10 <srand+0x4c>)
 800cbe0:	2142      	movs	r1, #66	; 0x42
 800cbe2:	f000 f94d 	bl	800ce80 <__assert_func>
 800cbe6:	490b      	ldr	r1, [pc, #44]	; (800cc14 <srand+0x50>)
 800cbe8:	4b0b      	ldr	r3, [pc, #44]	; (800cc18 <srand+0x54>)
 800cbea:	e9c0 1300 	strd	r1, r3, [r0]
 800cbee:	4b0b      	ldr	r3, [pc, #44]	; (800cc1c <srand+0x58>)
 800cbf0:	6083      	str	r3, [r0, #8]
 800cbf2:	230b      	movs	r3, #11
 800cbf4:	8183      	strh	r3, [r0, #12]
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cbfe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800cc00:	2200      	movs	r2, #0
 800cc02:	611c      	str	r4, [r3, #16]
 800cc04:	615a      	str	r2, [r3, #20]
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
 800cc08:	20000644 	.word	0x20000644
 800cc0c:	080407d8 	.word	0x080407d8
 800cc10:	080407ef 	.word	0x080407ef
 800cc14:	abcd330e 	.word	0xabcd330e
 800cc18:	e66d1234 	.word	0xe66d1234
 800cc1c:	0005deec 	.word	0x0005deec

0800cc20 <rand>:
 800cc20:	4b17      	ldr	r3, [pc, #92]	; (800cc80 <rand+0x60>)
 800cc22:	b510      	push	{r4, lr}
 800cc24:	681c      	ldr	r4, [r3, #0]
 800cc26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc28:	b9b3      	cbnz	r3, 800cc58 <rand+0x38>
 800cc2a:	2018      	movs	r0, #24
 800cc2c:	f7ff ff02 	bl	800ca34 <malloc>
 800cc30:	63a0      	str	r0, [r4, #56]	; 0x38
 800cc32:	b928      	cbnz	r0, 800cc40 <rand+0x20>
 800cc34:	4602      	mov	r2, r0
 800cc36:	4b13      	ldr	r3, [pc, #76]	; (800cc84 <rand+0x64>)
 800cc38:	4813      	ldr	r0, [pc, #76]	; (800cc88 <rand+0x68>)
 800cc3a:	214e      	movs	r1, #78	; 0x4e
 800cc3c:	f000 f920 	bl	800ce80 <__assert_func>
 800cc40:	4a12      	ldr	r2, [pc, #72]	; (800cc8c <rand+0x6c>)
 800cc42:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <rand+0x70>)
 800cc44:	e9c0 2300 	strd	r2, r3, [r0]
 800cc48:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <rand+0x74>)
 800cc4a:	6083      	str	r3, [r0, #8]
 800cc4c:	230b      	movs	r3, #11
 800cc4e:	8183      	strh	r3, [r0, #12]
 800cc50:	2201      	movs	r2, #1
 800cc52:	2300      	movs	r3, #0
 800cc54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cc58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cc5a:	480f      	ldr	r0, [pc, #60]	; (800cc98 <rand+0x78>)
 800cc5c:	690a      	ldr	r2, [r1, #16]
 800cc5e:	694b      	ldr	r3, [r1, #20]
 800cc60:	4c0e      	ldr	r4, [pc, #56]	; (800cc9c <rand+0x7c>)
 800cc62:	4350      	muls	r0, r2
 800cc64:	fb04 0003 	mla	r0, r4, r3, r0
 800cc68:	fba2 3404 	umull	r3, r4, r2, r4
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	4404      	add	r4, r0
 800cc70:	f144 0000 	adc.w	r0, r4, #0
 800cc74:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800cc78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cc7c:	bd10      	pop	{r4, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000644 	.word	0x20000644
 800cc84:	080407d8 	.word	0x080407d8
 800cc88:	080407ef 	.word	0x080407ef
 800cc8c:	abcd330e 	.word	0xabcd330e
 800cc90:	e66d1234 	.word	0xe66d1234
 800cc94:	0005deec 	.word	0x0005deec
 800cc98:	5851f42d 	.word	0x5851f42d
 800cc9c:	4c957f2d 	.word	0x4c957f2d

0800cca0 <cleanup_glue>:
 800cca0:	b538      	push	{r3, r4, r5, lr}
 800cca2:	460c      	mov	r4, r1
 800cca4:	6809      	ldr	r1, [r1, #0]
 800cca6:	4605      	mov	r5, r0
 800cca8:	b109      	cbz	r1, 800ccae <cleanup_glue+0xe>
 800ccaa:	f7ff fff9 	bl	800cca0 <cleanup_glue>
 800ccae:	4621      	mov	r1, r4
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccb6:	f7ff bedb 	b.w	800ca70 <_free_r>
	...

0800ccbc <_reclaim_reent>:
 800ccbc:	4b2c      	ldr	r3, [pc, #176]	; (800cd70 <_reclaim_reent+0xb4>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4283      	cmp	r3, r0
 800ccc2:	b570      	push	{r4, r5, r6, lr}
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	d051      	beq.n	800cd6c <_reclaim_reent+0xb0>
 800ccc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ccca:	b143      	cbz	r3, 800ccde <_reclaim_reent+0x22>
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d14a      	bne.n	800cd68 <_reclaim_reent+0xac>
 800ccd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccd4:	6819      	ldr	r1, [r3, #0]
 800ccd6:	b111      	cbz	r1, 800ccde <_reclaim_reent+0x22>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f7ff fec9 	bl	800ca70 <_free_r>
 800ccde:	6961      	ldr	r1, [r4, #20]
 800cce0:	b111      	cbz	r1, 800cce8 <_reclaim_reent+0x2c>
 800cce2:	4620      	mov	r0, r4
 800cce4:	f7ff fec4 	bl	800ca70 <_free_r>
 800cce8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ccea:	b111      	cbz	r1, 800ccf2 <_reclaim_reent+0x36>
 800ccec:	4620      	mov	r0, r4
 800ccee:	f7ff febf 	bl	800ca70 <_free_r>
 800ccf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ccf4:	b111      	cbz	r1, 800ccfc <_reclaim_reent+0x40>
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f7ff feba 	bl	800ca70 <_free_r>
 800ccfc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ccfe:	b111      	cbz	r1, 800cd06 <_reclaim_reent+0x4a>
 800cd00:	4620      	mov	r0, r4
 800cd02:	f7ff feb5 	bl	800ca70 <_free_r>
 800cd06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cd08:	b111      	cbz	r1, 800cd10 <_reclaim_reent+0x54>
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f7ff feb0 	bl	800ca70 <_free_r>
 800cd10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cd12:	b111      	cbz	r1, 800cd1a <_reclaim_reent+0x5e>
 800cd14:	4620      	mov	r0, r4
 800cd16:	f7ff feab 	bl	800ca70 <_free_r>
 800cd1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cd1c:	b111      	cbz	r1, 800cd24 <_reclaim_reent+0x68>
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f7ff fea6 	bl	800ca70 <_free_r>
 800cd24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd26:	b111      	cbz	r1, 800cd2e <_reclaim_reent+0x72>
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f7ff fea1 	bl	800ca70 <_free_r>
 800cd2e:	69a3      	ldr	r3, [r4, #24]
 800cd30:	b1e3      	cbz	r3, 800cd6c <_reclaim_reent+0xb0>
 800cd32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd34:	4620      	mov	r0, r4
 800cd36:	4798      	blx	r3
 800cd38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cd3a:	b1b9      	cbz	r1, 800cd6c <_reclaim_reent+0xb0>
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd42:	f7ff bfad 	b.w	800cca0 <cleanup_glue>
 800cd46:	5949      	ldr	r1, [r1, r5]
 800cd48:	b941      	cbnz	r1, 800cd5c <_reclaim_reent+0xa0>
 800cd4a:	3504      	adds	r5, #4
 800cd4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd4e:	2d80      	cmp	r5, #128	; 0x80
 800cd50:	68d9      	ldr	r1, [r3, #12]
 800cd52:	d1f8      	bne.n	800cd46 <_reclaim_reent+0x8a>
 800cd54:	4620      	mov	r0, r4
 800cd56:	f7ff fe8b 	bl	800ca70 <_free_r>
 800cd5a:	e7ba      	b.n	800ccd2 <_reclaim_reent+0x16>
 800cd5c:	680e      	ldr	r6, [r1, #0]
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7ff fe86 	bl	800ca70 <_free_r>
 800cd64:	4631      	mov	r1, r6
 800cd66:	e7ef      	b.n	800cd48 <_reclaim_reent+0x8c>
 800cd68:	2500      	movs	r5, #0
 800cd6a:	e7ef      	b.n	800cd4c <_reclaim_reent+0x90>
 800cd6c:	bd70      	pop	{r4, r5, r6, pc}
 800cd6e:	bf00      	nop
 800cd70:	20000644 	.word	0x20000644

0800cd74 <_sbrk_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d06      	ldr	r5, [pc, #24]	; (800cd90 <_sbrk_r+0x1c>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	602b      	str	r3, [r5, #0]
 800cd80:	f7fe fcbe 	bl	800b700 <_sbrk>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	d102      	bne.n	800cd8e <_sbrk_r+0x1a>
 800cd88:	682b      	ldr	r3, [r5, #0]
 800cd8a:	b103      	cbz	r3, 800cd8e <_sbrk_r+0x1a>
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
 800cd90:	2001aac8 	.word	0x2001aac8

0800cd94 <siprintf>:
 800cd94:	b40e      	push	{r1, r2, r3}
 800cd96:	b500      	push	{lr}
 800cd98:	b09c      	sub	sp, #112	; 0x70
 800cd9a:	ab1d      	add	r3, sp, #116	; 0x74
 800cd9c:	9002      	str	r0, [sp, #8]
 800cd9e:	9006      	str	r0, [sp, #24]
 800cda0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cda4:	4809      	ldr	r0, [pc, #36]	; (800cdcc <siprintf+0x38>)
 800cda6:	9107      	str	r1, [sp, #28]
 800cda8:	9104      	str	r1, [sp, #16]
 800cdaa:	4909      	ldr	r1, [pc, #36]	; (800cdd0 <siprintf+0x3c>)
 800cdac:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdb0:	9105      	str	r1, [sp, #20]
 800cdb2:	6800      	ldr	r0, [r0, #0]
 800cdb4:	9301      	str	r3, [sp, #4]
 800cdb6:	a902      	add	r1, sp, #8
 800cdb8:	f000 f9de 	bl	800d178 <_svfiprintf_r>
 800cdbc:	9b02      	ldr	r3, [sp, #8]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	701a      	strb	r2, [r3, #0]
 800cdc2:	b01c      	add	sp, #112	; 0x70
 800cdc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdc8:	b003      	add	sp, #12
 800cdca:	4770      	bx	lr
 800cdcc:	20000644 	.word	0x20000644
 800cdd0:	ffff0208 	.word	0xffff0208

0800cdd4 <__sread>:
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cddc:	f000 fdba 	bl	800d954 <_read_r>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	bfab      	itete	ge
 800cde4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cde6:	89a3      	ldrhlt	r3, [r4, #12]
 800cde8:	181b      	addge	r3, r3, r0
 800cdea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdee:	bfac      	ite	ge
 800cdf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdf2:	81a3      	strhlt	r3, [r4, #12]
 800cdf4:	bd10      	pop	{r4, pc}

0800cdf6 <__swrite>:
 800cdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfa:	461f      	mov	r7, r3
 800cdfc:	898b      	ldrh	r3, [r1, #12]
 800cdfe:	05db      	lsls	r3, r3, #23
 800ce00:	4605      	mov	r5, r0
 800ce02:	460c      	mov	r4, r1
 800ce04:	4616      	mov	r6, r2
 800ce06:	d505      	bpl.n	800ce14 <__swrite+0x1e>
 800ce08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f000 f938 	bl	800d084 <_lseek_r>
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce1e:	81a3      	strh	r3, [r4, #12]
 800ce20:	4632      	mov	r2, r6
 800ce22:	463b      	mov	r3, r7
 800ce24:	4628      	mov	r0, r5
 800ce26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce2a:	f000 b817 	b.w	800ce5c <_write_r>

0800ce2e <__sseek>:
 800ce2e:	b510      	push	{r4, lr}
 800ce30:	460c      	mov	r4, r1
 800ce32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce36:	f000 f925 	bl	800d084 <_lseek_r>
 800ce3a:	1c43      	adds	r3, r0, #1
 800ce3c:	89a3      	ldrh	r3, [r4, #12]
 800ce3e:	bf15      	itete	ne
 800ce40:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce4a:	81a3      	strheq	r3, [r4, #12]
 800ce4c:	bf18      	it	ne
 800ce4e:	81a3      	strhne	r3, [r4, #12]
 800ce50:	bd10      	pop	{r4, pc}

0800ce52 <__sclose>:
 800ce52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce56:	f000 b831 	b.w	800cebc <_close_r>
	...

0800ce5c <_write_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d07      	ldr	r5, [pc, #28]	; (800ce7c <_write_r+0x20>)
 800ce60:	4604      	mov	r4, r0
 800ce62:	4608      	mov	r0, r1
 800ce64:	4611      	mov	r1, r2
 800ce66:	2200      	movs	r2, #0
 800ce68:	602a      	str	r2, [r5, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	f7fe fbf7 	bl	800b65e <_write>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d102      	bne.n	800ce7a <_write_r+0x1e>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b103      	cbz	r3, 800ce7a <_write_r+0x1e>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	2001aac8 	.word	0x2001aac8

0800ce80 <__assert_func>:
 800ce80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce82:	4614      	mov	r4, r2
 800ce84:	461a      	mov	r2, r3
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <__assert_func+0x2c>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	68d8      	ldr	r0, [r3, #12]
 800ce8e:	b14c      	cbz	r4, 800cea4 <__assert_func+0x24>
 800ce90:	4b07      	ldr	r3, [pc, #28]	; (800ceb0 <__assert_func+0x30>)
 800ce92:	9100      	str	r1, [sp, #0]
 800ce94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce98:	4906      	ldr	r1, [pc, #24]	; (800ceb4 <__assert_func+0x34>)
 800ce9a:	462b      	mov	r3, r5
 800ce9c:	f000 f8e0 	bl	800d060 <fiprintf>
 800cea0:	f000 fe2a 	bl	800daf8 <abort>
 800cea4:	4b04      	ldr	r3, [pc, #16]	; (800ceb8 <__assert_func+0x38>)
 800cea6:	461c      	mov	r4, r3
 800cea8:	e7f3      	b.n	800ce92 <__assert_func+0x12>
 800ceaa:	bf00      	nop
 800ceac:	20000644 	.word	0x20000644
 800ceb0:	0804084e 	.word	0x0804084e
 800ceb4:	0804085b 	.word	0x0804085b
 800ceb8:	08040889 	.word	0x08040889

0800cebc <_close_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d06      	ldr	r5, [pc, #24]	; (800ced8 <_close_r+0x1c>)
 800cec0:	2300      	movs	r3, #0
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	602b      	str	r3, [r5, #0]
 800cec8:	f7fe fbe5 	bl	800b696 <_close>
 800cecc:	1c43      	adds	r3, r0, #1
 800cece:	d102      	bne.n	800ced6 <_close_r+0x1a>
 800ced0:	682b      	ldr	r3, [r5, #0]
 800ced2:	b103      	cbz	r3, 800ced6 <_close_r+0x1a>
 800ced4:	6023      	str	r3, [r4, #0]
 800ced6:	bd38      	pop	{r3, r4, r5, pc}
 800ced8:	2001aac8 	.word	0x2001aac8

0800cedc <__sflush_r>:
 800cedc:	898a      	ldrh	r2, [r1, #12]
 800cede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee2:	4605      	mov	r5, r0
 800cee4:	0710      	lsls	r0, r2, #28
 800cee6:	460c      	mov	r4, r1
 800cee8:	d458      	bmi.n	800cf9c <__sflush_r+0xc0>
 800ceea:	684b      	ldr	r3, [r1, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	dc05      	bgt.n	800cefc <__sflush_r+0x20>
 800cef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	dc02      	bgt.n	800cefc <__sflush_r+0x20>
 800cef6:	2000      	movs	r0, #0
 800cef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cefc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cefe:	2e00      	cmp	r6, #0
 800cf00:	d0f9      	beq.n	800cef6 <__sflush_r+0x1a>
 800cf02:	2300      	movs	r3, #0
 800cf04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf08:	682f      	ldr	r7, [r5, #0]
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	d032      	beq.n	800cf74 <__sflush_r+0x98>
 800cf0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	075a      	lsls	r2, r3, #29
 800cf14:	d505      	bpl.n	800cf22 <__sflush_r+0x46>
 800cf16:	6863      	ldr	r3, [r4, #4]
 800cf18:	1ac0      	subs	r0, r0, r3
 800cf1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf1c:	b10b      	cbz	r3, 800cf22 <__sflush_r+0x46>
 800cf1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf20:	1ac0      	subs	r0, r0, r3
 800cf22:	2300      	movs	r3, #0
 800cf24:	4602      	mov	r2, r0
 800cf26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf28:	6a21      	ldr	r1, [r4, #32]
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b0      	blx	r6
 800cf2e:	1c43      	adds	r3, r0, #1
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	d106      	bne.n	800cf42 <__sflush_r+0x66>
 800cf34:	6829      	ldr	r1, [r5, #0]
 800cf36:	291d      	cmp	r1, #29
 800cf38:	d82c      	bhi.n	800cf94 <__sflush_r+0xb8>
 800cf3a:	4a2a      	ldr	r2, [pc, #168]	; (800cfe4 <__sflush_r+0x108>)
 800cf3c:	40ca      	lsrs	r2, r1
 800cf3e:	07d6      	lsls	r6, r2, #31
 800cf40:	d528      	bpl.n	800cf94 <__sflush_r+0xb8>
 800cf42:	2200      	movs	r2, #0
 800cf44:	6062      	str	r2, [r4, #4]
 800cf46:	04d9      	lsls	r1, r3, #19
 800cf48:	6922      	ldr	r2, [r4, #16]
 800cf4a:	6022      	str	r2, [r4, #0]
 800cf4c:	d504      	bpl.n	800cf58 <__sflush_r+0x7c>
 800cf4e:	1c42      	adds	r2, r0, #1
 800cf50:	d101      	bne.n	800cf56 <__sflush_r+0x7a>
 800cf52:	682b      	ldr	r3, [r5, #0]
 800cf54:	b903      	cbnz	r3, 800cf58 <__sflush_r+0x7c>
 800cf56:	6560      	str	r0, [r4, #84]	; 0x54
 800cf58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf5a:	602f      	str	r7, [r5, #0]
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	d0ca      	beq.n	800cef6 <__sflush_r+0x1a>
 800cf60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf64:	4299      	cmp	r1, r3
 800cf66:	d002      	beq.n	800cf6e <__sflush_r+0x92>
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f7ff fd81 	bl	800ca70 <_free_r>
 800cf6e:	2000      	movs	r0, #0
 800cf70:	6360      	str	r0, [r4, #52]	; 0x34
 800cf72:	e7c1      	b.n	800cef8 <__sflush_r+0x1c>
 800cf74:	6a21      	ldr	r1, [r4, #32]
 800cf76:	2301      	movs	r3, #1
 800cf78:	4628      	mov	r0, r5
 800cf7a:	47b0      	blx	r6
 800cf7c:	1c41      	adds	r1, r0, #1
 800cf7e:	d1c7      	bne.n	800cf10 <__sflush_r+0x34>
 800cf80:	682b      	ldr	r3, [r5, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0c4      	beq.n	800cf10 <__sflush_r+0x34>
 800cf86:	2b1d      	cmp	r3, #29
 800cf88:	d001      	beq.n	800cf8e <__sflush_r+0xb2>
 800cf8a:	2b16      	cmp	r3, #22
 800cf8c:	d101      	bne.n	800cf92 <__sflush_r+0xb6>
 800cf8e:	602f      	str	r7, [r5, #0]
 800cf90:	e7b1      	b.n	800cef6 <__sflush_r+0x1a>
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf98:	81a3      	strh	r3, [r4, #12]
 800cf9a:	e7ad      	b.n	800cef8 <__sflush_r+0x1c>
 800cf9c:	690f      	ldr	r7, [r1, #16]
 800cf9e:	2f00      	cmp	r7, #0
 800cfa0:	d0a9      	beq.n	800cef6 <__sflush_r+0x1a>
 800cfa2:	0793      	lsls	r3, r2, #30
 800cfa4:	680e      	ldr	r6, [r1, #0]
 800cfa6:	bf08      	it	eq
 800cfa8:	694b      	ldreq	r3, [r1, #20]
 800cfaa:	600f      	str	r7, [r1, #0]
 800cfac:	bf18      	it	ne
 800cfae:	2300      	movne	r3, #0
 800cfb0:	eba6 0807 	sub.w	r8, r6, r7
 800cfb4:	608b      	str	r3, [r1, #8]
 800cfb6:	f1b8 0f00 	cmp.w	r8, #0
 800cfba:	dd9c      	ble.n	800cef6 <__sflush_r+0x1a>
 800cfbc:	6a21      	ldr	r1, [r4, #32]
 800cfbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfc0:	4643      	mov	r3, r8
 800cfc2:	463a      	mov	r2, r7
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	47b0      	blx	r6
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	dc06      	bgt.n	800cfda <__sflush_r+0xfe>
 800cfcc:	89a3      	ldrh	r3, [r4, #12]
 800cfce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd2:	81a3      	strh	r3, [r4, #12]
 800cfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd8:	e78e      	b.n	800cef8 <__sflush_r+0x1c>
 800cfda:	4407      	add	r7, r0
 800cfdc:	eba8 0800 	sub.w	r8, r8, r0
 800cfe0:	e7e9      	b.n	800cfb6 <__sflush_r+0xda>
 800cfe2:	bf00      	nop
 800cfe4:	20400001 	.word	0x20400001

0800cfe8 <_fflush_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	690b      	ldr	r3, [r1, #16]
 800cfec:	4605      	mov	r5, r0
 800cfee:	460c      	mov	r4, r1
 800cff0:	b913      	cbnz	r3, 800cff8 <_fflush_r+0x10>
 800cff2:	2500      	movs	r5, #0
 800cff4:	4628      	mov	r0, r5
 800cff6:	bd38      	pop	{r3, r4, r5, pc}
 800cff8:	b118      	cbz	r0, 800d002 <_fflush_r+0x1a>
 800cffa:	6983      	ldr	r3, [r0, #24]
 800cffc:	b90b      	cbnz	r3, 800d002 <_fflush_r+0x1a>
 800cffe:	f7ff fc53 	bl	800c8a8 <__sinit>
 800d002:	4b14      	ldr	r3, [pc, #80]	; (800d054 <_fflush_r+0x6c>)
 800d004:	429c      	cmp	r4, r3
 800d006:	d11b      	bne.n	800d040 <_fflush_r+0x58>
 800d008:	686c      	ldr	r4, [r5, #4]
 800d00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d0ef      	beq.n	800cff2 <_fflush_r+0xa>
 800d012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d014:	07d0      	lsls	r0, r2, #31
 800d016:	d404      	bmi.n	800d022 <_fflush_r+0x3a>
 800d018:	0599      	lsls	r1, r3, #22
 800d01a:	d402      	bmi.n	800d022 <_fflush_r+0x3a>
 800d01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d01e:	f7ff fd06 	bl	800ca2e <__retarget_lock_acquire_recursive>
 800d022:	4628      	mov	r0, r5
 800d024:	4621      	mov	r1, r4
 800d026:	f7ff ff59 	bl	800cedc <__sflush_r>
 800d02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d02c:	07da      	lsls	r2, r3, #31
 800d02e:	4605      	mov	r5, r0
 800d030:	d4e0      	bmi.n	800cff4 <_fflush_r+0xc>
 800d032:	89a3      	ldrh	r3, [r4, #12]
 800d034:	059b      	lsls	r3, r3, #22
 800d036:	d4dd      	bmi.n	800cff4 <_fflush_r+0xc>
 800d038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d03a:	f7ff fcf9 	bl	800ca30 <__retarget_lock_release_recursive>
 800d03e:	e7d9      	b.n	800cff4 <_fflush_r+0xc>
 800d040:	4b05      	ldr	r3, [pc, #20]	; (800d058 <_fflush_r+0x70>)
 800d042:	429c      	cmp	r4, r3
 800d044:	d101      	bne.n	800d04a <_fflush_r+0x62>
 800d046:	68ac      	ldr	r4, [r5, #8]
 800d048:	e7df      	b.n	800d00a <_fflush_r+0x22>
 800d04a:	4b04      	ldr	r3, [pc, #16]	; (800d05c <_fflush_r+0x74>)
 800d04c:	429c      	cmp	r4, r3
 800d04e:	bf08      	it	eq
 800d050:	68ec      	ldreq	r4, [r5, #12]
 800d052:	e7da      	b.n	800d00a <_fflush_r+0x22>
 800d054:	08040794 	.word	0x08040794
 800d058:	080407b4 	.word	0x080407b4
 800d05c:	08040774 	.word	0x08040774

0800d060 <fiprintf>:
 800d060:	b40e      	push	{r1, r2, r3}
 800d062:	b503      	push	{r0, r1, lr}
 800d064:	4601      	mov	r1, r0
 800d066:	ab03      	add	r3, sp, #12
 800d068:	4805      	ldr	r0, [pc, #20]	; (800d080 <fiprintf+0x20>)
 800d06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06e:	6800      	ldr	r0, [r0, #0]
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	f000 f9ab 	bl	800d3cc <_vfiprintf_r>
 800d076:	b002      	add	sp, #8
 800d078:	f85d eb04 	ldr.w	lr, [sp], #4
 800d07c:	b003      	add	sp, #12
 800d07e:	4770      	bx	lr
 800d080:	20000644 	.word	0x20000644

0800d084 <_lseek_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4d07      	ldr	r5, [pc, #28]	; (800d0a4 <_lseek_r+0x20>)
 800d088:	4604      	mov	r4, r0
 800d08a:	4608      	mov	r0, r1
 800d08c:	4611      	mov	r1, r2
 800d08e:	2200      	movs	r2, #0
 800d090:	602a      	str	r2, [r5, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	f7fe fb26 	bl	800b6e4 <_lseek>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d102      	bne.n	800d0a2 <_lseek_r+0x1e>
 800d09c:	682b      	ldr	r3, [r5, #0]
 800d09e:	b103      	cbz	r3, 800d0a2 <_lseek_r+0x1e>
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	2001aac8 	.word	0x2001aac8

0800d0a8 <__malloc_lock>:
 800d0a8:	4801      	ldr	r0, [pc, #4]	; (800d0b0 <__malloc_lock+0x8>)
 800d0aa:	f7ff bcc0 	b.w	800ca2e <__retarget_lock_acquire_recursive>
 800d0ae:	bf00      	nop
 800d0b0:	2001aac0 	.word	0x2001aac0

0800d0b4 <__malloc_unlock>:
 800d0b4:	4801      	ldr	r0, [pc, #4]	; (800d0bc <__malloc_unlock+0x8>)
 800d0b6:	f7ff bcbb 	b.w	800ca30 <__retarget_lock_release_recursive>
 800d0ba:	bf00      	nop
 800d0bc:	2001aac0 	.word	0x2001aac0

0800d0c0 <__ssputs_r>:
 800d0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c4:	688e      	ldr	r6, [r1, #8]
 800d0c6:	429e      	cmp	r6, r3
 800d0c8:	4682      	mov	sl, r0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	4690      	mov	r8, r2
 800d0ce:	461f      	mov	r7, r3
 800d0d0:	d838      	bhi.n	800d144 <__ssputs_r+0x84>
 800d0d2:	898a      	ldrh	r2, [r1, #12]
 800d0d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0d8:	d032      	beq.n	800d140 <__ssputs_r+0x80>
 800d0da:	6825      	ldr	r5, [r4, #0]
 800d0dc:	6909      	ldr	r1, [r1, #16]
 800d0de:	eba5 0901 	sub.w	r9, r5, r1
 800d0e2:	6965      	ldr	r5, [r4, #20]
 800d0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	444b      	add	r3, r9
 800d0f0:	106d      	asrs	r5, r5, #1
 800d0f2:	429d      	cmp	r5, r3
 800d0f4:	bf38      	it	cc
 800d0f6:	461d      	movcc	r5, r3
 800d0f8:	0553      	lsls	r3, r2, #21
 800d0fa:	d531      	bpl.n	800d160 <__ssputs_r+0xa0>
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	f7ff fd07 	bl	800cb10 <_malloc_r>
 800d102:	4606      	mov	r6, r0
 800d104:	b950      	cbnz	r0, 800d11c <__ssputs_r+0x5c>
 800d106:	230c      	movs	r3, #12
 800d108:	f8ca 3000 	str.w	r3, [sl]
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11c:	6921      	ldr	r1, [r4, #16]
 800d11e:	464a      	mov	r2, r9
 800d120:	f7ff fc90 	bl	800ca44 <memcpy>
 800d124:	89a3      	ldrh	r3, [r4, #12]
 800d126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d12e:	81a3      	strh	r3, [r4, #12]
 800d130:	6126      	str	r6, [r4, #16]
 800d132:	6165      	str	r5, [r4, #20]
 800d134:	444e      	add	r6, r9
 800d136:	eba5 0509 	sub.w	r5, r5, r9
 800d13a:	6026      	str	r6, [r4, #0]
 800d13c:	60a5      	str	r5, [r4, #8]
 800d13e:	463e      	mov	r6, r7
 800d140:	42be      	cmp	r6, r7
 800d142:	d900      	bls.n	800d146 <__ssputs_r+0x86>
 800d144:	463e      	mov	r6, r7
 800d146:	4632      	mov	r2, r6
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	4641      	mov	r1, r8
 800d14c:	f000 fd40 	bl	800dbd0 <memmove>
 800d150:	68a3      	ldr	r3, [r4, #8]
 800d152:	6822      	ldr	r2, [r4, #0]
 800d154:	1b9b      	subs	r3, r3, r6
 800d156:	4432      	add	r2, r6
 800d158:	60a3      	str	r3, [r4, #8]
 800d15a:	6022      	str	r2, [r4, #0]
 800d15c:	2000      	movs	r0, #0
 800d15e:	e7db      	b.n	800d118 <__ssputs_r+0x58>
 800d160:	462a      	mov	r2, r5
 800d162:	f000 fd4f 	bl	800dc04 <_realloc_r>
 800d166:	4606      	mov	r6, r0
 800d168:	2800      	cmp	r0, #0
 800d16a:	d1e1      	bne.n	800d130 <__ssputs_r+0x70>
 800d16c:	6921      	ldr	r1, [r4, #16]
 800d16e:	4650      	mov	r0, sl
 800d170:	f7ff fc7e 	bl	800ca70 <_free_r>
 800d174:	e7c7      	b.n	800d106 <__ssputs_r+0x46>
	...

0800d178 <_svfiprintf_r>:
 800d178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17c:	4698      	mov	r8, r3
 800d17e:	898b      	ldrh	r3, [r1, #12]
 800d180:	061b      	lsls	r3, r3, #24
 800d182:	b09d      	sub	sp, #116	; 0x74
 800d184:	4607      	mov	r7, r0
 800d186:	460d      	mov	r5, r1
 800d188:	4614      	mov	r4, r2
 800d18a:	d50e      	bpl.n	800d1aa <_svfiprintf_r+0x32>
 800d18c:	690b      	ldr	r3, [r1, #16]
 800d18e:	b963      	cbnz	r3, 800d1aa <_svfiprintf_r+0x32>
 800d190:	2140      	movs	r1, #64	; 0x40
 800d192:	f7ff fcbd 	bl	800cb10 <_malloc_r>
 800d196:	6028      	str	r0, [r5, #0]
 800d198:	6128      	str	r0, [r5, #16]
 800d19a:	b920      	cbnz	r0, 800d1a6 <_svfiprintf_r+0x2e>
 800d19c:	230c      	movs	r3, #12
 800d19e:	603b      	str	r3, [r7, #0]
 800d1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a4:	e0d1      	b.n	800d34a <_svfiprintf_r+0x1d2>
 800d1a6:	2340      	movs	r3, #64	; 0x40
 800d1a8:	616b      	str	r3, [r5, #20]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ae:	2320      	movs	r3, #32
 800d1b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1b8:	2330      	movs	r3, #48	; 0x30
 800d1ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d364 <_svfiprintf_r+0x1ec>
 800d1be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1c2:	f04f 0901 	mov.w	r9, #1
 800d1c6:	4623      	mov	r3, r4
 800d1c8:	469a      	mov	sl, r3
 800d1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ce:	b10a      	cbz	r2, 800d1d4 <_svfiprintf_r+0x5c>
 800d1d0:	2a25      	cmp	r2, #37	; 0x25
 800d1d2:	d1f9      	bne.n	800d1c8 <_svfiprintf_r+0x50>
 800d1d4:	ebba 0b04 	subs.w	fp, sl, r4
 800d1d8:	d00b      	beq.n	800d1f2 <_svfiprintf_r+0x7a>
 800d1da:	465b      	mov	r3, fp
 800d1dc:	4622      	mov	r2, r4
 800d1de:	4629      	mov	r1, r5
 800d1e0:	4638      	mov	r0, r7
 800d1e2:	f7ff ff6d 	bl	800d0c0 <__ssputs_r>
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	f000 80aa 	beq.w	800d340 <_svfiprintf_r+0x1c8>
 800d1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1ee:	445a      	add	r2, fp
 800d1f0:	9209      	str	r2, [sp, #36]	; 0x24
 800d1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f000 80a2 	beq.w	800d340 <_svfiprintf_r+0x1c8>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d206:	f10a 0a01 	add.w	sl, sl, #1
 800d20a:	9304      	str	r3, [sp, #16]
 800d20c:	9307      	str	r3, [sp, #28]
 800d20e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d212:	931a      	str	r3, [sp, #104]	; 0x68
 800d214:	4654      	mov	r4, sl
 800d216:	2205      	movs	r2, #5
 800d218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21c:	4851      	ldr	r0, [pc, #324]	; (800d364 <_svfiprintf_r+0x1ec>)
 800d21e:	f7f2 ffef 	bl	8000200 <memchr>
 800d222:	9a04      	ldr	r2, [sp, #16]
 800d224:	b9d8      	cbnz	r0, 800d25e <_svfiprintf_r+0xe6>
 800d226:	06d0      	lsls	r0, r2, #27
 800d228:	bf44      	itt	mi
 800d22a:	2320      	movmi	r3, #32
 800d22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d230:	0711      	lsls	r1, r2, #28
 800d232:	bf44      	itt	mi
 800d234:	232b      	movmi	r3, #43	; 0x2b
 800d236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d23a:	f89a 3000 	ldrb.w	r3, [sl]
 800d23e:	2b2a      	cmp	r3, #42	; 0x2a
 800d240:	d015      	beq.n	800d26e <_svfiprintf_r+0xf6>
 800d242:	9a07      	ldr	r2, [sp, #28]
 800d244:	4654      	mov	r4, sl
 800d246:	2000      	movs	r0, #0
 800d248:	f04f 0c0a 	mov.w	ip, #10
 800d24c:	4621      	mov	r1, r4
 800d24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d252:	3b30      	subs	r3, #48	; 0x30
 800d254:	2b09      	cmp	r3, #9
 800d256:	d94e      	bls.n	800d2f6 <_svfiprintf_r+0x17e>
 800d258:	b1b0      	cbz	r0, 800d288 <_svfiprintf_r+0x110>
 800d25a:	9207      	str	r2, [sp, #28]
 800d25c:	e014      	b.n	800d288 <_svfiprintf_r+0x110>
 800d25e:	eba0 0308 	sub.w	r3, r0, r8
 800d262:	fa09 f303 	lsl.w	r3, r9, r3
 800d266:	4313      	orrs	r3, r2
 800d268:	9304      	str	r3, [sp, #16]
 800d26a:	46a2      	mov	sl, r4
 800d26c:	e7d2      	b.n	800d214 <_svfiprintf_r+0x9c>
 800d26e:	9b03      	ldr	r3, [sp, #12]
 800d270:	1d19      	adds	r1, r3, #4
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	9103      	str	r1, [sp, #12]
 800d276:	2b00      	cmp	r3, #0
 800d278:	bfbb      	ittet	lt
 800d27a:	425b      	neglt	r3, r3
 800d27c:	f042 0202 	orrlt.w	r2, r2, #2
 800d280:	9307      	strge	r3, [sp, #28]
 800d282:	9307      	strlt	r3, [sp, #28]
 800d284:	bfb8      	it	lt
 800d286:	9204      	strlt	r2, [sp, #16]
 800d288:	7823      	ldrb	r3, [r4, #0]
 800d28a:	2b2e      	cmp	r3, #46	; 0x2e
 800d28c:	d10c      	bne.n	800d2a8 <_svfiprintf_r+0x130>
 800d28e:	7863      	ldrb	r3, [r4, #1]
 800d290:	2b2a      	cmp	r3, #42	; 0x2a
 800d292:	d135      	bne.n	800d300 <_svfiprintf_r+0x188>
 800d294:	9b03      	ldr	r3, [sp, #12]
 800d296:	1d1a      	adds	r2, r3, #4
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	9203      	str	r2, [sp, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	bfb8      	it	lt
 800d2a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2a4:	3402      	adds	r4, #2
 800d2a6:	9305      	str	r3, [sp, #20]
 800d2a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d374 <_svfiprintf_r+0x1fc>
 800d2ac:	7821      	ldrb	r1, [r4, #0]
 800d2ae:	2203      	movs	r2, #3
 800d2b0:	4650      	mov	r0, sl
 800d2b2:	f7f2 ffa5 	bl	8000200 <memchr>
 800d2b6:	b140      	cbz	r0, 800d2ca <_svfiprintf_r+0x152>
 800d2b8:	2340      	movs	r3, #64	; 0x40
 800d2ba:	eba0 000a 	sub.w	r0, r0, sl
 800d2be:	fa03 f000 	lsl.w	r0, r3, r0
 800d2c2:	9b04      	ldr	r3, [sp, #16]
 800d2c4:	4303      	orrs	r3, r0
 800d2c6:	3401      	adds	r4, #1
 800d2c8:	9304      	str	r3, [sp, #16]
 800d2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ce:	4826      	ldr	r0, [pc, #152]	; (800d368 <_svfiprintf_r+0x1f0>)
 800d2d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2d4:	2206      	movs	r2, #6
 800d2d6:	f7f2 ff93 	bl	8000200 <memchr>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d038      	beq.n	800d350 <_svfiprintf_r+0x1d8>
 800d2de:	4b23      	ldr	r3, [pc, #140]	; (800d36c <_svfiprintf_r+0x1f4>)
 800d2e0:	bb1b      	cbnz	r3, 800d32a <_svfiprintf_r+0x1b2>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	3307      	adds	r3, #7
 800d2e6:	f023 0307 	bic.w	r3, r3, #7
 800d2ea:	3308      	adds	r3, #8
 800d2ec:	9303      	str	r3, [sp, #12]
 800d2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f0:	4433      	add	r3, r6
 800d2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f4:	e767      	b.n	800d1c6 <_svfiprintf_r+0x4e>
 800d2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	e7a5      	b.n	800d24c <_svfiprintf_r+0xd4>
 800d300:	2300      	movs	r3, #0
 800d302:	3401      	adds	r4, #1
 800d304:	9305      	str	r3, [sp, #20]
 800d306:	4619      	mov	r1, r3
 800d308:	f04f 0c0a 	mov.w	ip, #10
 800d30c:	4620      	mov	r0, r4
 800d30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d312:	3a30      	subs	r2, #48	; 0x30
 800d314:	2a09      	cmp	r2, #9
 800d316:	d903      	bls.n	800d320 <_svfiprintf_r+0x1a8>
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d0c5      	beq.n	800d2a8 <_svfiprintf_r+0x130>
 800d31c:	9105      	str	r1, [sp, #20]
 800d31e:	e7c3      	b.n	800d2a8 <_svfiprintf_r+0x130>
 800d320:	fb0c 2101 	mla	r1, ip, r1, r2
 800d324:	4604      	mov	r4, r0
 800d326:	2301      	movs	r3, #1
 800d328:	e7f0      	b.n	800d30c <_svfiprintf_r+0x194>
 800d32a:	ab03      	add	r3, sp, #12
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	462a      	mov	r2, r5
 800d330:	4b0f      	ldr	r3, [pc, #60]	; (800d370 <_svfiprintf_r+0x1f8>)
 800d332:	a904      	add	r1, sp, #16
 800d334:	4638      	mov	r0, r7
 800d336:	f3af 8000 	nop.w
 800d33a:	1c42      	adds	r2, r0, #1
 800d33c:	4606      	mov	r6, r0
 800d33e:	d1d6      	bne.n	800d2ee <_svfiprintf_r+0x176>
 800d340:	89ab      	ldrh	r3, [r5, #12]
 800d342:	065b      	lsls	r3, r3, #25
 800d344:	f53f af2c 	bmi.w	800d1a0 <_svfiprintf_r+0x28>
 800d348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d34a:	b01d      	add	sp, #116	; 0x74
 800d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d350:	ab03      	add	r3, sp, #12
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	462a      	mov	r2, r5
 800d356:	4b06      	ldr	r3, [pc, #24]	; (800d370 <_svfiprintf_r+0x1f8>)
 800d358:	a904      	add	r1, sp, #16
 800d35a:	4638      	mov	r0, r7
 800d35c:	f000 f9d4 	bl	800d708 <_printf_i>
 800d360:	e7eb      	b.n	800d33a <_svfiprintf_r+0x1c2>
 800d362:	bf00      	nop
 800d364:	0804088a 	.word	0x0804088a
 800d368:	08040894 	.word	0x08040894
 800d36c:	00000000 	.word	0x00000000
 800d370:	0800d0c1 	.word	0x0800d0c1
 800d374:	08040890 	.word	0x08040890

0800d378 <__sfputc_r>:
 800d378:	6893      	ldr	r3, [r2, #8]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	b410      	push	{r4}
 800d380:	6093      	str	r3, [r2, #8]
 800d382:	da08      	bge.n	800d396 <__sfputc_r+0x1e>
 800d384:	6994      	ldr	r4, [r2, #24]
 800d386:	42a3      	cmp	r3, r4
 800d388:	db01      	blt.n	800d38e <__sfputc_r+0x16>
 800d38a:	290a      	cmp	r1, #10
 800d38c:	d103      	bne.n	800d396 <__sfputc_r+0x1e>
 800d38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d392:	f000 baf1 	b.w	800d978 <__swbuf_r>
 800d396:	6813      	ldr	r3, [r2, #0]
 800d398:	1c58      	adds	r0, r3, #1
 800d39a:	6010      	str	r0, [r2, #0]
 800d39c:	7019      	strb	r1, [r3, #0]
 800d39e:	4608      	mov	r0, r1
 800d3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <__sfputs_r>:
 800d3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	460f      	mov	r7, r1
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	18d5      	adds	r5, r2, r3
 800d3b0:	42ac      	cmp	r4, r5
 800d3b2:	d101      	bne.n	800d3b8 <__sfputs_r+0x12>
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	e007      	b.n	800d3c8 <__sfputs_r+0x22>
 800d3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3bc:	463a      	mov	r2, r7
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7ff ffda 	bl	800d378 <__sfputc_r>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d1f3      	bne.n	800d3b0 <__sfputs_r+0xa>
 800d3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3cc <_vfiprintf_r>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	460d      	mov	r5, r1
 800d3d2:	b09d      	sub	sp, #116	; 0x74
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	4698      	mov	r8, r3
 800d3d8:	4606      	mov	r6, r0
 800d3da:	b118      	cbz	r0, 800d3e4 <_vfiprintf_r+0x18>
 800d3dc:	6983      	ldr	r3, [r0, #24]
 800d3de:	b90b      	cbnz	r3, 800d3e4 <_vfiprintf_r+0x18>
 800d3e0:	f7ff fa62 	bl	800c8a8 <__sinit>
 800d3e4:	4b89      	ldr	r3, [pc, #548]	; (800d60c <_vfiprintf_r+0x240>)
 800d3e6:	429d      	cmp	r5, r3
 800d3e8:	d11b      	bne.n	800d422 <_vfiprintf_r+0x56>
 800d3ea:	6875      	ldr	r5, [r6, #4]
 800d3ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3ee:	07d9      	lsls	r1, r3, #31
 800d3f0:	d405      	bmi.n	800d3fe <_vfiprintf_r+0x32>
 800d3f2:	89ab      	ldrh	r3, [r5, #12]
 800d3f4:	059a      	lsls	r2, r3, #22
 800d3f6:	d402      	bmi.n	800d3fe <_vfiprintf_r+0x32>
 800d3f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3fa:	f7ff fb18 	bl	800ca2e <__retarget_lock_acquire_recursive>
 800d3fe:	89ab      	ldrh	r3, [r5, #12]
 800d400:	071b      	lsls	r3, r3, #28
 800d402:	d501      	bpl.n	800d408 <_vfiprintf_r+0x3c>
 800d404:	692b      	ldr	r3, [r5, #16]
 800d406:	b9eb      	cbnz	r3, 800d444 <_vfiprintf_r+0x78>
 800d408:	4629      	mov	r1, r5
 800d40a:	4630      	mov	r0, r6
 800d40c:	f000 fb06 	bl	800da1c <__swsetup_r>
 800d410:	b1c0      	cbz	r0, 800d444 <_vfiprintf_r+0x78>
 800d412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d414:	07dc      	lsls	r4, r3, #31
 800d416:	d50e      	bpl.n	800d436 <_vfiprintf_r+0x6a>
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	b01d      	add	sp, #116	; 0x74
 800d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d422:	4b7b      	ldr	r3, [pc, #492]	; (800d610 <_vfiprintf_r+0x244>)
 800d424:	429d      	cmp	r5, r3
 800d426:	d101      	bne.n	800d42c <_vfiprintf_r+0x60>
 800d428:	68b5      	ldr	r5, [r6, #8]
 800d42a:	e7df      	b.n	800d3ec <_vfiprintf_r+0x20>
 800d42c:	4b79      	ldr	r3, [pc, #484]	; (800d614 <_vfiprintf_r+0x248>)
 800d42e:	429d      	cmp	r5, r3
 800d430:	bf08      	it	eq
 800d432:	68f5      	ldreq	r5, [r6, #12]
 800d434:	e7da      	b.n	800d3ec <_vfiprintf_r+0x20>
 800d436:	89ab      	ldrh	r3, [r5, #12]
 800d438:	0598      	lsls	r0, r3, #22
 800d43a:	d4ed      	bmi.n	800d418 <_vfiprintf_r+0x4c>
 800d43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d43e:	f7ff faf7 	bl	800ca30 <__retarget_lock_release_recursive>
 800d442:	e7e9      	b.n	800d418 <_vfiprintf_r+0x4c>
 800d444:	2300      	movs	r3, #0
 800d446:	9309      	str	r3, [sp, #36]	; 0x24
 800d448:	2320      	movs	r3, #32
 800d44a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d44e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d452:	2330      	movs	r3, #48	; 0x30
 800d454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d618 <_vfiprintf_r+0x24c>
 800d458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d45c:	f04f 0901 	mov.w	r9, #1
 800d460:	4623      	mov	r3, r4
 800d462:	469a      	mov	sl, r3
 800d464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d468:	b10a      	cbz	r2, 800d46e <_vfiprintf_r+0xa2>
 800d46a:	2a25      	cmp	r2, #37	; 0x25
 800d46c:	d1f9      	bne.n	800d462 <_vfiprintf_r+0x96>
 800d46e:	ebba 0b04 	subs.w	fp, sl, r4
 800d472:	d00b      	beq.n	800d48c <_vfiprintf_r+0xc0>
 800d474:	465b      	mov	r3, fp
 800d476:	4622      	mov	r2, r4
 800d478:	4629      	mov	r1, r5
 800d47a:	4630      	mov	r0, r6
 800d47c:	f7ff ff93 	bl	800d3a6 <__sfputs_r>
 800d480:	3001      	adds	r0, #1
 800d482:	f000 80aa 	beq.w	800d5da <_vfiprintf_r+0x20e>
 800d486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d488:	445a      	add	r2, fp
 800d48a:	9209      	str	r2, [sp, #36]	; 0x24
 800d48c:	f89a 3000 	ldrb.w	r3, [sl]
 800d490:	2b00      	cmp	r3, #0
 800d492:	f000 80a2 	beq.w	800d5da <_vfiprintf_r+0x20e>
 800d496:	2300      	movs	r3, #0
 800d498:	f04f 32ff 	mov.w	r2, #4294967295
 800d49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4a0:	f10a 0a01 	add.w	sl, sl, #1
 800d4a4:	9304      	str	r3, [sp, #16]
 800d4a6:	9307      	str	r3, [sp, #28]
 800d4a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4ac:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ae:	4654      	mov	r4, sl
 800d4b0:	2205      	movs	r2, #5
 800d4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b6:	4858      	ldr	r0, [pc, #352]	; (800d618 <_vfiprintf_r+0x24c>)
 800d4b8:	f7f2 fea2 	bl	8000200 <memchr>
 800d4bc:	9a04      	ldr	r2, [sp, #16]
 800d4be:	b9d8      	cbnz	r0, 800d4f8 <_vfiprintf_r+0x12c>
 800d4c0:	06d1      	lsls	r1, r2, #27
 800d4c2:	bf44      	itt	mi
 800d4c4:	2320      	movmi	r3, #32
 800d4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ca:	0713      	lsls	r3, r2, #28
 800d4cc:	bf44      	itt	mi
 800d4ce:	232b      	movmi	r3, #43	; 0x2b
 800d4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4da:	d015      	beq.n	800d508 <_vfiprintf_r+0x13c>
 800d4dc:	9a07      	ldr	r2, [sp, #28]
 800d4de:	4654      	mov	r4, sl
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	f04f 0c0a 	mov.w	ip, #10
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4ec:	3b30      	subs	r3, #48	; 0x30
 800d4ee:	2b09      	cmp	r3, #9
 800d4f0:	d94e      	bls.n	800d590 <_vfiprintf_r+0x1c4>
 800d4f2:	b1b0      	cbz	r0, 800d522 <_vfiprintf_r+0x156>
 800d4f4:	9207      	str	r2, [sp, #28]
 800d4f6:	e014      	b.n	800d522 <_vfiprintf_r+0x156>
 800d4f8:	eba0 0308 	sub.w	r3, r0, r8
 800d4fc:	fa09 f303 	lsl.w	r3, r9, r3
 800d500:	4313      	orrs	r3, r2
 800d502:	9304      	str	r3, [sp, #16]
 800d504:	46a2      	mov	sl, r4
 800d506:	e7d2      	b.n	800d4ae <_vfiprintf_r+0xe2>
 800d508:	9b03      	ldr	r3, [sp, #12]
 800d50a:	1d19      	adds	r1, r3, #4
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	9103      	str	r1, [sp, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	bfbb      	ittet	lt
 800d514:	425b      	neglt	r3, r3
 800d516:	f042 0202 	orrlt.w	r2, r2, #2
 800d51a:	9307      	strge	r3, [sp, #28]
 800d51c:	9307      	strlt	r3, [sp, #28]
 800d51e:	bfb8      	it	lt
 800d520:	9204      	strlt	r2, [sp, #16]
 800d522:	7823      	ldrb	r3, [r4, #0]
 800d524:	2b2e      	cmp	r3, #46	; 0x2e
 800d526:	d10c      	bne.n	800d542 <_vfiprintf_r+0x176>
 800d528:	7863      	ldrb	r3, [r4, #1]
 800d52a:	2b2a      	cmp	r3, #42	; 0x2a
 800d52c:	d135      	bne.n	800d59a <_vfiprintf_r+0x1ce>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	1d1a      	adds	r2, r3, #4
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	9203      	str	r2, [sp, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	bfb8      	it	lt
 800d53a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d53e:	3402      	adds	r4, #2
 800d540:	9305      	str	r3, [sp, #20]
 800d542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d628 <_vfiprintf_r+0x25c>
 800d546:	7821      	ldrb	r1, [r4, #0]
 800d548:	2203      	movs	r2, #3
 800d54a:	4650      	mov	r0, sl
 800d54c:	f7f2 fe58 	bl	8000200 <memchr>
 800d550:	b140      	cbz	r0, 800d564 <_vfiprintf_r+0x198>
 800d552:	2340      	movs	r3, #64	; 0x40
 800d554:	eba0 000a 	sub.w	r0, r0, sl
 800d558:	fa03 f000 	lsl.w	r0, r3, r0
 800d55c:	9b04      	ldr	r3, [sp, #16]
 800d55e:	4303      	orrs	r3, r0
 800d560:	3401      	adds	r4, #1
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d568:	482c      	ldr	r0, [pc, #176]	; (800d61c <_vfiprintf_r+0x250>)
 800d56a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d56e:	2206      	movs	r2, #6
 800d570:	f7f2 fe46 	bl	8000200 <memchr>
 800d574:	2800      	cmp	r0, #0
 800d576:	d03f      	beq.n	800d5f8 <_vfiprintf_r+0x22c>
 800d578:	4b29      	ldr	r3, [pc, #164]	; (800d620 <_vfiprintf_r+0x254>)
 800d57a:	bb1b      	cbnz	r3, 800d5c4 <_vfiprintf_r+0x1f8>
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	3307      	adds	r3, #7
 800d580:	f023 0307 	bic.w	r3, r3, #7
 800d584:	3308      	adds	r3, #8
 800d586:	9303      	str	r3, [sp, #12]
 800d588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58a:	443b      	add	r3, r7
 800d58c:	9309      	str	r3, [sp, #36]	; 0x24
 800d58e:	e767      	b.n	800d460 <_vfiprintf_r+0x94>
 800d590:	fb0c 3202 	mla	r2, ip, r2, r3
 800d594:	460c      	mov	r4, r1
 800d596:	2001      	movs	r0, #1
 800d598:	e7a5      	b.n	800d4e6 <_vfiprintf_r+0x11a>
 800d59a:	2300      	movs	r3, #0
 800d59c:	3401      	adds	r4, #1
 800d59e:	9305      	str	r3, [sp, #20]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f04f 0c0a 	mov.w	ip, #10
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ac:	3a30      	subs	r2, #48	; 0x30
 800d5ae:	2a09      	cmp	r2, #9
 800d5b0:	d903      	bls.n	800d5ba <_vfiprintf_r+0x1ee>
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0c5      	beq.n	800d542 <_vfiprintf_r+0x176>
 800d5b6:	9105      	str	r1, [sp, #20]
 800d5b8:	e7c3      	b.n	800d542 <_vfiprintf_r+0x176>
 800d5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5be:	4604      	mov	r4, r0
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e7f0      	b.n	800d5a6 <_vfiprintf_r+0x1da>
 800d5c4:	ab03      	add	r3, sp, #12
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	4b16      	ldr	r3, [pc, #88]	; (800d624 <_vfiprintf_r+0x258>)
 800d5cc:	a904      	add	r1, sp, #16
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f3af 8000 	nop.w
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	1c78      	adds	r0, r7, #1
 800d5d8:	d1d6      	bne.n	800d588 <_vfiprintf_r+0x1bc>
 800d5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5dc:	07d9      	lsls	r1, r3, #31
 800d5de:	d405      	bmi.n	800d5ec <_vfiprintf_r+0x220>
 800d5e0:	89ab      	ldrh	r3, [r5, #12]
 800d5e2:	059a      	lsls	r2, r3, #22
 800d5e4:	d402      	bmi.n	800d5ec <_vfiprintf_r+0x220>
 800d5e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5e8:	f7ff fa22 	bl	800ca30 <__retarget_lock_release_recursive>
 800d5ec:	89ab      	ldrh	r3, [r5, #12]
 800d5ee:	065b      	lsls	r3, r3, #25
 800d5f0:	f53f af12 	bmi.w	800d418 <_vfiprintf_r+0x4c>
 800d5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5f6:	e711      	b.n	800d41c <_vfiprintf_r+0x50>
 800d5f8:	ab03      	add	r3, sp, #12
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	462a      	mov	r2, r5
 800d5fe:	4b09      	ldr	r3, [pc, #36]	; (800d624 <_vfiprintf_r+0x258>)
 800d600:	a904      	add	r1, sp, #16
 800d602:	4630      	mov	r0, r6
 800d604:	f000 f880 	bl	800d708 <_printf_i>
 800d608:	e7e4      	b.n	800d5d4 <_vfiprintf_r+0x208>
 800d60a:	bf00      	nop
 800d60c:	08040794 	.word	0x08040794
 800d610:	080407b4 	.word	0x080407b4
 800d614:	08040774 	.word	0x08040774
 800d618:	0804088a 	.word	0x0804088a
 800d61c:	08040894 	.word	0x08040894
 800d620:	00000000 	.word	0x00000000
 800d624:	0800d3a7 	.word	0x0800d3a7
 800d628:	08040890 	.word	0x08040890

0800d62c <_printf_common>:
 800d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	4616      	mov	r6, r2
 800d632:	4699      	mov	r9, r3
 800d634:	688a      	ldr	r2, [r1, #8]
 800d636:	690b      	ldr	r3, [r1, #16]
 800d638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d63c:	4293      	cmp	r3, r2
 800d63e:	bfb8      	it	lt
 800d640:	4613      	movlt	r3, r2
 800d642:	6033      	str	r3, [r6, #0]
 800d644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d648:	4607      	mov	r7, r0
 800d64a:	460c      	mov	r4, r1
 800d64c:	b10a      	cbz	r2, 800d652 <_printf_common+0x26>
 800d64e:	3301      	adds	r3, #1
 800d650:	6033      	str	r3, [r6, #0]
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	0699      	lsls	r1, r3, #26
 800d656:	bf42      	ittt	mi
 800d658:	6833      	ldrmi	r3, [r6, #0]
 800d65a:	3302      	addmi	r3, #2
 800d65c:	6033      	strmi	r3, [r6, #0]
 800d65e:	6825      	ldr	r5, [r4, #0]
 800d660:	f015 0506 	ands.w	r5, r5, #6
 800d664:	d106      	bne.n	800d674 <_printf_common+0x48>
 800d666:	f104 0a19 	add.w	sl, r4, #25
 800d66a:	68e3      	ldr	r3, [r4, #12]
 800d66c:	6832      	ldr	r2, [r6, #0]
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	42ab      	cmp	r3, r5
 800d672:	dc26      	bgt.n	800d6c2 <_printf_common+0x96>
 800d674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d678:	1e13      	subs	r3, r2, #0
 800d67a:	6822      	ldr	r2, [r4, #0]
 800d67c:	bf18      	it	ne
 800d67e:	2301      	movne	r3, #1
 800d680:	0692      	lsls	r2, r2, #26
 800d682:	d42b      	bmi.n	800d6dc <_printf_common+0xb0>
 800d684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d688:	4649      	mov	r1, r9
 800d68a:	4638      	mov	r0, r7
 800d68c:	47c0      	blx	r8
 800d68e:	3001      	adds	r0, #1
 800d690:	d01e      	beq.n	800d6d0 <_printf_common+0xa4>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	68e5      	ldr	r5, [r4, #12]
 800d696:	6832      	ldr	r2, [r6, #0]
 800d698:	f003 0306 	and.w	r3, r3, #6
 800d69c:	2b04      	cmp	r3, #4
 800d69e:	bf08      	it	eq
 800d6a0:	1aad      	subeq	r5, r5, r2
 800d6a2:	68a3      	ldr	r3, [r4, #8]
 800d6a4:	6922      	ldr	r2, [r4, #16]
 800d6a6:	bf0c      	ite	eq
 800d6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6ac:	2500      	movne	r5, #0
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	bfc4      	itt	gt
 800d6b2:	1a9b      	subgt	r3, r3, r2
 800d6b4:	18ed      	addgt	r5, r5, r3
 800d6b6:	2600      	movs	r6, #0
 800d6b8:	341a      	adds	r4, #26
 800d6ba:	42b5      	cmp	r5, r6
 800d6bc:	d11a      	bne.n	800d6f4 <_printf_common+0xc8>
 800d6be:	2000      	movs	r0, #0
 800d6c0:	e008      	b.n	800d6d4 <_printf_common+0xa8>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4652      	mov	r2, sl
 800d6c6:	4649      	mov	r1, r9
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	47c0      	blx	r8
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d103      	bne.n	800d6d8 <_printf_common+0xac>
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d8:	3501      	adds	r5, #1
 800d6da:	e7c6      	b.n	800d66a <_printf_common+0x3e>
 800d6dc:	18e1      	adds	r1, r4, r3
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	2030      	movs	r0, #48	; 0x30
 800d6e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6e6:	4422      	add	r2, r4
 800d6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6f0:	3302      	adds	r3, #2
 800d6f2:	e7c7      	b.n	800d684 <_printf_common+0x58>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	47c0      	blx	r8
 800d6fe:	3001      	adds	r0, #1
 800d700:	d0e6      	beq.n	800d6d0 <_printf_common+0xa4>
 800d702:	3601      	adds	r6, #1
 800d704:	e7d9      	b.n	800d6ba <_printf_common+0x8e>
	...

0800d708 <_printf_i>:
 800d708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	460c      	mov	r4, r1
 800d70e:	4691      	mov	r9, r2
 800d710:	7e27      	ldrb	r7, [r4, #24]
 800d712:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d714:	2f78      	cmp	r7, #120	; 0x78
 800d716:	4680      	mov	r8, r0
 800d718:	469a      	mov	sl, r3
 800d71a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d71e:	d807      	bhi.n	800d730 <_printf_i+0x28>
 800d720:	2f62      	cmp	r7, #98	; 0x62
 800d722:	d80a      	bhi.n	800d73a <_printf_i+0x32>
 800d724:	2f00      	cmp	r7, #0
 800d726:	f000 80d8 	beq.w	800d8da <_printf_i+0x1d2>
 800d72a:	2f58      	cmp	r7, #88	; 0x58
 800d72c:	f000 80a3 	beq.w	800d876 <_printf_i+0x16e>
 800d730:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d738:	e03a      	b.n	800d7b0 <_printf_i+0xa8>
 800d73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d73e:	2b15      	cmp	r3, #21
 800d740:	d8f6      	bhi.n	800d730 <_printf_i+0x28>
 800d742:	a001      	add	r0, pc, #4	; (adr r0, 800d748 <_printf_i+0x40>)
 800d744:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d748:	0800d7a1 	.word	0x0800d7a1
 800d74c:	0800d7b5 	.word	0x0800d7b5
 800d750:	0800d731 	.word	0x0800d731
 800d754:	0800d731 	.word	0x0800d731
 800d758:	0800d731 	.word	0x0800d731
 800d75c:	0800d731 	.word	0x0800d731
 800d760:	0800d7b5 	.word	0x0800d7b5
 800d764:	0800d731 	.word	0x0800d731
 800d768:	0800d731 	.word	0x0800d731
 800d76c:	0800d731 	.word	0x0800d731
 800d770:	0800d731 	.word	0x0800d731
 800d774:	0800d8c1 	.word	0x0800d8c1
 800d778:	0800d7e5 	.word	0x0800d7e5
 800d77c:	0800d8a3 	.word	0x0800d8a3
 800d780:	0800d731 	.word	0x0800d731
 800d784:	0800d731 	.word	0x0800d731
 800d788:	0800d8e3 	.word	0x0800d8e3
 800d78c:	0800d731 	.word	0x0800d731
 800d790:	0800d7e5 	.word	0x0800d7e5
 800d794:	0800d731 	.word	0x0800d731
 800d798:	0800d731 	.word	0x0800d731
 800d79c:	0800d8ab 	.word	0x0800d8ab
 800d7a0:	680b      	ldr	r3, [r1, #0]
 800d7a2:	1d1a      	adds	r2, r3, #4
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	600a      	str	r2, [r1, #0]
 800d7a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e0a3      	b.n	800d8fc <_printf_i+0x1f4>
 800d7b4:	6825      	ldr	r5, [r4, #0]
 800d7b6:	6808      	ldr	r0, [r1, #0]
 800d7b8:	062e      	lsls	r6, r5, #24
 800d7ba:	f100 0304 	add.w	r3, r0, #4
 800d7be:	d50a      	bpl.n	800d7d6 <_printf_i+0xce>
 800d7c0:	6805      	ldr	r5, [r0, #0]
 800d7c2:	600b      	str	r3, [r1, #0]
 800d7c4:	2d00      	cmp	r5, #0
 800d7c6:	da03      	bge.n	800d7d0 <_printf_i+0xc8>
 800d7c8:	232d      	movs	r3, #45	; 0x2d
 800d7ca:	426d      	negs	r5, r5
 800d7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7d0:	485e      	ldr	r0, [pc, #376]	; (800d94c <_printf_i+0x244>)
 800d7d2:	230a      	movs	r3, #10
 800d7d4:	e019      	b.n	800d80a <_printf_i+0x102>
 800d7d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d7da:	6805      	ldr	r5, [r0, #0]
 800d7dc:	600b      	str	r3, [r1, #0]
 800d7de:	bf18      	it	ne
 800d7e0:	b22d      	sxthne	r5, r5
 800d7e2:	e7ef      	b.n	800d7c4 <_printf_i+0xbc>
 800d7e4:	680b      	ldr	r3, [r1, #0]
 800d7e6:	6825      	ldr	r5, [r4, #0]
 800d7e8:	1d18      	adds	r0, r3, #4
 800d7ea:	6008      	str	r0, [r1, #0]
 800d7ec:	0628      	lsls	r0, r5, #24
 800d7ee:	d501      	bpl.n	800d7f4 <_printf_i+0xec>
 800d7f0:	681d      	ldr	r5, [r3, #0]
 800d7f2:	e002      	b.n	800d7fa <_printf_i+0xf2>
 800d7f4:	0669      	lsls	r1, r5, #25
 800d7f6:	d5fb      	bpl.n	800d7f0 <_printf_i+0xe8>
 800d7f8:	881d      	ldrh	r5, [r3, #0]
 800d7fa:	4854      	ldr	r0, [pc, #336]	; (800d94c <_printf_i+0x244>)
 800d7fc:	2f6f      	cmp	r7, #111	; 0x6f
 800d7fe:	bf0c      	ite	eq
 800d800:	2308      	moveq	r3, #8
 800d802:	230a      	movne	r3, #10
 800d804:	2100      	movs	r1, #0
 800d806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d80a:	6866      	ldr	r6, [r4, #4]
 800d80c:	60a6      	str	r6, [r4, #8]
 800d80e:	2e00      	cmp	r6, #0
 800d810:	bfa2      	ittt	ge
 800d812:	6821      	ldrge	r1, [r4, #0]
 800d814:	f021 0104 	bicge.w	r1, r1, #4
 800d818:	6021      	strge	r1, [r4, #0]
 800d81a:	b90d      	cbnz	r5, 800d820 <_printf_i+0x118>
 800d81c:	2e00      	cmp	r6, #0
 800d81e:	d04d      	beq.n	800d8bc <_printf_i+0x1b4>
 800d820:	4616      	mov	r6, r2
 800d822:	fbb5 f1f3 	udiv	r1, r5, r3
 800d826:	fb03 5711 	mls	r7, r3, r1, r5
 800d82a:	5dc7      	ldrb	r7, [r0, r7]
 800d82c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d830:	462f      	mov	r7, r5
 800d832:	42bb      	cmp	r3, r7
 800d834:	460d      	mov	r5, r1
 800d836:	d9f4      	bls.n	800d822 <_printf_i+0x11a>
 800d838:	2b08      	cmp	r3, #8
 800d83a:	d10b      	bne.n	800d854 <_printf_i+0x14c>
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	07df      	lsls	r7, r3, #31
 800d840:	d508      	bpl.n	800d854 <_printf_i+0x14c>
 800d842:	6923      	ldr	r3, [r4, #16]
 800d844:	6861      	ldr	r1, [r4, #4]
 800d846:	4299      	cmp	r1, r3
 800d848:	bfde      	ittt	le
 800d84a:	2330      	movle	r3, #48	; 0x30
 800d84c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d850:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d854:	1b92      	subs	r2, r2, r6
 800d856:	6122      	str	r2, [r4, #16]
 800d858:	f8cd a000 	str.w	sl, [sp]
 800d85c:	464b      	mov	r3, r9
 800d85e:	aa03      	add	r2, sp, #12
 800d860:	4621      	mov	r1, r4
 800d862:	4640      	mov	r0, r8
 800d864:	f7ff fee2 	bl	800d62c <_printf_common>
 800d868:	3001      	adds	r0, #1
 800d86a:	d14c      	bne.n	800d906 <_printf_i+0x1fe>
 800d86c:	f04f 30ff 	mov.w	r0, #4294967295
 800d870:	b004      	add	sp, #16
 800d872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d876:	4835      	ldr	r0, [pc, #212]	; (800d94c <_printf_i+0x244>)
 800d878:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	680e      	ldr	r6, [r1, #0]
 800d880:	061f      	lsls	r7, r3, #24
 800d882:	f856 5b04 	ldr.w	r5, [r6], #4
 800d886:	600e      	str	r6, [r1, #0]
 800d888:	d514      	bpl.n	800d8b4 <_printf_i+0x1ac>
 800d88a:	07d9      	lsls	r1, r3, #31
 800d88c:	bf44      	itt	mi
 800d88e:	f043 0320 	orrmi.w	r3, r3, #32
 800d892:	6023      	strmi	r3, [r4, #0]
 800d894:	b91d      	cbnz	r5, 800d89e <_printf_i+0x196>
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	f023 0320 	bic.w	r3, r3, #32
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	2310      	movs	r3, #16
 800d8a0:	e7b0      	b.n	800d804 <_printf_i+0xfc>
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	f043 0320 	orr.w	r3, r3, #32
 800d8a8:	6023      	str	r3, [r4, #0]
 800d8aa:	2378      	movs	r3, #120	; 0x78
 800d8ac:	4828      	ldr	r0, [pc, #160]	; (800d950 <_printf_i+0x248>)
 800d8ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8b2:	e7e3      	b.n	800d87c <_printf_i+0x174>
 800d8b4:	065e      	lsls	r6, r3, #25
 800d8b6:	bf48      	it	mi
 800d8b8:	b2ad      	uxthmi	r5, r5
 800d8ba:	e7e6      	b.n	800d88a <_printf_i+0x182>
 800d8bc:	4616      	mov	r6, r2
 800d8be:	e7bb      	b.n	800d838 <_printf_i+0x130>
 800d8c0:	680b      	ldr	r3, [r1, #0]
 800d8c2:	6826      	ldr	r6, [r4, #0]
 800d8c4:	6960      	ldr	r0, [r4, #20]
 800d8c6:	1d1d      	adds	r5, r3, #4
 800d8c8:	600d      	str	r5, [r1, #0]
 800d8ca:	0635      	lsls	r5, r6, #24
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	d501      	bpl.n	800d8d4 <_printf_i+0x1cc>
 800d8d0:	6018      	str	r0, [r3, #0]
 800d8d2:	e002      	b.n	800d8da <_printf_i+0x1d2>
 800d8d4:	0671      	lsls	r1, r6, #25
 800d8d6:	d5fb      	bpl.n	800d8d0 <_printf_i+0x1c8>
 800d8d8:	8018      	strh	r0, [r3, #0]
 800d8da:	2300      	movs	r3, #0
 800d8dc:	6123      	str	r3, [r4, #16]
 800d8de:	4616      	mov	r6, r2
 800d8e0:	e7ba      	b.n	800d858 <_printf_i+0x150>
 800d8e2:	680b      	ldr	r3, [r1, #0]
 800d8e4:	1d1a      	adds	r2, r3, #4
 800d8e6:	600a      	str	r2, [r1, #0]
 800d8e8:	681e      	ldr	r6, [r3, #0]
 800d8ea:	6862      	ldr	r2, [r4, #4]
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f7f2 fc86 	bl	8000200 <memchr>
 800d8f4:	b108      	cbz	r0, 800d8fa <_printf_i+0x1f2>
 800d8f6:	1b80      	subs	r0, r0, r6
 800d8f8:	6060      	str	r0, [r4, #4]
 800d8fa:	6863      	ldr	r3, [r4, #4]
 800d8fc:	6123      	str	r3, [r4, #16]
 800d8fe:	2300      	movs	r3, #0
 800d900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d904:	e7a8      	b.n	800d858 <_printf_i+0x150>
 800d906:	6923      	ldr	r3, [r4, #16]
 800d908:	4632      	mov	r2, r6
 800d90a:	4649      	mov	r1, r9
 800d90c:	4640      	mov	r0, r8
 800d90e:	47d0      	blx	sl
 800d910:	3001      	adds	r0, #1
 800d912:	d0ab      	beq.n	800d86c <_printf_i+0x164>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	079b      	lsls	r3, r3, #30
 800d918:	d413      	bmi.n	800d942 <_printf_i+0x23a>
 800d91a:	68e0      	ldr	r0, [r4, #12]
 800d91c:	9b03      	ldr	r3, [sp, #12]
 800d91e:	4298      	cmp	r0, r3
 800d920:	bfb8      	it	lt
 800d922:	4618      	movlt	r0, r3
 800d924:	e7a4      	b.n	800d870 <_printf_i+0x168>
 800d926:	2301      	movs	r3, #1
 800d928:	4632      	mov	r2, r6
 800d92a:	4649      	mov	r1, r9
 800d92c:	4640      	mov	r0, r8
 800d92e:	47d0      	blx	sl
 800d930:	3001      	adds	r0, #1
 800d932:	d09b      	beq.n	800d86c <_printf_i+0x164>
 800d934:	3501      	adds	r5, #1
 800d936:	68e3      	ldr	r3, [r4, #12]
 800d938:	9903      	ldr	r1, [sp, #12]
 800d93a:	1a5b      	subs	r3, r3, r1
 800d93c:	42ab      	cmp	r3, r5
 800d93e:	dcf2      	bgt.n	800d926 <_printf_i+0x21e>
 800d940:	e7eb      	b.n	800d91a <_printf_i+0x212>
 800d942:	2500      	movs	r5, #0
 800d944:	f104 0619 	add.w	r6, r4, #25
 800d948:	e7f5      	b.n	800d936 <_printf_i+0x22e>
 800d94a:	bf00      	nop
 800d94c:	0804089b 	.word	0x0804089b
 800d950:	080408ac 	.word	0x080408ac

0800d954 <_read_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4d07      	ldr	r5, [pc, #28]	; (800d974 <_read_r+0x20>)
 800d958:	4604      	mov	r4, r0
 800d95a:	4608      	mov	r0, r1
 800d95c:	4611      	mov	r1, r2
 800d95e:	2200      	movs	r2, #0
 800d960:	602a      	str	r2, [r5, #0]
 800d962:	461a      	mov	r2, r3
 800d964:	f7fd fe5e 	bl	800b624 <_read>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_read_r+0x1e>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_read_r+0x1e>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	2001aac8 	.word	0x2001aac8

0800d978 <__swbuf_r>:
 800d978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97a:	460e      	mov	r6, r1
 800d97c:	4614      	mov	r4, r2
 800d97e:	4605      	mov	r5, r0
 800d980:	b118      	cbz	r0, 800d98a <__swbuf_r+0x12>
 800d982:	6983      	ldr	r3, [r0, #24]
 800d984:	b90b      	cbnz	r3, 800d98a <__swbuf_r+0x12>
 800d986:	f7fe ff8f 	bl	800c8a8 <__sinit>
 800d98a:	4b21      	ldr	r3, [pc, #132]	; (800da10 <__swbuf_r+0x98>)
 800d98c:	429c      	cmp	r4, r3
 800d98e:	d12b      	bne.n	800d9e8 <__swbuf_r+0x70>
 800d990:	686c      	ldr	r4, [r5, #4]
 800d992:	69a3      	ldr	r3, [r4, #24]
 800d994:	60a3      	str	r3, [r4, #8]
 800d996:	89a3      	ldrh	r3, [r4, #12]
 800d998:	071a      	lsls	r2, r3, #28
 800d99a:	d52f      	bpl.n	800d9fc <__swbuf_r+0x84>
 800d99c:	6923      	ldr	r3, [r4, #16]
 800d99e:	b36b      	cbz	r3, 800d9fc <__swbuf_r+0x84>
 800d9a0:	6923      	ldr	r3, [r4, #16]
 800d9a2:	6820      	ldr	r0, [r4, #0]
 800d9a4:	1ac0      	subs	r0, r0, r3
 800d9a6:	6963      	ldr	r3, [r4, #20]
 800d9a8:	b2f6      	uxtb	r6, r6
 800d9aa:	4283      	cmp	r3, r0
 800d9ac:	4637      	mov	r7, r6
 800d9ae:	dc04      	bgt.n	800d9ba <__swbuf_r+0x42>
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f7ff fb18 	bl	800cfe8 <_fflush_r>
 800d9b8:	bb30      	cbnz	r0, 800da08 <__swbuf_r+0x90>
 800d9ba:	68a3      	ldr	r3, [r4, #8]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	60a3      	str	r3, [r4, #8]
 800d9c0:	6823      	ldr	r3, [r4, #0]
 800d9c2:	1c5a      	adds	r2, r3, #1
 800d9c4:	6022      	str	r2, [r4, #0]
 800d9c6:	701e      	strb	r6, [r3, #0]
 800d9c8:	6963      	ldr	r3, [r4, #20]
 800d9ca:	3001      	adds	r0, #1
 800d9cc:	4283      	cmp	r3, r0
 800d9ce:	d004      	beq.n	800d9da <__swbuf_r+0x62>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	07db      	lsls	r3, r3, #31
 800d9d4:	d506      	bpl.n	800d9e4 <__swbuf_r+0x6c>
 800d9d6:	2e0a      	cmp	r6, #10
 800d9d8:	d104      	bne.n	800d9e4 <__swbuf_r+0x6c>
 800d9da:	4621      	mov	r1, r4
 800d9dc:	4628      	mov	r0, r5
 800d9de:	f7ff fb03 	bl	800cfe8 <_fflush_r>
 800d9e2:	b988      	cbnz	r0, 800da08 <__swbuf_r+0x90>
 800d9e4:	4638      	mov	r0, r7
 800d9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <__swbuf_r+0x9c>)
 800d9ea:	429c      	cmp	r4, r3
 800d9ec:	d101      	bne.n	800d9f2 <__swbuf_r+0x7a>
 800d9ee:	68ac      	ldr	r4, [r5, #8]
 800d9f0:	e7cf      	b.n	800d992 <__swbuf_r+0x1a>
 800d9f2:	4b09      	ldr	r3, [pc, #36]	; (800da18 <__swbuf_r+0xa0>)
 800d9f4:	429c      	cmp	r4, r3
 800d9f6:	bf08      	it	eq
 800d9f8:	68ec      	ldreq	r4, [r5, #12]
 800d9fa:	e7ca      	b.n	800d992 <__swbuf_r+0x1a>
 800d9fc:	4621      	mov	r1, r4
 800d9fe:	4628      	mov	r0, r5
 800da00:	f000 f80c 	bl	800da1c <__swsetup_r>
 800da04:	2800      	cmp	r0, #0
 800da06:	d0cb      	beq.n	800d9a0 <__swbuf_r+0x28>
 800da08:	f04f 37ff 	mov.w	r7, #4294967295
 800da0c:	e7ea      	b.n	800d9e4 <__swbuf_r+0x6c>
 800da0e:	bf00      	nop
 800da10:	08040794 	.word	0x08040794
 800da14:	080407b4 	.word	0x080407b4
 800da18:	08040774 	.word	0x08040774

0800da1c <__swsetup_r>:
 800da1c:	4b32      	ldr	r3, [pc, #200]	; (800dae8 <__swsetup_r+0xcc>)
 800da1e:	b570      	push	{r4, r5, r6, lr}
 800da20:	681d      	ldr	r5, [r3, #0]
 800da22:	4606      	mov	r6, r0
 800da24:	460c      	mov	r4, r1
 800da26:	b125      	cbz	r5, 800da32 <__swsetup_r+0x16>
 800da28:	69ab      	ldr	r3, [r5, #24]
 800da2a:	b913      	cbnz	r3, 800da32 <__swsetup_r+0x16>
 800da2c:	4628      	mov	r0, r5
 800da2e:	f7fe ff3b 	bl	800c8a8 <__sinit>
 800da32:	4b2e      	ldr	r3, [pc, #184]	; (800daec <__swsetup_r+0xd0>)
 800da34:	429c      	cmp	r4, r3
 800da36:	d10f      	bne.n	800da58 <__swsetup_r+0x3c>
 800da38:	686c      	ldr	r4, [r5, #4]
 800da3a:	89a3      	ldrh	r3, [r4, #12]
 800da3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da40:	0719      	lsls	r1, r3, #28
 800da42:	d42c      	bmi.n	800da9e <__swsetup_r+0x82>
 800da44:	06dd      	lsls	r5, r3, #27
 800da46:	d411      	bmi.n	800da6c <__swsetup_r+0x50>
 800da48:	2309      	movs	r3, #9
 800da4a:	6033      	str	r3, [r6, #0]
 800da4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da50:	81a3      	strh	r3, [r4, #12]
 800da52:	f04f 30ff 	mov.w	r0, #4294967295
 800da56:	e03e      	b.n	800dad6 <__swsetup_r+0xba>
 800da58:	4b25      	ldr	r3, [pc, #148]	; (800daf0 <__swsetup_r+0xd4>)
 800da5a:	429c      	cmp	r4, r3
 800da5c:	d101      	bne.n	800da62 <__swsetup_r+0x46>
 800da5e:	68ac      	ldr	r4, [r5, #8]
 800da60:	e7eb      	b.n	800da3a <__swsetup_r+0x1e>
 800da62:	4b24      	ldr	r3, [pc, #144]	; (800daf4 <__swsetup_r+0xd8>)
 800da64:	429c      	cmp	r4, r3
 800da66:	bf08      	it	eq
 800da68:	68ec      	ldreq	r4, [r5, #12]
 800da6a:	e7e6      	b.n	800da3a <__swsetup_r+0x1e>
 800da6c:	0758      	lsls	r0, r3, #29
 800da6e:	d512      	bpl.n	800da96 <__swsetup_r+0x7a>
 800da70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da72:	b141      	cbz	r1, 800da86 <__swsetup_r+0x6a>
 800da74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da78:	4299      	cmp	r1, r3
 800da7a:	d002      	beq.n	800da82 <__swsetup_r+0x66>
 800da7c:	4630      	mov	r0, r6
 800da7e:	f7fe fff7 	bl	800ca70 <_free_r>
 800da82:	2300      	movs	r3, #0
 800da84:	6363      	str	r3, [r4, #52]	; 0x34
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da8c:	81a3      	strh	r3, [r4, #12]
 800da8e:	2300      	movs	r3, #0
 800da90:	6063      	str	r3, [r4, #4]
 800da92:	6923      	ldr	r3, [r4, #16]
 800da94:	6023      	str	r3, [r4, #0]
 800da96:	89a3      	ldrh	r3, [r4, #12]
 800da98:	f043 0308 	orr.w	r3, r3, #8
 800da9c:	81a3      	strh	r3, [r4, #12]
 800da9e:	6923      	ldr	r3, [r4, #16]
 800daa0:	b94b      	cbnz	r3, 800dab6 <__swsetup_r+0x9a>
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800daa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daac:	d003      	beq.n	800dab6 <__swsetup_r+0x9a>
 800daae:	4621      	mov	r1, r4
 800dab0:	4630      	mov	r0, r6
 800dab2:	f000 f84d 	bl	800db50 <__smakebuf_r>
 800dab6:	89a0      	ldrh	r0, [r4, #12]
 800dab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dabc:	f010 0301 	ands.w	r3, r0, #1
 800dac0:	d00a      	beq.n	800dad8 <__swsetup_r+0xbc>
 800dac2:	2300      	movs	r3, #0
 800dac4:	60a3      	str	r3, [r4, #8]
 800dac6:	6963      	ldr	r3, [r4, #20]
 800dac8:	425b      	negs	r3, r3
 800daca:	61a3      	str	r3, [r4, #24]
 800dacc:	6923      	ldr	r3, [r4, #16]
 800dace:	b943      	cbnz	r3, 800dae2 <__swsetup_r+0xc6>
 800dad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dad4:	d1ba      	bne.n	800da4c <__swsetup_r+0x30>
 800dad6:	bd70      	pop	{r4, r5, r6, pc}
 800dad8:	0781      	lsls	r1, r0, #30
 800dada:	bf58      	it	pl
 800dadc:	6963      	ldrpl	r3, [r4, #20]
 800dade:	60a3      	str	r3, [r4, #8]
 800dae0:	e7f4      	b.n	800dacc <__swsetup_r+0xb0>
 800dae2:	2000      	movs	r0, #0
 800dae4:	e7f7      	b.n	800dad6 <__swsetup_r+0xba>
 800dae6:	bf00      	nop
 800dae8:	20000644 	.word	0x20000644
 800daec:	08040794 	.word	0x08040794
 800daf0:	080407b4 	.word	0x080407b4
 800daf4:	08040774 	.word	0x08040774

0800daf8 <abort>:
 800daf8:	b508      	push	{r3, lr}
 800dafa:	2006      	movs	r0, #6
 800dafc:	f000 f8d0 	bl	800dca0 <raise>
 800db00:	2001      	movs	r0, #1
 800db02:	f7fd fd85 	bl	800b610 <_exit>

0800db06 <__swhatbuf_r>:
 800db06:	b570      	push	{r4, r5, r6, lr}
 800db08:	460e      	mov	r6, r1
 800db0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0e:	2900      	cmp	r1, #0
 800db10:	b096      	sub	sp, #88	; 0x58
 800db12:	4614      	mov	r4, r2
 800db14:	461d      	mov	r5, r3
 800db16:	da07      	bge.n	800db28 <__swhatbuf_r+0x22>
 800db18:	2300      	movs	r3, #0
 800db1a:	602b      	str	r3, [r5, #0]
 800db1c:	89b3      	ldrh	r3, [r6, #12]
 800db1e:	061a      	lsls	r2, r3, #24
 800db20:	d410      	bmi.n	800db44 <__swhatbuf_r+0x3e>
 800db22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db26:	e00e      	b.n	800db46 <__swhatbuf_r+0x40>
 800db28:	466a      	mov	r2, sp
 800db2a:	f000 f8d5 	bl	800dcd8 <_fstat_r>
 800db2e:	2800      	cmp	r0, #0
 800db30:	dbf2      	blt.n	800db18 <__swhatbuf_r+0x12>
 800db32:	9a01      	ldr	r2, [sp, #4]
 800db34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db3c:	425a      	negs	r2, r3
 800db3e:	415a      	adcs	r2, r3
 800db40:	602a      	str	r2, [r5, #0]
 800db42:	e7ee      	b.n	800db22 <__swhatbuf_r+0x1c>
 800db44:	2340      	movs	r3, #64	; 0x40
 800db46:	2000      	movs	r0, #0
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	b016      	add	sp, #88	; 0x58
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db50 <__smakebuf_r>:
 800db50:	898b      	ldrh	r3, [r1, #12]
 800db52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db54:	079d      	lsls	r5, r3, #30
 800db56:	4606      	mov	r6, r0
 800db58:	460c      	mov	r4, r1
 800db5a:	d507      	bpl.n	800db6c <__smakebuf_r+0x1c>
 800db5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	6123      	str	r3, [r4, #16]
 800db64:	2301      	movs	r3, #1
 800db66:	6163      	str	r3, [r4, #20]
 800db68:	b002      	add	sp, #8
 800db6a:	bd70      	pop	{r4, r5, r6, pc}
 800db6c:	ab01      	add	r3, sp, #4
 800db6e:	466a      	mov	r2, sp
 800db70:	f7ff ffc9 	bl	800db06 <__swhatbuf_r>
 800db74:	9900      	ldr	r1, [sp, #0]
 800db76:	4605      	mov	r5, r0
 800db78:	4630      	mov	r0, r6
 800db7a:	f7fe ffc9 	bl	800cb10 <_malloc_r>
 800db7e:	b948      	cbnz	r0, 800db94 <__smakebuf_r+0x44>
 800db80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db84:	059a      	lsls	r2, r3, #22
 800db86:	d4ef      	bmi.n	800db68 <__smakebuf_r+0x18>
 800db88:	f023 0303 	bic.w	r3, r3, #3
 800db8c:	f043 0302 	orr.w	r3, r3, #2
 800db90:	81a3      	strh	r3, [r4, #12]
 800db92:	e7e3      	b.n	800db5c <__smakebuf_r+0xc>
 800db94:	4b0d      	ldr	r3, [pc, #52]	; (800dbcc <__smakebuf_r+0x7c>)
 800db96:	62b3      	str	r3, [r6, #40]	; 0x28
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	6020      	str	r0, [r4, #0]
 800db9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dba0:	81a3      	strh	r3, [r4, #12]
 800dba2:	9b00      	ldr	r3, [sp, #0]
 800dba4:	6163      	str	r3, [r4, #20]
 800dba6:	9b01      	ldr	r3, [sp, #4]
 800dba8:	6120      	str	r0, [r4, #16]
 800dbaa:	b15b      	cbz	r3, 800dbc4 <__smakebuf_r+0x74>
 800dbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f000 f8a3 	bl	800dcfc <_isatty_r>
 800dbb6:	b128      	cbz	r0, 800dbc4 <__smakebuf_r+0x74>
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	f023 0303 	bic.w	r3, r3, #3
 800dbbe:	f043 0301 	orr.w	r3, r3, #1
 800dbc2:	81a3      	strh	r3, [r4, #12]
 800dbc4:	89a0      	ldrh	r0, [r4, #12]
 800dbc6:	4305      	orrs	r5, r0
 800dbc8:	81a5      	strh	r5, [r4, #12]
 800dbca:	e7cd      	b.n	800db68 <__smakebuf_r+0x18>
 800dbcc:	0800c841 	.word	0x0800c841

0800dbd0 <memmove>:
 800dbd0:	4288      	cmp	r0, r1
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	eb01 0402 	add.w	r4, r1, r2
 800dbd8:	d902      	bls.n	800dbe0 <memmove+0x10>
 800dbda:	4284      	cmp	r4, r0
 800dbdc:	4623      	mov	r3, r4
 800dbde:	d807      	bhi.n	800dbf0 <memmove+0x20>
 800dbe0:	1e43      	subs	r3, r0, #1
 800dbe2:	42a1      	cmp	r1, r4
 800dbe4:	d008      	beq.n	800dbf8 <memmove+0x28>
 800dbe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbee:	e7f8      	b.n	800dbe2 <memmove+0x12>
 800dbf0:	4402      	add	r2, r0
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	428a      	cmp	r2, r1
 800dbf6:	d100      	bne.n	800dbfa <memmove+0x2a>
 800dbf8:	bd10      	pop	{r4, pc}
 800dbfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc02:	e7f7      	b.n	800dbf4 <memmove+0x24>

0800dc04 <_realloc_r>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	4607      	mov	r7, r0
 800dc08:	4614      	mov	r4, r2
 800dc0a:	460e      	mov	r6, r1
 800dc0c:	b921      	cbnz	r1, 800dc18 <_realloc_r+0x14>
 800dc0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc12:	4611      	mov	r1, r2
 800dc14:	f7fe bf7c 	b.w	800cb10 <_malloc_r>
 800dc18:	b922      	cbnz	r2, 800dc24 <_realloc_r+0x20>
 800dc1a:	f7fe ff29 	bl	800ca70 <_free_r>
 800dc1e:	4625      	mov	r5, r4
 800dc20:	4628      	mov	r0, r5
 800dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc24:	f000 f87a 	bl	800dd1c <_malloc_usable_size_r>
 800dc28:	42a0      	cmp	r0, r4
 800dc2a:	d20f      	bcs.n	800dc4c <_realloc_r+0x48>
 800dc2c:	4621      	mov	r1, r4
 800dc2e:	4638      	mov	r0, r7
 800dc30:	f7fe ff6e 	bl	800cb10 <_malloc_r>
 800dc34:	4605      	mov	r5, r0
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d0f2      	beq.n	800dc20 <_realloc_r+0x1c>
 800dc3a:	4631      	mov	r1, r6
 800dc3c:	4622      	mov	r2, r4
 800dc3e:	f7fe ff01 	bl	800ca44 <memcpy>
 800dc42:	4631      	mov	r1, r6
 800dc44:	4638      	mov	r0, r7
 800dc46:	f7fe ff13 	bl	800ca70 <_free_r>
 800dc4a:	e7e9      	b.n	800dc20 <_realloc_r+0x1c>
 800dc4c:	4635      	mov	r5, r6
 800dc4e:	e7e7      	b.n	800dc20 <_realloc_r+0x1c>

0800dc50 <_raise_r>:
 800dc50:	291f      	cmp	r1, #31
 800dc52:	b538      	push	{r3, r4, r5, lr}
 800dc54:	4604      	mov	r4, r0
 800dc56:	460d      	mov	r5, r1
 800dc58:	d904      	bls.n	800dc64 <_raise_r+0x14>
 800dc5a:	2316      	movs	r3, #22
 800dc5c:	6003      	str	r3, [r0, #0]
 800dc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc62:	bd38      	pop	{r3, r4, r5, pc}
 800dc64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc66:	b112      	cbz	r2, 800dc6e <_raise_r+0x1e>
 800dc68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc6c:	b94b      	cbnz	r3, 800dc82 <_raise_r+0x32>
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 f830 	bl	800dcd4 <_getpid_r>
 800dc74:	462a      	mov	r2, r5
 800dc76:	4601      	mov	r1, r0
 800dc78:	4620      	mov	r0, r4
 800dc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc7e:	f000 b817 	b.w	800dcb0 <_kill_r>
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d00a      	beq.n	800dc9c <_raise_r+0x4c>
 800dc86:	1c59      	adds	r1, r3, #1
 800dc88:	d103      	bne.n	800dc92 <_raise_r+0x42>
 800dc8a:	2316      	movs	r3, #22
 800dc8c:	6003      	str	r3, [r0, #0]
 800dc8e:	2001      	movs	r0, #1
 800dc90:	e7e7      	b.n	800dc62 <_raise_r+0x12>
 800dc92:	2400      	movs	r4, #0
 800dc94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc98:	4628      	mov	r0, r5
 800dc9a:	4798      	blx	r3
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	e7e0      	b.n	800dc62 <_raise_r+0x12>

0800dca0 <raise>:
 800dca0:	4b02      	ldr	r3, [pc, #8]	; (800dcac <raise+0xc>)
 800dca2:	4601      	mov	r1, r0
 800dca4:	6818      	ldr	r0, [r3, #0]
 800dca6:	f7ff bfd3 	b.w	800dc50 <_raise_r>
 800dcaa:	bf00      	nop
 800dcac:	20000644 	.word	0x20000644

0800dcb0 <_kill_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4d07      	ldr	r5, [pc, #28]	; (800dcd0 <_kill_r+0x20>)
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	4608      	mov	r0, r1
 800dcba:	4611      	mov	r1, r2
 800dcbc:	602b      	str	r3, [r5, #0]
 800dcbe:	f7fd fc97 	bl	800b5f0 <_kill>
 800dcc2:	1c43      	adds	r3, r0, #1
 800dcc4:	d102      	bne.n	800dccc <_kill_r+0x1c>
 800dcc6:	682b      	ldr	r3, [r5, #0]
 800dcc8:	b103      	cbz	r3, 800dccc <_kill_r+0x1c>
 800dcca:	6023      	str	r3, [r4, #0]
 800dccc:	bd38      	pop	{r3, r4, r5, pc}
 800dcce:	bf00      	nop
 800dcd0:	2001aac8 	.word	0x2001aac8

0800dcd4 <_getpid_r>:
 800dcd4:	f7fd bc84 	b.w	800b5e0 <_getpid>

0800dcd8 <_fstat_r>:
 800dcd8:	b538      	push	{r3, r4, r5, lr}
 800dcda:	4d07      	ldr	r5, [pc, #28]	; (800dcf8 <_fstat_r+0x20>)
 800dcdc:	2300      	movs	r3, #0
 800dcde:	4604      	mov	r4, r0
 800dce0:	4608      	mov	r0, r1
 800dce2:	4611      	mov	r1, r2
 800dce4:	602b      	str	r3, [r5, #0]
 800dce6:	f7fd fce2 	bl	800b6ae <_fstat>
 800dcea:	1c43      	adds	r3, r0, #1
 800dcec:	d102      	bne.n	800dcf4 <_fstat_r+0x1c>
 800dcee:	682b      	ldr	r3, [r5, #0]
 800dcf0:	b103      	cbz	r3, 800dcf4 <_fstat_r+0x1c>
 800dcf2:	6023      	str	r3, [r4, #0]
 800dcf4:	bd38      	pop	{r3, r4, r5, pc}
 800dcf6:	bf00      	nop
 800dcf8:	2001aac8 	.word	0x2001aac8

0800dcfc <_isatty_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	4d06      	ldr	r5, [pc, #24]	; (800dd18 <_isatty_r+0x1c>)
 800dd00:	2300      	movs	r3, #0
 800dd02:	4604      	mov	r4, r0
 800dd04:	4608      	mov	r0, r1
 800dd06:	602b      	str	r3, [r5, #0]
 800dd08:	f7fd fce1 	bl	800b6ce <_isatty>
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	d102      	bne.n	800dd16 <_isatty_r+0x1a>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	b103      	cbz	r3, 800dd16 <_isatty_r+0x1a>
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	2001aac8 	.word	0x2001aac8

0800dd1c <_malloc_usable_size_r>:
 800dd1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd20:	1f18      	subs	r0, r3, #4
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	bfbc      	itt	lt
 800dd26:	580b      	ldrlt	r3, [r1, r0]
 800dd28:	18c0      	addlt	r0, r0, r3
 800dd2a:	4770      	bx	lr
 800dd2c:	0000      	movs	r0, r0
	...

0800dd30 <exp>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	ed2d 8b02 	vpush	{d8}
 800dd36:	ec55 4b10 	vmov	r4, r5, d0
 800dd3a:	f000 f885 	bl	800de48 <__ieee754_exp>
 800dd3e:	4b22      	ldr	r3, [pc, #136]	; (800ddc8 <exp+0x98>)
 800dd40:	eeb0 8a40 	vmov.f32	s16, s0
 800dd44:	eef0 8a60 	vmov.f32	s17, s1
 800dd48:	f993 3000 	ldrsb.w	r3, [r3]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	d012      	beq.n	800dd76 <exp+0x46>
 800dd50:	ec45 4b10 	vmov	d0, r4, r5
 800dd54:	f000 fb04 	bl	800e360 <finite>
 800dd58:	b168      	cbz	r0, 800dd76 <exp+0x46>
 800dd5a:	a313      	add	r3, pc, #76	; (adr r3, 800dda8 <exp+0x78>)
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	4620      	mov	r0, r4
 800dd62:	4629      	mov	r1, r5
 800dd64:	f7f2 fee8 	bl	8000b38 <__aeabi_dcmpgt>
 800dd68:	b160      	cbz	r0, 800dd84 <exp+0x54>
 800dd6a:	f7fe fd3f 	bl	800c7ec <__errno>
 800dd6e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800ddb0 <exp+0x80>
 800dd72:	2322      	movs	r3, #34	; 0x22
 800dd74:	6003      	str	r3, [r0, #0]
 800dd76:	eeb0 0a48 	vmov.f32	s0, s16
 800dd7a:	eef0 0a68 	vmov.f32	s1, s17
 800dd7e:	ecbd 8b02 	vpop	{d8}
 800dd82:	bd38      	pop	{r3, r4, r5, pc}
 800dd84:	a30c      	add	r3, pc, #48	; (adr r3, 800ddb8 <exp+0x88>)
 800dd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	f7f2 feb5 	bl	8000afc <__aeabi_dcmplt>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d0ef      	beq.n	800dd76 <exp+0x46>
 800dd96:	f7fe fd29 	bl	800c7ec <__errno>
 800dd9a:	2322      	movs	r3, #34	; 0x22
 800dd9c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800ddc0 <exp+0x90>
 800dda0:	6003      	str	r3, [r0, #0]
 800dda2:	e7e8      	b.n	800dd76 <exp+0x46>
 800dda4:	f3af 8000 	nop.w
 800dda8:	fefa39ef 	.word	0xfefa39ef
 800ddac:	40862e42 	.word	0x40862e42
 800ddb0:	00000000 	.word	0x00000000
 800ddb4:	7ff00000 	.word	0x7ff00000
 800ddb8:	d52d3051 	.word	0xd52d3051
 800ddbc:	c0874910 	.word	0xc0874910
	...
 800ddc8:	200006a8 	.word	0x200006a8

0800ddcc <fmod>:
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddce:	ed2d 8b02 	vpush	{d8}
 800ddd2:	ec57 6b10 	vmov	r6, r7, d0
 800ddd6:	ec55 4b11 	vmov	r4, r5, d1
 800ddda:	f000 f9af 	bl	800e13c <__ieee754_fmod>
 800ddde:	4b18      	ldr	r3, [pc, #96]	; (800de40 <fmod+0x74>)
 800dde0:	eeb0 8a40 	vmov.f32	s16, s0
 800dde4:	eef0 8a60 	vmov.f32	s17, s1
 800dde8:	f993 3000 	ldrsb.w	r3, [r3]
 800ddec:	3301      	adds	r3, #1
 800ddee:	d020      	beq.n	800de32 <fmod+0x66>
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	4629      	mov	r1, r5
 800ddf8:	f7f2 fea8 	bl	8000b4c <__aeabi_dcmpun>
 800ddfc:	b9c8      	cbnz	r0, 800de32 <fmod+0x66>
 800ddfe:	4632      	mov	r2, r6
 800de00:	463b      	mov	r3, r7
 800de02:	4630      	mov	r0, r6
 800de04:	4639      	mov	r1, r7
 800de06:	f7f2 fea1 	bl	8000b4c <__aeabi_dcmpun>
 800de0a:	b990      	cbnz	r0, 800de32 <fmod+0x66>
 800de0c:	2200      	movs	r2, #0
 800de0e:	2300      	movs	r3, #0
 800de10:	4620      	mov	r0, r4
 800de12:	4629      	mov	r1, r5
 800de14:	f7f2 fe68 	bl	8000ae8 <__aeabi_dcmpeq>
 800de18:	b158      	cbz	r0, 800de32 <fmod+0x66>
 800de1a:	f7fe fce7 	bl	800c7ec <__errno>
 800de1e:	2321      	movs	r3, #33	; 0x21
 800de20:	6003      	str	r3, [r0, #0]
 800de22:	2200      	movs	r2, #0
 800de24:	2300      	movs	r3, #0
 800de26:	4610      	mov	r0, r2
 800de28:	4619      	mov	r1, r3
 800de2a:	f7f2 fd1f 	bl	800086c <__aeabi_ddiv>
 800de2e:	ec41 0b18 	vmov	d8, r0, r1
 800de32:	eeb0 0a48 	vmov.f32	s0, s16
 800de36:	eef0 0a68 	vmov.f32	s1, s17
 800de3a:	ecbd 8b02 	vpop	{d8}
 800de3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de40:	200006a8 	.word	0x200006a8
 800de44:	00000000 	.word	0x00000000

0800de48 <__ieee754_exp>:
 800de48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de4c:	ec55 4b10 	vmov	r4, r5, d0
 800de50:	49b1      	ldr	r1, [pc, #708]	; (800e118 <__ieee754_exp+0x2d0>)
 800de52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800de56:	428b      	cmp	r3, r1
 800de58:	ed2d 8b04 	vpush	{d8-d9}
 800de5c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800de60:	d937      	bls.n	800ded2 <__ieee754_exp+0x8a>
 800de62:	49ae      	ldr	r1, [pc, #696]	; (800e11c <__ieee754_exp+0x2d4>)
 800de64:	428b      	cmp	r3, r1
 800de66:	d916      	bls.n	800de96 <__ieee754_exp+0x4e>
 800de68:	ee10 3a10 	vmov	r3, s0
 800de6c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800de70:	4313      	orrs	r3, r2
 800de72:	d009      	beq.n	800de88 <__ieee754_exp+0x40>
 800de74:	ee10 2a10 	vmov	r2, s0
 800de78:	462b      	mov	r3, r5
 800de7a:	4620      	mov	r0, r4
 800de7c:	4629      	mov	r1, r5
 800de7e:	f7f2 fa15 	bl	80002ac <__adddf3>
 800de82:	4604      	mov	r4, r0
 800de84:	460d      	mov	r5, r1
 800de86:	e000      	b.n	800de8a <__ieee754_exp+0x42>
 800de88:	bb06      	cbnz	r6, 800decc <__ieee754_exp+0x84>
 800de8a:	ecbd 8b04 	vpop	{d8-d9}
 800de8e:	ec45 4b10 	vmov	d0, r4, r5
 800de92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de96:	a38a      	add	r3, pc, #552	; (adr r3, 800e0c0 <__ieee754_exp+0x278>)
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	ee10 0a10 	vmov	r0, s0
 800dea0:	4629      	mov	r1, r5
 800dea2:	f7f2 fe49 	bl	8000b38 <__aeabi_dcmpgt>
 800dea6:	b138      	cbz	r0, 800deb8 <__ieee754_exp+0x70>
 800dea8:	a387      	add	r3, pc, #540	; (adr r3, 800e0c8 <__ieee754_exp+0x280>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	4610      	mov	r0, r2
 800deb0:	4619      	mov	r1, r3
 800deb2:	f7f2 fbb1 	bl	8000618 <__aeabi_dmul>
 800deb6:	e7e4      	b.n	800de82 <__ieee754_exp+0x3a>
 800deb8:	a385      	add	r3, pc, #532	; (adr r3, 800e0d0 <__ieee754_exp+0x288>)
 800deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debe:	4620      	mov	r0, r4
 800dec0:	4629      	mov	r1, r5
 800dec2:	f7f2 fe1b 	bl	8000afc <__aeabi_dcmplt>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	f000 8087 	beq.w	800dfda <__ieee754_exp+0x192>
 800decc:	2400      	movs	r4, #0
 800dece:	2500      	movs	r5, #0
 800ded0:	e7db      	b.n	800de8a <__ieee754_exp+0x42>
 800ded2:	4a93      	ldr	r2, [pc, #588]	; (800e120 <__ieee754_exp+0x2d8>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	f240 80ac 	bls.w	800e032 <__ieee754_exp+0x1ea>
 800deda:	4a92      	ldr	r2, [pc, #584]	; (800e124 <__ieee754_exp+0x2dc>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d87c      	bhi.n	800dfda <__ieee754_exp+0x192>
 800dee0:	4b91      	ldr	r3, [pc, #580]	; (800e128 <__ieee754_exp+0x2e0>)
 800dee2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	ee10 0a10 	vmov	r0, s0
 800deee:	4629      	mov	r1, r5
 800def0:	f7f2 f9da 	bl	80002a8 <__aeabi_dsub>
 800def4:	4b8d      	ldr	r3, [pc, #564]	; (800e12c <__ieee754_exp+0x2e4>)
 800def6:	00f7      	lsls	r7, r6, #3
 800def8:	443b      	add	r3, r7
 800defa:	ed93 7b00 	vldr	d7, [r3]
 800defe:	f1c6 0a01 	rsb	sl, r6, #1
 800df02:	4680      	mov	r8, r0
 800df04:	4689      	mov	r9, r1
 800df06:	ebaa 0a06 	sub.w	sl, sl, r6
 800df0a:	eeb0 8a47 	vmov.f32	s16, s14
 800df0e:	eef0 8a67 	vmov.f32	s17, s15
 800df12:	ec53 2b18 	vmov	r2, r3, d8
 800df16:	4640      	mov	r0, r8
 800df18:	4649      	mov	r1, r9
 800df1a:	f7f2 f9c5 	bl	80002a8 <__aeabi_dsub>
 800df1e:	4604      	mov	r4, r0
 800df20:	460d      	mov	r5, r1
 800df22:	4622      	mov	r2, r4
 800df24:	462b      	mov	r3, r5
 800df26:	4620      	mov	r0, r4
 800df28:	4629      	mov	r1, r5
 800df2a:	f7f2 fb75 	bl	8000618 <__aeabi_dmul>
 800df2e:	a36a      	add	r3, pc, #424	; (adr r3, 800e0d8 <__ieee754_exp+0x290>)
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	4606      	mov	r6, r0
 800df36:	460f      	mov	r7, r1
 800df38:	f7f2 fb6e 	bl	8000618 <__aeabi_dmul>
 800df3c:	a368      	add	r3, pc, #416	; (adr r3, 800e0e0 <__ieee754_exp+0x298>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 f9b1 	bl	80002a8 <__aeabi_dsub>
 800df46:	4632      	mov	r2, r6
 800df48:	463b      	mov	r3, r7
 800df4a:	f7f2 fb65 	bl	8000618 <__aeabi_dmul>
 800df4e:	a366      	add	r3, pc, #408	; (adr r3, 800e0e8 <__ieee754_exp+0x2a0>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	f7f2 f9aa 	bl	80002ac <__adddf3>
 800df58:	4632      	mov	r2, r6
 800df5a:	463b      	mov	r3, r7
 800df5c:	f7f2 fb5c 	bl	8000618 <__aeabi_dmul>
 800df60:	a363      	add	r3, pc, #396	; (adr r3, 800e0f0 <__ieee754_exp+0x2a8>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 f99f 	bl	80002a8 <__aeabi_dsub>
 800df6a:	4632      	mov	r2, r6
 800df6c:	463b      	mov	r3, r7
 800df6e:	f7f2 fb53 	bl	8000618 <__aeabi_dmul>
 800df72:	a361      	add	r3, pc, #388	; (adr r3, 800e0f8 <__ieee754_exp+0x2b0>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	f7f2 f998 	bl	80002ac <__adddf3>
 800df7c:	4632      	mov	r2, r6
 800df7e:	463b      	mov	r3, r7
 800df80:	f7f2 fb4a 	bl	8000618 <__aeabi_dmul>
 800df84:	4602      	mov	r2, r0
 800df86:	460b      	mov	r3, r1
 800df88:	4620      	mov	r0, r4
 800df8a:	4629      	mov	r1, r5
 800df8c:	f7f2 f98c 	bl	80002a8 <__aeabi_dsub>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4606      	mov	r6, r0
 800df96:	460f      	mov	r7, r1
 800df98:	4620      	mov	r0, r4
 800df9a:	4629      	mov	r1, r5
 800df9c:	f7f2 fb3c 	bl	8000618 <__aeabi_dmul>
 800dfa0:	ec41 0b19 	vmov	d9, r0, r1
 800dfa4:	f1ba 0f00 	cmp.w	sl, #0
 800dfa8:	d15d      	bne.n	800e066 <__ieee754_exp+0x21e>
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	4639      	mov	r1, r7
 800dfb4:	f7f2 f978 	bl	80002a8 <__aeabi_dsub>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	ec51 0b19 	vmov	r0, r1, d9
 800dfc0:	f7f2 fc54 	bl	800086c <__aeabi_ddiv>
 800dfc4:	4622      	mov	r2, r4
 800dfc6:	462b      	mov	r3, r5
 800dfc8:	f7f2 f96e 	bl	80002a8 <__aeabi_dsub>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	4957      	ldr	r1, [pc, #348]	; (800e130 <__ieee754_exp+0x2e8>)
 800dfd4:	f7f2 f968 	bl	80002a8 <__aeabi_dsub>
 800dfd8:	e753      	b.n	800de82 <__ieee754_exp+0x3a>
 800dfda:	4856      	ldr	r0, [pc, #344]	; (800e134 <__ieee754_exp+0x2ec>)
 800dfdc:	a348      	add	r3, pc, #288	; (adr r3, 800e100 <__ieee754_exp+0x2b8>)
 800dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe2:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f7f2 fb15 	bl	8000618 <__aeabi_dmul>
 800dfee:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dff2:	f7f2 f95b 	bl	80002ac <__adddf3>
 800dff6:	f7f2 fdbf 	bl	8000b78 <__aeabi_d2iz>
 800dffa:	4682      	mov	sl, r0
 800dffc:	f7f2 faa2 	bl	8000544 <__aeabi_i2d>
 800e000:	a341      	add	r3, pc, #260	; (adr r3, 800e108 <__ieee754_exp+0x2c0>)
 800e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e006:	4606      	mov	r6, r0
 800e008:	460f      	mov	r7, r1
 800e00a:	f7f2 fb05 	bl	8000618 <__aeabi_dmul>
 800e00e:	4602      	mov	r2, r0
 800e010:	460b      	mov	r3, r1
 800e012:	4620      	mov	r0, r4
 800e014:	4629      	mov	r1, r5
 800e016:	f7f2 f947 	bl	80002a8 <__aeabi_dsub>
 800e01a:	a33d      	add	r3, pc, #244	; (adr r3, 800e110 <__ieee754_exp+0x2c8>)
 800e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e020:	4680      	mov	r8, r0
 800e022:	4689      	mov	r9, r1
 800e024:	4630      	mov	r0, r6
 800e026:	4639      	mov	r1, r7
 800e028:	f7f2 faf6 	bl	8000618 <__aeabi_dmul>
 800e02c:	ec41 0b18 	vmov	d8, r0, r1
 800e030:	e76f      	b.n	800df12 <__ieee754_exp+0xca>
 800e032:	4a41      	ldr	r2, [pc, #260]	; (800e138 <__ieee754_exp+0x2f0>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d811      	bhi.n	800e05c <__ieee754_exp+0x214>
 800e038:	a323      	add	r3, pc, #140	; (adr r3, 800e0c8 <__ieee754_exp+0x280>)
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	ee10 0a10 	vmov	r0, s0
 800e042:	4629      	mov	r1, r5
 800e044:	f7f2 f932 	bl	80002ac <__adddf3>
 800e048:	4b39      	ldr	r3, [pc, #228]	; (800e130 <__ieee754_exp+0x2e8>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	f7f2 fd74 	bl	8000b38 <__aeabi_dcmpgt>
 800e050:	b138      	cbz	r0, 800e062 <__ieee754_exp+0x21a>
 800e052:	4b37      	ldr	r3, [pc, #220]	; (800e130 <__ieee754_exp+0x2e8>)
 800e054:	2200      	movs	r2, #0
 800e056:	4620      	mov	r0, r4
 800e058:	4629      	mov	r1, r5
 800e05a:	e710      	b.n	800de7e <__ieee754_exp+0x36>
 800e05c:	f04f 0a00 	mov.w	sl, #0
 800e060:	e75f      	b.n	800df22 <__ieee754_exp+0xda>
 800e062:	4682      	mov	sl, r0
 800e064:	e75d      	b.n	800df22 <__ieee754_exp+0xda>
 800e066:	4632      	mov	r2, r6
 800e068:	463b      	mov	r3, r7
 800e06a:	2000      	movs	r0, #0
 800e06c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e070:	f7f2 f91a 	bl	80002a8 <__aeabi_dsub>
 800e074:	4602      	mov	r2, r0
 800e076:	460b      	mov	r3, r1
 800e078:	ec51 0b19 	vmov	r0, r1, d9
 800e07c:	f7f2 fbf6 	bl	800086c <__aeabi_ddiv>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	ec51 0b18 	vmov	r0, r1, d8
 800e088:	f7f2 f90e 	bl	80002a8 <__aeabi_dsub>
 800e08c:	4642      	mov	r2, r8
 800e08e:	464b      	mov	r3, r9
 800e090:	f7f2 f90a 	bl	80002a8 <__aeabi_dsub>
 800e094:	4602      	mov	r2, r0
 800e096:	460b      	mov	r3, r1
 800e098:	2000      	movs	r0, #0
 800e09a:	4925      	ldr	r1, [pc, #148]	; (800e130 <__ieee754_exp+0x2e8>)
 800e09c:	f7f2 f904 	bl	80002a8 <__aeabi_dsub>
 800e0a0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800e0a4:	4592      	cmp	sl, r2
 800e0a6:	db02      	blt.n	800e0ae <__ieee754_exp+0x266>
 800e0a8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e0ac:	e6e9      	b.n	800de82 <__ieee754_exp+0x3a>
 800e0ae:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800e0b2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800e0bc:	e6f9      	b.n	800deb2 <__ieee754_exp+0x6a>
 800e0be:	bf00      	nop
 800e0c0:	fefa39ef 	.word	0xfefa39ef
 800e0c4:	40862e42 	.word	0x40862e42
 800e0c8:	8800759c 	.word	0x8800759c
 800e0cc:	7e37e43c 	.word	0x7e37e43c
 800e0d0:	d52d3051 	.word	0xd52d3051
 800e0d4:	c0874910 	.word	0xc0874910
 800e0d8:	72bea4d0 	.word	0x72bea4d0
 800e0dc:	3e663769 	.word	0x3e663769
 800e0e0:	c5d26bf1 	.word	0xc5d26bf1
 800e0e4:	3ebbbd41 	.word	0x3ebbbd41
 800e0e8:	af25de2c 	.word	0xaf25de2c
 800e0ec:	3f11566a 	.word	0x3f11566a
 800e0f0:	16bebd93 	.word	0x16bebd93
 800e0f4:	3f66c16c 	.word	0x3f66c16c
 800e0f8:	5555553e 	.word	0x5555553e
 800e0fc:	3fc55555 	.word	0x3fc55555
 800e100:	652b82fe 	.word	0x652b82fe
 800e104:	3ff71547 	.word	0x3ff71547
 800e108:	fee00000 	.word	0xfee00000
 800e10c:	3fe62e42 	.word	0x3fe62e42
 800e110:	35793c76 	.word	0x35793c76
 800e114:	3dea39ef 	.word	0x3dea39ef
 800e118:	40862e41 	.word	0x40862e41
 800e11c:	7fefffff 	.word	0x7fefffff
 800e120:	3fd62e42 	.word	0x3fd62e42
 800e124:	3ff0a2b1 	.word	0x3ff0a2b1
 800e128:	080408d0 	.word	0x080408d0
 800e12c:	080408e0 	.word	0x080408e0
 800e130:	3ff00000 	.word	0x3ff00000
 800e134:	080408c0 	.word	0x080408c0
 800e138:	3e2fffff 	.word	0x3e2fffff

0800e13c <__ieee754_fmod>:
 800e13c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e140:	ec53 2b11 	vmov	r2, r3, d1
 800e144:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800e148:	ea5e 0402 	orrs.w	r4, lr, r2
 800e14c:	ec51 0b10 	vmov	r0, r1, d0
 800e150:	ee11 7a10 	vmov	r7, s2
 800e154:	ee11 ca10 	vmov	ip, s2
 800e158:	461e      	mov	r6, r3
 800e15a:	d00d      	beq.n	800e178 <__ieee754_fmod+0x3c>
 800e15c:	4c7a      	ldr	r4, [pc, #488]	; (800e348 <__ieee754_fmod+0x20c>)
 800e15e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800e162:	45a0      	cmp	r8, r4
 800e164:	4689      	mov	r9, r1
 800e166:	dc07      	bgt.n	800e178 <__ieee754_fmod+0x3c>
 800e168:	4254      	negs	r4, r2
 800e16a:	4d78      	ldr	r5, [pc, #480]	; (800e34c <__ieee754_fmod+0x210>)
 800e16c:	4314      	orrs	r4, r2
 800e16e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800e172:	42ac      	cmp	r4, r5
 800e174:	46ab      	mov	fp, r5
 800e176:	d909      	bls.n	800e18c <__ieee754_fmod+0x50>
 800e178:	f7f2 fa4e 	bl	8000618 <__aeabi_dmul>
 800e17c:	4602      	mov	r2, r0
 800e17e:	460b      	mov	r3, r1
 800e180:	f7f2 fb74 	bl	800086c <__aeabi_ddiv>
 800e184:	ec41 0b10 	vmov	d0, r0, r1
 800e188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18c:	45f0      	cmp	r8, lr
 800e18e:	ee10 aa10 	vmov	sl, s0
 800e192:	ee10 4a10 	vmov	r4, s0
 800e196:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e19a:	dc0a      	bgt.n	800e1b2 <__ieee754_fmod+0x76>
 800e19c:	dbf2      	blt.n	800e184 <__ieee754_fmod+0x48>
 800e19e:	4290      	cmp	r0, r2
 800e1a0:	d3f0      	bcc.n	800e184 <__ieee754_fmod+0x48>
 800e1a2:	d106      	bne.n	800e1b2 <__ieee754_fmod+0x76>
 800e1a4:	4a6a      	ldr	r2, [pc, #424]	; (800e350 <__ieee754_fmod+0x214>)
 800e1a6:	0fed      	lsrs	r5, r5, #31
 800e1a8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e1ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e1b0:	e7e8      	b.n	800e184 <__ieee754_fmod+0x48>
 800e1b2:	ea19 0f0b 	tst.w	r9, fp
 800e1b6:	d14a      	bne.n	800e24e <__ieee754_fmod+0x112>
 800e1b8:	f1b8 0f00 	cmp.w	r8, #0
 800e1bc:	d13f      	bne.n	800e23e <__ieee754_fmod+0x102>
 800e1be:	4965      	ldr	r1, [pc, #404]	; (800e354 <__ieee754_fmod+0x218>)
 800e1c0:	4653      	mov	r3, sl
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	dc38      	bgt.n	800e238 <__ieee754_fmod+0xfc>
 800e1c6:	4b61      	ldr	r3, [pc, #388]	; (800e34c <__ieee754_fmod+0x210>)
 800e1c8:	4033      	ands	r3, r6
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d14f      	bne.n	800e26e <__ieee754_fmod+0x132>
 800e1ce:	f1be 0f00 	cmp.w	lr, #0
 800e1d2:	d144      	bne.n	800e25e <__ieee754_fmod+0x122>
 800e1d4:	4a5f      	ldr	r2, [pc, #380]	; (800e354 <__ieee754_fmod+0x218>)
 800e1d6:	463b      	mov	r3, r7
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	dc3d      	bgt.n	800e258 <__ieee754_fmod+0x11c>
 800e1dc:	4b5e      	ldr	r3, [pc, #376]	; (800e358 <__ieee754_fmod+0x21c>)
 800e1de:	4299      	cmp	r1, r3
 800e1e0:	db4a      	blt.n	800e278 <__ieee754_fmod+0x13c>
 800e1e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e1e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1ea:	485b      	ldr	r0, [pc, #364]	; (800e358 <__ieee754_fmod+0x21c>)
 800e1ec:	4282      	cmp	r2, r0
 800e1ee:	db57      	blt.n	800e2a0 <__ieee754_fmod+0x164>
 800e1f0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800e1f4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800e1f8:	1a89      	subs	r1, r1, r2
 800e1fa:	1b98      	subs	r0, r3, r6
 800e1fc:	eba4 070c 	sub.w	r7, r4, ip
 800e200:	2900      	cmp	r1, #0
 800e202:	d164      	bne.n	800e2ce <__ieee754_fmod+0x192>
 800e204:	4564      	cmp	r4, ip
 800e206:	bf38      	it	cc
 800e208:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e20c:	2800      	cmp	r0, #0
 800e20e:	bfa4      	itt	ge
 800e210:	463c      	movge	r4, r7
 800e212:	4603      	movge	r3, r0
 800e214:	ea53 0104 	orrs.w	r1, r3, r4
 800e218:	d0c4      	beq.n	800e1a4 <__ieee754_fmod+0x68>
 800e21a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e21e:	db6b      	blt.n	800e2f8 <__ieee754_fmod+0x1bc>
 800e220:	494d      	ldr	r1, [pc, #308]	; (800e358 <__ieee754_fmod+0x21c>)
 800e222:	428a      	cmp	r2, r1
 800e224:	db6e      	blt.n	800e304 <__ieee754_fmod+0x1c8>
 800e226:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e22a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800e22e:	431d      	orrs	r5, r3
 800e230:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800e234:	4620      	mov	r0, r4
 800e236:	e7a5      	b.n	800e184 <__ieee754_fmod+0x48>
 800e238:	3901      	subs	r1, #1
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	e7c1      	b.n	800e1c2 <__ieee754_fmod+0x86>
 800e23e:	4946      	ldr	r1, [pc, #280]	; (800e358 <__ieee754_fmod+0x21c>)
 800e240:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e244:	2b00      	cmp	r3, #0
 800e246:	ddbe      	ble.n	800e1c6 <__ieee754_fmod+0x8a>
 800e248:	3901      	subs	r1, #1
 800e24a:	005b      	lsls	r3, r3, #1
 800e24c:	e7fa      	b.n	800e244 <__ieee754_fmod+0x108>
 800e24e:	ea4f 5128 	mov.w	r1, r8, asr #20
 800e252:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e256:	e7b6      	b.n	800e1c6 <__ieee754_fmod+0x8a>
 800e258:	3a01      	subs	r2, #1
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	e7bc      	b.n	800e1d8 <__ieee754_fmod+0x9c>
 800e25e:	4a3e      	ldr	r2, [pc, #248]	; (800e358 <__ieee754_fmod+0x21c>)
 800e260:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800e264:	2b00      	cmp	r3, #0
 800e266:	ddb9      	ble.n	800e1dc <__ieee754_fmod+0xa0>
 800e268:	3a01      	subs	r2, #1
 800e26a:	005b      	lsls	r3, r3, #1
 800e26c:	e7fa      	b.n	800e264 <__ieee754_fmod+0x128>
 800e26e:	ea4f 522e 	mov.w	r2, lr, asr #20
 800e272:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e276:	e7b1      	b.n	800e1dc <__ieee754_fmod+0xa0>
 800e278:	1a5c      	subs	r4, r3, r1
 800e27a:	2c1f      	cmp	r4, #31
 800e27c:	dc0a      	bgt.n	800e294 <__ieee754_fmod+0x158>
 800e27e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800e282:	fa08 f804 	lsl.w	r8, r8, r4
 800e286:	fa2a f303 	lsr.w	r3, sl, r3
 800e28a:	ea43 0308 	orr.w	r3, r3, r8
 800e28e:	fa0a f404 	lsl.w	r4, sl, r4
 800e292:	e7aa      	b.n	800e1ea <__ieee754_fmod+0xae>
 800e294:	4b31      	ldr	r3, [pc, #196]	; (800e35c <__ieee754_fmod+0x220>)
 800e296:	1a5b      	subs	r3, r3, r1
 800e298:	fa0a f303 	lsl.w	r3, sl, r3
 800e29c:	2400      	movs	r4, #0
 800e29e:	e7a4      	b.n	800e1ea <__ieee754_fmod+0xae>
 800e2a0:	eba0 0c02 	sub.w	ip, r0, r2
 800e2a4:	f1bc 0f1f 	cmp.w	ip, #31
 800e2a8:	dc0a      	bgt.n	800e2c0 <__ieee754_fmod+0x184>
 800e2aa:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800e2ae:	fa0e fe0c 	lsl.w	lr, lr, ip
 800e2b2:	fa27 f606 	lsr.w	r6, r7, r6
 800e2b6:	ea46 060e 	orr.w	r6, r6, lr
 800e2ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 800e2be:	e79b      	b.n	800e1f8 <__ieee754_fmod+0xbc>
 800e2c0:	4e26      	ldr	r6, [pc, #152]	; (800e35c <__ieee754_fmod+0x220>)
 800e2c2:	1ab6      	subs	r6, r6, r2
 800e2c4:	fa07 f606 	lsl.w	r6, r7, r6
 800e2c8:	f04f 0c00 	mov.w	ip, #0
 800e2cc:	e794      	b.n	800e1f8 <__ieee754_fmod+0xbc>
 800e2ce:	4564      	cmp	r4, ip
 800e2d0:	bf38      	it	cc
 800e2d2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	da05      	bge.n	800e2e6 <__ieee754_fmod+0x1aa>
 800e2da:	0fe0      	lsrs	r0, r4, #31
 800e2dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e2e0:	0064      	lsls	r4, r4, #1
 800e2e2:	3901      	subs	r1, #1
 800e2e4:	e789      	b.n	800e1fa <__ieee754_fmod+0xbe>
 800e2e6:	ea50 0307 	orrs.w	r3, r0, r7
 800e2ea:	f43f af5b 	beq.w	800e1a4 <__ieee754_fmod+0x68>
 800e2ee:	0ffb      	lsrs	r3, r7, #31
 800e2f0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e2f4:	007c      	lsls	r4, r7, #1
 800e2f6:	e7f4      	b.n	800e2e2 <__ieee754_fmod+0x1a6>
 800e2f8:	0fe1      	lsrs	r1, r4, #31
 800e2fa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e2fe:	0064      	lsls	r4, r4, #1
 800e300:	3a01      	subs	r2, #1
 800e302:	e78a      	b.n	800e21a <__ieee754_fmod+0xde>
 800e304:	1a89      	subs	r1, r1, r2
 800e306:	2914      	cmp	r1, #20
 800e308:	dc0a      	bgt.n	800e320 <__ieee754_fmod+0x1e4>
 800e30a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e30e:	fa03 f202 	lsl.w	r2, r3, r2
 800e312:	40cc      	lsrs	r4, r1
 800e314:	4322      	orrs	r2, r4
 800e316:	410b      	asrs	r3, r1
 800e318:	ea43 0105 	orr.w	r1, r3, r5
 800e31c:	4610      	mov	r0, r2
 800e31e:	e731      	b.n	800e184 <__ieee754_fmod+0x48>
 800e320:	291f      	cmp	r1, #31
 800e322:	dc07      	bgt.n	800e334 <__ieee754_fmod+0x1f8>
 800e324:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e328:	40cc      	lsrs	r4, r1
 800e32a:	fa03 f202 	lsl.w	r2, r3, r2
 800e32e:	4322      	orrs	r2, r4
 800e330:	462b      	mov	r3, r5
 800e332:	e7f1      	b.n	800e318 <__ieee754_fmod+0x1dc>
 800e334:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800e338:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e33c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800e340:	32e2      	adds	r2, #226	; 0xe2
 800e342:	fa43 f202 	asr.w	r2, r3, r2
 800e346:	e7f3      	b.n	800e330 <__ieee754_fmod+0x1f4>
 800e348:	7fefffff 	.word	0x7fefffff
 800e34c:	7ff00000 	.word	0x7ff00000
 800e350:	080408f0 	.word	0x080408f0
 800e354:	fffffbed 	.word	0xfffffbed
 800e358:	fffffc02 	.word	0xfffffc02
 800e35c:	fffffbe2 	.word	0xfffffbe2

0800e360 <finite>:
 800e360:	b082      	sub	sp, #8
 800e362:	ed8d 0b00 	vstr	d0, [sp]
 800e366:	9801      	ldr	r0, [sp, #4]
 800e368:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e36c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e370:	0fc0      	lsrs	r0, r0, #31
 800e372:	b002      	add	sp, #8
 800e374:	4770      	bx	lr
	...

0800e378 <_init>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	bf00      	nop
 800e37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37e:	bc08      	pop	{r3}
 800e380:	469e      	mov	lr, r3
 800e382:	4770      	bx	lr

0800e384 <_fini>:
 800e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e386:	bf00      	nop
 800e388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e38a:	bc08      	pop	{r3}
 800e38c:	469e      	mov	lr, r3
 800e38e:	4770      	bx	lr
