
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de6c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00032530  0800e030  0800e030  0001e030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040560  08040560  00060660  2**0
                  CONTENTS
  4 .ARM          00000008  08040560  08040560  00050560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040568  08040568  00060660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040568  08040568  00050568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804056c  0804056c  0005056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000660  20000000  08040570  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a3a4  20000660  08040bd0  00060660  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001aa04  08040bd0  0006aa04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060660  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd92  00000000  00000000  00060690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004df3  00000000  00000000  0008d422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  00092218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  00093e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f8ac  00000000  00000000  00095938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002044e  00000000  00000000  000c51e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011cc73  00000000  00000000  000e5632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  002022a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008568  00000000  00000000  00202370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  0020a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000660 	.word	0x20000660
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e014 	.word	0x0800e014

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000664 	.word	0x20000664
 80001fc:	0800e014 	.word	0x0800e014

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f901 	bl	8001172 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f70:	2005      	movs	r0, #5
 8000f72:	f00a fa25 	bl	800b3c0 <HAL_InitTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e001      	b.n	8000f86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f82:	f00a f833 	bl	800afec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	20002020 	.word	0x20002020

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20002020 	.word	0x20002020

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000004 	.word	0x20000004

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff4c 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119a:	f7ff ff61 	bl	8001060 <__NVIC_GetPriorityGrouping>
 800119e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff ffb1 	bl	800110c <NVIC_EncodePriority>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff80 	bl	80010b8 <__NVIC_SetPriority>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff54 	bl	800107c <__NVIC_EnableIRQ>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e014      	b.n	8001218 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f009 ff1c 	bl	800b03c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	795b      	ldrb	r3, [r3, #5]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_DAC_Start+0x16>
 8001232:	2302      	movs	r3, #2
 8001234:	e040      	b.n	80012b8 <HAL_DAC_Start+0x98>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2202      	movs	r2, #2
 8001240:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	2201      	movs	r2, #1
 8001250:	409a      	lsls	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10f      	bne.n	8001280 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800126a:	2b02      	cmp	r3, #2
 800126c:	d11d      	bne.n	80012aa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	e014      	b.n	80012aa <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2102      	movs	r1, #2
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	429a      	cmp	r2, r3
 8001298:	d107      	bne.n	80012aa <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0202 	orr.w	r2, r2, #2
 80012a8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	795b      	ldrb	r3, [r3, #5]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_DAC_Start_DMA+0x1e>
 80012de:	2302      	movs	r3, #2
 80012e0:	e0ab      	b.n	800143a <HAL_DAC_Start_DMA+0x176>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2202      	movs	r2, #2
 80012ec:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d12f      	bne.n	8001354 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_DAC_Start_DMA+0x180>)
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_DAC_Start_DMA+0x184>)
 8001302:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_DAC_Start_DMA+0x188>)
 800130a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800131a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	2b08      	cmp	r3, #8
 8001320:	d013      	beq.n	800134a <HAL_DAC_Start_DMA+0x86>
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d845      	bhi.n	80013b4 <HAL_DAC_Start_DMA+0xf0>
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_DAC_Start_DMA+0x72>
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	2b04      	cmp	r3, #4
 8001332:	d005      	beq.n	8001340 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001334:	e03e      	b.n	80013b4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3308      	adds	r3, #8
 800133c:	613b      	str	r3, [r7, #16]
        break;
 800133e:	e03c      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	330c      	adds	r3, #12
 8001346:	613b      	str	r3, [r7, #16]
        break;
 8001348:	e037      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3310      	adds	r3, #16
 8001350:	613b      	str	r3, [r7, #16]
        break;
 8001352:	e032      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a3d      	ldr	r2, [pc, #244]	; (8001450 <HAL_DAC_Start_DMA+0x18c>)
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4a3c      	ldr	r2, [pc, #240]	; (8001454 <HAL_DAC_Start_DMA+0x190>)
 8001362:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <HAL_DAC_Start_DMA+0x194>)
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b08      	cmp	r3, #8
 8001380:	d013      	beq.n	80013aa <HAL_DAC_Start_DMA+0xe6>
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d817      	bhi.n	80013b8 <HAL_DAC_Start_DMA+0xf4>
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_DAC_Start_DMA+0xd2>
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d005      	beq.n	80013a0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001394:	e010      	b.n	80013b8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3314      	adds	r3, #20
 800139c:	613b      	str	r3, [r7, #16]
        break;
 800139e:	e00c      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3318      	adds	r3, #24
 80013a6:	613b      	str	r3, [r7, #16]
        break;
 80013a8:	e007      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	331c      	adds	r3, #28
 80013b0:	613b      	str	r3, [r7, #16]
        break;
 80013b2:	e002      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        break;
 80013b4:	bf00      	nop
 80013b6:	e000      	b.n	80013ba <HAL_DAC_Start_DMA+0xf6>
        break;
 80013b8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d111      	bne.n	80013e4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6898      	ldr	r0, [r3, #8]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	f000 fb63 	bl	8001aa4 <HAL_DMA_Start_IT>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]
 80013e2:	e010      	b.n	8001406 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	68d8      	ldr	r0, [r3, #12]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	f000 fb51 	bl	8001aa4 <HAL_DMA_Start_IT>
 8001402:	4603      	mov	r3, r0
 8001404:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10c      	bne.n	800142c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6819      	ldr	r1, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2201      	movs	r2, #1
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e005      	b.n	8001438 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f043 0204 	orr.w	r2, r3, #4
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	0800182d 	.word	0x0800182d
 8001448:	0800184f 	.word	0x0800184f
 800144c:	0800186b 	.word	0x0800186b
 8001450:	080018e9 	.word	0x080018e9
 8001454:	0800190b 	.word	0x0800190b
 8001458:	08001927 	.word	0x08001927

0800145c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800146e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001472:	d120      	bne.n	80014b6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001482:	d118      	bne.n	80014b6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	f043 0201 	orr.w	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014ae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f870 	bl	8001596 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c4:	d120      	bne.n	8001508 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014d4:	d118      	bne.n	8001508 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2204      	movs	r2, #4
 80014da:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f043 0202 	orr.w	r2, r3, #2
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001500:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f9e6 	bl	80018d4 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	3308      	adds	r3, #8
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e004      	b.n	8001544 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	3314      	adds	r3, #20
 8001542:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	461a      	mov	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_DAC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e12a      	b.n	800181e <HAL_DAC_ConfigChannel+0x272>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2202      	movs	r2, #2
 80015d2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d174      	bne.n	80016c6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80015dc:	f7ff fcec 	bl	8000fb8 <HAL_GetTick>
 80015e0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d134      	bne.n	8001652 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015e8:	e011      	b.n	800160e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015ea:	f7ff fce5 	bl	8000fb8 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d90a      	bls.n	800160e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f043 0208 	orr.w	r2, r3, #8
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2203      	movs	r2, #3
 8001608:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e107      	b.n	800181e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e6      	bne.n	80015ea <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fcd7 	bl	8000fd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	69d2      	ldr	r2, [r2, #28]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
 800162c:	e01e      	b.n	800166c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800162e:	f7ff fcc3 	bl	8000fb8 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d90a      	bls.n	8001652 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	f043 0208 	orr.w	r2, r3, #8
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2203      	movs	r2, #3
 800164c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0e5      	b.n	800181e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	dbe8      	blt.n	800162e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff fcb7 	bl	8000fd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	69d2      	ldr	r2, [r2, #28]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	ea02 0103 	and.w	r1, r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	6a1a      	ldr	r2, [r3, #32]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	409a      	lsls	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	21ff      	movs	r1, #255	; 0xff
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	ea02 0103 	and.w	r1, r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d11d      	bne.n	800170a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d4:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	221f      	movs	r2, #31
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001710:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2207      	movs	r2, #7
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69fa      	ldr	r2, [r7, #28]
 8001722:	4013      	ands	r3, r2
 8001724:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	431a      	orrs	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	4313      	orrs	r3, r2
 8001748:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	4013      	ands	r3, r2
 800178c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ae:	d104      	bne.n	80017ba <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	e018      	b.n	80017ec <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e00f      	b.n	80017ec <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80017cc:	f001 fc3c 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 80017d0:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_DAC_ConfigChannel+0x27c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d904      	bls.n	80017e4 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e003      	b.n	80017ec <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017ea:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6819      	ldr	r1, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	22c0      	movs	r2, #192	; 0xc0
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	400a      	ands	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	04c4b400 	.word	0x04c4b400

0800182c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff fe8d 	bl	800155a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	711a      	strb	r2, [r3, #4]
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fe86 	bl	800156e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f043 0204 	orr.w	r2, r3, #4
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff fe7c 	bl	8001582 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	711a      	strb	r2, [r3, #4]
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7ff ffce 	bl	8001898 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	711a      	strb	r2, [r3, #4]
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff ffc7 	bl	80018ac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f043 0204 	orr.w	r2, r3, #4
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff ffbd 	bl	80018c0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	711a      	strb	r2, [r3, #4]
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e08d      	b.n	8001a82 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_DMA_Init+0x138>)
 800196e:	429a      	cmp	r2, r3
 8001970:	d80f      	bhi.n	8001992 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <HAL_DMA_Init+0x13c>)
 800197a:	4413      	add	r3, r2
 800197c:	4a45      	ldr	r2, [pc, #276]	; (8001a94 <HAL_DMA_Init+0x140>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	009a      	lsls	r2, r3, #2
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a42      	ldr	r2, [pc, #264]	; (8001a98 <HAL_DMA_Init+0x144>)
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
 8001990:	e00e      	b.n	80019b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b40      	ldr	r3, [pc, #256]	; (8001a9c <HAL_DMA_Init+0x148>)
 800199a:	4413      	add	r3, r2
 800199c:	4a3d      	ldr	r2, [pc, #244]	; (8001a94 <HAL_DMA_Init+0x140>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a3c      	ldr	r2, [pc, #240]	; (8001aa0 <HAL_DMA_Init+0x14c>)
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa72 	bl	8001eec <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a10:	d102      	bne.n	8001a18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a2c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <HAL_DMA_Init+0x104>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d80c      	bhi.n	8001a58 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fa92 	bl	8001f68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	e008      	b.n	8001a6a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40020407 	.word	0x40020407
 8001a90:	bffdfff8 	.word	0xbffdfff8
 8001a94:	cccccccd 	.word	0xcccccccd
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	bffdfbf8 	.word	0xbffdfbf8
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_DMA_Start_IT+0x20>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e066      	b.n	8001b92 <HAL_DMA_Start_IT+0xee>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d155      	bne.n	8001b84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f9b6 	bl	8001e6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 020e 	orr.w	r2, r2, #14
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e00f      	b.n	8001b3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0204 	bic.w	r2, r2, #4
 8001b2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 020a 	orr.w	r2, r2, #10
 8001b3a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b58:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e005      	b.n	8001b90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d008      	beq.n	8001bc4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e040      	b.n	8001c46 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f003 021c 	and.w	r2, r3, #28
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c32:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d005      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e047      	b.n	8001d06 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 020e 	bic.w	r2, r2, #14
 8001c84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f003 021c 	and.w	r2, r3, #28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00c      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ce4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
    }
  }
  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f003 031c 	and.w	r3, r3, #28
 8001d30:	2204      	movs	r2, #4
 8001d32:	409a      	lsls	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d026      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x7a>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d021      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d107      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0204 	bic.w	r2, r2, #4
 8001d62:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f003 021c 	and.w	r2, r3, #28
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2104      	movs	r1, #4
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d071      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	e06c      	b.n	8001e64 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f003 031c 	and.w	r3, r3, #28
 8001d92:	2202      	movs	r2, #2
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d02e      	beq.n	8001dfc <HAL_DMA_IRQHandler+0xec>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d029      	beq.n	8001dfc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10b      	bne.n	8001dce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 020a 	bic.w	r2, r2, #10
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f003 021c 	and.w	r2, r3, #28
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2102      	movs	r1, #2
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d038      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001dfa:	e033      	b.n	8001e64 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	f003 031c 	and.w	r3, r3, #28
 8001e04:	2208      	movs	r2, #8
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d02a      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x156>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d025      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 020e 	bic.w	r2, r2, #14
 8001e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f003 021c 	and.w	r2, r3, #28
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
}
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e84:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e96:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f003 021c 	and.w	r2, r3, #28
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eaa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d108      	bne.n	8001ece <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ecc:	e007      	b.n	8001ede <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	60da      	str	r2, [r3, #12]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d80a      	bhi.n	8001f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f0c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6493      	str	r3, [r2, #72]	; 0x48
 8001f14:	e007      	b.n	8001f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	009a      	lsls	r2, r3, #2
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001f20:	4413      	add	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	3b08      	subs	r3, #8
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2201      	movs	r2, #1
 8001f46:	409a      	lsls	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40020407 	.word	0x40020407
 8001f5c:	4002081c 	.word	0x4002081c
 8001f60:	cccccccd 	.word	0xcccccccd
 8001f64:	40020880 	.word	0x40020880

08001f68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a08      	ldr	r2, [pc, #32]	; (8001fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2201      	movs	r2, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	1000823f 	.word	0x1000823f
 8001fac:	40020940 	.word	0x40020940

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e166      	b.n	800228e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8158 	beq.w	8002288 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80b2 	beq.w	8002288 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	4a60      	ldr	r2, [pc, #384]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6613      	str	r3, [r2, #96]	; 0x60
 8002130:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_GPIO_Init+0x2fc>)
 8002132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800213c:	4a5c      	ldr	r2, [pc, #368]	; (80022b0 <HAL_GPIO_Init+0x300>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002166:	d02b      	beq.n	80021c0 <HAL_GPIO_Init+0x210>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_GPIO_Init+0x304>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d025      	beq.n	80021bc <HAL_GPIO_Init+0x20c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <HAL_GPIO_Init+0x308>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d01f      	beq.n	80021b8 <HAL_GPIO_Init+0x208>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a50      	ldr	r2, [pc, #320]	; (80022bc <HAL_GPIO_Init+0x30c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d019      	beq.n	80021b4 <HAL_GPIO_Init+0x204>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4f      	ldr	r2, [pc, #316]	; (80022c0 <HAL_GPIO_Init+0x310>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x200>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4e      	ldr	r2, [pc, #312]	; (80022c4 <HAL_GPIO_Init+0x314>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1fc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a4d      	ldr	r2, [pc, #308]	; (80022c8 <HAL_GPIO_Init+0x318>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1f8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_GPIO_Init+0x31c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1f4>
 80021a0:	2307      	movs	r3, #7
 80021a2:	e00e      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a4:	2308      	movs	r3, #8
 80021a6:	e00c      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021a8:	2306      	movs	r3, #6
 80021aa:	e00a      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021ac:	2305      	movs	r3, #5
 80021ae:	e008      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b0:	2304      	movs	r3, #4
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e004      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_Init+0x212>
 80021c0:	2300      	movs	r3, #0
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021d2:	4937      	ldr	r1, [pc, #220]	; (80022b0 <HAL_GPIO_Init+0x300>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_GPIO_Init+0x320>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002204:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_GPIO_Init+0x320>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800222e:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x320>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_GPIO_Init+0x320>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f ae91 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010000 	.word	0x40010000
 80022b4:	48000400 	.word	0x48000400
 80022b8:	48000800 	.word	0x48000800
 80022bc:	48000c00 	.word	0x48000c00
 80022c0:	48001000 	.word	0x48001000
 80022c4:	48001400 	.word	0x48001400
 80022c8:	48001800 	.word	0x48001800
 80022cc:	48001c00 	.word	0x48001c00
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_PWREx_GetVoltageRange+0x3c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002314:	d102      	bne.n	800231c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231a:	e00b      	b.n	8002334 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_PWREx_GetVoltageRange+0x3c>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232a:	d102      	bne.n	8002332 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800232c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002330:	e000      	b.n	8002334 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002332:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40007000 	.word	0x40007000

08002344 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d141      	bne.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002352:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235e:	d131      	bne.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002360:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002366:	4a46      	ldr	r2, [pc, #280]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800236c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002378:	4a41      	ldr	r2, [pc, #260]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002380:	4b40      	ldr	r3, [pc, #256]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2232      	movs	r2, #50	; 0x32
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002396:	e002      	b.n	800239e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3b01      	subs	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239e:	4b38      	ldr	r3, [pc, #224]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023aa:	d102      	bne.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f2      	bne.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	d158      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e057      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ca:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023d4:	e04d      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	d141      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023de:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d131      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002404:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2232      	movs	r2, #50	; 0x32
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	0c9b      	lsrs	r3, r3, #18
 800241e:	3301      	adds	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002422:	e002      	b.n	800242a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3b01      	subs	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d102      	bne.n	800243e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f2      	bne.n	8002424 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d112      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e011      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002460:	e007      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002470:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40007000 	.word	0x40007000
 8002484:	200005e4 	.word	0x200005e4
 8002488:	431bde83 	.word	0x431bde83

0800248c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f000 bc16 	b.w	8002ccc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a0:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024aa:	4b9e      	ldr	r3, [pc, #632]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80e4 	beq.w	800268a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4c>
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	f040 808b 	bne.w	80025e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 8087 	bne.w	80025e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d8:	4b92      	ldr	r3, [pc, #584]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x64>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e3ed      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	4b8b      	ldr	r3, [pc, #556]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_RCC_OscConfig+0x7e>
 8002500:	4b88      	ldr	r3, [pc, #544]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	e005      	b.n	8002516 <HAL_RCC_OscConfig+0x8a>
 800250a:	4b86      	ldr	r3, [pc, #536]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800250c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002516:	4293      	cmp	r3, r2
 8002518:	d223      	bcs.n	8002562 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fdfc 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e3ce      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800252e:	4b7d      	ldr	r3, [pc, #500]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7c      	ldr	r2, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4977      	ldr	r1, [pc, #476]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254c:	4b75      	ldr	r3, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	4972      	ldr	r1, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
 8002560:	e025      	b.n	80025ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002562:	4b70      	ldr	r3, [pc, #448]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6f      	ldr	r2, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002568:	f043 0308 	orr.w	r3, r3, #8
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	496a      	ldr	r1, [pc, #424]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	4965      	ldr	r1, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fdbc 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e38e      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ae:	f000 fcbf 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	495a      	ldr	r1, [pc, #360]	; (8002728 <HAL_RCC_OscConfig+0x29c>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x2a0>)
 80025cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025ce:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x2a4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f008 fef4 	bl	800b3c0 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d052      	beq.n	8002688 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	e372      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d032      	beq.n	8002654 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ee:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fcdd 	bl	8000fb8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002602:	f7fe fcd9 	bl	8000fb8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e35b      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002614:	4b43      	ldr	r3, [pc, #268]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002620:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002626:	f043 0308 	orr.w	r3, r3, #8
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	493a      	ldr	r1, [pc, #232]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	4935      	ldr	r1, [pc, #212]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
 8002652:	e01a      	b.n	800268a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a32      	ldr	r2, [pc, #200]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002660:	f7fe fcaa 	bl	8000fb8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7fe fca6 	bl	8000fb8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e328      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800267a:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1dc>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d073      	beq.n	800277e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x21c>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d10e      	bne.n	80026c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d10b      	bne.n	80026c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d063      	beq.n	800277c <HAL_RCC_OscConfig+0x2f0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d15f      	bne.n	800277c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e305      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x24c>
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0x288>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x270>
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x288>
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a05      	ldr	r2, [pc, #20]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01b      	beq.n	8002754 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fc4c 	bl	8000fb8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002722:	e010      	b.n	8002746 <HAL_RCC_OscConfig+0x2ba>
 8002724:	40021000 	.word	0x40021000
 8002728:	0803fb48 	.word	0x0803fb48
 800272c:	200005e4 	.word	0x200005e4
 8002730:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fc40 	bl	8000fb8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e2c2      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	4baf      	ldr	r3, [pc, #700]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x2a8>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fc30 	bl	8000fb8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe fc2c 	bl	8000fb8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e2ae      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276e:	4ba5      	ldr	r3, [pc, #660]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x2d0>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d060      	beq.n	800284c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d005      	beq.n	800279c <HAL_RCC_OscConfig+0x310>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d119      	bne.n	80027ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d116      	bne.n	80027ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800279c:	4b99      	ldr	r3, [pc, #612]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_OscConfig+0x328>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e28b      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	4990      	ldr	r1, [pc, #576]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c8:	e040      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d023      	beq.n	800281a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d2:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a8b      	ldr	r2, [pc, #556]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fbeb 	bl	8000fb8 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe fbe7 	bl	8000fb8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e269      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f8:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	497c      	ldr	r1, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e018      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a79      	ldr	r2, [pc, #484]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fbc7 	bl	8000fb8 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fbc3 	bl	8000fb8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e245      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002840:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01c      	beq.n	800289a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	4a67      	ldr	r2, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fba2 	bl	8000fb8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe fb9e 	bl	8000fb8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e220      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800288a:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <HAL_RCC_OscConfig+0x3ec>
 8002898:	e01b      	b.n	80028d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289a:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800289c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fb85 	bl	8000fb8 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe fb81 	bl	8000fb8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e203      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ef      	bne.n	80028b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80a6 	beq.w	8002a2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028e4:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10d      	bne.n	800290c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	; 0x58
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290c:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d118      	bne.n	800294a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3a      	ldr	r2, [pc, #232]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002924:	f7fe fb48 	bl	8000fb8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe fb44 	bl	8000fb8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1c6      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293e:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_RCC_OscConfig+0x4d8>
 8002952:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002962:	e024      	b.n	80029ae <HAL_RCC_OscConfig+0x522>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d110      	bne.n	800298e <HAL_RCC_OscConfig+0x502>
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298c:	e00f      	b.n	80029ae <HAL_RCC_OscConfig+0x522>
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d016      	beq.n	80029e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe faff 	bl	8000fb8 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fafb 	bl	8000fb8 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e17b      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ed      	beq.n	80029be <HAL_RCC_OscConfig+0x532>
 80029e2:	e01a      	b.n	8002a1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fae8 	bl	8000fb8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fae4 	bl	8000fb8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d906      	bls.n	8002a0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e164      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0c:	4ba8      	ldr	r3, [pc, #672]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e8      	bne.n	80029ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4ba3      	ldr	r3, [pc, #652]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	4aa2      	ldr	r2, [pc, #648]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d03c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a40:	4b9b      	ldr	r3, [pc, #620]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a46:	4a9a      	ldr	r2, [pc, #616]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe fab2 	bl	8000fb8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a58:	f7fe faae 	bl	8000fb8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e130      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a6a:	4b91      	ldr	r3, [pc, #580]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCC_OscConfig+0x5cc>
 8002a78:	e01b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a7a:	4b8d      	ldr	r3, [pc, #564]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a80:	4a8b      	ldr	r2, [pc, #556]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fa95 	bl	8000fb8 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a92:	f7fe fa91 	bl	8000fb8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e113      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa4:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ef      	bne.n	8002a92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8107 	beq.w	8002cca <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f040 80cb 	bne.w	8002c5c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d12c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d123      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d11b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d113      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d06d      	beq.n	8002c10 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d068      	beq.n	8002c0c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b46:	4b5a      	ldr	r3, [pc, #360]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0ba      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b62:	f7fe fa29 	bl	8000fb8 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fa25 	bl	8000fb8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0a7      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b88:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <HAL_RCC_OscConfig+0x828>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba2:	0212      	lsls	r2, r2, #8
 8002ba4:	4311      	orrs	r1, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002baa:	0852      	lsrs	r2, r2, #1
 8002bac:	3a01      	subs	r2, #1
 8002bae:	0552      	lsls	r2, r2, #21
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bb6:	0852      	lsrs	r2, r2, #1
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	0652      	lsls	r2, r2, #25
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc2:	06d2      	lsls	r2, r2, #27
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	493a      	ldr	r1, [pc, #232]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a37      	ldr	r2, [pc, #220]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be4:	f7fe f9e8 	bl	8000fb8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe f9e4 	bl	8000fb8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e066      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c0a:	e05e      	b.n	8002cca <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e05d      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d156      	bne.n	8002cca <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a20      	ldr	r2, [pc, #128]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c34:	f7fe f9c0 	bl	8000fb8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe f9bc 	bl	8000fb8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e03e      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x7b0>
 8002c5a:	e036      	b.n	8002cca <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d031      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c80:	f023 0303 	bic.w	r3, r3, #3
 8002c84:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_OscConfig+0x824>)
 8002c8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe f98f 	bl	8000fb8 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	e00c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe f98b 	bl	8000fb8 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d905      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e00d      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCC_OscConfig+0x848>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ec      	bne.n	8002c9e <HAL_RCC_OscConfig+0x812>
 8002cc4:	e001      	b.n	8002cca <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e10f      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b86      	ldr	r3, [pc, #536]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	4984      	ldr	r1, [pc, #528]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0f7      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8089 	beq.w	8002e40 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d133      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0e4      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d46:	f000 fa43 	bl	80031d0 <RCC_GetSysClockFreqFromPLLSource>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4a74      	ldr	r2, [pc, #464]	; (8002f20 <HAL_RCC_ClockConfig+0x248>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d955      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d5e:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d66:	4a6d      	ldr	r2, [pc, #436]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e044      	b.n	8002dfe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d03e      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x126>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d13a      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d88:	4b64      	ldr	r3, [pc, #400]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d90:	4a62      	ldr	r2, [pc, #392]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d96:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e02f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da6:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d115      	bne.n	8002dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0ac      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dbe:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0a0      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dce:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e098      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002dde:	f000 f8a7 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a4e      	ldr	r2, [pc, #312]	; (8002f20 <HAL_RCC_ClockConfig+0x248>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d909      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dea:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	4a4a      	ldr	r2, [pc, #296]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4944      	ldr	r1, [pc, #272]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fe f8d2 	bl	8000fb8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e18:	f7fe f8ce 	bl	8000fb8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e070      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 020c 	and.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1eb      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4930      	ldr	r1, [pc, #192]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e66:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e70:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d210      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 020f 	bic.w	r2, r3, #15
 8002e88:	4923      	ldr	r1, [pc, #140]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCC_ClockConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e036      	b.n	8002f10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4918      	ldr	r1, [pc, #96]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4910      	ldr	r1, [pc, #64]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee0:	f000 f826 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <HAL_RCC_ClockConfig+0x24c>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x250>)
 8002efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x254>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f008 fa5b 	bl	800b3c0 <HAL_InitTick>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	04c4b400 	.word	0x04c4b400
 8002f24:	0803fb48 	.word	0x0803fb48
 8002f28:	200005e4 	.word	0x200005e4
 8002f2c:	20000000 	.word	0x20000000

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f48:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d121      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d11e      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f70:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f80:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f8c:	4a2b      	ldr	r2, [pc, #172]	; (800303c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e004      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb4:	4b23      	ldr	r3, [pc, #140]	; (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d134      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xac>
 8002fd4:	e005      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd8:	617b      	str	r3, [r7, #20]
      break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fde:	617b      	str	r3, [r7, #20]
      break;
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	617b      	str	r3, [r7, #20]
      break;
 8002fe6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	fb02 f203 	mul.w	r2, r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	0e5b      	lsrs	r3, r3, #25
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	3301      	adds	r3, #1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003028:	69bb      	ldr	r3, [r7, #24]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	0803fb60 	.word	0x0803fb60
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	200005e4 	.word	0x200005e4

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4904      	ldr	r1, [pc, #16]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	0803fb58 	.word	0x0803fb58

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003090:	f7ff ffda 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0adb      	lsrs	r3, r3, #11
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	0803fb58 	.word	0x0803fb58

080030b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	220f      	movs	r2, #15
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	08db      	lsrs	r3, r3, #3
 80030f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCC_GetClockConfig+0x60>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40022000 	.word	0x40022000

0800311c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f8e6 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
 800313a:	e014      	b.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f8d6 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316c:	d10b      	bne.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d913      	bls.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2ba0      	cmp	r3, #160	; 0xa0
 8003178:	d902      	bls.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800317a:	2302      	movs	r3, #2
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e00d      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003180:	2301      	movs	r3, #1
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e00a      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b7f      	cmp	r3, #127	; 0x7f
 800318a:	d902      	bls.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800318c:	2302      	movs	r3, #2
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e004      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d101      	bne.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003198:	2301      	movs	r3, #1
 800319a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 020f 	bic.w	r2, r3, #15
 80031a4:	4909      	ldr	r1, [pc, #36]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40022000 	.word	0x40022000

080031d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d118      	bne.n	8003218 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e005      	b.n	800320e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003216:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d003      	beq.n	8003230 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d003      	beq.n	8003236 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800322e:	e005      	b.n	800323c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003232:	613b      	str	r3, [r7, #16]
    break;
 8003234:	e005      	b.n	8003242 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003238:	613b      	str	r3, [r7, #16]
    break;
 800323a:	e002      	b.n	8003242 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]
    break;
 8003240:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	3301      	adds	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	fb02 f203 	mul.w	r2, r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0e5b      	lsrs	r3, r3, #25
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	3301      	adds	r3, #1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003282:	683b      	ldr	r3, [r7, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40021000 	.word	0x40021000
 8003294:	0803fb60 	.word	0x0803fb60
 8003298:	00f42400 	.word	0x00f42400
 800329c:	007a1200 	.word	0x007a1200

080032a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032a8:	2300      	movs	r3, #0
 80032aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032ac:	2300      	movs	r3, #0
 80032ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d040      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d02a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d825      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032c8:	2b60      	cmp	r3, #96	; 0x60
 80032ca:	d026      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032cc:	2b60      	cmp	r3, #96	; 0x60
 80032ce:	d821      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d006      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d81d      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d009      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d010      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032e0:	e018      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032e2:	4b89      	ldr	r3, [pc, #548]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a88      	ldr	r2, [pc, #544]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ee:	e015      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fb02 	bl	8003900 <RCCEx_PLLSAI1_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003300:	e00c      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3320      	adds	r3, #32
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fbed 	bl	8003ae8 <RCCEx_PLLSAI2_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	74fb      	strb	r3, [r7, #19]
      break;
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800331a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003322:	4b79      	ldr	r3, [pc, #484]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003328:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003330:	4975      	ldr	r1, [pc, #468]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003338:	e001      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d047      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d030      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d82a      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800335a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335e:	d02a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003364:	d824      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800336c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003370:	d81e      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337a:	d010      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800337c:	e018      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800337e:	4b62      	ldr	r3, [pc, #392]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a61      	ldr	r2, [pc, #388]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800338a:	e015      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fab4 	bl	8003900 <RCCEx_PLLSAI1_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800339c:	e00c      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3320      	adds	r3, #32
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fb9f 	bl	8003ae8 <RCCEx_PLLSAI2_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	74fb      	strb	r3, [r7, #19]
      break;
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80033b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033be:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	494e      	ldr	r1, [pc, #312]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033d4:	e001      	b.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 809f 	beq.w	8003526 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ec:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	4a40      	ldr	r2, [pc, #256]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6593      	str	r3, [r2, #88]	; 0x58
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3a      	ldr	r2, [pc, #232]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800342a:	f7fd fdc5 	bl	8000fb8 <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003430:	e009      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fd fdc1 	bl	8000fb8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d902      	bls.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	74fb      	strb	r3, [r7, #19]
        break;
 8003444:	e005      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003446:	4b31      	ldr	r3, [pc, #196]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ef      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d15b      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01f      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	429a      	cmp	r2, r3
 8003474:	d019      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003480:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800348a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d016      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fd fd80 	bl	8000fb8 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	e00b      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fd fd7c 	bl	8000fb8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d902      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	74fb      	strb	r3, [r7, #19]
            break;
 80034d2:	e006      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ec      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10c      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003500:	e008      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	74bb      	strb	r3, [r7, #18]
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003514:	7c7b      	ldrb	r3, [r7, #17]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351a:	4ba0      	ldr	r3, [pc, #640]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4a9f      	ldr	r2, [pc, #636]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003532:	4b9a      	ldr	r3, [pc, #616]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f023 0203 	bic.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	4996      	ldr	r1, [pc, #600]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003554:	4b91      	ldr	r3, [pc, #580]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 020c 	bic.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	498e      	ldr	r1, [pc, #568]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	4985      	ldr	r1, [pc, #532]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003598:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a6:	497d      	ldr	r1, [pc, #500]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ba:	4b78      	ldr	r3, [pc, #480]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	4974      	ldr	r1, [pc, #464]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035dc:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	496c      	ldr	r1, [pc, #432]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360c:	4963      	ldr	r1, [pc, #396]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003620:	4b5e      	ldr	r3, [pc, #376]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362e:	495b      	ldr	r1, [pc, #364]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003642:	4b56      	ldr	r3, [pc, #344]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	4952      	ldr	r1, [pc, #328]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003664:	4b4d      	ldr	r3, [pc, #308]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	494a      	ldr	r1, [pc, #296]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003686:	4b45      	ldr	r3, [pc, #276]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	4941      	ldr	r1, [pc, #260]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036a8:	4b3c      	ldr	r3, [pc, #240]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b6:	4939      	ldr	r1, [pc, #228]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d028      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d8:	4930      	ldr	r1, [pc, #192]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e8:	d106      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ea:	4b2c      	ldr	r3, [pc, #176]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4a2b      	ldr	r2, [pc, #172]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f4:	60d3      	str	r3, [r2, #12]
 80036f6:	e011      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003700:	d10c      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	2101      	movs	r1, #1
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f8f9 	bl	8003900 <RCCEx_PLLSAI1_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d04d      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003730:	d108      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003734:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003742:	e012      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003750:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003762:	490e      	ldr	r1, [pc, #56]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800376e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003772:	d106      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a08      	ldr	r2, [pc, #32]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800377a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800377e:	60d3      	str	r3, [r2, #12]
 8003780:	e020      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e014      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f8a5 	bl	8003900 <RCCEx_PLLSAI1_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d028      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d0:	4b4a      	ldr	r3, [pc, #296]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ee:	d106      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f0:	4b42      	ldr	r3, [pc, #264]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a41      	ldr	r2, [pc, #260]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e011      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003806:	d10c      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f876 	bl	8003900 <RCCEx_PLLSAI1_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01e      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003834:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383e:	492f      	ldr	r1, [pc, #188]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2102      	movs	r1, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f851 	bl	8003900 <RCCEx_PLLSAI1_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800387e:	f023 0204 	bic.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003888:	491c      	ldr	r1, [pc, #112]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a2:	f023 0218 	bic.w	r2, r3, #24
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	4913      	ldr	r1, [pc, #76]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d017      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038c0:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d0:	490a      	ldr	r1, [pc, #40]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038e2:	d105      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800390e:	4b72      	ldr	r3, [pc, #456]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00e      	beq.n	8003938 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800391a:	4b6f      	ldr	r3, [pc, #444]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d103      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
       ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d142      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e03f      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d018      	beq.n	8003972 <RCCEx_PLLSAI1_Config+0x72>
 8003940:	2b03      	cmp	r3, #3
 8003942:	d825      	bhi.n	8003990 <RCCEx_PLLSAI1_Config+0x90>
 8003944:	2b01      	cmp	r3, #1
 8003946:	d002      	beq.n	800394e <RCCEx_PLLSAI1_Config+0x4e>
 8003948:	2b02      	cmp	r3, #2
 800394a:	d009      	beq.n	8003960 <RCCEx_PLLSAI1_Config+0x60>
 800394c:	e020      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800394e:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11d      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395e:	e01a      	b.n	8003996 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003960:	4b5d      	ldr	r3, [pc, #372]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e013      	b.n	800399a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003972:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800397e:	4b56      	ldr	r3, [pc, #344]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800398e:	e006      	b.n	800399e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e004      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800399e:	bf00      	nop
    }

    if(status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80039a6:	4b4c      	ldr	r3, [pc, #304]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4949      	ldr	r1, [pc, #292]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8086 	bne.w	8003acc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039c0:	4b45      	ldr	r3, [pc, #276]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a44      	ldr	r2, [pc, #272]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fd faf4 	bl	8000fb8 <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d4:	f7fd faf0 	bl	8000fb8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
        break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039e8:	4b3b      	ldr	r3, [pc, #236]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ef      	bne.n	80039d4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d168      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d113      	bne.n	8003a28 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6892      	ldr	r2, [r2, #8]
 8003a0c:	0211      	lsls	r1, r2, #8
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	06d2      	lsls	r2, r2, #27
 8003a14:	4311      	orrs	r1, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6852      	ldr	r2, [r2, #4]
 8003a1a:	3a01      	subs	r2, #1
 8003a1c:	0112      	lsls	r2, r2, #4
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	492d      	ldr	r1, [pc, #180]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	610b      	str	r3, [r1, #16]
 8003a26:	e02d      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d115      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6892      	ldr	r2, [r2, #8]
 8003a3a:	0211      	lsls	r1, r2, #8
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6912      	ldr	r2, [r2, #16]
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	3a01      	subs	r2, #1
 8003a44:	0552      	lsls	r2, r2, #21
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6852      	ldr	r2, [r2, #4]
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	430a      	orrs	r2, r1
 8003a52:	4921      	ldr	r1, [pc, #132]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	610b      	str	r3, [r1, #16]
 8003a58:	e014      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6892      	ldr	r2, [r2, #8]
 8003a66:	0211      	lsls	r1, r2, #8
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6952      	ldr	r2, [r2, #20]
 8003a6c:	0852      	lsrs	r2, r2, #1
 8003a6e:	3a01      	subs	r2, #1
 8003a70:	0652      	lsls	r2, r2, #25
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6852      	ldr	r2, [r2, #4]
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fd fa92 	bl	8000fb8 <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a96:	e009      	b.n	8003aac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a98:	f7fd fa8e 	bl	8000fb8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8003aaa:	e005      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ef      	beq.n	8003a98 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	07ff800f 	.word	0x07ff800f
 8003ae0:	ff9f800f 	.word	0xff9f800f
 8003ae4:	f9ff800f 	.word	0xf9ff800f

08003ae8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003af6:	4b72      	ldr	r3, [pc, #456]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00e      	beq.n	8003b20 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b02:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0203 	and.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d103      	bne.n	8003b1a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
       ||
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d142      	bne.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
 8003b1e:	e03f      	b.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d018      	beq.n	8003b5a <RCCEx_PLLSAI2_Config+0x72>
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d825      	bhi.n	8003b78 <RCCEx_PLLSAI2_Config+0x90>
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d002      	beq.n	8003b36 <RCCEx_PLLSAI2_Config+0x4e>
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d009      	beq.n	8003b48 <RCCEx_PLLSAI2_Config+0x60>
 8003b34:	e020      	b.n	8003b78 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b36:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11d      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b46:	e01a      	b.n	8003b7e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b48:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d116      	bne.n	8003b82 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b58:	e013      	b.n	8003b82 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b5a:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b66:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b76:	e006      	b.n	8003b86 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7c:	e004      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b8e:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4949      	ldr	r1, [pc, #292]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 8086 	bne.w	8003cb4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ba8:	4b45      	ldr	r3, [pc, #276]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a44      	ldr	r2, [pc, #272]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fa00 	bl	8000fb8 <HAL_GetTick>
 8003bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bba:	e009      	b.n	8003bd0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bbc:	f7fd f9fc 	bl	8000fb8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d902      	bls.n	8003bd0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bce:	e005      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bd0:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ef      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d168      	bne.n	8003cb4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d113      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be8:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	4b35      	ldr	r3, [pc, #212]	; (8003cc4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6892      	ldr	r2, [r2, #8]
 8003bf4:	0211      	lsls	r1, r2, #8
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	06d2      	lsls	r2, r2, #27
 8003bfc:	4311      	orrs	r1, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6852      	ldr	r2, [r2, #4]
 8003c02:	3a01      	subs	r2, #1
 8003c04:	0112      	lsls	r2, r2, #4
 8003c06:	430a      	orrs	r2, r1
 8003c08:	492d      	ldr	r1, [pc, #180]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	614b      	str	r3, [r1, #20]
 8003c0e:	e02d      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d115      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	0211      	lsls	r1, r2, #8
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6912      	ldr	r2, [r2, #16]
 8003c28:	0852      	lsrs	r2, r2, #1
 8003c2a:	3a01      	subs	r2, #1
 8003c2c:	0552      	lsls	r2, r2, #21
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6852      	ldr	r2, [r2, #4]
 8003c34:	3a01      	subs	r2, #1
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	4921      	ldr	r1, [pc, #132]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	614b      	str	r3, [r1, #20]
 8003c40:	e014      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c42:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	0211      	lsls	r1, r2, #8
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6952      	ldr	r2, [r2, #20]
 8003c54:	0852      	lsrs	r2, r2, #1
 8003c56:	3a01      	subs	r2, #1
 8003c58:	0652      	lsls	r2, r2, #25
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6852      	ldr	r2, [r2, #4]
 8003c60:	3a01      	subs	r2, #1
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	430a      	orrs	r2, r1
 8003c66:	4916      	ldr	r1, [pc, #88]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd f99e 	bl	8000fb8 <HAL_GetTick>
 8003c7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c7e:	e009      	b.n	8003c94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c80:	f7fd f99a 	bl	8000fb8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d902      	bls.n	8003c94 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	73fb      	strb	r3, [r7, #15]
          break;
 8003c92:	e005      	b.n	8003ca0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ef      	beq.n	8003c80 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	07ff800f 	.word	0x07ff800f
 8003cc8:	ff9f800f 	.word	0xff9f800f
 8003ccc:	f9ff800f 	.word	0xf9ff800f

08003cd0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e054      	b.n	8003d8c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7a5b      	ldrb	r3, [r3, #9]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f007 fa16 	bl	800b124 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	725a      	strb	r2, [r3, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 0120 	bic.w	r1, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0204 	orr.w	r2, r2, #4
 8003d22:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d104      	bne.n	8003d3c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2204      	movs	r2, #4
 8003d36:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e027      	b.n	8003d8c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d3c:	f7fd f93c 	bl	8000fb8 <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003d42:	e015      	b.n	8003d70 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003d44:	f7fd f938 	bl	8000fb8 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d90e      	bls.n	8003d70 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d107      	bne.n	8003d70 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2204      	movs	r2, #4
 8003d64:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e00d      	b.n	8003d8c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d0e2      	beq.n	8003d44 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e049      	b.n	8003e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f007 f9f6 	bl	800b1ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f000 fdde 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e047      	b.n	8003eec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a23      	ldr	r2, [pc, #140]	; (8003ef8 <HAL_TIM_Base_Start+0xb4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01d      	beq.n	8003eaa <HAL_TIM_Base_Start+0x66>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d018      	beq.n	8003eaa <HAL_TIM_Base_Start+0x66>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <HAL_TIM_Base_Start+0xb8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_TIM_Base_Start+0x66>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <HAL_TIM_Base_Start+0xbc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00e      	beq.n	8003eaa <HAL_TIM_Base_Start+0x66>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_TIM_Base_Start+0xc0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_TIM_Base_Start+0x66>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_TIM_Base_Start+0xc4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIM_Base_Start+0x66>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_TIM_Base_Start+0xc8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d115      	bne.n	8003ed6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_TIM_Base_Start+0xcc>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d015      	beq.n	8003ee8 <HAL_TIM_Base_Start+0xa4>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d011      	beq.n	8003ee8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	e008      	b.n	8003ee8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e000      	b.n	8003eea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800
 8003f04:	40000c00 	.word	0x40000c00
 8003f08:	40013400 	.word	0x40013400
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	00010007 	.word	0x00010007

08003f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d001      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e04f      	b.n	8003fcc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01d      	beq.n	8003f8a <HAL_TIM_Base_Start_IT+0x76>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f56:	d018      	beq.n	8003f8a <HAL_TIM_Base_Start_IT+0x76>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <HAL_TIM_Base_Start_IT+0x76>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <HAL_TIM_Base_Start_IT+0x76>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_TIM_Base_Start_IT+0x76>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_TIM_Base_Start_IT+0x76>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a19      	ldr	r2, [pc, #100]	; (8003fec <HAL_TIM_Base_Start_IT+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d115      	bne.n	8003fb6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b06      	cmp	r3, #6
 8003f9a:	d015      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0xb4>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	d011      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb4:	e008      	b.n	8003fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e000      	b.n	8003fca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40013400 	.word	0x40013400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	00010007 	.word	0x00010007

08003ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e049      	b.n	800409a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f841 	bl	80040a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f000 fcae 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_TIM_PWM_Start+0x24>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e03c      	b.n	8004156 <HAL_TIM_PWM_Start+0x9e>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d109      	bne.n	80040f6 <HAL_TIM_PWM_Start+0x3e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	e02f      	b.n	8004156 <HAL_TIM_PWM_Start+0x9e>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d109      	bne.n	8004110 <HAL_TIM_PWM_Start+0x58>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	bf14      	ite	ne
 8004108:	2301      	movne	r3, #1
 800410a:	2300      	moveq	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	e022      	b.n	8004156 <HAL_TIM_PWM_Start+0x9e>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d109      	bne.n	800412a <HAL_TIM_PWM_Start+0x72>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b01      	cmp	r3, #1
 8004120:	bf14      	ite	ne
 8004122:	2301      	movne	r3, #1
 8004124:	2300      	moveq	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	e015      	b.n	8004156 <HAL_TIM_PWM_Start+0x9e>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b10      	cmp	r3, #16
 800412e:	d109      	bne.n	8004144 <HAL_TIM_PWM_Start+0x8c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e008      	b.n	8004156 <HAL_TIM_PWM_Start+0x9e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e09c      	b.n	8004298 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <HAL_TIM_PWM_Start+0xb6>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800416c:	e023      	b.n	80041b6 <HAL_TIM_PWM_Start+0xfe>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d104      	bne.n	800417e <HAL_TIM_PWM_Start+0xc6>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417c:	e01b      	b.n	80041b6 <HAL_TIM_PWM_Start+0xfe>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b08      	cmp	r3, #8
 8004182:	d104      	bne.n	800418e <HAL_TIM_PWM_Start+0xd6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800418c:	e013      	b.n	80041b6 <HAL_TIM_PWM_Start+0xfe>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d104      	bne.n	800419e <HAL_TIM_PWM_Start+0xe6>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800419c:	e00b      	b.n	80041b6 <HAL_TIM_PWM_Start+0xfe>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start+0xf6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ac:	e003      	b.n	80041b6 <HAL_TIM_PWM_Start+0xfe>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f885 	bl	80052ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a35      	ldr	r2, [pc, #212]	; (80042a0 <HAL_TIM_PWM_Start+0x1e8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_TIM_PWM_Start+0x13e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a34      	ldr	r2, [pc, #208]	; (80042a4 <HAL_TIM_PWM_Start+0x1ec>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00e      	beq.n	80041f6 <HAL_TIM_PWM_Start+0x13e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a32      	ldr	r2, [pc, #200]	; (80042a8 <HAL_TIM_PWM_Start+0x1f0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_TIM_PWM_Start+0x13e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a31      	ldr	r2, [pc, #196]	; (80042ac <HAL_TIM_PWM_Start+0x1f4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d004      	beq.n	80041f6 <HAL_TIM_PWM_Start+0x13e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <HAL_TIM_PWM_Start+0x1f8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_PWM_Start+0x142>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_TIM_PWM_Start+0x144>
 80041fa:	2300      	movs	r3, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_TIM_PWM_Start+0x1e8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01d      	beq.n	8004256 <HAL_TIM_PWM_Start+0x19e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004222:	d018      	beq.n	8004256 <HAL_TIM_PWM_Start+0x19e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_TIM_PWM_Start+0x1fc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_TIM_PWM_Start+0x19e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <HAL_TIM_PWM_Start+0x200>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIM_PWM_Start+0x19e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <HAL_TIM_PWM_Start+0x204>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIM_PWM_Start+0x19e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_TIM_PWM_Start+0x1ec>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIM_PWM_Start+0x19e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <HAL_TIM_PWM_Start+0x1f0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d115      	bne.n	8004282 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HAL_TIM_PWM_Start+0x208>)
 800425e:	4013      	ands	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b06      	cmp	r3, #6
 8004266:	d015      	beq.n	8004294 <HAL_TIM_PWM_Start+0x1dc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d011      	beq.n	8004294 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004280:	e008      	b.n	8004294 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e000      	b.n	8004296 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40013400 	.word	0x40013400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	00010007 	.word	0x00010007

080042c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d122      	bne.n	8004320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d11b      	bne.n	8004320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0202 	mvn.w	r2, #2
 80042f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fb25 	bl	8004956 <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fb17 	bl	8004942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fb28 	bl	800496a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b04      	cmp	r3, #4
 800432c:	d122      	bne.n	8004374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b04      	cmp	r3, #4
 800433a:	d11b      	bne.n	8004374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0204 	mvn.w	r2, #4
 8004344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fafb 	bl	8004956 <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 faed 	bl	8004942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fafe 	bl	800496a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b08      	cmp	r3, #8
 8004380:	d122      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d11b      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0208 	mvn.w	r2, #8
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2204      	movs	r2, #4
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fad1 	bl	8004956 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fac3 	bl	8004942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fad4 	bl	800496a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d122      	bne.n	800441c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d11b      	bne.n	800441c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0210 	mvn.w	r2, #16
 80043ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2208      	movs	r2, #8
 80043f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 faa7 	bl	8004956 <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fa99 	bl	8004942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 faaa 	bl	800496a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10e      	bne.n	8004448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b01      	cmp	r3, #1
 8004436:	d107      	bne.n	8004448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0201 	mvn.w	r2, #1
 8004440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f006 fd36 	bl	800aeb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	2b80      	cmp	r3, #128	; 0x80
 8004454:	d10e      	bne.n	8004474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b80      	cmp	r3, #128	; 0x80
 8004462:	d107      	bne.n	8004474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 ffe4 	bl	800543c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004482:	d10e      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800449a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 ffd7 	bl	8005450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d10e      	bne.n	80044ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d107      	bne.n	80044ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fa58 	bl	800497e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d10e      	bne.n	80044fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d107      	bne.n	80044fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f06f 0220 	mvn.w	r2, #32
 80044f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 ff97 	bl	8005428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800451e:	2302      	movs	r3, #2
 8004520:	e0ff      	b.n	8004722 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b14      	cmp	r3, #20
 800452e:	f200 80f0 	bhi.w	8004712 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	0800458d 	.word	0x0800458d
 800453c:	08004713 	.word	0x08004713
 8004540:	08004713 	.word	0x08004713
 8004544:	08004713 	.word	0x08004713
 8004548:	080045cd 	.word	0x080045cd
 800454c:	08004713 	.word	0x08004713
 8004550:	08004713 	.word	0x08004713
 8004554:	08004713 	.word	0x08004713
 8004558:	0800460f 	.word	0x0800460f
 800455c:	08004713 	.word	0x08004713
 8004560:	08004713 	.word	0x08004713
 8004564:	08004713 	.word	0x08004713
 8004568:	0800464f 	.word	0x0800464f
 800456c:	08004713 	.word	0x08004713
 8004570:	08004713 	.word	0x08004713
 8004574:	08004713 	.word	0x08004713
 8004578:	08004691 	.word	0x08004691
 800457c:	08004713 	.word	0x08004713
 8004580:	08004713 	.word	0x08004713
 8004584:	08004713 	.word	0x08004713
 8004588:	080046d1 	.word	0x080046d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fa98 	bl	8004ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0208 	orr.w	r2, r2, #8
 80045a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0204 	bic.w	r2, r2, #4
 80045b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6999      	ldr	r1, [r3, #24]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	619a      	str	r2, [r3, #24]
      break;
 80045ca:	e0a5      	b.n	8004718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb08 	bl	8004be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6999      	ldr	r1, [r3, #24]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	021a      	lsls	r2, r3, #8
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	619a      	str	r2, [r3, #24]
      break;
 800460c:	e084      	b.n	8004718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fb71 	bl	8004cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0208 	orr.w	r2, r2, #8
 8004628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0204 	bic.w	r2, r2, #4
 8004638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	61da      	str	r2, [r3, #28]
      break;
 800464c:	e064      	b.n	8004718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fbd9 	bl	8004e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69d9      	ldr	r1, [r3, #28]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	021a      	lsls	r2, r3, #8
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	61da      	str	r2, [r3, #28]
      break;
 800468e:	e043      	b.n	8004718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fc22 	bl	8004ee0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0204 	bic.w	r2, r2, #4
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046ce:	e023      	b.n	8004718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fc66 	bl	8004fa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	021a      	lsls	r2, r3, #8
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004710:	e002      	b.n	8004718 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	75fb      	strb	r3, [r7, #23]
      break;
 8004716:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop

0800472c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIM_ConfigClockSource+0x1c>
 8004744:	2302      	movs	r3, #2
 8004746:	e0b6      	b.n	80048b6 <HAL_TIM_ConfigClockSource+0x18a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800476a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004784:	d03e      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0xd8>
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478a:	f200 8087 	bhi.w	800489c <HAL_TIM_ConfigClockSource+0x170>
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	f000 8086 	beq.w	80048a2 <HAL_TIM_ConfigClockSource+0x176>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d87f      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x170>
 800479c:	2b70      	cmp	r3, #112	; 0x70
 800479e:	d01a      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xaa>
 80047a0:	2b70      	cmp	r3, #112	; 0x70
 80047a2:	d87b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x170>
 80047a4:	2b60      	cmp	r3, #96	; 0x60
 80047a6:	d050      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x11e>
 80047a8:	2b60      	cmp	r3, #96	; 0x60
 80047aa:	d877      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x170>
 80047ac:	2b50      	cmp	r3, #80	; 0x50
 80047ae:	d03c      	beq.n	800482a <HAL_TIM_ConfigClockSource+0xfe>
 80047b0:	2b50      	cmp	r3, #80	; 0x50
 80047b2:	d873      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x170>
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d058      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x13e>
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d86f      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x170>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d064      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15e>
 80047c0:	2b30      	cmp	r3, #48	; 0x30
 80047c2:	d86b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x170>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d060      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15e>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d867      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x170>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05c      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15e>
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d05a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15e>
 80047d4:	e062      	b.n	800489c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f000 fd52 	bl	800528e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	609a      	str	r2, [r3, #8]
      break;
 8004802:	e04f      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6899      	ldr	r1, [r3, #8]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f000 fd3b 	bl	800528e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004826:	609a      	str	r2, [r3, #8]
      break;
 8004828:	e03c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	461a      	mov	r2, r3
 8004838:	f000 fcaf 	bl	800519a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2150      	movs	r1, #80	; 0x50
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fd08 	bl	8005258 <TIM_ITRx_SetConfig>
      break;
 8004848:	e02c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	461a      	mov	r2, r3
 8004858:	f000 fcce 	bl	80051f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2160      	movs	r1, #96	; 0x60
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fcf8 	bl	8005258 <TIM_ITRx_SetConfig>
      break;
 8004868:	e01c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 fc8f 	bl	800519a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fce8 	bl	8005258 <TIM_ITRx_SetConfig>
      break;
 8004888:	e00c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f000 fcdf 	bl	8005258 <TIM_ITRx_SetConfig>
      break;
 800489a:	e003      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e000      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e031      	b.n	800493a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fbc3 	bl	8005074 <TIM_SlaveTimer_SetConfig>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e018      	b.n	800493a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004916:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004926:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a40      	ldr	r2, [pc, #256]	; (8004aa8 <TIM_Base_SetConfig+0x114>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d00f      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a3d      	ldr	r2, [pc, #244]	; (8004aac <TIM_Base_SetConfig+0x118>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a3c      	ldr	r2, [pc, #240]	; (8004ab0 <TIM_Base_SetConfig+0x11c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <TIM_Base_SetConfig+0x120>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a3a      	ldr	r2, [pc, #232]	; (8004ab8 <TIM_Base_SetConfig+0x124>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d108      	bne.n	80049e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <TIM_Base_SetConfig+0x114>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d01f      	beq.n	8004a2e <TIM_Base_SetConfig+0x9a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f4:	d01b      	beq.n	8004a2e <TIM_Base_SetConfig+0x9a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a2c      	ldr	r2, [pc, #176]	; (8004aac <TIM_Base_SetConfig+0x118>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d017      	beq.n	8004a2e <TIM_Base_SetConfig+0x9a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2b      	ldr	r2, [pc, #172]	; (8004ab0 <TIM_Base_SetConfig+0x11c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <TIM_Base_SetConfig+0x9a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2a      	ldr	r2, [pc, #168]	; (8004ab4 <TIM_Base_SetConfig+0x120>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00f      	beq.n	8004a2e <TIM_Base_SetConfig+0x9a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a29      	ldr	r2, [pc, #164]	; (8004ab8 <TIM_Base_SetConfig+0x124>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00b      	beq.n	8004a2e <TIM_Base_SetConfig+0x9a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a28      	ldr	r2, [pc, #160]	; (8004abc <TIM_Base_SetConfig+0x128>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d007      	beq.n	8004a2e <TIM_Base_SetConfig+0x9a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <TIM_Base_SetConfig+0x12c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d003      	beq.n	8004a2e <TIM_Base_SetConfig+0x9a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <TIM_Base_SetConfig+0x130>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d108      	bne.n	8004a40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <TIM_Base_SetConfig+0x114>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_Base_SetConfig+0xf8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <TIM_Base_SetConfig+0x124>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00b      	beq.n	8004a8c <TIM_Base_SetConfig+0xf8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a11      	ldr	r2, [pc, #68]	; (8004abc <TIM_Base_SetConfig+0x128>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_Base_SetConfig+0xf8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <TIM_Base_SetConfig+0x12c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_Base_SetConfig+0xf8>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <TIM_Base_SetConfig+0x130>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d103      	bne.n	8004a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	615a      	str	r2, [r3, #20]
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40013400 	.word	0x40013400
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	40014800 	.word	0x40014800

08004ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 0302 	bic.w	r3, r3, #2
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <TIM_OC1_SetConfig+0x10c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00f      	beq.n	8004b48 <TIM_OC1_SetConfig+0x80>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a2b      	ldr	r2, [pc, #172]	; (8004bd8 <TIM_OC1_SetConfig+0x110>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00b      	beq.n	8004b48 <TIM_OC1_SetConfig+0x80>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <TIM_OC1_SetConfig+0x114>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d007      	beq.n	8004b48 <TIM_OC1_SetConfig+0x80>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a29      	ldr	r2, [pc, #164]	; (8004be0 <TIM_OC1_SetConfig+0x118>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_OC1_SetConfig+0x80>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a28      	ldr	r2, [pc, #160]	; (8004be4 <TIM_OC1_SetConfig+0x11c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d10c      	bne.n	8004b62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0308 	bic.w	r3, r3, #8
 8004b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 0304 	bic.w	r3, r3, #4
 8004b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <TIM_OC1_SetConfig+0x10c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00f      	beq.n	8004b8a <TIM_OC1_SetConfig+0xc2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <TIM_OC1_SetConfig+0x110>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_OC1_SetConfig+0xc2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <TIM_OC1_SetConfig+0x114>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_OC1_SetConfig+0xc2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <TIM_OC1_SetConfig+0x118>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_OC1_SetConfig+0xc2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a17      	ldr	r2, [pc, #92]	; (8004be4 <TIM_OC1_SetConfig+0x11c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d111      	bne.n	8004bae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40013400 	.word	0x40013400
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	40014400 	.word	0x40014400
 8004be4:	40014800 	.word	0x40014800

08004be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f023 0210 	bic.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f023 0320 	bic.w	r3, r3, #32
 8004c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a28      	ldr	r2, [pc, #160]	; (8004ce8 <TIM_OC2_SetConfig+0x100>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_OC2_SetConfig+0x6c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a27      	ldr	r2, [pc, #156]	; (8004cec <TIM_OC2_SetConfig+0x104>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10d      	bne.n	8004c70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <TIM_OC2_SetConfig+0x100>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00f      	beq.n	8004c98 <TIM_OC2_SetConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <TIM_OC2_SetConfig+0x104>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <TIM_OC2_SetConfig+0xb0>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <TIM_OC2_SetConfig+0x108>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <TIM_OC2_SetConfig+0xb0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <TIM_OC2_SetConfig+0x10c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC2_SetConfig+0xb0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <TIM_OC2_SetConfig+0x110>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d113      	bne.n	8004cc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800

08004cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <TIM_OC3_SetConfig+0xfc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_OC3_SetConfig+0x6a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <TIM_OC3_SetConfig+0x100>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d10d      	bne.n	8004d82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1c      	ldr	r2, [pc, #112]	; (8004df8 <TIM_OC3_SetConfig+0xfc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00f      	beq.n	8004daa <TIM_OC3_SetConfig+0xae>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1b      	ldr	r2, [pc, #108]	; (8004dfc <TIM_OC3_SetConfig+0x100>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00b      	beq.n	8004daa <TIM_OC3_SetConfig+0xae>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1a      	ldr	r2, [pc, #104]	; (8004e00 <TIM_OC3_SetConfig+0x104>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <TIM_OC3_SetConfig+0xae>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a19      	ldr	r2, [pc, #100]	; (8004e04 <TIM_OC3_SetConfig+0x108>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <TIM_OC3_SetConfig+0xae>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <TIM_OC3_SetConfig+0x10c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d113      	bne.n	8004dd2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	621a      	str	r2, [r3, #32]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800

08004e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	031b      	lsls	r3, r3, #12
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <TIM_OC4_SetConfig+0xc0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00f      	beq.n	8004e90 <TIM_OC4_SetConfig+0x84>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <TIM_OC4_SetConfig+0xc4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_OC4_SetConfig+0x84>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <TIM_OC4_SetConfig+0xc8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_OC4_SetConfig+0x84>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <TIM_OC4_SetConfig+0xcc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_OC4_SetConfig+0x84>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a14      	ldr	r2, [pc, #80]	; (8004edc <TIM_OC4_SetConfig+0xd0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d109      	bne.n	8004ea4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	019b      	lsls	r3, r3, #6
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40013400 	.word	0x40013400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <TIM_OC5_SetConfig+0xb4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00f      	beq.n	8004f5a <TIM_OC5_SetConfig+0x7a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <TIM_OC5_SetConfig+0xb8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <TIM_OC5_SetConfig+0x7a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <TIM_OC5_SetConfig+0xbc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <TIM_OC5_SetConfig+0x7a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <TIM_OC5_SetConfig+0xc0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d003      	beq.n	8004f5a <TIM_OC5_SetConfig+0x7a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <TIM_OC5_SetConfig+0xc4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d109      	bne.n	8004f6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40013400 	.word	0x40013400
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	051b      	lsls	r3, r3, #20
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a18      	ldr	r2, [pc, #96]	; (8005060 <TIM_OC6_SetConfig+0xb8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_OC6_SetConfig+0x7c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a17      	ldr	r2, [pc, #92]	; (8005064 <TIM_OC6_SetConfig+0xbc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_OC6_SetConfig+0x7c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a16      	ldr	r2, [pc, #88]	; (8005068 <TIM_OC6_SetConfig+0xc0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_OC6_SetConfig+0x7c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a15      	ldr	r2, [pc, #84]	; (800506c <TIM_OC6_SetConfig+0xc4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC6_SetConfig+0x7c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a14      	ldr	r2, [pc, #80]	; (8005070 <TIM_OC6_SetConfig+0xc8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d109      	bne.n	8005038 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	029b      	lsls	r3, r3, #10
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40013400 	.word	0x40013400
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a2:	f023 0307 	bic.w	r3, r3, #7
 80050a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b70      	cmp	r3, #112	; 0x70
 80050c0:	d01a      	beq.n	80050f8 <TIM_SlaveTimer_SetConfig+0x84>
 80050c2:	2b70      	cmp	r3, #112	; 0x70
 80050c4:	d860      	bhi.n	8005188 <TIM_SlaveTimer_SetConfig+0x114>
 80050c6:	2b60      	cmp	r3, #96	; 0x60
 80050c8:	d054      	beq.n	8005174 <TIM_SlaveTimer_SetConfig+0x100>
 80050ca:	2b60      	cmp	r3, #96	; 0x60
 80050cc:	d85c      	bhi.n	8005188 <TIM_SlaveTimer_SetConfig+0x114>
 80050ce:	2b50      	cmp	r3, #80	; 0x50
 80050d0:	d046      	beq.n	8005160 <TIM_SlaveTimer_SetConfig+0xec>
 80050d2:	2b50      	cmp	r3, #80	; 0x50
 80050d4:	d858      	bhi.n	8005188 <TIM_SlaveTimer_SetConfig+0x114>
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d019      	beq.n	800510e <TIM_SlaveTimer_SetConfig+0x9a>
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d854      	bhi.n	8005188 <TIM_SlaveTimer_SetConfig+0x114>
 80050de:	2b30      	cmp	r3, #48	; 0x30
 80050e0:	d055      	beq.n	800518e <TIM_SlaveTimer_SetConfig+0x11a>
 80050e2:	2b30      	cmp	r3, #48	; 0x30
 80050e4:	d850      	bhi.n	8005188 <TIM_SlaveTimer_SetConfig+0x114>
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d051      	beq.n	800518e <TIM_SlaveTimer_SetConfig+0x11a>
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d84c      	bhi.n	8005188 <TIM_SlaveTimer_SetConfig+0x114>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d04d      	beq.n	800518e <TIM_SlaveTimer_SetConfig+0x11a>
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d04b      	beq.n	800518e <TIM_SlaveTimer_SetConfig+0x11a>
 80050f6:	e047      	b.n	8005188 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68d9      	ldr	r1, [r3, #12]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f000 f8c1 	bl	800528e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800510c:	e040      	b.n	8005190 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b05      	cmp	r3, #5
 8005114:	d101      	bne.n	800511a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e03b      	b.n	8005192 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005140:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	4313      	orrs	r3, r2
 800514c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
      break;
 800515e:	e017      	b.n	8005190 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6899      	ldr	r1, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	461a      	mov	r2, r3
 800516e:	f000 f814 	bl	800519a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005172:	e00d      	b.n	8005190 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6899      	ldr	r1, [r3, #8]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	461a      	mov	r2, r3
 8005182:	f000 f839 	bl	80051f8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005186:	e003      	b.n	8005190 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
      break;
 800518c:	e000      	b.n	8005190 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800518e:	bf00      	nop
  }

  return status;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519a:	b480      	push	{r7}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f023 0201 	bic.w	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 030a 	bic.w	r3, r3, #10
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	621a      	str	r2, [r3, #32]
}
 80051ec:	bf00      	nop
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f023 0210 	bic.w	r2, r3, #16
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005222:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	031b      	lsls	r3, r3, #12
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	f043 0307 	orr.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	609a      	str	r2, [r3, #8]
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800528e:	b480      	push	{r7}
 8005290:	b087      	sub	sp, #28
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	021a      	lsls	r2, r3, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	609a      	str	r2, [r3, #8]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b087      	sub	sp, #28
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2201      	movs	r2, #1
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	401a      	ands	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1a      	ldr	r2, [r3, #32]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	431a      	orrs	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800532c:	2302      	movs	r3, #2
 800532e:	e068      	b.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2e      	ldr	r2, [pc, #184]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2d      	ldr	r2, [pc, #180]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800536a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01d      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d018      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1a      	ldr	r2, [pc, #104]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a13      	ldr	r2, [pc, #76]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a14      	ldr	r2, [pc, #80]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10c      	bne.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40013400 	.word	0x40013400
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40014000 	.word	0x40014000

08005428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e042      	b.n	80054fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f005 ff33 	bl	800b2f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2224      	movs	r2, #36	; 0x24
 8005492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fbba 	bl	8005c20 <UART_SetConfig>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e022      	b.n	80054fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fe76 	bl	80061b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fefd 	bl	80062f4 <UART_CheckIdleState>
 80054fa:	4603      	mov	r3, r0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	; 0x28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	2b20      	cmp	r3, #32
 800551a:	d142      	bne.n	80055a2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_UART_Receive_IT+0x24>
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e03b      	b.n	80055a4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_UART_Receive_IT+0x36>
 8005536:	2302      	movs	r3, #2
 8005538:	e034      	b.n	80055a4 <HAL_UART_Receive_IT+0xa0>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <HAL_UART_Receive_IT+0xa8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01f      	beq.n	8005592 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d018      	beq.n	8005592 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	613b      	str	r3, [r7, #16]
   return(result);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	69f9      	ldr	r1, [r7, #28]
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	61bb      	str	r3, [r7, #24]
   return(result);
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e6      	bne.n	8005560 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	461a      	mov	r2, r3
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 ffbf 	bl	800651c <UART_Start_Receive_IT>
 800559e:	4603      	mov	r3, r0
 80055a0:	e000      	b.n	80055a4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3728      	adds	r7, #40	; 0x28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40008000 	.word	0x40008000

080055b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b0ba      	sub	sp, #232	; 0xe8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055da:	f640 030f 	movw	r3, #2063	; 0x80f
 80055de:	4013      	ands	r3, r2
 80055e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11b      	bne.n	8005624 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 82d6 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
      }
      return;
 8005622:	e2d0      	b.n	8005bc6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 811f 	beq.w	800586c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800562e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005632:	4b8b      	ldr	r3, [pc, #556]	; (8005860 <HAL_UART_IRQHandler+0x2b0>)
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800563a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800563e:	4b89      	ldr	r3, [pc, #548]	; (8005864 <HAL_UART_IRQHandler+0x2b4>)
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8112 	beq.w	800586c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d011      	beq.n	8005678 <HAL_UART_IRQHandler+0xc8>
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566e:	f043 0201 	orr.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d011      	beq.n	80056a8 <HAL_UART_IRQHandler+0xf8>
 8005684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2202      	movs	r2, #2
 8005696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800569e:	f043 0204 	orr.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d011      	beq.n	80056d8 <HAL_UART_IRQHandler+0x128>
 80056b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2204      	movs	r2, #4
 80056c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ce:	f043 0202 	orr.w	r2, r3, #2
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d017      	beq.n	8005714 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80056f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056f4:	4b5a      	ldr	r3, [pc, #360]	; (8005860 <HAL_UART_IRQHandler+0x2b0>)
 80056f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570a:	f043 0208 	orr.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571c:	2b00      	cmp	r3, #0
 800571e:	d012      	beq.n	8005746 <HAL_UART_IRQHandler+0x196>
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 823c 	beq.w	8005bca <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d013      	beq.n	8005786 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d105      	bne.n	8005776 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800576a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800578c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d005      	beq.n	80057aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800579e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d04f      	beq.n	800584a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 ffe0 	bl	8006770 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d141      	bne.n	8005842 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1d9      	bne.n	80057be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d013      	beq.n	800583a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005816:	4a14      	ldr	r2, [pc, #80]	; (8005868 <HAL_UART_IRQHandler+0x2b8>)
 8005818:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581e:	4618      	mov	r0, r3
 8005820:	f7fc fa17 	bl	8001c52 <HAL_DMA_Abort_IT>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d017      	beq.n	800585a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005834:	4610      	mov	r0, r2
 8005836:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	e00f      	b.n	800585a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9da 	bl	8005bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	e00b      	b.n	800585a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f9d6 	bl	8005bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	e007      	b.n	800585a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9d2 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005858:	e1b7      	b.n	8005bca <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585a:	bf00      	nop
    return;
 800585c:	e1b5      	b.n	8005bca <HAL_UART_IRQHandler+0x61a>
 800585e:	bf00      	nop
 8005860:	10000001 	.word	0x10000001
 8005864:	04000120 	.word	0x04000120
 8005868:	0800683d 	.word	0x0800683d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005870:	2b01      	cmp	r3, #1
 8005872:	f040 814a 	bne.w	8005b0a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8143 	beq.w	8005b0a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 813c 	beq.w	8005b0a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2210      	movs	r2, #16
 8005898:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	f040 80b5 	bne.w	8005a14 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8187 	beq.w	8005bce <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ca:	429a      	cmp	r2, r3
 80058cc:	f080 817f 	bcs.w	8005bce <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f040 8086 	bne.w	80059f8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800591a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800592e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1da      	bne.n	80058ec <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3308      	adds	r3, #8
 800593c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800595a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800595e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800596c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e1      	bne.n	8005936 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3308      	adds	r3, #8
 8005978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3308      	adds	r3, #8
 8005992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800599c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e3      	bne.n	8005972 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c8:	f023 0310 	bic.w	r3, r3, #16
 80059cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059da:	65bb      	str	r3, [r7, #88]	; 0x58
 80059dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e4      	bne.n	80059b8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fc f8d1 	bl	8001b9a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f8fb 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a12:	e0dc      	b.n	8005bce <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80ce 	beq.w	8005bd2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005a36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 80c9 	beq.w	8005bd2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a62:	647b      	str	r3, [r7, #68]	; 0x44
 8005a64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e4      	bne.n	8005a40 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	623b      	str	r3, [r7, #32]
   return(result);
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3308      	adds	r3, #8
 8005a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e1      	bne.n	8005a76 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0310 	bic.w	r3, r3, #16
 8005ada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	69b9      	ldr	r1, [r7, #24]
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	617b      	str	r3, [r7, #20]
   return(result);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e4      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f880 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b08:	e063      	b.n	8005bd2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00e      	beq.n	8005b34 <HAL_UART_IRQHandler+0x584>
 8005b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 fb2b 	bl	8007188 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b32:	e051      	b.n	8005bd8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d014      	beq.n	8005b6a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d03a      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
    }
    return;
 8005b68:	e035      	b.n	8005bd6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <HAL_UART_IRQHandler+0x5da>
 8005b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fe70 	bl	8006868 <UART_EndTransmit_IT>
    return;
 8005b88:	e026      	b.n	8005bd8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <HAL_UART_IRQHandler+0x5fa>
 8005b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 fb04 	bl	80071b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ba8:	e016      	b.n	8005bd8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d010      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x628>
 8005bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	da0c      	bge.n	8005bd8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 faec 	bl	800719c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bc4:	e008      	b.n	8005bd8 <HAL_UART_IRQHandler+0x628>
      return;
 8005bc6:	bf00      	nop
 8005bc8:	e006      	b.n	8005bd8 <HAL_UART_IRQHandler+0x628>
    return;
 8005bca:	bf00      	nop
 8005bcc:	e004      	b.n	8005bd8 <HAL_UART_IRQHandler+0x628>
      return;
 8005bce:	bf00      	nop
 8005bd0:	e002      	b.n	8005bd8 <HAL_UART_IRQHandler+0x628>
      return;
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <HAL_UART_IRQHandler+0x628>
    return;
 8005bd6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bd8:	37e8      	adds	r7, #232	; 0xe8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop

08005be0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c20:	b5b0      	push	{r4, r5, r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4bb1      	ldr	r3, [pc, #708]	; (8005f10 <UART_SetConfig+0x2f0>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	69f9      	ldr	r1, [r7, #28]
 8005c54:	430b      	orrs	r3, r1
 8005c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4aa6      	ldr	r2, [pc, #664]	; (8005f14 <UART_SetConfig+0x2f4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d004      	beq.n	8005c88 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	69f9      	ldr	r1, [r7, #28]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	f023 010f 	bic.w	r1, r3, #15
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a97      	ldr	r2, [pc, #604]	; (8005f18 <UART_SetConfig+0x2f8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d120      	bne.n	8005d02 <UART_SetConfig+0xe2>
 8005cc0:	4b96      	ldr	r3, [pc, #600]	; (8005f1c <UART_SetConfig+0x2fc>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d816      	bhi.n	8005cfc <UART_SetConfig+0xdc>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <UART_SetConfig+0xb4>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005cf1 	.word	0x08005cf1
 8005cdc:	08005ceb 	.word	0x08005ceb
 8005ce0:	08005cf7 	.word	0x08005cf7
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	76fb      	strb	r3, [r7, #27]
 8005ce8:	e0e7      	b.n	8005eba <UART_SetConfig+0x29a>
 8005cea:	2302      	movs	r3, #2
 8005cec:	76fb      	strb	r3, [r7, #27]
 8005cee:	e0e4      	b.n	8005eba <UART_SetConfig+0x29a>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	76fb      	strb	r3, [r7, #27]
 8005cf4:	e0e1      	b.n	8005eba <UART_SetConfig+0x29a>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	76fb      	strb	r3, [r7, #27]
 8005cfa:	e0de      	b.n	8005eba <UART_SetConfig+0x29a>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	76fb      	strb	r3, [r7, #27]
 8005d00:	e0db      	b.n	8005eba <UART_SetConfig+0x29a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a86      	ldr	r2, [pc, #536]	; (8005f20 <UART_SetConfig+0x300>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d132      	bne.n	8005d72 <UART_SetConfig+0x152>
 8005d0c:	4b83      	ldr	r3, [pc, #524]	; (8005f1c <UART_SetConfig+0x2fc>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b0c      	cmp	r3, #12
 8005d18:	d828      	bhi.n	8005d6c <UART_SetConfig+0x14c>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x100>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005d6d 	.word	0x08005d6d
 8005d28:	08005d6d 	.word	0x08005d6d
 8005d2c:	08005d6d 	.word	0x08005d6d
 8005d30:	08005d61 	.word	0x08005d61
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005d5b 	.word	0x08005d5b
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d6d 	.word	0x08005d6d
 8005d50:	08005d67 	.word	0x08005d67
 8005d54:	2300      	movs	r3, #0
 8005d56:	76fb      	strb	r3, [r7, #27]
 8005d58:	e0af      	b.n	8005eba <UART_SetConfig+0x29a>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	76fb      	strb	r3, [r7, #27]
 8005d5e:	e0ac      	b.n	8005eba <UART_SetConfig+0x29a>
 8005d60:	2304      	movs	r3, #4
 8005d62:	76fb      	strb	r3, [r7, #27]
 8005d64:	e0a9      	b.n	8005eba <UART_SetConfig+0x29a>
 8005d66:	2308      	movs	r3, #8
 8005d68:	76fb      	strb	r3, [r7, #27]
 8005d6a:	e0a6      	b.n	8005eba <UART_SetConfig+0x29a>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	76fb      	strb	r3, [r7, #27]
 8005d70:	e0a3      	b.n	8005eba <UART_SetConfig+0x29a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a6b      	ldr	r2, [pc, #428]	; (8005f24 <UART_SetConfig+0x304>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d120      	bne.n	8005dbe <UART_SetConfig+0x19e>
 8005d7c:	4b67      	ldr	r3, [pc, #412]	; (8005f1c <UART_SetConfig+0x2fc>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d86:	2b30      	cmp	r3, #48	; 0x30
 8005d88:	d013      	beq.n	8005db2 <UART_SetConfig+0x192>
 8005d8a:	2b30      	cmp	r3, #48	; 0x30
 8005d8c:	d814      	bhi.n	8005db8 <UART_SetConfig+0x198>
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d009      	beq.n	8005da6 <UART_SetConfig+0x186>
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d810      	bhi.n	8005db8 <UART_SetConfig+0x198>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <UART_SetConfig+0x180>
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d006      	beq.n	8005dac <UART_SetConfig+0x18c>
 8005d9e:	e00b      	b.n	8005db8 <UART_SetConfig+0x198>
 8005da0:	2300      	movs	r3, #0
 8005da2:	76fb      	strb	r3, [r7, #27]
 8005da4:	e089      	b.n	8005eba <UART_SetConfig+0x29a>
 8005da6:	2302      	movs	r3, #2
 8005da8:	76fb      	strb	r3, [r7, #27]
 8005daa:	e086      	b.n	8005eba <UART_SetConfig+0x29a>
 8005dac:	2304      	movs	r3, #4
 8005dae:	76fb      	strb	r3, [r7, #27]
 8005db0:	e083      	b.n	8005eba <UART_SetConfig+0x29a>
 8005db2:	2308      	movs	r3, #8
 8005db4:	76fb      	strb	r3, [r7, #27]
 8005db6:	e080      	b.n	8005eba <UART_SetConfig+0x29a>
 8005db8:	2310      	movs	r3, #16
 8005dba:	76fb      	strb	r3, [r7, #27]
 8005dbc:	e07d      	b.n	8005eba <UART_SetConfig+0x29a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a59      	ldr	r2, [pc, #356]	; (8005f28 <UART_SetConfig+0x308>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d120      	bne.n	8005e0a <UART_SetConfig+0x1ea>
 8005dc8:	4b54      	ldr	r3, [pc, #336]	; (8005f1c <UART_SetConfig+0x2fc>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd4:	d013      	beq.n	8005dfe <UART_SetConfig+0x1de>
 8005dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd8:	d814      	bhi.n	8005e04 <UART_SetConfig+0x1e4>
 8005dda:	2b80      	cmp	r3, #128	; 0x80
 8005ddc:	d009      	beq.n	8005df2 <UART_SetConfig+0x1d2>
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d810      	bhi.n	8005e04 <UART_SetConfig+0x1e4>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <UART_SetConfig+0x1cc>
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d006      	beq.n	8005df8 <UART_SetConfig+0x1d8>
 8005dea:	e00b      	b.n	8005e04 <UART_SetConfig+0x1e4>
 8005dec:	2300      	movs	r3, #0
 8005dee:	76fb      	strb	r3, [r7, #27]
 8005df0:	e063      	b.n	8005eba <UART_SetConfig+0x29a>
 8005df2:	2302      	movs	r3, #2
 8005df4:	76fb      	strb	r3, [r7, #27]
 8005df6:	e060      	b.n	8005eba <UART_SetConfig+0x29a>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	76fb      	strb	r3, [r7, #27]
 8005dfc:	e05d      	b.n	8005eba <UART_SetConfig+0x29a>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	76fb      	strb	r3, [r7, #27]
 8005e02:	e05a      	b.n	8005eba <UART_SetConfig+0x29a>
 8005e04:	2310      	movs	r3, #16
 8005e06:	76fb      	strb	r3, [r7, #27]
 8005e08:	e057      	b.n	8005eba <UART_SetConfig+0x29a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a47      	ldr	r2, [pc, #284]	; (8005f2c <UART_SetConfig+0x30c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d125      	bne.n	8005e60 <UART_SetConfig+0x240>
 8005e14:	4b41      	ldr	r3, [pc, #260]	; (8005f1c <UART_SetConfig+0x2fc>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e22:	d017      	beq.n	8005e54 <UART_SetConfig+0x234>
 8005e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e28:	d817      	bhi.n	8005e5a <UART_SetConfig+0x23a>
 8005e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2e:	d00b      	beq.n	8005e48 <UART_SetConfig+0x228>
 8005e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e34:	d811      	bhi.n	8005e5a <UART_SetConfig+0x23a>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <UART_SetConfig+0x222>
 8005e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3e:	d006      	beq.n	8005e4e <UART_SetConfig+0x22e>
 8005e40:	e00b      	b.n	8005e5a <UART_SetConfig+0x23a>
 8005e42:	2300      	movs	r3, #0
 8005e44:	76fb      	strb	r3, [r7, #27]
 8005e46:	e038      	b.n	8005eba <UART_SetConfig+0x29a>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	76fb      	strb	r3, [r7, #27]
 8005e4c:	e035      	b.n	8005eba <UART_SetConfig+0x29a>
 8005e4e:	2304      	movs	r3, #4
 8005e50:	76fb      	strb	r3, [r7, #27]
 8005e52:	e032      	b.n	8005eba <UART_SetConfig+0x29a>
 8005e54:	2308      	movs	r3, #8
 8005e56:	76fb      	strb	r3, [r7, #27]
 8005e58:	e02f      	b.n	8005eba <UART_SetConfig+0x29a>
 8005e5a:	2310      	movs	r3, #16
 8005e5c:	76fb      	strb	r3, [r7, #27]
 8005e5e:	e02c      	b.n	8005eba <UART_SetConfig+0x29a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <UART_SetConfig+0x2f4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d125      	bne.n	8005eb6 <UART_SetConfig+0x296>
 8005e6a:	4b2c      	ldr	r3, [pc, #176]	; (8005f1c <UART_SetConfig+0x2fc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e78:	d017      	beq.n	8005eaa <UART_SetConfig+0x28a>
 8005e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e7e:	d817      	bhi.n	8005eb0 <UART_SetConfig+0x290>
 8005e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e84:	d00b      	beq.n	8005e9e <UART_SetConfig+0x27e>
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8a:	d811      	bhi.n	8005eb0 <UART_SetConfig+0x290>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <UART_SetConfig+0x278>
 8005e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e94:	d006      	beq.n	8005ea4 <UART_SetConfig+0x284>
 8005e96:	e00b      	b.n	8005eb0 <UART_SetConfig+0x290>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	76fb      	strb	r3, [r7, #27]
 8005e9c:	e00d      	b.n	8005eba <UART_SetConfig+0x29a>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	76fb      	strb	r3, [r7, #27]
 8005ea2:	e00a      	b.n	8005eba <UART_SetConfig+0x29a>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	76fb      	strb	r3, [r7, #27]
 8005ea8:	e007      	b.n	8005eba <UART_SetConfig+0x29a>
 8005eaa:	2308      	movs	r3, #8
 8005eac:	76fb      	strb	r3, [r7, #27]
 8005eae:	e004      	b.n	8005eba <UART_SetConfig+0x29a>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	76fb      	strb	r3, [r7, #27]
 8005eb4:	e001      	b.n	8005eba <UART_SetConfig+0x29a>
 8005eb6:	2310      	movs	r3, #16
 8005eb8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <UART_SetConfig+0x2f4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	f040 809f 	bne.w	8006004 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ec6:	7efb      	ldrb	r3, [r7, #27]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d837      	bhi.n	8005f3c <UART_SetConfig+0x31c>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x2b4>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005f3d 	.word	0x08005f3d
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f3d 	.word	0x08005f3d
 8005ee4:	08005f07 	.word	0x08005f07
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005f3d 	.word	0x08005f3d
 8005ef0:	08005f3d 	.word	0x08005f3d
 8005ef4:	08005f35 	.word	0x08005f35
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef8:	f7fd f8b2 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8005efc:	6178      	str	r0, [r7, #20]
        break;
 8005efe:	e022      	b.n	8005f46 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <UART_SetConfig+0x310>)
 8005f02:	617b      	str	r3, [r7, #20]
        break;
 8005f04:	e01f      	b.n	8005f46 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f06:	f7fd f813 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8005f0a:	6178      	str	r0, [r7, #20]
        break;
 8005f0c:	e01b      	b.n	8005f46 <UART_SetConfig+0x326>
 8005f0e:	bf00      	nop
 8005f10:	cfff69f3 	.word	0xcfff69f3
 8005f14:	40008000 	.word	0x40008000
 8005f18:	40013800 	.word	0x40013800
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40004400 	.word	0x40004400
 8005f24:	40004800 	.word	0x40004800
 8005f28:	40004c00 	.word	0x40004c00
 8005f2c:	40005000 	.word	0x40005000
 8005f30:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f38:	617b      	str	r3, [r7, #20]
        break;
 8005f3a:	e004      	b.n	8005f46 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	76bb      	strb	r3, [r7, #26]
        break;
 8005f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8119 	beq.w	8006180 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	4a95      	ldr	r2, [pc, #596]	; (80061a8 <UART_SetConfig+0x588>)
 8005f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d305      	bcc.n	8005f7e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d902      	bls.n	8005f84 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	76bb      	strb	r3, [r7, #26]
 8005f82:	e0fd      	b.n	8006180 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f04f 0100 	mov.w	r1, #0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	4a85      	ldr	r2, [pc, #532]	; (80061a8 <UART_SetConfig+0x588>)
 8005f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	f7fa fe64 	bl	8000c68 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	020b      	lsls	r3, r1, #8
 8005fb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fb6:	0202      	lsls	r2, r0, #8
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	6849      	ldr	r1, [r1, #4]
 8005fbc:	0849      	lsrs	r1, r1, #1
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	f04f 0100 	mov.w	r1, #0
 8005fc4:	1814      	adds	r4, r2, r0
 8005fc6:	eb43 0501 	adc.w	r5, r3, r1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7fa fe46 	bl	8000c68 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fea:	d308      	bcc.n	8005ffe <UART_SetConfig+0x3de>
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff2:	d204      	bcs.n	8005ffe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	60da      	str	r2, [r3, #12]
 8005ffc:	e0c0      	b.n	8006180 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	76bb      	strb	r3, [r7, #26]
 8006002:	e0bd      	b.n	8006180 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600c:	d164      	bne.n	80060d8 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 800600e:	7efb      	ldrb	r3, [r7, #27]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d828      	bhi.n	8006066 <UART_SetConfig+0x446>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x3fc>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006041 	.word	0x08006041
 8006020:	08006049 	.word	0x08006049
 8006024:	08006051 	.word	0x08006051
 8006028:	08006067 	.word	0x08006067
 800602c:	08006057 	.word	0x08006057
 8006030:	08006067 	.word	0x08006067
 8006034:	08006067 	.word	0x08006067
 8006038:	08006067 	.word	0x08006067
 800603c:	0800605f 	.word	0x0800605f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006040:	f7fd f80e 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8006044:	6178      	str	r0, [r7, #20]
        break;
 8006046:	e013      	b.n	8006070 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006048:	f7fd f820 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 800604c:	6178      	str	r0, [r7, #20]
        break;
 800604e:	e00f      	b.n	8006070 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006050:	4b56      	ldr	r3, [pc, #344]	; (80061ac <UART_SetConfig+0x58c>)
 8006052:	617b      	str	r3, [r7, #20]
        break;
 8006054:	e00c      	b.n	8006070 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006056:	f7fc ff6b 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 800605a:	6178      	str	r0, [r7, #20]
        break;
 800605c:	e008      	b.n	8006070 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006062:	617b      	str	r3, [r7, #20]
        break;
 8006064:	e004      	b.n	8006070 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	76bb      	strb	r3, [r7, #26]
        break;
 800606e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8084 	beq.w	8006180 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	4a4a      	ldr	r2, [pc, #296]	; (80061a8 <UART_SetConfig+0x588>)
 800607e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006082:	461a      	mov	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	fbb3 f3f2 	udiv	r3, r3, r2
 800608a:	005a      	lsls	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	085b      	lsrs	r3, r3, #1
 8006092:	441a      	add	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b0f      	cmp	r3, #15
 80060a2:	d916      	bls.n	80060d2 <UART_SetConfig+0x4b2>
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060aa:	d212      	bcs.n	80060d2 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f023 030f 	bic.w	r3, r3, #15
 80060b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	89fb      	ldrh	r3, [r7, #14]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	89fa      	ldrh	r2, [r7, #14]
 80060ce:	60da      	str	r2, [r3, #12]
 80060d0:	e056      	b.n	8006180 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	76bb      	strb	r3, [r7, #26]
 80060d6:	e053      	b.n	8006180 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060d8:	7efb      	ldrb	r3, [r7, #27]
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d827      	bhi.n	800612e <UART_SetConfig+0x50e>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UART_SetConfig+0x4c4>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006109 	.word	0x08006109
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006119 	.word	0x08006119
 80060f0:	0800612f 	.word	0x0800612f
 80060f4:	0800611f 	.word	0x0800611f
 80060f8:	0800612f 	.word	0x0800612f
 80060fc:	0800612f 	.word	0x0800612f
 8006100:	0800612f 	.word	0x0800612f
 8006104:	08006127 	.word	0x08006127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006108:	f7fc ffaa 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 800610c:	6178      	str	r0, [r7, #20]
        break;
 800610e:	e013      	b.n	8006138 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006110:	f7fc ffbc 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 8006114:	6178      	str	r0, [r7, #20]
        break;
 8006116:	e00f      	b.n	8006138 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006118:	4b24      	ldr	r3, [pc, #144]	; (80061ac <UART_SetConfig+0x58c>)
 800611a:	617b      	str	r3, [r7, #20]
        break;
 800611c:	e00c      	b.n	8006138 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611e:	f7fc ff07 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8006122:	6178      	str	r0, [r7, #20]
        break;
 8006124:	e008      	b.n	8006138 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612a:	617b      	str	r3, [r7, #20]
        break;
 800612c:	e004      	b.n	8006138 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	76bb      	strb	r3, [r7, #26]
        break;
 8006136:	bf00      	nop
    }

    if (pclk != 0U)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d020      	beq.n	8006180 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <UART_SetConfig+0x588>)
 8006144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006148:	461a      	mov	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	441a      	add	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b0f      	cmp	r3, #15
 8006166:	d909      	bls.n	800617c <UART_SetConfig+0x55c>
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616e:	d205      	bcs.n	800617c <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	e001      	b.n	8006180 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800619c:	7ebb      	ldrb	r3, [r7, #26]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bdb0      	pop	{r4, r5, r7, pc}
 80061a6:	bf00      	nop
 80061a8:	0800e114 	.word	0x0800e114
 80061ac:	00f42400 	.word	0x00f42400

080061b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01a      	beq.n	80062c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ae:	d10a      	bne.n	80062c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	605a      	str	r2, [r3, #4]
  }
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006304:	f7fa fe58 	bl	8000fb8 <HAL_GetTick>
 8006308:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b08      	cmp	r3, #8
 8006316:	d10e      	bne.n	8006336 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f82f 	bl	800638a <UART_WaitOnFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e025      	b.n	8006382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b04      	cmp	r3, #4
 8006342:	d10e      	bne.n	8006362 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f819 	bl	800638a <UART_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e00f      	b.n	8006382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b09c      	sub	sp, #112	; 0x70
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639a:	e0a9      	b.n	80064f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	f000 80a5 	beq.w	80064f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a6:	f7fa fe07 	bl	8000fb8 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <UART_WaitOnFlagUntilTimeout+0x32>
 80063b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d140      	bne.n	800643e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063d0:	667b      	str	r3, [r7, #100]	; 0x64
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e6      	bne.n	80063bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	663b      	str	r3, [r7, #96]	; 0x60
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3308      	adds	r3, #8
 800640c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800640e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800641c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e5      	bne.n	80063ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e069      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d051      	beq.n	80064f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645a:	d149      	bne.n	80064f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006464:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800647a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
 8006486:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800648a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e6      	bne.n	8006466 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	613b      	str	r3, [r7, #16]
   return(result);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f023 0301 	bic.w	r3, r3, #1
 80064ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064b8:	623a      	str	r2, [r7, #32]
 80064ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e5      	bne.n	8006498 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e010      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4013      	ands	r3, r2
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	429a      	cmp	r2, r3
 800650c:	f43f af46 	beq.w	800639c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3770      	adds	r7, #112	; 0x70
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800651c:	b480      	push	{r7}
 800651e:	b0a3      	sub	sp, #140	; 0x8c
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654e:	d10e      	bne.n	800656e <UART_Start_Receive_IT+0x52>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d105      	bne.n	8006564 <UART_Start_Receive_IT+0x48>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800655e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006562:	e02d      	b.n	80065c0 <UART_Start_Receive_IT+0xa4>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	22ff      	movs	r2, #255	; 0xff
 8006568:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800656c:	e028      	b.n	80065c0 <UART_Start_Receive_IT+0xa4>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10d      	bne.n	8006592 <UART_Start_Receive_IT+0x76>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <UART_Start_Receive_IT+0x6c>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	22ff      	movs	r2, #255	; 0xff
 8006582:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006586:	e01b      	b.n	80065c0 <UART_Start_Receive_IT+0xa4>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	227f      	movs	r2, #127	; 0x7f
 800658c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006590:	e016      	b.n	80065c0 <UART_Start_Receive_IT+0xa4>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800659a:	d10d      	bne.n	80065b8 <UART_Start_Receive_IT+0x9c>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <UART_Start_Receive_IT+0x92>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	227f      	movs	r2, #127	; 0x7f
 80065a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065ac:	e008      	b.n	80065c0 <UART_Start_Receive_IT+0xa4>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	223f      	movs	r2, #63	; 0x3f
 80065b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80065b6:	e003      	b.n	80065c0 <UART_Start_Receive_IT+0xa4>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2222      	movs	r2, #34	; 0x22
 80065cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80065e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80065f4:	673a      	str	r2, [r7, #112]	; 0x70
 80065f6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80065fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e3      	bne.n	80065d0 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800660c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006610:	d153      	bne.n	80066ba <UART_Start_Receive_IT+0x19e>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	429a      	cmp	r2, r3
 800661c:	d34d      	bcc.n	80066ba <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006626:	d107      	bne.n	8006638 <UART_Start_Receive_IT+0x11c>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d103      	bne.n	8006638 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a4b      	ldr	r2, [pc, #300]	; (8006760 <UART_Start_Receive_IT+0x244>)
 8006634:	671a      	str	r2, [r3, #112]	; 0x70
 8006636:	e002      	b.n	800663e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a4a      	ldr	r2, [pc, #296]	; (8006764 <UART_Start_Receive_IT+0x248>)
 800663c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01a      	beq.n	8006684 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800665c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006672:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006676:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800667e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e4      	bne.n	800664e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3308      	adds	r3, #8
 80066a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80066a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80066a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e5      	bne.n	8006684 <UART_Start_Receive_IT+0x168>
 80066b8:	e04a      	b.n	8006750 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	d107      	bne.n	80066d4 <UART_Start_Receive_IT+0x1b8>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a26      	ldr	r2, [pc, #152]	; (8006768 <UART_Start_Receive_IT+0x24c>)
 80066d0:	671a      	str	r2, [r3, #112]	; 0x70
 80066d2:	e002      	b.n	80066da <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a25      	ldr	r2, [pc, #148]	; (800676c <UART_Start_Receive_IT+0x250>)
 80066d8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d019      	beq.n	800671e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80066fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
 800670a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800670e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_Start_Receive_IT+0x1ce>
 800671c:	e018      	b.n	8006750 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	613b      	str	r3, [r7, #16]
   return(result);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f043 0320 	orr.w	r3, r3, #32
 8006732:	67bb      	str	r3, [r7, #120]	; 0x78
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	69f9      	ldr	r1, [r7, #28]
 8006742:	6a3a      	ldr	r2, [r7, #32]
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	61bb      	str	r3, [r7, #24]
   return(result);
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e6      	bne.n	800671e <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	378c      	adds	r7, #140	; 0x8c
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	08006e85 	.word	0x08006e85
 8006764:	08006b89 	.word	0x08006b89
 8006768:	08006a23 	.word	0x08006a23
 800676c:	080068bf 	.word	0x080068bf

08006770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b095      	sub	sp, #84	; 0x54
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800678c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006796:	643b      	str	r3, [r7, #64]	; 0x40
 8006798:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800679c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e6      	bne.n	8006778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3308      	adds	r3, #8
 80067cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e3      	bne.n	80067aa <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d118      	bne.n	800681c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f023 0310 	bic.w	r3, r3, #16
 80067fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	613b      	str	r3, [r7, #16]
   return(result);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e6      	bne.n	80067ea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006830:	bf00      	nop
 8006832:	3754      	adds	r7, #84	; 0x54
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff f9ca 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	60bb      	str	r3, [r7, #8]
   return(result);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	613b      	str	r3, [r7, #16]
   return(result);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e6      	bne.n	8006870 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff f995 	bl	8005be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b6:	bf00      	nop
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b096      	sub	sp, #88	; 0x58
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d6:	2b22      	cmp	r3, #34	; 0x22
 80068d8:	f040 8095 	bne.w	8006a06 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80068ea:	b2d9      	uxtb	r1, r3
 80068ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f6:	400a      	ands	r2, r1
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d17a      	bne.n	8006a1a <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006938:	653b      	str	r3, [r7, #80]	; 0x50
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006942:	647b      	str	r3, [r7, #68]	; 0x44
 8006944:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	623b      	str	r3, [r7, #32]
   return(result);
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006976:	633a      	str	r2, [r7, #48]	; 0x30
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800697c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d12e      	bne.n	80069fe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0310 	bic.w	r3, r3, #16
 80069ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c4:	61fb      	str	r3, [r7, #28]
 80069c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	69b9      	ldr	r1, [r7, #24]
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	617b      	str	r3, [r7, #20]
   return(result);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e6      	bne.n	80069a6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d103      	bne.n	80069ee <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2210      	movs	r2, #16
 80069ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff f906 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069fc:	e00d      	b.n	8006a1a <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f004 f950 	bl	800aca4 <HAL_UART_RxCpltCallback>
}
 8006a04:	e009      	b.n	8006a1a <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	8b1b      	ldrh	r3, [r3, #24]
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0208 	orr.w	r2, r2, #8
 8006a16:	b292      	uxth	r2, r2
 8006a18:	831a      	strh	r2, [r3, #24]
}
 8006a1a:	bf00      	nop
 8006a1c:	3758      	adds	r7, #88	; 0x58
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b096      	sub	sp, #88	; 0x58
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	2b22      	cmp	r3, #34	; 0x22
 8006a3c:	f040 8095 	bne.w	8006b6a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a46:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a50:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006a54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a58:	4013      	ands	r3, r2
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a64:	1c9a      	adds	r2, r3, #2
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d17a      	bne.n	8006b7e <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e6      	bne.n	8006a88 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f023 0301 	bic.w	r3, r3, #1
 8006ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d12e      	bne.n	8006b62 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f023 0310 	bic.w	r3, r3, #16
 8006b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6979      	ldr	r1, [r7, #20]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	613b      	str	r3, [r7, #16]
   return(result);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e6      	bne.n	8006b0a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d103      	bne.n	8006b52 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff f854 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b60:	e00d      	b.n	8006b7e <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f004 f89e 	bl	800aca4 <HAL_UART_RxCpltCallback>
}
 8006b68:	e009      	b.n	8006b7e <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	8b1b      	ldrh	r3, [r3, #24]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0208 	orr.w	r2, r2, #8
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	831a      	strh	r2, [r3, #24]
}
 8006b7e:	bf00      	nop
 8006b80:	3758      	adds	r7, #88	; 0x58
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b0a6      	sub	sp, #152	; 0x98
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b96:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbe:	2b22      	cmp	r3, #34	; 0x22
 8006bc0:	f040 814f 	bne.w	8006e62 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006bca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006bce:	e0f6      	b.n	8006dbe <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bd6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bda:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006bde:	b2d9      	uxtb	r1, r3
 8006be0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bea:	400a      	ands	r2, r1
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d053      	beq.n	8006cca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d011      	beq.n	8006c52 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00b      	beq.n	8006c52 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c48:	f043 0201 	orr.w	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d011      	beq.n	8006c82 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c78:	f043 0204 	orr.w	r2, r3, #4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d011      	beq.n	8006cb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca8:	f043 0202 	orr.w	r2, r3, #2
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7fe ff99 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d173      	bne.n	8006dbe <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cfa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006cfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e4      	bne.n	8006cd6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3308      	adds	r3, #8
 8006d12:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006d30:	657a      	str	r2, [r7, #84]	; 0x54
 8006d32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e3      	bne.n	8006d0c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d12e      	bne.n	8006db8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	f023 0310 	bic.w	r3, r3, #16
 8006d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e6      	bne.n	8006d60 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d103      	bne.n	8006da8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2210      	movs	r2, #16
 8006da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7fe ff29 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
 8006db6:	e002      	b.n	8006dbe <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f003 ff73 	bl	800aca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006dbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d006      	beq.n	8006dd4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006dc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f47f aefe 	bne.w	8006bd0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006dde:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d047      	beq.n	8006e76 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006dec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d240      	bcs.n	8006e76 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e0a:	673b      	str	r3, [r7, #112]	; 0x70
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3308      	adds	r3, #8
 8006e12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e5      	bne.n	8006df4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8006e2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f043 0320 	orr.w	r3, r3, #32
 8006e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6979      	ldr	r1, [r7, #20]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e6      	bne.n	8006e2e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e60:	e009      	b.n	8006e76 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	8b1b      	ldrh	r3, [r3, #24]
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0208 	orr.w	r2, r2, #8
 8006e72:	b292      	uxth	r2, r2
 8006e74:	831a      	strh	r2, [r3, #24]
}
 8006e76:	bf00      	nop
 8006e78:	3798      	adds	r7, #152	; 0x98
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	080068bf 	.word	0x080068bf

08006e84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b0a8      	sub	sp, #160	; 0xa0
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e92:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eba:	2b22      	cmp	r3, #34	; 0x22
 8006ebc:	f040 8153 	bne.w	8007166 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ec6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eca:	e0fa      	b.n	80070c2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ed2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ede:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006ee2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006eee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef4:	1c9a      	adds	r2, r3, #2
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d053      	beq.n	8006fca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d011      	beq.n	8006f52 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006f2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f48:	f043 0201 	orr.w	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d011      	beq.n	8006f82 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f78:	f043 0204 	orr.w	r2, r3, #4
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d011      	beq.n	8006fb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa8:	f043 0202 	orr.w	r2, r3, #2
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7fe fe19 	bl	8005bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d175      	bne.n	80070c2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ffa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ffe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e4      	bne.n	8006fd6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3308      	adds	r3, #8
 8007012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800701c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800701e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007022:	f023 0301 	bic.w	r3, r3, #1
 8007026:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007034:	65ba      	str	r2, [r7, #88]	; 0x58
 8007036:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800703a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e1      	bne.n	800700c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d12e      	bne.n	80070bc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007074:	f023 0310 	bic.w	r3, r3, #16
 8007078:	67fb      	str	r3, [r7, #124]	; 0x7c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007082:	647b      	str	r3, [r7, #68]	; 0x44
 8007084:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e6      	bne.n	8007064 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d103      	bne.n	80070ac <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2210      	movs	r2, #16
 80070aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fe fda7 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
 80070ba:	e002      	b.n	80070c2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f003 fdf1 	bl	800aca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d006      	beq.n	80070d8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80070ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f47f aefa 	bne.w	8006ecc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070de:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d047      	beq.n	800717a <UART_RxISR_16BIT_FIFOEN+0x2f6>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070f0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d240      	bcs.n	800717a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	623b      	str	r3, [r7, #32]
   return(result);
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800710e:	677b      	str	r3, [r7, #116]	; 0x74
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007118:	633a      	str	r2, [r7, #48]	; 0x30
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800711e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e5      	bne.n	80070f8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a15      	ldr	r2, [pc, #84]	; (8007184 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8007130:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f043 0320 	orr.w	r3, r3, #32
 8007146:	673b      	str	r3, [r7, #112]	; 0x70
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	69b9      	ldr	r1, [r7, #24]
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	617b      	str	r3, [r7, #20]
   return(result);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e6      	bne.n	8007132 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007164:	e009      	b.n	800717a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	8b1b      	ldrh	r3, [r3, #24]
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0208 	orr.w	r2, r2, #8
 8007176:	b292      	uxth	r2, r2
 8007178:	831a      	strh	r2, [r3, #24]
}
 800717a:	bf00      	nop
 800717c:	37a0      	adds	r7, #160	; 0xa0
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	08006a23 	.word	0x08006a23

08007188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_UARTEx_DisableFifoMode+0x16>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e027      	b.n	800722a <HAL_UARTEx_DisableFifoMode+0x66>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2224      	movs	r2, #36	; 0x24
 80071e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0201 	bic.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800724a:	2302      	movs	r3, #2
 800724c:	e02d      	b.n	80072aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2224      	movs	r2, #36	; 0x24
 800725a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f850 	bl	8007330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e02d      	b.n	8007326 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2224      	movs	r2, #36	; 0x24
 80072d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f812 	bl	8007330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800733c:	2b00      	cmp	r3, #0
 800733e:	d108      	bne.n	8007352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007350:	e031      	b.n	80073b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007352:	2308      	movs	r3, #8
 8007354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007356:	2308      	movs	r3, #8
 8007358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	0e5b      	lsrs	r3, r3, #25
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	0f5b      	lsrs	r3, r3, #29
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	7b3a      	ldrb	r2, [r7, #12]
 800737e:	4911      	ldr	r1, [pc, #68]	; (80073c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007380:	5c8a      	ldrb	r2, [r1, r2]
 8007382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007386:	7b3a      	ldrb	r2, [r7, #12]
 8007388:	490f      	ldr	r1, [pc, #60]	; (80073c8 <UARTEx_SetNbDataToProcess+0x98>)
 800738a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800738c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	7b7a      	ldrb	r2, [r7, #13]
 800739c:	4909      	ldr	r1, [pc, #36]	; (80073c4 <UARTEx_SetNbDataToProcess+0x94>)
 800739e:	5c8a      	ldrb	r2, [r1, r2]
 80073a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073a4:	7b7a      	ldrb	r2, [r7, #13]
 80073a6:	4908      	ldr	r1, [pc, #32]	; (80073c8 <UARTEx_SetNbDataToProcess+0x98>)
 80073a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	0800e12c 	.word	0x0800e12c
 80073c8:	0800e134 	.word	0x0800e134

080073cc <__NVIC_SetPriority>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	6039      	str	r1, [r7, #0]
 80073d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	db0a      	blt.n	80073f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	490c      	ldr	r1, [pc, #48]	; (8007418 <__NVIC_SetPriority+0x4c>)
 80073e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ea:	0112      	lsls	r2, r2, #4
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	440b      	add	r3, r1
 80073f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80073f4:	e00a      	b.n	800740c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	4908      	ldr	r1, [pc, #32]	; (800741c <__NVIC_SetPriority+0x50>)
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	3b04      	subs	r3, #4
 8007404:	0112      	lsls	r2, r2, #4
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	440b      	add	r3, r1
 800740a:	761a      	strb	r2, [r3, #24]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	e000e100 	.word	0xe000e100
 800741c:	e000ed00 	.word	0xe000ed00

08007420 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007424:	4b05      	ldr	r3, [pc, #20]	; (800743c <SysTick_Handler+0x1c>)
 8007426:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007428:	f001 fd28 	bl	8008e7c <xTaskGetSchedulerState>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d001      	beq.n	8007436 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007432:	f002 fb11 	bl	8009a58 <xPortSysTickHandler>
  }
}
 8007436:	bf00      	nop
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	e000e010 	.word	0xe000e010

08007440 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007444:	2100      	movs	r1, #0
 8007446:	f06f 0004 	mvn.w	r0, #4
 800744a:	f7ff ffbf 	bl	80073cc <__NVIC_SetPriority>
#endif
}
 800744e:	bf00      	nop
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800745a:	f3ef 8305 	mrs	r3, IPSR
 800745e:	603b      	str	r3, [r7, #0]
  return(result);
 8007460:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007466:	f06f 0305 	mvn.w	r3, #5
 800746a:	607b      	str	r3, [r7, #4]
 800746c:	e00c      	b.n	8007488 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800746e:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <osKernelInitialize+0x44>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007476:	4b08      	ldr	r3, [pc, #32]	; (8007498 <osKernelInitialize+0x44>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800747c:	2300      	movs	r3, #0
 800747e:	607b      	str	r3, [r7, #4]
 8007480:	e002      	b.n	8007488 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295
 8007486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007488:	687b      	ldr	r3, [r7, #4]
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	2000067c 	.word	0x2000067c

0800749c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a2:	f3ef 8305 	mrs	r3, IPSR
 80074a6:	603b      	str	r3, [r7, #0]
  return(result);
 80074a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80074ae:	f06f 0305 	mvn.w	r3, #5
 80074b2:	607b      	str	r3, [r7, #4]
 80074b4:	e010      	b.n	80074d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074b6:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <osKernelStart+0x48>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d109      	bne.n	80074d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074be:	f7ff ffbf 	bl	8007440 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074c2:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <osKernelStart+0x48>)
 80074c4:	2202      	movs	r2, #2
 80074c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074c8:	f001 f87c 	bl	80085c4 <vTaskStartScheduler>
      stat = osOK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	607b      	str	r3, [r7, #4]
 80074d0:	e002      	b.n	80074d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295
 80074d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074d8:	687b      	ldr	r3, [r7, #4]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	2000067c 	.word	0x2000067c

080074e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08e      	sub	sp, #56	; 0x38
 80074ec:	af04      	add	r7, sp, #16
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f8:	f3ef 8305 	mrs	r3, IPSR
 80074fc:	617b      	str	r3, [r7, #20]
  return(result);
 80074fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007500:	2b00      	cmp	r3, #0
 8007502:	d17e      	bne.n	8007602 <osThreadNew+0x11a>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d07b      	beq.n	8007602 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800750a:	2380      	movs	r3, #128	; 0x80
 800750c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800750e:	2318      	movs	r3, #24
 8007510:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007516:	f04f 33ff 	mov.w	r3, #4294967295
 800751a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d045      	beq.n	80075ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <osThreadNew+0x48>
        name = attr->name;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <osThreadNew+0x6e>
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2b38      	cmp	r3, #56	; 0x38
 8007548:	d805      	bhi.n	8007556 <osThreadNew+0x6e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <osThreadNew+0x72>
        return (NULL);
 8007556:	2300      	movs	r3, #0
 8007558:	e054      	b.n	8007604 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	089b      	lsrs	r3, r3, #2
 8007568:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00e      	beq.n	8007590 <osThreadNew+0xa8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	2bbb      	cmp	r3, #187	; 0xbb
 8007578:	d90a      	bls.n	8007590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800757e:	2b00      	cmp	r3, #0
 8007580:	d006      	beq.n	8007590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <osThreadNew+0xa8>
        mem = 1;
 800758a:	2301      	movs	r3, #1
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e010      	b.n	80075b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10c      	bne.n	80075b2 <osThreadNew+0xca>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <osThreadNew+0xca>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <osThreadNew+0xca>
          mem = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	e001      	b.n	80075b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d110      	bne.n	80075da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075c0:	9202      	str	r2, [sp, #8]
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6a3a      	ldr	r2, [r7, #32]
 80075cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fe0c 	bl	80081ec <xTaskCreateStatic>
 80075d4:	4603      	mov	r3, r0
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	e013      	b.n	8007602 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d110      	bne.n	8007602 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f107 0310 	add.w	r3, r7, #16
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 fe57 	bl	80082a6 <xTaskCreate>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d001      	beq.n	8007602 <osThreadNew+0x11a>
            hTask = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007602:	693b      	ldr	r3, [r7, #16]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	; 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007614:	f3ef 8305 	mrs	r3, IPSR
 8007618:	60bb      	str	r3, [r7, #8]
  return(result);
 800761a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <osDelay+0x1c>
    stat = osErrorISR;
 8007620:	f06f 0305 	mvn.w	r3, #5
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	e007      	b.n	8007638 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 ff92 	bl	800855c <vTaskDelay>
    }
  }

  return (stat);
 8007638:	68fb      	ldr	r3, [r7, #12]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a07      	ldr	r2, [pc, #28]	; (8007670 <vApplicationGetIdleTaskMemory+0x2c>)
 8007654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4a06      	ldr	r2, [pc, #24]	; (8007674 <vApplicationGetIdleTaskMemory+0x30>)
 800765a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2280      	movs	r2, #128	; 0x80
 8007660:	601a      	str	r2, [r3, #0]
}
 8007662:	bf00      	nop
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	20000680 	.word	0x20000680
 8007674:	2000073c 	.word	0x2000073c

08007678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4a07      	ldr	r2, [pc, #28]	; (80076a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4a06      	ldr	r2, [pc, #24]	; (80076a8 <vApplicationGetTimerTaskMemory+0x30>)
 800768e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007696:	601a      	str	r2, [r3, #0]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	2000093c 	.word	0x2000093c
 80076a8:	200009f8 	.word	0x200009f8

080076ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0208 	add.w	r2, r3, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f103 0208 	add.w	r2, r3, #8
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f103 0208 	add.w	r2, r3, #8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
}
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d103      	bne.n	800776e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e00c      	b.n	8007788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3308      	adds	r3, #8
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e002      	b.n	800777c <vListInsert+0x2e>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d2f6      	bcs.n	8007776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	601a      	str	r2, [r3, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6892      	ldr	r2, [r2, #8]
 80077d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6852      	ldr	r2, [r2, #4]
 80077e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d103      	bne.n	80077f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	1e5a      	subs	r2, r3, #1
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800783e:	f002 f879 	bl	8009934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784a:	68f9      	ldr	r1, [r7, #12]
 800784c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800784e:	fb01 f303 	mul.w	r3, r1, r3
 8007852:	441a      	add	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	3b01      	subs	r3, #1
 8007870:	68f9      	ldr	r1, [r7, #12]
 8007872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	22ff      	movs	r2, #255	; 0xff
 8007882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	22ff      	movs	r2, #255	; 0xff
 800788a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d114      	bne.n	80078be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01a      	beq.n	80078d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3310      	adds	r3, #16
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 f929 	bl	8008af8 <xTaskRemoveFromEventList>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d012      	beq.n	80078d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078ac:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <xQueueGenericReset+0xcc>)
 80078ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	e009      	b.n	80078d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3310      	adds	r3, #16
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff fef2 	bl	80076ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff feed 	bl	80076ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078d2:	f002 f85f 	bl	8009994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078d6:	2301      	movs	r3, #1
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08e      	sub	sp, #56	; 0x38
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <xQueueGenericCreateStatic+0x52>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <xQueueGenericCreateStatic+0x56>
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <xQueueGenericCreateStatic+0x58>
 800793a:	2300      	movs	r3, #0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10a      	bne.n	8007956 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	623b      	str	r3, [r7, #32]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <xQueueGenericCreateStatic+0x7e>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <xQueueGenericCreateStatic+0x82>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <xQueueGenericCreateStatic+0x84>
 8007966:	2300      	movs	r3, #0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	61fb      	str	r3, [r7, #28]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007982:	2350      	movs	r3, #80	; 0x50
 8007984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b50      	cmp	r3, #80	; 0x50
 800798a:	d00a      	beq.n	80079a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	61bb      	str	r3, [r7, #24]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00d      	beq.n	80079ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	4613      	mov	r3, r2
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f000 f805 	bl	80079d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3730      	adds	r7, #48	; 0x30
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	e002      	b.n	80079f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a02:	2101      	movs	r1, #1
 8007a04:	69b8      	ldr	r0, [r7, #24]
 8007a06:	f7ff ff05 	bl	8007814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08e      	sub	sp, #56	; 0x38
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <xQueueGenericSend+0x32>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <xQueueGenericSend+0x40>
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <xQueueGenericSend+0x44>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <xQueueGenericSend+0x46>
 8007a60:	2300      	movs	r3, #0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <xQueueGenericSend+0x60>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d103      	bne.n	8007a8a <xQueueGenericSend+0x6e>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <xQueueGenericSend+0x72>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <xQueueGenericSend+0x74>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xQueueGenericSend+0x8e>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	623b      	str	r3, [r7, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aaa:	f001 f9e7 	bl	8008e7c <xTaskGetSchedulerState>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <xQueueGenericSend+0x9e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <xQueueGenericSend+0xa2>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <xQueueGenericSend+0xa4>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <xQueueGenericSend+0xbe>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	61fb      	str	r3, [r7, #28]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ada:	f001 ff2b 	bl	8009934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d302      	bcc.n	8007af0 <xQueueGenericSend+0xd4>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d129      	bne.n	8007b44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007af6:	f000 fa0b 	bl	8007f10 <prvCopyDataToQueue>
 8007afa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d010      	beq.n	8007b26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	3324      	adds	r3, #36	; 0x24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fff5 	bl	8008af8 <xTaskRemoveFromEventList>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d013      	beq.n	8007b3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b14:	4b3f      	ldr	r3, [pc, #252]	; (8007c14 <xQueueGenericSend+0x1f8>)
 8007b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	e00a      	b.n	8007b3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b2c:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <xQueueGenericSend+0x1f8>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b3c:	f001 ff2a 	bl	8009994 <vPortExitCritical>
				return pdPASS;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e063      	b.n	8007c0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b4a:	f001 ff23 	bl	8009994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e05c      	b.n	8007c0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b58:	f107 0314 	add.w	r3, r7, #20
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 f82f 	bl	8008bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b62:	2301      	movs	r3, #1
 8007b64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b66:	f001 ff15 	bl	8009994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b6a:	f000 fd9b 	bl	80086a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b6e:	f001 fee1 	bl	8009934 <vPortEnterCritical>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b78:	b25b      	sxtb	r3, r3
 8007b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7e:	d103      	bne.n	8007b88 <xQueueGenericSend+0x16c>
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b8e:	b25b      	sxtb	r3, r3
 8007b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b94:	d103      	bne.n	8007b9e <xQueueGenericSend+0x182>
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b9e:	f001 fef9 	bl	8009994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ba2:	1d3a      	adds	r2, r7, #4
 8007ba4:	f107 0314 	add.w	r3, r7, #20
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f001 f81e 	bl	8008bec <xTaskCheckForTimeOut>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d124      	bne.n	8007c00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb8:	f000 faa2 	bl	8008100 <prvIsQueueFull>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d018      	beq.n	8007bf4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	3310      	adds	r3, #16
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 ff44 	bl	8008a58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bd2:	f000 fa2d 	bl	8008030 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007bd6:	f000 fd73 	bl	80086c0 <xTaskResumeAll>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f47f af7c 	bne.w	8007ada <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007be2:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <xQueueGenericSend+0x1f8>)
 8007be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	e772      	b.n	8007ada <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bf6:	f000 fa1b 	bl	8008030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bfa:	f000 fd61 	bl	80086c0 <xTaskResumeAll>
 8007bfe:	e76c      	b.n	8007ada <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c02:	f000 fa15 	bl	8008030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c06:	f000 fd5b 	bl	80086c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3738      	adds	r7, #56	; 0x38
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b090      	sub	sp, #64	; 0x40
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <xQueueGenericSendFromISR+0x3c>
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <xQueueGenericSendFromISR+0x40>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <xQueueGenericSendFromISR+0x42>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d103      	bne.n	8007c82 <xQueueGenericSendFromISR+0x6a>
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <xQueueGenericSendFromISR+0x6e>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueGenericSendFromISR+0x70>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	623b      	str	r3, [r7, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ca2:	f001 ff29 	bl	8009af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ca6:	f3ef 8211 	mrs	r2, BASEPRI
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	61fa      	str	r2, [r7, #28]
 8007cbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d302      	bcc.n	8007cd4 <xQueueGenericSendFromISR+0xbc>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d12f      	bne.n	8007d34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cea:	f000 f911 	bl	8007f10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d112      	bne.n	8007d1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d016      	beq.n	8007d2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	3324      	adds	r3, #36	; 0x24
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fef7 	bl	8008af8 <xTaskRemoveFromEventList>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00e      	beq.n	8007d2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00b      	beq.n	8007d2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e007      	b.n	8007d2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d22:	3301      	adds	r3, #1
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	b25a      	sxtb	r2, r3
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007d32:	e001      	b.n	8007d38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007d42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3740      	adds	r7, #64	; 0x40
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08c      	sub	sp, #48	; 0x30
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10a      	bne.n	8007d80 <xQueueReceive+0x30>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	623b      	str	r3, [r7, #32]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <xQueueReceive+0x3e>
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <xQueueReceive+0x42>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e000      	b.n	8007d94 <xQueueReceive+0x44>
 8007d92:	2300      	movs	r3, #0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <xQueueReceive+0x5e>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	61fb      	str	r3, [r7, #28]
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dae:	f001 f865 	bl	8008e7c <xTaskGetSchedulerState>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <xQueueReceive+0x6e>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <xQueueReceive+0x72>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <xQueueReceive+0x74>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <xQueueReceive+0x8e>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	61bb      	str	r3, [r7, #24]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dde:	f001 fda9 	bl	8009934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d01f      	beq.n	8007e2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df2:	f000 f8f7 	bl	8007fe4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	1e5a      	subs	r2, r3, #1
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00f      	beq.n	8007e26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	3310      	adds	r3, #16
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fe74 	bl	8008af8 <xTaskRemoveFromEventList>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d007      	beq.n	8007e26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e16:	4b3d      	ldr	r3, [pc, #244]	; (8007f0c <xQueueReceive+0x1bc>)
 8007e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e26:	f001 fdb5 	bl	8009994 <vPortExitCritical>
				return pdPASS;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e069      	b.n	8007f02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e34:	f001 fdae 	bl	8009994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e062      	b.n	8007f02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e42:	f107 0310 	add.w	r3, r7, #16
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 feba 	bl	8008bc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e50:	f001 fda0 	bl	8009994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e54:	f000 fc26 	bl	80086a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e58:	f001 fd6c 	bl	8009934 <vPortEnterCritical>
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e62:	b25b      	sxtb	r3, r3
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e68:	d103      	bne.n	8007e72 <xQueueReceive+0x122>
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e78:	b25b      	sxtb	r3, r3
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	d103      	bne.n	8007e88 <xQueueReceive+0x138>
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e88:	f001 fd84 	bl	8009994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e8c:	1d3a      	adds	r2, r7, #4
 8007e8e:	f107 0310 	add.w	r3, r7, #16
 8007e92:	4611      	mov	r1, r2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fea9 	bl	8008bec <xTaskCheckForTimeOut>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d123      	bne.n	8007ee8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea2:	f000 f917 	bl	80080d4 <prvIsQueueEmpty>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d017      	beq.n	8007edc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	3324      	adds	r3, #36	; 0x24
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fdcf 	bl	8008a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ebc:	f000 f8b8 	bl	8008030 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ec0:	f000 fbfe 	bl	80086c0 <xTaskResumeAll>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d189      	bne.n	8007dde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007eca:	4b10      	ldr	r3, [pc, #64]	; (8007f0c <xQueueReceive+0x1bc>)
 8007ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	e780      	b.n	8007dde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ede:	f000 f8a7 	bl	8008030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ee2:	f000 fbed 	bl	80086c0 <xTaskResumeAll>
 8007ee6:	e77a      	b.n	8007dde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eea:	f000 f8a1 	bl	8008030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eee:	f000 fbe7 	bl	80086c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef4:	f000 f8ee 	bl	80080d4 <prvIsQueueEmpty>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f43f af6f 	beq.w	8007dde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3730      	adds	r7, #48	; 0x30
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	e000ed04 	.word	0xe000ed04

08007f10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10d      	bne.n	8007f4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d14d      	bne.n	8007fd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 ffbc 	bl	8008eb8 <xTaskPriorityDisinherit>
 8007f40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	609a      	str	r2, [r3, #8]
 8007f48:	e043      	b.n	8007fd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d119      	bne.n	8007f84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6858      	ldr	r0, [r3, #4]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	f004 fcb0 	bl	800c8c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	441a      	add	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d32b      	bcc.n	8007fd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	e026      	b.n	8007fd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68d8      	ldr	r0, [r3, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	f004 fc96 	bl	800c8c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	425b      	negs	r3, r3
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d207      	bcs.n	8007fc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	425b      	negs	r3, r3
 8007fba:	441a      	add	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d105      	bne.n	8007fd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007fda:	697b      	ldr	r3, [r7, #20]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d018      	beq.n	8008028 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	441a      	add	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	429a      	cmp	r2, r3
 800800e:	d303      	bcc.n	8008018 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68d9      	ldr	r1, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	461a      	mov	r2, r3
 8008022:	6838      	ldr	r0, [r7, #0]
 8008024:	f004 fc4c 	bl	800c8c0 <memcpy>
	}
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008038:	f001 fc7c 	bl	8009934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008042:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008044:	e011      	b.n	800806a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	d012      	beq.n	8008074 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3324      	adds	r3, #36	; 0x24
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fd50 	bl	8008af8 <xTaskRemoveFromEventList>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800805e:	f000 fe27 	bl	8008cb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	3b01      	subs	r3, #1
 8008066:	b2db      	uxtb	r3, r3
 8008068:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800806a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800806e:	2b00      	cmp	r3, #0
 8008070:	dce9      	bgt.n	8008046 <prvUnlockQueue+0x16>
 8008072:	e000      	b.n	8008076 <prvUnlockQueue+0x46>
					break;
 8008074:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	22ff      	movs	r2, #255	; 0xff
 800807a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800807e:	f001 fc89 	bl	8009994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008082:	f001 fc57 	bl	8009934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800808c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800808e:	e011      	b.n	80080b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d012      	beq.n	80080be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3310      	adds	r3, #16
 800809c:	4618      	mov	r0, r3
 800809e:	f000 fd2b 	bl	8008af8 <xTaskRemoveFromEventList>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080a8:	f000 fe02 	bl	8008cb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dce9      	bgt.n	8008090 <prvUnlockQueue+0x60>
 80080bc:	e000      	b.n	80080c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	22ff      	movs	r2, #255	; 0xff
 80080c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080c8:	f001 fc64 	bl	8009994 <vPortExitCritical>
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080dc:	f001 fc2a 	bl	8009934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e001      	b.n	80080f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080f2:	f001 fc4f 	bl	8009994 <vPortExitCritical>

	return xReturn;
 80080f6:	68fb      	ldr	r3, [r7, #12]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008108:	f001 fc14 	bl	8009934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008114:	429a      	cmp	r2, r3
 8008116:	d102      	bne.n	800811e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008118:	2301      	movs	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	e001      	b.n	8008122 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008122:	f001 fc37 	bl	8009994 <vPortExitCritical>

	return xReturn;
 8008126:	68fb      	ldr	r3, [r7, #12]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	e014      	b.n	800816a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008140:	4a0f      	ldr	r2, [pc, #60]	; (8008180 <vQueueAddToRegistry+0x50>)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10b      	bne.n	8008164 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800814c:	490c      	ldr	r1, [pc, #48]	; (8008180 <vQueueAddToRegistry+0x50>)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008156:	4a0a      	ldr	r2, [pc, #40]	; (8008180 <vQueueAddToRegistry+0x50>)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4413      	add	r3, r2
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008162:	e006      	b.n	8008172 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3301      	adds	r3, #1
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b07      	cmp	r3, #7
 800816e:	d9e7      	bls.n	8008140 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008170:	bf00      	nop
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20002024 	.word	0x20002024

08008184 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008194:	f001 fbce 	bl	8009934 <vPortEnterCritical>
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800819e:	b25b      	sxtb	r3, r3
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d103      	bne.n	80081ae <vQueueWaitForMessageRestricted+0x2a>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081b4:	b25b      	sxtb	r3, r3
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	d103      	bne.n	80081c4 <vQueueWaitForMessageRestricted+0x40>
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081c4:	f001 fbe6 	bl	8009994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	3324      	adds	r3, #36	; 0x24
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fc61 	bl	8008aa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081de:	6978      	ldr	r0, [r7, #20]
 80081e0:	f7ff ff26 	bl	8008030 <prvUnlockQueue>
	}
 80081e4:	bf00      	nop
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08e      	sub	sp, #56	; 0x38
 80081f0:	af04      	add	r7, sp, #16
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	623b      	str	r3, [r7, #32]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <xTaskCreateStatic+0x46>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	61fb      	str	r3, [r7, #28]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008232:	23bc      	movs	r3, #188	; 0xbc
 8008234:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2bbc      	cmp	r3, #188	; 0xbc
 800823a:	d00a      	beq.n	8008252 <xTaskCreateStatic+0x66>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	61bb      	str	r3, [r7, #24]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008252:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01e      	beq.n	8008298 <xTaskCreateStatic+0xac>
 800825a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01b      	beq.n	8008298 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008268:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	2202      	movs	r2, #2
 800826e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008272:	2300      	movs	r3, #0
 8008274:	9303      	str	r3, [sp, #12]
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	9302      	str	r3, [sp, #8]
 800827a:	f107 0314 	add.w	r3, r7, #20
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f850 	bl	8008330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008292:	f000 f8f3 	bl	800847c <prvAddNewTaskToReadyList>
 8008296:	e001      	b.n	800829c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800829c:	697b      	ldr	r3, [r7, #20]
	}
 800829e:	4618      	mov	r0, r3
 80082a0:	3728      	adds	r7, #40	; 0x28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b08c      	sub	sp, #48	; 0x30
 80082aa:	af04      	add	r7, sp, #16
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	603b      	str	r3, [r7, #0]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fc5c 	bl	8009b78 <pvPortMalloc>
 80082c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00e      	beq.n	80082e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082c8:	20bc      	movs	r0, #188	; 0xbc
 80082ca:	f001 fc55 	bl	8009b78 <pvPortMalloc>
 80082ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	631a      	str	r2, [r3, #48]	; 0x30
 80082dc:	e005      	b.n	80082ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082de:	6978      	ldr	r0, [r7, #20]
 80082e0:	f001 fd16 	bl	8009d10 <vPortFree>
 80082e4:	e001      	b.n	80082ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d017      	beq.n	8008320 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082f8:	88fa      	ldrh	r2, [r7, #6]
 80082fa:	2300      	movs	r3, #0
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	9302      	str	r3, [sp, #8]
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f80e 	bl	8008330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008314:	69f8      	ldr	r0, [r7, #28]
 8008316:	f000 f8b1 	bl	800847c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800831a:	2301      	movs	r3, #1
 800831c:	61bb      	str	r3, [r7, #24]
 800831e:	e002      	b.n	8008326 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008320:	f04f 33ff 	mov.w	r3, #4294967295
 8008324:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008326:	69bb      	ldr	r3, [r7, #24]
	}
 8008328:	4618      	mov	r0, r3
 800832a:	3720      	adds	r7, #32
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	461a      	mov	r2, r3
 8008348:	21a5      	movs	r1, #165	; 0xa5
 800834a:	f004 fac7 	bl	800c8dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008358:	3b01      	subs	r3, #1
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f023 0307 	bic.w	r3, r3, #7
 8008366:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	f003 0307 	and.w	r3, r3, #7
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	617b      	str	r3, [r7, #20]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d01f      	beq.n	80083ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	e012      	b.n	80083ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	7819      	ldrb	r1, [r3, #0]
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	3334      	adds	r3, #52	; 0x34
 80083a4:	460a      	mov	r2, r1
 80083a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	4413      	add	r3, r2
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d006      	beq.n	80083c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	3301      	adds	r3, #1
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	2b0f      	cmp	r3, #15
 80083be:	d9e9      	bls.n	8008394 <prvInitialiseNewTask+0x64>
 80083c0:	e000      	b.n	80083c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80083c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083cc:	e003      	b.n	80083d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	2b37      	cmp	r3, #55	; 0x37
 80083da:	d901      	bls.n	80083e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083dc:	2337      	movs	r3, #55	; 0x37
 80083de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	2200      	movs	r2, #0
 80083f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	3304      	adds	r3, #4
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff f978 	bl	80076ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	3318      	adds	r3, #24
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff f973 	bl	80076ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800840a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800841a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841e:	2200      	movs	r2, #0
 8008420:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	2200      	movs	r2, #0
 8008428:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	3354      	adds	r3, #84	; 0x54
 8008430:	2260      	movs	r2, #96	; 0x60
 8008432:	2100      	movs	r1, #0
 8008434:	4618      	mov	r0, r3
 8008436:	f004 fa51 	bl	800c8dc <memset>
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	4a0c      	ldr	r2, [pc, #48]	; (8008470 <prvInitialiseNewTask+0x140>)
 800843e:	659a      	str	r2, [r3, #88]	; 0x58
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	4a0c      	ldr	r2, [pc, #48]	; (8008474 <prvInitialiseNewTask+0x144>)
 8008444:	65da      	str	r2, [r3, #92]	; 0x5c
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	4a0b      	ldr	r2, [pc, #44]	; (8008478 <prvInitialiseNewTask+0x148>)
 800844a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	69b8      	ldr	r0, [r7, #24]
 8008452:	f001 f941 	bl	80096d8 <pxPortInitialiseStack>
 8008456:	4602      	mov	r2, r0
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008466:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008468:	bf00      	nop
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	08040424 	.word	0x08040424
 8008474:	08040444 	.word	0x08040444
 8008478:	08040404 	.word	0x08040404

0800847c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008484:	f001 fa56 	bl	8009934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008488:	4b2d      	ldr	r3, [pc, #180]	; (8008540 <prvAddNewTaskToReadyList+0xc4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	4a2c      	ldr	r2, [pc, #176]	; (8008540 <prvAddNewTaskToReadyList+0xc4>)
 8008490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008492:	4b2c      	ldr	r3, [pc, #176]	; (8008544 <prvAddNewTaskToReadyList+0xc8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800849a:	4a2a      	ldr	r2, [pc, #168]	; (8008544 <prvAddNewTaskToReadyList+0xc8>)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084a0:	4b27      	ldr	r3, [pc, #156]	; (8008540 <prvAddNewTaskToReadyList+0xc4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d110      	bne.n	80084ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084a8:	f000 fc26 	bl	8008cf8 <prvInitialiseTaskLists>
 80084ac:	e00d      	b.n	80084ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084ae:	4b26      	ldr	r3, [pc, #152]	; (8008548 <prvAddNewTaskToReadyList+0xcc>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d109      	bne.n	80084ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084b6:	4b23      	ldr	r3, [pc, #140]	; (8008544 <prvAddNewTaskToReadyList+0xc8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d802      	bhi.n	80084ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084c4:	4a1f      	ldr	r2, [pc, #124]	; (8008544 <prvAddNewTaskToReadyList+0xc8>)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084ca:	4b20      	ldr	r3, [pc, #128]	; (800854c <prvAddNewTaskToReadyList+0xd0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	4a1e      	ldr	r2, [pc, #120]	; (800854c <prvAddNewTaskToReadyList+0xd0>)
 80084d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084d4:	4b1d      	ldr	r3, [pc, #116]	; (800854c <prvAddNewTaskToReadyList+0xd0>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <prvAddNewTaskToReadyList+0xd4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d903      	bls.n	80084f0 <prvAddNewTaskToReadyList+0x74>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	4a18      	ldr	r2, [pc, #96]	; (8008550 <prvAddNewTaskToReadyList+0xd4>)
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4a15      	ldr	r2, [pc, #84]	; (8008554 <prvAddNewTaskToReadyList+0xd8>)
 80084fe:	441a      	add	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3304      	adds	r3, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f7ff f8fd 	bl	8007706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800850c:	f001 fa42 	bl	8009994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008510:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <prvAddNewTaskToReadyList+0xcc>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00e      	beq.n	8008536 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008518:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <prvAddNewTaskToReadyList+0xc8>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	429a      	cmp	r2, r3
 8008524:	d207      	bcs.n	8008536 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008526:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <prvAddNewTaskToReadyList+0xdc>)
 8008528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	200012cc 	.word	0x200012cc
 8008544:	20000df8 	.word	0x20000df8
 8008548:	200012d8 	.word	0x200012d8
 800854c:	200012e8 	.word	0x200012e8
 8008550:	200012d4 	.word	0x200012d4
 8008554:	20000dfc 	.word	0x20000dfc
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d017      	beq.n	800859e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800856e:	4b13      	ldr	r3, [pc, #76]	; (80085bc <vTaskDelay+0x60>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <vTaskDelay+0x30>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	60bb      	str	r3, [r7, #8]
}
 8008588:	bf00      	nop
 800858a:	e7fe      	b.n	800858a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800858c:	f000 f88a 	bl	80086a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fcfe 	bl	8008f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008598:	f000 f892 	bl	80086c0 <xTaskResumeAll>
 800859c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d107      	bne.n	80085b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80085a4:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <vTaskDelay+0x64>)
 80085a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	200012f4 	.word	0x200012f4
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08a      	sub	sp, #40	; 0x28
 80085c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085d2:	463a      	mov	r2, r7
 80085d4:	1d39      	adds	r1, r7, #4
 80085d6:	f107 0308 	add.w	r3, r7, #8
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff f832 	bl	8007644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	9202      	str	r2, [sp, #8]
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	2300      	movs	r3, #0
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	2300      	movs	r3, #0
 80085f0:	460a      	mov	r2, r1
 80085f2:	4924      	ldr	r1, [pc, #144]	; (8008684 <vTaskStartScheduler+0xc0>)
 80085f4:	4824      	ldr	r0, [pc, #144]	; (8008688 <vTaskStartScheduler+0xc4>)
 80085f6:	f7ff fdf9 	bl	80081ec <xTaskCreateStatic>
 80085fa:	4603      	mov	r3, r0
 80085fc:	4a23      	ldr	r2, [pc, #140]	; (800868c <vTaskStartScheduler+0xc8>)
 80085fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008600:	4b22      	ldr	r3, [pc, #136]	; (800868c <vTaskStartScheduler+0xc8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008608:	2301      	movs	r3, #1
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	e001      	b.n	8008612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800860e:	2300      	movs	r3, #0
 8008610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d102      	bne.n	800861e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008618:	f000 fd10 	bl	800903c <xTimerCreateTimerTask>
 800861c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d11b      	bne.n	800865c <vTaskStartScheduler+0x98>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	613b      	str	r3, [r7, #16]
}
 8008636:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008638:	4b15      	ldr	r3, [pc, #84]	; (8008690 <vTaskStartScheduler+0xcc>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3354      	adds	r3, #84	; 0x54
 800863e:	4a15      	ldr	r2, [pc, #84]	; (8008694 <vTaskStartScheduler+0xd0>)
 8008640:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <vTaskStartScheduler+0xd4>)
 8008644:	f04f 32ff 	mov.w	r2, #4294967295
 8008648:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800864a:	4b14      	ldr	r3, [pc, #80]	; (800869c <vTaskStartScheduler+0xd8>)
 800864c:	2201      	movs	r2, #1
 800864e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008650:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <vTaskStartScheduler+0xdc>)
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008656:	f001 f8cb 	bl	80097f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800865a:	e00e      	b.n	800867a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008662:	d10a      	bne.n	800867a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	60fb      	str	r3, [r7, #12]
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <vTaskStartScheduler+0xb4>
}
 800867a:	bf00      	nop
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	0800e030 	.word	0x0800e030
 8008688:	08008cc9 	.word	0x08008cc9
 800868c:	200012f0 	.word	0x200012f0
 8008690:	20000df8 	.word	0x20000df8
 8008694:	200005f8 	.word	0x200005f8
 8008698:	200012ec 	.word	0x200012ec
 800869c:	200012d8 	.word	0x200012d8
 80086a0:	200012d0 	.word	0x200012d0

080086a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <vTaskSuspendAll+0x18>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3301      	adds	r3, #1
 80086ae:	4a03      	ldr	r2, [pc, #12]	; (80086bc <vTaskSuspendAll+0x18>)
 80086b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086b2:	bf00      	nop
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	200012f4 	.word	0x200012f4

080086c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086ce:	4b42      	ldr	r3, [pc, #264]	; (80087d8 <xTaskResumeAll+0x118>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <xTaskResumeAll+0x2c>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	603b      	str	r3, [r7, #0]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086ec:	f001 f922 	bl	8009934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086f0:	4b39      	ldr	r3, [pc, #228]	; (80087d8 <xTaskResumeAll+0x118>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	4a38      	ldr	r2, [pc, #224]	; (80087d8 <xTaskResumeAll+0x118>)
 80086f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086fa:	4b37      	ldr	r3, [pc, #220]	; (80087d8 <xTaskResumeAll+0x118>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d162      	bne.n	80087c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008702:	4b36      	ldr	r3, [pc, #216]	; (80087dc <xTaskResumeAll+0x11c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d05e      	beq.n	80087c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800870a:	e02f      	b.n	800876c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870c:	4b34      	ldr	r3, [pc, #208]	; (80087e0 <xTaskResumeAll+0x120>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3318      	adds	r3, #24
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff f851 	bl	80077c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3304      	adds	r3, #4
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff f84c 	bl	80077c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872c:	4b2d      	ldr	r3, [pc, #180]	; (80087e4 <xTaskResumeAll+0x124>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d903      	bls.n	800873c <xTaskResumeAll+0x7c>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	4a2a      	ldr	r2, [pc, #168]	; (80087e4 <xTaskResumeAll+0x124>)
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4a27      	ldr	r2, [pc, #156]	; (80087e8 <xTaskResumeAll+0x128>)
 800874a:	441a      	add	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f7fe ffd7 	bl	8007706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875c:	4b23      	ldr	r3, [pc, #140]	; (80087ec <xTaskResumeAll+0x12c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	429a      	cmp	r2, r3
 8008764:	d302      	bcc.n	800876c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008766:	4b22      	ldr	r3, [pc, #136]	; (80087f0 <xTaskResumeAll+0x130>)
 8008768:	2201      	movs	r2, #1
 800876a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <xTaskResumeAll+0x120>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1cb      	bne.n	800870c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800877a:	f000 fb5f 	bl	8008e3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800877e:	4b1d      	ldr	r3, [pc, #116]	; (80087f4 <xTaskResumeAll+0x134>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800878a:	f000 f847 	bl	800881c <xTaskIncrementTick>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008794:	4b16      	ldr	r3, [pc, #88]	; (80087f0 <xTaskResumeAll+0x130>)
 8008796:	2201      	movs	r2, #1
 8008798:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3b01      	subs	r3, #1
 800879e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f1      	bne.n	800878a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80087a6:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <xTaskResumeAll+0x134>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <xTaskResumeAll+0x130>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087b4:	2301      	movs	r3, #1
 80087b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087b8:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <xTaskResumeAll+0x138>)
 80087ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087c8:	f001 f8e4 	bl	8009994 <vPortExitCritical>

	return xAlreadyYielded;
 80087cc:	68bb      	ldr	r3, [r7, #8]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200012f4 	.word	0x200012f4
 80087dc:	200012cc 	.word	0x200012cc
 80087e0:	2000128c 	.word	0x2000128c
 80087e4:	200012d4 	.word	0x200012d4
 80087e8:	20000dfc 	.word	0x20000dfc
 80087ec:	20000df8 	.word	0x20000df8
 80087f0:	200012e0 	.word	0x200012e0
 80087f4:	200012dc 	.word	0x200012dc
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008802:	4b05      	ldr	r3, [pc, #20]	; (8008818 <xTaskGetTickCount+0x1c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008808:	687b      	ldr	r3, [r7, #4]
}
 800880a:	4618      	mov	r0, r3
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	200012d0 	.word	0x200012d0

0800881c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008826:	4b4f      	ldr	r3, [pc, #316]	; (8008964 <xTaskIncrementTick+0x148>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f040 808f 	bne.w	800894e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008830:	4b4d      	ldr	r3, [pc, #308]	; (8008968 <xTaskIncrementTick+0x14c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3301      	adds	r3, #1
 8008836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008838:	4a4b      	ldr	r2, [pc, #300]	; (8008968 <xTaskIncrementTick+0x14c>)
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d120      	bne.n	8008886 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008844:	4b49      	ldr	r3, [pc, #292]	; (800896c <xTaskIncrementTick+0x150>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <xTaskIncrementTick+0x48>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	603b      	str	r3, [r7, #0]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <xTaskIncrementTick+0x46>
 8008864:	4b41      	ldr	r3, [pc, #260]	; (800896c <xTaskIncrementTick+0x150>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	4b41      	ldr	r3, [pc, #260]	; (8008970 <xTaskIncrementTick+0x154>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a3f      	ldr	r2, [pc, #252]	; (800896c <xTaskIncrementTick+0x150>)
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	4a3f      	ldr	r2, [pc, #252]	; (8008970 <xTaskIncrementTick+0x154>)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	4b3e      	ldr	r3, [pc, #248]	; (8008974 <xTaskIncrementTick+0x158>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	4a3d      	ldr	r2, [pc, #244]	; (8008974 <xTaskIncrementTick+0x158>)
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	f000 fadb 	bl	8008e3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008886:	4b3c      	ldr	r3, [pc, #240]	; (8008978 <xTaskIncrementTick+0x15c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	429a      	cmp	r2, r3
 800888e:	d349      	bcc.n	8008924 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008890:	4b36      	ldr	r3, [pc, #216]	; (800896c <xTaskIncrementTick+0x150>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d104      	bne.n	80088a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800889a:	4b37      	ldr	r3, [pc, #220]	; (8008978 <xTaskIncrementTick+0x15c>)
 800889c:	f04f 32ff 	mov.w	r2, #4294967295
 80088a0:	601a      	str	r2, [r3, #0]
					break;
 80088a2:	e03f      	b.n	8008924 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a4:	4b31      	ldr	r3, [pc, #196]	; (800896c <xTaskIncrementTick+0x150>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d203      	bcs.n	80088c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088bc:	4a2e      	ldr	r2, [pc, #184]	; (8008978 <xTaskIncrementTick+0x15c>)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088c2:	e02f      	b.n	8008924 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe ff79 	bl	80077c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	3318      	adds	r3, #24
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe ff70 	bl	80077c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4b25      	ldr	r3, [pc, #148]	; (800897c <xTaskIncrementTick+0x160>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d903      	bls.n	80088f4 <xTaskIncrementTick+0xd8>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	4a22      	ldr	r2, [pc, #136]	; (800897c <xTaskIncrementTick+0x160>)
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <xTaskIncrementTick+0x164>)
 8008902:	441a      	add	r2, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	3304      	adds	r3, #4
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7fe fefb 	bl	8007706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	4b1b      	ldr	r3, [pc, #108]	; (8008984 <xTaskIncrementTick+0x168>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891a:	429a      	cmp	r2, r3
 800891c:	d3b8      	bcc.n	8008890 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800891e:	2301      	movs	r3, #1
 8008920:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008922:	e7b5      	b.n	8008890 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008924:	4b17      	ldr	r3, [pc, #92]	; (8008984 <xTaskIncrementTick+0x168>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892a:	4915      	ldr	r1, [pc, #84]	; (8008980 <xTaskIncrementTick+0x164>)
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d901      	bls.n	8008940 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800893c:	2301      	movs	r3, #1
 800893e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <xTaskIncrementTick+0x16c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d007      	beq.n	8008958 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	e004      	b.n	8008958 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800894e:	4b0f      	ldr	r3, [pc, #60]	; (800898c <xTaskIncrementTick+0x170>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3301      	adds	r3, #1
 8008954:	4a0d      	ldr	r2, [pc, #52]	; (800898c <xTaskIncrementTick+0x170>)
 8008956:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008958:	697b      	ldr	r3, [r7, #20]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200012f4 	.word	0x200012f4
 8008968:	200012d0 	.word	0x200012d0
 800896c:	20001284 	.word	0x20001284
 8008970:	20001288 	.word	0x20001288
 8008974:	200012e4 	.word	0x200012e4
 8008978:	200012ec 	.word	0x200012ec
 800897c:	200012d4 	.word	0x200012d4
 8008980:	20000dfc 	.word	0x20000dfc
 8008984:	20000df8 	.word	0x20000df8
 8008988:	200012e0 	.word	0x200012e0
 800898c:	200012dc 	.word	0x200012dc

08008990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008996:	4b2a      	ldr	r3, [pc, #168]	; (8008a40 <vTaskSwitchContext+0xb0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800899e:	4b29      	ldr	r3, [pc, #164]	; (8008a44 <vTaskSwitchContext+0xb4>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089a4:	e046      	b.n	8008a34 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80089a6:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <vTaskSwitchContext+0xb4>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ac:	4b26      	ldr	r3, [pc, #152]	; (8008a48 <vTaskSwitchContext+0xb8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	e010      	b.n	80089d6 <vTaskSwitchContext+0x46>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10a      	bne.n	80089d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	607b      	str	r3, [r7, #4]
}
 80089cc:	bf00      	nop
 80089ce:	e7fe      	b.n	80089ce <vTaskSwitchContext+0x3e>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	491d      	ldr	r1, [pc, #116]	; (8008a4c <vTaskSwitchContext+0xbc>)
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0e4      	beq.n	80089b4 <vTaskSwitchContext+0x24>
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4a15      	ldr	r2, [pc, #84]	; (8008a4c <vTaskSwitchContext+0xbc>)
 80089f6:	4413      	add	r3, r2
 80089f8:	60bb      	str	r3, [r7, #8]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	605a      	str	r2, [r3, #4]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d104      	bne.n	8008a1a <vTaskSwitchContext+0x8a>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	605a      	str	r2, [r3, #4]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	4a0b      	ldr	r2, [pc, #44]	; (8008a50 <vTaskSwitchContext+0xc0>)
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	4a08      	ldr	r2, [pc, #32]	; (8008a48 <vTaskSwitchContext+0xb8>)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a2a:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <vTaskSwitchContext+0xc0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3354      	adds	r3, #84	; 0x54
 8008a30:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <vTaskSwitchContext+0xc4>)
 8008a32:	6013      	str	r3, [r2, #0]
}
 8008a34:	bf00      	nop
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	200012f4 	.word	0x200012f4
 8008a44:	200012e0 	.word	0x200012e0
 8008a48:	200012d4 	.word	0x200012d4
 8008a4c:	20000dfc 	.word	0x20000dfc
 8008a50:	20000df8 	.word	0x20000df8
 8008a54:	200005f8 	.word	0x200005f8

08008a58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10a      	bne.n	8008a7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	60fb      	str	r3, [r7, #12]
}
 8008a7a:	bf00      	nop
 8008a7c:	e7fe      	b.n	8008a7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a7e:	4b07      	ldr	r3, [pc, #28]	; (8008a9c <vTaskPlaceOnEventList+0x44>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3318      	adds	r3, #24
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7fe fe61 	bl	800774e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	6838      	ldr	r0, [r7, #0]
 8008a90:	f000 fa80 	bl	8008f94 <prvAddCurrentTaskToDelayedList>
}
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000df8 	.word	0x20000df8

08008aa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	617b      	str	r3, [r7, #20]
}
 8008ac4:	bf00      	nop
 8008ac6:	e7fe      	b.n	8008ac6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3318      	adds	r3, #24
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7fe fe18 	bl	8007706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008adc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	68b8      	ldr	r0, [r7, #8]
 8008ae6:	f000 fa55 	bl	8008f94 <prvAddCurrentTaskToDelayedList>
	}
 8008aea:	bf00      	nop
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20000df8 	.word	0x20000df8

08008af8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60fb      	str	r3, [r7, #12]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	3318      	adds	r3, #24
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fe49 	bl	80077c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b2e:	4b1e      	ldr	r3, [pc, #120]	; (8008ba8 <xTaskRemoveFromEventList+0xb0>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d11d      	bne.n	8008b72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fe40 	bl	80077c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b44:	4b19      	ldr	r3, [pc, #100]	; (8008bac <xTaskRemoveFromEventList+0xb4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d903      	bls.n	8008b54 <xTaskRemoveFromEventList+0x5c>
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	4a16      	ldr	r2, [pc, #88]	; (8008bac <xTaskRemoveFromEventList+0xb4>)
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b58:	4613      	mov	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4a13      	ldr	r2, [pc, #76]	; (8008bb0 <xTaskRemoveFromEventList+0xb8>)
 8008b62:	441a      	add	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	3304      	adds	r3, #4
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	f7fe fdcb 	bl	8007706 <vListInsertEnd>
 8008b70:	e005      	b.n	8008b7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	3318      	adds	r3, #24
 8008b76:	4619      	mov	r1, r3
 8008b78:	480e      	ldr	r0, [pc, #56]	; (8008bb4 <xTaskRemoveFromEventList+0xbc>)
 8008b7a:	f7fe fdc4 	bl	8007706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b82:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <xTaskRemoveFromEventList+0xc0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d905      	bls.n	8008b98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <xTaskRemoveFromEventList+0xc4>)
 8008b92:	2201      	movs	r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	e001      	b.n	8008b9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b9c:	697b      	ldr	r3, [r7, #20]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	200012f4 	.word	0x200012f4
 8008bac:	200012d4 	.word	0x200012d4
 8008bb0:	20000dfc 	.word	0x20000dfc
 8008bb4:	2000128c 	.word	0x2000128c
 8008bb8:	20000df8 	.word	0x20000df8
 8008bbc:	200012e0 	.word	0x200012e0

08008bc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <vTaskInternalSetTimeOutState+0x24>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <vTaskInternalSetTimeOutState+0x28>)
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	605a      	str	r2, [r3, #4]
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	200012e4 	.word	0x200012e4
 8008be8:	200012d0 	.word	0x200012d0

08008bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	613b      	str	r3, [r7, #16]
}
 8008c0e:	bf00      	nop
 8008c10:	e7fe      	b.n	8008c10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	60fb      	str	r3, [r7, #12]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c2e:	f000 fe81 	bl	8009934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c32:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <xTaskCheckForTimeOut+0xbc>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4a:	d102      	bne.n	8008c52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	61fb      	str	r3, [r7, #28]
 8008c50:	e023      	b.n	8008c9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4b15      	ldr	r3, [pc, #84]	; (8008cac <xTaskCheckForTimeOut+0xc0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d007      	beq.n	8008c6e <xTaskCheckForTimeOut+0x82>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d302      	bcc.n	8008c6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	61fb      	str	r3, [r7, #28]
 8008c6c:	e015      	b.n	8008c9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d20b      	bcs.n	8008c90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7ff ff9b 	bl	8008bc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
 8008c8e:	e004      	b.n	8008c9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c96:	2301      	movs	r3, #1
 8008c98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c9a:	f000 fe7b 	bl	8009994 <vPortExitCritical>

	return xReturn;
 8008c9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3720      	adds	r7, #32
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	200012d0 	.word	0x200012d0
 8008cac:	200012e4 	.word	0x200012e4

08008cb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008cb4:	4b03      	ldr	r3, [pc, #12]	; (8008cc4 <vTaskMissedYield+0x14>)
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	601a      	str	r2, [r3, #0]
}
 8008cba:	bf00      	nop
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	200012e0 	.word	0x200012e0

08008cc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cd0:	f000 f852 	bl	8008d78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cd4:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <prvIdleTask+0x28>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d9f9      	bls.n	8008cd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008cdc:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <prvIdleTask+0x2c>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008cec:	e7f0      	b.n	8008cd0 <prvIdleTask+0x8>
 8008cee:	bf00      	nop
 8008cf0:	20000dfc 	.word	0x20000dfc
 8008cf4:	e000ed04 	.word	0xe000ed04

08008cf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cfe:	2300      	movs	r3, #0
 8008d00:	607b      	str	r3, [r7, #4]
 8008d02:	e00c      	b.n	8008d1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4a12      	ldr	r2, [pc, #72]	; (8008d58 <prvInitialiseTaskLists+0x60>)
 8008d10:	4413      	add	r3, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe fcca 	bl	80076ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	607b      	str	r3, [r7, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b37      	cmp	r3, #55	; 0x37
 8008d22:	d9ef      	bls.n	8008d04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d24:	480d      	ldr	r0, [pc, #52]	; (8008d5c <prvInitialiseTaskLists+0x64>)
 8008d26:	f7fe fcc1 	bl	80076ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d2a:	480d      	ldr	r0, [pc, #52]	; (8008d60 <prvInitialiseTaskLists+0x68>)
 8008d2c:	f7fe fcbe 	bl	80076ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d30:	480c      	ldr	r0, [pc, #48]	; (8008d64 <prvInitialiseTaskLists+0x6c>)
 8008d32:	f7fe fcbb 	bl	80076ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d36:	480c      	ldr	r0, [pc, #48]	; (8008d68 <prvInitialiseTaskLists+0x70>)
 8008d38:	f7fe fcb8 	bl	80076ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d3c:	480b      	ldr	r0, [pc, #44]	; (8008d6c <prvInitialiseTaskLists+0x74>)
 8008d3e:	f7fe fcb5 	bl	80076ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d42:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <prvInitialiseTaskLists+0x78>)
 8008d44:	4a05      	ldr	r2, [pc, #20]	; (8008d5c <prvInitialiseTaskLists+0x64>)
 8008d46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d48:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <prvInitialiseTaskLists+0x7c>)
 8008d4a:	4a05      	ldr	r2, [pc, #20]	; (8008d60 <prvInitialiseTaskLists+0x68>)
 8008d4c:	601a      	str	r2, [r3, #0]
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20000dfc 	.word	0x20000dfc
 8008d5c:	2000125c 	.word	0x2000125c
 8008d60:	20001270 	.word	0x20001270
 8008d64:	2000128c 	.word	0x2000128c
 8008d68:	200012a0 	.word	0x200012a0
 8008d6c:	200012b8 	.word	0x200012b8
 8008d70:	20001284 	.word	0x20001284
 8008d74:	20001288 	.word	0x20001288

08008d78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d7e:	e019      	b.n	8008db4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d80:	f000 fdd8 	bl	8009934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d84:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <prvCheckTasksWaitingTermination+0x50>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3304      	adds	r3, #4
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fe fd15 	bl	80077c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d96:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <prvCheckTasksWaitingTermination+0x54>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	4a0b      	ldr	r2, [pc, #44]	; (8008dcc <prvCheckTasksWaitingTermination+0x54>)
 8008d9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008da0:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <prvCheckTasksWaitingTermination+0x58>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	4a0a      	ldr	r2, [pc, #40]	; (8008dd0 <prvCheckTasksWaitingTermination+0x58>)
 8008da8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008daa:	f000 fdf3 	bl	8009994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f810 	bl	8008dd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008db4:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <prvCheckTasksWaitingTermination+0x58>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e1      	bne.n	8008d80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200012a0 	.word	0x200012a0
 8008dcc:	200012cc 	.word	0x200012cc
 8008dd0:	200012b4 	.word	0x200012b4

08008dd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3354      	adds	r3, #84	; 0x54
 8008de0:	4618      	mov	r0, r3
 8008de2:	f003 fea9 	bl	800cb38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d108      	bne.n	8008e02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 ff8b 	bl	8009d10 <vPortFree>
				vPortFree( pxTCB );
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 ff88 	bl	8009d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e00:	e018      	b.n	8008e34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d103      	bne.n	8008e14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 ff7f 	bl	8009d10 <vPortFree>
	}
 8008e12:	e00f      	b.n	8008e34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d00a      	beq.n	8008e34 <prvDeleteTCB+0x60>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	60fb      	str	r3, [r7, #12]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <prvDeleteTCB+0x5e>
	}
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <prvResetNextTaskUnblockTime+0x38>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <prvResetNextTaskUnblockTime+0x3c>)
 8008e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e54:	e008      	b.n	8008e68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e56:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <prvResetNextTaskUnblockTime+0x38>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	4a04      	ldr	r2, [pc, #16]	; (8008e78 <prvResetNextTaskUnblockTime+0x3c>)
 8008e66:	6013      	str	r3, [r2, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20001284 	.word	0x20001284
 8008e78:	200012ec 	.word	0x200012ec

08008e7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e82:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <xTaskGetSchedulerState+0x34>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d102      	bne.n	8008e90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	607b      	str	r3, [r7, #4]
 8008e8e:	e008      	b.n	8008ea2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e90:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <xTaskGetSchedulerState+0x38>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	607b      	str	r3, [r7, #4]
 8008e9c:	e001      	b.n	8008ea2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ea2:	687b      	ldr	r3, [r7, #4]
	}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	200012d8 	.word	0x200012d8
 8008eb4:	200012f4 	.word	0x200012f4

08008eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d056      	beq.n	8008f7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ece:	4b2e      	ldr	r3, [pc, #184]	; (8008f88 <xTaskPriorityDisinherit+0xd0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d00a      	beq.n	8008eee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	60fb      	str	r3, [r7, #12]
}
 8008eea:	bf00      	nop
 8008eec:	e7fe      	b.n	8008eec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	60bb      	str	r3, [r7, #8]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f10:	1e5a      	subs	r2, r3, #1
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d02c      	beq.n	8008f7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d128      	bne.n	8008f7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fc46 	bl	80077c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <xTaskPriorityDisinherit+0xd4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d903      	bls.n	8008f5c <xTaskPriorityDisinherit+0xa4>
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	4a0c      	ldr	r2, [pc, #48]	; (8008f8c <xTaskPriorityDisinherit+0xd4>)
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4a09      	ldr	r2, [pc, #36]	; (8008f90 <xTaskPriorityDisinherit+0xd8>)
 8008f6a:	441a      	add	r2, r3
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f7fe fbc7 	bl	8007706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f7c:	697b      	ldr	r3, [r7, #20]
	}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000df8 	.word	0x20000df8
 8008f8c:	200012d4 	.word	0x200012d4
 8008f90:	20000dfc 	.word	0x20000dfc

08008f94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f9e:	4b21      	ldr	r3, [pc, #132]	; (8009024 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fa4:	4b20      	ldr	r3, [pc, #128]	; (8009028 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fc08 	bl	80077c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb6:	d10a      	bne.n	8008fce <prvAddCurrentTaskToDelayedList+0x3a>
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d007      	beq.n	8008fce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fbe:	4b1a      	ldr	r3, [pc, #104]	; (8009028 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4819      	ldr	r0, [pc, #100]	; (800902c <prvAddCurrentTaskToDelayedList+0x98>)
 8008fc8:	f7fe fb9d 	bl	8007706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fcc:	e026      	b.n	800901c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fd6:	4b14      	ldr	r3, [pc, #80]	; (8009028 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d209      	bcs.n	8008ffa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fe6:	4b12      	ldr	r3, [pc, #72]	; (8009030 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	f7fe fbab 	bl	800774e <vListInsert>
}
 8008ff8:	e010      	b.n	800901c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ffa:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	4b0a      	ldr	r3, [pc, #40]	; (8009028 <prvAddCurrentTaskToDelayedList+0x94>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7fe fba1 	bl	800774e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	429a      	cmp	r2, r3
 8009014:	d202      	bcs.n	800901c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009016:	4a08      	ldr	r2, [pc, #32]	; (8009038 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6013      	str	r3, [r2, #0]
}
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	200012d0 	.word	0x200012d0
 8009028:	20000df8 	.word	0x20000df8
 800902c:	200012b8 	.word	0x200012b8
 8009030:	20001288 	.word	0x20001288
 8009034:	20001284 	.word	0x20001284
 8009038:	200012ec 	.word	0x200012ec

0800903c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b08a      	sub	sp, #40	; 0x28
 8009040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009046:	f000 fb07 	bl	8009658 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800904a:	4b1c      	ldr	r3, [pc, #112]	; (80090bc <xTimerCreateTimerTask+0x80>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d021      	beq.n	8009096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800905a:	1d3a      	adds	r2, r7, #4
 800905c:	f107 0108 	add.w	r1, r7, #8
 8009060:	f107 030c 	add.w	r3, r7, #12
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fb07 	bl	8007678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	9202      	str	r2, [sp, #8]
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	2302      	movs	r3, #2
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	2300      	movs	r3, #0
 800907a:	460a      	mov	r2, r1
 800907c:	4910      	ldr	r1, [pc, #64]	; (80090c0 <xTimerCreateTimerTask+0x84>)
 800907e:	4811      	ldr	r0, [pc, #68]	; (80090c4 <xTimerCreateTimerTask+0x88>)
 8009080:	f7ff f8b4 	bl	80081ec <xTaskCreateStatic>
 8009084:	4603      	mov	r3, r0
 8009086:	4a10      	ldr	r2, [pc, #64]	; (80090c8 <xTimerCreateTimerTask+0x8c>)
 8009088:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800908a:	4b0f      	ldr	r3, [pc, #60]	; (80090c8 <xTimerCreateTimerTask+0x8c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009092:	2301      	movs	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	613b      	str	r3, [r7, #16]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090b2:	697b      	ldr	r3, [r7, #20]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20001328 	.word	0x20001328
 80090c0:	0800e038 	.word	0x0800e038
 80090c4:	08009201 	.word	0x08009201
 80090c8:	2000132c 	.word	0x2000132c

080090cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08a      	sub	sp, #40	; 0x28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090da:	2300      	movs	r3, #0
 80090dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10a      	bne.n	80090fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	623b      	str	r3, [r7, #32]
}
 80090f6:	bf00      	nop
 80090f8:	e7fe      	b.n	80090f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090fa:	4b1a      	ldr	r3, [pc, #104]	; (8009164 <xTimerGenericCommand+0x98>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d02a      	beq.n	8009158 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b05      	cmp	r3, #5
 8009112:	dc18      	bgt.n	8009146 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009114:	f7ff feb2 	bl	8008e7c <xTaskGetSchedulerState>
 8009118:	4603      	mov	r3, r0
 800911a:	2b02      	cmp	r3, #2
 800911c:	d109      	bne.n	8009132 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800911e:	4b11      	ldr	r3, [pc, #68]	; (8009164 <xTimerGenericCommand+0x98>)
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	f107 0110 	add.w	r1, r7, #16
 8009126:	2300      	movs	r3, #0
 8009128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912a:	f7fe fc77 	bl	8007a1c <xQueueGenericSend>
 800912e:	6278      	str	r0, [r7, #36]	; 0x24
 8009130:	e012      	b.n	8009158 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009132:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <xTimerGenericCommand+0x98>)
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f107 0110 	add.w	r1, r7, #16
 800913a:	2300      	movs	r3, #0
 800913c:	2200      	movs	r2, #0
 800913e:	f7fe fc6d 	bl	8007a1c <xQueueGenericSend>
 8009142:	6278      	str	r0, [r7, #36]	; 0x24
 8009144:	e008      	b.n	8009158 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009146:	4b07      	ldr	r3, [pc, #28]	; (8009164 <xTimerGenericCommand+0x98>)
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	f107 0110 	add.w	r1, r7, #16
 800914e:	2300      	movs	r3, #0
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	f7fe fd61 	bl	8007c18 <xQueueGenericSendFromISR>
 8009156:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800915a:	4618      	mov	r0, r3
 800915c:	3728      	adds	r7, #40	; 0x28
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20001328 	.word	0x20001328

08009168 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af02      	add	r7, sp, #8
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009172:	4b22      	ldr	r3, [pc, #136]	; (80091fc <prvProcessExpiredTimer+0x94>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	3304      	adds	r3, #4
 8009180:	4618      	mov	r0, r3
 8009182:	f7fe fb1d 	bl	80077c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800918c:	f003 0304 	and.w	r3, r3, #4
 8009190:	2b00      	cmp	r3, #0
 8009192:	d022      	beq.n	80091da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	699a      	ldr	r2, [r3, #24]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	18d1      	adds	r1, r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	6978      	ldr	r0, [r7, #20]
 80091a2:	f000 f8d1 	bl	8009348 <prvInsertTimerInActiveList>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d01f      	beq.n	80091ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091ac:	2300      	movs	r3, #0
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	2300      	movs	r3, #0
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	2100      	movs	r1, #0
 80091b6:	6978      	ldr	r0, [r7, #20]
 80091b8:	f7ff ff88 	bl	80090cc <xTimerGenericCommand>
 80091bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d113      	bne.n	80091ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	60fb      	str	r3, [r7, #12]
}
 80091d6:	bf00      	nop
 80091d8:	e7fe      	b.n	80091d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091e0:	f023 0301 	bic.w	r3, r3, #1
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	6978      	ldr	r0, [r7, #20]
 80091f2:	4798      	blx	r3
}
 80091f4:	bf00      	nop
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	20001320 	.word	0x20001320

08009200 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009208:	f107 0308 	add.w	r3, r7, #8
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f857 	bl	80092c0 <prvGetNextExpireTime>
 8009212:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	4619      	mov	r1, r3
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f803 	bl	8009224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800921e:	f000 f8d5 	bl	80093cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009222:	e7f1      	b.n	8009208 <prvTimerTask+0x8>

08009224 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800922e:	f7ff fa39 	bl	80086a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4618      	mov	r0, r3
 8009238:	f000 f866 	bl	8009308 <prvSampleTimeNow>
 800923c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d130      	bne.n	80092a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10a      	bne.n	8009260 <prvProcessTimerOrBlockTask+0x3c>
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	429a      	cmp	r2, r3
 8009250:	d806      	bhi.n	8009260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009252:	f7ff fa35 	bl	80086c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff ff85 	bl	8009168 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800925e:	e024      	b.n	80092aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d008      	beq.n	8009278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009266:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <prvProcessTimerOrBlockTask+0x90>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <prvProcessTimerOrBlockTask+0x50>
 8009270:	2301      	movs	r3, #1
 8009272:	e000      	b.n	8009276 <prvProcessTimerOrBlockTask+0x52>
 8009274:	2300      	movs	r3, #0
 8009276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009278:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <prvProcessTimerOrBlockTask+0x94>)
 800927a:	6818      	ldr	r0, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4619      	mov	r1, r3
 8009286:	f7fe ff7d 	bl	8008184 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800928a:	f7ff fa19 	bl	80086c0 <xTaskResumeAll>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009294:	4b09      	ldr	r3, [pc, #36]	; (80092bc <prvProcessTimerOrBlockTask+0x98>)
 8009296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	f3bf 8f6f 	isb	sy
}
 80092a4:	e001      	b.n	80092aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092a6:	f7ff fa0b 	bl	80086c0 <xTaskResumeAll>
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20001324 	.word	0x20001324
 80092b8:	20001328 	.word	0x20001328
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092c8:	4b0e      	ldr	r3, [pc, #56]	; (8009304 <prvGetNextExpireTime+0x44>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <prvGetNextExpireTime+0x16>
 80092d2:	2201      	movs	r2, #1
 80092d4:	e000      	b.n	80092d8 <prvGetNextExpireTime+0x18>
 80092d6:	2200      	movs	r2, #0
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d105      	bne.n	80092f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092e4:	4b07      	ldr	r3, [pc, #28]	; (8009304 <prvGetNextExpireTime+0x44>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	e001      	b.n	80092f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092f4:	68fb      	ldr	r3, [r7, #12]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20001320 	.word	0x20001320

08009308 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009310:	f7ff fa74 	bl	80087fc <xTaskGetTickCount>
 8009314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009316:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <prvSampleTimeNow+0x3c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	429a      	cmp	r2, r3
 800931e:	d205      	bcs.n	800932c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009320:	f000 f936 	bl	8009590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	e002      	b.n	8009332 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009332:	4a04      	ldr	r2, [pc, #16]	; (8009344 <prvSampleTimeNow+0x3c>)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009338:	68fb      	ldr	r3, [r7, #12]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20001330 	.word	0x20001330

08009348 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d812      	bhi.n	8009394 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	1ad2      	subs	r2, r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	429a      	cmp	r2, r3
 800937a:	d302      	bcc.n	8009382 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800937c:	2301      	movs	r3, #1
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	e01b      	b.n	80093ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009382:	4b10      	ldr	r3, [pc, #64]	; (80093c4 <prvInsertTimerInActiveList+0x7c>)
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3304      	adds	r3, #4
 800938a:	4619      	mov	r1, r3
 800938c:	4610      	mov	r0, r2
 800938e:	f7fe f9de 	bl	800774e <vListInsert>
 8009392:	e012      	b.n	80093ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d206      	bcs.n	80093aa <prvInsertTimerInActiveList+0x62>
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d302      	bcc.n	80093aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093a4:	2301      	movs	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	e007      	b.n	80093ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093aa:	4b07      	ldr	r3, [pc, #28]	; (80093c8 <prvInsertTimerInActiveList+0x80>)
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3304      	adds	r3, #4
 80093b2:	4619      	mov	r1, r3
 80093b4:	4610      	mov	r0, r2
 80093b6:	f7fe f9ca 	bl	800774e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093ba:	697b      	ldr	r3, [r7, #20]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20001324 	.word	0x20001324
 80093c8:	20001320 	.word	0x20001320

080093cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08e      	sub	sp, #56	; 0x38
 80093d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093d2:	e0ca      	b.n	800956a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	da18      	bge.n	800940c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093da:	1d3b      	adds	r3, r7, #4
 80093dc:	3304      	adds	r3, #4
 80093de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	61fb      	str	r3, [r7, #28]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009402:	6850      	ldr	r0, [r2, #4]
 8009404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009406:	6892      	ldr	r2, [r2, #8]
 8009408:	4611      	mov	r1, r2
 800940a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f2c0 80aa 	blt.w	8009568 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	3304      	adds	r3, #4
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe f9cb 	bl	80077c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800942a:	463b      	mov	r3, r7
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff ff6b 	bl	8009308 <prvSampleTimeNow>
 8009432:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b09      	cmp	r3, #9
 8009438:	f200 8097 	bhi.w	800956a <prvProcessReceivedCommands+0x19e>
 800943c:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <prvProcessReceivedCommands+0x78>)
 800943e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009442:	bf00      	nop
 8009444:	0800946d 	.word	0x0800946d
 8009448:	0800946d 	.word	0x0800946d
 800944c:	0800946d 	.word	0x0800946d
 8009450:	080094e1 	.word	0x080094e1
 8009454:	080094f5 	.word	0x080094f5
 8009458:	0800953f 	.word	0x0800953f
 800945c:	0800946d 	.word	0x0800946d
 8009460:	0800946d 	.word	0x0800946d
 8009464:	080094e1 	.word	0x080094e1
 8009468:	080094f5 	.word	0x080094f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009472:	f043 0301 	orr.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	18d1      	adds	r1, r2, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800948a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800948c:	f7ff ff5c 	bl	8009348 <prvInsertTimerInActiveList>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d069      	beq.n	800956a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800949c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d05e      	beq.n	800956a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	441a      	add	r2, r3
 80094b4:	2300      	movs	r3, #0
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	2300      	movs	r3, #0
 80094ba:	2100      	movs	r1, #0
 80094bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094be:	f7ff fe05 	bl	80090cc <xTimerGenericCommand>
 80094c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d14f      	bne.n	800956a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	61bb      	str	r3, [r7, #24]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e6:	f023 0301 	bic.w	r3, r3, #1
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80094f2:	e03a      	b.n	800956a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094fa:	f043 0301 	orr.w	r3, r3, #1
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10a      	bne.n	800952a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	617b      	str	r3, [r7, #20]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	18d1      	adds	r1, r2, r3
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009538:	f7ff ff06 	bl	8009348 <prvInsertTimerInActiveList>
					break;
 800953c:	e015      	b.n	800956a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d103      	bne.n	8009554 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800954c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954e:	f000 fbdf 	bl	8009d10 <vPortFree>
 8009552:	e00a      	b.n	800956a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800955a:	f023 0301 	bic.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009566:	e000      	b.n	800956a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800956a:	4b08      	ldr	r3, [pc, #32]	; (800958c <prvProcessReceivedCommands+0x1c0>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	1d39      	adds	r1, r7, #4
 8009570:	2200      	movs	r2, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fbec 	bl	8007d50 <xQueueReceive>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	f47f af2a 	bne.w	80093d4 <prvProcessReceivedCommands+0x8>
	}
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	3730      	adds	r7, #48	; 0x30
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20001328 	.word	0x20001328

08009590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009596:	e048      	b.n	800962a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009598:	4b2d      	ldr	r3, [pc, #180]	; (8009650 <prvSwitchTimerLists+0xc0>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a2:	4b2b      	ldr	r3, [pc, #172]	; (8009650 <prvSwitchTimerLists+0xc0>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe f905 	bl	80077c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d02e      	beq.n	800962a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	4413      	add	r3, r2
 80095d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d90e      	bls.n	80095fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ea:	4b19      	ldr	r3, [pc, #100]	; (8009650 <prvSwitchTimerLists+0xc0>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4619      	mov	r1, r3
 80095f4:	4610      	mov	r0, r2
 80095f6:	f7fe f8aa 	bl	800774e <vListInsert>
 80095fa:	e016      	b.n	800962a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095fc:	2300      	movs	r3, #0
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	2300      	movs	r3, #0
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	2100      	movs	r1, #0
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7ff fd60 	bl	80090cc <xTimerGenericCommand>
 800960c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	603b      	str	r3, [r7, #0]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800962a:	4b09      	ldr	r3, [pc, #36]	; (8009650 <prvSwitchTimerLists+0xc0>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1b1      	bne.n	8009598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <prvSwitchTimerLists+0xc0>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800963a:	4b06      	ldr	r3, [pc, #24]	; (8009654 <prvSwitchTimerLists+0xc4>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a04      	ldr	r2, [pc, #16]	; (8009650 <prvSwitchTimerLists+0xc0>)
 8009640:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009642:	4a04      	ldr	r2, [pc, #16]	; (8009654 <prvSwitchTimerLists+0xc4>)
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	6013      	str	r3, [r2, #0]
}
 8009648:	bf00      	nop
 800964a:	3718      	adds	r7, #24
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20001320 	.word	0x20001320
 8009654:	20001324 	.word	0x20001324

08009658 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800965e:	f000 f969 	bl	8009934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009662:	4b15      	ldr	r3, [pc, #84]	; (80096b8 <prvCheckForValidListAndQueue+0x60>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d120      	bne.n	80096ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800966a:	4814      	ldr	r0, [pc, #80]	; (80096bc <prvCheckForValidListAndQueue+0x64>)
 800966c:	f7fe f81e 	bl	80076ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009670:	4813      	ldr	r0, [pc, #76]	; (80096c0 <prvCheckForValidListAndQueue+0x68>)
 8009672:	f7fe f81b 	bl	80076ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009676:	4b13      	ldr	r3, [pc, #76]	; (80096c4 <prvCheckForValidListAndQueue+0x6c>)
 8009678:	4a10      	ldr	r2, [pc, #64]	; (80096bc <prvCheckForValidListAndQueue+0x64>)
 800967a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800967c:	4b12      	ldr	r3, [pc, #72]	; (80096c8 <prvCheckForValidListAndQueue+0x70>)
 800967e:	4a10      	ldr	r2, [pc, #64]	; (80096c0 <prvCheckForValidListAndQueue+0x68>)
 8009680:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009682:	2300      	movs	r3, #0
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	4b11      	ldr	r3, [pc, #68]	; (80096cc <prvCheckForValidListAndQueue+0x74>)
 8009688:	4a11      	ldr	r2, [pc, #68]	; (80096d0 <prvCheckForValidListAndQueue+0x78>)
 800968a:	2110      	movs	r1, #16
 800968c:	200a      	movs	r0, #10
 800968e:	f7fe f929 	bl	80078e4 <xQueueGenericCreateStatic>
 8009692:	4603      	mov	r3, r0
 8009694:	4a08      	ldr	r2, [pc, #32]	; (80096b8 <prvCheckForValidListAndQueue+0x60>)
 8009696:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009698:	4b07      	ldr	r3, [pc, #28]	; (80096b8 <prvCheckForValidListAndQueue+0x60>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096a0:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <prvCheckForValidListAndQueue+0x60>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	490b      	ldr	r1, [pc, #44]	; (80096d4 <prvCheckForValidListAndQueue+0x7c>)
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fd42 	bl	8008130 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096ac:	f000 f972 	bl	8009994 <vPortExitCritical>
}
 80096b0:	bf00      	nop
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20001328 	.word	0x20001328
 80096bc:	200012f8 	.word	0x200012f8
 80096c0:	2000130c 	.word	0x2000130c
 80096c4:	20001320 	.word	0x20001320
 80096c8:	20001324 	.word	0x20001324
 80096cc:	200013d4 	.word	0x200013d4
 80096d0:	20001334 	.word	0x20001334
 80096d4:	0800e040 	.word	0x0800e040

080096d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3b04      	subs	r3, #4
 80096e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3b04      	subs	r3, #4
 80096f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f023 0201 	bic.w	r2, r3, #1
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3b04      	subs	r3, #4
 8009706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009708:	4a0c      	ldr	r2, [pc, #48]	; (800973c <pxPortInitialiseStack+0x64>)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3b14      	subs	r3, #20
 8009712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3b04      	subs	r3, #4
 800971e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f06f 0202 	mvn.w	r2, #2
 8009726:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3b20      	subs	r3, #32
 800972c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800972e:	68fb      	ldr	r3, [r7, #12]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	08009741 	.word	0x08009741

08009740 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <prvTaskExitError+0x54>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009752:	d00a      	beq.n	800976a <prvTaskExitError+0x2a>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	60fb      	str	r3, [r7, #12]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <prvTaskExitError+0x28>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	60bb      	str	r3, [r7, #8]
}
 800977c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800977e:	bf00      	nop
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0fc      	beq.n	8009780 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009786:	bf00      	nop
 8009788:	bf00      	nop
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	20000008 	.word	0x20000008
	...

080097a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <pxCurrentTCBConst2>)
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	6808      	ldr	r0, [r1, #0]
 80097a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	f380 8809 	msr	PSP, r0
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f04f 0000 	mov.w	r0, #0
 80097b6:	f380 8811 	msr	BASEPRI, r0
 80097ba:	4770      	bx	lr
 80097bc:	f3af 8000 	nop.w

080097c0 <pxCurrentTCBConst2>:
 80097c0:	20000df8 	.word	0x20000df8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop

080097c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097c8:	4808      	ldr	r0, [pc, #32]	; (80097ec <prvPortStartFirstTask+0x24>)
 80097ca:	6800      	ldr	r0, [r0, #0]
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	f380 8808 	msr	MSP, r0
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8814 	msr	CONTROL, r0
 80097da:	b662      	cpsie	i
 80097dc:	b661      	cpsie	f
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	df00      	svc	0
 80097e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ea:	bf00      	nop
 80097ec:	e000ed08 	.word	0xe000ed08

080097f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097f6:	4b46      	ldr	r3, [pc, #280]	; (8009910 <xPortStartScheduler+0x120>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a46      	ldr	r2, [pc, #280]	; (8009914 <xPortStartScheduler+0x124>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d10a      	bne.n	8009816 <xPortStartScheduler+0x26>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	613b      	str	r3, [r7, #16]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009816:	4b3e      	ldr	r3, [pc, #248]	; (8009910 <xPortStartScheduler+0x120>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a3f      	ldr	r2, [pc, #252]	; (8009918 <xPortStartScheduler+0x128>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10a      	bne.n	8009836 <xPortStartScheduler+0x46>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60fb      	str	r3, [r7, #12]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009836:	4b39      	ldr	r3, [pc, #228]	; (800991c <xPortStartScheduler+0x12c>)
 8009838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	22ff      	movs	r2, #255	; 0xff
 8009846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009858:	b2da      	uxtb	r2, r3
 800985a:	4b31      	ldr	r3, [pc, #196]	; (8009920 <xPortStartScheduler+0x130>)
 800985c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800985e:	4b31      	ldr	r3, [pc, #196]	; (8009924 <xPortStartScheduler+0x134>)
 8009860:	2207      	movs	r2, #7
 8009862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009864:	e009      	b.n	800987a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009866:	4b2f      	ldr	r3, [pc, #188]	; (8009924 <xPortStartScheduler+0x134>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3b01      	subs	r3, #1
 800986c:	4a2d      	ldr	r2, [pc, #180]	; (8009924 <xPortStartScheduler+0x134>)
 800986e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	b2db      	uxtb	r3, r3
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b2db      	uxtb	r3, r3
 8009878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009882:	2b80      	cmp	r3, #128	; 0x80
 8009884:	d0ef      	beq.n	8009866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009886:	4b27      	ldr	r3, [pc, #156]	; (8009924 <xPortStartScheduler+0x134>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f1c3 0307 	rsb	r3, r3, #7
 800988e:	2b04      	cmp	r3, #4
 8009890:	d00a      	beq.n	80098a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	60bb      	str	r3, [r7, #8]
}
 80098a4:	bf00      	nop
 80098a6:	e7fe      	b.n	80098a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098a8:	4b1e      	ldr	r3, [pc, #120]	; (8009924 <xPortStartScheduler+0x134>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	021b      	lsls	r3, r3, #8
 80098ae:	4a1d      	ldr	r2, [pc, #116]	; (8009924 <xPortStartScheduler+0x134>)
 80098b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098b2:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <xPortStartScheduler+0x134>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098ba:	4a1a      	ldr	r2, [pc, #104]	; (8009924 <xPortStartScheduler+0x134>)
 80098bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098c6:	4b18      	ldr	r3, [pc, #96]	; (8009928 <xPortStartScheduler+0x138>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a17      	ldr	r2, [pc, #92]	; (8009928 <xPortStartScheduler+0x138>)
 80098cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <xPortStartScheduler+0x138>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a14      	ldr	r2, [pc, #80]	; (8009928 <xPortStartScheduler+0x138>)
 80098d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098de:	f000 f8dd 	bl	8009a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098e2:	4b12      	ldr	r3, [pc, #72]	; (800992c <xPortStartScheduler+0x13c>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098e8:	f000 f8fc 	bl	8009ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098ec:	4b10      	ldr	r3, [pc, #64]	; (8009930 <xPortStartScheduler+0x140>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a0f      	ldr	r2, [pc, #60]	; (8009930 <xPortStartScheduler+0x140>)
 80098f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098f8:	f7ff ff66 	bl	80097c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098fc:	f7ff f848 	bl	8008990 <vTaskSwitchContext>
	prvTaskExitError();
 8009900:	f7ff ff1e 	bl	8009740 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	e000ed00 	.word	0xe000ed00
 8009914:	410fc271 	.word	0x410fc271
 8009918:	410fc270 	.word	0x410fc270
 800991c:	e000e400 	.word	0xe000e400
 8009920:	20001424 	.word	0x20001424
 8009924:	20001428 	.word	0x20001428
 8009928:	e000ed20 	.word	0xe000ed20
 800992c:	20000008 	.word	0x20000008
 8009930:	e000ef34 	.word	0xe000ef34

08009934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	607b      	str	r3, [r7, #4]
}
 800994c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800994e:	4b0f      	ldr	r3, [pc, #60]	; (800998c <vPortEnterCritical+0x58>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3301      	adds	r3, #1
 8009954:	4a0d      	ldr	r2, [pc, #52]	; (800998c <vPortEnterCritical+0x58>)
 8009956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009958:	4b0c      	ldr	r3, [pc, #48]	; (800998c <vPortEnterCritical+0x58>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d10f      	bne.n	8009980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009960:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <vPortEnterCritical+0x5c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <vPortEnterCritical+0x4c>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	603b      	str	r3, [r7, #0]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <vPortEnterCritical+0x4a>
	}
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	20000008 	.word	0x20000008
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800999a:	4b12      	ldr	r3, [pc, #72]	; (80099e4 <vPortExitCritical+0x50>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <vPortExitCritical+0x24>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	607b      	str	r3, [r7, #4]
}
 80099b4:	bf00      	nop
 80099b6:	e7fe      	b.n	80099b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099b8:	4b0a      	ldr	r3, [pc, #40]	; (80099e4 <vPortExitCritical+0x50>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3b01      	subs	r3, #1
 80099be:	4a09      	ldr	r2, [pc, #36]	; (80099e4 <vPortExitCritical+0x50>)
 80099c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099c2:	4b08      	ldr	r3, [pc, #32]	; (80099e4 <vPortExitCritical+0x50>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d105      	bne.n	80099d6 <vPortExitCritical+0x42>
 80099ca:	2300      	movs	r3, #0
 80099cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	f383 8811 	msr	BASEPRI, r3
}
 80099d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000008 	.word	0x20000008
	...

080099f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099f0:	f3ef 8009 	mrs	r0, PSP
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <pxCurrentTCBConst>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	f01e 0f10 	tst.w	lr, #16
 8009a00:	bf08      	it	eq
 8009a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0a:	6010      	str	r0, [r2, #0]
 8009a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a14:	f380 8811 	msr	BASEPRI, r0
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f7fe ffb6 	bl	8008990 <vTaskSwitchContext>
 8009a24:	f04f 0000 	mov.w	r0, #0
 8009a28:	f380 8811 	msr	BASEPRI, r0
 8009a2c:	bc09      	pop	{r0, r3}
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	6808      	ldr	r0, [r1, #0]
 8009a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a36:	f01e 0f10 	tst.w	lr, #16
 8009a3a:	bf08      	it	eq
 8009a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a40:	f380 8809 	msr	PSP, r0
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	f3af 8000 	nop.w

08009a50 <pxCurrentTCBConst>:
 8009a50:	20000df8 	.word	0x20000df8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop

08009a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	607b      	str	r3, [r7, #4]
}
 8009a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a72:	f7fe fed3 	bl	800881c <xTaskIncrementTick>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <xPortSysTickHandler+0x40>)
 8009a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	2300      	movs	r3, #0
 8009a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f383 8811 	msr	BASEPRI, r3
}
 8009a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <vPortSetupTimerInterrupt+0x34>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <vPortSetupTimerInterrupt+0x38>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <vPortSetupTimerInterrupt+0x3c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <vPortSetupTimerInterrupt+0x40>)
 8009ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab6:	099b      	lsrs	r3, r3, #6
 8009ab8:	4a09      	ldr	r2, [pc, #36]	; (8009ae0 <vPortSetupTimerInterrupt+0x44>)
 8009aba:	3b01      	subs	r3, #1
 8009abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009abe:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <vPortSetupTimerInterrupt+0x34>)
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	601a      	str	r2, [r3, #0]
}
 8009ac4:	bf00      	nop
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	e000e010 	.word	0xe000e010
 8009ad4:	e000e018 	.word	0xe000e018
 8009ad8:	200005e4 	.word	0x200005e4
 8009adc:	10624dd3 	.word	0x10624dd3
 8009ae0:	e000e014 	.word	0xe000e014

08009ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009af4 <vPortEnableVFP+0x10>
 8009ae8:	6801      	ldr	r1, [r0, #0]
 8009aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009aee:	6001      	str	r1, [r0, #0]
 8009af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009af2:	bf00      	nop
 8009af4:	e000ed88 	.word	0xe000ed88

08009af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009afe:	f3ef 8305 	mrs	r3, IPSR
 8009b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b0f      	cmp	r3, #15
 8009b08:	d914      	bls.n	8009b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b0a:	4a17      	ldr	r2, [pc, #92]	; (8009b68 <vPortValidateInterruptPriority+0x70>)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b14:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <vPortValidateInterruptPriority+0x74>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	7afa      	ldrb	r2, [r7, #11]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d20a      	bcs.n	8009b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
}
 8009b30:	bf00      	nop
 8009b32:	e7fe      	b.n	8009b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b34:	4b0e      	ldr	r3, [pc, #56]	; (8009b70 <vPortValidateInterruptPriority+0x78>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <vPortValidateInterruptPriority+0x7c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d90a      	bls.n	8009b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	603b      	str	r3, [r7, #0]
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <vPortValidateInterruptPriority+0x60>
	}
 8009b5a:	bf00      	nop
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	e000e3f0 	.word	0xe000e3f0
 8009b6c:	20001424 	.word	0x20001424
 8009b70:	e000ed0c 	.word	0xe000ed0c
 8009b74:	20001428 	.word	0x20001428

08009b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	; 0x28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b84:	f7fe fd8e 	bl	80086a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b88:	4b5b      	ldr	r3, [pc, #364]	; (8009cf8 <pvPortMalloc+0x180>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b90:	f000 f920 	bl	8009dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b94:	4b59      	ldr	r3, [pc, #356]	; (8009cfc <pvPortMalloc+0x184>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 8093 	bne.w	8009cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01d      	beq.n	8009be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ba8:	2208      	movs	r2, #8
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d014      	beq.n	8009be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f023 0307 	bic.w	r3, r3, #7
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <pvPortMalloc+0x6c>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	617b      	str	r3, [r7, #20]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d06e      	beq.n	8009cc8 <pvPortMalloc+0x150>
 8009bea:	4b45      	ldr	r3, [pc, #276]	; (8009d00 <pvPortMalloc+0x188>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d869      	bhi.n	8009cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bf4:	4b43      	ldr	r3, [pc, #268]	; (8009d04 <pvPortMalloc+0x18c>)
 8009bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bf8:	4b42      	ldr	r3, [pc, #264]	; (8009d04 <pvPortMalloc+0x18c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bfe:	e004      	b.n	8009c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <pvPortMalloc+0xa4>
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1f1      	bne.n	8009c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c1c:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <pvPortMalloc+0x180>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d050      	beq.n	8009cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2208      	movs	r2, #8
 8009c2c:	4413      	add	r3, r2
 8009c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	1ad2      	subs	r2, r2, r3
 8009c40:	2308      	movs	r3, #8
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d91f      	bls.n	8009c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <pvPortMalloc+0xf8>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	613b      	str	r3, [r7, #16]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c82:	69b8      	ldr	r0, [r7, #24]
 8009c84:	f000 f908 	bl	8009e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c88:	4b1d      	ldr	r3, [pc, #116]	; (8009d00 <pvPortMalloc+0x188>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	4a1b      	ldr	r2, [pc, #108]	; (8009d00 <pvPortMalloc+0x188>)
 8009c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c96:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <pvPortMalloc+0x188>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4b1b      	ldr	r3, [pc, #108]	; (8009d08 <pvPortMalloc+0x190>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d203      	bcs.n	8009caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ca2:	4b17      	ldr	r3, [pc, #92]	; (8009d00 <pvPortMalloc+0x188>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a18      	ldr	r2, [pc, #96]	; (8009d08 <pvPortMalloc+0x190>)
 8009ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	4b13      	ldr	r3, [pc, #76]	; (8009cfc <pvPortMalloc+0x184>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cbe:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <pvPortMalloc+0x194>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	4a11      	ldr	r2, [pc, #68]	; (8009d0c <pvPortMalloc+0x194>)
 8009cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cc8:	f7fe fcfa 	bl	80086c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <pvPortMalloc+0x174>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60fb      	str	r3, [r7, #12]
}
 8009ce8:	bf00      	nop
 8009cea:	e7fe      	b.n	8009cea <pvPortMalloc+0x172>
	return pvReturn;
 8009cec:	69fb      	ldr	r3, [r7, #28]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3728      	adds	r7, #40	; 0x28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20001fec 	.word	0x20001fec
 8009cfc:	20002000 	.word	0x20002000
 8009d00:	20001ff0 	.word	0x20001ff0
 8009d04:	20001fe4 	.word	0x20001fe4
 8009d08:	20001ff4 	.word	0x20001ff4
 8009d0c:	20001ff8 	.word	0x20001ff8

08009d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d04d      	beq.n	8009dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d22:	2308      	movs	r3, #8
 8009d24:	425b      	negs	r3, r3
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	4413      	add	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <vPortFree+0xb8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10a      	bne.n	8009d54 <vPortFree+0x44>
	__asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	60fb      	str	r3, [r7, #12]
}
 8009d50:	bf00      	nop
 8009d52:	e7fe      	b.n	8009d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <vPortFree+0x62>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	60bb      	str	r3, [r7, #8]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <vPortFree+0xb8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d01e      	beq.n	8009dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d11a      	bne.n	8009dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	4b0e      	ldr	r3, [pc, #56]	; (8009dc8 <vPortFree+0xb8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	43db      	mvns	r3, r3
 8009d92:	401a      	ands	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d98:	f7fe fc84 	bl	80086a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <vPortFree+0xbc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	4a09      	ldr	r2, [pc, #36]	; (8009dcc <vPortFree+0xbc>)
 8009da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009daa:	6938      	ldr	r0, [r7, #16]
 8009dac:	f000 f874 	bl	8009e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009db0:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <vPortFree+0xc0>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	4a06      	ldr	r2, [pc, #24]	; (8009dd0 <vPortFree+0xc0>)
 8009db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009dba:	f7fe fc81 	bl	80086c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dbe:	bf00      	nop
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20002000 	.word	0x20002000
 8009dcc:	20001ff0 	.word	0x20001ff0
 8009dd0:	20001ffc 	.word	0x20001ffc

08009dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dda:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009de0:	4b27      	ldr	r3, [pc, #156]	; (8009e80 <prvHeapInit+0xac>)
 8009de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00c      	beq.n	8009e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3307      	adds	r3, #7
 8009df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0307 	bic.w	r3, r3, #7
 8009dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	4a1f      	ldr	r2, [pc, #124]	; (8009e80 <prvHeapInit+0xac>)
 8009e04:	4413      	add	r3, r2
 8009e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e0c:	4a1d      	ldr	r2, [pc, #116]	; (8009e84 <prvHeapInit+0xb0>)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e12:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <prvHeapInit+0xb0>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e20:	2208      	movs	r2, #8
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	1a9b      	subs	r3, r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 0307 	bic.w	r3, r3, #7
 8009e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <prvHeapInit+0xb4>)
 8009e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e36:	4b14      	ldr	r3, [pc, #80]	; (8009e88 <prvHeapInit+0xb4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e3e:	4b12      	ldr	r3, [pc, #72]	; (8009e88 <prvHeapInit+0xb4>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <prvHeapInit+0xb4>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	4a0a      	ldr	r2, [pc, #40]	; (8009e8c <prvHeapInit+0xb8>)
 8009e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	4a09      	ldr	r2, [pc, #36]	; (8009e90 <prvHeapInit+0xbc>)
 8009e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e6c:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <prvHeapInit+0xc0>)
 8009e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e72:	601a      	str	r2, [r3, #0]
}
 8009e74:	bf00      	nop
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	2000142c 	.word	0x2000142c
 8009e84:	20001fe4 	.word	0x20001fe4
 8009e88:	20001fec 	.word	0x20001fec
 8009e8c:	20001ff4 	.word	0x20001ff4
 8009e90:	20001ff0 	.word	0x20001ff0
 8009e94:	20002000 	.word	0x20002000

08009e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ea0:	4b28      	ldr	r3, [pc, #160]	; (8009f44 <prvInsertBlockIntoFreeList+0xac>)
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	e002      	b.n	8009eac <prvInsertBlockIntoFreeList+0x14>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d8f7      	bhi.n	8009ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d108      	bne.n	8009eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	441a      	add	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	441a      	add	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d118      	bne.n	8009f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <prvInsertBlockIntoFreeList+0xb0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d00d      	beq.n	8009f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	441a      	add	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	e008      	b.n	8009f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f16:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <prvInsertBlockIntoFreeList+0xb0>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e003      	b.n	8009f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d002      	beq.n	8009f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f36:	bf00      	nop
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20001fe4 	.word	0x20001fe4
 8009f48:	20001fec 	.word	0x20001fec

08009f4c <create_window>:
	_print();
}


// create window, as well as initializes tetris game
void create_window(Window * window) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
    // initialize window
    window->width = IMAGE_WIDTH;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2250      	movs	r2, #80	; 0x50
 8009f58:	601a      	str	r2, [r3, #0]
    window->height = IMAGE_HEIGHT;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009f60:	605a      	str	r2, [r3, #4]

    window->frame = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8009f62:	f240 7004 	movw	r0, #1796	; 0x704
 8009f66:	f002 fca3 	bl	800c8b0 <malloc>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	609a      	str	r2, [r3, #8]
    window->true  = (uint8_t**) malloc(sizeof(uint8_t*) * vert_size);
 8009f72:	f240 7004 	movw	r0, #1796	; 0x704
 8009f76:	f002 fc9b 	bl	800c8b0 <malloc>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	60da      	str	r2, [r3, #12]

    // Fill image buffers with default value
    for(int i = 0; i < vert_size; i++) {
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
 8009f86:	e03e      	b.n	800a006 <create_window+0xba>
		// Point to place in continuous mem location
    	window->frame[i] = window->frameBuff + i*horiz_size;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f103 0210 	add.w	r2, r3, #16
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2164      	movs	r1, #100	; 0x64
 8009f92:	fb01 f303 	mul.w	r3, r1, r3
 8009f96:	4618      	mov	r0, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6899      	ldr	r1, [r3, #8]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	4402      	add	r2, r0
 8009fa4:	601a      	str	r2, [r3, #0]
    	window->true[i]  = window->trueBuff  + i*horiz_size;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 8009fac:	33fc      	adds	r3, #252	; 0xfc
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	2164      	movs	r1, #100	; 0x64
 8009fb2:	fb01 f202 	mul.w	r2, r1, r2
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	68d1      	ldr	r1, [r2, #12]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	0092      	lsls	r2, r2, #2
 8009fc0:	440a      	add	r2, r1
 8009fc2:	4403      	add	r3, r0
 8009fc4:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < horiz_size; j++) {
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	e016      	b.n	8009ffa <create_window+0xae>
			window->frame[i][j] = 0;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	4413      	add	r3, r2
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]
			window->true[i][j] = 0;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	4413      	add	r3, r2
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < horiz_size; j++) {
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60bb      	str	r3, [r7, #8]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b63      	cmp	r3, #99	; 0x63
 8009ffe:	dde5      	ble.n	8009fcc <create_window+0x80>
    for(int i = 0; i < vert_size; i++) {
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800a00c:	ddbc      	ble.n	8009f88 <create_window+0x3c>
		}
    }

    // initialize tetris game board
    //HAL_RNG_GenerateRandomNumber(&hRNG1, "ABC");
    tetris_initialize_game(window);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f001 fb74 	bl	800b6fc <tetris_initialize_game>
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <triggerSoundEffect>:

void triggerSoundEffect(uint16_t* effect_data, unsigned long int effect_size) {
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
	// Stop DAC, change music source, start again
	playing_snd = 0;
 800a026:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <triggerSoundEffect+0x3c>)
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]
	snd_wave_data = effect_data;
 800a02c:	4a0b      	ldr	r2, [pc, #44]	; (800a05c <triggerSoundEffect+0x40>)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6013      	str	r3, [r2, #0]
	full_snd_data_offset = snd_data_offset; // Record where we were
 800a032:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <triggerSoundEffect+0x44>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a0b      	ldr	r2, [pc, #44]	; (800a064 <triggerSoundEffect+0x48>)
 800a038:	6013      	str	r3, [r2, #0]
	snd_data_offset = 0;
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <triggerSoundEffect+0x44>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	601a      	str	r2, [r3, #0]
	snd_data_size = effect_size;
 800a040:	4a09      	ldr	r2, [pc, #36]	; (800a068 <triggerSoundEffect+0x4c>)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	6013      	str	r3, [r2, #0]
	playing_snd = 1;
 800a046:	4b04      	ldr	r3, [pc, #16]	; (800a058 <triggerSoundEffect+0x3c>)
 800a048:	2201      	movs	r2, #1
 800a04a:	601a      	str	r2, [r3, #0]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	20002010 	.word	0x20002010
 800a05c:	20002178 	.word	0x20002178
 800a060:	20002114 	.word	0x20002114
 800a064:	2000217c 	.word	0x2000217c
 800a068:	20002064 	.word	0x20002064

0800a06c <game_playing>:
 * @brief Use when the tetris game is playing. (state machine -> game)
 *
 * @param window window that is being used
 * @param event user input
 */
void game_playing(Window* window, game_input_t event) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af04      	add	r7, sp, #16
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	2b05      	cmp	r3, #5
 800a07c:	d10a      	bne.n	800a094 <game_playing+0x28>
    	window->game.state = Paused;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a084:	33d0      	adds	r3, #208	; 0xd0
 800a086:	2202      	movs	r2, #2
 800a088:	701a      	strb	r2, [r3, #0]
    	game_paused(window, INPUT_ERROR);
 800a08a:	2106      	movs	r1, #6
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f8ad 	bl	800a1ec <game_paused>
            fall_rate = (int) FALL_INIT - sqrt(1000 * window->game.rows_cleared);
            fall_rate = (fall_rate < 1) ? 1 : fall_rate;
        }
    }

}
 800a092:	e09c      	b.n	800a1ce <game_playing+0x162>
        switch (event) {
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	2b06      	cmp	r3, #6
 800a098:	d83c      	bhi.n	800a114 <game_playing+0xa8>
 800a09a:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <game_playing+0x34>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a10d 	.word	0x0800a10d
 800a0a4:	0800a0e5 	.word	0x0800a0e5
 800a0a8:	0800a0f9 	.word	0x0800a0f9
 800a0ac:	0800a0bd 	.word	0x0800a0bd
 800a0b0:	0800a0d1 	.word	0x0800a0d1
 800a0b4:	0800a115 	.word	0x0800a115
 800a0b8:	0800a115 	.word	0x0800a115
            	triggerSoundEffect(shift_sound, SHIFT_SOUND_SIZE);
 800a0bc:	4b46      	ldr	r3, [pc, #280]	; (800a1d8 <game_playing+0x16c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff ffaa 	bl	800a01c <triggerSoundEffect>
                tetris_move_left(window);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 fcf3 	bl	800bab4 <tetris_move_left>
            break;
 800a0ce:	e022      	b.n	800a116 <game_playing+0xaa>
            	triggerSoundEffect(shift_sound, SHIFT_SOUND_SIZE);
 800a0d0:	4b41      	ldr	r3, [pc, #260]	; (800a1d8 <game_playing+0x16c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff ffa0 	bl	800a01c <triggerSoundEffect>
                tetris_move_right(window);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f001 fd06 	bl	800baee <tetris_move_right>
            break;
 800a0e2:	e018      	b.n	800a116 <game_playing+0xaa>
            	triggerSoundEffect(rotate_sound, ROT_SOUND_SIZE);
 800a0e4:	4b3d      	ldr	r3, [pc, #244]	; (800a1dc <game_playing+0x170>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff ff96 	bl	800a01c <triggerSoundEffect>
                tetris_rotate_C_tetromino(window);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f001 fc5b 	bl	800b9ac <tetris_rotate_C_tetromino>
            break;
 800a0f6:	e00e      	b.n	800a116 <game_playing+0xaa>
            	triggerSoundEffect(rotate_sound, ROT_SOUND_SIZE);
 800a0f8:	4b38      	ldr	r3, [pc, #224]	; (800a1dc <game_playing+0x170>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff ff8c 	bl	800a01c <triggerSoundEffect>
                tetris_rotate_CC_tetromino(window);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 fc93 	bl	800ba30 <tetris_rotate_CC_tetromino>
            break;
 800a10a:	e004      	b.n	800a116 <game_playing+0xaa>
                tetris_move_down(window);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fd0a 	bl	800bb26 <tetris_move_down>
            break;
 800a112:	e000      	b.n	800a116 <game_playing+0xaa>
            break;
 800a114:	bf00      	nop
        if (window->game.state == Playing ) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a11c:	33d0      	adds	r3, #208	; 0xd0
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d154      	bne.n	800a1ce <game_playing+0x162>
            drawRect(window, BOARD_X, BOARD_Y, BOARD_WIDTH, BOARD_HEIGHT, HORIZ_SCALE, VERT_SCALE, window->game.board);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a12a:	3308      	adds	r3, #8
 800a12c:	9303      	str	r3, [sp, #12]
 800a12e:	230d      	movs	r3, #13
 800a130:	9302      	str	r3, [sp, #8]
 800a132:	2302      	movs	r3, #2
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	2314      	movs	r3, #20
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	230a      	movs	r3, #10
 800a13c:	2202      	movs	r2, #2
 800a13e:	2102      	movs	r1, #2
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f002 f883 	bl	800c24c <drawRect>
            drawRect(window, BOARD_X + window->game.x, BOARD_Y + window->game.y, 4, 4, HORIZ_SCALE, VERT_SCALE, tetromino_current);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	1c99      	adds	r1, r3, #2
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a156:	3304      	adds	r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	1c9a      	adds	r2, r3, #2
 800a15c:	4b20      	ldr	r3, [pc, #128]	; (800a1e0 <game_playing+0x174>)
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	230d      	movs	r3, #13
 800a162:	9302      	str	r3, [sp, #8]
 800a164:	2302      	movs	r3, #2
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	2304      	movs	r3, #4
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	2304      	movs	r3, #4
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f002 f86c 	bl	800c24c <drawRect>
            tetris_write_points(window);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 faa3 	bl	800b6c0 <tetris_write_points>
            fall_rate = (int) FALL_INIT - sqrt(1000 * window->game.rows_cleared);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800a180:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a18a:	fb02 f303 	mul.w	r3, r2, r3
 800a18e:	4618      	mov	r0, r3
 800a190:	f7f6 f9c8 	bl	8000524 <__aeabi_ui2d>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	ec43 2b10 	vmov	d0, r2, r3
 800a19c:	f003 fd40 	bl	800dc20 <sqrt>
 800a1a0:	ec53 2b10 	vmov	r2, r3, d0
 800a1a4:	f04f 0000 	mov.w	r0, #0
 800a1a8:	490e      	ldr	r1, [pc, #56]	; (800a1e4 <game_playing+0x178>)
 800a1aa:	f7f6 f87d 	bl	80002a8 <__aeabi_dsub>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	f7f6 fcdf 	bl	8000b78 <__aeabi_d2iz>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4a0a      	ldr	r2, [pc, #40]	; (800a1e8 <game_playing+0x17c>)
 800a1be:	6013      	str	r3, [r2, #0]
            fall_rate = (fall_rate < 1) ? 1 : fall_rate;
 800a1c0:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <game_playing+0x17c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	bfb8      	it	lt
 800a1c8:	2301      	movlt	r3, #1
 800a1ca:	4a07      	ldr	r2, [pc, #28]	; (800a1e8 <game_playing+0x17c>)
 800a1cc:	6013      	str	r3, [r2, #0]
}
 800a1ce:	bf00      	nop
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200005e0 	.word	0x200005e0
 800a1dc:	200005dc 	.word	0x200005dc
 800a1e0:	200005e8 	.word	0x200005e8
 800a1e4:	40890000 	.word	0x40890000
 800a1e8:	200005d0 	.word	0x200005d0

0800a1ec <game_paused>:
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 * @param event user input
 */
void game_paused(Window* window, game_input_t event) {
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af04      	add	r7, sp, #16
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	d113      	bne.n	800a226 <game_paused+0x3a>
    	window->game.state = Playing;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a204:	33d0      	adds	r3, #208	; 0xd0
 800a206:	2201      	movs	r2, #1
 800a208:	701a      	strb	r2, [r3, #0]
    	// Draw background before anything (in both frames)
    	tetris_drawBackground(window);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f002 f900 	bl	800c410 <tetris_drawBackground>
    	swap_buffer(window);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f8a3 	bl	800a35c <swap_buffer>
    	tetris_drawBackground(window);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f002 f8fa 	bl	800c410 <tetris_drawBackground>
    	game_playing(window, INPUT_ERROR);
 800a21c:	2106      	movs	r1, #6
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff ff24 	bl	800a06c <game_playing>
        // draw game board
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
        print_str(window, "Press Space", 2, 10);
        print_str(window, "To Continue", 2, 70);
    }
}
 800a224:	e01c      	b.n	800a260 <game_paused+0x74>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2164      	movs	r1, #100	; 0x64
 800a230:	9103      	str	r1, [sp, #12]
 800a232:	210a      	movs	r1, #10
 800a234:	9102      	str	r1, [sp, #8]
 800a236:	2104      	movs	r1, #4
 800a238:	9101      	str	r1, [sp, #4]
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	4613      	mov	r3, r2
 800a23e:	2200      	movs	r2, #0
 800a240:	2100      	movs	r1, #0
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f002 f892 	bl	800c36c <drawRect_color>
        print_str(window, "Press Space", 2, 10);
 800a248:	230a      	movs	r3, #10
 800a24a:	2202      	movs	r2, #2
 800a24c:	4906      	ldr	r1, [pc, #24]	; (800a268 <game_paused+0x7c>)
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f8a2 	bl	800a398 <print_str>
        print_str(window, "To Continue", 2, 70);
 800a254:	2346      	movs	r3, #70	; 0x46
 800a256:	2202      	movs	r2, #2
 800a258:	4904      	ldr	r1, [pc, #16]	; (800a26c <game_paused+0x80>)
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f89c 	bl	800a398 <print_str>
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	0800e0dc 	.word	0x0800e0dc
 800a26c:	0800e0e8 	.word	0x0800e0e8

0800a270 <game_start>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_start(Window* window, game_input_t event) {
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af04      	add	r7, sp, #16
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
    if (event == TOGGLEPAUSE) {
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	2b05      	cmp	r3, #5
 800a280:	d113      	bne.n	800a2aa <game_start+0x3a>
    	window->game.state = Playing;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a288:	33d0      	adds	r3, #208	; 0xd0
 800a28a:	2201      	movs	r2, #1
 800a28c:	701a      	strb	r2, [r3, #0]
    	// Draw background before anything (in both frames)
    	tetris_drawBackground(window);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f002 f8be 	bl	800c410 <tetris_drawBackground>
    	swap_buffer(window);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f861 	bl	800a35c <swap_buffer>
    	tetris_drawBackground(window);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f002 f8b8 	bl	800c410 <tetris_drawBackground>
    	game_playing(window, INPUT_ERROR);
 800a2a0:	2106      	movs	r1, #6
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7ff fee2 	bl	800a06c <game_playing>
        print_str(window, "Welcome To", 2, 10);
        print_str(window, "Tetris!", 20, 110);
        print_str(window, "Press Space", 2, 210);
        print_str(window, "To Continue", 2, 270);
    }
}
 800a2a8:	e029      	b.n	800a2fe <game_start+0x8e>
        drawRect_color(window, 0, 0, window->width, window->height, 4, 10, 100);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	2164      	movs	r1, #100	; 0x64
 800a2b4:	9103      	str	r1, [sp, #12]
 800a2b6:	210a      	movs	r1, #10
 800a2b8:	9102      	str	r1, [sp, #8]
 800a2ba:	2104      	movs	r1, #4
 800a2bc:	9101      	str	r1, [sp, #4]
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f002 f850 	bl	800c36c <drawRect_color>
        print_str(window, "Welcome To", 2, 10);
 800a2cc:	230a      	movs	r3, #10
 800a2ce:	2202      	movs	r2, #2
 800a2d0:	490d      	ldr	r1, [pc, #52]	; (800a308 <game_start+0x98>)
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f860 	bl	800a398 <print_str>
        print_str(window, "Tetris!", 20, 110);
 800a2d8:	236e      	movs	r3, #110	; 0x6e
 800a2da:	2214      	movs	r2, #20
 800a2dc:	490b      	ldr	r1, [pc, #44]	; (800a30c <game_start+0x9c>)
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f85a 	bl	800a398 <print_str>
        print_str(window, "Press Space", 2, 210);
 800a2e4:	23d2      	movs	r3, #210	; 0xd2
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	4909      	ldr	r1, [pc, #36]	; (800a310 <game_start+0xa0>)
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f854 	bl	800a398 <print_str>
        print_str(window, "To Continue", 2, 270);
 800a2f0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	4907      	ldr	r1, [pc, #28]	; (800a314 <game_start+0xa4>)
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f84d 	bl	800a398 <print_str>
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	0800e0f4 	.word	0x0800e0f4
 800a30c:	0800e100 	.word	0x0800e100
 800a310:	0800e0dc 	.word	0x0800e0dc
 800a314:	0800e0e8 	.word	0x0800e0e8

0800a318 <game_ended>:
/**
 * @brief Use when the tetris game is paused.
 *
 * @param window window that is being used
 */
void game_ended(Window* window, game_input_t event) {
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	70fb      	strb	r3, [r7, #3]
	if (event == TOGGLEPAUSE) {
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	2b05      	cmp	r3, #5
 800a328:	d10e      	bne.n	800a348 <game_ended+0x30>
		fall_rate = FALL_INIT;
 800a32a:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <game_ended+0x40>)
 800a32c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a330:	601a      	str	r2, [r3, #0]
		window->game.state = Start;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800a338:	33d0      	adds	r3, #208	; 0xd0
 800a33a:	2200      	movs	r2, #0
 800a33c:	701a      	strb	r2, [r3, #0]
		game_start(window, INPUT_ERROR);
 800a33e:	2106      	movs	r1, #6
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7ff ff95 	bl	800a270 <game_start>
		tetris_drawEndScreen(window);
	}



}
 800a346:	e002      	b.n	800a34e <game_ended+0x36>
		tetris_drawEndScreen(window);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 fc8d 	bl	800bc68 <tetris_drawEndScreen>
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	200005d0 	.word	0x200005d0

0800a35c <swap_buffer>:
/**
 * @brief Swap the image buffers.
 *
 * @param window window with the image buffers.
 */
void swap_buffer(Window * window) {
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	// Swap pointers
	uint8_t** tmp = window->true;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	60fb      	str	r3, [r7, #12]
	window->true = window->frame;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689a      	ldr	r2, [r3, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	60da      	str	r2, [r3, #12]
	window->frame = tmp;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	609a      	str	r2, [r3, #8]
//	clear_buffer();
	// Change DMA memory address
	hdac1.DMA_Handle1->Instance->CMAR = (uint32_t) window->true[0];
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	4b05      	ldr	r3, [pc, #20]	; (800a394 <swap_buffer+0x38>)
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	60da      	str	r2, [r3, #12]
}
 800a386:	bf00      	nop
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	200020b4 	.word	0x200020b4

0800a398 <print_str>:

void print_str(Window * window, char* buffer, int x, int y) {
 800a398:	b480      	push	{r7}
 800a39a:	b08b      	sub	sp, #44	; 0x2c
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	603b      	str	r3, [r7, #0]

	x += 3; // Avoid back porch
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	3303      	adds	r3, #3
 800a3aa:	607b      	str	r3, [r7, #4]
	y += 70;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	3346      	adds	r3, #70	; 0x46
 800a3b0:	603b      	str	r3, [r7, #0]

	char cur_char = buffer[0];
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(cur_char >= 97) cur_char -= 32;
 800a3ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3be:	2b60      	cmp	r3, #96	; 0x60
 800a3c0:	d904      	bls.n	800a3cc <print_str+0x34>
 800a3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3c6:	3b20      	subs	r3, #32
 800a3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	623b      	str	r3, [r7, #32]
	while(cur_char != '\0') {
 800a3d0:	e073      	b.n	800a4ba <print_str+0x122>
		char* bitmap = font_map[cur_char - 32]; // 32 = ' '
 800a3d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d6:	f1a3 0220 	sub.w	r2, r3, #32
 800a3da:	4613      	mov	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	009a      	lsls	r2, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	4a3a      	ldr	r2, [pc, #232]	; (800a4d0 <print_str+0x138>)
 800a3e6:	4413      	add	r3, r2
 800a3e8:	617b      	str	r3, [r7, #20]
		// y-value precursor
		for(int h = 0; h < 70; h++) {
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	61fb      	str	r3, [r7, #28]
 800a3ee:	e04c      	b.n	800a48a <print_str+0xf2>
			for (int w = 0; w < 7; w++) {
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	61bb      	str	r3, [r7, #24]
 800a3f4:	e043      	b.n	800a47e <print_str+0xe6>
				// Pre- and Post- empty space on x & y
				if (h < 10 || w == 0 || h >= 60 || w == 6) {
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	2b09      	cmp	r3, #9
 800a3fa:	dd08      	ble.n	800a40e <print_str+0x76>
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d005      	beq.n	800a40e <print_str+0x76>
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	2b3b      	cmp	r3, #59	; 0x3b
 800a406:	dc02      	bgt.n	800a40e <print_str+0x76>
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	2b06      	cmp	r3, #6
 800a40c:	d10e      	bne.n	800a42c <print_str+0x94>
					window->frame[y+h][x+w] = 100;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	689a      	ldr	r2, [r3, #8]
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	440b      	add	r3, r1
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	69ba      	ldr	r2, [r7, #24]
 800a422:	440a      	add	r2, r1
 800a424:	4413      	add	r3, r2
 800a426:	2264      	movs	r2, #100	; 0x64
 800a428:	701a      	strb	r2, [r3, #0]
					continue;
 800a42a:	e025      	b.n	800a478 <print_str+0xe0>
				}
				int array_index = ((h-10)/10) * 5 + (w-1); // h/10 = floor division, to stretch
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	3b0a      	subs	r3, #10
 800a430:	4a28      	ldr	r2, [pc, #160]	; (800a4d4 <print_str+0x13c>)
 800a432:	fb82 1203 	smull	r1, r2, r2, r3
 800a436:	1092      	asrs	r2, r2, #2
 800a438:	17db      	asrs	r3, r3, #31
 800a43a:	1ad2      	subs	r2, r2, r3
 800a43c:	4613      	mov	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	441a      	add	r2, r3
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	3b01      	subs	r3, #1
 800a446:	4413      	add	r3, r2
 800a448:	613b      	str	r3, [r7, #16]
				window->frame[y+h][x+w] = bitmap[array_index] ? 170 : 100;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4413      	add	r3, r2
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <print_str+0xc2>
 800a456:	20aa      	movs	r0, #170	; 0xaa
 800a458:	e000      	b.n	800a45c <print_str+0xc4>
 800a45a:	2064      	movs	r0, #100	; 0x64
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	6839      	ldr	r1, [r7, #0]
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	440b      	add	r3, r1
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	440a      	add	r2, r1
 800a472:	4413      	add	r3, r2
 800a474:	4602      	mov	r2, r0
 800a476:	701a      	strb	r2, [r3, #0]
			for (int w = 0; w < 7; w++) {
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	3301      	adds	r3, #1
 800a47c:	61bb      	str	r3, [r7, #24]
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	2b06      	cmp	r3, #6
 800a482:	ddb8      	ble.n	800a3f6 <print_str+0x5e>
		for(int h = 0; h < 70; h++) {
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	3301      	adds	r3, #1
 800a488:	61fb      	str	r3, [r7, #28]
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	2b45      	cmp	r3, #69	; 0x45
 800a48e:	ddaf      	ble.n	800a3f0 <print_str+0x58>
			}
		}
		x += 7; // 1 pre, 5 char, 1 post
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3307      	adds	r3, #7
 800a494:	607b      	str	r3, [r7, #4]
		i++;
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	3301      	adds	r3, #1
 800a49a:	623b      	str	r3, [r7, #32]
		cur_char = buffer[i];
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//'a' -> 'A' for example
		if(cur_char >= 97) cur_char -= 32;
 800a4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4ac:	2b60      	cmp	r3, #96	; 0x60
 800a4ae:	d904      	bls.n	800a4ba <print_str+0x122>
 800a4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4b4:	3b20      	subs	r3, #32
 800a4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(cur_char != '\0') {
 800a4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d187      	bne.n	800a3d2 <print_str+0x3a>
	}
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	372c      	adds	r7, #44	; 0x2c
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	2000000c 	.word	0x2000000c
 800a4d4:	66666667 	.word	0x66666667

0800a4d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 800a4de:	2300      	movs	r3, #0
 800a4e0:	607b      	str	r3, [r7, #4]
 800a4e2:	e007      	b.n	800a4f4 <main+0x1c>
	    input_buffer[i] = INPUT_ERROR;
 800a4e4:	4a35      	ldr	r2, [pc, #212]	; (800a5bc <main+0xe4>)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	2206      	movs	r2, #6
 800a4ec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_BUFFER_SIZE; i++) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	607b      	str	r3, [r7, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	ddf4      	ble.n	800a4e4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a4fa:	f7f6 fd31 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a4fe:	f000 f87b 	bl	800a5f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a502:	f000 fb0b 	bl	800ab1c <MX_GPIO_Init>
  MX_DMA_Init();
 800a506:	f000 fadf 	bl	800aac8 <MX_DMA_Init>
  MX_DAC1_Init();
 800a50a:	f000 f8c7 	bl	800a69c <MX_DAC1_Init>

  MX_TIM4_Init();
 800a50e:	f000 f9ef 	bl	800a8f0 <MX_TIM4_Init>
  MX_TIM2_Init();
 800a512:	f000 f971 	bl	800a7f8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800a516:	f000 f917 	bl	800a748 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800a51a:	f000 fa89 	bl	800aa30 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 800a51e:	f000 fa35 	bl	800a98c <MX_TIM15_Init>
  MX_RNG_Init();
 800a522:	f000 f8fb 	bl	800a71c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  create_window(&window);
 800a526:	4826      	ldr	r0, [pc, #152]	; (800a5c0 <main+0xe8>)
 800a528:	f7ff fd10 	bl	8009f4c <create_window>

  // Fill the frame buffer
  //init_buffer(window.imgBuff1, window.imgBuff2);
  HAL_TIM_Base_Start_IT(&htim1);	// start slave first.
 800a52c:	4825      	ldr	r0, [pc, #148]	; (800a5c4 <main+0xec>)
 800a52e:	f7f9 fcf1 	bl	8003f14 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800a532:	2064      	movs	r0, #100	; 0x64
 800a534:	f7f6 fd4c 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// start slave first.
 800a538:	210c      	movs	r1, #12
 800a53a:	4823      	ldr	r0, [pc, #140]	; (800a5c8 <main+0xf0>)
 800a53c:	f7f9 fdbc 	bl	80040b8 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 800a540:	2064      	movs	r0, #100	; 0x64
 800a542:	f7f6 fd45 	bl	8000fd0 <HAL_Delay>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) window.true[0], horiz_size*vert_size, DAC_ALIGN_8B_R);
 800a546:	4b1e      	ldr	r3, [pc, #120]	; (800a5c0 <main+0xe8>)
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	2308      	movs	r3, #8
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	f64a 7364 	movw	r3, #44900	; 0xaf64
 800a554:	2100      	movs	r1, #0
 800a556:	481d      	ldr	r0, [pc, #116]	; (800a5cc <main+0xf4>)
 800a558:	f7f6 feb4 	bl	80012c4 <HAL_DAC_Start_DMA>
  HAL_Delay(100);
 800a55c:	2064      	movs	r0, #100	; 0x64
 800a55e:	f7f6 fd37 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 800a562:	481b      	ldr	r0, [pc, #108]	; (800a5d0 <main+0xf8>)
 800a564:	f7f9 fc6e 	bl	8003e44 <HAL_TIM_Base_Start>
  HAL_Delay(100);
 800a568:	2064      	movs	r0, #100	; 0x64
 800a56a:	f7f6 fd31 	bl	8000fd0 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800a56e:	2201      	movs	r2, #1
 800a570:	4918      	ldr	r1, [pc, #96]	; (800a5d4 <main+0xfc>)
 800a572:	4819      	ldr	r0, [pc, #100]	; (800a5d8 <main+0x100>)
 800a574:	f7fa ffc6 	bl	8005504 <HAL_UART_Receive_IT>
  HAL_Delay(100);
 800a578:	2064      	movs	r0, #100	; 0x64
 800a57a:	f7f6 fd29 	bl	8000fd0 <HAL_Delay>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800a57e:	2110      	movs	r1, #16
 800a580:	4812      	ldr	r0, [pc, #72]	; (800a5cc <main+0xf4>)
 800a582:	f7f6 fe4d 	bl	8001220 <HAL_DAC_Start>
  HAL_Delay(100);
 800a586:	2064      	movs	r0, #100	; 0x64
 800a588:	f7f6 fd22 	bl	8000fd0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim15);	// start slave first.
 800a58c:	4813      	ldr	r0, [pc, #76]	; (800a5dc <main+0x104>)
 800a58e:	f7f9 fcc1 	bl	8003f14 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800a592:	f7fc ff5f 	bl	8007454 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of frameTask */
  frameTaskHandle = osThreadNew(updateGameLogic, NULL, &frameTask_attributes);
 800a596:	4a12      	ldr	r2, [pc, #72]	; (800a5e0 <main+0x108>)
 800a598:	2100      	movs	r1, #0
 800a59a:	4812      	ldr	r0, [pc, #72]	; (800a5e4 <main+0x10c>)
 800a59c:	f7fc ffa4 	bl	80074e8 <osThreadNew>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	4a11      	ldr	r2, [pc, #68]	; (800a5e8 <main+0x110>)
 800a5a4:	6013      	str	r3, [r2, #0]

  /* creation of soundTask */
  soundTaskHandle = osThreadNew(soundController, NULL, &soundTask_attributes);
 800a5a6:	4a11      	ldr	r2, [pc, #68]	; (800a5ec <main+0x114>)
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4811      	ldr	r0, [pc, #68]	; (800a5f0 <main+0x118>)
 800a5ac:	f7fc ff9c 	bl	80074e8 <osThreadNew>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	4a10      	ldr	r2, [pc, #64]	; (800a5f4 <main+0x11c>)
 800a5b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800a5b6:	f7fc ff71 	bl	800749c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800a5ba:	e7fe      	b.n	800a5ba <main+0xe2>
 800a5bc:	20002188 	.word	0x20002188
 800a5c0:	200022d0 	.word	0x200022d0
 800a5c4:	20002224 	.word	0x20002224
 800a5c8:	20002284 	.word	0x20002284
 800a5cc:	200020b4 	.word	0x200020b4
 800a5d0:	20002068 	.word	0x20002068
 800a5d4:	200005d4 	.word	0x200005d4
 800a5d8:	20002190 	.word	0x20002190
 800a5dc:	200020c8 	.word	0x200020c8
 800a5e0:	0803fb00 	.word	0x0803fb00
 800a5e4:	0800ad6d 	.word	0x0800ad6d
 800a5e8:	2001a9a4 	.word	0x2001a9a4
 800a5ec:	0803fb24 	.word	0x0803fb24
 800a5f0:	0800aded 	.word	0x0800aded
 800a5f4:	20002220 	.word	0x20002220

0800a5f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b096      	sub	sp, #88	; 0x58
 800a5fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a5fe:	f107 0314 	add.w	r3, r7, #20
 800a602:	2244      	movs	r2, #68	; 0x44
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f002 f968 	bl	800c8dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a60c:	463b      	mov	r3, r7
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	605a      	str	r2, [r3, #4]
 800a614:	609a      	str	r2, [r3, #8]
 800a616:	60da      	str	r2, [r3, #12]
 800a618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800a61a:	2000      	movs	r0, #0
 800a61c:	f7f7 fe92 	bl	8002344 <HAL_PWREx_ControlVoltageScaling>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <SystemClock_Config+0x32>
  {
    Error_Handler();
 800a626:	f000 fcdb 	bl	800afe0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a62a:	2310      	movs	r3, #16
 800a62c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a62e:	2301      	movs	r3, #1
 800a630:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800a636:	2360      	movs	r3, #96	; 0x60
 800a638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a63a:	2302      	movs	r3, #2
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a63e:	2301      	movs	r3, #1
 800a640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800a642:	2301      	movs	r3, #1
 800a644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800a646:	233c      	movs	r3, #60	; 0x3c
 800a648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a64a:	2302      	movs	r3, #2
 800a64c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a64e:	2302      	movs	r3, #2
 800a650:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a652:	2302      	movs	r3, #2
 800a654:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a656:	f107 0314 	add.w	r3, r7, #20
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7f7 ff16 	bl	800248c <HAL_RCC_OscConfig>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <SystemClock_Config+0x72>
  {
    Error_Handler();
 800a666:	f000 fcbb 	bl	800afe0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a66a:	230f      	movs	r3, #15
 800a66c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a66e:	2303      	movs	r3, #3
 800a670:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a672:	2300      	movs	r3, #0
 800a674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a67c:	2300      	movs	r3, #0
 800a67e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a680:	463b      	mov	r3, r7
 800a682:	2105      	movs	r1, #5
 800a684:	4618      	mov	r0, r3
 800a686:	f7f8 fb27 	bl	8002cd8 <HAL_RCC_ClockConfig>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800a690:	f000 fca6 	bl	800afe0 <Error_Handler>
  }
}
 800a694:	bf00      	nop
 800a696:	3758      	adds	r7, #88	; 0x58
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08a      	sub	sp, #40	; 0x28
 800a6a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800a6a2:	463b      	mov	r3, r7
 800a6a4:	2228      	movs	r2, #40	; 0x28
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f002 f917 	bl	800c8dc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800a6ae:	4b19      	ldr	r3, [pc, #100]	; (800a714 <MX_DAC1_Init+0x78>)
 800a6b0:	4a19      	ldr	r2, [pc, #100]	; (800a718 <MX_DAC1_Init+0x7c>)
 800a6b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800a6b4:	4817      	ldr	r0, [pc, #92]	; (800a714 <MX_DAC1_Init+0x78>)
 800a6b6:	f7f6 fd91 	bl	80011dc <HAL_DAC_Init>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800a6c0:	f000 fc8e 	bl	800afe0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800a6c8:	230e      	movs	r3, #14
 800a6ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800a6dc:	463b      	mov	r3, r7
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	480c      	ldr	r0, [pc, #48]	; (800a714 <MX_DAC1_Init+0x78>)
 800a6e4:	f7f6 ff62 	bl	80015ac <HAL_DAC_ConfigChannel>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800a6ee:	f000 fc77 	bl	800afe0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800a6f6:	463b      	mov	r3, r7
 800a6f8:	2210      	movs	r2, #16
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4805      	ldr	r0, [pc, #20]	; (800a714 <MX_DAC1_Init+0x78>)
 800a6fe:	f7f6 ff55 	bl	80015ac <HAL_DAC_ConfigChannel>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 800a708:	f000 fc6a 	bl	800afe0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 800a70c:	bf00      	nop
 800a70e:	3728      	adds	r7, #40	; 0x28
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	200020b4 	.word	0x200020b4
 800a718:	40007400 	.word	0x40007400

0800a71c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <MX_RNG_Init+0x24>)
 800a722:	4a08      	ldr	r2, [pc, #32]	; (800a744 <MX_RNG_Init+0x28>)
 800a724:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a726:	4b06      	ldr	r3, [pc, #24]	; (800a740 <MX_RNG_Init+0x24>)
 800a728:	2200      	movs	r2, #0
 800a72a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a72c:	4804      	ldr	r0, [pc, #16]	; (800a740 <MX_RNG_Init+0x24>)
 800a72e:	f7f9 facf 	bl	8003cd0 <HAL_RNG_Init>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800a738:	f000 fc52 	bl	800afe0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  /* USER CODE END RNG_Init 2 */

}
 800a73c:	bf00      	nop
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	20002270 	.word	0x20002270
 800a744:	50060800 	.word	0x50060800

0800a748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b088      	sub	sp, #32
 800a74c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a74e:	f107 030c 	add.w	r3, r7, #12
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	605a      	str	r2, [r3, #4]
 800a758:	609a      	str	r2, [r3, #8]
 800a75a:	60da      	str	r2, [r3, #12]
 800a75c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a75e:	463b      	mov	r3, r7
 800a760:	2200      	movs	r2, #0
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	605a      	str	r2, [r3, #4]
 800a766:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a768:	4b21      	ldr	r3, [pc, #132]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a76a:	4a22      	ldr	r2, [pc, #136]	; (800a7f4 <MX_TIM1_Init+0xac>)
 800a76c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a76e:	4b20      	ldr	r3, [pc, #128]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a770:	2200      	movs	r2, #0
 800a772:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a774:	4b1e      	ldr	r3, [pc, #120]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a776:	2200      	movs	r2, #0
 800a778:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800a77a:	4b1d      	ldr	r3, [pc, #116]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a77c:	2263      	movs	r2, #99	; 0x63
 800a77e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a780:	4b1b      	ldr	r3, [pc, #108]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a782:	2200      	movs	r2, #0
 800a784:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a786:	4b1a      	ldr	r3, [pc, #104]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a788:	2200      	movs	r2, #0
 800a78a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a78c:	4b18      	ldr	r3, [pc, #96]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a78e:	2200      	movs	r2, #0
 800a790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a792:	4817      	ldr	r0, [pc, #92]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a794:	f7f9 fafe 	bl	8003d94 <HAL_TIM_Base_Init>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a79e:	f000 fc1f 	bl	800afe0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800a7a2:	2306      	movs	r3, #6
 800a7a4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800a7a6:	2330      	movs	r3, #48	; 0x30
 800a7a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800a7aa:	f107 030c 	add.w	r3, r7, #12
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	480f      	ldr	r0, [pc, #60]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a7b2:	f7fa f884 	bl	80048be <HAL_TIM_SlaveConfigSynchro>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800a7bc:	f000 fc10 	bl	800afe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800a7c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4807      	ldr	r0, [pc, #28]	; (800a7f0 <MX_TIM1_Init+0xa8>)
 800a7d4:	f7fa fda0 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800a7de:	f000 fbff 	bl	800afe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800a7e2:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <MX_TIM1_Init+0xac>)
 800a7e4:	2237      	movs	r2, #55	; 0x37
 800a7e6:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM1_Init 2 */

}
 800a7e8:	bf00      	nop
 800a7ea:	3720      	adds	r7, #32
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20002224 	.word	0x20002224
 800a7f4:	40012c00 	.word	0x40012c00

0800a7f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b090      	sub	sp, #64	; 0x40
 800a7fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a7fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a802:	2200      	movs	r2, #0
 800a804:	601a      	str	r2, [r3, #0]
 800a806:	605a      	str	r2, [r3, #4]
 800a808:	609a      	str	r2, [r3, #8]
 800a80a:	60da      	str	r2, [r3, #12]
 800a80c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a80e:	f107 0320 	add.w	r3, r7, #32
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	605a      	str	r2, [r3, #4]
 800a818:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a81a:	1d3b      	adds	r3, r7, #4
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
 800a820:	605a      	str	r2, [r3, #4]
 800a822:	609a      	str	r2, [r3, #8]
 800a824:	60da      	str	r2, [r3, #12]
 800a826:	611a      	str	r2, [r3, #16]
 800a828:	615a      	str	r2, [r3, #20]
 800a82a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a82c:	4b2f      	ldr	r3, [pc, #188]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a82e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a834:	4b2d      	ldr	r3, [pc, #180]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a836:	2200      	movs	r2, #0
 800a838:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a83a:	4b2c      	ldr	r3, [pc, #176]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800a840:	4b2a      	ldr	r3, [pc, #168]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a842:	2263      	movs	r2, #99	; 0x63
 800a844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a846:	4b29      	ldr	r3, [pc, #164]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a848:	2200      	movs	r2, #0
 800a84a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a84c:	4b27      	ldr	r3, [pc, #156]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a84e:	2200      	movs	r2, #0
 800a850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a852:	4826      	ldr	r0, [pc, #152]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a854:	f7f9 fa9e 	bl	8003d94 <HAL_TIM_Base_Init>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800a85e:	f000 fbbf 	bl	800afe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a862:	4822      	ldr	r0, [pc, #136]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a864:	f7f9 fbc6 	bl	8003ff4 <HAL_TIM_PWM_Init>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800a86e:	f000 fbb7 	bl	800afe0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800a872:	2306      	movs	r3, #6
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800a876:	2330      	movs	r3, #48	; 0x30
 800a878:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800a87a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a87e:	4619      	mov	r1, r3
 800a880:	481a      	ldr	r0, [pc, #104]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a882:	f7fa f81c 	bl	80048be <HAL_TIM_SlaveConfigSynchro>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800a88c:	f000 fba8 	bl	800afe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a890:	2320      	movs	r3, #32
 800a892:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a894:	2300      	movs	r3, #0
 800a896:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a898:	f107 0320 	add.w	r3, r7, #32
 800a89c:	4619      	mov	r1, r3
 800a89e:	4813      	ldr	r0, [pc, #76]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a8a0:	f7fa fd3a 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800a8aa:	f000 fb99 	bl	800afe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a8ae:	2360      	movs	r3, #96	; 0x60
 800a8b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 90;
 800a8b2:	235a      	movs	r3, #90	; 0x5a
 800a8b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a8be:	1d3b      	adds	r3, r7, #4
 800a8c0:	220c      	movs	r2, #12
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4809      	ldr	r0, [pc, #36]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a8c6:	f7f9 fe1d 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800a8d0:	f000 fb86 	bl	800afe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  // trigger selection TS=001 ITR1 = TIM2, slave mode SMS=0111 external clock mode 1
  TIM2->SMCR = TIM_TS_ITR3 | TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 800a8d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8d8:	2237      	movs	r2, #55	; 0x37
 800a8da:	609a      	str	r2, [r3, #8]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a8dc:	4803      	ldr	r0, [pc, #12]	; (800a8ec <MX_TIM2_Init+0xf4>)
 800a8de:	f000 fcd5 	bl	800b28c <HAL_TIM_MspPostInit>

}
 800a8e2:	bf00      	nop
 800a8e4:	3740      	adds	r7, #64	; 0x40
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20002284 	.word	0x20002284

0800a8f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a8f6:	f107 0310 	add.w	r3, r7, #16
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	605a      	str	r2, [r3, #4]
 800a900:	609a      	str	r2, [r3, #8]
 800a902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a904:	1d3b      	adds	r3, r7, #4
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	605a      	str	r2, [r3, #4]
 800a90c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a90e:	4b1d      	ldr	r3, [pc, #116]	; (800a984 <MX_TIM4_Init+0x94>)
 800a910:	4a1d      	ldr	r2, [pc, #116]	; (800a988 <MX_TIM4_Init+0x98>)
 800a912:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12;
 800a914:	4b1b      	ldr	r3, [pc, #108]	; (800a984 <MX_TIM4_Init+0x94>)
 800a916:	220c      	movs	r2, #12
 800a918:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a91a:	4b1a      	ldr	r3, [pc, #104]	; (800a984 <MX_TIM4_Init+0x94>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2;
 800a920:	4b18      	ldr	r3, [pc, #96]	; (800a984 <MX_TIM4_Init+0x94>)
 800a922:	2202      	movs	r2, #2
 800a924:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a926:	4b17      	ldr	r3, [pc, #92]	; (800a984 <MX_TIM4_Init+0x94>)
 800a928:	2200      	movs	r2, #0
 800a92a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a92c:	4b15      	ldr	r3, [pc, #84]	; (800a984 <MX_TIM4_Init+0x94>)
 800a92e:	2200      	movs	r2, #0
 800a930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a932:	4814      	ldr	r0, [pc, #80]	; (800a984 <MX_TIM4_Init+0x94>)
 800a934:	f7f9 fa2e 	bl	8003d94 <HAL_TIM_Base_Init>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800a93e:	f000 fb4f 	bl	800afe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a948:	f107 0310 	add.w	r3, r7, #16
 800a94c:	4619      	mov	r1, r3
 800a94e:	480d      	ldr	r0, [pc, #52]	; (800a984 <MX_TIM4_Init+0x94>)
 800a950:	f7f9 feec 	bl	800472c <HAL_TIM_ConfigClockSource>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800a95a:	f000 fb41 	bl	800afe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a95e:	2320      	movs	r3, #32
 800a960:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a966:	1d3b      	adds	r3, r7, #4
 800a968:	4619      	mov	r1, r3
 800a96a:	4806      	ldr	r0, [pc, #24]	; (800a984 <MX_TIM4_Init+0x94>)
 800a96c:	f7fa fcd4 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d001      	beq.n	800a97a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800a976:	f000 fb33 	bl	800afe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a97a:	bf00      	nop
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20002068 	.word	0x20002068
 800a988:	40000800 	.word	0x40000800

0800a98c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a992:	f107 0310 	add.w	r3, r7, #16
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
 800a99a:	605a      	str	r2, [r3, #4]
 800a99c:	609a      	str	r2, [r3, #8]
 800a99e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9a0:	1d3b      	adds	r3, r7, #4
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	605a      	str	r2, [r3, #4]
 800a9a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800a9aa:	4b1f      	ldr	r3, [pc, #124]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9ac:	4a1f      	ldr	r2, [pc, #124]	; (800aa2c <MX_TIM15_Init+0xa0>)
 800a9ae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9b6:	4b1c      	ldr	r3, [pc, #112]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 14999;
 800a9bc:	4b1a      	ldr	r3, [pc, #104]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9be:	f643 2297 	movw	r2, #14999	; 0x3a97
 800a9c2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a9c4:	4b18      	ldr	r3, [pc, #96]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800a9ca:	4b17      	ldr	r3, [pc, #92]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9d0:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800a9d6:	4814      	ldr	r0, [pc, #80]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9d8:	f7f9 f9dc 	bl	8003d94 <HAL_TIM_Base_Init>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800a9e2:	f000 fafd 	bl	800afe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a9e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800a9ec:	f107 0310 	add.w	r3, r7, #16
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	480d      	ldr	r0, [pc, #52]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800a9f4:	f7f9 fe9a 	bl	800472c <HAL_TIM_ConfigClockSource>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800a9fe:	f000 faef 	bl	800afe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa02:	2300      	movs	r3, #0
 800aa04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800aa0a:	1d3b      	adds	r3, r7, #4
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4806      	ldr	r0, [pc, #24]	; (800aa28 <MX_TIM15_Init+0x9c>)
 800aa10:	f7fa fc82 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800aa1a:	f000 fae1 	bl	800afe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800aa1e:	bf00      	nop
 800aa20:	3720      	adds	r7, #32
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	200020c8 	.word	0x200020c8
 800aa2c:	40014000 	.word	0x40014000

0800aa30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800aa34:	4b22      	ldr	r3, [pc, #136]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa36:	4a23      	ldr	r2, [pc, #140]	; (800aac4 <MX_USART1_UART_Init+0x94>)
 800aa38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800aa3a:	4b21      	ldr	r3, [pc, #132]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aa40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aa42:	4b1f      	ldr	r3, [pc, #124]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aa48:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800aa4e:	4b1c      	ldr	r3, [pc, #112]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800aa54:	4b1a      	ldr	r3, [pc, #104]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa56:	220c      	movs	r2, #12
 800aa58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa5a:	4b19      	ldr	r3, [pc, #100]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa60:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa66:	4b16      	ldr	r3, [pc, #88]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aa6c:	4b14      	ldr	r3, [pc, #80]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa72:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800aa78:	4811      	ldr	r0, [pc, #68]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa7a:	f7fa fcf3 	bl	8005464 <HAL_UART_Init>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800aa84:	f000 faac 	bl	800afe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa88:	2100      	movs	r1, #0
 800aa8a:	480d      	ldr	r0, [pc, #52]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa8c:	f7fc fbd3 	bl	8007236 <HAL_UARTEx_SetTxFifoThreshold>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800aa96:	f000 faa3 	bl	800afe0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	4808      	ldr	r0, [pc, #32]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aa9e:	f7fc fc08 	bl	80072b2 <HAL_UARTEx_SetRxFifoThreshold>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800aaa8:	f000 fa9a 	bl	800afe0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800aaac:	4804      	ldr	r0, [pc, #16]	; (800aac0 <MX_USART1_UART_Init+0x90>)
 800aaae:	f7fc fb89 	bl	80071c4 <HAL_UARTEx_DisableFifoMode>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800aab8:	f000 fa92 	bl	800afe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800aabc:	bf00      	nop
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20002190 	.word	0x20002190
 800aac4:	40013800 	.word	0x40013800

0800aac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800aace:	4b12      	ldr	r3, [pc, #72]	; (800ab18 <MX_DMA_Init+0x50>)
 800aad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aad2:	4a11      	ldr	r2, [pc, #68]	; (800ab18 <MX_DMA_Init+0x50>)
 800aad4:	f043 0304 	orr.w	r3, r3, #4
 800aad8:	6493      	str	r3, [r2, #72]	; 0x48
 800aada:	4b0f      	ldr	r3, [pc, #60]	; (800ab18 <MX_DMA_Init+0x50>)
 800aadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aade:	f003 0304 	and.w	r3, r3, #4
 800aae2:	607b      	str	r3, [r7, #4]
 800aae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800aae6:	4b0c      	ldr	r3, [pc, #48]	; (800ab18 <MX_DMA_Init+0x50>)
 800aae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaea:	4a0b      	ldr	r2, [pc, #44]	; (800ab18 <MX_DMA_Init+0x50>)
 800aaec:	f043 0301 	orr.w	r3, r3, #1
 800aaf0:	6493      	str	r3, [r2, #72]	; 0x48
 800aaf2:	4b09      	ldr	r3, [pc, #36]	; (800ab18 <MX_DMA_Init+0x50>)
 800aaf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	603b      	str	r3, [r7, #0]
 800aafc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800aafe:	2200      	movs	r2, #0
 800ab00:	2105      	movs	r1, #5
 800ab02:	200b      	movs	r0, #11
 800ab04:	f7f6 fb40 	bl	8001188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800ab08:	200b      	movs	r0, #11
 800ab0a:	f7f6 fb59 	bl	80011c0 <HAL_NVIC_EnableIRQ>

}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	40021000 	.word	0x40021000

0800ab1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab22:	f107 030c 	add.w	r3, r7, #12
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	605a      	str	r2, [r3, #4]
 800ab2c:	609a      	str	r2, [r3, #8]
 800ab2e:	60da      	str	r2, [r3, #12]
 800ab30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab32:	4b24      	ldr	r3, [pc, #144]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab36:	4a23      	ldr	r2, [pc, #140]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab38:	f043 0304 	orr.w	r3, r3, #4
 800ab3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab3e:	4b21      	ldr	r3, [pc, #132]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab42:	f003 0304 	and.w	r3, r3, #4
 800ab46:	60bb      	str	r3, [r7, #8]
 800ab48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab4a:	4b1e      	ldr	r3, [pc, #120]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4e:	4a1d      	ldr	r2, [pc, #116]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab50:	f043 0301 	orr.w	r3, r3, #1
 800ab54:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab56:	4b1b      	ldr	r3, [pc, #108]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	607b      	str	r3, [r7, #4]
 800ab60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab62:	4b18      	ldr	r3, [pc, #96]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab66:	4a17      	ldr	r2, [pc, #92]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab68:	f043 0302 	orr.w	r3, r3, #2
 800ab6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab6e:	4b15      	ldr	r3, [pc, #84]	; (800abc4 <MX_GPIO_Init+0xa8>)
 800ab70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2104      	movs	r1, #4
 800ab7e:	4812      	ldr	r0, [pc, #72]	; (800abc8 <MX_GPIO_Init+0xac>)
 800ab80:	f7f7 fba8 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800ab84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ab8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ab8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab90:	2300      	movs	r3, #0
 800ab92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800ab94:	f107 030c 	add.w	r3, r7, #12
 800ab98:	4619      	mov	r1, r3
 800ab9a:	480c      	ldr	r0, [pc, #48]	; (800abcc <MX_GPIO_Init+0xb0>)
 800ab9c:	f7f7 fa08 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 800aba0:	2304      	movs	r3, #4
 800aba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aba4:	2301      	movs	r3, #1
 800aba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abac:	2300      	movs	r3, #0
 800abae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 800abb0:	f107 030c 	add.w	r3, r7, #12
 800abb4:	4619      	mov	r1, r3
 800abb6:	4804      	ldr	r0, [pc, #16]	; (800abc8 <MX_GPIO_Init+0xac>)
 800abb8:	f7f7 f9fa 	bl	8001fb0 <HAL_GPIO_Init>

}
 800abbc:	bf00      	nop
 800abbe:	3720      	adds	r7, #32
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	40021000 	.word	0x40021000
 800abc8:	48000400 	.word	0x48000400
 800abcc:	48000800 	.word	0x48000800

0800abd0 <push_input_buffer>:

/* USER CODE BEGIN 4 */
void push_input_buffer(game_input_t input) {
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	71fb      	strb	r3, [r7, #7]
	// Can't lock the queue, don't need one since this is called by an interrupt
	input_buffer[buffer_push] = input;
 800abda:	4b0d      	ldr	r3, [pc, #52]	; (800ac10 <push_input_buffer+0x40>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	490d      	ldr	r1, [pc, #52]	; (800ac14 <push_input_buffer+0x44>)
 800abe0:	79fa      	ldrb	r2, [r7, #7]
 800abe2:	54ca      	strb	r2, [r1, r3]
	buffer_push = (buffer_push + 1) % INPUT_BUFFER_SIZE;
 800abe4:	4b0a      	ldr	r3, [pc, #40]	; (800ac10 <push_input_buffer+0x40>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	1c59      	adds	r1, r3, #1
 800abea:	4b0b      	ldr	r3, [pc, #44]	; (800ac18 <push_input_buffer+0x48>)
 800abec:	fb83 2301 	smull	r2, r3, r3, r1
 800abf0:	105a      	asrs	r2, r3, #1
 800abf2:	17cb      	asrs	r3, r1, #31
 800abf4:	1ad2      	subs	r2, r2, r3
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	1aca      	subs	r2, r1, r3
 800abfe:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <push_input_buffer+0x40>)
 800ac00:	601a      	str	r2, [r3, #0]
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	20002008 	.word	0x20002008
 800ac14:	20002188 	.word	0x20002188
 800ac18:	66666667 	.word	0x66666667

0800ac1c <pop_input_buffer>:

game_input_t pop_input_buffer() {
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
	if(buffer_pop == buffer_push) {
 800ac22:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <pop_input_buffer+0x4c>)
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	4b11      	ldr	r3, [pc, #68]	; (800ac6c <pop_input_buffer+0x50>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d101      	bne.n	800ac32 <pop_input_buffer+0x16>
		return INPUT_ERROR;
 800ac2e:	2306      	movs	r3, #6
 800ac30:	e014      	b.n	800ac5c <pop_input_buffer+0x40>
	}
	game_input_t ret = input_buffer[buffer_pop];
 800ac32:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <pop_input_buffer+0x4c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a0e      	ldr	r2, [pc, #56]	; (800ac70 <pop_input_buffer+0x54>)
 800ac38:	5cd3      	ldrb	r3, [r2, r3]
 800ac3a:	71fb      	strb	r3, [r7, #7]
	buffer_pop = (buffer_pop + 1) % INPUT_BUFFER_SIZE;
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <pop_input_buffer+0x4c>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	1c59      	adds	r1, r3, #1
 800ac42:	4b0c      	ldr	r3, [pc, #48]	; (800ac74 <pop_input_buffer+0x58>)
 800ac44:	fb83 2301 	smull	r2, r3, r3, r1
 800ac48:	105a      	asrs	r2, r3, #1
 800ac4a:	17cb      	asrs	r3, r1, #31
 800ac4c:	1ad2      	subs	r2, r2, r3
 800ac4e:	4613      	mov	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	1aca      	subs	r2, r1, r3
 800ac56:	4b04      	ldr	r3, [pc, #16]	; (800ac68 <pop_input_buffer+0x4c>)
 800ac58:	601a      	str	r2, [r3, #0]
	return ret;
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20002004 	.word	0x20002004
 800ac6c:	20002008 	.word	0x20002008
 800ac70:	20002188 	.word	0x20002188
 800ac74:	66666667 	.word	0x66666667

0800ac78 <process_user_input>:



game_input_t process_user_input(Window * window) {
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
    game_input_t c = pop_input_buffer();
 800ac80:	f7ff ffcc 	bl	800ac1c <pop_input_buffer>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]
    while(c == INPUT_ERROR) c = pop_input_buffer();
 800ac88:	e003      	b.n	800ac92 <process_user_input+0x1a>
 800ac8a:	f7ff ffc7 	bl	800ac1c <pop_input_buffer>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73fb      	strb	r3, [r7, #15]
 800ac92:	7bfb      	ldrb	r3, [r7, #15]
 800ac94:	2b06      	cmp	r3, #6
 800ac96:	d0f8      	beq.n	800ac8a <process_user_input+0x12>
    return c;
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	switch (((huart)->Instance)->RDR) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	2b73      	cmp	r3, #115	; 0x73
 800acb6:	dc4a      	bgt.n	800ad4e <HAL_UART_RxCpltCallback+0xaa>
 800acb8:	2b61      	cmp	r3, #97	; 0x61
 800acba:	da04      	bge.n	800acc6 <HAL_UART_RxCpltCallback+0x22>
 800acbc:	2b20      	cmp	r3, #32
 800acbe:	d043      	beq.n	800ad48 <HAL_UART_RxCpltCallback+0xa4>
 800acc0:	2b3b      	cmp	r3, #59	; 0x3b
 800acc2:	d039      	beq.n	800ad38 <HAL_UART_RxCpltCallback+0x94>
		push_input_buffer(DOWN);
		break;
	case 32: // space
		push_input_buffer(TOGGLEPAUSE);
	default:
		break;
 800acc4:	e043      	b.n	800ad4e <HAL_UART_RxCpltCallback+0xaa>
 800acc6:	3b61      	subs	r3, #97	; 0x61
 800acc8:	2b12      	cmp	r3, #18
 800acca:	d840      	bhi.n	800ad4e <HAL_UART_RxCpltCallback+0xaa>
 800accc:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <HAL_UART_RxCpltCallback+0x30>)
 800acce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd2:	bf00      	nop
 800acd4:	0800ad21 	.word	0x0800ad21
 800acd8:	0800ad4f 	.word	0x0800ad4f
 800acdc:	0800ad4f 	.word	0x0800ad4f
 800ace0:	0800ad29 	.word	0x0800ad29
 800ace4:	0800ad4f 	.word	0x0800ad4f
 800ace8:	0800ad4f 	.word	0x0800ad4f
 800acec:	0800ad4f 	.word	0x0800ad4f
 800acf0:	0800ad4f 	.word	0x0800ad4f
 800acf4:	0800ad4f 	.word	0x0800ad4f
 800acf8:	0800ad4f 	.word	0x0800ad4f
 800acfc:	0800ad31 	.word	0x0800ad31
 800ad00:	0800ad4f 	.word	0x0800ad4f
 800ad04:	0800ad4f 	.word	0x0800ad4f
 800ad08:	0800ad4f 	.word	0x0800ad4f
 800ad0c:	0800ad4f 	.word	0x0800ad4f
 800ad10:	0800ad4f 	.word	0x0800ad4f
 800ad14:	0800ad4f 	.word	0x0800ad4f
 800ad18:	0800ad4f 	.word	0x0800ad4f
 800ad1c:	0800ad41 	.word	0x0800ad41
		push_input_buffer(LEFT);
 800ad20:	2003      	movs	r0, #3
 800ad22:	f7ff ff55 	bl	800abd0 <push_input_buffer>
		break;
 800ad26:	e013      	b.n	800ad50 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(RIGHT);
 800ad28:	2004      	movs	r0, #4
 800ad2a:	f7ff ff51 	bl	800abd0 <push_input_buffer>
		break;
 800ad2e:	e00f      	b.n	800ad50 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(CCW);
 800ad30:	2002      	movs	r0, #2
 800ad32:	f7ff ff4d 	bl	800abd0 <push_input_buffer>
		break;
 800ad36:	e00b      	b.n	800ad50 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(CW);
 800ad38:	2001      	movs	r0, #1
 800ad3a:	f7ff ff49 	bl	800abd0 <push_input_buffer>
		break;
 800ad3e:	e007      	b.n	800ad50 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(DOWN);
 800ad40:	2000      	movs	r0, #0
 800ad42:	f7ff ff45 	bl	800abd0 <push_input_buffer>
		break;
 800ad46:	e003      	b.n	800ad50 <HAL_UART_RxCpltCallback+0xac>
		push_input_buffer(TOGGLEPAUSE);
 800ad48:	2005      	movs	r0, #5
 800ad4a:	f7ff ff41 	bl	800abd0 <push_input_buffer>
		break;
 800ad4e:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) in_buf, 1);
 800ad50:	2201      	movs	r2, #1
 800ad52:	4904      	ldr	r1, [pc, #16]	; (800ad64 <HAL_UART_RxCpltCallback+0xc0>)
 800ad54:	4804      	ldr	r0, [pc, #16]	; (800ad68 <HAL_UART_RxCpltCallback+0xc4>)
 800ad56:	f7fa fbd5 	bl	8005504 <HAL_UART_Receive_IT>
}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	200005d4 	.word	0x200005d4
 800ad68:	20002190 	.word	0x20002190

0800ad6c <updateGameLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_updateGameLogic */
void updateGameLogic(void *argument)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Start the Game
	game_start(&window, INPUT_ERROR);
 800ad74:	2106      	movs	r1, #6
 800ad76:	481c      	ldr	r0, [pc, #112]	; (800ade8 <updateGameLogic+0x7c>)
 800ad78:	f7ff fa7a 	bl	800a270 <game_start>
	swap_buffer(&window);
 800ad7c:	481a      	ldr	r0, [pc, #104]	; (800ade8 <updateGameLogic+0x7c>)
 800ad7e:	f7ff faed 	bl	800a35c <swap_buffer>

	/* Infinite loop */
	for(;;) {
		//osDelay(1);
	    // process button presses (update game state)
		game_input_t event = process_user_input(&window);
 800ad82:	4819      	ldr	r0, [pc, #100]	; (800ade8 <updateGameLogic+0x7c>)
 800ad84:	f7ff ff78 	bl	800ac78 <process_user_input>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73fb      	strb	r3, [r7, #15]

		switch (window.game.state) {
 800ad8c:	4b16      	ldr	r3, [pc, #88]	; (800ade8 <updateGameLogic+0x7c>)
 800ad8e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800ad92:	33d0      	adds	r3, #208	; 0xd0
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b03      	cmp	r3, #3
 800ad98:	d822      	bhi.n	800ade0 <updateGameLogic+0x74>
 800ad9a:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <updateGameLogic+0x34>)
 800ad9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada0:	0800adb1 	.word	0x0800adb1
 800ada4:	0800adbd 	.word	0x0800adbd
 800ada8:	0800adc9 	.word	0x0800adc9
 800adac:	0800add5 	.word	0x0800add5
		  case Start:
			  game_start(&window, event);
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	4619      	mov	r1, r3
 800adb4:	480c      	ldr	r0, [pc, #48]	; (800ade8 <updateGameLogic+0x7c>)
 800adb6:	f7ff fa5b 	bl	800a270 <game_start>
		  break;
 800adba:	e011      	b.n	800ade0 <updateGameLogic+0x74>
		  case Playing:
			  // update the game state, and draw to frame buffer
			  game_playing(&window, event);
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	4619      	mov	r1, r3
 800adc0:	4809      	ldr	r0, [pc, #36]	; (800ade8 <updateGameLogic+0x7c>)
 800adc2:	f7ff f953 	bl	800a06c <game_playing>

		  break;
 800adc6:	e00b      	b.n	800ade0 <updateGameLogic+0x74>
		  case Paused:
			  game_paused(&window, event);
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
 800adca:	4619      	mov	r1, r3
 800adcc:	4806      	ldr	r0, [pc, #24]	; (800ade8 <updateGameLogic+0x7c>)
 800adce:	f7ff fa0d 	bl	800a1ec <game_paused>
		  break;
 800add2:	e005      	b.n	800ade0 <updateGameLogic+0x74>
		  case Ended:
			  game_ended(&window, event);
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4619      	mov	r1, r3
 800add8:	4803      	ldr	r0, [pc, #12]	; (800ade8 <updateGameLogic+0x7c>)
 800adda:	f7ff fa9d 	bl	800a318 <game_ended>
		  break;
 800adde:	bf00      	nop
		}
		swap_buffer(&window);
 800ade0:	4801      	ldr	r0, [pc, #4]	; (800ade8 <updateGameLogic+0x7c>)
 800ade2:	f7ff fabb 	bl	800a35c <swap_buffer>
	for(;;) {
 800ade6:	e7cc      	b.n	800ad82 <updateGameLogic+0x16>
 800ade8:	200022d0 	.word	0x200022d0

0800adec <soundController>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_soundController */
void soundController(void *argument)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN soundController */
	enum consoleState last_state = Start;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;) {
	osDelay(200);
 800adf8:	20c8      	movs	r0, #200	; 0xc8
 800adfa:	f7fc fc07 	bl	800760c <osDelay>
	switch (window.game.state) {
 800adfe:	4b23      	ldr	r3, [pc, #140]	; (800ae8c <soundController+0xa0>)
 800ae00:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800ae04:	33d0      	adds	r3, #208	; 0xd0
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d8f5      	bhi.n	800adf8 <soundController+0xc>
 800ae0c:	a201      	add	r2, pc, #4	; (adr r2, 800ae14 <soundController+0x28>)
 800ae0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae12:	bf00      	nop
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae31 	.word	0x0800ae31
 800ae1c:	0800ae73 	.word	0x0800ae73
 800ae20:	0800ae7f 	.word	0x0800ae7f
	    // Update sound playing based on State
		case Start:
			playing_snd = 0;
 800ae24:	4b1a      	ldr	r3, [pc, #104]	; (800ae90 <soundController+0xa4>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	601a      	str	r2, [r3, #0]
			last_state = Start;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
		break;
 800ae2e:	e02c      	b.n	800ae8a <soundController+0x9e>
		case Playing:
			if (!playing_snd && last_state == Start) {
 800ae30:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <soundController+0xa4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d116      	bne.n	800ae66 <soundController+0x7a>
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d113      	bne.n	800ae66 <soundController+0x7a>
				// For when special effects happen
				full_snd_data = (uint16_t*) tetris_theme;
 800ae3e:	4b15      	ldr	r3, [pc, #84]	; (800ae94 <soundController+0xa8>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a15      	ldr	r2, [pc, #84]	; (800ae98 <soundController+0xac>)
 800ae44:	6013      	str	r3, [r2, #0]
				full_snd_data_size = THEME_SOUND_SIZE;
 800ae46:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <soundController+0xb0>)
 800ae48:	4a15      	ldr	r2, [pc, #84]	; (800aea0 <soundController+0xb4>)
 800ae4a:	601a      	str	r2, [r3, #0]
				full_snd_data_offset = 0;
 800ae4c:	4b15      	ldr	r3, [pc, #84]	; (800aea4 <soundController+0xb8>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]

				snd_data_offset = 0;
 800ae52:	4b15      	ldr	r3, [pc, #84]	; (800aea8 <soundController+0xbc>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]
				snd_data_size = THEME_SOUND_SIZE;
 800ae58:	4b14      	ldr	r3, [pc, #80]	; (800aeac <soundController+0xc0>)
 800ae5a:	4a11      	ldr	r2, [pc, #68]	; (800aea0 <soundController+0xb4>)
 800ae5c:	601a      	str	r2, [r3, #0]
				snd_wave_data = (uint16_t*) tetris_theme;
 800ae5e:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <soundController+0xa8>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a13      	ldr	r2, [pc, #76]	; (800aeb0 <soundController+0xc4>)
 800ae64:	6013      	str	r3, [r2, #0]
			}
			playing_snd = 1;
 800ae66:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <soundController+0xa4>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	601a      	str	r2, [r3, #0]
			last_state = Playing;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	73fb      	strb	r3, [r7, #15]
		break;
 800ae70:	e00b      	b.n	800ae8a <soundController+0x9e>
		case Paused:
			playing_snd = 0;
 800ae72:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <soundController+0xa4>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	601a      	str	r2, [r3, #0]
			last_state = Paused;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	73fb      	strb	r3, [r7, #15]
		break;
 800ae7c:	e005      	b.n	800ae8a <soundController+0x9e>
		case Ended:
			playing_snd = 0;
 800ae7e:	4b04      	ldr	r3, [pc, #16]	; (800ae90 <soundController+0xa4>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]
			last_state = Ended;
 800ae84:	2303      	movs	r3, #3
 800ae86:	73fb      	strb	r3, [r7, #15]
		break;
 800ae88:	bf00      	nop
	osDelay(200);
 800ae8a:	e7b5      	b.n	800adf8 <soundController+0xc>
 800ae8c:	200022d0 	.word	0x200022d0
 800ae90:	20002010 	.word	0x20002010
 800ae94:	200005d8 	.word	0x200005d8
 800ae98:	20002180 	.word	0x20002180
 800ae9c:	20002184 	.word	0x20002184
 800aea0:	00018ce0 	.word	0x00018ce0
 800aea4:	2000217c 	.word	0x2000217c
 800aea8:	20002114 	.word	0x20002114
 800aeac:	20002064 	.word	0x20002064
 800aeb0:	20002178 	.word	0x20002178

0800aeb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a38      	ldr	r2, [pc, #224]	; (800afa4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d101      	bne.n	800aeca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800aec6:	f7f6 f863 	bl	8000f90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a35      	ldr	r2, [pc, #212]	; (800afa4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d10f      	bne.n	800aef4 <HAL_TIM_PeriodElapsedCallback+0x40>
    if (HAL_GetTick() % fall_rate == 0) {
 800aed4:	f7f6 f870 	bl	8000fb8 <HAL_GetTick>
 800aed8:	4603      	mov	r3, r0
 800aeda:	4a33      	ldr	r2, [pc, #204]	; (800afa8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800aedc:	6812      	ldr	r2, [r2, #0]
 800aede:	fbb3 f1f2 	udiv	r1, r3, r2
 800aee2:	fb02 f201 	mul.w	r2, r2, r1
 800aee6:	1a9b      	subs	r3, r3, r2
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d156      	bne.n	800af9a <HAL_TIM_PeriodElapsedCallback+0xe6>
    	push_input_buffer(DOWN);
 800aeec:	2000      	movs	r0, #0
 800aeee:	f7ff fe6f 	bl	800abd0 <push_input_buffer>
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, snd_wave_data[snd_data_offset] );
	  }

  }
  /* USER CODE END Callback 1 */
}
 800aef2:	e052      	b.n	800af9a <HAL_TIM_PeriodElapsedCallback+0xe6>
  } else if (htim->Instance == TIM1) {
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a2c      	ldr	r2, [pc, #176]	; (800afac <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d11e      	bne.n	800af3c <HAL_TIM_PeriodElapsedCallback+0x88>
	vert_count = (vert_count + 1) % 449;
 800aefe:	4b2c      	ldr	r3, [pc, #176]	; (800afb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	1c59      	adds	r1, r3, #1
 800af04:	4b2b      	ldr	r3, [pc, #172]	; (800afb4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800af06:	fb83 2301 	smull	r2, r3, r3, r1
 800af0a:	440b      	add	r3, r1
 800af0c:	121a      	asrs	r2, r3, #8
 800af0e:	17cb      	asrs	r3, r1, #31
 800af10:	1ad2      	subs	r2, r2, r3
 800af12:	4613      	mov	r3, r2
 800af14:	00db      	lsls	r3, r3, #3
 800af16:	1a9b      	subs	r3, r3, r2
 800af18:	019b      	lsls	r3, r3, #6
 800af1a:	4413      	add	r3, r2
 800af1c:	1aca      	subs	r2, r1, r3
 800af1e:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800af20:	601a      	str	r2, [r3, #0]
	if(vert_count >= 447) {
 800af22:	4b23      	ldr	r3, [pc, #140]	; (800afb0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f5b3 7fdf 	cmp.w	r3, #446	; 0x1be
 800af2a:	dd03      	ble.n	800af34 <HAL_TIM_PeriodElapsedCallback+0x80>
		Vert_Synch_GPIO_Port->BRR = (uint32_t)Vert_Synch_Pin;
 800af2c:	4b22      	ldr	r3, [pc, #136]	; (800afb8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800af2e:	2204      	movs	r2, #4
 800af30:	629a      	str	r2, [r3, #40]	; 0x28
}
 800af32:	e032      	b.n	800af9a <HAL_TIM_PeriodElapsedCallback+0xe6>
		Vert_Synch_GPIO_Port->BSRR = (uint32_t)Vert_Synch_Pin;
 800af34:	4b20      	ldr	r3, [pc, #128]	; (800afb8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800af36:	2204      	movs	r2, #4
 800af38:	619a      	str	r2, [r3, #24]
}
 800af3a:	e02e      	b.n	800af9a <HAL_TIM_PeriodElapsedCallback+0xe6>
  } else if (htim->Instance == TIM15) {
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a1e      	ldr	r2, [pc, #120]	; (800afbc <HAL_TIM_PeriodElapsedCallback+0x108>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d129      	bne.n	800af9a <HAL_TIM_PeriodElapsedCallback+0xe6>
	  if(playing_snd) {
 800af46:	4b1e      	ldr	r3, [pc, #120]	; (800afc0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d025      	beq.n	800af9a <HAL_TIM_PeriodElapsedCallback+0xe6>
		snd_data_offset++;
 800af4e:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3301      	adds	r3, #1
 800af54:	4a1b      	ldr	r2, [pc, #108]	; (800afc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800af56:	6013      	str	r3, [r2, #0]
		if (snd_data_offset >= snd_data_size ) {
 800af58:	4b1a      	ldr	r3, [pc, #104]	; (800afc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	4b1a      	ldr	r3, [pc, #104]	; (800afc8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	429a      	cmp	r2, r3
 800af62:	d30e      	bcc.n	800af82 <HAL_TIM_PeriodElapsedCallback+0xce>
			snd_data_offset = full_snd_data_offset;
 800af64:	4b19      	ldr	r3, [pc, #100]	; (800afcc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a16      	ldr	r2, [pc, #88]	; (800afc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800af6a:	6013      	str	r3, [r2, #0]
			full_snd_data_offset = 0;
 800af6c:	4b17      	ldr	r3, [pc, #92]	; (800afcc <HAL_TIM_PeriodElapsedCallback+0x118>)
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
			snd_wave_data = full_snd_data;
 800af72:	4b17      	ldr	r3, [pc, #92]	; (800afd0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a17      	ldr	r2, [pc, #92]	; (800afd4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800af78:	6013      	str	r3, [r2, #0]
			snd_data_size = full_snd_data_size;
 800af7a:	4b17      	ldr	r3, [pc, #92]	; (800afd8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a12      	ldr	r2, [pc, #72]	; (800afc8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800af80:	6013      	str	r3, [r2, #0]
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, snd_wave_data[snd_data_offset] );
 800af82:	4b14      	ldr	r3, [pc, #80]	; (800afd4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	4413      	add	r3, r2
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	2200      	movs	r2, #0
 800af92:	2110      	movs	r1, #16
 800af94:	4811      	ldr	r0, [pc, #68]	; (800afdc <HAL_TIM_PeriodElapsedCallback+0x128>)
 800af96:	f7f6 fabb 	bl	8001510 <HAL_DAC_SetValue>
}
 800af9a:	bf00      	nop
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	40001000 	.word	0x40001000
 800afa8:	200005d0 	.word	0x200005d0
 800afac:	40012c00 	.word	0x40012c00
 800afb0:	2000200c 	.word	0x2000200c
 800afb4:	91f5bcb9 	.word	0x91f5bcb9
 800afb8:	48000400 	.word	0x48000400
 800afbc:	40014000 	.word	0x40014000
 800afc0:	20002010 	.word	0x20002010
 800afc4:	20002114 	.word	0x20002114
 800afc8:	20002064 	.word	0x20002064
 800afcc:	2000217c 	.word	0x2000217c
 800afd0:	20002180 	.word	0x20002180
 800afd4:	20002178 	.word	0x20002178
 800afd8:	20002184 	.word	0x20002184
 800afdc:	200020b4 	.word	0x200020b4

0800afe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800afe0:	b480      	push	{r7}
 800afe2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800afe4:	b672      	cpsid	i
}
 800afe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800afe8:	e7fe      	b.n	800afe8 <Error_Handler+0x8>
	...

0800afec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aff2:	4b11      	ldr	r3, [pc, #68]	; (800b038 <HAL_MspInit+0x4c>)
 800aff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff6:	4a10      	ldr	r2, [pc, #64]	; (800b038 <HAL_MspInit+0x4c>)
 800aff8:	f043 0301 	orr.w	r3, r3, #1
 800affc:	6613      	str	r3, [r2, #96]	; 0x60
 800affe:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <HAL_MspInit+0x4c>)
 800b000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	607b      	str	r3, [r7, #4]
 800b008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <HAL_MspInit+0x4c>)
 800b00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b00e:	4a0a      	ldr	r2, [pc, #40]	; (800b038 <HAL_MspInit+0x4c>)
 800b010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b014:	6593      	str	r3, [r2, #88]	; 0x58
 800b016:	4b08      	ldr	r3, [pc, #32]	; (800b038 <HAL_MspInit+0x4c>)
 800b018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b01a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b022:	2200      	movs	r2, #0
 800b024:	210f      	movs	r1, #15
 800b026:	f06f 0001 	mvn.w	r0, #1
 800b02a:	f7f6 f8ad 	bl	8001188 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b02e:	bf00      	nop
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	40021000 	.word	0x40021000

0800b03c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08a      	sub	sp, #40	; 0x28
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b044:	f107 0314 	add.w	r3, r7, #20
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	605a      	str	r2, [r3, #4]
 800b04e:	609a      	str	r2, [r3, #8]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a2e      	ldr	r2, [pc, #184]	; (800b114 <HAL_DAC_MspInit+0xd8>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d156      	bne.n	800b10c <HAL_DAC_MspInit+0xd0>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800b05e:	4b2e      	ldr	r3, [pc, #184]	; (800b118 <HAL_DAC_MspInit+0xdc>)
 800b060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b062:	4a2d      	ldr	r2, [pc, #180]	; (800b118 <HAL_DAC_MspInit+0xdc>)
 800b064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b068:	6593      	str	r3, [r2, #88]	; 0x58
 800b06a:	4b2b      	ldr	r3, [pc, #172]	; (800b118 <HAL_DAC_MspInit+0xdc>)
 800b06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b06e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b072:	613b      	str	r3, [r7, #16]
 800b074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b076:	4b28      	ldr	r3, [pc, #160]	; (800b118 <HAL_DAC_MspInit+0xdc>)
 800b078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b07a:	4a27      	ldr	r2, [pc, #156]	; (800b118 <HAL_DAC_MspInit+0xdc>)
 800b07c:	f043 0301 	orr.w	r3, r3, #1
 800b080:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b082:	4b25      	ldr	r3, [pc, #148]	; (800b118 <HAL_DAC_MspInit+0xdc>)
 800b084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	60fb      	str	r3, [r7, #12]
 800b08c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b08e:	2330      	movs	r3, #48	; 0x30
 800b090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b092:	2303      	movs	r3, #3
 800b094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b096:	2300      	movs	r3, #0
 800b098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b09a:	f107 0314 	add.w	r3, r7, #20
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b0a4:	f7f6 ff84 	bl	8001fb0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800b0a8:	4b1c      	ldr	r3, [pc, #112]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0aa:	4a1d      	ldr	r2, [pc, #116]	; (800b120 <HAL_DAC_MspInit+0xe4>)
 800b0ac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800b0ae:	4b1b      	ldr	r3, [pc, #108]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0b0:	2206      	movs	r2, #6
 800b0b2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b0b4:	4b19      	ldr	r3, [pc, #100]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0b6:	2210      	movs	r2, #16
 800b0b8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b0ba:	4b18      	ldr	r3, [pc, #96]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800b0c0:	4b16      	ldr	r3, [pc, #88]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0c2:	2280      	movs	r2, #128	; 0x80
 800b0c4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0c6:	4b15      	ldr	r3, [pc, #84]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0cc:	4b13      	ldr	r3, [pc, #76]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800b0d2:	4b12      	ldr	r3, [pc, #72]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b0d8:	4b10      	ldr	r3, [pc, #64]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b0de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800b0e0:	480e      	ldr	r0, [pc, #56]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0e2:	f7f6 fc37 	bl	8001954 <HAL_DMA_Init>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 800b0ec:	f7ff ff78 	bl	800afe0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0f4:	609a      	str	r2, [r3, #8]
 800b0f6:	4a09      	ldr	r2, [pc, #36]	; (800b11c <HAL_DAC_MspInit+0xe0>)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	2105      	movs	r1, #5
 800b100:	2036      	movs	r0, #54	; 0x36
 800b102:	f7f6 f841 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b106:	2036      	movs	r0, #54	; 0x36
 800b108:	f7f6 f85a 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800b10c:	bf00      	nop
 800b10e:	3728      	adds	r7, #40	; 0x28
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	40007400 	.word	0x40007400
 800b118:	40021000 	.word	0x40021000
 800b11c:	20002118 	.word	0x20002118
 800b120:	40020008 	.word	0x40020008

0800b124 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b0a8      	sub	sp, #160	; 0xa0
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b12c:	f107 030c 	add.w	r3, r7, #12
 800b130:	2294      	movs	r2, #148	; 0x94
 800b132:	2100      	movs	r1, #0
 800b134:	4618      	mov	r0, r3
 800b136:	f001 fbd1 	bl	800c8dc <memset>
  if(hrng->Instance==RNG)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a19      	ldr	r2, [pc, #100]	; (800b1a4 <HAL_RNG_MspInit+0x80>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d12b      	bne.n	800b19c <HAL_RNG_MspInit+0x78>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800b144:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b148:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800b14a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b14e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b152:	2301      	movs	r3, #1
 800b154:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b156:	2301      	movs	r3, #1
 800b158:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800b15a:	2310      	movs	r3, #16
 800b15c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800b15e:	2302      	movs	r3, #2
 800b160:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b162:	2302      	movs	r3, #2
 800b164:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b166:	2302      	movs	r3, #2
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b16a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b16e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b170:	f107 030c 	add.w	r3, r7, #12
 800b174:	4618      	mov	r0, r3
 800b176:	f7f8 f893 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 800b180:	f7ff ff2e 	bl	800afe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800b184:	4b08      	ldr	r3, [pc, #32]	; (800b1a8 <HAL_RNG_MspInit+0x84>)
 800b186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b188:	4a07      	ldr	r2, [pc, #28]	; (800b1a8 <HAL_RNG_MspInit+0x84>)
 800b18a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b18e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b190:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <HAL_RNG_MspInit+0x84>)
 800b192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b198:	60bb      	str	r3, [r7, #8]
 800b19a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800b19c:	bf00      	nop
 800b19e:	37a0      	adds	r7, #160	; 0xa0
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	50060800 	.word	0x50060800
 800b1a8:	40021000 	.word	0x40021000

0800b1ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a30      	ldr	r2, [pc, #192]	; (800b27c <HAL_TIM_Base_MspInit+0xd0>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d11c      	bne.n	800b1f8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b1be:	4b30      	ldr	r3, [pc, #192]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b1c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1c2:	4a2f      	ldr	r2, [pc, #188]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b1c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1c8:	6613      	str	r3, [r2, #96]	; 0x60
 800b1ca:	4b2d      	ldr	r3, [pc, #180]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b1cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 7, 0);
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2107      	movs	r1, #7
 800b1da:	2018      	movs	r0, #24
 800b1dc:	f7f5 ffd4 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800b1e0:	2018      	movs	r0, #24
 800b1e2:	f7f5 ffed 	bl	80011c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2105      	movs	r1, #5
 800b1ea:	2019      	movs	r0, #25
 800b1ec:	f7f5 ffcc 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b1f0:	2019      	movs	r0, #25
 800b1f2:	f7f5 ffe5 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800b1f6:	e03c      	b.n	800b272 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b200:	d10c      	bne.n	800b21c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b202:	4b1f      	ldr	r3, [pc, #124]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b206:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b208:	f043 0301 	orr.w	r3, r3, #1
 800b20c:	6593      	str	r3, [r2, #88]	; 0x58
 800b20e:	4b1c      	ldr	r3, [pc, #112]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	613b      	str	r3, [r7, #16]
 800b218:	693b      	ldr	r3, [r7, #16]
}
 800b21a:	e02a      	b.n	800b272 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a18      	ldr	r2, [pc, #96]	; (800b284 <HAL_TIM_Base_MspInit+0xd8>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d10c      	bne.n	800b240 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b226:	4b16      	ldr	r3, [pc, #88]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b22a:	4a15      	ldr	r2, [pc, #84]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b22c:	f043 0304 	orr.w	r3, r3, #4
 800b230:	6593      	str	r3, [r2, #88]	; 0x58
 800b232:	4b13      	ldr	r3, [pc, #76]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b236:	f003 0304 	and.w	r3, r3, #4
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
}
 800b23e:	e018      	b.n	800b272 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a10      	ldr	r2, [pc, #64]	; (800b288 <HAL_TIM_Base_MspInit+0xdc>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d113      	bne.n	800b272 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800b24a:	4b0d      	ldr	r3, [pc, #52]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b24c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b24e:	4a0c      	ldr	r2, [pc, #48]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b254:	6613      	str	r3, [r2, #96]	; 0x60
 800b256:	4b0a      	ldr	r3, [pc, #40]	; (800b280 <HAL_TIM_Base_MspInit+0xd4>)
 800b258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b25a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b25e:	60bb      	str	r3, [r7, #8]
 800b260:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 7, 0);
 800b262:	2200      	movs	r2, #0
 800b264:	2107      	movs	r1, #7
 800b266:	2018      	movs	r0, #24
 800b268:	f7f5 ff8e 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800b26c:	2018      	movs	r0, #24
 800b26e:	f7f5 ffa7 	bl	80011c0 <HAL_NVIC_EnableIRQ>
}
 800b272:	bf00      	nop
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	40012c00 	.word	0x40012c00
 800b280:	40021000 	.word	0x40021000
 800b284:	40000800 	.word	0x40000800
 800b288:	40014000 	.word	0x40014000

0800b28c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b294:	f107 030c 	add.w	r3, r7, #12
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	605a      	str	r2, [r3, #4]
 800b29e:	609a      	str	r2, [r3, #8]
 800b2a0:	60da      	str	r2, [r3, #12]
 800b2a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ac:	d11c      	bne.n	800b2e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2ae:	4b10      	ldr	r3, [pc, #64]	; (800b2f0 <HAL_TIM_MspPostInit+0x64>)
 800b2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b2:	4a0f      	ldr	r2, [pc, #60]	; (800b2f0 <HAL_TIM_MspPostInit+0x64>)
 800b2b4:	f043 0301 	orr.w	r3, r3, #1
 800b2b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2ba:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <HAL_TIM_MspPostInit+0x64>)
 800b2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	60bb      	str	r3, [r7, #8]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 800b2da:	f107 030c 	add.w	r3, r7, #12
 800b2de:	4619      	mov	r1, r3
 800b2e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b2e4:	f7f6 fe64 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800b2e8:	bf00      	nop
 800b2ea:	3720      	adds	r7, #32
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	40021000 	.word	0x40021000

0800b2f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b0ae      	sub	sp, #184	; 0xb8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	605a      	str	r2, [r3, #4]
 800b306:	609a      	str	r2, [r3, #8]
 800b308:	60da      	str	r2, [r3, #12]
 800b30a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b30c:	f107 0310 	add.w	r3, r7, #16
 800b310:	2294      	movs	r2, #148	; 0x94
 800b312:	2100      	movs	r1, #0
 800b314:	4618      	mov	r0, r3
 800b316:	f001 fae1 	bl	800c8dc <memset>
  if(huart->Instance==USART1)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a25      	ldr	r2, [pc, #148]	; (800b3b4 <HAL_UART_MspInit+0xc0>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d142      	bne.n	800b3aa <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800b324:	2301      	movs	r3, #1
 800b326:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b328:	2300      	movs	r3, #0
 800b32a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b32c:	f107 0310 	add.w	r3, r7, #16
 800b330:	4618      	mov	r0, r3
 800b332:	f7f7 ffb5 	bl	80032a0 <HAL_RCCEx_PeriphCLKConfig>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800b33c:	f7ff fe50 	bl	800afe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b340:	4b1d      	ldr	r3, [pc, #116]	; (800b3b8 <HAL_UART_MspInit+0xc4>)
 800b342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b344:	4a1c      	ldr	r2, [pc, #112]	; (800b3b8 <HAL_UART_MspInit+0xc4>)
 800b346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b34a:	6613      	str	r3, [r2, #96]	; 0x60
 800b34c:	4b1a      	ldr	r3, [pc, #104]	; (800b3b8 <HAL_UART_MspInit+0xc4>)
 800b34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b358:	4b17      	ldr	r3, [pc, #92]	; (800b3b8 <HAL_UART_MspInit+0xc4>)
 800b35a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35c:	4a16      	ldr	r2, [pc, #88]	; (800b3b8 <HAL_UART_MspInit+0xc4>)
 800b35e:	f043 0302 	orr.w	r3, r3, #2
 800b362:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b364:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <HAL_UART_MspInit+0xc4>)
 800b366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b368:	f003 0302 	and.w	r3, r3, #2
 800b36c:	60bb      	str	r3, [r7, #8]
 800b36e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b370:	23c0      	movs	r3, #192	; 0xc0
 800b372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b376:	2302      	movs	r3, #2
 800b378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b37c:	2300      	movs	r3, #0
 800b37e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b382:	2303      	movs	r3, #3
 800b384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b388:	2307      	movs	r3, #7
 800b38a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b38e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b392:	4619      	mov	r1, r3
 800b394:	4809      	ldr	r0, [pc, #36]	; (800b3bc <HAL_UART_MspInit+0xc8>)
 800b396:	f7f6 fe0b 	bl	8001fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 800b39a:	2200      	movs	r2, #0
 800b39c:	2106      	movs	r1, #6
 800b39e:	2025      	movs	r0, #37	; 0x25
 800b3a0:	f7f5 fef2 	bl	8001188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b3a4:	2025      	movs	r0, #37	; 0x25
 800b3a6:	f7f5 ff0b 	bl	80011c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b3aa:	bf00      	nop
 800b3ac:	37b8      	adds	r7, #184	; 0xb8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	40013800 	.word	0x40013800
 800b3b8:	40021000 	.word	0x40021000
 800b3bc:	48000400 	.word	0x48000400

0800b3c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b08c      	sub	sp, #48	; 0x30
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	6879      	ldr	r1, [r7, #4]
 800b3d4:	2036      	movs	r0, #54	; 0x36
 800b3d6:	f7f5 fed7 	bl	8001188 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b3da:	2036      	movs	r0, #54	; 0x36
 800b3dc:	f7f5 fef0 	bl	80011c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b3e0:	4b1f      	ldr	r3, [pc, #124]	; (800b460 <HAL_InitTick+0xa0>)
 800b3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e4:	4a1e      	ldr	r2, [pc, #120]	; (800b460 <HAL_InitTick+0xa0>)
 800b3e6:	f043 0310 	orr.w	r3, r3, #16
 800b3ea:	6593      	str	r3, [r2, #88]	; 0x58
 800b3ec:	4b1c      	ldr	r3, [pc, #112]	; (800b460 <HAL_InitTick+0xa0>)
 800b3ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f0:	f003 0310 	and.w	r3, r3, #16
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b3f8:	f107 0210 	add.w	r2, r7, #16
 800b3fc:	f107 0314 	add.w	r3, r7, #20
 800b400:	4611      	mov	r1, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f7f7 fe58 	bl	80030b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b408:	f7f7 fe2a 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 800b40c:	4603      	mov	r3, r0
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	4a13      	ldr	r2, [pc, #76]	; (800b464 <HAL_InitTick+0xa4>)
 800b416:	fba2 2303 	umull	r2, r3, r2, r3
 800b41a:	0c9b      	lsrs	r3, r3, #18
 800b41c:	3b01      	subs	r3, #1
 800b41e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b420:	4b11      	ldr	r3, [pc, #68]	; (800b468 <HAL_InitTick+0xa8>)
 800b422:	4a12      	ldr	r2, [pc, #72]	; (800b46c <HAL_InitTick+0xac>)
 800b424:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800b426:	4b10      	ldr	r3, [pc, #64]	; (800b468 <HAL_InitTick+0xa8>)
 800b428:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b42c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b42e:	4a0e      	ldr	r2, [pc, #56]	; (800b468 <HAL_InitTick+0xa8>)
 800b430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b432:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b434:	4b0c      	ldr	r3, [pc, #48]	; (800b468 <HAL_InitTick+0xa8>)
 800b436:	2200      	movs	r2, #0
 800b438:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b43a:	4b0b      	ldr	r3, [pc, #44]	; (800b468 <HAL_InitTick+0xa8>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b440:	4809      	ldr	r0, [pc, #36]	; (800b468 <HAL_InitTick+0xa8>)
 800b442:	f7f8 fca7 	bl	8003d94 <HAL_TIM_Base_Init>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b44c:	4806      	ldr	r0, [pc, #24]	; (800b468 <HAL_InitTick+0xa8>)
 800b44e:	f7f8 fd61 	bl	8003f14 <HAL_TIM_Base_Start_IT>
 800b452:	4603      	mov	r3, r0
 800b454:	e000      	b.n	800b458 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3730      	adds	r7, #48	; 0x30
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	40021000 	.word	0x40021000
 800b464:	431bde83 	.word	0x431bde83
 800b468:	2001a9a8 	.word	0x2001a9a8
 800b46c:	40001000 	.word	0x40001000

0800b470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b470:	b480      	push	{r7}
 800b472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b474:	e7fe      	b.n	800b474 <NMI_Handler+0x4>

0800b476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b476:	b480      	push	{r7}
 800b478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b47a:	e7fe      	b.n	800b47a <HardFault_Handler+0x4>

0800b47c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b480:	e7fe      	b.n	800b480 <MemManage_Handler+0x4>

0800b482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b482:	b480      	push	{r7}
 800b484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b486:	e7fe      	b.n	800b486 <BusFault_Handler+0x4>

0800b488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b48c:	e7fe      	b.n	800b48c <UsageFault_Handler+0x4>

0800b48e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b48e:	b480      	push	{r7}
 800b490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b492:	bf00      	nop
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800b4a0:	4802      	ldr	r0, [pc, #8]	; (800b4ac <DMA1_Channel1_IRQHandler+0x10>)
 800b4a2:	f7f6 fc35 	bl	8001d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b4a6:	bf00      	nop
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20002118 	.word	0x20002118

0800b4b0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b4b4:	4803      	ldr	r0, [pc, #12]	; (800b4c4 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800b4b6:	f7f8 ff05 	bl	80042c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800b4ba:	4803      	ldr	r0, [pc, #12]	; (800b4c8 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800b4bc:	f7f8 ff02 	bl	80042c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800b4c0:	bf00      	nop
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20002224 	.word	0x20002224
 800b4c8:	200020c8 	.word	0x200020c8

0800b4cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b4d0:	4802      	ldr	r0, [pc, #8]	; (800b4dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 800b4d2:	f7f8 fef7 	bl	80042c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800b4d6:	bf00      	nop
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20002224 	.word	0x20002224

0800b4e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b4e4:	4802      	ldr	r0, [pc, #8]	; (800b4f0 <USART1_IRQHandler+0x10>)
 800b4e6:	f7fa f863 	bl	80055b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b4ea:	bf00      	nop
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20002190 	.word	0x20002190

0800b4f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b4f8:	4803      	ldr	r0, [pc, #12]	; (800b508 <TIM6_DAC_IRQHandler+0x14>)
 800b4fa:	f7f8 fee3 	bl	80042c4 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800b4fe:	4803      	ldr	r0, [pc, #12]	; (800b50c <TIM6_DAC_IRQHandler+0x18>)
 800b500:	f7f5 ffac 	bl	800145c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b504:	bf00      	nop
 800b506:	bd80      	pop	{r7, pc}
 800b508:	2001a9a8 	.word	0x2001a9a8
 800b50c:	200020b4 	.word	0x200020b4

0800b510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
	return 1;
 800b514:	2301      	movs	r3, #1
}
 800b516:	4618      	mov	r0, r3
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <_kill>:

int _kill(int pid, int sig)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b52a:	f001 f89d 	bl	800c668 <__errno>
 800b52e:	4603      	mov	r3, r0
 800b530:	2216      	movs	r2, #22
 800b532:	601a      	str	r2, [r3, #0]
	return -1;
 800b534:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <_exit>:

void _exit (int status)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b548:	f04f 31ff 	mov.w	r1, #4294967295
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff ffe7 	bl	800b520 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b552:	e7fe      	b.n	800b552 <_exit+0x12>

0800b554 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b560:	2300      	movs	r3, #0
 800b562:	617b      	str	r3, [r7, #20]
 800b564:	e00a      	b.n	800b57c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b566:	f3af 8000 	nop.w
 800b56a:	4601      	mov	r1, r0
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	60ba      	str	r2, [r7, #8]
 800b572:	b2ca      	uxtb	r2, r1
 800b574:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	3301      	adds	r3, #1
 800b57a:	617b      	str	r3, [r7, #20]
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	429a      	cmp	r2, r3
 800b582:	dbf0      	blt.n	800b566 <_read+0x12>
	}

return len;
 800b584:	687b      	ldr	r3, [r7, #4]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b086      	sub	sp, #24
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b59a:	2300      	movs	r3, #0
 800b59c:	617b      	str	r3, [r7, #20]
 800b59e:	e009      	b.n	800b5b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	60ba      	str	r2, [r7, #8]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	617b      	str	r3, [r7, #20]
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	dbf1      	blt.n	800b5a0 <_write+0x12>
	}
	return len;
 800b5bc:	687b      	ldr	r3, [r7, #4]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <_close>:

int _close(int file)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b083      	sub	sp, #12
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
	return -1;
 800b5ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b083      	sub	sp, #12
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b5ee:	605a      	str	r2, [r3, #4]
	return 0;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <_isatty>:

int _isatty(int file)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
	return 1;
 800b606:	2301      	movs	r3, #1
}
 800b608:	4618      	mov	r0, r3
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
	return 0;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b638:	4a14      	ldr	r2, [pc, #80]	; (800b68c <_sbrk+0x5c>)
 800b63a:	4b15      	ldr	r3, [pc, #84]	; (800b690 <_sbrk+0x60>)
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b644:	4b13      	ldr	r3, [pc, #76]	; (800b694 <_sbrk+0x64>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d102      	bne.n	800b652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b64c:	4b11      	ldr	r3, [pc, #68]	; (800b694 <_sbrk+0x64>)
 800b64e:	4a12      	ldr	r2, [pc, #72]	; (800b698 <_sbrk+0x68>)
 800b650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b652:	4b10      	ldr	r3, [pc, #64]	; (800b694 <_sbrk+0x64>)
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4413      	add	r3, r2
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d207      	bcs.n	800b670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b660:	f001 f802 	bl	800c668 <__errno>
 800b664:	4603      	mov	r3, r0
 800b666:	220c      	movs	r2, #12
 800b668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b66a:	f04f 33ff 	mov.w	r3, #4294967295
 800b66e:	e009      	b.n	800b684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b670:	4b08      	ldr	r3, [pc, #32]	; (800b694 <_sbrk+0x64>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b676:	4b07      	ldr	r3, [pc, #28]	; (800b694 <_sbrk+0x64>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	4a05      	ldr	r2, [pc, #20]	; (800b694 <_sbrk+0x64>)
 800b680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b682:	68fb      	ldr	r3, [r7, #12]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	200a0000 	.word	0x200a0000
 800b690:	00000400 	.word	0x00000400
 800b694:	20002014 	.word	0x20002014
 800b698:	2001aa08 	.word	0x2001aa08

0800b69c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b69c:	b480      	push	{r7}
 800b69e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b6a0:	4b06      	ldr	r3, [pc, #24]	; (800b6bc <SystemInit+0x20>)
 800b6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a6:	4a05      	ldr	r2, [pc, #20]	; (800b6bc <SystemInit+0x20>)
 800b6a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b6b0:	bf00      	nop
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	e000ed00 	.word	0xe000ed00

0800b6c0 <tetris_write_points>:
/**
 * @brief Write points to the screen while playing.
 *
 * @param window window
 */
void tetris_write_points(Window* window) {
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
    char point_str[10];
    sprintf(point_str, "%lu", window->game.points);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b6ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	f107 030c 	add.w	r3, r7, #12
 800b6d8:	4907      	ldr	r1, [pc, #28]	; (800b6f8 <tetris_write_points+0x38>)
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 fa98 	bl	800cc10 <siprintf>
    print_str(window, point_str, 27, 150);
 800b6e0:	f107 010c 	add.w	r1, r7, #12
 800b6e4:	2396      	movs	r3, #150	; 0x96
 800b6e6:	221b      	movs	r2, #27
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7fe fe55 	bl	800a398 <print_str>
}
 800b6ee:	bf00      	nop
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	0800e108 	.word	0x0800e108

0800b6fc <tetris_initialize_game>:
/**
 * @brief populate window game variable with a reset tetris game.
 *
 * @param window window
 */
void tetris_initialize_game(Window * window) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
    // fill game board with empty data
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e00a      	b.n	800b720 <tetris_initialize_game+0x24>
        window->game.board[i] = EMPTY_BOARD_CHAR;
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b714:	3308      	adds	r3, #8
 800b716:	2264      	movs	r2, #100	; 0x64
 800b718:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BOARD_WIDTH * BOARD_HEIGHT; i++) {
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3301      	adds	r3, #1
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2bc7      	cmp	r3, #199	; 0xc7
 800b724:	ddf1      	ble.n	800b70a <tetris_initialize_game+0xe>
    }

    // seed random val
    srand((unsigned) HAL_GetTick());
 800b726:	f7f5 fc47 	bl	8000fb8 <HAL_GetTick>
 800b72a:	4603      	mov	r3, r0
 800b72c:	4618      	mov	r0, r3
 800b72e:	f001 f987 	bl	800ca40 <srand>

    // initialize game state (tetromino, rotation, next tetromino, x, y, game state)
    window->game.rotation = 0;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b738:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b73c:	2200      	movs	r2, #0
 800b73e:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = tetris_get_next_tetromino();
 800b740:	f000 f836 	bl	800b7b0 <tetris_get_next_tetromino>
 800b744:	4602      	mov	r2, r0
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b74c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b750:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino();
 800b752:	f000 f82d 	bl	800b7b0 <tetris_get_next_tetromino>
 800b756:	4602      	mov	r2, r0
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b75e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b762:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b76a:	2203      	movs	r2, #3
 800b76c:	601a      	str	r2, [r3, #0]
    window->game.y = 0;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b774:	3304      	adds	r3, #4
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]
    window->game.state = Start;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800b780:	33d0      	adds	r3, #208	; 0xd0
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
    window->game.points = 0;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b78c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b790:	2200      	movs	r2, #0
 800b792:	601a      	str	r2, [r3, #0]
    window->game.rows_cleared = 0;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b79a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]

    // initialize the current tetromino
    tetris_update_current_tetromino(window);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f84a 	bl	800b83c <tetris_update_current_tetromino>
}
 800b7a8:	bf00      	nop
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <tetris_get_next_tetromino>:
/**
 * @brief generate random tetromino piece (select random number between 0 and 7)
 *
 * @return const char* pointer to random tetromino piece
 */
const uint8_t * tetris_get_next_tetromino() {
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	af00      	add	r7, sp, #0
    switch (rand() % 7) {
 800b7b4:	f001 f972 	bl	800ca9c <rand>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	4b18      	ldr	r3, [pc, #96]	; (800b81c <tetris_get_next_tetromino+0x6c>)
 800b7bc:	fb83 1302 	smull	r1, r3, r3, r2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	1099      	asrs	r1, r3, #2
 800b7c4:	17d3      	asrs	r3, r2, #31
 800b7c6:	1ac9      	subs	r1, r1, r3
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	1a5b      	subs	r3, r3, r1
 800b7ce:	1ad1      	subs	r1, r2, r3
 800b7d0:	2906      	cmp	r1, #6
 800b7d2:	d81f      	bhi.n	800b814 <tetris_get_next_tetromino+0x64>
 800b7d4:	a301      	add	r3, pc, #4	; (adr r3, 800b7dc <tetris_get_next_tetromino+0x2c>)
 800b7d6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b7f9 	.word	0x0800b7f9
 800b7e0:	0800b7fd 	.word	0x0800b7fd
 800b7e4:	0800b801 	.word	0x0800b801
 800b7e8:	0800b805 	.word	0x0800b805
 800b7ec:	0800b809 	.word	0x0800b809
 800b7f0:	0800b80d 	.word	0x0800b80d
 800b7f4:	0800b811 	.word	0x0800b811
        case 0:
            return tetromino_I;
 800b7f8:	4b09      	ldr	r3, [pc, #36]	; (800b820 <tetris_get_next_tetromino+0x70>)
 800b7fa:	e00c      	b.n	800b816 <tetris_get_next_tetromino+0x66>
        break;
        case 1:
            return tetromino_J;
 800b7fc:	4b09      	ldr	r3, [pc, #36]	; (800b824 <tetris_get_next_tetromino+0x74>)
 800b7fe:	e00a      	b.n	800b816 <tetris_get_next_tetromino+0x66>
        break;
        case 2:
            return tetromino_L;
 800b800:	4b09      	ldr	r3, [pc, #36]	; (800b828 <tetris_get_next_tetromino+0x78>)
 800b802:	e008      	b.n	800b816 <tetris_get_next_tetromino+0x66>
        break;
        case 3:
            return tetromino_O;
 800b804:	4b09      	ldr	r3, [pc, #36]	; (800b82c <tetris_get_next_tetromino+0x7c>)
 800b806:	e006      	b.n	800b816 <tetris_get_next_tetromino+0x66>
        break;
        case 4:
            return tetromino_S;
 800b808:	4b09      	ldr	r3, [pc, #36]	; (800b830 <tetris_get_next_tetromino+0x80>)
 800b80a:	e004      	b.n	800b816 <tetris_get_next_tetromino+0x66>
        break;
        case 5:
            return tetromino_T;
 800b80c:	4b09      	ldr	r3, [pc, #36]	; (800b834 <tetris_get_next_tetromino+0x84>)
 800b80e:	e002      	b.n	800b816 <tetris_get_next_tetromino+0x66>
        break;
        case 6:
            return tetromino_Z;
 800b810:	4b09      	ldr	r3, [pc, #36]	; (800b838 <tetris_get_next_tetromino+0x88>)
 800b812:	e000      	b.n	800b816 <tetris_get_next_tetromino+0x66>
        break;
        default:
            return tetromino_I; // TODO: this is never supposed to happen.
 800b814:	4b02      	ldr	r3, [pc, #8]	; (800b820 <tetris_get_next_tetromino+0x70>)
        break;
    }

}
 800b816:	4618      	mov	r0, r3
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	92492493 	.word	0x92492493
 800b820:	0803fb90 	.word	0x0803fb90
 800b824:	0803fba0 	.word	0x0803fba0
 800b828:	0803fbb0 	.word	0x0803fbb0
 800b82c:	0803fbc0 	.word	0x0803fbc0
 800b830:	0803fbd0 	.word	0x0803fbd0
 800b834:	0803fbe0 	.word	0x0803fbe0
 800b838:	0803fbf0 	.word	0x0803fbf0

0800b83c <tetris_update_current_tetromino>:
/**
 * @brief Updates the tetromino piece used for collision/drawing purposes
 *
 * @param window window
 */
void tetris_update_current_tetromino(Window * window) {
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
    // update piece based on rotation state
    int index = 0, row, col;
 800b844:	2300      	movs	r3, #0
 800b846:	617b      	str	r3, [r7, #20]
    switch (window->game.rotation) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b84e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b852:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b856:	2b03      	cmp	r3, #3
 800b858:	f200 80a0 	bhi.w	800b99c <tetris_update_current_tetromino+0x160>
 800b85c:	a201      	add	r2, pc, #4	; (adr r2, 800b864 <tetris_update_current_tetromino+0x28>)
 800b85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b862:	bf00      	nop
 800b864:	0800b875 	.word	0x0800b875
 800b868:	0800b8bf 	.word	0x0800b8bf
 800b86c:	0800b909 	.word	0x0800b909
 800b870:	0800b953 	.word	0x0800b953
        case 0:
            // no rotation
            for (row = 0; row < 4; row++) {
 800b874:	2300      	movs	r3, #0
 800b876:	613b      	str	r3, [r7, #16]
 800b878:	e01d      	b.n	800b8b6 <tetris_update_current_tetromino+0x7a>
                for (col = 0; col < 4; col++) {
 800b87a:	2300      	movs	r3, #0
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	e014      	b.n	800b8aa <tetris_update_current_tetromino+0x6e>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b886:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	441a      	add	r2, r3
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	0099      	lsls	r1, r3, #2
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	440b      	add	r3, r1
 800b898:	7811      	ldrb	r1, [r2, #0]
 800b89a:	4a43      	ldr	r2, [pc, #268]	; (800b9a8 <tetris_update_current_tetromino+0x16c>)
 800b89c:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]
                for (col = 0; col < 4; col++) {
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	60fb      	str	r3, [r7, #12]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	dde7      	ble.n	800b880 <tetris_update_current_tetromino+0x44>
            for (row = 0; row < 4; row++) {
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	613b      	str	r3, [r7, #16]
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	ddde      	ble.n	800b87a <tetris_update_current_tetromino+0x3e>
                }
            }
        break;
 800b8bc:	e06e      	b.n	800b99c <tetris_update_current_tetromino+0x160>
        case 1:
            // C 1; CC 3;
            for (col = 3; col >= 0; col--) {
 800b8be:	2303      	movs	r3, #3
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	e01d      	b.n	800b900 <tetris_update_current_tetromino+0xc4>
                for (row = 0; row < 4; row++) {
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	613b      	str	r3, [r7, #16]
 800b8c8:	e014      	b.n	800b8f4 <tetris_update_current_tetromino+0xb8>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b8d0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	441a      	add	r2, r3
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	0099      	lsls	r1, r3, #2
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	440b      	add	r3, r1
 800b8e2:	7811      	ldrb	r1, [r2, #0]
 800b8e4:	4a30      	ldr	r2, [pc, #192]	; (800b9a8 <tetris_update_current_tetromino+0x16c>)
 800b8e6:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	617b      	str	r3, [r7, #20]
                for (row = 0; row < 4; row++) {
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	dde7      	ble.n	800b8ca <tetris_update_current_tetromino+0x8e>
            for (col = 3; col >= 0; col--) {
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	60fb      	str	r3, [r7, #12]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	dade      	bge.n	800b8c4 <tetris_update_current_tetromino+0x88>
                }
            }
        break;
 800b906:	e049      	b.n	800b99c <tetris_update_current_tetromino+0x160>
        case 2:
            // C 2; CC 2;
            for (row = 3; row >= 0; row--) {
 800b908:	2303      	movs	r3, #3
 800b90a:	613b      	str	r3, [r7, #16]
 800b90c:	e01d      	b.n	800b94a <tetris_update_current_tetromino+0x10e>
                for (col = 3; col >= 0; col--) {
 800b90e:	2303      	movs	r3, #3
 800b910:	60fb      	str	r3, [r7, #12]
 800b912:	e014      	b.n	800b93e <tetris_update_current_tetromino+0x102>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b91a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	441a      	add	r2, r3
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	0099      	lsls	r1, r3, #2
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	440b      	add	r3, r1
 800b92c:	7811      	ldrb	r1, [r2, #0]
 800b92e:	4a1e      	ldr	r2, [pc, #120]	; (800b9a8 <tetris_update_current_tetromino+0x16c>)
 800b930:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	3301      	adds	r3, #1
 800b936:	617b      	str	r3, [r7, #20]
                for (col = 3; col >= 0; col--) {
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	dae7      	bge.n	800b914 <tetris_update_current_tetromino+0xd8>
            for (row = 3; row >= 0; row--) {
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	3b01      	subs	r3, #1
 800b948:	613b      	str	r3, [r7, #16]
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dade      	bge.n	800b90e <tetris_update_current_tetromino+0xd2>
                }
            }
        break;
 800b950:	e024      	b.n	800b99c <tetris_update_current_tetromino+0x160>
        case 3:
            // C 3; CC 1;
            for (col = 0; col < 4; col++) {
 800b952:	2300      	movs	r3, #0
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	e01d      	b.n	800b994 <tetris_update_current_tetromino+0x158>
                for (row = 3; row >= 0; row--) {
 800b958:	2303      	movs	r3, #3
 800b95a:	613b      	str	r3, [r7, #16]
 800b95c:	e014      	b.n	800b988 <tetris_update_current_tetromino+0x14c>
                    tetromino_current[4 * row + col] = window->game.tetromino[index];
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b964:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	441a      	add	r2, r3
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	0099      	lsls	r1, r3, #2
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	440b      	add	r3, r1
 800b976:	7811      	ldrb	r1, [r2, #0]
 800b978:	4a0b      	ldr	r2, [pc, #44]	; (800b9a8 <tetris_update_current_tetromino+0x16c>)
 800b97a:	54d1      	strb	r1, [r2, r3]
                    index++;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	3301      	adds	r3, #1
 800b980:	617b      	str	r3, [r7, #20]
                for (row = 3; row >= 0; row--) {
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	3b01      	subs	r3, #1
 800b986:	613b      	str	r3, [r7, #16]
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dae7      	bge.n	800b95e <tetris_update_current_tetromino+0x122>
            for (col = 0; col < 4; col++) {
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b03      	cmp	r3, #3
 800b998:	ddde      	ble.n	800b958 <tetris_update_current_tetromino+0x11c>
                }
            }
        break;
 800b99a:	bf00      	nop
    }
}
 800b99c:	bf00      	nop
 800b99e:	371c      	adds	r7, #28
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	200005e8 	.word	0x200005e8

0800b9ac <tetris_rotate_C_tetromino>:
/**
 * @brief Rotate the tetromino piece clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_C_tetromino(Window * window) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 1) % 4;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b9ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b9be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	425a      	negs	r2, r3
 800b9c6:	f003 0303 	and.w	r3, r3, #3
 800b9ca:	f002 0203 	and.w	r2, r2, #3
 800b9ce:	bf58      	it	pl
 800b9d0:	4253      	negpl	r3, r2
 800b9d2:	b21a      	sxth	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b9da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b9de:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ff2b 	bl	800b83c <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f8c0 	bl	800bb70 <tetris_validate_position>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d018      	beq.n	800ba28 <tetris_rotate_C_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 3) % 4;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800b9fc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ba00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba04:	3303      	adds	r3, #3
 800ba06:	425a      	negs	r2, r3
 800ba08:	f003 0303 	and.w	r3, r3, #3
 800ba0c:	f002 0203 	and.w	r2, r2, #3
 800ba10:	bf58      	it	pl
 800ba12:	4253      	negpl	r3, r2
 800ba14:	b21a      	sxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800ba1c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ba20:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff ff0a 	bl	800b83c <tetris_update_current_tetromino>
    }
}
 800ba28:	bf00      	nop
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <tetris_rotate_CC_tetromino>:
/**
 * @brief Rotate the tetromino piece conter clockwise. Abort rotation if will cause collision
 *
 * @param window window
 */
void tetris_rotate_CC_tetromino(Window * window) {
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
    window->game.rotation = (window->game.rotation + 3) % 4;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800ba3e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ba42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba46:	3303      	adds	r3, #3
 800ba48:	425a      	negs	r2, r3
 800ba4a:	f003 0303 	and.w	r3, r3, #3
 800ba4e:	f002 0203 	and.w	r2, r2, #3
 800ba52:	bf58      	it	pl
 800ba54:	4253      	negpl	r3, r2
 800ba56:	b21a      	sxth	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800ba5e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ba62:	801a      	strh	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff fee9 	bl	800b83c <tetris_update_current_tetromino>

    // undo rotation if it would lead to collision
    //TODO: make this smarter haha
    if (tetris_validate_position(window, 0, 0)) {
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 f87e 	bl	800bb70 <tetris_validate_position>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d018      	beq.n	800baac <tetris_rotate_CC_tetromino+0x7c>
        window->game.rotation = (window->game.rotation + 1) % 4;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800ba80:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ba84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	425a      	negs	r2, r3
 800ba8c:	f003 0303 	and.w	r3, r3, #3
 800ba90:	f002 0203 	and.w	r2, r2, #3
 800ba94:	bf58      	it	pl
 800ba96:	4253      	negpl	r3, r2
 800ba98:	b21a      	sxth	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800baa0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800baa4:	801a      	strh	r2, [r3, #0]
        tetris_update_current_tetromino(window);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff fec8 	bl	800b83c <tetris_update_current_tetromino>
    }
}
 800baac:	bf00      	nop
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <tetris_move_left>:
 * @brief Move the piece to the left. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_left(Window * window) {
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, -1, 0)) {
 800babc:	2200      	movs	r2, #0
 800babe:	f04f 31ff 	mov.w	r1, #4294967295
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f854 	bl	800bb70 <tetris_validate_position>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <tetris_move_left+0x30>
        window->game.x--;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	1e5a      	subs	r2, r3, #1
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bade:	601a      	str	r2, [r3, #0]
        return 1;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e000      	b.n	800bae6 <tetris_move_left+0x32>
    }
    return 0;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <tetris_move_right>:
 * @brief Move the piece to the right. Abort if causes a collision
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_right(Window * window) {
 800baee:	b580      	push	{r7, lr}
 800baf0:	b082      	sub	sp, #8
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 1, 0)) {
 800baf6:	2200      	movs	r2, #0
 800baf8:	2101      	movs	r1, #1
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f838 	bl	800bb70 <tetris_validate_position>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10a      	bne.n	800bb1c <tetris_move_right+0x2e>
        window->game.x++;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	1c5a      	adds	r2, r3, #1
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bb16:	601a      	str	r2, [r3, #0]
        return 1;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e000      	b.n	800bb1e <tetris_move_right+0x30>
    }
    return 0;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <tetris_move_down>:
 * @brief Move the piece down. Tetromino piece position is finalized if collision occurs. Get next tetromino & update board accordingly.
 *
 * @param window
 * @return int whether the event completed successfully
 */
int tetris_move_down(Window * window) {
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b082      	sub	sp, #8
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
    if (!tetris_validate_position(window, 0, 1)) {
 800bb2e:	2201      	movs	r2, #1
 800bb30:	2100      	movs	r1, #0
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f81c 	bl	800bb70 <tetris_validate_position>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10c      	bne.n	800bb58 <tetris_move_down+0x32>
        window->game.y++;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bb44:	3304      	adds	r3, #4
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bb50:	3304      	adds	r3, #4
 800bb52:	601a      	str	r2, [r3, #0]
        return 1;
 800bb54:	2301      	movs	r3, #1
 800bb56:	e006      	b.n	800bb66 <tetris_move_down+0x40>
    }

    tetris_finished_tetromino(window);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f9df 	bl	800bf1c <tetris_finished_tetromino>
    tetris_detect_rowCompletion(window);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa6e 	bl	800c040 <tetris_detect_rowCompletion>
    return 1;
 800bb64:	2301      	movs	r3, #1
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
	...

0800bb70 <tetris_validate_position>:
 * @param window tetris game window w/ tetromino data we want to validate
 * @param x_offset added to tetromino current x. X position to validate
 * @param y_offset added to tetromino current y. Y position to validate
 * @return int error code. 0 = no collision. 1 = collision w/ left wall. 2 = collision w/ right wall. 3 = collision with bottom floor. 4 = collision w/another block
 */
int tetris_validate_position(Window * window, int x_offset, int y_offset) {
 800bb70:	b480      	push	{r7}
 800bb72:	b089      	sub	sp, #36	; 0x24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
    int index = 0;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	61fb      	str	r3, [r7, #28]
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bb86:	3304      	adds	r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	61bb      	str	r3, [r7, #24]
 800bb90:	e053      	b.n	800bc3a <tetris_validate_position+0xca>
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	617b      	str	r3, [r7, #20]
 800bba0:	e03e      	b.n	800bc20 <tetris_validate_position+0xb0>
            // check for collision w/ bottom floor
            if (row >= BOARD_HEIGHT && tetromino_current[index] != 10) {
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	2b13      	cmp	r3, #19
 800bba6:	dd07      	ble.n	800bbb8 <tetris_validate_position+0x48>
 800bba8:	4a2d      	ldr	r2, [pc, #180]	; (800bc60 <tetris_validate_position+0xf0>)
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	4413      	add	r3, r2
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b0a      	cmp	r3, #10
 800bbb2:	d001      	beq.n	800bbb8 <tetris_validate_position+0x48>
                return 3;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e04c      	b.n	800bc52 <tetris_validate_position+0xe2>
            }
            // collision w/ left wall
            if (col < 0 && tetromino_current[index] != 10) {
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	da07      	bge.n	800bbce <tetris_validate_position+0x5e>
 800bbbe:	4a28      	ldr	r2, [pc, #160]	; (800bc60 <tetris_validate_position+0xf0>)
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	2b0a      	cmp	r3, #10
 800bbc8:	d001      	beq.n	800bbce <tetris_validate_position+0x5e>
                return 1;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e041      	b.n	800bc52 <tetris_validate_position+0xe2>
            }
            if (col >= BOARD_WIDTH && tetromino_current[index] != 10) {
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b09      	cmp	r3, #9
 800bbd2:	dd07      	ble.n	800bbe4 <tetris_validate_position+0x74>
 800bbd4:	4a22      	ldr	r2, [pc, #136]	; (800bc60 <tetris_validate_position+0xf0>)
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	4413      	add	r3, r2
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b0a      	cmp	r3, #10
 800bbde:	d001      	beq.n	800bbe4 <tetris_validate_position+0x74>
                return 2;
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e036      	b.n	800bc52 <tetris_validate_position+0xe2>
            }
            if (tetromino_current[index] != 10 && window->game.board[BOARD_WIDTH * row + col] != EMPTY_BOARD_CHAR) {
 800bbe4:	4a1e      	ldr	r2, [pc, #120]	; (800bc60 <tetris_validate_position+0xf0>)
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	4413      	add	r3, r2
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2b0a      	cmp	r3, #10
 800bbee:	d011      	beq.n	800bc14 <tetris_validate_position+0xa4>
 800bbf0:	69ba      	ldr	r2, [r7, #24]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	4413      	add	r3, r2
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	4413      	add	r3, r2
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4413      	add	r3, r2
 800bc04:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bc08:	3308      	adds	r3, #8
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b64      	cmp	r3, #100	; 0x64
 800bc0e:	d001      	beq.n	800bc14 <tetris_validate_position+0xa4>
                return 4;
 800bc10:	2304      	movs	r3, #4
 800bc12:	e01e      	b.n	800bc52 <tetris_validate_position+0xe2>
            }
            index++;
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	3301      	adds	r3, #1
 800bc18:	61fb      	str	r3, [r7, #28]
        for (int col = window->game.x + x_offset; col < window->game.x + 4 + x_offset; col++) {
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	1d1a      	adds	r2, r3, #4
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	dbb6      	blt.n	800bba2 <tetris_validate_position+0x32>
    for (int row = window->game.y + y_offset; row < window->game.y + 4 + y_offset; row++) {
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	3301      	adds	r3, #1
 800bc38:	61bb      	str	r3, [r7, #24]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bc40:	3304      	adds	r3, #4
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	1d1a      	adds	r2, r3, #4
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4413      	add	r3, r2
 800bc4a:	69ba      	ldr	r2, [r7, #24]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	dba0      	blt.n	800bb92 <tetris_validate_position+0x22>
        }
    }
    return 0;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3724      	adds	r7, #36	; 0x24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	200005e8 	.word	0x200005e8
 800bc64:	00000000 	.word	0x00000000

0800bc68 <tetris_drawEndScreen>:
 * @brief Draws the final screen of Tetris.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_drawEndScreen(Window * window) {
 800bc68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bc6c:	b08a      	sub	sp, #40	; 0x28
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
	// Draw a smiley face
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800bc72:	2346      	movs	r3, #70	; 0x46
 800bc74:	627b      	str	r3, [r7, #36]	; 0x24
 800bc76:	e132      	b.n	800bede <tetris_drawEndScreen+0x276>
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800bc78:	2302      	movs	r3, #2
 800bc7a:	623b      	str	r3, [r7, #32]
 800bc7c:	e128      	b.n	800bed0 <tetris_drawEndScreen+0x268>
			float y = IMAGE_HEIGHT-(i-IMAGE_Y) - (((float)IMAGE_HEIGHT)/2);
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc80:	f5c3 73d2 	rsb	r3, r3, #420	; 0x1a4
 800bc84:	ee07 3a90 	vmov	s15, r3
 800bc88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc8c:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800bf00 <tetris_drawEndScreen+0x298>
 800bc90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc94:	edc7 7a06 	vstr	s15, [r7, #24]
			float x = (((float)IMAGE_HEIGHT)/IMAGE_WIDTH)*(j-IMAGE_X) - (((float)IMAGE_HEIGHT)/2);
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	3b02      	subs	r3, #2
 800bc9c:	ee07 3a90 	vmov	s15, r3
 800bca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bca4:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800bf04 <tetris_drawEndScreen+0x29c>
 800bca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcac:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800bf00 <tetris_drawEndScreen+0x298>
 800bcb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcb4:	edc7 7a05 	vstr	s15, [r7, #20]
			float rad_head = x*x + y*y;
 800bcb8:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcbc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bcc0:	edd7 7a06 	vldr	s15, [r7, #24]
 800bcc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bcc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bccc:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_eyes = (abs(x)-70)*(abs(x)-70) + (y-30)*(y-30);
 800bcd0:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcd8:	ee17 3a90 	vmov	r3, s15
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bfb8      	it	lt
 800bce0:	425b      	neglt	r3, r3
 800bce2:	3b46      	subs	r3, #70	; 0x46
 800bce4:	edd7 7a05 	vldr	s15, [r7, #20]
 800bce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcec:	ee17 2a90 	vmov	r2, s15
 800bcf0:	2a00      	cmp	r2, #0
 800bcf2:	bfb8      	it	lt
 800bcf4:	4252      	neglt	r2, r2
 800bcf6:	3a46      	subs	r2, #70	; 0x46
 800bcf8:	fb02 f303 	mul.w	r3, r2, r3
 800bcfc:	ee07 3a90 	vmov	s15, r3
 800bd00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd04:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd08:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800bd0c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800bd10:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd14:	eeb3 6a0e 	vmov.f32	s12, #62	; 0x41f00000  30.0
 800bd18:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bd1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd24:	edc7 7a03 	vstr	s15, [r7, #12]
			float quad_rad;
			// Happy if we get over 80k :)
			// Even though that point count may overflow the screen-
			if (window->game.points < 9000) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bd2e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f242 3227 	movw	r2, #8999	; 0x2327
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d837      	bhi.n	800bdac <tetris_drawEndScreen+0x144>
				quad_rad = abs((y+100)+0.01*x*x);
 800bd3c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd40:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800bf08 <tetris_drawEndScreen+0x2a0>
 800bd44:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd48:	ee17 0a90 	vmov	r0, s15
 800bd4c:	f7f4 fc0c 	bl	8000568 <__aeabi_f2d>
 800bd50:	4604      	mov	r4, r0
 800bd52:	460d      	mov	r5, r1
 800bd54:	6978      	ldr	r0, [r7, #20]
 800bd56:	f7f4 fc07 	bl	8000568 <__aeabi_f2d>
 800bd5a:	a367      	add	r3, pc, #412	; (adr r3, 800bef8 <tetris_drawEndScreen+0x290>)
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	f7f4 fc5a 	bl	8000618 <__aeabi_dmul>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	4690      	mov	r8, r2
 800bd6a:	4699      	mov	r9, r3
 800bd6c:	6978      	ldr	r0, [r7, #20]
 800bd6e:	f7f4 fbfb 	bl	8000568 <__aeabi_f2d>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	4640      	mov	r0, r8
 800bd78:	4649      	mov	r1, r9
 800bd7a:	f7f4 fc4d 	bl	8000618 <__aeabi_dmul>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4620      	mov	r0, r4
 800bd84:	4629      	mov	r1, r5
 800bd86:	f7f4 fa91 	bl	80002ac <__adddf3>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4610      	mov	r0, r2
 800bd90:	4619      	mov	r1, r3
 800bd92:	f7f4 fef1 	bl	8000b78 <__aeabi_d2iz>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	bfb8      	it	lt
 800bd9c:	425b      	neglt	r3, r3
 800bd9e:	ee07 3a90 	vmov	s15, r3
 800bda2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bda6:	edc7 7a07 	vstr	s15, [r7, #28]
 800bdaa:	e036      	b.n	800be1a <tetris_drawEndScreen+0x1b2>
			} else {
				quad_rad = abs((y+100)-0.01*x*x);
 800bdac:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdb0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800bf08 <tetris_drawEndScreen+0x2a0>
 800bdb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdb8:	ee17 0a90 	vmov	r0, s15
 800bdbc:	f7f4 fbd4 	bl	8000568 <__aeabi_f2d>
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	6978      	ldr	r0, [r7, #20]
 800bdc6:	f7f4 fbcf 	bl	8000568 <__aeabi_f2d>
 800bdca:	a34b      	add	r3, pc, #300	; (adr r3, 800bef8 <tetris_drawEndScreen+0x290>)
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	f7f4 fc22 	bl	8000618 <__aeabi_dmul>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4690      	mov	r8, r2
 800bdda:	4699      	mov	r9, r3
 800bddc:	6978      	ldr	r0, [r7, #20]
 800bdde:	f7f4 fbc3 	bl	8000568 <__aeabi_f2d>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	4640      	mov	r0, r8
 800bde8:	4649      	mov	r1, r9
 800bdea:	f7f4 fc15 	bl	8000618 <__aeabi_dmul>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	f7f4 fa57 	bl	80002a8 <__aeabi_dsub>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4610      	mov	r0, r2
 800be00:	4619      	mov	r1, r3
 800be02:	f7f4 feb9 	bl	8000b78 <__aeabi_d2iz>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bfb8      	it	lt
 800be0c:	425b      	neglt	r3, r3
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be16:	edc7 7a07 	vstr	s15, [r7, #28]
			}
			if(rad_head > 150*150 && rad_head < 170*170) {
 800be1a:	edd7 7a04 	vldr	s15, [r7, #16]
 800be1e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800bf0c <tetris_drawEndScreen+0x2a4>
 800be22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be2a:	dd13      	ble.n	800be54 <tetris_drawEndScreen+0x1ec>
 800be2c:	edd7 7a04 	vldr	s15, [r7, #16]
 800be30:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800bf10 <tetris_drawEndScreen+0x2a8>
 800be34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3c:	d50a      	bpl.n	800be54 <tetris_drawEndScreen+0x1ec>
				window->frame[i][j] = (uint8_t) 255;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689a      	ldr	r2, [r3, #8]
 800be42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	4413      	add	r3, r2
 800be4e:	22ff      	movs	r2, #255	; 0xff
 800be50:	701a      	strb	r2, [r3, #0]
 800be52:	e03a      	b.n	800beca <tetris_drawEndScreen+0x262>
			} else if (rad_eyes < 20*20) {
 800be54:	edd7 7a03 	vldr	s15, [r7, #12]
 800be58:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800bf14 <tetris_drawEndScreen+0x2ac>
 800be5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be64:	d50a      	bpl.n	800be7c <tetris_drawEndScreen+0x214>
				window->frame[i][j] = (uint8_t) 255;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	4413      	add	r3, r2
 800be76:	22ff      	movs	r2, #255	; 0xff
 800be78:	701a      	strb	r2, [r3, #0]
 800be7a:	e026      	b.n	800beca <tetris_drawEndScreen+0x262>
			} else if (quad_rad < 10 && y < -55) {
 800be7c:	edd7 7a07 	vldr	s15, [r7, #28]
 800be80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800be84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8c:	d513      	bpl.n	800beb6 <tetris_drawEndScreen+0x24e>
 800be8e:	edd7 7a06 	vldr	s15, [r7, #24]
 800be92:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800bf18 <tetris_drawEndScreen+0x2b0>
 800be96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9e:	d50a      	bpl.n	800beb6 <tetris_drawEndScreen+0x24e>
				window->frame[i][j] = (uint8_t) 255;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689a      	ldr	r2, [r3, #8]
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	4413      	add	r3, r2
 800beb0:	22ff      	movs	r2, #255	; 0xff
 800beb2:	701a      	strb	r2, [r3, #0]
 800beb4:	e009      	b.n	800beca <tetris_drawEndScreen+0x262>
			} else {
				window->frame[i][j] = (uint8_t) 0;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	6a3b      	ldr	r3, [r7, #32]
 800bec4:	4413      	add	r3, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	701a      	strb	r2, [r3, #0]
		for(int j = IMAGE_X; j < IMAGE_WIDTH + IMAGE_X; j++) {
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	3301      	adds	r3, #1
 800bece:	623b      	str	r3, [r7, #32]
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	2b51      	cmp	r3, #81	; 0x51
 800bed4:	f77f aed3 	ble.w	800bc7e <tetris_drawEndScreen+0x16>
	for(int i = IMAGE_Y; i < IMAGE_HEIGHT + IMAGE_Y; i++) {
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	3301      	adds	r3, #1
 800bedc:	627b      	str	r3, [r7, #36]	; 0x24
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800bee4:	f6ff aec8 	blt.w	800bc78 <tetris_drawEndScreen+0x10>
			}
		}
	}
}
 800bee8:	bf00      	nop
 800beea:	bf00      	nop
 800beec:	3728      	adds	r7, #40	; 0x28
 800beee:	46bd      	mov	sp, r7
 800bef0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bef4:	f3af 8000 	nop.w
 800bef8:	47ae147b 	.word	0x47ae147b
 800befc:	3f847ae1 	.word	0x3f847ae1
 800bf00:	432f0000 	.word	0x432f0000
 800bf04:	408c0000 	.word	0x408c0000
 800bf08:	42c80000 	.word	0x42c80000
 800bf0c:	46afc800 	.word	0x46afc800
 800bf10:	46e1c800 	.word	0x46e1c800
 800bf14:	43c80000 	.word	0x43c80000
 800bf18:	c25c0000 	.word	0xc25c0000

0800bf1c <tetris_finished_tetromino>:
 * @brief Finalizes the tetromino position and generates a new tetromino.
 * does NOT care about collisions. Assumes all of those have been remedied before being called.
 * Is responsible for detecting an END of game
 * @param window tetris game window w/ tetromino data we want to validate
 */
void tetris_finished_tetromino(Window * window) {
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
    int index = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bf2e:	3304      	adds	r3, #4
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	613b      	str	r3, [r7, #16]
 800bf34:	e04a      	b.n	800bfcc <tetris_finished_tetromino+0xb0>
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60fb      	str	r3, [r7, #12]
 800bf40:	e039      	b.n	800bfb6 <tetris_finished_tetromino+0x9a>
            if (row >= 0 && row < BOARD_HEIGHT && col >= 0 && col < BOARD_WIDTH && tetromino_current[index] != 10) {
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	db30      	blt.n	800bfaa <tetris_finished_tetromino+0x8e>
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	2b13      	cmp	r3, #19
 800bf4c:	dc2d      	bgt.n	800bfaa <tetris_finished_tetromino+0x8e>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	db2a      	blt.n	800bfaa <tetris_finished_tetromino+0x8e>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b09      	cmp	r3, #9
 800bf58:	dc27      	bgt.n	800bfaa <tetris_finished_tetromino+0x8e>
 800bf5a:	4a38      	ldr	r2, [pc, #224]	; (800c03c <tetris_finished_tetromino+0x120>)
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	4413      	add	r3, r2
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b0a      	cmp	r3, #10
 800bf64:	d021      	beq.n	800bfaa <tetris_finished_tetromino+0x8e>
                window->game.board[BOARD_WIDTH * row + col] = tetromino_current[index];
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	461a      	mov	r2, r3
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	4413      	add	r3, r2
 800bf76:	4931      	ldr	r1, [pc, #196]	; (800c03c <tetris_finished_tetromino+0x120>)
 800bf78:	697a      	ldr	r2, [r7, #20]
 800bf7a:	440a      	add	r2, r1
 800bf7c:	7811      	ldrb	r1, [r2, #0]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	4413      	add	r3, r2
 800bf82:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bf86:	3308      	adds	r3, #8
 800bf88:	460a      	mov	r2, r1
 800bf8a:	701a      	strb	r2, [r3, #0]

                // check to see if game over!
                if (row < 4) {
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	dc0b      	bgt.n	800bfaa <tetris_finished_tetromino+0x8e>
                    tetris_initialize_game(window);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7ff fbb2 	bl	800b6fc <tetris_initialize_game>
                    tetris_drawEndScreen(window);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff fe65 	bl	800bc68 <tetris_drawEndScreen>
                    window->game.state = Ended;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bfa4:	33d0      	adds	r3, #208	; 0xd0
 800bfa6:	2203      	movs	r2, #3
 800bfa8:	701a      	strb	r2, [r3, #0]
                }
            }
            index++;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	3301      	adds	r3, #1
 800bfae:	617b      	str	r3, [r7, #20]
        for (int col = window->game.x; col < window->game.x + 4; col++) {
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	60fb      	str	r3, [r7, #12]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3303      	adds	r3, #3
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	ddbd      	ble.n	800bf42 <tetris_finished_tetromino+0x26>
    for (int row = window->game.y; row < window->game.y + 4; row++) {
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	613b      	str	r3, [r7, #16]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3303      	adds	r3, #3
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	ddab      	ble.n	800bf36 <tetris_finished_tetromino+0x1a>
        }
    }

    // reset tetromino position & spawn next tetromino
    window->game.y = 0;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	601a      	str	r2, [r3, #0]
    window->game.x = 3;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800bff0:	2203      	movs	r2, #3
 800bff2:	601a      	str	r2, [r3, #0]
    window->game.rotation = 0;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800bffa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bffe:	2200      	movs	r2, #0
 800c000:	801a      	strh	r2, [r3, #0]
    window->game.tetromino = window->game.nextTetromino;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c008:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c014:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c018:	601a      	str	r2, [r3, #0]
    window->game.nextTetromino = tetris_get_next_tetromino(window);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff fbc8 	bl	800b7b0 <tetris_get_next_tetromino>
 800c020:	4602      	mov	r2, r0
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c028:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800c02c:	601a      	str	r2, [r3, #0]
    tetris_update_current_tetromino(window);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff fc04 	bl	800b83c <tetris_update_current_tetromino>
}
 800c034:	bf00      	nop
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	200005e8 	.word	0x200005e8

0800c040 <tetris_detect_rowCompletion>:
/**
 * @brief Detect full rows, and clears them out of the board
 *
 * @param window window w/ game
 */
void tetris_detect_rowCompletion(Window * window) {
 800c040:	b480      	push	{r7}
 800c042:	b09f      	sub	sp, #124	; 0x7c
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
    // go over board & detect all lines that need to be cleared.
    int rowCompleted[BOARD_HEIGHT];
    int numRowsCompleted = 0;
 800c048:	2300      	movs	r3, #0
 800c04a:	677b      	str	r3, [r7, #116]	; 0x74
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800c04c:	2300      	movs	r3, #0
 800c04e:	673b      	str	r3, [r7, #112]	; 0x70
 800c050:	e037      	b.n	800c0c2 <tetris_detect_rowCompletion+0x82>
        rowCompleted[row] = 1;
 800c052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c05a:	4413      	add	r3, r2
 800c05c:	2201      	movs	r2, #1
 800c05e:	f843 2c70 	str.w	r2, [r3, #-112]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c062:	2300      	movs	r3, #0
 800c064:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c066:	e01a      	b.n	800c09e <tetris_detect_rowCompletion+0x5e>
            if (window->game.board[BOARD_WIDTH * row + col] == EMPTY_BOARD_CHAR) {
 800c068:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c06a:	4613      	mov	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4413      	add	r3, r2
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	461a      	mov	r2, r3
 800c074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c076:	4413      	add	r3, r2
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c080:	3308      	adds	r3, #8
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2b64      	cmp	r3, #100	; 0x64
 800c086:	d107      	bne.n	800c098 <tetris_detect_rowCompletion+0x58>
                rowCompleted[row] = 0;
 800c088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c090:	4413      	add	r3, r2
 800c092:	2200      	movs	r2, #0
 800c094:	f843 2c70 	str.w	r2, [r3, #-112]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c09a:	3301      	adds	r3, #1
 800c09c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0a0:	2b09      	cmp	r3, #9
 800c0a2:	dde1      	ble.n	800c068 <tetris_detect_rowCompletion+0x28>
            }
        }
        if(rowCompleted[row]) numRowsCompleted++;
 800c0a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c0ac:	4413      	add	r3, r2
 800c0ae:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d002      	beq.n	800c0bc <tetris_detect_rowCompletion+0x7c>
 800c0b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	677b      	str	r3, [r7, #116]	; 0x74
    for (int row = 0; row < BOARD_HEIGHT; row++) {
 800c0bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0be:	3301      	adds	r3, #1
 800c0c0:	673b      	str	r3, [r7, #112]	; 0x70
 800c0c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0c4:	2b13      	cmp	r3, #19
 800c0c6:	ddc4      	ble.n	800c052 <tetris_detect_rowCompletion+0x12>
    }

    // go over board from bottom to top & delete the lines that need to be cleared
    int row_currently_drawn = BOARD_HEIGHT - 1;
 800c0c8:	2313      	movs	r3, #19
 800c0ca:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800c0cc:	2313      	movs	r3, #19
 800c0ce:	667b      	str	r3, [r7, #100]	; 0x64
 800c0d0:	e034      	b.n	800c13c <tetris_detect_rowCompletion+0xfc>
        if (!rowCompleted[row]) {
 800c0d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c0da:	4413      	add	r3, r2
 800c0dc:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d128      	bne.n	800c136 <tetris_detect_rowCompletion+0xf6>
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	663b      	str	r3, [r7, #96]	; 0x60
 800c0e8:	e01f      	b.n	800c12a <tetris_detect_rowCompletion+0xea>
                window->game.board[BOARD_WIDTH * row_currently_drawn + col] = window->game.board[BOARD_WIDTH * row + col];
 800c0ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0f8:	18d1      	adds	r1, r2, r3
 800c0fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	461a      	mov	r2, r3
 800c106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c108:	441a      	add	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	440b      	add	r3, r1
 800c10e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c112:	3308      	adds	r3, #8
 800c114:	7819      	ldrb	r1, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c11e:	3308      	adds	r3, #8
 800c120:	460a      	mov	r2, r1
 800c122:	701a      	strb	r2, [r3, #0]
            for (int col = 0; col < BOARD_WIDTH; col++) {
 800c124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c126:	3301      	adds	r3, #1
 800c128:	663b      	str	r3, [r7, #96]	; 0x60
 800c12a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c12c:	2b09      	cmp	r3, #9
 800c12e:	dddc      	ble.n	800c0ea <tetris_detect_rowCompletion+0xaa>
            }
            row_currently_drawn--;
 800c130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c132:	3b01      	subs	r3, #1
 800c134:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = BOARD_HEIGHT - 1; row >= 0; row--) {
 800c136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c138:	3b01      	subs	r3, #1
 800c13a:	667b      	str	r3, [r7, #100]	; 0x64
 800c13c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c13e:	2b00      	cmp	r3, #0
 800c140:	dac7      	bge.n	800c0d2 <tetris_detect_rowCompletion+0x92>
        }
    }

    for (int row = row_currently_drawn; row >= 0; row--) {
 800c142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c144:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c146:	e01d      	b.n	800c184 <tetris_detect_rowCompletion+0x144>
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c148:	2300      	movs	r3, #0
 800c14a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c14c:	e011      	b.n	800c172 <tetris_detect_rowCompletion+0x132>
            window->game.board[BOARD_WIDTH * row_currently_drawn + col] = EMPTY_BOARD_CHAR;
 800c14e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	461a      	mov	r2, r3
 800c15a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c15c:	4413      	add	r3, r2
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	4413      	add	r3, r2
 800c162:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c166:	3308      	adds	r3, #8
 800c168:	2264      	movs	r2, #100	; 0x64
 800c16a:	701a      	strb	r2, [r3, #0]
        for (int col = 0; col < BOARD_WIDTH; col++) {
 800c16c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c16e:	3301      	adds	r3, #1
 800c170:	65bb      	str	r3, [r7, #88]	; 0x58
 800c172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c174:	2b09      	cmp	r3, #9
 800c176:	ddea      	ble.n	800c14e <tetris_detect_rowCompletion+0x10e>
        }
        row_currently_drawn--;
 800c178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c17a:	3b01      	subs	r3, #1
 800c17c:	66bb      	str	r3, [r7, #104]	; 0x68
    for (int row = row_currently_drawn; row >= 0; row--) {
 800c17e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c180:	3b01      	subs	r3, #1
 800c182:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c186:	2b00      	cmp	r3, #0
 800c188:	dade      	bge.n	800c148 <tetris_detect_rowCompletion+0x108>
    }

    window->game.rows_cleared += numRowsCompleted;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c190:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c198:	441a      	add	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c1a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c1a4:	601a      	str	r2, [r3, #0]
 800c1a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d846      	bhi.n	800c23c <tetris_detect_rowCompletion+0x1fc>
 800c1ae:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <tetris_detect_rowCompletion+0x174>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c1c5 	.word	0x0800c1c5
 800c1b8:	0800c1e3 	.word	0x0800c1e3
 800c1bc:	0800c201 	.word	0x0800c201
 800c1c0:	0800c21f 	.word	0x0800c21f
    switch(numRowsCompleted) {
    case 1:
    	window->game.points += 40;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c1ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c1da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c1de:	601a      	str	r2, [r3, #0]
    	break;
 800c1e0:	e02d      	b.n	800c23e <tetris_detect_rowCompletion+0x1fe>
    case 2:
    	window->game.points += 100;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c1e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c1f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c1fc:	601a      	str	r2, [r3, #0]
    	break;
 800c1fe:	e01e      	b.n	800c23e <tetris_detect_rowCompletion+0x1fe>
    case 3:
    	window->game.points += 300;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c206:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c216:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c21a:	601a      	str	r2, [r3, #0]
    	break;
 800c21c:	e00f      	b.n	800c23e <tetris_detect_rowCompletion+0x1fe>
    case 4:
    	window->game.points += 1200;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c224:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f503 33c2 	add.w	r3, r3, #99328	; 0x18400
 800c234:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c238:	601a      	str	r2, [r3, #0]
    	break;
 800c23a:	e000      	b.n	800c23e <tetris_detect_rowCompletion+0x1fe>
    default:
    	break;
 800c23c:	bf00      	nop
    }
}
 800c23e:	bf00      	nop
 800c240:	377c      	adds	r7, #124	; 0x7c
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop

0800c24c <drawRect>:
 * @param height height of 2D data rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param data data to write to screen
 */
void drawRect(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t* data) {
 800c24c:	b480      	push	{r7}
 800c24e:	b08b      	sub	sp, #44	; 0x2c
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	617b      	str	r3, [r7, #20]

    int indexRow = 0, indexCol;
 800c260:	2300      	movs	r3, #0
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c268:	fb02 f303 	mul.w	r3, r2, r3
 800c26c:	3346      	adds	r3, #70	; 0x46
 800c26e:	61fb      	str	r3, [r7, #28]
 800c270:	e06b      	b.n	800c34a <drawRect+0xfe>
        indexCol = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c27a:	fb02 f303 	mul.w	r3, r2, r3
 800c27e:	3302      	adds	r3, #2
 800c280:	61bb      	str	r3, [r7, #24]
 800c282:	e041      	b.n	800c308 <drawRect+0xbc>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X && data[indexRow * width + indexCol] != 10) {
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	2b45      	cmp	r3, #69	; 0x45
 800c288:	dd27      	ble.n	800c2da <drawRect+0x8e>
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c290:	da23      	bge.n	800c2da <drawRect+0x8e>
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	2b01      	cmp	r3, #1
 800c296:	dd20      	ble.n	800c2da <drawRect+0x8e>
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	2b51      	cmp	r3, #81	; 0x51
 800c29c:	dc1d      	bgt.n	800c2da <drawRect+0x8e>
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	683a      	ldr	r2, [r7, #0]
 800c2a2:	fb02 f203 	mul.w	r2, r2, r3
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ae:	4413      	add	r3, r2
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	2b0a      	cmp	r3, #10
 800c2b4:	d011      	beq.n	800c2da <drawRect+0x8e>
                buff[row][col] = data[indexRow * width + indexCol];
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	fb02 f203 	mul.w	r2, r2, r3
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2c6:	441a      	add	r2, r3
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	6979      	ldr	r1, [r7, #20]
 800c2ce:	440b      	add	r3, r1
 800c2d0:	6819      	ldr	r1, [r3, #0]
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	440b      	add	r3, r1
 800c2d6:	7812      	ldrb	r2, [r2, #0]
 800c2d8:	701a      	strb	r2, [r3, #0]
            }
            if ((col - (x_start * scaling_h + IMAGE_X) + 1) % scaling_h == 0) {
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2de:	fb02 f303 	mul.w	r3, r2, r3
 800c2e2:	3302      	adds	r3, #2
 800c2e4:	69ba      	ldr	r2, [r7, #24]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2ec:	fb93 f2f2 	sdiv	r2, r3, r2
 800c2f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2f2:	fb01 f202 	mul.w	r2, r1, r2
 800c2f6:	1a9b      	subs	r3, r3, r2
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <drawRect+0xb6>
                indexCol++;
 800c2fc:	6a3b      	ldr	r3, [r7, #32]
 800c2fe:	3301      	adds	r3, #1
 800c300:	623b      	str	r3, [r7, #32]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	3301      	adds	r3, #1
 800c306:	61bb      	str	r3, [r7, #24]
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	4413      	add	r3, r2
 800c30e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c310:	fb02 f303 	mul.w	r3, r2, r3
 800c314:	3301      	adds	r3, #1
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	429a      	cmp	r2, r3
 800c31a:	ddb3      	ble.n	800c284 <drawRect+0x38>
            }
        }
        if ((row - (y_start * scaling_v + IMAGE_Y) + 1) % scaling_v == 0) {
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c320:	fb02 f303 	mul.w	r3, r2, r3
 800c324:	3346      	adds	r3, #70	; 0x46
 800c326:	69fa      	ldr	r2, [r7, #28]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	3301      	adds	r3, #1
 800c32c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c32e:	fb93 f2f2 	sdiv	r2, r3, r2
 800c332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c334:	fb01 f202 	mul.w	r2, r1, r2
 800c338:	1a9b      	subs	r3, r3, r2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d102      	bne.n	800c344 <drawRect+0xf8>
            indexRow++;
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	3301      	adds	r3, #1
 800c342:	627b      	str	r3, [r7, #36]	; 0x24
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	3301      	adds	r3, #1
 800c348:	61fb      	str	r3, [r7, #28]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	4413      	add	r3, r2
 800c350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c352:	fb02 f303 	mul.w	r3, r2, r3
 800c356:	3345      	adds	r3, #69	; 0x45
 800c358:	69fa      	ldr	r2, [r7, #28]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	dd89      	ble.n	800c272 <drawRect+0x26>
        }
    }
}
 800c35e:	bf00      	nop
 800c360:	bf00      	nop
 800c362:	372c      	adds	r7, #44	; 0x2c
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <drawRect_color>:
 * @param height height of rectangle
 * @param scaling_h scaling factor applied to rectangle (horizontal)
 * @param scaling_v scaling factor applied to rectangle (vertical)
 * @param color color to draw in rectangle
 */
void drawRect_color(Window* window, int x_start, int y_start, int width, int height, int scaling_h, int scaling_v, uint8_t color) {
 800c36c:	b480      	push	{r7}
 800c36e:	b089      	sub	sp, #36	; 0x24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	603b      	str	r3, [r7, #0]
	uint8_t** buff = window->frame;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	617b      	str	r3, [r7, #20]

    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c384:	fb02 f303 	mul.w	r3, r2, r3
 800c388:	3346      	adds	r3, #70	; 0x46
 800c38a:	61fb      	str	r3, [r7, #28]
 800c38c:	e02d      	b.n	800c3ea <drawRect_color+0x7e>
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c392:	fb02 f303 	mul.w	r3, r2, r3
 800c396:	3302      	adds	r3, #2
 800c398:	61bb      	str	r3, [r7, #24]
 800c39a:	e019      	b.n	800c3d0 <drawRect_color+0x64>
            if (row >= IMAGE_Y && row < IMAGE_Y + IMAGE_HEIGHT && col >= IMAGE_X && col < IMAGE_WIDTH + IMAGE_X) {
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	2b45      	cmp	r3, #69	; 0x45
 800c3a0:	dd13      	ble.n	800c3ca <drawRect_color+0x5e>
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c3a8:	da0f      	bge.n	800c3ca <drawRect_color+0x5e>
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	dd0c      	ble.n	800c3ca <drawRect_color+0x5e>
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	2b51      	cmp	r3, #81	; 0x51
 800c3b4:	dc09      	bgt.n	800c3ca <drawRect_color+0x5e>
            	buff[row][col] = color;
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	4413      	add	r3, r2
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800c3c8:	701a      	strb	r2, [r3, #0]
        for (int col = x_start * scaling_h + IMAGE_X; col < (x_start + width) * scaling_h + IMAGE_X; col++) {
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	61bb      	str	r3, [r7, #24]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3d8:	fb02 f303 	mul.w	r3, r2, r3
 800c3dc:	3301      	adds	r3, #1
 800c3de:	69ba      	ldr	r2, [r7, #24]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	dddb      	ble.n	800c39c <drawRect_color+0x30>
    for (int row = y_start * scaling_v + IMAGE_Y; row < (y_start + height)  * scaling_v + IMAGE_Y; row++) {
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	61fb      	str	r3, [r7, #28]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ee:	4413      	add	r3, r2
 800c3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f2:	fb02 f303 	mul.w	r3, r2, r3
 800c3f6:	3345      	adds	r3, #69	; 0x45
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	ddc7      	ble.n	800c38e <drawRect_color+0x22>
            }
        }
    }
}
 800c3fe:	bf00      	nop
 800c400:	bf00      	nop
 800c402:	3724      	adds	r7, #36	; 0x24
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	0000      	movs	r0, r0
	...

0800c410 <tetris_drawBackground>:
/**
 * @brief draw the background - a series of sine waves
 *
 * @param window window to draw to
 */
void tetris_drawBackground(Window* window) {
 800c410:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c414:	b086      	sub	sp, #24
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]


	float y_repeat = IMAGE_HEIGHT / 9.0;
 800c41a:	4b57      	ldr	r3, [pc, #348]	; (800c578 <tetris_drawBackground+0x168>)
 800c41c:	60fb      	str	r3, [r7, #12]
	for (int row = IMAGE_Y; row < IMAGE_HEIGHT + IMAGE_Y; row++) {
 800c41e:	2346      	movs	r3, #70	; 0x46
 800c420:	617b      	str	r3, [r7, #20]
 800c422:	e095      	b.n	800c550 <tetris_drawBackground+0x140>
		for (int col = IMAGE_X; col < IMAGE_WIDTH + IMAGE_X; col++) {
 800c424:	2302      	movs	r3, #2
 800c426:	613b      	str	r3, [r7, #16]
 800c428:	e08b      	b.n	800c542 <tetris_drawBackground+0x132>
			if (col < IMAGE_X + BOARD_X + BOARD_WIDTH * 2 + 5) {
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b1c      	cmp	r3, #28
 800c42e:	dc0a      	bgt.n	800c446 <tetris_drawBackground+0x36>
				window->frame[row][col] = 125;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689a      	ldr	r2, [r3, #8]
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4413      	add	r3, r2
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	4413      	add	r3, r2
 800c440:	227d      	movs	r2, #125	; 0x7d
 800c442:	701a      	strb	r2, [r3, #0]
 800c444:	e07a      	b.n	800c53c <tetris_drawBackground+0x12c>
			} else {

				float sin_diff = fabs(9.0 * arm_sin_f32(0.9 * col) + 9.0 - fmod(row, y_repeat) );
 800c446:	6938      	ldr	r0, [r7, #16]
 800c448:	f7f4 f87c 	bl	8000544 <__aeabi_i2d>
 800c44c:	a348      	add	r3, pc, #288	; (adr r3, 800c570 <tetris_drawBackground+0x160>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f4 f8e1 	bl	8000618 <__aeabi_dmul>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4610      	mov	r0, r2
 800c45c:	4619      	mov	r1, r3
 800c45e:	f7f4 fbb3 	bl	8000bc8 <__aeabi_d2f>
 800c462:	4603      	mov	r3, r0
 800c464:	ee00 3a10 	vmov	s0, r3
 800c468:	f000 f8b8 	bl	800c5dc <arm_sin_f32>
 800c46c:	ee10 3a10 	vmov	r3, s0
 800c470:	4618      	mov	r0, r3
 800c472:	f7f4 f879 	bl	8000568 <__aeabi_f2d>
 800c476:	f04f 0200 	mov.w	r2, #0
 800c47a:	4b40      	ldr	r3, [pc, #256]	; (800c57c <tetris_drawBackground+0x16c>)
 800c47c:	f7f4 f8cc 	bl	8000618 <__aeabi_dmul>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	4610      	mov	r0, r2
 800c486:	4619      	mov	r1, r3
 800c488:	f04f 0200 	mov.w	r2, #0
 800c48c:	4b3b      	ldr	r3, [pc, #236]	; (800c57c <tetris_drawBackground+0x16c>)
 800c48e:	f7f3 ff0d 	bl	80002ac <__adddf3>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4614      	mov	r4, r2
 800c498:	461d      	mov	r5, r3
 800c49a:	6978      	ldr	r0, [r7, #20]
 800c49c:	f7f4 f852 	bl	8000544 <__aeabi_i2d>
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	4689      	mov	r9, r1
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f7f4 f85f 	bl	8000568 <__aeabi_f2d>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	ec43 2b11 	vmov	d1, r2, r3
 800c4b2:	ec49 8b10 	vmov	d0, r8, r9
 800c4b6:	f001 fb77 	bl	800dba8 <fmod>
 800c4ba:	ec53 2b10 	vmov	r2, r3, d0
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7f3 fef1 	bl	80002a8 <__aeabi_dsub>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	f7f4 fb7b 	bl	8000bc8 <__aeabi_d2f>
 800c4d2:	ee07 0a90 	vmov	s15, r0
 800c4d6:	eef0 7ae7 	vabs.f32	s15, s15
 800c4da:	edc7 7a02 	vstr	s15, [r7, #8]
				window->frame[row][col] = (sin_diff < 4.0) ? 20 : 70;
 800c4de:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c4e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ee:	d501      	bpl.n	800c4f4 <tetris_drawBackground+0xe4>
 800c4f0:	2114      	movs	r1, #20
 800c4f2:	e000      	b.n	800c4f6 <tetris_drawBackground+0xe6>
 800c4f4:	2146      	movs	r1, #70	; 0x46
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689a      	ldr	r2, [r3, #8]
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4413      	add	r3, r2
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	4413      	add	r3, r2
 800c506:	460a      	mov	r2, r1
 800c508:	701a      	strb	r2, [r3, #0]
				if( (col+2) % 7 == 0) window->frame[row][col] = 20;
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	1c9a      	adds	r2, r3, #2
 800c50e:	4b1c      	ldr	r3, [pc, #112]	; (800c580 <tetris_drawBackground+0x170>)
 800c510:	fb83 1302 	smull	r1, r3, r3, r2
 800c514:	4413      	add	r3, r2
 800c516:	1099      	asrs	r1, r3, #2
 800c518:	17d3      	asrs	r3, r2, #31
 800c51a:	1ac9      	subs	r1, r1, r3
 800c51c:	460b      	mov	r3, r1
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	1a5b      	subs	r3, r3, r1
 800c522:	1ad1      	subs	r1, r2, r3
 800c524:	2900      	cmp	r1, #0
 800c526:	d109      	bne.n	800c53c <tetris_drawBackground+0x12c>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689a      	ldr	r2, [r3, #8]
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	4413      	add	r3, r2
 800c538:	2214      	movs	r2, #20
 800c53a:	701a      	strb	r2, [r3, #0]
		for (int col = IMAGE_X; col < IMAGE_WIDTH + IMAGE_X; col++) {
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	3301      	adds	r3, #1
 800c540:	613b      	str	r3, [r7, #16]
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	2b51      	cmp	r3, #81	; 0x51
 800c546:	f77f af70 	ble.w	800c42a <tetris_drawBackground+0x1a>
	for (int row = IMAGE_Y; row < IMAGE_HEIGHT + IMAGE_Y; row++) {
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	3301      	adds	r3, #1
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c556:	f6ff af65 	blt.w	800c424 <tetris_drawBackground+0x14>
			}

		}
	 }
	print_str(window, "Points:", 27, 60); // I make the points PART of the background
 800c55a:	233c      	movs	r3, #60	; 0x3c
 800c55c:	221b      	movs	r2, #27
 800c55e:	4909      	ldr	r1, [pc, #36]	; (800c584 <tetris_drawBackground+0x174>)
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7fd ff19 	bl	800a398 <print_str>
 }
 800c566:	bf00      	nop
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c570:	cccccccd 	.word	0xcccccccd
 800c574:	3feccccc 	.word	0x3feccccc
 800c578:	421b8e39 	.word	0x421b8e39
 800c57c:	40220000 	.word	0x40220000
 800c580:	92492493 	.word	0x92492493
 800c584:	0800e10c 	.word	0x0800e10c

0800c588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 800c588:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c5c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800c58c:	f7ff f886 	bl	800b69c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c590:	480c      	ldr	r0, [pc, #48]	; (800c5c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800c592:	490d      	ldr	r1, [pc, #52]	; (800c5c8 <LoopForever+0xa>)
 ldr r2, =_sidata
 800c594:	4a0d      	ldr	r2, [pc, #52]	; (800c5cc <LoopForever+0xe>)
  movs r3, #0
 800c596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c598:	e002      	b.n	800c5a0 <LoopCopyDataInit>

0800c59a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c59a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c59c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c59e:	3304      	adds	r3, #4

0800c5a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c5a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c5a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c5a4:	d3f9      	bcc.n	800c59a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c5a6:	4a0a      	ldr	r2, [pc, #40]	; (800c5d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c5a8:	4c0a      	ldr	r4, [pc, #40]	; (800c5d4 <LoopForever+0x16>)
  movs r3, #0
 800c5aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c5ac:	e001      	b.n	800c5b2 <LoopFillZerobss>

0800c5ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c5ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c5b0:	3204      	adds	r2, #4

0800c5b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c5b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c5b4:	d3fb      	bcc.n	800c5ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c5b6:	f000 f953 	bl	800c860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800c5ba:	f7fd ff8d 	bl	800a4d8 <main>

0800c5be <LoopForever>:

LoopForever:
    b LoopForever
 800c5be:	e7fe      	b.n	800c5be <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 800c5c0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800c5c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c5c8:	20000660 	.word	0x20000660
 ldr r2, =_sidata
 800c5cc:	08040570 	.word	0x08040570
  ldr r2, =_sbss
 800c5d0:	20000660 	.word	0x20000660
  ldr r4, =_ebss
 800c5d4:	2001aa04 	.word	0x2001aa04

0800c5d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800c5d8:	e7fe      	b.n	800c5d8 <ADC1_IRQHandler>
	...

0800c5dc <arm_sin_f32>:
 800c5dc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c65c <arm_sin_f32+0x80>
 800c5e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c5e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c5f0:	d504      	bpl.n	800c5fc <arm_sin_f32+0x20>
 800c5f2:	ee17 3a90 	vmov	r3, s15
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	ee07 3a90 	vmov	s15, r3
 800c5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c600:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c660 <arm_sin_f32+0x84>
 800c604:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c608:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c60c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c610:	ee17 3a90 	vmov	r3, s15
 800c614:	b29b      	uxth	r3, r3
 800c616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c61a:	d21a      	bcs.n	800c652 <arm_sin_f32+0x76>
 800c61c:	ee07 3a90 	vmov	s15, r3
 800c620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c624:	1c59      	adds	r1, r3, #1
 800c626:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c62a:	4a0e      	ldr	r2, [pc, #56]	; (800c664 <arm_sin_f32+0x88>)
 800c62c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c630:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c634:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c638:	ed93 7a00 	vldr	s14, [r3]
 800c63c:	edd2 6a00 	vldr	s13, [r2]
 800c640:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c644:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c64c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c650:	4770      	bx	lr
 800c652:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c656:	2101      	movs	r1, #1
 800c658:	2300      	movs	r3, #0
 800c65a:	e7e6      	b.n	800c62a <arm_sin_f32+0x4e>
 800c65c:	3e22f983 	.word	0x3e22f983
 800c660:	44000000 	.word	0x44000000
 800c664:	0803fc00 	.word	0x0803fc00

0800c668 <__errno>:
 800c668:	4b01      	ldr	r3, [pc, #4]	; (800c670 <__errno+0x8>)
 800c66a:	6818      	ldr	r0, [r3, #0]
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	200005f8 	.word	0x200005f8

0800c674 <std>:
 800c674:	2300      	movs	r3, #0
 800c676:	b510      	push	{r4, lr}
 800c678:	4604      	mov	r4, r0
 800c67a:	e9c0 3300 	strd	r3, r3, [r0]
 800c67e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c682:	6083      	str	r3, [r0, #8]
 800c684:	8181      	strh	r1, [r0, #12]
 800c686:	6643      	str	r3, [r0, #100]	; 0x64
 800c688:	81c2      	strh	r2, [r0, #14]
 800c68a:	6183      	str	r3, [r0, #24]
 800c68c:	4619      	mov	r1, r3
 800c68e:	2208      	movs	r2, #8
 800c690:	305c      	adds	r0, #92	; 0x5c
 800c692:	f000 f923 	bl	800c8dc <memset>
 800c696:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <std+0x38>)
 800c698:	6263      	str	r3, [r4, #36]	; 0x24
 800c69a:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <std+0x3c>)
 800c69c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c69e:	4b05      	ldr	r3, [pc, #20]	; (800c6b4 <std+0x40>)
 800c6a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6a2:	4b05      	ldr	r3, [pc, #20]	; (800c6b8 <std+0x44>)
 800c6a4:	6224      	str	r4, [r4, #32]
 800c6a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c6a8:	bd10      	pop	{r4, pc}
 800c6aa:	bf00      	nop
 800c6ac:	0800cc51 	.word	0x0800cc51
 800c6b0:	0800cc73 	.word	0x0800cc73
 800c6b4:	0800ccab 	.word	0x0800ccab
 800c6b8:	0800cccf 	.word	0x0800cccf

0800c6bc <_cleanup_r>:
 800c6bc:	4901      	ldr	r1, [pc, #4]	; (800c6c4 <_cleanup_r+0x8>)
 800c6be:	f000 b8af 	b.w	800c820 <_fwalk_reent>
 800c6c2:	bf00      	nop
 800c6c4:	0800ce65 	.word	0x0800ce65

0800c6c8 <__sfmoreglue>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	1e4a      	subs	r2, r1, #1
 800c6cc:	2568      	movs	r5, #104	; 0x68
 800c6ce:	4355      	muls	r5, r2
 800c6d0:	460e      	mov	r6, r1
 800c6d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c6d6:	f000 f959 	bl	800c98c <_malloc_r>
 800c6da:	4604      	mov	r4, r0
 800c6dc:	b140      	cbz	r0, 800c6f0 <__sfmoreglue+0x28>
 800c6de:	2100      	movs	r1, #0
 800c6e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c6e4:	300c      	adds	r0, #12
 800c6e6:	60a0      	str	r0, [r4, #8]
 800c6e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c6ec:	f000 f8f6 	bl	800c8dc <memset>
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}

0800c6f4 <__sfp_lock_acquire>:
 800c6f4:	4801      	ldr	r0, [pc, #4]	; (800c6fc <__sfp_lock_acquire+0x8>)
 800c6f6:	f000 b8d8 	b.w	800c8aa <__retarget_lock_acquire_recursive>
 800c6fa:	bf00      	nop
 800c6fc:	2001a9fc 	.word	0x2001a9fc

0800c700 <__sfp_lock_release>:
 800c700:	4801      	ldr	r0, [pc, #4]	; (800c708 <__sfp_lock_release+0x8>)
 800c702:	f000 b8d3 	b.w	800c8ac <__retarget_lock_release_recursive>
 800c706:	bf00      	nop
 800c708:	2001a9fc 	.word	0x2001a9fc

0800c70c <__sinit_lock_acquire>:
 800c70c:	4801      	ldr	r0, [pc, #4]	; (800c714 <__sinit_lock_acquire+0x8>)
 800c70e:	f000 b8cc 	b.w	800c8aa <__retarget_lock_acquire_recursive>
 800c712:	bf00      	nop
 800c714:	2001a9f7 	.word	0x2001a9f7

0800c718 <__sinit_lock_release>:
 800c718:	4801      	ldr	r0, [pc, #4]	; (800c720 <__sinit_lock_release+0x8>)
 800c71a:	f000 b8c7 	b.w	800c8ac <__retarget_lock_release_recursive>
 800c71e:	bf00      	nop
 800c720:	2001a9f7 	.word	0x2001a9f7

0800c724 <__sinit>:
 800c724:	b510      	push	{r4, lr}
 800c726:	4604      	mov	r4, r0
 800c728:	f7ff fff0 	bl	800c70c <__sinit_lock_acquire>
 800c72c:	69a3      	ldr	r3, [r4, #24]
 800c72e:	b11b      	cbz	r3, 800c738 <__sinit+0x14>
 800c730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c734:	f7ff bff0 	b.w	800c718 <__sinit_lock_release>
 800c738:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c73c:	6523      	str	r3, [r4, #80]	; 0x50
 800c73e:	4b13      	ldr	r3, [pc, #76]	; (800c78c <__sinit+0x68>)
 800c740:	4a13      	ldr	r2, [pc, #76]	; (800c790 <__sinit+0x6c>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	62a2      	str	r2, [r4, #40]	; 0x28
 800c746:	42a3      	cmp	r3, r4
 800c748:	bf04      	itt	eq
 800c74a:	2301      	moveq	r3, #1
 800c74c:	61a3      	streq	r3, [r4, #24]
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 f820 	bl	800c794 <__sfp>
 800c754:	6060      	str	r0, [r4, #4]
 800c756:	4620      	mov	r0, r4
 800c758:	f000 f81c 	bl	800c794 <__sfp>
 800c75c:	60a0      	str	r0, [r4, #8]
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 f818 	bl	800c794 <__sfp>
 800c764:	2200      	movs	r2, #0
 800c766:	60e0      	str	r0, [r4, #12]
 800c768:	2104      	movs	r1, #4
 800c76a:	6860      	ldr	r0, [r4, #4]
 800c76c:	f7ff ff82 	bl	800c674 <std>
 800c770:	68a0      	ldr	r0, [r4, #8]
 800c772:	2201      	movs	r2, #1
 800c774:	2109      	movs	r1, #9
 800c776:	f7ff ff7d 	bl	800c674 <std>
 800c77a:	68e0      	ldr	r0, [r4, #12]
 800c77c:	2202      	movs	r2, #2
 800c77e:	2112      	movs	r1, #18
 800c780:	f7ff ff78 	bl	800c674 <std>
 800c784:	2301      	movs	r3, #1
 800c786:	61a3      	str	r3, [r4, #24]
 800c788:	e7d2      	b.n	800c730 <__sinit+0xc>
 800c78a:	bf00      	nop
 800c78c:	08040464 	.word	0x08040464
 800c790:	0800c6bd 	.word	0x0800c6bd

0800c794 <__sfp>:
 800c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c796:	4607      	mov	r7, r0
 800c798:	f7ff ffac 	bl	800c6f4 <__sfp_lock_acquire>
 800c79c:	4b1e      	ldr	r3, [pc, #120]	; (800c818 <__sfp+0x84>)
 800c79e:	681e      	ldr	r6, [r3, #0]
 800c7a0:	69b3      	ldr	r3, [r6, #24]
 800c7a2:	b913      	cbnz	r3, 800c7aa <__sfp+0x16>
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f7ff ffbd 	bl	800c724 <__sinit>
 800c7aa:	3648      	adds	r6, #72	; 0x48
 800c7ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	d503      	bpl.n	800c7bc <__sfp+0x28>
 800c7b4:	6833      	ldr	r3, [r6, #0]
 800c7b6:	b30b      	cbz	r3, 800c7fc <__sfp+0x68>
 800c7b8:	6836      	ldr	r6, [r6, #0]
 800c7ba:	e7f7      	b.n	800c7ac <__sfp+0x18>
 800c7bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c7c0:	b9d5      	cbnz	r5, 800c7f8 <__sfp+0x64>
 800c7c2:	4b16      	ldr	r3, [pc, #88]	; (800c81c <__sfp+0x88>)
 800c7c4:	60e3      	str	r3, [r4, #12]
 800c7c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c7ca:	6665      	str	r5, [r4, #100]	; 0x64
 800c7cc:	f000 f86c 	bl	800c8a8 <__retarget_lock_init_recursive>
 800c7d0:	f7ff ff96 	bl	800c700 <__sfp_lock_release>
 800c7d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c7d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c7dc:	6025      	str	r5, [r4, #0]
 800c7de:	61a5      	str	r5, [r4, #24]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c7e8:	f000 f878 	bl	800c8dc <memset>
 800c7ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c7f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f8:	3468      	adds	r4, #104	; 0x68
 800c7fa:	e7d9      	b.n	800c7b0 <__sfp+0x1c>
 800c7fc:	2104      	movs	r1, #4
 800c7fe:	4638      	mov	r0, r7
 800c800:	f7ff ff62 	bl	800c6c8 <__sfmoreglue>
 800c804:	4604      	mov	r4, r0
 800c806:	6030      	str	r0, [r6, #0]
 800c808:	2800      	cmp	r0, #0
 800c80a:	d1d5      	bne.n	800c7b8 <__sfp+0x24>
 800c80c:	f7ff ff78 	bl	800c700 <__sfp_lock_release>
 800c810:	230c      	movs	r3, #12
 800c812:	603b      	str	r3, [r7, #0]
 800c814:	e7ee      	b.n	800c7f4 <__sfp+0x60>
 800c816:	bf00      	nop
 800c818:	08040464 	.word	0x08040464
 800c81c:	ffff0001 	.word	0xffff0001

0800c820 <_fwalk_reent>:
 800c820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c824:	4606      	mov	r6, r0
 800c826:	4688      	mov	r8, r1
 800c828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c82c:	2700      	movs	r7, #0
 800c82e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c832:	f1b9 0901 	subs.w	r9, r9, #1
 800c836:	d505      	bpl.n	800c844 <_fwalk_reent+0x24>
 800c838:	6824      	ldr	r4, [r4, #0]
 800c83a:	2c00      	cmp	r4, #0
 800c83c:	d1f7      	bne.n	800c82e <_fwalk_reent+0xe>
 800c83e:	4638      	mov	r0, r7
 800c840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c844:	89ab      	ldrh	r3, [r5, #12]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d907      	bls.n	800c85a <_fwalk_reent+0x3a>
 800c84a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c84e:	3301      	adds	r3, #1
 800c850:	d003      	beq.n	800c85a <_fwalk_reent+0x3a>
 800c852:	4629      	mov	r1, r5
 800c854:	4630      	mov	r0, r6
 800c856:	47c0      	blx	r8
 800c858:	4307      	orrs	r7, r0
 800c85a:	3568      	adds	r5, #104	; 0x68
 800c85c:	e7e9      	b.n	800c832 <_fwalk_reent+0x12>
	...

0800c860 <__libc_init_array>:
 800c860:	b570      	push	{r4, r5, r6, lr}
 800c862:	4d0d      	ldr	r5, [pc, #52]	; (800c898 <__libc_init_array+0x38>)
 800c864:	4c0d      	ldr	r4, [pc, #52]	; (800c89c <__libc_init_array+0x3c>)
 800c866:	1b64      	subs	r4, r4, r5
 800c868:	10a4      	asrs	r4, r4, #2
 800c86a:	2600      	movs	r6, #0
 800c86c:	42a6      	cmp	r6, r4
 800c86e:	d109      	bne.n	800c884 <__libc_init_array+0x24>
 800c870:	4d0b      	ldr	r5, [pc, #44]	; (800c8a0 <__libc_init_array+0x40>)
 800c872:	4c0c      	ldr	r4, [pc, #48]	; (800c8a4 <__libc_init_array+0x44>)
 800c874:	f001 fbce 	bl	800e014 <_init>
 800c878:	1b64      	subs	r4, r4, r5
 800c87a:	10a4      	asrs	r4, r4, #2
 800c87c:	2600      	movs	r6, #0
 800c87e:	42a6      	cmp	r6, r4
 800c880:	d105      	bne.n	800c88e <__libc_init_array+0x2e>
 800c882:	bd70      	pop	{r4, r5, r6, pc}
 800c884:	f855 3b04 	ldr.w	r3, [r5], #4
 800c888:	4798      	blx	r3
 800c88a:	3601      	adds	r6, #1
 800c88c:	e7ee      	b.n	800c86c <__libc_init_array+0xc>
 800c88e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c892:	4798      	blx	r3
 800c894:	3601      	adds	r6, #1
 800c896:	e7f2      	b.n	800c87e <__libc_init_array+0x1e>
 800c898:	08040568 	.word	0x08040568
 800c89c:	08040568 	.word	0x08040568
 800c8a0:	08040568 	.word	0x08040568
 800c8a4:	0804056c 	.word	0x0804056c

0800c8a8 <__retarget_lock_init_recursive>:
 800c8a8:	4770      	bx	lr

0800c8aa <__retarget_lock_acquire_recursive>:
 800c8aa:	4770      	bx	lr

0800c8ac <__retarget_lock_release_recursive>:
 800c8ac:	4770      	bx	lr
	...

0800c8b0 <malloc>:
 800c8b0:	4b02      	ldr	r3, [pc, #8]	; (800c8bc <malloc+0xc>)
 800c8b2:	4601      	mov	r1, r0
 800c8b4:	6818      	ldr	r0, [r3, #0]
 800c8b6:	f000 b869 	b.w	800c98c <_malloc_r>
 800c8ba:	bf00      	nop
 800c8bc:	200005f8 	.word	0x200005f8

0800c8c0 <memcpy>:
 800c8c0:	440a      	add	r2, r1
 800c8c2:	4291      	cmp	r1, r2
 800c8c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8c8:	d100      	bne.n	800c8cc <memcpy+0xc>
 800c8ca:	4770      	bx	lr
 800c8cc:	b510      	push	{r4, lr}
 800c8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8d6:	4291      	cmp	r1, r2
 800c8d8:	d1f9      	bne.n	800c8ce <memcpy+0xe>
 800c8da:	bd10      	pop	{r4, pc}

0800c8dc <memset>:
 800c8dc:	4402      	add	r2, r0
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d100      	bne.n	800c8e6 <memset+0xa>
 800c8e4:	4770      	bx	lr
 800c8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ea:	e7f9      	b.n	800c8e0 <memset+0x4>

0800c8ec <_free_r>:
 800c8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8ee:	2900      	cmp	r1, #0
 800c8f0:	d048      	beq.n	800c984 <_free_r+0x98>
 800c8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8f6:	9001      	str	r0, [sp, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f1a1 0404 	sub.w	r4, r1, #4
 800c8fe:	bfb8      	it	lt
 800c900:	18e4      	addlt	r4, r4, r3
 800c902:	f000 fb0f 	bl	800cf24 <__malloc_lock>
 800c906:	4a20      	ldr	r2, [pc, #128]	; (800c988 <_free_r+0x9c>)
 800c908:	9801      	ldr	r0, [sp, #4]
 800c90a:	6813      	ldr	r3, [r2, #0]
 800c90c:	4615      	mov	r5, r2
 800c90e:	b933      	cbnz	r3, 800c91e <_free_r+0x32>
 800c910:	6063      	str	r3, [r4, #4]
 800c912:	6014      	str	r4, [r2, #0]
 800c914:	b003      	add	sp, #12
 800c916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c91a:	f000 bb09 	b.w	800cf30 <__malloc_unlock>
 800c91e:	42a3      	cmp	r3, r4
 800c920:	d90b      	bls.n	800c93a <_free_r+0x4e>
 800c922:	6821      	ldr	r1, [r4, #0]
 800c924:	1862      	adds	r2, r4, r1
 800c926:	4293      	cmp	r3, r2
 800c928:	bf04      	itt	eq
 800c92a:	681a      	ldreq	r2, [r3, #0]
 800c92c:	685b      	ldreq	r3, [r3, #4]
 800c92e:	6063      	str	r3, [r4, #4]
 800c930:	bf04      	itt	eq
 800c932:	1852      	addeq	r2, r2, r1
 800c934:	6022      	streq	r2, [r4, #0]
 800c936:	602c      	str	r4, [r5, #0]
 800c938:	e7ec      	b.n	800c914 <_free_r+0x28>
 800c93a:	461a      	mov	r2, r3
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	b10b      	cbz	r3, 800c944 <_free_r+0x58>
 800c940:	42a3      	cmp	r3, r4
 800c942:	d9fa      	bls.n	800c93a <_free_r+0x4e>
 800c944:	6811      	ldr	r1, [r2, #0]
 800c946:	1855      	adds	r5, r2, r1
 800c948:	42a5      	cmp	r5, r4
 800c94a:	d10b      	bne.n	800c964 <_free_r+0x78>
 800c94c:	6824      	ldr	r4, [r4, #0]
 800c94e:	4421      	add	r1, r4
 800c950:	1854      	adds	r4, r2, r1
 800c952:	42a3      	cmp	r3, r4
 800c954:	6011      	str	r1, [r2, #0]
 800c956:	d1dd      	bne.n	800c914 <_free_r+0x28>
 800c958:	681c      	ldr	r4, [r3, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	6053      	str	r3, [r2, #4]
 800c95e:	4421      	add	r1, r4
 800c960:	6011      	str	r1, [r2, #0]
 800c962:	e7d7      	b.n	800c914 <_free_r+0x28>
 800c964:	d902      	bls.n	800c96c <_free_r+0x80>
 800c966:	230c      	movs	r3, #12
 800c968:	6003      	str	r3, [r0, #0]
 800c96a:	e7d3      	b.n	800c914 <_free_r+0x28>
 800c96c:	6825      	ldr	r5, [r4, #0]
 800c96e:	1961      	adds	r1, r4, r5
 800c970:	428b      	cmp	r3, r1
 800c972:	bf04      	itt	eq
 800c974:	6819      	ldreq	r1, [r3, #0]
 800c976:	685b      	ldreq	r3, [r3, #4]
 800c978:	6063      	str	r3, [r4, #4]
 800c97a:	bf04      	itt	eq
 800c97c:	1949      	addeq	r1, r1, r5
 800c97e:	6021      	streq	r1, [r4, #0]
 800c980:	6054      	str	r4, [r2, #4]
 800c982:	e7c7      	b.n	800c914 <_free_r+0x28>
 800c984:	b003      	add	sp, #12
 800c986:	bd30      	pop	{r4, r5, pc}
 800c988:	20002018 	.word	0x20002018

0800c98c <_malloc_r>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	1ccd      	adds	r5, r1, #3
 800c990:	f025 0503 	bic.w	r5, r5, #3
 800c994:	3508      	adds	r5, #8
 800c996:	2d0c      	cmp	r5, #12
 800c998:	bf38      	it	cc
 800c99a:	250c      	movcc	r5, #12
 800c99c:	2d00      	cmp	r5, #0
 800c99e:	4606      	mov	r6, r0
 800c9a0:	db01      	blt.n	800c9a6 <_malloc_r+0x1a>
 800c9a2:	42a9      	cmp	r1, r5
 800c9a4:	d903      	bls.n	800c9ae <_malloc_r+0x22>
 800c9a6:	230c      	movs	r3, #12
 800c9a8:	6033      	str	r3, [r6, #0]
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ae:	f000 fab9 	bl	800cf24 <__malloc_lock>
 800c9b2:	4921      	ldr	r1, [pc, #132]	; (800ca38 <_malloc_r+0xac>)
 800c9b4:	680a      	ldr	r2, [r1, #0]
 800c9b6:	4614      	mov	r4, r2
 800c9b8:	b99c      	cbnz	r4, 800c9e2 <_malloc_r+0x56>
 800c9ba:	4f20      	ldr	r7, [pc, #128]	; (800ca3c <_malloc_r+0xb0>)
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	b923      	cbnz	r3, 800c9ca <_malloc_r+0x3e>
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	f000 f914 	bl	800cbf0 <_sbrk_r>
 800c9c8:	6038      	str	r0, [r7, #0]
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f000 f90f 	bl	800cbf0 <_sbrk_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d123      	bne.n	800ca1e <_malloc_r+0x92>
 800c9d6:	230c      	movs	r3, #12
 800c9d8:	6033      	str	r3, [r6, #0]
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f000 faa8 	bl	800cf30 <__malloc_unlock>
 800c9e0:	e7e3      	b.n	800c9aa <_malloc_r+0x1e>
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	1b5b      	subs	r3, r3, r5
 800c9e6:	d417      	bmi.n	800ca18 <_malloc_r+0x8c>
 800c9e8:	2b0b      	cmp	r3, #11
 800c9ea:	d903      	bls.n	800c9f4 <_malloc_r+0x68>
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	441c      	add	r4, r3
 800c9f0:	6025      	str	r5, [r4, #0]
 800c9f2:	e004      	b.n	800c9fe <_malloc_r+0x72>
 800c9f4:	6863      	ldr	r3, [r4, #4]
 800c9f6:	42a2      	cmp	r2, r4
 800c9f8:	bf0c      	ite	eq
 800c9fa:	600b      	streq	r3, [r1, #0]
 800c9fc:	6053      	strne	r3, [r2, #4]
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f000 fa96 	bl	800cf30 <__malloc_unlock>
 800ca04:	f104 000b 	add.w	r0, r4, #11
 800ca08:	1d23      	adds	r3, r4, #4
 800ca0a:	f020 0007 	bic.w	r0, r0, #7
 800ca0e:	1ac2      	subs	r2, r0, r3
 800ca10:	d0cc      	beq.n	800c9ac <_malloc_r+0x20>
 800ca12:	1a1b      	subs	r3, r3, r0
 800ca14:	50a3      	str	r3, [r4, r2]
 800ca16:	e7c9      	b.n	800c9ac <_malloc_r+0x20>
 800ca18:	4622      	mov	r2, r4
 800ca1a:	6864      	ldr	r4, [r4, #4]
 800ca1c:	e7cc      	b.n	800c9b8 <_malloc_r+0x2c>
 800ca1e:	1cc4      	adds	r4, r0, #3
 800ca20:	f024 0403 	bic.w	r4, r4, #3
 800ca24:	42a0      	cmp	r0, r4
 800ca26:	d0e3      	beq.n	800c9f0 <_malloc_r+0x64>
 800ca28:	1a21      	subs	r1, r4, r0
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f000 f8e0 	bl	800cbf0 <_sbrk_r>
 800ca30:	3001      	adds	r0, #1
 800ca32:	d1dd      	bne.n	800c9f0 <_malloc_r+0x64>
 800ca34:	e7cf      	b.n	800c9d6 <_malloc_r+0x4a>
 800ca36:	bf00      	nop
 800ca38:	20002018 	.word	0x20002018
 800ca3c:	2000201c 	.word	0x2000201c

0800ca40 <srand>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <srand+0x44>)
 800ca44:	681d      	ldr	r5, [r3, #0]
 800ca46:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ca48:	4604      	mov	r4, r0
 800ca4a:	b9b3      	cbnz	r3, 800ca7a <srand+0x3a>
 800ca4c:	2018      	movs	r0, #24
 800ca4e:	f7ff ff2f 	bl	800c8b0 <malloc>
 800ca52:	4602      	mov	r2, r0
 800ca54:	63a8      	str	r0, [r5, #56]	; 0x38
 800ca56:	b920      	cbnz	r0, 800ca62 <srand+0x22>
 800ca58:	4b0b      	ldr	r3, [pc, #44]	; (800ca88 <srand+0x48>)
 800ca5a:	480c      	ldr	r0, [pc, #48]	; (800ca8c <srand+0x4c>)
 800ca5c:	2142      	movs	r1, #66	; 0x42
 800ca5e:	f000 f94d 	bl	800ccfc <__assert_func>
 800ca62:	490b      	ldr	r1, [pc, #44]	; (800ca90 <srand+0x50>)
 800ca64:	4b0b      	ldr	r3, [pc, #44]	; (800ca94 <srand+0x54>)
 800ca66:	e9c0 1300 	strd	r1, r3, [r0]
 800ca6a:	4b0b      	ldr	r3, [pc, #44]	; (800ca98 <srand+0x58>)
 800ca6c:	6083      	str	r3, [r0, #8]
 800ca6e:	230b      	movs	r3, #11
 800ca70:	8183      	strh	r3, [r0, #12]
 800ca72:	2100      	movs	r1, #0
 800ca74:	2001      	movs	r0, #1
 800ca76:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ca7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	611c      	str	r4, [r3, #16]
 800ca80:	615a      	str	r2, [r3, #20]
 800ca82:	bd38      	pop	{r3, r4, r5, pc}
 800ca84:	200005f8 	.word	0x200005f8
 800ca88:	08040468 	.word	0x08040468
 800ca8c:	0804047f 	.word	0x0804047f
 800ca90:	abcd330e 	.word	0xabcd330e
 800ca94:	e66d1234 	.word	0xe66d1234
 800ca98:	0005deec 	.word	0x0005deec

0800ca9c <rand>:
 800ca9c:	4b17      	ldr	r3, [pc, #92]	; (800cafc <rand+0x60>)
 800ca9e:	b510      	push	{r4, lr}
 800caa0:	681c      	ldr	r4, [r3, #0]
 800caa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800caa4:	b9b3      	cbnz	r3, 800cad4 <rand+0x38>
 800caa6:	2018      	movs	r0, #24
 800caa8:	f7ff ff02 	bl	800c8b0 <malloc>
 800caac:	63a0      	str	r0, [r4, #56]	; 0x38
 800caae:	b928      	cbnz	r0, 800cabc <rand+0x20>
 800cab0:	4602      	mov	r2, r0
 800cab2:	4b13      	ldr	r3, [pc, #76]	; (800cb00 <rand+0x64>)
 800cab4:	4813      	ldr	r0, [pc, #76]	; (800cb04 <rand+0x68>)
 800cab6:	214e      	movs	r1, #78	; 0x4e
 800cab8:	f000 f920 	bl	800ccfc <__assert_func>
 800cabc:	4a12      	ldr	r2, [pc, #72]	; (800cb08 <rand+0x6c>)
 800cabe:	4b13      	ldr	r3, [pc, #76]	; (800cb0c <rand+0x70>)
 800cac0:	e9c0 2300 	strd	r2, r3, [r0]
 800cac4:	4b12      	ldr	r3, [pc, #72]	; (800cb10 <rand+0x74>)
 800cac6:	6083      	str	r3, [r0, #8]
 800cac8:	230b      	movs	r3, #11
 800caca:	8183      	strh	r3, [r0, #12]
 800cacc:	2201      	movs	r2, #1
 800cace:	2300      	movs	r3, #0
 800cad0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cad4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cad6:	480f      	ldr	r0, [pc, #60]	; (800cb14 <rand+0x78>)
 800cad8:	690a      	ldr	r2, [r1, #16]
 800cada:	694b      	ldr	r3, [r1, #20]
 800cadc:	4c0e      	ldr	r4, [pc, #56]	; (800cb18 <rand+0x7c>)
 800cade:	4350      	muls	r0, r2
 800cae0:	fb04 0003 	mla	r0, r4, r3, r0
 800cae4:	fba2 3404 	umull	r3, r4, r2, r4
 800cae8:	1c5a      	adds	r2, r3, #1
 800caea:	4404      	add	r4, r0
 800caec:	f144 0000 	adc.w	r0, r4, #0
 800caf0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800caf4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	bf00      	nop
 800cafc:	200005f8 	.word	0x200005f8
 800cb00:	08040468 	.word	0x08040468
 800cb04:	0804047f 	.word	0x0804047f
 800cb08:	abcd330e 	.word	0xabcd330e
 800cb0c:	e66d1234 	.word	0xe66d1234
 800cb10:	0005deec 	.word	0x0005deec
 800cb14:	5851f42d 	.word	0x5851f42d
 800cb18:	4c957f2d 	.word	0x4c957f2d

0800cb1c <cleanup_glue>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	460c      	mov	r4, r1
 800cb20:	6809      	ldr	r1, [r1, #0]
 800cb22:	4605      	mov	r5, r0
 800cb24:	b109      	cbz	r1, 800cb2a <cleanup_glue+0xe>
 800cb26:	f7ff fff9 	bl	800cb1c <cleanup_glue>
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb32:	f7ff bedb 	b.w	800c8ec <_free_r>
	...

0800cb38 <_reclaim_reent>:
 800cb38:	4b2c      	ldr	r3, [pc, #176]	; (800cbec <_reclaim_reent+0xb4>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4283      	cmp	r3, r0
 800cb3e:	b570      	push	{r4, r5, r6, lr}
 800cb40:	4604      	mov	r4, r0
 800cb42:	d051      	beq.n	800cbe8 <_reclaim_reent+0xb0>
 800cb44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb46:	b143      	cbz	r3, 800cb5a <_reclaim_reent+0x22>
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d14a      	bne.n	800cbe4 <_reclaim_reent+0xac>
 800cb4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb50:	6819      	ldr	r1, [r3, #0]
 800cb52:	b111      	cbz	r1, 800cb5a <_reclaim_reent+0x22>
 800cb54:	4620      	mov	r0, r4
 800cb56:	f7ff fec9 	bl	800c8ec <_free_r>
 800cb5a:	6961      	ldr	r1, [r4, #20]
 800cb5c:	b111      	cbz	r1, 800cb64 <_reclaim_reent+0x2c>
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f7ff fec4 	bl	800c8ec <_free_r>
 800cb64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb66:	b111      	cbz	r1, 800cb6e <_reclaim_reent+0x36>
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f7ff febf 	bl	800c8ec <_free_r>
 800cb6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb70:	b111      	cbz	r1, 800cb78 <_reclaim_reent+0x40>
 800cb72:	4620      	mov	r0, r4
 800cb74:	f7ff feba 	bl	800c8ec <_free_r>
 800cb78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cb7a:	b111      	cbz	r1, 800cb82 <_reclaim_reent+0x4a>
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f7ff feb5 	bl	800c8ec <_free_r>
 800cb82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb84:	b111      	cbz	r1, 800cb8c <_reclaim_reent+0x54>
 800cb86:	4620      	mov	r0, r4
 800cb88:	f7ff feb0 	bl	800c8ec <_free_r>
 800cb8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cb8e:	b111      	cbz	r1, 800cb96 <_reclaim_reent+0x5e>
 800cb90:	4620      	mov	r0, r4
 800cb92:	f7ff feab 	bl	800c8ec <_free_r>
 800cb96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb98:	b111      	cbz	r1, 800cba0 <_reclaim_reent+0x68>
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f7ff fea6 	bl	800c8ec <_free_r>
 800cba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cba2:	b111      	cbz	r1, 800cbaa <_reclaim_reent+0x72>
 800cba4:	4620      	mov	r0, r4
 800cba6:	f7ff fea1 	bl	800c8ec <_free_r>
 800cbaa:	69a3      	ldr	r3, [r4, #24]
 800cbac:	b1e3      	cbz	r3, 800cbe8 <_reclaim_reent+0xb0>
 800cbae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	4798      	blx	r3
 800cbb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cbb6:	b1b9      	cbz	r1, 800cbe8 <_reclaim_reent+0xb0>
 800cbb8:	4620      	mov	r0, r4
 800cbba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbbe:	f7ff bfad 	b.w	800cb1c <cleanup_glue>
 800cbc2:	5949      	ldr	r1, [r1, r5]
 800cbc4:	b941      	cbnz	r1, 800cbd8 <_reclaim_reent+0xa0>
 800cbc6:	3504      	adds	r5, #4
 800cbc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbca:	2d80      	cmp	r5, #128	; 0x80
 800cbcc:	68d9      	ldr	r1, [r3, #12]
 800cbce:	d1f8      	bne.n	800cbc2 <_reclaim_reent+0x8a>
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f7ff fe8b 	bl	800c8ec <_free_r>
 800cbd6:	e7ba      	b.n	800cb4e <_reclaim_reent+0x16>
 800cbd8:	680e      	ldr	r6, [r1, #0]
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f7ff fe86 	bl	800c8ec <_free_r>
 800cbe0:	4631      	mov	r1, r6
 800cbe2:	e7ef      	b.n	800cbc4 <_reclaim_reent+0x8c>
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	e7ef      	b.n	800cbc8 <_reclaim_reent+0x90>
 800cbe8:	bd70      	pop	{r4, r5, r6, pc}
 800cbea:	bf00      	nop
 800cbec:	200005f8 	.word	0x200005f8

0800cbf0 <_sbrk_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4d06      	ldr	r5, [pc, #24]	; (800cc0c <_sbrk_r+0x1c>)
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	602b      	str	r3, [r5, #0]
 800cbfc:	f7fe fd18 	bl	800b630 <_sbrk>
 800cc00:	1c43      	adds	r3, r0, #1
 800cc02:	d102      	bne.n	800cc0a <_sbrk_r+0x1a>
 800cc04:	682b      	ldr	r3, [r5, #0]
 800cc06:	b103      	cbz	r3, 800cc0a <_sbrk_r+0x1a>
 800cc08:	6023      	str	r3, [r4, #0]
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	2001aa00 	.word	0x2001aa00

0800cc10 <siprintf>:
 800cc10:	b40e      	push	{r1, r2, r3}
 800cc12:	b500      	push	{lr}
 800cc14:	b09c      	sub	sp, #112	; 0x70
 800cc16:	ab1d      	add	r3, sp, #116	; 0x74
 800cc18:	9002      	str	r0, [sp, #8]
 800cc1a:	9006      	str	r0, [sp, #24]
 800cc1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc20:	4809      	ldr	r0, [pc, #36]	; (800cc48 <siprintf+0x38>)
 800cc22:	9107      	str	r1, [sp, #28]
 800cc24:	9104      	str	r1, [sp, #16]
 800cc26:	4909      	ldr	r1, [pc, #36]	; (800cc4c <siprintf+0x3c>)
 800cc28:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc2c:	9105      	str	r1, [sp, #20]
 800cc2e:	6800      	ldr	r0, [r0, #0]
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	a902      	add	r1, sp, #8
 800cc34:	f000 f9de 	bl	800cff4 <_svfiprintf_r>
 800cc38:	9b02      	ldr	r3, [sp, #8]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	701a      	strb	r2, [r3, #0]
 800cc3e:	b01c      	add	sp, #112	; 0x70
 800cc40:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc44:	b003      	add	sp, #12
 800cc46:	4770      	bx	lr
 800cc48:	200005f8 	.word	0x200005f8
 800cc4c:	ffff0208 	.word	0xffff0208

0800cc50 <__sread>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	460c      	mov	r4, r1
 800cc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc58:	f000 fdba 	bl	800d7d0 <_read_r>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	bfab      	itete	ge
 800cc60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc62:	89a3      	ldrhlt	r3, [r4, #12]
 800cc64:	181b      	addge	r3, r3, r0
 800cc66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc6a:	bfac      	ite	ge
 800cc6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc6e:	81a3      	strhlt	r3, [r4, #12]
 800cc70:	bd10      	pop	{r4, pc}

0800cc72 <__swrite>:
 800cc72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc76:	461f      	mov	r7, r3
 800cc78:	898b      	ldrh	r3, [r1, #12]
 800cc7a:	05db      	lsls	r3, r3, #23
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	460c      	mov	r4, r1
 800cc80:	4616      	mov	r6, r2
 800cc82:	d505      	bpl.n	800cc90 <__swrite+0x1e>
 800cc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc88:	2302      	movs	r3, #2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f000 f938 	bl	800cf00 <_lseek_r>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc9a:	81a3      	strh	r3, [r4, #12]
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	463b      	mov	r3, r7
 800cca0:	4628      	mov	r0, r5
 800cca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cca6:	f000 b817 	b.w	800ccd8 <_write_r>

0800ccaa <__sseek>:
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	460c      	mov	r4, r1
 800ccae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb2:	f000 f925 	bl	800cf00 <_lseek_r>
 800ccb6:	1c43      	adds	r3, r0, #1
 800ccb8:	89a3      	ldrh	r3, [r4, #12]
 800ccba:	bf15      	itete	ne
 800ccbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccc6:	81a3      	strheq	r3, [r4, #12]
 800ccc8:	bf18      	it	ne
 800ccca:	81a3      	strhne	r3, [r4, #12]
 800cccc:	bd10      	pop	{r4, pc}

0800ccce <__sclose>:
 800ccce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd2:	f000 b831 	b.w	800cd38 <_close_r>
	...

0800ccd8 <_write_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	4d07      	ldr	r5, [pc, #28]	; (800ccf8 <_write_r+0x20>)
 800ccdc:	4604      	mov	r4, r0
 800ccde:	4608      	mov	r0, r1
 800cce0:	4611      	mov	r1, r2
 800cce2:	2200      	movs	r2, #0
 800cce4:	602a      	str	r2, [r5, #0]
 800cce6:	461a      	mov	r2, r3
 800cce8:	f7fe fc51 	bl	800b58e <_write>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_write_r+0x1e>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_write_r+0x1e>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	2001aa00 	.word	0x2001aa00

0800ccfc <__assert_func>:
 800ccfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccfe:	4614      	mov	r4, r2
 800cd00:	461a      	mov	r2, r3
 800cd02:	4b09      	ldr	r3, [pc, #36]	; (800cd28 <__assert_func+0x2c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4605      	mov	r5, r0
 800cd08:	68d8      	ldr	r0, [r3, #12]
 800cd0a:	b14c      	cbz	r4, 800cd20 <__assert_func+0x24>
 800cd0c:	4b07      	ldr	r3, [pc, #28]	; (800cd2c <__assert_func+0x30>)
 800cd0e:	9100      	str	r1, [sp, #0]
 800cd10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd14:	4906      	ldr	r1, [pc, #24]	; (800cd30 <__assert_func+0x34>)
 800cd16:	462b      	mov	r3, r5
 800cd18:	f000 f8e0 	bl	800cedc <fiprintf>
 800cd1c:	f000 fe2a 	bl	800d974 <abort>
 800cd20:	4b04      	ldr	r3, [pc, #16]	; (800cd34 <__assert_func+0x38>)
 800cd22:	461c      	mov	r4, r3
 800cd24:	e7f3      	b.n	800cd0e <__assert_func+0x12>
 800cd26:	bf00      	nop
 800cd28:	200005f8 	.word	0x200005f8
 800cd2c:	080404de 	.word	0x080404de
 800cd30:	080404eb 	.word	0x080404eb
 800cd34:	08040519 	.word	0x08040519

0800cd38 <_close_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d06      	ldr	r5, [pc, #24]	; (800cd54 <_close_r+0x1c>)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	602b      	str	r3, [r5, #0]
 800cd44:	f7fe fc3f 	bl	800b5c6 <_close>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_close_r+0x1a>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_close_r+0x1a>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	2001aa00 	.word	0x2001aa00

0800cd58 <__sflush_r>:
 800cd58:	898a      	ldrh	r2, [r1, #12]
 800cd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5e:	4605      	mov	r5, r0
 800cd60:	0710      	lsls	r0, r2, #28
 800cd62:	460c      	mov	r4, r1
 800cd64:	d458      	bmi.n	800ce18 <__sflush_r+0xc0>
 800cd66:	684b      	ldr	r3, [r1, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	dc05      	bgt.n	800cd78 <__sflush_r+0x20>
 800cd6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	dc02      	bgt.n	800cd78 <__sflush_r+0x20>
 800cd72:	2000      	movs	r0, #0
 800cd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd7a:	2e00      	cmp	r6, #0
 800cd7c:	d0f9      	beq.n	800cd72 <__sflush_r+0x1a>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd84:	682f      	ldr	r7, [r5, #0]
 800cd86:	602b      	str	r3, [r5, #0]
 800cd88:	d032      	beq.n	800cdf0 <__sflush_r+0x98>
 800cd8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	075a      	lsls	r2, r3, #29
 800cd90:	d505      	bpl.n	800cd9e <__sflush_r+0x46>
 800cd92:	6863      	ldr	r3, [r4, #4]
 800cd94:	1ac0      	subs	r0, r0, r3
 800cd96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd98:	b10b      	cbz	r3, 800cd9e <__sflush_r+0x46>
 800cd9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd9c:	1ac0      	subs	r0, r0, r3
 800cd9e:	2300      	movs	r3, #0
 800cda0:	4602      	mov	r2, r0
 800cda2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cda4:	6a21      	ldr	r1, [r4, #32]
 800cda6:	4628      	mov	r0, r5
 800cda8:	47b0      	blx	r6
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	d106      	bne.n	800cdbe <__sflush_r+0x66>
 800cdb0:	6829      	ldr	r1, [r5, #0]
 800cdb2:	291d      	cmp	r1, #29
 800cdb4:	d82c      	bhi.n	800ce10 <__sflush_r+0xb8>
 800cdb6:	4a2a      	ldr	r2, [pc, #168]	; (800ce60 <__sflush_r+0x108>)
 800cdb8:	40ca      	lsrs	r2, r1
 800cdba:	07d6      	lsls	r6, r2, #31
 800cdbc:	d528      	bpl.n	800ce10 <__sflush_r+0xb8>
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	6062      	str	r2, [r4, #4]
 800cdc2:	04d9      	lsls	r1, r3, #19
 800cdc4:	6922      	ldr	r2, [r4, #16]
 800cdc6:	6022      	str	r2, [r4, #0]
 800cdc8:	d504      	bpl.n	800cdd4 <__sflush_r+0x7c>
 800cdca:	1c42      	adds	r2, r0, #1
 800cdcc:	d101      	bne.n	800cdd2 <__sflush_r+0x7a>
 800cdce:	682b      	ldr	r3, [r5, #0]
 800cdd0:	b903      	cbnz	r3, 800cdd4 <__sflush_r+0x7c>
 800cdd2:	6560      	str	r0, [r4, #84]	; 0x54
 800cdd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdd6:	602f      	str	r7, [r5, #0]
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	d0ca      	beq.n	800cd72 <__sflush_r+0x1a>
 800cddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cde0:	4299      	cmp	r1, r3
 800cde2:	d002      	beq.n	800cdea <__sflush_r+0x92>
 800cde4:	4628      	mov	r0, r5
 800cde6:	f7ff fd81 	bl	800c8ec <_free_r>
 800cdea:	2000      	movs	r0, #0
 800cdec:	6360      	str	r0, [r4, #52]	; 0x34
 800cdee:	e7c1      	b.n	800cd74 <__sflush_r+0x1c>
 800cdf0:	6a21      	ldr	r1, [r4, #32]
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	47b0      	blx	r6
 800cdf8:	1c41      	adds	r1, r0, #1
 800cdfa:	d1c7      	bne.n	800cd8c <__sflush_r+0x34>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d0c4      	beq.n	800cd8c <__sflush_r+0x34>
 800ce02:	2b1d      	cmp	r3, #29
 800ce04:	d001      	beq.n	800ce0a <__sflush_r+0xb2>
 800ce06:	2b16      	cmp	r3, #22
 800ce08:	d101      	bne.n	800ce0e <__sflush_r+0xb6>
 800ce0a:	602f      	str	r7, [r5, #0]
 800ce0c:	e7b1      	b.n	800cd72 <__sflush_r+0x1a>
 800ce0e:	89a3      	ldrh	r3, [r4, #12]
 800ce10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce14:	81a3      	strh	r3, [r4, #12]
 800ce16:	e7ad      	b.n	800cd74 <__sflush_r+0x1c>
 800ce18:	690f      	ldr	r7, [r1, #16]
 800ce1a:	2f00      	cmp	r7, #0
 800ce1c:	d0a9      	beq.n	800cd72 <__sflush_r+0x1a>
 800ce1e:	0793      	lsls	r3, r2, #30
 800ce20:	680e      	ldr	r6, [r1, #0]
 800ce22:	bf08      	it	eq
 800ce24:	694b      	ldreq	r3, [r1, #20]
 800ce26:	600f      	str	r7, [r1, #0]
 800ce28:	bf18      	it	ne
 800ce2a:	2300      	movne	r3, #0
 800ce2c:	eba6 0807 	sub.w	r8, r6, r7
 800ce30:	608b      	str	r3, [r1, #8]
 800ce32:	f1b8 0f00 	cmp.w	r8, #0
 800ce36:	dd9c      	ble.n	800cd72 <__sflush_r+0x1a>
 800ce38:	6a21      	ldr	r1, [r4, #32]
 800ce3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce3c:	4643      	mov	r3, r8
 800ce3e:	463a      	mov	r2, r7
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b0      	blx	r6
 800ce44:	2800      	cmp	r0, #0
 800ce46:	dc06      	bgt.n	800ce56 <__sflush_r+0xfe>
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	e78e      	b.n	800cd74 <__sflush_r+0x1c>
 800ce56:	4407      	add	r7, r0
 800ce58:	eba8 0800 	sub.w	r8, r8, r0
 800ce5c:	e7e9      	b.n	800ce32 <__sflush_r+0xda>
 800ce5e:	bf00      	nop
 800ce60:	20400001 	.word	0x20400001

0800ce64 <_fflush_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	690b      	ldr	r3, [r1, #16]
 800ce68:	4605      	mov	r5, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	b913      	cbnz	r3, 800ce74 <_fflush_r+0x10>
 800ce6e:	2500      	movs	r5, #0
 800ce70:	4628      	mov	r0, r5
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	b118      	cbz	r0, 800ce7e <_fflush_r+0x1a>
 800ce76:	6983      	ldr	r3, [r0, #24]
 800ce78:	b90b      	cbnz	r3, 800ce7e <_fflush_r+0x1a>
 800ce7a:	f7ff fc53 	bl	800c724 <__sinit>
 800ce7e:	4b14      	ldr	r3, [pc, #80]	; (800ced0 <_fflush_r+0x6c>)
 800ce80:	429c      	cmp	r4, r3
 800ce82:	d11b      	bne.n	800cebc <_fflush_r+0x58>
 800ce84:	686c      	ldr	r4, [r5, #4]
 800ce86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0ef      	beq.n	800ce6e <_fflush_r+0xa>
 800ce8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce90:	07d0      	lsls	r0, r2, #31
 800ce92:	d404      	bmi.n	800ce9e <_fflush_r+0x3a>
 800ce94:	0599      	lsls	r1, r3, #22
 800ce96:	d402      	bmi.n	800ce9e <_fflush_r+0x3a>
 800ce98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce9a:	f7ff fd06 	bl	800c8aa <__retarget_lock_acquire_recursive>
 800ce9e:	4628      	mov	r0, r5
 800cea0:	4621      	mov	r1, r4
 800cea2:	f7ff ff59 	bl	800cd58 <__sflush_r>
 800cea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cea8:	07da      	lsls	r2, r3, #31
 800ceaa:	4605      	mov	r5, r0
 800ceac:	d4e0      	bmi.n	800ce70 <_fflush_r+0xc>
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	059b      	lsls	r3, r3, #22
 800ceb2:	d4dd      	bmi.n	800ce70 <_fflush_r+0xc>
 800ceb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceb6:	f7ff fcf9 	bl	800c8ac <__retarget_lock_release_recursive>
 800ceba:	e7d9      	b.n	800ce70 <_fflush_r+0xc>
 800cebc:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <_fflush_r+0x70>)
 800cebe:	429c      	cmp	r4, r3
 800cec0:	d101      	bne.n	800cec6 <_fflush_r+0x62>
 800cec2:	68ac      	ldr	r4, [r5, #8]
 800cec4:	e7df      	b.n	800ce86 <_fflush_r+0x22>
 800cec6:	4b04      	ldr	r3, [pc, #16]	; (800ced8 <_fflush_r+0x74>)
 800cec8:	429c      	cmp	r4, r3
 800ceca:	bf08      	it	eq
 800cecc:	68ec      	ldreq	r4, [r5, #12]
 800cece:	e7da      	b.n	800ce86 <_fflush_r+0x22>
 800ced0:	08040424 	.word	0x08040424
 800ced4:	08040444 	.word	0x08040444
 800ced8:	08040404 	.word	0x08040404

0800cedc <fiprintf>:
 800cedc:	b40e      	push	{r1, r2, r3}
 800cede:	b503      	push	{r0, r1, lr}
 800cee0:	4601      	mov	r1, r0
 800cee2:	ab03      	add	r3, sp, #12
 800cee4:	4805      	ldr	r0, [pc, #20]	; (800cefc <fiprintf+0x20>)
 800cee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceea:	6800      	ldr	r0, [r0, #0]
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	f000 f9ab 	bl	800d248 <_vfiprintf_r>
 800cef2:	b002      	add	sp, #8
 800cef4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cef8:	b003      	add	sp, #12
 800cefa:	4770      	bx	lr
 800cefc:	200005f8 	.word	0x200005f8

0800cf00 <_lseek_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4d07      	ldr	r5, [pc, #28]	; (800cf20 <_lseek_r+0x20>)
 800cf04:	4604      	mov	r4, r0
 800cf06:	4608      	mov	r0, r1
 800cf08:	4611      	mov	r1, r2
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	602a      	str	r2, [r5, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	f7fe fb80 	bl	800b614 <_lseek>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d102      	bne.n	800cf1e <_lseek_r+0x1e>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	b103      	cbz	r3, 800cf1e <_lseek_r+0x1e>
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	2001aa00 	.word	0x2001aa00

0800cf24 <__malloc_lock>:
 800cf24:	4801      	ldr	r0, [pc, #4]	; (800cf2c <__malloc_lock+0x8>)
 800cf26:	f7ff bcc0 	b.w	800c8aa <__retarget_lock_acquire_recursive>
 800cf2a:	bf00      	nop
 800cf2c:	2001a9f8 	.word	0x2001a9f8

0800cf30 <__malloc_unlock>:
 800cf30:	4801      	ldr	r0, [pc, #4]	; (800cf38 <__malloc_unlock+0x8>)
 800cf32:	f7ff bcbb 	b.w	800c8ac <__retarget_lock_release_recursive>
 800cf36:	bf00      	nop
 800cf38:	2001a9f8 	.word	0x2001a9f8

0800cf3c <__ssputs_r>:
 800cf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf40:	688e      	ldr	r6, [r1, #8]
 800cf42:	429e      	cmp	r6, r3
 800cf44:	4682      	mov	sl, r0
 800cf46:	460c      	mov	r4, r1
 800cf48:	4690      	mov	r8, r2
 800cf4a:	461f      	mov	r7, r3
 800cf4c:	d838      	bhi.n	800cfc0 <__ssputs_r+0x84>
 800cf4e:	898a      	ldrh	r2, [r1, #12]
 800cf50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf54:	d032      	beq.n	800cfbc <__ssputs_r+0x80>
 800cf56:	6825      	ldr	r5, [r4, #0]
 800cf58:	6909      	ldr	r1, [r1, #16]
 800cf5a:	eba5 0901 	sub.w	r9, r5, r1
 800cf5e:	6965      	ldr	r5, [r4, #20]
 800cf60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf68:	3301      	adds	r3, #1
 800cf6a:	444b      	add	r3, r9
 800cf6c:	106d      	asrs	r5, r5, #1
 800cf6e:	429d      	cmp	r5, r3
 800cf70:	bf38      	it	cc
 800cf72:	461d      	movcc	r5, r3
 800cf74:	0553      	lsls	r3, r2, #21
 800cf76:	d531      	bpl.n	800cfdc <__ssputs_r+0xa0>
 800cf78:	4629      	mov	r1, r5
 800cf7a:	f7ff fd07 	bl	800c98c <_malloc_r>
 800cf7e:	4606      	mov	r6, r0
 800cf80:	b950      	cbnz	r0, 800cf98 <__ssputs_r+0x5c>
 800cf82:	230c      	movs	r3, #12
 800cf84:	f8ca 3000 	str.w	r3, [sl]
 800cf88:	89a3      	ldrh	r3, [r4, #12]
 800cf8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf8e:	81a3      	strh	r3, [r4, #12]
 800cf90:	f04f 30ff 	mov.w	r0, #4294967295
 800cf94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf98:	6921      	ldr	r1, [r4, #16]
 800cf9a:	464a      	mov	r2, r9
 800cf9c:	f7ff fc90 	bl	800c8c0 <memcpy>
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfaa:	81a3      	strh	r3, [r4, #12]
 800cfac:	6126      	str	r6, [r4, #16]
 800cfae:	6165      	str	r5, [r4, #20]
 800cfb0:	444e      	add	r6, r9
 800cfb2:	eba5 0509 	sub.w	r5, r5, r9
 800cfb6:	6026      	str	r6, [r4, #0]
 800cfb8:	60a5      	str	r5, [r4, #8]
 800cfba:	463e      	mov	r6, r7
 800cfbc:	42be      	cmp	r6, r7
 800cfbe:	d900      	bls.n	800cfc2 <__ssputs_r+0x86>
 800cfc0:	463e      	mov	r6, r7
 800cfc2:	4632      	mov	r2, r6
 800cfc4:	6820      	ldr	r0, [r4, #0]
 800cfc6:	4641      	mov	r1, r8
 800cfc8:	f000 fd40 	bl	800da4c <memmove>
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	6822      	ldr	r2, [r4, #0]
 800cfd0:	1b9b      	subs	r3, r3, r6
 800cfd2:	4432      	add	r2, r6
 800cfd4:	60a3      	str	r3, [r4, #8]
 800cfd6:	6022      	str	r2, [r4, #0]
 800cfd8:	2000      	movs	r0, #0
 800cfda:	e7db      	b.n	800cf94 <__ssputs_r+0x58>
 800cfdc:	462a      	mov	r2, r5
 800cfde:	f000 fd4f 	bl	800da80 <_realloc_r>
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	d1e1      	bne.n	800cfac <__ssputs_r+0x70>
 800cfe8:	6921      	ldr	r1, [r4, #16]
 800cfea:	4650      	mov	r0, sl
 800cfec:	f7ff fc7e 	bl	800c8ec <_free_r>
 800cff0:	e7c7      	b.n	800cf82 <__ssputs_r+0x46>
	...

0800cff4 <_svfiprintf_r>:
 800cff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff8:	4698      	mov	r8, r3
 800cffa:	898b      	ldrh	r3, [r1, #12]
 800cffc:	061b      	lsls	r3, r3, #24
 800cffe:	b09d      	sub	sp, #116	; 0x74
 800d000:	4607      	mov	r7, r0
 800d002:	460d      	mov	r5, r1
 800d004:	4614      	mov	r4, r2
 800d006:	d50e      	bpl.n	800d026 <_svfiprintf_r+0x32>
 800d008:	690b      	ldr	r3, [r1, #16]
 800d00a:	b963      	cbnz	r3, 800d026 <_svfiprintf_r+0x32>
 800d00c:	2140      	movs	r1, #64	; 0x40
 800d00e:	f7ff fcbd 	bl	800c98c <_malloc_r>
 800d012:	6028      	str	r0, [r5, #0]
 800d014:	6128      	str	r0, [r5, #16]
 800d016:	b920      	cbnz	r0, 800d022 <_svfiprintf_r+0x2e>
 800d018:	230c      	movs	r3, #12
 800d01a:	603b      	str	r3, [r7, #0]
 800d01c:	f04f 30ff 	mov.w	r0, #4294967295
 800d020:	e0d1      	b.n	800d1c6 <_svfiprintf_r+0x1d2>
 800d022:	2340      	movs	r3, #64	; 0x40
 800d024:	616b      	str	r3, [r5, #20]
 800d026:	2300      	movs	r3, #0
 800d028:	9309      	str	r3, [sp, #36]	; 0x24
 800d02a:	2320      	movs	r3, #32
 800d02c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d030:	f8cd 800c 	str.w	r8, [sp, #12]
 800d034:	2330      	movs	r3, #48	; 0x30
 800d036:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1e0 <_svfiprintf_r+0x1ec>
 800d03a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d03e:	f04f 0901 	mov.w	r9, #1
 800d042:	4623      	mov	r3, r4
 800d044:	469a      	mov	sl, r3
 800d046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d04a:	b10a      	cbz	r2, 800d050 <_svfiprintf_r+0x5c>
 800d04c:	2a25      	cmp	r2, #37	; 0x25
 800d04e:	d1f9      	bne.n	800d044 <_svfiprintf_r+0x50>
 800d050:	ebba 0b04 	subs.w	fp, sl, r4
 800d054:	d00b      	beq.n	800d06e <_svfiprintf_r+0x7a>
 800d056:	465b      	mov	r3, fp
 800d058:	4622      	mov	r2, r4
 800d05a:	4629      	mov	r1, r5
 800d05c:	4638      	mov	r0, r7
 800d05e:	f7ff ff6d 	bl	800cf3c <__ssputs_r>
 800d062:	3001      	adds	r0, #1
 800d064:	f000 80aa 	beq.w	800d1bc <_svfiprintf_r+0x1c8>
 800d068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d06a:	445a      	add	r2, fp
 800d06c:	9209      	str	r2, [sp, #36]	; 0x24
 800d06e:	f89a 3000 	ldrb.w	r3, [sl]
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 80a2 	beq.w	800d1bc <_svfiprintf_r+0x1c8>
 800d078:	2300      	movs	r3, #0
 800d07a:	f04f 32ff 	mov.w	r2, #4294967295
 800d07e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d082:	f10a 0a01 	add.w	sl, sl, #1
 800d086:	9304      	str	r3, [sp, #16]
 800d088:	9307      	str	r3, [sp, #28]
 800d08a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d08e:	931a      	str	r3, [sp, #104]	; 0x68
 800d090:	4654      	mov	r4, sl
 800d092:	2205      	movs	r2, #5
 800d094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d098:	4851      	ldr	r0, [pc, #324]	; (800d1e0 <_svfiprintf_r+0x1ec>)
 800d09a:	f7f3 f8b1 	bl	8000200 <memchr>
 800d09e:	9a04      	ldr	r2, [sp, #16]
 800d0a0:	b9d8      	cbnz	r0, 800d0da <_svfiprintf_r+0xe6>
 800d0a2:	06d0      	lsls	r0, r2, #27
 800d0a4:	bf44      	itt	mi
 800d0a6:	2320      	movmi	r3, #32
 800d0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ac:	0711      	lsls	r1, r2, #28
 800d0ae:	bf44      	itt	mi
 800d0b0:	232b      	movmi	r3, #43	; 0x2b
 800d0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d0bc:	d015      	beq.n	800d0ea <_svfiprintf_r+0xf6>
 800d0be:	9a07      	ldr	r2, [sp, #28]
 800d0c0:	4654      	mov	r4, sl
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	f04f 0c0a 	mov.w	ip, #10
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0ce:	3b30      	subs	r3, #48	; 0x30
 800d0d0:	2b09      	cmp	r3, #9
 800d0d2:	d94e      	bls.n	800d172 <_svfiprintf_r+0x17e>
 800d0d4:	b1b0      	cbz	r0, 800d104 <_svfiprintf_r+0x110>
 800d0d6:	9207      	str	r2, [sp, #28]
 800d0d8:	e014      	b.n	800d104 <_svfiprintf_r+0x110>
 800d0da:	eba0 0308 	sub.w	r3, r0, r8
 800d0de:	fa09 f303 	lsl.w	r3, r9, r3
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	9304      	str	r3, [sp, #16]
 800d0e6:	46a2      	mov	sl, r4
 800d0e8:	e7d2      	b.n	800d090 <_svfiprintf_r+0x9c>
 800d0ea:	9b03      	ldr	r3, [sp, #12]
 800d0ec:	1d19      	adds	r1, r3, #4
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	9103      	str	r1, [sp, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	bfbb      	ittet	lt
 800d0f6:	425b      	neglt	r3, r3
 800d0f8:	f042 0202 	orrlt.w	r2, r2, #2
 800d0fc:	9307      	strge	r3, [sp, #28]
 800d0fe:	9307      	strlt	r3, [sp, #28]
 800d100:	bfb8      	it	lt
 800d102:	9204      	strlt	r2, [sp, #16]
 800d104:	7823      	ldrb	r3, [r4, #0]
 800d106:	2b2e      	cmp	r3, #46	; 0x2e
 800d108:	d10c      	bne.n	800d124 <_svfiprintf_r+0x130>
 800d10a:	7863      	ldrb	r3, [r4, #1]
 800d10c:	2b2a      	cmp	r3, #42	; 0x2a
 800d10e:	d135      	bne.n	800d17c <_svfiprintf_r+0x188>
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	1d1a      	adds	r2, r3, #4
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	9203      	str	r2, [sp, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	bfb8      	it	lt
 800d11c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d120:	3402      	adds	r4, #2
 800d122:	9305      	str	r3, [sp, #20]
 800d124:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1f0 <_svfiprintf_r+0x1fc>
 800d128:	7821      	ldrb	r1, [r4, #0]
 800d12a:	2203      	movs	r2, #3
 800d12c:	4650      	mov	r0, sl
 800d12e:	f7f3 f867 	bl	8000200 <memchr>
 800d132:	b140      	cbz	r0, 800d146 <_svfiprintf_r+0x152>
 800d134:	2340      	movs	r3, #64	; 0x40
 800d136:	eba0 000a 	sub.w	r0, r0, sl
 800d13a:	fa03 f000 	lsl.w	r0, r3, r0
 800d13e:	9b04      	ldr	r3, [sp, #16]
 800d140:	4303      	orrs	r3, r0
 800d142:	3401      	adds	r4, #1
 800d144:	9304      	str	r3, [sp, #16]
 800d146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d14a:	4826      	ldr	r0, [pc, #152]	; (800d1e4 <_svfiprintf_r+0x1f0>)
 800d14c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d150:	2206      	movs	r2, #6
 800d152:	f7f3 f855 	bl	8000200 <memchr>
 800d156:	2800      	cmp	r0, #0
 800d158:	d038      	beq.n	800d1cc <_svfiprintf_r+0x1d8>
 800d15a:	4b23      	ldr	r3, [pc, #140]	; (800d1e8 <_svfiprintf_r+0x1f4>)
 800d15c:	bb1b      	cbnz	r3, 800d1a6 <_svfiprintf_r+0x1b2>
 800d15e:	9b03      	ldr	r3, [sp, #12]
 800d160:	3307      	adds	r3, #7
 800d162:	f023 0307 	bic.w	r3, r3, #7
 800d166:	3308      	adds	r3, #8
 800d168:	9303      	str	r3, [sp, #12]
 800d16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d16c:	4433      	add	r3, r6
 800d16e:	9309      	str	r3, [sp, #36]	; 0x24
 800d170:	e767      	b.n	800d042 <_svfiprintf_r+0x4e>
 800d172:	fb0c 3202 	mla	r2, ip, r2, r3
 800d176:	460c      	mov	r4, r1
 800d178:	2001      	movs	r0, #1
 800d17a:	e7a5      	b.n	800d0c8 <_svfiprintf_r+0xd4>
 800d17c:	2300      	movs	r3, #0
 800d17e:	3401      	adds	r4, #1
 800d180:	9305      	str	r3, [sp, #20]
 800d182:	4619      	mov	r1, r3
 800d184:	f04f 0c0a 	mov.w	ip, #10
 800d188:	4620      	mov	r0, r4
 800d18a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d18e:	3a30      	subs	r2, #48	; 0x30
 800d190:	2a09      	cmp	r2, #9
 800d192:	d903      	bls.n	800d19c <_svfiprintf_r+0x1a8>
 800d194:	2b00      	cmp	r3, #0
 800d196:	d0c5      	beq.n	800d124 <_svfiprintf_r+0x130>
 800d198:	9105      	str	r1, [sp, #20]
 800d19a:	e7c3      	b.n	800d124 <_svfiprintf_r+0x130>
 800d19c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e7f0      	b.n	800d188 <_svfiprintf_r+0x194>
 800d1a6:	ab03      	add	r3, sp, #12
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	462a      	mov	r2, r5
 800d1ac:	4b0f      	ldr	r3, [pc, #60]	; (800d1ec <_svfiprintf_r+0x1f8>)
 800d1ae:	a904      	add	r1, sp, #16
 800d1b0:	4638      	mov	r0, r7
 800d1b2:	f3af 8000 	nop.w
 800d1b6:	1c42      	adds	r2, r0, #1
 800d1b8:	4606      	mov	r6, r0
 800d1ba:	d1d6      	bne.n	800d16a <_svfiprintf_r+0x176>
 800d1bc:	89ab      	ldrh	r3, [r5, #12]
 800d1be:	065b      	lsls	r3, r3, #25
 800d1c0:	f53f af2c 	bmi.w	800d01c <_svfiprintf_r+0x28>
 800d1c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1c6:	b01d      	add	sp, #116	; 0x74
 800d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1cc:	ab03      	add	r3, sp, #12
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	462a      	mov	r2, r5
 800d1d2:	4b06      	ldr	r3, [pc, #24]	; (800d1ec <_svfiprintf_r+0x1f8>)
 800d1d4:	a904      	add	r1, sp, #16
 800d1d6:	4638      	mov	r0, r7
 800d1d8:	f000 f9d4 	bl	800d584 <_printf_i>
 800d1dc:	e7eb      	b.n	800d1b6 <_svfiprintf_r+0x1c2>
 800d1de:	bf00      	nop
 800d1e0:	0804051a 	.word	0x0804051a
 800d1e4:	08040524 	.word	0x08040524
 800d1e8:	00000000 	.word	0x00000000
 800d1ec:	0800cf3d 	.word	0x0800cf3d
 800d1f0:	08040520 	.word	0x08040520

0800d1f4 <__sfputc_r>:
 800d1f4:	6893      	ldr	r3, [r2, #8]
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	b410      	push	{r4}
 800d1fc:	6093      	str	r3, [r2, #8]
 800d1fe:	da08      	bge.n	800d212 <__sfputc_r+0x1e>
 800d200:	6994      	ldr	r4, [r2, #24]
 800d202:	42a3      	cmp	r3, r4
 800d204:	db01      	blt.n	800d20a <__sfputc_r+0x16>
 800d206:	290a      	cmp	r1, #10
 800d208:	d103      	bne.n	800d212 <__sfputc_r+0x1e>
 800d20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d20e:	f000 baf1 	b.w	800d7f4 <__swbuf_r>
 800d212:	6813      	ldr	r3, [r2, #0]
 800d214:	1c58      	adds	r0, r3, #1
 800d216:	6010      	str	r0, [r2, #0]
 800d218:	7019      	strb	r1, [r3, #0]
 800d21a:	4608      	mov	r0, r1
 800d21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <__sfputs_r>:
 800d222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d224:	4606      	mov	r6, r0
 800d226:	460f      	mov	r7, r1
 800d228:	4614      	mov	r4, r2
 800d22a:	18d5      	adds	r5, r2, r3
 800d22c:	42ac      	cmp	r4, r5
 800d22e:	d101      	bne.n	800d234 <__sfputs_r+0x12>
 800d230:	2000      	movs	r0, #0
 800d232:	e007      	b.n	800d244 <__sfputs_r+0x22>
 800d234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d238:	463a      	mov	r2, r7
 800d23a:	4630      	mov	r0, r6
 800d23c:	f7ff ffda 	bl	800d1f4 <__sfputc_r>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d1f3      	bne.n	800d22c <__sfputs_r+0xa>
 800d244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d248 <_vfiprintf_r>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	460d      	mov	r5, r1
 800d24e:	b09d      	sub	sp, #116	; 0x74
 800d250:	4614      	mov	r4, r2
 800d252:	4698      	mov	r8, r3
 800d254:	4606      	mov	r6, r0
 800d256:	b118      	cbz	r0, 800d260 <_vfiprintf_r+0x18>
 800d258:	6983      	ldr	r3, [r0, #24]
 800d25a:	b90b      	cbnz	r3, 800d260 <_vfiprintf_r+0x18>
 800d25c:	f7ff fa62 	bl	800c724 <__sinit>
 800d260:	4b89      	ldr	r3, [pc, #548]	; (800d488 <_vfiprintf_r+0x240>)
 800d262:	429d      	cmp	r5, r3
 800d264:	d11b      	bne.n	800d29e <_vfiprintf_r+0x56>
 800d266:	6875      	ldr	r5, [r6, #4]
 800d268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d26a:	07d9      	lsls	r1, r3, #31
 800d26c:	d405      	bmi.n	800d27a <_vfiprintf_r+0x32>
 800d26e:	89ab      	ldrh	r3, [r5, #12]
 800d270:	059a      	lsls	r2, r3, #22
 800d272:	d402      	bmi.n	800d27a <_vfiprintf_r+0x32>
 800d274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d276:	f7ff fb18 	bl	800c8aa <__retarget_lock_acquire_recursive>
 800d27a:	89ab      	ldrh	r3, [r5, #12]
 800d27c:	071b      	lsls	r3, r3, #28
 800d27e:	d501      	bpl.n	800d284 <_vfiprintf_r+0x3c>
 800d280:	692b      	ldr	r3, [r5, #16]
 800d282:	b9eb      	cbnz	r3, 800d2c0 <_vfiprintf_r+0x78>
 800d284:	4629      	mov	r1, r5
 800d286:	4630      	mov	r0, r6
 800d288:	f000 fb06 	bl	800d898 <__swsetup_r>
 800d28c:	b1c0      	cbz	r0, 800d2c0 <_vfiprintf_r+0x78>
 800d28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d290:	07dc      	lsls	r4, r3, #31
 800d292:	d50e      	bpl.n	800d2b2 <_vfiprintf_r+0x6a>
 800d294:	f04f 30ff 	mov.w	r0, #4294967295
 800d298:	b01d      	add	sp, #116	; 0x74
 800d29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29e:	4b7b      	ldr	r3, [pc, #492]	; (800d48c <_vfiprintf_r+0x244>)
 800d2a0:	429d      	cmp	r5, r3
 800d2a2:	d101      	bne.n	800d2a8 <_vfiprintf_r+0x60>
 800d2a4:	68b5      	ldr	r5, [r6, #8]
 800d2a6:	e7df      	b.n	800d268 <_vfiprintf_r+0x20>
 800d2a8:	4b79      	ldr	r3, [pc, #484]	; (800d490 <_vfiprintf_r+0x248>)
 800d2aa:	429d      	cmp	r5, r3
 800d2ac:	bf08      	it	eq
 800d2ae:	68f5      	ldreq	r5, [r6, #12]
 800d2b0:	e7da      	b.n	800d268 <_vfiprintf_r+0x20>
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	0598      	lsls	r0, r3, #22
 800d2b6:	d4ed      	bmi.n	800d294 <_vfiprintf_r+0x4c>
 800d2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ba:	f7ff faf7 	bl	800c8ac <__retarget_lock_release_recursive>
 800d2be:	e7e9      	b.n	800d294 <_vfiprintf_r+0x4c>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c4:	2320      	movs	r3, #32
 800d2c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ce:	2330      	movs	r3, #48	; 0x30
 800d2d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d494 <_vfiprintf_r+0x24c>
 800d2d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2d8:	f04f 0901 	mov.w	r9, #1
 800d2dc:	4623      	mov	r3, r4
 800d2de:	469a      	mov	sl, r3
 800d2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e4:	b10a      	cbz	r2, 800d2ea <_vfiprintf_r+0xa2>
 800d2e6:	2a25      	cmp	r2, #37	; 0x25
 800d2e8:	d1f9      	bne.n	800d2de <_vfiprintf_r+0x96>
 800d2ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ee:	d00b      	beq.n	800d308 <_vfiprintf_r+0xc0>
 800d2f0:	465b      	mov	r3, fp
 800d2f2:	4622      	mov	r2, r4
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7ff ff93 	bl	800d222 <__sfputs_r>
 800d2fc:	3001      	adds	r0, #1
 800d2fe:	f000 80aa 	beq.w	800d456 <_vfiprintf_r+0x20e>
 800d302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d304:	445a      	add	r2, fp
 800d306:	9209      	str	r2, [sp, #36]	; 0x24
 800d308:	f89a 3000 	ldrb.w	r3, [sl]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 80a2 	beq.w	800d456 <_vfiprintf_r+0x20e>
 800d312:	2300      	movs	r3, #0
 800d314:	f04f 32ff 	mov.w	r2, #4294967295
 800d318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d31c:	f10a 0a01 	add.w	sl, sl, #1
 800d320:	9304      	str	r3, [sp, #16]
 800d322:	9307      	str	r3, [sp, #28]
 800d324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d328:	931a      	str	r3, [sp, #104]	; 0x68
 800d32a:	4654      	mov	r4, sl
 800d32c:	2205      	movs	r2, #5
 800d32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d332:	4858      	ldr	r0, [pc, #352]	; (800d494 <_vfiprintf_r+0x24c>)
 800d334:	f7f2 ff64 	bl	8000200 <memchr>
 800d338:	9a04      	ldr	r2, [sp, #16]
 800d33a:	b9d8      	cbnz	r0, 800d374 <_vfiprintf_r+0x12c>
 800d33c:	06d1      	lsls	r1, r2, #27
 800d33e:	bf44      	itt	mi
 800d340:	2320      	movmi	r3, #32
 800d342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d346:	0713      	lsls	r3, r2, #28
 800d348:	bf44      	itt	mi
 800d34a:	232b      	movmi	r3, #43	; 0x2b
 800d34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d350:	f89a 3000 	ldrb.w	r3, [sl]
 800d354:	2b2a      	cmp	r3, #42	; 0x2a
 800d356:	d015      	beq.n	800d384 <_vfiprintf_r+0x13c>
 800d358:	9a07      	ldr	r2, [sp, #28]
 800d35a:	4654      	mov	r4, sl
 800d35c:	2000      	movs	r0, #0
 800d35e:	f04f 0c0a 	mov.w	ip, #10
 800d362:	4621      	mov	r1, r4
 800d364:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d368:	3b30      	subs	r3, #48	; 0x30
 800d36a:	2b09      	cmp	r3, #9
 800d36c:	d94e      	bls.n	800d40c <_vfiprintf_r+0x1c4>
 800d36e:	b1b0      	cbz	r0, 800d39e <_vfiprintf_r+0x156>
 800d370:	9207      	str	r2, [sp, #28]
 800d372:	e014      	b.n	800d39e <_vfiprintf_r+0x156>
 800d374:	eba0 0308 	sub.w	r3, r0, r8
 800d378:	fa09 f303 	lsl.w	r3, r9, r3
 800d37c:	4313      	orrs	r3, r2
 800d37e:	9304      	str	r3, [sp, #16]
 800d380:	46a2      	mov	sl, r4
 800d382:	e7d2      	b.n	800d32a <_vfiprintf_r+0xe2>
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	1d19      	adds	r1, r3, #4
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	9103      	str	r1, [sp, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	bfbb      	ittet	lt
 800d390:	425b      	neglt	r3, r3
 800d392:	f042 0202 	orrlt.w	r2, r2, #2
 800d396:	9307      	strge	r3, [sp, #28]
 800d398:	9307      	strlt	r3, [sp, #28]
 800d39a:	bfb8      	it	lt
 800d39c:	9204      	strlt	r2, [sp, #16]
 800d39e:	7823      	ldrb	r3, [r4, #0]
 800d3a0:	2b2e      	cmp	r3, #46	; 0x2e
 800d3a2:	d10c      	bne.n	800d3be <_vfiprintf_r+0x176>
 800d3a4:	7863      	ldrb	r3, [r4, #1]
 800d3a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a8:	d135      	bne.n	800d416 <_vfiprintf_r+0x1ce>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	1d1a      	adds	r2, r3, #4
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	9203      	str	r2, [sp, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	bfb8      	it	lt
 800d3b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3ba:	3402      	adds	r4, #2
 800d3bc:	9305      	str	r3, [sp, #20]
 800d3be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4a4 <_vfiprintf_r+0x25c>
 800d3c2:	7821      	ldrb	r1, [r4, #0]
 800d3c4:	2203      	movs	r2, #3
 800d3c6:	4650      	mov	r0, sl
 800d3c8:	f7f2 ff1a 	bl	8000200 <memchr>
 800d3cc:	b140      	cbz	r0, 800d3e0 <_vfiprintf_r+0x198>
 800d3ce:	2340      	movs	r3, #64	; 0x40
 800d3d0:	eba0 000a 	sub.w	r0, r0, sl
 800d3d4:	fa03 f000 	lsl.w	r0, r3, r0
 800d3d8:	9b04      	ldr	r3, [sp, #16]
 800d3da:	4303      	orrs	r3, r0
 800d3dc:	3401      	adds	r4, #1
 800d3de:	9304      	str	r3, [sp, #16]
 800d3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e4:	482c      	ldr	r0, [pc, #176]	; (800d498 <_vfiprintf_r+0x250>)
 800d3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3ea:	2206      	movs	r2, #6
 800d3ec:	f7f2 ff08 	bl	8000200 <memchr>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d03f      	beq.n	800d474 <_vfiprintf_r+0x22c>
 800d3f4:	4b29      	ldr	r3, [pc, #164]	; (800d49c <_vfiprintf_r+0x254>)
 800d3f6:	bb1b      	cbnz	r3, 800d440 <_vfiprintf_r+0x1f8>
 800d3f8:	9b03      	ldr	r3, [sp, #12]
 800d3fa:	3307      	adds	r3, #7
 800d3fc:	f023 0307 	bic.w	r3, r3, #7
 800d400:	3308      	adds	r3, #8
 800d402:	9303      	str	r3, [sp, #12]
 800d404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d406:	443b      	add	r3, r7
 800d408:	9309      	str	r3, [sp, #36]	; 0x24
 800d40a:	e767      	b.n	800d2dc <_vfiprintf_r+0x94>
 800d40c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d410:	460c      	mov	r4, r1
 800d412:	2001      	movs	r0, #1
 800d414:	e7a5      	b.n	800d362 <_vfiprintf_r+0x11a>
 800d416:	2300      	movs	r3, #0
 800d418:	3401      	adds	r4, #1
 800d41a:	9305      	str	r3, [sp, #20]
 800d41c:	4619      	mov	r1, r3
 800d41e:	f04f 0c0a 	mov.w	ip, #10
 800d422:	4620      	mov	r0, r4
 800d424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d428:	3a30      	subs	r2, #48	; 0x30
 800d42a:	2a09      	cmp	r2, #9
 800d42c:	d903      	bls.n	800d436 <_vfiprintf_r+0x1ee>
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d0c5      	beq.n	800d3be <_vfiprintf_r+0x176>
 800d432:	9105      	str	r1, [sp, #20]
 800d434:	e7c3      	b.n	800d3be <_vfiprintf_r+0x176>
 800d436:	fb0c 2101 	mla	r1, ip, r1, r2
 800d43a:	4604      	mov	r4, r0
 800d43c:	2301      	movs	r3, #1
 800d43e:	e7f0      	b.n	800d422 <_vfiprintf_r+0x1da>
 800d440:	ab03      	add	r3, sp, #12
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	462a      	mov	r2, r5
 800d446:	4b16      	ldr	r3, [pc, #88]	; (800d4a0 <_vfiprintf_r+0x258>)
 800d448:	a904      	add	r1, sp, #16
 800d44a:	4630      	mov	r0, r6
 800d44c:	f3af 8000 	nop.w
 800d450:	4607      	mov	r7, r0
 800d452:	1c78      	adds	r0, r7, #1
 800d454:	d1d6      	bne.n	800d404 <_vfiprintf_r+0x1bc>
 800d456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d458:	07d9      	lsls	r1, r3, #31
 800d45a:	d405      	bmi.n	800d468 <_vfiprintf_r+0x220>
 800d45c:	89ab      	ldrh	r3, [r5, #12]
 800d45e:	059a      	lsls	r2, r3, #22
 800d460:	d402      	bmi.n	800d468 <_vfiprintf_r+0x220>
 800d462:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d464:	f7ff fa22 	bl	800c8ac <__retarget_lock_release_recursive>
 800d468:	89ab      	ldrh	r3, [r5, #12]
 800d46a:	065b      	lsls	r3, r3, #25
 800d46c:	f53f af12 	bmi.w	800d294 <_vfiprintf_r+0x4c>
 800d470:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d472:	e711      	b.n	800d298 <_vfiprintf_r+0x50>
 800d474:	ab03      	add	r3, sp, #12
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	462a      	mov	r2, r5
 800d47a:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <_vfiprintf_r+0x258>)
 800d47c:	a904      	add	r1, sp, #16
 800d47e:	4630      	mov	r0, r6
 800d480:	f000 f880 	bl	800d584 <_printf_i>
 800d484:	e7e4      	b.n	800d450 <_vfiprintf_r+0x208>
 800d486:	bf00      	nop
 800d488:	08040424 	.word	0x08040424
 800d48c:	08040444 	.word	0x08040444
 800d490:	08040404 	.word	0x08040404
 800d494:	0804051a 	.word	0x0804051a
 800d498:	08040524 	.word	0x08040524
 800d49c:	00000000 	.word	0x00000000
 800d4a0:	0800d223 	.word	0x0800d223
 800d4a4:	08040520 	.word	0x08040520

0800d4a8 <_printf_common>:
 800d4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ac:	4616      	mov	r6, r2
 800d4ae:	4699      	mov	r9, r3
 800d4b0:	688a      	ldr	r2, [r1, #8]
 800d4b2:	690b      	ldr	r3, [r1, #16]
 800d4b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	bfb8      	it	lt
 800d4bc:	4613      	movlt	r3, r2
 800d4be:	6033      	str	r3, [r6, #0]
 800d4c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4c4:	4607      	mov	r7, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	b10a      	cbz	r2, 800d4ce <_printf_common+0x26>
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	6033      	str	r3, [r6, #0]
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	0699      	lsls	r1, r3, #26
 800d4d2:	bf42      	ittt	mi
 800d4d4:	6833      	ldrmi	r3, [r6, #0]
 800d4d6:	3302      	addmi	r3, #2
 800d4d8:	6033      	strmi	r3, [r6, #0]
 800d4da:	6825      	ldr	r5, [r4, #0]
 800d4dc:	f015 0506 	ands.w	r5, r5, #6
 800d4e0:	d106      	bne.n	800d4f0 <_printf_common+0x48>
 800d4e2:	f104 0a19 	add.w	sl, r4, #25
 800d4e6:	68e3      	ldr	r3, [r4, #12]
 800d4e8:	6832      	ldr	r2, [r6, #0]
 800d4ea:	1a9b      	subs	r3, r3, r2
 800d4ec:	42ab      	cmp	r3, r5
 800d4ee:	dc26      	bgt.n	800d53e <_printf_common+0x96>
 800d4f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4f4:	1e13      	subs	r3, r2, #0
 800d4f6:	6822      	ldr	r2, [r4, #0]
 800d4f8:	bf18      	it	ne
 800d4fa:	2301      	movne	r3, #1
 800d4fc:	0692      	lsls	r2, r2, #26
 800d4fe:	d42b      	bmi.n	800d558 <_printf_common+0xb0>
 800d500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d504:	4649      	mov	r1, r9
 800d506:	4638      	mov	r0, r7
 800d508:	47c0      	blx	r8
 800d50a:	3001      	adds	r0, #1
 800d50c:	d01e      	beq.n	800d54c <_printf_common+0xa4>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	68e5      	ldr	r5, [r4, #12]
 800d512:	6832      	ldr	r2, [r6, #0]
 800d514:	f003 0306 	and.w	r3, r3, #6
 800d518:	2b04      	cmp	r3, #4
 800d51a:	bf08      	it	eq
 800d51c:	1aad      	subeq	r5, r5, r2
 800d51e:	68a3      	ldr	r3, [r4, #8]
 800d520:	6922      	ldr	r2, [r4, #16]
 800d522:	bf0c      	ite	eq
 800d524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d528:	2500      	movne	r5, #0
 800d52a:	4293      	cmp	r3, r2
 800d52c:	bfc4      	itt	gt
 800d52e:	1a9b      	subgt	r3, r3, r2
 800d530:	18ed      	addgt	r5, r5, r3
 800d532:	2600      	movs	r6, #0
 800d534:	341a      	adds	r4, #26
 800d536:	42b5      	cmp	r5, r6
 800d538:	d11a      	bne.n	800d570 <_printf_common+0xc8>
 800d53a:	2000      	movs	r0, #0
 800d53c:	e008      	b.n	800d550 <_printf_common+0xa8>
 800d53e:	2301      	movs	r3, #1
 800d540:	4652      	mov	r2, sl
 800d542:	4649      	mov	r1, r9
 800d544:	4638      	mov	r0, r7
 800d546:	47c0      	blx	r8
 800d548:	3001      	adds	r0, #1
 800d54a:	d103      	bne.n	800d554 <_printf_common+0xac>
 800d54c:	f04f 30ff 	mov.w	r0, #4294967295
 800d550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d554:	3501      	adds	r5, #1
 800d556:	e7c6      	b.n	800d4e6 <_printf_common+0x3e>
 800d558:	18e1      	adds	r1, r4, r3
 800d55a:	1c5a      	adds	r2, r3, #1
 800d55c:	2030      	movs	r0, #48	; 0x30
 800d55e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d562:	4422      	add	r2, r4
 800d564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d56c:	3302      	adds	r3, #2
 800d56e:	e7c7      	b.n	800d500 <_printf_common+0x58>
 800d570:	2301      	movs	r3, #1
 800d572:	4622      	mov	r2, r4
 800d574:	4649      	mov	r1, r9
 800d576:	4638      	mov	r0, r7
 800d578:	47c0      	blx	r8
 800d57a:	3001      	adds	r0, #1
 800d57c:	d0e6      	beq.n	800d54c <_printf_common+0xa4>
 800d57e:	3601      	adds	r6, #1
 800d580:	e7d9      	b.n	800d536 <_printf_common+0x8e>
	...

0800d584 <_printf_i>:
 800d584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d588:	460c      	mov	r4, r1
 800d58a:	4691      	mov	r9, r2
 800d58c:	7e27      	ldrb	r7, [r4, #24]
 800d58e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d590:	2f78      	cmp	r7, #120	; 0x78
 800d592:	4680      	mov	r8, r0
 800d594:	469a      	mov	sl, r3
 800d596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d59a:	d807      	bhi.n	800d5ac <_printf_i+0x28>
 800d59c:	2f62      	cmp	r7, #98	; 0x62
 800d59e:	d80a      	bhi.n	800d5b6 <_printf_i+0x32>
 800d5a0:	2f00      	cmp	r7, #0
 800d5a2:	f000 80d8 	beq.w	800d756 <_printf_i+0x1d2>
 800d5a6:	2f58      	cmp	r7, #88	; 0x58
 800d5a8:	f000 80a3 	beq.w	800d6f2 <_printf_i+0x16e>
 800d5ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d5b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5b4:	e03a      	b.n	800d62c <_printf_i+0xa8>
 800d5b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5ba:	2b15      	cmp	r3, #21
 800d5bc:	d8f6      	bhi.n	800d5ac <_printf_i+0x28>
 800d5be:	a001      	add	r0, pc, #4	; (adr r0, 800d5c4 <_printf_i+0x40>)
 800d5c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d5c4:	0800d61d 	.word	0x0800d61d
 800d5c8:	0800d631 	.word	0x0800d631
 800d5cc:	0800d5ad 	.word	0x0800d5ad
 800d5d0:	0800d5ad 	.word	0x0800d5ad
 800d5d4:	0800d5ad 	.word	0x0800d5ad
 800d5d8:	0800d5ad 	.word	0x0800d5ad
 800d5dc:	0800d631 	.word	0x0800d631
 800d5e0:	0800d5ad 	.word	0x0800d5ad
 800d5e4:	0800d5ad 	.word	0x0800d5ad
 800d5e8:	0800d5ad 	.word	0x0800d5ad
 800d5ec:	0800d5ad 	.word	0x0800d5ad
 800d5f0:	0800d73d 	.word	0x0800d73d
 800d5f4:	0800d661 	.word	0x0800d661
 800d5f8:	0800d71f 	.word	0x0800d71f
 800d5fc:	0800d5ad 	.word	0x0800d5ad
 800d600:	0800d5ad 	.word	0x0800d5ad
 800d604:	0800d75f 	.word	0x0800d75f
 800d608:	0800d5ad 	.word	0x0800d5ad
 800d60c:	0800d661 	.word	0x0800d661
 800d610:	0800d5ad 	.word	0x0800d5ad
 800d614:	0800d5ad 	.word	0x0800d5ad
 800d618:	0800d727 	.word	0x0800d727
 800d61c:	680b      	ldr	r3, [r1, #0]
 800d61e:	1d1a      	adds	r2, r3, #4
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	600a      	str	r2, [r1, #0]
 800d624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d62c:	2301      	movs	r3, #1
 800d62e:	e0a3      	b.n	800d778 <_printf_i+0x1f4>
 800d630:	6825      	ldr	r5, [r4, #0]
 800d632:	6808      	ldr	r0, [r1, #0]
 800d634:	062e      	lsls	r6, r5, #24
 800d636:	f100 0304 	add.w	r3, r0, #4
 800d63a:	d50a      	bpl.n	800d652 <_printf_i+0xce>
 800d63c:	6805      	ldr	r5, [r0, #0]
 800d63e:	600b      	str	r3, [r1, #0]
 800d640:	2d00      	cmp	r5, #0
 800d642:	da03      	bge.n	800d64c <_printf_i+0xc8>
 800d644:	232d      	movs	r3, #45	; 0x2d
 800d646:	426d      	negs	r5, r5
 800d648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d64c:	485e      	ldr	r0, [pc, #376]	; (800d7c8 <_printf_i+0x244>)
 800d64e:	230a      	movs	r3, #10
 800d650:	e019      	b.n	800d686 <_printf_i+0x102>
 800d652:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d656:	6805      	ldr	r5, [r0, #0]
 800d658:	600b      	str	r3, [r1, #0]
 800d65a:	bf18      	it	ne
 800d65c:	b22d      	sxthne	r5, r5
 800d65e:	e7ef      	b.n	800d640 <_printf_i+0xbc>
 800d660:	680b      	ldr	r3, [r1, #0]
 800d662:	6825      	ldr	r5, [r4, #0]
 800d664:	1d18      	adds	r0, r3, #4
 800d666:	6008      	str	r0, [r1, #0]
 800d668:	0628      	lsls	r0, r5, #24
 800d66a:	d501      	bpl.n	800d670 <_printf_i+0xec>
 800d66c:	681d      	ldr	r5, [r3, #0]
 800d66e:	e002      	b.n	800d676 <_printf_i+0xf2>
 800d670:	0669      	lsls	r1, r5, #25
 800d672:	d5fb      	bpl.n	800d66c <_printf_i+0xe8>
 800d674:	881d      	ldrh	r5, [r3, #0]
 800d676:	4854      	ldr	r0, [pc, #336]	; (800d7c8 <_printf_i+0x244>)
 800d678:	2f6f      	cmp	r7, #111	; 0x6f
 800d67a:	bf0c      	ite	eq
 800d67c:	2308      	moveq	r3, #8
 800d67e:	230a      	movne	r3, #10
 800d680:	2100      	movs	r1, #0
 800d682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d686:	6866      	ldr	r6, [r4, #4]
 800d688:	60a6      	str	r6, [r4, #8]
 800d68a:	2e00      	cmp	r6, #0
 800d68c:	bfa2      	ittt	ge
 800d68e:	6821      	ldrge	r1, [r4, #0]
 800d690:	f021 0104 	bicge.w	r1, r1, #4
 800d694:	6021      	strge	r1, [r4, #0]
 800d696:	b90d      	cbnz	r5, 800d69c <_printf_i+0x118>
 800d698:	2e00      	cmp	r6, #0
 800d69a:	d04d      	beq.n	800d738 <_printf_i+0x1b4>
 800d69c:	4616      	mov	r6, r2
 800d69e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6a2:	fb03 5711 	mls	r7, r3, r1, r5
 800d6a6:	5dc7      	ldrb	r7, [r0, r7]
 800d6a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6ac:	462f      	mov	r7, r5
 800d6ae:	42bb      	cmp	r3, r7
 800d6b0:	460d      	mov	r5, r1
 800d6b2:	d9f4      	bls.n	800d69e <_printf_i+0x11a>
 800d6b4:	2b08      	cmp	r3, #8
 800d6b6:	d10b      	bne.n	800d6d0 <_printf_i+0x14c>
 800d6b8:	6823      	ldr	r3, [r4, #0]
 800d6ba:	07df      	lsls	r7, r3, #31
 800d6bc:	d508      	bpl.n	800d6d0 <_printf_i+0x14c>
 800d6be:	6923      	ldr	r3, [r4, #16]
 800d6c0:	6861      	ldr	r1, [r4, #4]
 800d6c2:	4299      	cmp	r1, r3
 800d6c4:	bfde      	ittt	le
 800d6c6:	2330      	movle	r3, #48	; 0x30
 800d6c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6d0:	1b92      	subs	r2, r2, r6
 800d6d2:	6122      	str	r2, [r4, #16]
 800d6d4:	f8cd a000 	str.w	sl, [sp]
 800d6d8:	464b      	mov	r3, r9
 800d6da:	aa03      	add	r2, sp, #12
 800d6dc:	4621      	mov	r1, r4
 800d6de:	4640      	mov	r0, r8
 800d6e0:	f7ff fee2 	bl	800d4a8 <_printf_common>
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d14c      	bne.n	800d782 <_printf_i+0x1fe>
 800d6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ec:	b004      	add	sp, #16
 800d6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f2:	4835      	ldr	r0, [pc, #212]	; (800d7c8 <_printf_i+0x244>)
 800d6f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	680e      	ldr	r6, [r1, #0]
 800d6fc:	061f      	lsls	r7, r3, #24
 800d6fe:	f856 5b04 	ldr.w	r5, [r6], #4
 800d702:	600e      	str	r6, [r1, #0]
 800d704:	d514      	bpl.n	800d730 <_printf_i+0x1ac>
 800d706:	07d9      	lsls	r1, r3, #31
 800d708:	bf44      	itt	mi
 800d70a:	f043 0320 	orrmi.w	r3, r3, #32
 800d70e:	6023      	strmi	r3, [r4, #0]
 800d710:	b91d      	cbnz	r5, 800d71a <_printf_i+0x196>
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	f023 0320 	bic.w	r3, r3, #32
 800d718:	6023      	str	r3, [r4, #0]
 800d71a:	2310      	movs	r3, #16
 800d71c:	e7b0      	b.n	800d680 <_printf_i+0xfc>
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	f043 0320 	orr.w	r3, r3, #32
 800d724:	6023      	str	r3, [r4, #0]
 800d726:	2378      	movs	r3, #120	; 0x78
 800d728:	4828      	ldr	r0, [pc, #160]	; (800d7cc <_printf_i+0x248>)
 800d72a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d72e:	e7e3      	b.n	800d6f8 <_printf_i+0x174>
 800d730:	065e      	lsls	r6, r3, #25
 800d732:	bf48      	it	mi
 800d734:	b2ad      	uxthmi	r5, r5
 800d736:	e7e6      	b.n	800d706 <_printf_i+0x182>
 800d738:	4616      	mov	r6, r2
 800d73a:	e7bb      	b.n	800d6b4 <_printf_i+0x130>
 800d73c:	680b      	ldr	r3, [r1, #0]
 800d73e:	6826      	ldr	r6, [r4, #0]
 800d740:	6960      	ldr	r0, [r4, #20]
 800d742:	1d1d      	adds	r5, r3, #4
 800d744:	600d      	str	r5, [r1, #0]
 800d746:	0635      	lsls	r5, r6, #24
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	d501      	bpl.n	800d750 <_printf_i+0x1cc>
 800d74c:	6018      	str	r0, [r3, #0]
 800d74e:	e002      	b.n	800d756 <_printf_i+0x1d2>
 800d750:	0671      	lsls	r1, r6, #25
 800d752:	d5fb      	bpl.n	800d74c <_printf_i+0x1c8>
 800d754:	8018      	strh	r0, [r3, #0]
 800d756:	2300      	movs	r3, #0
 800d758:	6123      	str	r3, [r4, #16]
 800d75a:	4616      	mov	r6, r2
 800d75c:	e7ba      	b.n	800d6d4 <_printf_i+0x150>
 800d75e:	680b      	ldr	r3, [r1, #0]
 800d760:	1d1a      	adds	r2, r3, #4
 800d762:	600a      	str	r2, [r1, #0]
 800d764:	681e      	ldr	r6, [r3, #0]
 800d766:	6862      	ldr	r2, [r4, #4]
 800d768:	2100      	movs	r1, #0
 800d76a:	4630      	mov	r0, r6
 800d76c:	f7f2 fd48 	bl	8000200 <memchr>
 800d770:	b108      	cbz	r0, 800d776 <_printf_i+0x1f2>
 800d772:	1b80      	subs	r0, r0, r6
 800d774:	6060      	str	r0, [r4, #4]
 800d776:	6863      	ldr	r3, [r4, #4]
 800d778:	6123      	str	r3, [r4, #16]
 800d77a:	2300      	movs	r3, #0
 800d77c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d780:	e7a8      	b.n	800d6d4 <_printf_i+0x150>
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	4632      	mov	r2, r6
 800d786:	4649      	mov	r1, r9
 800d788:	4640      	mov	r0, r8
 800d78a:	47d0      	blx	sl
 800d78c:	3001      	adds	r0, #1
 800d78e:	d0ab      	beq.n	800d6e8 <_printf_i+0x164>
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	079b      	lsls	r3, r3, #30
 800d794:	d413      	bmi.n	800d7be <_printf_i+0x23a>
 800d796:	68e0      	ldr	r0, [r4, #12]
 800d798:	9b03      	ldr	r3, [sp, #12]
 800d79a:	4298      	cmp	r0, r3
 800d79c:	bfb8      	it	lt
 800d79e:	4618      	movlt	r0, r3
 800d7a0:	e7a4      	b.n	800d6ec <_printf_i+0x168>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	4632      	mov	r2, r6
 800d7a6:	4649      	mov	r1, r9
 800d7a8:	4640      	mov	r0, r8
 800d7aa:	47d0      	blx	sl
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	d09b      	beq.n	800d6e8 <_printf_i+0x164>
 800d7b0:	3501      	adds	r5, #1
 800d7b2:	68e3      	ldr	r3, [r4, #12]
 800d7b4:	9903      	ldr	r1, [sp, #12]
 800d7b6:	1a5b      	subs	r3, r3, r1
 800d7b8:	42ab      	cmp	r3, r5
 800d7ba:	dcf2      	bgt.n	800d7a2 <_printf_i+0x21e>
 800d7bc:	e7eb      	b.n	800d796 <_printf_i+0x212>
 800d7be:	2500      	movs	r5, #0
 800d7c0:	f104 0619 	add.w	r6, r4, #25
 800d7c4:	e7f5      	b.n	800d7b2 <_printf_i+0x22e>
 800d7c6:	bf00      	nop
 800d7c8:	0804052b 	.word	0x0804052b
 800d7cc:	0804053c 	.word	0x0804053c

0800d7d0 <_read_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4d07      	ldr	r5, [pc, #28]	; (800d7f0 <_read_r+0x20>)
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	4608      	mov	r0, r1
 800d7d8:	4611      	mov	r1, r2
 800d7da:	2200      	movs	r2, #0
 800d7dc:	602a      	str	r2, [r5, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	f7fd feb8 	bl	800b554 <_read>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d102      	bne.n	800d7ee <_read_r+0x1e>
 800d7e8:	682b      	ldr	r3, [r5, #0]
 800d7ea:	b103      	cbz	r3, 800d7ee <_read_r+0x1e>
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	2001aa00 	.word	0x2001aa00

0800d7f4 <__swbuf_r>:
 800d7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f6:	460e      	mov	r6, r1
 800d7f8:	4614      	mov	r4, r2
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	b118      	cbz	r0, 800d806 <__swbuf_r+0x12>
 800d7fe:	6983      	ldr	r3, [r0, #24]
 800d800:	b90b      	cbnz	r3, 800d806 <__swbuf_r+0x12>
 800d802:	f7fe ff8f 	bl	800c724 <__sinit>
 800d806:	4b21      	ldr	r3, [pc, #132]	; (800d88c <__swbuf_r+0x98>)
 800d808:	429c      	cmp	r4, r3
 800d80a:	d12b      	bne.n	800d864 <__swbuf_r+0x70>
 800d80c:	686c      	ldr	r4, [r5, #4]
 800d80e:	69a3      	ldr	r3, [r4, #24]
 800d810:	60a3      	str	r3, [r4, #8]
 800d812:	89a3      	ldrh	r3, [r4, #12]
 800d814:	071a      	lsls	r2, r3, #28
 800d816:	d52f      	bpl.n	800d878 <__swbuf_r+0x84>
 800d818:	6923      	ldr	r3, [r4, #16]
 800d81a:	b36b      	cbz	r3, 800d878 <__swbuf_r+0x84>
 800d81c:	6923      	ldr	r3, [r4, #16]
 800d81e:	6820      	ldr	r0, [r4, #0]
 800d820:	1ac0      	subs	r0, r0, r3
 800d822:	6963      	ldr	r3, [r4, #20]
 800d824:	b2f6      	uxtb	r6, r6
 800d826:	4283      	cmp	r3, r0
 800d828:	4637      	mov	r7, r6
 800d82a:	dc04      	bgt.n	800d836 <__swbuf_r+0x42>
 800d82c:	4621      	mov	r1, r4
 800d82e:	4628      	mov	r0, r5
 800d830:	f7ff fb18 	bl	800ce64 <_fflush_r>
 800d834:	bb30      	cbnz	r0, 800d884 <__swbuf_r+0x90>
 800d836:	68a3      	ldr	r3, [r4, #8]
 800d838:	3b01      	subs	r3, #1
 800d83a:	60a3      	str	r3, [r4, #8]
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	1c5a      	adds	r2, r3, #1
 800d840:	6022      	str	r2, [r4, #0]
 800d842:	701e      	strb	r6, [r3, #0]
 800d844:	6963      	ldr	r3, [r4, #20]
 800d846:	3001      	adds	r0, #1
 800d848:	4283      	cmp	r3, r0
 800d84a:	d004      	beq.n	800d856 <__swbuf_r+0x62>
 800d84c:	89a3      	ldrh	r3, [r4, #12]
 800d84e:	07db      	lsls	r3, r3, #31
 800d850:	d506      	bpl.n	800d860 <__swbuf_r+0x6c>
 800d852:	2e0a      	cmp	r6, #10
 800d854:	d104      	bne.n	800d860 <__swbuf_r+0x6c>
 800d856:	4621      	mov	r1, r4
 800d858:	4628      	mov	r0, r5
 800d85a:	f7ff fb03 	bl	800ce64 <_fflush_r>
 800d85e:	b988      	cbnz	r0, 800d884 <__swbuf_r+0x90>
 800d860:	4638      	mov	r0, r7
 800d862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d864:	4b0a      	ldr	r3, [pc, #40]	; (800d890 <__swbuf_r+0x9c>)
 800d866:	429c      	cmp	r4, r3
 800d868:	d101      	bne.n	800d86e <__swbuf_r+0x7a>
 800d86a:	68ac      	ldr	r4, [r5, #8]
 800d86c:	e7cf      	b.n	800d80e <__swbuf_r+0x1a>
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <__swbuf_r+0xa0>)
 800d870:	429c      	cmp	r4, r3
 800d872:	bf08      	it	eq
 800d874:	68ec      	ldreq	r4, [r5, #12]
 800d876:	e7ca      	b.n	800d80e <__swbuf_r+0x1a>
 800d878:	4621      	mov	r1, r4
 800d87a:	4628      	mov	r0, r5
 800d87c:	f000 f80c 	bl	800d898 <__swsetup_r>
 800d880:	2800      	cmp	r0, #0
 800d882:	d0cb      	beq.n	800d81c <__swbuf_r+0x28>
 800d884:	f04f 37ff 	mov.w	r7, #4294967295
 800d888:	e7ea      	b.n	800d860 <__swbuf_r+0x6c>
 800d88a:	bf00      	nop
 800d88c:	08040424 	.word	0x08040424
 800d890:	08040444 	.word	0x08040444
 800d894:	08040404 	.word	0x08040404

0800d898 <__swsetup_r>:
 800d898:	4b32      	ldr	r3, [pc, #200]	; (800d964 <__swsetup_r+0xcc>)
 800d89a:	b570      	push	{r4, r5, r6, lr}
 800d89c:	681d      	ldr	r5, [r3, #0]
 800d89e:	4606      	mov	r6, r0
 800d8a0:	460c      	mov	r4, r1
 800d8a2:	b125      	cbz	r5, 800d8ae <__swsetup_r+0x16>
 800d8a4:	69ab      	ldr	r3, [r5, #24]
 800d8a6:	b913      	cbnz	r3, 800d8ae <__swsetup_r+0x16>
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	f7fe ff3b 	bl	800c724 <__sinit>
 800d8ae:	4b2e      	ldr	r3, [pc, #184]	; (800d968 <__swsetup_r+0xd0>)
 800d8b0:	429c      	cmp	r4, r3
 800d8b2:	d10f      	bne.n	800d8d4 <__swsetup_r+0x3c>
 800d8b4:	686c      	ldr	r4, [r5, #4]
 800d8b6:	89a3      	ldrh	r3, [r4, #12]
 800d8b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8bc:	0719      	lsls	r1, r3, #28
 800d8be:	d42c      	bmi.n	800d91a <__swsetup_r+0x82>
 800d8c0:	06dd      	lsls	r5, r3, #27
 800d8c2:	d411      	bmi.n	800d8e8 <__swsetup_r+0x50>
 800d8c4:	2309      	movs	r3, #9
 800d8c6:	6033      	str	r3, [r6, #0]
 800d8c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d2:	e03e      	b.n	800d952 <__swsetup_r+0xba>
 800d8d4:	4b25      	ldr	r3, [pc, #148]	; (800d96c <__swsetup_r+0xd4>)
 800d8d6:	429c      	cmp	r4, r3
 800d8d8:	d101      	bne.n	800d8de <__swsetup_r+0x46>
 800d8da:	68ac      	ldr	r4, [r5, #8]
 800d8dc:	e7eb      	b.n	800d8b6 <__swsetup_r+0x1e>
 800d8de:	4b24      	ldr	r3, [pc, #144]	; (800d970 <__swsetup_r+0xd8>)
 800d8e0:	429c      	cmp	r4, r3
 800d8e2:	bf08      	it	eq
 800d8e4:	68ec      	ldreq	r4, [r5, #12]
 800d8e6:	e7e6      	b.n	800d8b6 <__swsetup_r+0x1e>
 800d8e8:	0758      	lsls	r0, r3, #29
 800d8ea:	d512      	bpl.n	800d912 <__swsetup_r+0x7a>
 800d8ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8ee:	b141      	cbz	r1, 800d902 <__swsetup_r+0x6a>
 800d8f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8f4:	4299      	cmp	r1, r3
 800d8f6:	d002      	beq.n	800d8fe <__swsetup_r+0x66>
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	f7fe fff7 	bl	800c8ec <_free_r>
 800d8fe:	2300      	movs	r3, #0
 800d900:	6363      	str	r3, [r4, #52]	; 0x34
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d908:	81a3      	strh	r3, [r4, #12]
 800d90a:	2300      	movs	r3, #0
 800d90c:	6063      	str	r3, [r4, #4]
 800d90e:	6923      	ldr	r3, [r4, #16]
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	f043 0308 	orr.w	r3, r3, #8
 800d918:	81a3      	strh	r3, [r4, #12]
 800d91a:	6923      	ldr	r3, [r4, #16]
 800d91c:	b94b      	cbnz	r3, 800d932 <__swsetup_r+0x9a>
 800d91e:	89a3      	ldrh	r3, [r4, #12]
 800d920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d928:	d003      	beq.n	800d932 <__swsetup_r+0x9a>
 800d92a:	4621      	mov	r1, r4
 800d92c:	4630      	mov	r0, r6
 800d92e:	f000 f84d 	bl	800d9cc <__smakebuf_r>
 800d932:	89a0      	ldrh	r0, [r4, #12]
 800d934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d938:	f010 0301 	ands.w	r3, r0, #1
 800d93c:	d00a      	beq.n	800d954 <__swsetup_r+0xbc>
 800d93e:	2300      	movs	r3, #0
 800d940:	60a3      	str	r3, [r4, #8]
 800d942:	6963      	ldr	r3, [r4, #20]
 800d944:	425b      	negs	r3, r3
 800d946:	61a3      	str	r3, [r4, #24]
 800d948:	6923      	ldr	r3, [r4, #16]
 800d94a:	b943      	cbnz	r3, 800d95e <__swsetup_r+0xc6>
 800d94c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d950:	d1ba      	bne.n	800d8c8 <__swsetup_r+0x30>
 800d952:	bd70      	pop	{r4, r5, r6, pc}
 800d954:	0781      	lsls	r1, r0, #30
 800d956:	bf58      	it	pl
 800d958:	6963      	ldrpl	r3, [r4, #20]
 800d95a:	60a3      	str	r3, [r4, #8]
 800d95c:	e7f4      	b.n	800d948 <__swsetup_r+0xb0>
 800d95e:	2000      	movs	r0, #0
 800d960:	e7f7      	b.n	800d952 <__swsetup_r+0xba>
 800d962:	bf00      	nop
 800d964:	200005f8 	.word	0x200005f8
 800d968:	08040424 	.word	0x08040424
 800d96c:	08040444 	.word	0x08040444
 800d970:	08040404 	.word	0x08040404

0800d974 <abort>:
 800d974:	b508      	push	{r3, lr}
 800d976:	2006      	movs	r0, #6
 800d978:	f000 f8d0 	bl	800db1c <raise>
 800d97c:	2001      	movs	r0, #1
 800d97e:	f7fd fddf 	bl	800b540 <_exit>

0800d982 <__swhatbuf_r>:
 800d982:	b570      	push	{r4, r5, r6, lr}
 800d984:	460e      	mov	r6, r1
 800d986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98a:	2900      	cmp	r1, #0
 800d98c:	b096      	sub	sp, #88	; 0x58
 800d98e:	4614      	mov	r4, r2
 800d990:	461d      	mov	r5, r3
 800d992:	da07      	bge.n	800d9a4 <__swhatbuf_r+0x22>
 800d994:	2300      	movs	r3, #0
 800d996:	602b      	str	r3, [r5, #0]
 800d998:	89b3      	ldrh	r3, [r6, #12]
 800d99a:	061a      	lsls	r2, r3, #24
 800d99c:	d410      	bmi.n	800d9c0 <__swhatbuf_r+0x3e>
 800d99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9a2:	e00e      	b.n	800d9c2 <__swhatbuf_r+0x40>
 800d9a4:	466a      	mov	r2, sp
 800d9a6:	f000 f8d5 	bl	800db54 <_fstat_r>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	dbf2      	blt.n	800d994 <__swhatbuf_r+0x12>
 800d9ae:	9a01      	ldr	r2, [sp, #4]
 800d9b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9b8:	425a      	negs	r2, r3
 800d9ba:	415a      	adcs	r2, r3
 800d9bc:	602a      	str	r2, [r5, #0]
 800d9be:	e7ee      	b.n	800d99e <__swhatbuf_r+0x1c>
 800d9c0:	2340      	movs	r3, #64	; 0x40
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	b016      	add	sp, #88	; 0x58
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9cc <__smakebuf_r>:
 800d9cc:	898b      	ldrh	r3, [r1, #12]
 800d9ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9d0:	079d      	lsls	r5, r3, #30
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	d507      	bpl.n	800d9e8 <__smakebuf_r+0x1c>
 800d9d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	6123      	str	r3, [r4, #16]
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	6163      	str	r3, [r4, #20]
 800d9e4:	b002      	add	sp, #8
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}
 800d9e8:	ab01      	add	r3, sp, #4
 800d9ea:	466a      	mov	r2, sp
 800d9ec:	f7ff ffc9 	bl	800d982 <__swhatbuf_r>
 800d9f0:	9900      	ldr	r1, [sp, #0]
 800d9f2:	4605      	mov	r5, r0
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	f7fe ffc9 	bl	800c98c <_malloc_r>
 800d9fa:	b948      	cbnz	r0, 800da10 <__smakebuf_r+0x44>
 800d9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da00:	059a      	lsls	r2, r3, #22
 800da02:	d4ef      	bmi.n	800d9e4 <__smakebuf_r+0x18>
 800da04:	f023 0303 	bic.w	r3, r3, #3
 800da08:	f043 0302 	orr.w	r3, r3, #2
 800da0c:	81a3      	strh	r3, [r4, #12]
 800da0e:	e7e3      	b.n	800d9d8 <__smakebuf_r+0xc>
 800da10:	4b0d      	ldr	r3, [pc, #52]	; (800da48 <__smakebuf_r+0x7c>)
 800da12:	62b3      	str	r3, [r6, #40]	; 0x28
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	6020      	str	r0, [r4, #0]
 800da18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da1c:	81a3      	strh	r3, [r4, #12]
 800da1e:	9b00      	ldr	r3, [sp, #0]
 800da20:	6163      	str	r3, [r4, #20]
 800da22:	9b01      	ldr	r3, [sp, #4]
 800da24:	6120      	str	r0, [r4, #16]
 800da26:	b15b      	cbz	r3, 800da40 <__smakebuf_r+0x74>
 800da28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da2c:	4630      	mov	r0, r6
 800da2e:	f000 f8a3 	bl	800db78 <_isatty_r>
 800da32:	b128      	cbz	r0, 800da40 <__smakebuf_r+0x74>
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	f023 0303 	bic.w	r3, r3, #3
 800da3a:	f043 0301 	orr.w	r3, r3, #1
 800da3e:	81a3      	strh	r3, [r4, #12]
 800da40:	89a0      	ldrh	r0, [r4, #12]
 800da42:	4305      	orrs	r5, r0
 800da44:	81a5      	strh	r5, [r4, #12]
 800da46:	e7cd      	b.n	800d9e4 <__smakebuf_r+0x18>
 800da48:	0800c6bd 	.word	0x0800c6bd

0800da4c <memmove>:
 800da4c:	4288      	cmp	r0, r1
 800da4e:	b510      	push	{r4, lr}
 800da50:	eb01 0402 	add.w	r4, r1, r2
 800da54:	d902      	bls.n	800da5c <memmove+0x10>
 800da56:	4284      	cmp	r4, r0
 800da58:	4623      	mov	r3, r4
 800da5a:	d807      	bhi.n	800da6c <memmove+0x20>
 800da5c:	1e43      	subs	r3, r0, #1
 800da5e:	42a1      	cmp	r1, r4
 800da60:	d008      	beq.n	800da74 <memmove+0x28>
 800da62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da6a:	e7f8      	b.n	800da5e <memmove+0x12>
 800da6c:	4402      	add	r2, r0
 800da6e:	4601      	mov	r1, r0
 800da70:	428a      	cmp	r2, r1
 800da72:	d100      	bne.n	800da76 <memmove+0x2a>
 800da74:	bd10      	pop	{r4, pc}
 800da76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da7e:	e7f7      	b.n	800da70 <memmove+0x24>

0800da80 <_realloc_r>:
 800da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da82:	4607      	mov	r7, r0
 800da84:	4614      	mov	r4, r2
 800da86:	460e      	mov	r6, r1
 800da88:	b921      	cbnz	r1, 800da94 <_realloc_r+0x14>
 800da8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da8e:	4611      	mov	r1, r2
 800da90:	f7fe bf7c 	b.w	800c98c <_malloc_r>
 800da94:	b922      	cbnz	r2, 800daa0 <_realloc_r+0x20>
 800da96:	f7fe ff29 	bl	800c8ec <_free_r>
 800da9a:	4625      	mov	r5, r4
 800da9c:	4628      	mov	r0, r5
 800da9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa0:	f000 f87a 	bl	800db98 <_malloc_usable_size_r>
 800daa4:	42a0      	cmp	r0, r4
 800daa6:	d20f      	bcs.n	800dac8 <_realloc_r+0x48>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4638      	mov	r0, r7
 800daac:	f7fe ff6e 	bl	800c98c <_malloc_r>
 800dab0:	4605      	mov	r5, r0
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0f2      	beq.n	800da9c <_realloc_r+0x1c>
 800dab6:	4631      	mov	r1, r6
 800dab8:	4622      	mov	r2, r4
 800daba:	f7fe ff01 	bl	800c8c0 <memcpy>
 800dabe:	4631      	mov	r1, r6
 800dac0:	4638      	mov	r0, r7
 800dac2:	f7fe ff13 	bl	800c8ec <_free_r>
 800dac6:	e7e9      	b.n	800da9c <_realloc_r+0x1c>
 800dac8:	4635      	mov	r5, r6
 800daca:	e7e7      	b.n	800da9c <_realloc_r+0x1c>

0800dacc <_raise_r>:
 800dacc:	291f      	cmp	r1, #31
 800dace:	b538      	push	{r3, r4, r5, lr}
 800dad0:	4604      	mov	r4, r0
 800dad2:	460d      	mov	r5, r1
 800dad4:	d904      	bls.n	800dae0 <_raise_r+0x14>
 800dad6:	2316      	movs	r3, #22
 800dad8:	6003      	str	r3, [r0, #0]
 800dada:	f04f 30ff 	mov.w	r0, #4294967295
 800dade:	bd38      	pop	{r3, r4, r5, pc}
 800dae0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dae2:	b112      	cbz	r2, 800daea <_raise_r+0x1e>
 800dae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dae8:	b94b      	cbnz	r3, 800dafe <_raise_r+0x32>
 800daea:	4620      	mov	r0, r4
 800daec:	f000 f830 	bl	800db50 <_getpid_r>
 800daf0:	462a      	mov	r2, r5
 800daf2:	4601      	mov	r1, r0
 800daf4:	4620      	mov	r0, r4
 800daf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dafa:	f000 b817 	b.w	800db2c <_kill_r>
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d00a      	beq.n	800db18 <_raise_r+0x4c>
 800db02:	1c59      	adds	r1, r3, #1
 800db04:	d103      	bne.n	800db0e <_raise_r+0x42>
 800db06:	2316      	movs	r3, #22
 800db08:	6003      	str	r3, [r0, #0]
 800db0a:	2001      	movs	r0, #1
 800db0c:	e7e7      	b.n	800dade <_raise_r+0x12>
 800db0e:	2400      	movs	r4, #0
 800db10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db14:	4628      	mov	r0, r5
 800db16:	4798      	blx	r3
 800db18:	2000      	movs	r0, #0
 800db1a:	e7e0      	b.n	800dade <_raise_r+0x12>

0800db1c <raise>:
 800db1c:	4b02      	ldr	r3, [pc, #8]	; (800db28 <raise+0xc>)
 800db1e:	4601      	mov	r1, r0
 800db20:	6818      	ldr	r0, [r3, #0]
 800db22:	f7ff bfd3 	b.w	800dacc <_raise_r>
 800db26:	bf00      	nop
 800db28:	200005f8 	.word	0x200005f8

0800db2c <_kill_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d07      	ldr	r5, [pc, #28]	; (800db4c <_kill_r+0x20>)
 800db30:	2300      	movs	r3, #0
 800db32:	4604      	mov	r4, r0
 800db34:	4608      	mov	r0, r1
 800db36:	4611      	mov	r1, r2
 800db38:	602b      	str	r3, [r5, #0]
 800db3a:	f7fd fcf1 	bl	800b520 <_kill>
 800db3e:	1c43      	adds	r3, r0, #1
 800db40:	d102      	bne.n	800db48 <_kill_r+0x1c>
 800db42:	682b      	ldr	r3, [r5, #0]
 800db44:	b103      	cbz	r3, 800db48 <_kill_r+0x1c>
 800db46:	6023      	str	r3, [r4, #0]
 800db48:	bd38      	pop	{r3, r4, r5, pc}
 800db4a:	bf00      	nop
 800db4c:	2001aa00 	.word	0x2001aa00

0800db50 <_getpid_r>:
 800db50:	f7fd bcde 	b.w	800b510 <_getpid>

0800db54 <_fstat_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	4d07      	ldr	r5, [pc, #28]	; (800db74 <_fstat_r+0x20>)
 800db58:	2300      	movs	r3, #0
 800db5a:	4604      	mov	r4, r0
 800db5c:	4608      	mov	r0, r1
 800db5e:	4611      	mov	r1, r2
 800db60:	602b      	str	r3, [r5, #0]
 800db62:	f7fd fd3c 	bl	800b5de <_fstat>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d102      	bne.n	800db70 <_fstat_r+0x1c>
 800db6a:	682b      	ldr	r3, [r5, #0]
 800db6c:	b103      	cbz	r3, 800db70 <_fstat_r+0x1c>
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	bd38      	pop	{r3, r4, r5, pc}
 800db72:	bf00      	nop
 800db74:	2001aa00 	.word	0x2001aa00

0800db78 <_isatty_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4d06      	ldr	r5, [pc, #24]	; (800db94 <_isatty_r+0x1c>)
 800db7c:	2300      	movs	r3, #0
 800db7e:	4604      	mov	r4, r0
 800db80:	4608      	mov	r0, r1
 800db82:	602b      	str	r3, [r5, #0]
 800db84:	f7fd fd3b 	bl	800b5fe <_isatty>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_isatty_r+0x1a>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_isatty_r+0x1a>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	2001aa00 	.word	0x2001aa00

0800db98 <_malloc_usable_size_r>:
 800db98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db9c:	1f18      	subs	r0, r3, #4
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	bfbc      	itt	lt
 800dba2:	580b      	ldrlt	r3, [r1, r0]
 800dba4:	18c0      	addlt	r0, r0, r3
 800dba6:	4770      	bx	lr

0800dba8 <fmod>:
 800dba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbaa:	ed2d 8b02 	vpush	{d8}
 800dbae:	ec57 6b10 	vmov	r6, r7, d0
 800dbb2:	ec55 4b11 	vmov	r4, r5, d1
 800dbb6:	f000 f867 	bl	800dc88 <__ieee754_fmod>
 800dbba:	4b18      	ldr	r3, [pc, #96]	; (800dc1c <fmod+0x74>)
 800dbbc:	eeb0 8a40 	vmov.f32	s16, s0
 800dbc0:	eef0 8a60 	vmov.f32	s17, s1
 800dbc4:	f993 3000 	ldrsb.w	r3, [r3]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	d020      	beq.n	800dc0e <fmod+0x66>
 800dbcc:	4622      	mov	r2, r4
 800dbce:	462b      	mov	r3, r5
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	f7f2 ffba 	bl	8000b4c <__aeabi_dcmpun>
 800dbd8:	b9c8      	cbnz	r0, 800dc0e <fmod+0x66>
 800dbda:	4632      	mov	r2, r6
 800dbdc:	463b      	mov	r3, r7
 800dbde:	4630      	mov	r0, r6
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	f7f2 ffb3 	bl	8000b4c <__aeabi_dcmpun>
 800dbe6:	b990      	cbnz	r0, 800dc0e <fmod+0x66>
 800dbe8:	2200      	movs	r2, #0
 800dbea:	2300      	movs	r3, #0
 800dbec:	4620      	mov	r0, r4
 800dbee:	4629      	mov	r1, r5
 800dbf0:	f7f2 ff7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800dbf4:	b158      	cbz	r0, 800dc0e <fmod+0x66>
 800dbf6:	f7fe fd37 	bl	800c668 <__errno>
 800dbfa:	2321      	movs	r3, #33	; 0x21
 800dbfc:	6003      	str	r3, [r0, #0]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	2300      	movs	r3, #0
 800dc02:	4610      	mov	r0, r2
 800dc04:	4619      	mov	r1, r3
 800dc06:	f7f2 fe31 	bl	800086c <__aeabi_ddiv>
 800dc0a:	ec41 0b18 	vmov	d8, r0, r1
 800dc0e:	eeb0 0a48 	vmov.f32	s0, s16
 800dc12:	eef0 0a68 	vmov.f32	s1, s17
 800dc16:	ecbd 8b02 	vpop	{d8}
 800dc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc1c:	2000065c 	.word	0x2000065c

0800dc20 <sqrt>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	ed2d 8b02 	vpush	{d8}
 800dc26:	ec55 4b10 	vmov	r4, r5, d0
 800dc2a:	f000 f93f 	bl	800deac <__ieee754_sqrt>
 800dc2e:	4b15      	ldr	r3, [pc, #84]	; (800dc84 <sqrt+0x64>)
 800dc30:	eeb0 8a40 	vmov.f32	s16, s0
 800dc34:	eef0 8a60 	vmov.f32	s17, s1
 800dc38:	f993 3000 	ldrsb.w	r3, [r3]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	d019      	beq.n	800dc74 <sqrt+0x54>
 800dc40:	4622      	mov	r2, r4
 800dc42:	462b      	mov	r3, r5
 800dc44:	4620      	mov	r0, r4
 800dc46:	4629      	mov	r1, r5
 800dc48:	f7f2 ff80 	bl	8000b4c <__aeabi_dcmpun>
 800dc4c:	b990      	cbnz	r0, 800dc74 <sqrt+0x54>
 800dc4e:	2200      	movs	r2, #0
 800dc50:	2300      	movs	r3, #0
 800dc52:	4620      	mov	r0, r4
 800dc54:	4629      	mov	r1, r5
 800dc56:	f7f2 ff51 	bl	8000afc <__aeabi_dcmplt>
 800dc5a:	b158      	cbz	r0, 800dc74 <sqrt+0x54>
 800dc5c:	f7fe fd04 	bl	800c668 <__errno>
 800dc60:	2321      	movs	r3, #33	; 0x21
 800dc62:	6003      	str	r3, [r0, #0]
 800dc64:	2200      	movs	r2, #0
 800dc66:	2300      	movs	r3, #0
 800dc68:	4610      	mov	r0, r2
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	f7f2 fdfe 	bl	800086c <__aeabi_ddiv>
 800dc70:	ec41 0b18 	vmov	d8, r0, r1
 800dc74:	eeb0 0a48 	vmov.f32	s0, s16
 800dc78:	eef0 0a68 	vmov.f32	s1, s17
 800dc7c:	ecbd 8b02 	vpop	{d8}
 800dc80:	bd38      	pop	{r3, r4, r5, pc}
 800dc82:	bf00      	nop
 800dc84:	2000065c 	.word	0x2000065c

0800dc88 <__ieee754_fmod>:
 800dc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8c:	ec53 2b11 	vmov	r2, r3, d1
 800dc90:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800dc94:	ea5e 0402 	orrs.w	r4, lr, r2
 800dc98:	ec51 0b10 	vmov	r0, r1, d0
 800dc9c:	ee11 7a10 	vmov	r7, s2
 800dca0:	ee11 ca10 	vmov	ip, s2
 800dca4:	461e      	mov	r6, r3
 800dca6:	d00d      	beq.n	800dcc4 <__ieee754_fmod+0x3c>
 800dca8:	4c7a      	ldr	r4, [pc, #488]	; (800de94 <__ieee754_fmod+0x20c>)
 800dcaa:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800dcae:	45a0      	cmp	r8, r4
 800dcb0:	4689      	mov	r9, r1
 800dcb2:	dc07      	bgt.n	800dcc4 <__ieee754_fmod+0x3c>
 800dcb4:	4254      	negs	r4, r2
 800dcb6:	4d78      	ldr	r5, [pc, #480]	; (800de98 <__ieee754_fmod+0x210>)
 800dcb8:	4314      	orrs	r4, r2
 800dcba:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800dcbe:	42ac      	cmp	r4, r5
 800dcc0:	46ab      	mov	fp, r5
 800dcc2:	d909      	bls.n	800dcd8 <__ieee754_fmod+0x50>
 800dcc4:	f7f2 fca8 	bl	8000618 <__aeabi_dmul>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	f7f2 fdce 	bl	800086c <__aeabi_ddiv>
 800dcd0:	ec41 0b10 	vmov	d0, r0, r1
 800dcd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd8:	45f0      	cmp	r8, lr
 800dcda:	ee10 aa10 	vmov	sl, s0
 800dcde:	ee10 4a10 	vmov	r4, s0
 800dce2:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dce6:	dc0a      	bgt.n	800dcfe <__ieee754_fmod+0x76>
 800dce8:	dbf2      	blt.n	800dcd0 <__ieee754_fmod+0x48>
 800dcea:	4290      	cmp	r0, r2
 800dcec:	d3f0      	bcc.n	800dcd0 <__ieee754_fmod+0x48>
 800dcee:	d106      	bne.n	800dcfe <__ieee754_fmod+0x76>
 800dcf0:	4a6a      	ldr	r2, [pc, #424]	; (800de9c <__ieee754_fmod+0x214>)
 800dcf2:	0fed      	lsrs	r5, r5, #31
 800dcf4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800dcf8:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dcfc:	e7e8      	b.n	800dcd0 <__ieee754_fmod+0x48>
 800dcfe:	ea19 0f0b 	tst.w	r9, fp
 800dd02:	d14a      	bne.n	800dd9a <__ieee754_fmod+0x112>
 800dd04:	f1b8 0f00 	cmp.w	r8, #0
 800dd08:	d13f      	bne.n	800dd8a <__ieee754_fmod+0x102>
 800dd0a:	4965      	ldr	r1, [pc, #404]	; (800dea0 <__ieee754_fmod+0x218>)
 800dd0c:	4653      	mov	r3, sl
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	dc38      	bgt.n	800dd84 <__ieee754_fmod+0xfc>
 800dd12:	4b61      	ldr	r3, [pc, #388]	; (800de98 <__ieee754_fmod+0x210>)
 800dd14:	4033      	ands	r3, r6
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d14f      	bne.n	800ddba <__ieee754_fmod+0x132>
 800dd1a:	f1be 0f00 	cmp.w	lr, #0
 800dd1e:	d144      	bne.n	800ddaa <__ieee754_fmod+0x122>
 800dd20:	4a5f      	ldr	r2, [pc, #380]	; (800dea0 <__ieee754_fmod+0x218>)
 800dd22:	463b      	mov	r3, r7
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	dc3d      	bgt.n	800dda4 <__ieee754_fmod+0x11c>
 800dd28:	4b5e      	ldr	r3, [pc, #376]	; (800dea4 <__ieee754_fmod+0x21c>)
 800dd2a:	4299      	cmp	r1, r3
 800dd2c:	db4a      	blt.n	800ddc4 <__ieee754_fmod+0x13c>
 800dd2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd36:	485b      	ldr	r0, [pc, #364]	; (800dea4 <__ieee754_fmod+0x21c>)
 800dd38:	4282      	cmp	r2, r0
 800dd3a:	db57      	blt.n	800ddec <__ieee754_fmod+0x164>
 800dd3c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800dd40:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800dd44:	1a89      	subs	r1, r1, r2
 800dd46:	1b98      	subs	r0, r3, r6
 800dd48:	eba4 070c 	sub.w	r7, r4, ip
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	d164      	bne.n	800de1a <__ieee754_fmod+0x192>
 800dd50:	4564      	cmp	r4, ip
 800dd52:	bf38      	it	cc
 800dd54:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	bfa4      	itt	ge
 800dd5c:	463c      	movge	r4, r7
 800dd5e:	4603      	movge	r3, r0
 800dd60:	ea53 0104 	orrs.w	r1, r3, r4
 800dd64:	d0c4      	beq.n	800dcf0 <__ieee754_fmod+0x68>
 800dd66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd6a:	db6b      	blt.n	800de44 <__ieee754_fmod+0x1bc>
 800dd6c:	494d      	ldr	r1, [pc, #308]	; (800dea4 <__ieee754_fmod+0x21c>)
 800dd6e:	428a      	cmp	r2, r1
 800dd70:	db6e      	blt.n	800de50 <__ieee754_fmod+0x1c8>
 800dd72:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd76:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800dd7a:	431d      	orrs	r5, r3
 800dd7c:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800dd80:	4620      	mov	r0, r4
 800dd82:	e7a5      	b.n	800dcd0 <__ieee754_fmod+0x48>
 800dd84:	3901      	subs	r1, #1
 800dd86:	005b      	lsls	r3, r3, #1
 800dd88:	e7c1      	b.n	800dd0e <__ieee754_fmod+0x86>
 800dd8a:	4946      	ldr	r1, [pc, #280]	; (800dea4 <__ieee754_fmod+0x21c>)
 800dd8c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	ddbe      	ble.n	800dd12 <__ieee754_fmod+0x8a>
 800dd94:	3901      	subs	r1, #1
 800dd96:	005b      	lsls	r3, r3, #1
 800dd98:	e7fa      	b.n	800dd90 <__ieee754_fmod+0x108>
 800dd9a:	ea4f 5128 	mov.w	r1, r8, asr #20
 800dd9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dda2:	e7b6      	b.n	800dd12 <__ieee754_fmod+0x8a>
 800dda4:	3a01      	subs	r2, #1
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	e7bc      	b.n	800dd24 <__ieee754_fmod+0x9c>
 800ddaa:	4a3e      	ldr	r2, [pc, #248]	; (800dea4 <__ieee754_fmod+0x21c>)
 800ddac:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	ddb9      	ble.n	800dd28 <__ieee754_fmod+0xa0>
 800ddb4:	3a01      	subs	r2, #1
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	e7fa      	b.n	800ddb0 <__ieee754_fmod+0x128>
 800ddba:	ea4f 522e 	mov.w	r2, lr, asr #20
 800ddbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ddc2:	e7b1      	b.n	800dd28 <__ieee754_fmod+0xa0>
 800ddc4:	1a5c      	subs	r4, r3, r1
 800ddc6:	2c1f      	cmp	r4, #31
 800ddc8:	dc0a      	bgt.n	800dde0 <__ieee754_fmod+0x158>
 800ddca:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800ddce:	fa08 f804 	lsl.w	r8, r8, r4
 800ddd2:	fa2a f303 	lsr.w	r3, sl, r3
 800ddd6:	ea43 0308 	orr.w	r3, r3, r8
 800ddda:	fa0a f404 	lsl.w	r4, sl, r4
 800ddde:	e7aa      	b.n	800dd36 <__ieee754_fmod+0xae>
 800dde0:	4b31      	ldr	r3, [pc, #196]	; (800dea8 <__ieee754_fmod+0x220>)
 800dde2:	1a5b      	subs	r3, r3, r1
 800dde4:	fa0a f303 	lsl.w	r3, sl, r3
 800dde8:	2400      	movs	r4, #0
 800ddea:	e7a4      	b.n	800dd36 <__ieee754_fmod+0xae>
 800ddec:	eba0 0c02 	sub.w	ip, r0, r2
 800ddf0:	f1bc 0f1f 	cmp.w	ip, #31
 800ddf4:	dc0a      	bgt.n	800de0c <__ieee754_fmod+0x184>
 800ddf6:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800ddfa:	fa0e fe0c 	lsl.w	lr, lr, ip
 800ddfe:	fa27 f606 	lsr.w	r6, r7, r6
 800de02:	ea46 060e 	orr.w	r6, r6, lr
 800de06:	fa07 fc0c 	lsl.w	ip, r7, ip
 800de0a:	e79b      	b.n	800dd44 <__ieee754_fmod+0xbc>
 800de0c:	4e26      	ldr	r6, [pc, #152]	; (800dea8 <__ieee754_fmod+0x220>)
 800de0e:	1ab6      	subs	r6, r6, r2
 800de10:	fa07 f606 	lsl.w	r6, r7, r6
 800de14:	f04f 0c00 	mov.w	ip, #0
 800de18:	e794      	b.n	800dd44 <__ieee754_fmod+0xbc>
 800de1a:	4564      	cmp	r4, ip
 800de1c:	bf38      	it	cc
 800de1e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800de22:	2800      	cmp	r0, #0
 800de24:	da05      	bge.n	800de32 <__ieee754_fmod+0x1aa>
 800de26:	0fe0      	lsrs	r0, r4, #31
 800de28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800de2c:	0064      	lsls	r4, r4, #1
 800de2e:	3901      	subs	r1, #1
 800de30:	e789      	b.n	800dd46 <__ieee754_fmod+0xbe>
 800de32:	ea50 0307 	orrs.w	r3, r0, r7
 800de36:	f43f af5b 	beq.w	800dcf0 <__ieee754_fmod+0x68>
 800de3a:	0ffb      	lsrs	r3, r7, #31
 800de3c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800de40:	007c      	lsls	r4, r7, #1
 800de42:	e7f4      	b.n	800de2e <__ieee754_fmod+0x1a6>
 800de44:	0fe1      	lsrs	r1, r4, #31
 800de46:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800de4a:	0064      	lsls	r4, r4, #1
 800de4c:	3a01      	subs	r2, #1
 800de4e:	e78a      	b.n	800dd66 <__ieee754_fmod+0xde>
 800de50:	1a89      	subs	r1, r1, r2
 800de52:	2914      	cmp	r1, #20
 800de54:	dc0a      	bgt.n	800de6c <__ieee754_fmod+0x1e4>
 800de56:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800de5a:	fa03 f202 	lsl.w	r2, r3, r2
 800de5e:	40cc      	lsrs	r4, r1
 800de60:	4322      	orrs	r2, r4
 800de62:	410b      	asrs	r3, r1
 800de64:	ea43 0105 	orr.w	r1, r3, r5
 800de68:	4610      	mov	r0, r2
 800de6a:	e731      	b.n	800dcd0 <__ieee754_fmod+0x48>
 800de6c:	291f      	cmp	r1, #31
 800de6e:	dc07      	bgt.n	800de80 <__ieee754_fmod+0x1f8>
 800de70:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800de74:	40cc      	lsrs	r4, r1
 800de76:	fa03 f202 	lsl.w	r2, r3, r2
 800de7a:	4322      	orrs	r2, r4
 800de7c:	462b      	mov	r3, r5
 800de7e:	e7f1      	b.n	800de64 <__ieee754_fmod+0x1dc>
 800de80:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800de84:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de88:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800de8c:	32e2      	adds	r2, #226	; 0xe2
 800de8e:	fa43 f202 	asr.w	r2, r3, r2
 800de92:	e7f3      	b.n	800de7c <__ieee754_fmod+0x1f4>
 800de94:	7fefffff 	.word	0x7fefffff
 800de98:	7ff00000 	.word	0x7ff00000
 800de9c:	08040550 	.word	0x08040550
 800dea0:	fffffbed 	.word	0xfffffbed
 800dea4:	fffffc02 	.word	0xfffffc02
 800dea8:	fffffbe2 	.word	0xfffffbe2

0800deac <__ieee754_sqrt>:
 800deac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb0:	ec55 4b10 	vmov	r4, r5, d0
 800deb4:	4e56      	ldr	r6, [pc, #344]	; (800e010 <__ieee754_sqrt+0x164>)
 800deb6:	43ae      	bics	r6, r5
 800deb8:	ee10 0a10 	vmov	r0, s0
 800debc:	ee10 3a10 	vmov	r3, s0
 800dec0:	4629      	mov	r1, r5
 800dec2:	462a      	mov	r2, r5
 800dec4:	d110      	bne.n	800dee8 <__ieee754_sqrt+0x3c>
 800dec6:	ee10 2a10 	vmov	r2, s0
 800deca:	462b      	mov	r3, r5
 800decc:	f7f2 fba4 	bl	8000618 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4620      	mov	r0, r4
 800ded6:	4629      	mov	r1, r5
 800ded8:	f7f2 f9e8 	bl	80002ac <__adddf3>
 800dedc:	4604      	mov	r4, r0
 800dede:	460d      	mov	r5, r1
 800dee0:	ec45 4b10 	vmov	d0, r4, r5
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee8:	2d00      	cmp	r5, #0
 800deea:	dc10      	bgt.n	800df0e <__ieee754_sqrt+0x62>
 800deec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800def0:	4330      	orrs	r0, r6
 800def2:	d0f5      	beq.n	800dee0 <__ieee754_sqrt+0x34>
 800def4:	b15d      	cbz	r5, 800df0e <__ieee754_sqrt+0x62>
 800def6:	ee10 2a10 	vmov	r2, s0
 800defa:	462b      	mov	r3, r5
 800defc:	ee10 0a10 	vmov	r0, s0
 800df00:	f7f2 f9d2 	bl	80002a8 <__aeabi_dsub>
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	f7f2 fcb0 	bl	800086c <__aeabi_ddiv>
 800df0c:	e7e6      	b.n	800dedc <__ieee754_sqrt+0x30>
 800df0e:	1509      	asrs	r1, r1, #20
 800df10:	d076      	beq.n	800e000 <__ieee754_sqrt+0x154>
 800df12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800df16:	07ce      	lsls	r6, r1, #31
 800df18:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800df1c:	bf5e      	ittt	pl
 800df1e:	0fda      	lsrpl	r2, r3, #31
 800df20:	005b      	lslpl	r3, r3, #1
 800df22:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800df26:	0fda      	lsrs	r2, r3, #31
 800df28:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800df2c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800df30:	2000      	movs	r0, #0
 800df32:	106d      	asrs	r5, r5, #1
 800df34:	005b      	lsls	r3, r3, #1
 800df36:	f04f 0e16 	mov.w	lr, #22
 800df3a:	4684      	mov	ip, r0
 800df3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800df40:	eb0c 0401 	add.w	r4, ip, r1
 800df44:	4294      	cmp	r4, r2
 800df46:	bfde      	ittt	le
 800df48:	1b12      	suble	r2, r2, r4
 800df4a:	eb04 0c01 	addle.w	ip, r4, r1
 800df4e:	1840      	addle	r0, r0, r1
 800df50:	0052      	lsls	r2, r2, #1
 800df52:	f1be 0e01 	subs.w	lr, lr, #1
 800df56:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800df5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800df5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df62:	d1ed      	bne.n	800df40 <__ieee754_sqrt+0x94>
 800df64:	4671      	mov	r1, lr
 800df66:	2720      	movs	r7, #32
 800df68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800df6c:	4562      	cmp	r2, ip
 800df6e:	eb04 060e 	add.w	r6, r4, lr
 800df72:	dc02      	bgt.n	800df7a <__ieee754_sqrt+0xce>
 800df74:	d113      	bne.n	800df9e <__ieee754_sqrt+0xf2>
 800df76:	429e      	cmp	r6, r3
 800df78:	d811      	bhi.n	800df9e <__ieee754_sqrt+0xf2>
 800df7a:	2e00      	cmp	r6, #0
 800df7c:	eb06 0e04 	add.w	lr, r6, r4
 800df80:	da43      	bge.n	800e00a <__ieee754_sqrt+0x15e>
 800df82:	f1be 0f00 	cmp.w	lr, #0
 800df86:	db40      	blt.n	800e00a <__ieee754_sqrt+0x15e>
 800df88:	f10c 0801 	add.w	r8, ip, #1
 800df8c:	eba2 020c 	sub.w	r2, r2, ip
 800df90:	429e      	cmp	r6, r3
 800df92:	bf88      	it	hi
 800df94:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800df98:	1b9b      	subs	r3, r3, r6
 800df9a:	4421      	add	r1, r4
 800df9c:	46c4      	mov	ip, r8
 800df9e:	0052      	lsls	r2, r2, #1
 800dfa0:	3f01      	subs	r7, #1
 800dfa2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800dfa6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800dfaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfae:	d1dd      	bne.n	800df6c <__ieee754_sqrt+0xc0>
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	d006      	beq.n	800dfc2 <__ieee754_sqrt+0x116>
 800dfb4:	1c4c      	adds	r4, r1, #1
 800dfb6:	bf13      	iteet	ne
 800dfb8:	3101      	addne	r1, #1
 800dfba:	3001      	addeq	r0, #1
 800dfbc:	4639      	moveq	r1, r7
 800dfbe:	f021 0101 	bicne.w	r1, r1, #1
 800dfc2:	1043      	asrs	r3, r0, #1
 800dfc4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dfc8:	0849      	lsrs	r1, r1, #1
 800dfca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dfce:	07c2      	lsls	r2, r0, #31
 800dfd0:	bf48      	it	mi
 800dfd2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800dfd6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800dfda:	460c      	mov	r4, r1
 800dfdc:	463d      	mov	r5, r7
 800dfde:	e77f      	b.n	800dee0 <__ieee754_sqrt+0x34>
 800dfe0:	0ada      	lsrs	r2, r3, #11
 800dfe2:	3815      	subs	r0, #21
 800dfe4:	055b      	lsls	r3, r3, #21
 800dfe6:	2a00      	cmp	r2, #0
 800dfe8:	d0fa      	beq.n	800dfe0 <__ieee754_sqrt+0x134>
 800dfea:	02d7      	lsls	r7, r2, #11
 800dfec:	d50a      	bpl.n	800e004 <__ieee754_sqrt+0x158>
 800dfee:	f1c1 0420 	rsb	r4, r1, #32
 800dff2:	fa23 f404 	lsr.w	r4, r3, r4
 800dff6:	1e4d      	subs	r5, r1, #1
 800dff8:	408b      	lsls	r3, r1
 800dffa:	4322      	orrs	r2, r4
 800dffc:	1b41      	subs	r1, r0, r5
 800dffe:	e788      	b.n	800df12 <__ieee754_sqrt+0x66>
 800e000:	4608      	mov	r0, r1
 800e002:	e7f0      	b.n	800dfe6 <__ieee754_sqrt+0x13a>
 800e004:	0052      	lsls	r2, r2, #1
 800e006:	3101      	adds	r1, #1
 800e008:	e7ef      	b.n	800dfea <__ieee754_sqrt+0x13e>
 800e00a:	46e0      	mov	r8, ip
 800e00c:	e7be      	b.n	800df8c <__ieee754_sqrt+0xe0>
 800e00e:	bf00      	nop
 800e010:	7ff00000 	.word	0x7ff00000

0800e014 <_init>:
 800e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e016:	bf00      	nop
 800e018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e01a:	bc08      	pop	{r3}
 800e01c:	469e      	mov	lr, r3
 800e01e:	4770      	bx	lr

0800e020 <_fini>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	bf00      	nop
 800e024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e026:	bc08      	pop	{r3}
 800e028:	469e      	mov	lr, r3
 800e02a:	4770      	bx	lr
